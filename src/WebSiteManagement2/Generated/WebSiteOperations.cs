// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.WebSites;
using Microsoft.Azure.Management.WebSites.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.WebSites
{
    /// <summary>
    /// Operations for managing the web sites in a web space.
    /// </summary>
    internal partial class WebSiteOperations : IServiceOperations<WebSiteManagementClient>, IWebSiteOperations
    {
        /// <summary>
        /// Initializes a new instance of the WebSiteOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal WebSiteOperations(WebSiteManagementClient client)
        {
            this._client = client;
        }
        
        private WebSiteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.WebSites.WebSiteManagementClient.
        /// </summary>
        public WebSiteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public async Task<WebSiteCreateResponse> CreateOrUpdateAsync(string resourceGroupName, WebSiteCreateResourceParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.WebSiteProperties == null)
            {
                throw new ArgumentNullException("parameters.WebSiteProperties");
            }
            if (parameters.WebSiteProperties.HostNames == null)
            {
                throw new ArgumentNullException("parameters.WebSiteProperties.HostNames");
            }
            if (parameters.WebSiteProperties.Name == null)
            {
                throw new ArgumentNullException("parameters.WebSiteProperties.Name");
            }
            if (parameters.WebSiteProperties.WebSpace != null)
            {
                if (parameters.WebSiteProperties.WebSpace.GeoRegion == null)
                {
                    throw new ArgumentNullException("parameters.WebSiteProperties.WebSpace.GeoRegion");
                }
                if (parameters.WebSiteProperties.WebSpace.Name == null)
                {
                    throw new ArgumentNullException("parameters.WebSiteProperties.WebSpace.Name");
                }
                if (parameters.WebSiteProperties.WebSpace.Plan == null)
                {
                    throw new ArgumentNullException("parameters.WebSiteProperties.WebSpace.Plan");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + parameters.Name.Trim() + "?";
            url = url + "api-version=2014-04-01";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject webSiteCreateResourceParametersValue = new JObject();
                requestDoc = webSiteCreateResourceParametersValue;
                
                webSiteCreateResourceParametersValue["Name"] = parameters.Name;
                
                webSiteCreateResourceParametersValue["Location"] = parameters.Location;
                
                JObject propertiesValue = new JObject();
                webSiteCreateResourceParametersValue["Properties"] = propertiesValue;
                
                if (parameters.WebSiteProperties.HostNames != null)
                {
                    JArray hostNamesArray = new JArray();
                    foreach (string hostNamesItem in parameters.WebSiteProperties.HostNames)
                    {
                        hostNamesArray.Add(hostNamesItem);
                    }
                    propertiesValue["HostNames"] = hostNamesArray;
                }
                
                propertiesValue["Name"] = parameters.WebSiteProperties.Name;
                
                if (parameters.WebSiteProperties.ComputeMode != null)
                {
                    propertiesValue["ComputeMode"] = parameters.WebSiteProperties.ComputeMode.ToString();
                }
                
                if (parameters.WebSiteProperties.ServerFarm != null)
                {
                    propertiesValue["ServerFarm"] = parameters.WebSiteProperties.ServerFarm;
                }
                
                if (parameters.WebSiteProperties.SiteMode != null)
                {
                    propertiesValue["SiteMode"] = parameters.WebSiteProperties.SiteMode.ToString();
                }
                
                if (parameters.WebSiteProperties.WebSpace != null)
                {
                    JObject webSpaceToCreateValue = new JObject();
                    propertiesValue["WebSpaceToCreate"] = webSpaceToCreateValue;
                    
                    webSpaceToCreateValue["GeoRegion"] = parameters.WebSiteProperties.WebSpace.GeoRegion;
                    
                    webSpaceToCreateValue["Name"] = parameters.WebSiteProperties.WebSpace.Name;
                    
                    webSpaceToCreateValue["Plan"] = parameters.WebSiteProperties.WebSpace.Plan;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteCreateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteCreateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            WebSite propertiesInstance = new WebSite();
                            result.WebSite = propertiesInstance;
                            
                            JToken propertiesValue3 = propertiesValue2["properties"];
                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                            {
                                JToken adminEnabledValue = propertiesValue3["adminEnabled"];
                                if (adminEnabledValue != null && adminEnabledValue.Type != JTokenType.Null)
                                {
                                    bool adminEnabledInstance = ((bool)adminEnabledValue);
                                    propertiesInstance.AdminEnabled = adminEnabledInstance;
                                }
                                
                                JToken availabilityStateValue = propertiesValue3["availabilityState"];
                                if (availabilityStateValue != null && availabilityStateValue.Type != JTokenType.Null)
                                {
                                    WebSpaceAvailabilityState availabilityStateInstance = ((WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), ((string)availabilityStateValue), true));
                                    propertiesInstance.AvailabilityState = availabilityStateInstance;
                                }
                                
                                JToken computeModeValue = propertiesValue3["computeMode"];
                                if (computeModeValue != null && computeModeValue.Type != JTokenType.Null)
                                {
                                    WebSiteComputeMode computeModeInstance = ((WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), ((string)computeModeValue), true));
                                    propertiesInstance.ComputeMode = computeModeInstance;
                                }
                                
                                JToken enabledValue = propertiesValue3["enabled"];
                                if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                {
                                    bool enabledInstance = ((bool)enabledValue);
                                    propertiesInstance.Enabled = enabledInstance;
                                }
                                
                                JToken enabledHostNamesArray = propertiesValue3["enabledHostNames"];
                                if (enabledHostNamesArray != null && enabledHostNamesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken enabledHostNamesValue in ((JArray)enabledHostNamesArray))
                                    {
                                        propertiesInstance.EnabledHostNames.Add(((string)enabledHostNamesValue));
                                    }
                                }
                                
                                JToken hostNameSslStatesArray = propertiesValue3["hostNameSslStates"];
                                if (hostNameSslStatesArray != null && hostNameSslStatesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken hostNameSslStatesValue in ((JArray)hostNameSslStatesArray))
                                    {
                                        WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                        propertiesInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                        
                                        JToken nameValue = hostNameSslStatesValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            webSiteHostNameSslStateInstance.Name = nameInstance;
                                        }
                                        
                                        JToken sslStateValue = hostNameSslStatesValue["sslState"];
                                        if (sslStateValue != null && sslStateValue.Type != JTokenType.Null)
                                        {
                                            WebSiteSslState sslStateInstance = ((WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), ((string)sslStateValue), true));
                                            webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                        }
                                        
                                        JToken thumbprintValue = hostNameSslStatesValue["thumbprint"];
                                        if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                                        {
                                            string thumbprintInstance = ((string)thumbprintValue);
                                            webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                        }
                                        
                                        JToken virtualIPValue = hostNameSslStatesValue["virtualIP"];
                                        if (virtualIPValue != null && virtualIPValue.Type != JTokenType.Null)
                                        {
                                            string virtualIPInstance = ((string)virtualIPValue);
                                            webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                        }
                                        
                                        JToken ipBasedSslResultValue = hostNameSslStatesValue["ipBasedSslResult"];
                                        if (ipBasedSslResultValue != null && ipBasedSslResultValue.Type != JTokenType.Null)
                                        {
                                            string ipBasedSslResultInstance = ((string)ipBasedSslResultValue);
                                            webSiteHostNameSslStateInstance.IpBasedSslResult = ipBasedSslResultInstance;
                                        }
                                        
                                        JToken toUpdateValue = hostNameSslStatesValue["toUpdate"];
                                        if (toUpdateValue != null && toUpdateValue.Type != JTokenType.Null)
                                        {
                                            bool toUpdateInstance = ((bool)toUpdateValue);
                                            webSiteHostNameSslStateInstance.ToUpdate = toUpdateInstance;
                                        }
                                        
                                        JToken toUpdateIpBasedSslValue = hostNameSslStatesValue["toUpdateIpBasedSsl"];
                                        if (toUpdateIpBasedSslValue != null && toUpdateIpBasedSslValue.Type != JTokenType.Null)
                                        {
                                            bool toUpdateIpBasedSslInstance = ((bool)toUpdateIpBasedSslValue);
                                            webSiteHostNameSslStateInstance.ToUpdateIpBasedSsl = toUpdateIpBasedSslInstance;
                                        }
                                    }
                                }
                                
                                JToken hostNamesArray2 = propertiesValue3["hostNames"];
                                if (hostNamesArray2 != null && hostNamesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken hostNamesValue in ((JArray)hostNamesArray2))
                                    {
                                        propertiesInstance.HostNames.Add(((string)hostNamesValue));
                                    }
                                }
                                
                                JToken lastModifiedTimeUtcValue = propertiesValue3["lastModifiedTimeUtc"];
                                if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                    propertiesInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                                }
                                
                                JToken nameValue2 = propertiesValue3["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    propertiesInstance.Name = nameInstance2;
                                }
                                
                                JToken ownerValue = propertiesValue3["owner"];
                                if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                                {
                                    string ownerInstance = ((string)ownerValue);
                                    propertiesInstance.Owner = ownerInstance;
                                }
                                
                                JToken repositorySiteNameValue = propertiesValue3["repositorySiteName"];
                                if (repositorySiteNameValue != null && repositorySiteNameValue.Type != JTokenType.Null)
                                {
                                    string repositorySiteNameInstance = ((string)repositorySiteNameValue);
                                    propertiesInstance.RepositorySiteName = repositorySiteNameInstance;
                                }
                                
                                JToken runtimeAvailabilityStateValue = propertiesValue3["runtimeAvailabilityState"];
                                if (runtimeAvailabilityStateValue != null && runtimeAvailabilityStateValue.Type != JTokenType.Null)
                                {
                                    WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = ((WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), ((string)runtimeAvailabilityStateValue), true));
                                    propertiesInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                                }
                                
                                JToken trafficManagerHostNamesArray = propertiesValue3["trafficManagerHostNames"];
                                if (trafficManagerHostNamesArray != null && trafficManagerHostNamesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken trafficManagerHostNamesValue in ((JArray)trafficManagerHostNamesArray))
                                    {
                                        propertiesInstance.TrafficManagerHostNames.Add(((string)trafficManagerHostNamesValue));
                                    }
                                }
                                
                                JToken sslCertificatesArray = propertiesValue3["sslCertificates"];
                                if (sslCertificatesArray != null && sslCertificatesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken sslCertificatesValue in ((JArray)sslCertificatesArray))
                                    {
                                        WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                        propertiesInstance.SslCertificates.Add(certificateInstance);
                                        
                                        JToken expirationDateValue = sslCertificatesValue["expirationDate"];
                                        if (expirationDateValue != null && expirationDateValue.Type != JTokenType.Null)
                                        {
                                            DateTime expirationDateInstance = ((DateTime)expirationDateValue);
                                            certificateInstance.ExpirationDate = expirationDateInstance;
                                        }
                                        
                                        JToken friendlyNameValue = sslCertificatesValue["friendlyName"];
                                        if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                        {
                                            string friendlyNameInstance = ((string)friendlyNameValue);
                                            certificateInstance.FriendlyName = friendlyNameInstance;
                                        }
                                        
                                        JToken hostNamesArray3 = sslCertificatesValue["hostNames"];
                                        if (hostNamesArray3 != null && hostNamesArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken hostNamesValue2 in ((JArray)hostNamesArray3))
                                            {
                                                certificateInstance.HostNames.Add(((string)hostNamesValue2));
                                            }
                                        }
                                        
                                        JToken issueDateValue = sslCertificatesValue["issueDate"];
                                        if (issueDateValue != null && issueDateValue.Type != JTokenType.Null)
                                        {
                                            DateTime issueDateInstance = ((DateTime)issueDateValue);
                                            certificateInstance.IssueDate = issueDateInstance;
                                        }
                                        
                                        JToken issuerValue = sslCertificatesValue["issuer"];
                                        if (issuerValue != null && issuerValue.Type != JTokenType.Null)
                                        {
                                            string issuerInstance = ((string)issuerValue);
                                            certificateInstance.Issuer = issuerInstance;
                                        }
                                        
                                        JToken passwordValue = sslCertificatesValue["password"];
                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                        {
                                            string passwordInstance = ((string)passwordValue);
                                            certificateInstance.Password = passwordInstance;
                                        }
                                        
                                        JToken pfxBlobValue = sslCertificatesValue["pfxBlob"];
                                        if (pfxBlobValue != null && pfxBlobValue.Type != JTokenType.Null)
                                        {
                                            byte[] pfxBlobInstance = Encoding.UTF8.GetBytes(((string)pfxBlobValue));
                                            certificateInstance.PfxBlob = pfxBlobInstance;
                                        }
                                        
                                        JToken selfLinkValue = sslCertificatesValue["selfLink"];
                                        if (selfLinkValue != null && selfLinkValue.Type != JTokenType.Null)
                                        {
                                            Uri selfLinkInstance = TypeConversion.TryParseUri(((string)selfLinkValue));
                                            certificateInstance.SelfLinkUri = selfLinkInstance;
                                        }
                                        
                                        JToken siteNameValue = sslCertificatesValue["siteName"];
                                        if (siteNameValue != null && siteNameValue.Type != JTokenType.Null)
                                        {
                                            string siteNameInstance = ((string)siteNameValue);
                                            certificateInstance.SiteName = siteNameInstance;
                                        }
                                        
                                        JToken subjectNameValue = sslCertificatesValue["subjectName"];
                                        if (subjectNameValue != null && subjectNameValue.Type != JTokenType.Null)
                                        {
                                            string subjectNameInstance = ((string)subjectNameValue);
                                            certificateInstance.SubjectName = subjectNameInstance;
                                        }
                                        
                                        JToken thumbprintValue2 = sslCertificatesValue["thumbprint"];
                                        if (thumbprintValue2 != null && thumbprintValue2.Type != JTokenType.Null)
                                        {
                                            string thumbprintInstance2 = ((string)thumbprintValue2);
                                            certificateInstance.Thumbprint = thumbprintInstance2;
                                        }
                                        
                                        JToken toDeleteValue = sslCertificatesValue["toDelete"];
                                        if (toDeleteValue != null && toDeleteValue.Type != JTokenType.Null)
                                        {
                                            bool toDeleteInstance = ((bool)toDeleteValue);
                                            certificateInstance.ToDelete = toDeleteInstance;
                                        }
                                        
                                        JToken validValue = sslCertificatesValue["valid"];
                                        if (validValue != null && validValue.Type != JTokenType.Null)
                                        {
                                            bool validInstance = ((bool)validValue);
                                            certificateInstance.IsValid = validInstance;
                                        }
                                        
                                        JToken cerBlobValue = sslCertificatesValue["cerBlob"];
                                        if (cerBlobValue != null && cerBlobValue.Type != JTokenType.Null)
                                        {
                                            byte[] cerBlobInstance = Encoding.UTF8.GetBytes(((string)cerBlobValue));
                                            certificateInstance.CerBlob = cerBlobInstance;
                                        }
                                        
                                        JToken publicKeyHashValue = sslCertificatesValue["publicKeyHash"];
                                        if (publicKeyHashValue != null && publicKeyHashValue.Type != JTokenType.Null)
                                        {
                                            string publicKeyHashInstance = ((string)publicKeyHashValue);
                                            certificateInstance.PublicKeyHash = publicKeyHashInstance;
                                        }
                                    }
                                }
                                
                                JToken selfLinkValue2 = propertiesValue3["selfLink"];
                                if (selfLinkValue2 != null && selfLinkValue2.Type != JTokenType.Null)
                                {
                                    Uri selfLinkInstance2 = TypeConversion.TryParseUri(((string)selfLinkValue2));
                                    propertiesInstance.Uri = selfLinkInstance2;
                                }
                                
                                JToken serverFarmValue = propertiesValue3["serverFarm"];
                                if (serverFarmValue != null && serverFarmValue.Type != JTokenType.Null)
                                {
                                    string serverFarmInstance = ((string)serverFarmValue);
                                    propertiesInstance.ServerFarm = serverFarmInstance;
                                }
                                
                                JToken siteModeValue = propertiesValue3["siteMode"];
                                if (siteModeValue != null && siteModeValue.Type != JTokenType.Null)
                                {
                                    WebSiteMode siteModeInstance = ((WebSiteMode)Enum.Parse(typeof(WebSiteMode), ((string)siteModeValue), true));
                                    propertiesInstance.SiteMode = siteModeInstance;
                                }
                                
                                JToken sitePropertiesValue = propertiesValue3["siteProperties"];
                                if (sitePropertiesValue != null && sitePropertiesValue.Type != JTokenType.Null)
                                {
                                    WebSite.SiteProperties sitePropertiesInstance = new WebSite.SiteProperties();
                                    propertiesInstance.Properties = sitePropertiesInstance;
                                    
                                    JToken appSettingsSequenceElement = ((JToken)sitePropertiesValue["appSettings"]);
                                    if (appSettingsSequenceElement != null && appSettingsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in appSettingsSequenceElement)
                                        {
                                            string appSettingsKey = ((string)property.Name);
                                            string appSettingsValue = ((string)property.Value);
                                            sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                        }
                                    }
                                    
                                    JToken metadataSequenceElement = ((JToken)sitePropertiesValue["metadata"]);
                                    if (metadataSequenceElement != null && metadataSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in metadataSequenceElement)
                                        {
                                            string metadataKey = ((string)property2.Name);
                                            string metadataValue = ((string)property2.Value);
                                            sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                        }
                                    }
                                    
                                    JToken propertiesSequenceElement = ((JToken)sitePropertiesValue["properties"]);
                                    if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in propertiesSequenceElement)
                                        {
                                            string propertiesKey = ((string)property3.Name);
                                            string propertiesValue4 = ((string)property3.Value);
                                            sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue4);
                                        }
                                    }
                                }
                                
                                JToken stateValue = propertiesValue3["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    WebSiteState stateInstance = ((WebSiteState)Enum.Parse(typeof(WebSiteState), ((string)stateValue), true));
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken usageStateValue = propertiesValue3["usageState"];
                                if (usageStateValue != null && usageStateValue.Type != JTokenType.Null)
                                {
                                    WebSiteUsageState usageStateInstance = ((WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), ((string)usageStateValue), true));
                                    propertiesInstance.UsageState = usageStateInstance;
                                }
                                
                                JToken webSpaceValue = propertiesValue3["webSpace"];
                                if (webSpaceValue != null && webSpaceValue.Type != JTokenType.Null)
                                {
                                    string webSpaceInstance = ((string)webSpaceValue);
                                    propertiesInstance.WebSpace = webSpaceInstance;
                                }
                            }
                            
                            JToken nameValue3 = propertiesValue2["name"];
                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                            {
                                string nameInstance3 = ((string)nameValue3);
                                propertiesInstance.Name = nameInstance3;
                            }
                            
                            JToken typeValue = propertiesValue2["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                propertiesInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = propertiesValue2["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                propertiesInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)propertiesValue2["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property4 in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property4.Name);
                                    string tagsValue = ((string)property4.Value);
                                    propertiesInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateRepositoryAsync(string resourceGroupName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "CreateRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/repository?";
            url = url + "api-version=2014-04-01";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group..
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the Web Site resource.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete a web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceGroupName, string webSiteName, WebSiteDeleteParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            url = url + "&deleteEmptyServerFarm=" + Uri.EscapeUriString(parameters.DeleteEmptyServerFarm.ToString().ToLower());
            url = url + "&deleteMetrics=" + Uri.EscapeUriString(parameters.DeleteMetrics.ToString().ToLower());
            url = url + "&deleteAllSlots=" + Uri.EscapeUriString(parameters.DeleteAllSlots.ToString().ToLower());
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public async Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(string resourceGroupName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "DeleteRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/repository?";
            url = url + "api-version=2014-04-01";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteDeleteRepositoryResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteDeleteRepositoryResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken uriValue = responseDoc["uri"];
                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                        {
                            Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                            result.Uri = uriInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> GeneratePasswordAsync(string resourceGroupName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GeneratePasswordAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/newPassword?";
            url = url + "api-version=2014-04-01";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public async Task<WebSiteGetResponse> GetAsync(string resourceGroupName, string webSiteName, WebSiteGetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "?";
            url = url + "api-version=2014-04-01";
            if (parameters != null && parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeUriString(string.Join(",", parameters.PropertiesToInclude));
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSite webSiteInstance = new WebSite();
                        result.WebSite = webSiteInstance;
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            JToken adminEnabledValue = propertiesValue["adminEnabled"];
                            if (adminEnabledValue != null && adminEnabledValue.Type != JTokenType.Null)
                            {
                                bool adminEnabledInstance = ((bool)adminEnabledValue);
                                webSiteInstance.AdminEnabled = adminEnabledInstance;
                            }
                            
                            JToken availabilityStateValue = propertiesValue["availabilityState"];
                            if (availabilityStateValue != null && availabilityStateValue.Type != JTokenType.Null)
                            {
                                WebSpaceAvailabilityState availabilityStateInstance = ((WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), ((string)availabilityStateValue), true));
                                webSiteInstance.AvailabilityState = availabilityStateInstance;
                            }
                            
                            JToken computeModeValue = propertiesValue["computeMode"];
                            if (computeModeValue != null && computeModeValue.Type != JTokenType.Null)
                            {
                                WebSiteComputeMode computeModeInstance = ((WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), ((string)computeModeValue), true));
                                webSiteInstance.ComputeMode = computeModeInstance;
                            }
                            
                            JToken enabledValue = propertiesValue["enabled"];
                            if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                            {
                                bool enabledInstance = ((bool)enabledValue);
                                webSiteInstance.Enabled = enabledInstance;
                            }
                            
                            JToken enabledHostNamesArray = propertiesValue["enabledHostNames"];
                            if (enabledHostNamesArray != null && enabledHostNamesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken enabledHostNamesValue in ((JArray)enabledHostNamesArray))
                                {
                                    webSiteInstance.EnabledHostNames.Add(((string)enabledHostNamesValue));
                                }
                            }
                            
                            JToken hostNameSslStatesArray = propertiesValue["hostNameSslStates"];
                            if (hostNameSslStatesArray != null && hostNameSslStatesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken hostNameSslStatesValue in ((JArray)hostNameSslStatesArray))
                                {
                                    WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                    webSiteInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                    
                                    JToken nameValue = hostNameSslStatesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        webSiteHostNameSslStateInstance.Name = nameInstance;
                                    }
                                    
                                    JToken sslStateValue = hostNameSslStatesValue["sslState"];
                                    if (sslStateValue != null && sslStateValue.Type != JTokenType.Null)
                                    {
                                        WebSiteSslState sslStateInstance = ((WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), ((string)sslStateValue), true));
                                        webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                    }
                                    
                                    JToken thumbprintValue = hostNameSslStatesValue["thumbprint"];
                                    if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                                    {
                                        string thumbprintInstance = ((string)thumbprintValue);
                                        webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                    }
                                    
                                    JToken virtualIPValue = hostNameSslStatesValue["virtualIP"];
                                    if (virtualIPValue != null && virtualIPValue.Type != JTokenType.Null)
                                    {
                                        string virtualIPInstance = ((string)virtualIPValue);
                                        webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                    }
                                    
                                    JToken ipBasedSslResultValue = hostNameSslStatesValue["ipBasedSslResult"];
                                    if (ipBasedSslResultValue != null && ipBasedSslResultValue.Type != JTokenType.Null)
                                    {
                                        string ipBasedSslResultInstance = ((string)ipBasedSslResultValue);
                                        webSiteHostNameSslStateInstance.IpBasedSslResult = ipBasedSslResultInstance;
                                    }
                                    
                                    JToken toUpdateValue = hostNameSslStatesValue["toUpdate"];
                                    if (toUpdateValue != null && toUpdateValue.Type != JTokenType.Null)
                                    {
                                        bool toUpdateInstance = ((bool)toUpdateValue);
                                        webSiteHostNameSslStateInstance.ToUpdate = toUpdateInstance;
                                    }
                                    
                                    JToken toUpdateIpBasedSslValue = hostNameSslStatesValue["toUpdateIpBasedSsl"];
                                    if (toUpdateIpBasedSslValue != null && toUpdateIpBasedSslValue.Type != JTokenType.Null)
                                    {
                                        bool toUpdateIpBasedSslInstance = ((bool)toUpdateIpBasedSslValue);
                                        webSiteHostNameSslStateInstance.ToUpdateIpBasedSsl = toUpdateIpBasedSslInstance;
                                    }
                                }
                            }
                            
                            JToken hostNamesArray = propertiesValue["hostNames"];
                            if (hostNamesArray != null && hostNamesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken hostNamesValue in ((JArray)hostNamesArray))
                                {
                                    webSiteInstance.HostNames.Add(((string)hostNamesValue));
                                }
                            }
                            
                            JToken lastModifiedTimeUtcValue = propertiesValue["lastModifiedTimeUtc"];
                            if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                            {
                                DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                webSiteInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                            }
                            
                            JToken nameValue2 = propertiesValue["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                webSiteInstance.Name = nameInstance2;
                            }
                            
                            JToken ownerValue = propertiesValue["owner"];
                            if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                            {
                                string ownerInstance = ((string)ownerValue);
                                webSiteInstance.Owner = ownerInstance;
                            }
                            
                            JToken repositorySiteNameValue = propertiesValue["repositorySiteName"];
                            if (repositorySiteNameValue != null && repositorySiteNameValue.Type != JTokenType.Null)
                            {
                                string repositorySiteNameInstance = ((string)repositorySiteNameValue);
                                webSiteInstance.RepositorySiteName = repositorySiteNameInstance;
                            }
                            
                            JToken runtimeAvailabilityStateValue = propertiesValue["runtimeAvailabilityState"];
                            if (runtimeAvailabilityStateValue != null && runtimeAvailabilityStateValue.Type != JTokenType.Null)
                            {
                                WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = ((WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), ((string)runtimeAvailabilityStateValue), true));
                                webSiteInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                            }
                            
                            JToken trafficManagerHostNamesArray = propertiesValue["trafficManagerHostNames"];
                            if (trafficManagerHostNamesArray != null && trafficManagerHostNamesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken trafficManagerHostNamesValue in ((JArray)trafficManagerHostNamesArray))
                                {
                                    webSiteInstance.TrafficManagerHostNames.Add(((string)trafficManagerHostNamesValue));
                                }
                            }
                            
                            JToken sslCertificatesArray = propertiesValue["sslCertificates"];
                            if (sslCertificatesArray != null && sslCertificatesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken sslCertificatesValue in ((JArray)sslCertificatesArray))
                                {
                                    WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                    webSiteInstance.SslCertificates.Add(certificateInstance);
                                    
                                    JToken expirationDateValue = sslCertificatesValue["expirationDate"];
                                    if (expirationDateValue != null && expirationDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime expirationDateInstance = ((DateTime)expirationDateValue);
                                        certificateInstance.ExpirationDate = expirationDateInstance;
                                    }
                                    
                                    JToken friendlyNameValue = sslCertificatesValue["friendlyName"];
                                    if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance = ((string)friendlyNameValue);
                                        certificateInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    JToken hostNamesArray2 = sslCertificatesValue["hostNames"];
                                    if (hostNamesArray2 != null && hostNamesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken hostNamesValue2 in ((JArray)hostNamesArray2))
                                        {
                                            certificateInstance.HostNames.Add(((string)hostNamesValue2));
                                        }
                                    }
                                    
                                    JToken issueDateValue = sslCertificatesValue["issueDate"];
                                    if (issueDateValue != null && issueDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime issueDateInstance = ((DateTime)issueDateValue);
                                        certificateInstance.IssueDate = issueDateInstance;
                                    }
                                    
                                    JToken issuerValue = sslCertificatesValue["issuer"];
                                    if (issuerValue != null && issuerValue.Type != JTokenType.Null)
                                    {
                                        string issuerInstance = ((string)issuerValue);
                                        certificateInstance.Issuer = issuerInstance;
                                    }
                                    
                                    JToken passwordValue = sslCertificatesValue["password"];
                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                    {
                                        string passwordInstance = ((string)passwordValue);
                                        certificateInstance.Password = passwordInstance;
                                    }
                                    
                                    JToken pfxBlobValue = sslCertificatesValue["pfxBlob"];
                                    if (pfxBlobValue != null && pfxBlobValue.Type != JTokenType.Null)
                                    {
                                        byte[] pfxBlobInstance = Encoding.UTF8.GetBytes(((string)pfxBlobValue));
                                        certificateInstance.PfxBlob = pfxBlobInstance;
                                    }
                                    
                                    JToken selfLinkValue = sslCertificatesValue["selfLink"];
                                    if (selfLinkValue != null && selfLinkValue.Type != JTokenType.Null)
                                    {
                                        Uri selfLinkInstance = TypeConversion.TryParseUri(((string)selfLinkValue));
                                        certificateInstance.SelfLinkUri = selfLinkInstance;
                                    }
                                    
                                    JToken siteNameValue = sslCertificatesValue["siteName"];
                                    if (siteNameValue != null && siteNameValue.Type != JTokenType.Null)
                                    {
                                        string siteNameInstance = ((string)siteNameValue);
                                        certificateInstance.SiteName = siteNameInstance;
                                    }
                                    
                                    JToken subjectNameValue = sslCertificatesValue["subjectName"];
                                    if (subjectNameValue != null && subjectNameValue.Type != JTokenType.Null)
                                    {
                                        string subjectNameInstance = ((string)subjectNameValue);
                                        certificateInstance.SubjectName = subjectNameInstance;
                                    }
                                    
                                    JToken thumbprintValue2 = sslCertificatesValue["thumbprint"];
                                    if (thumbprintValue2 != null && thumbprintValue2.Type != JTokenType.Null)
                                    {
                                        string thumbprintInstance2 = ((string)thumbprintValue2);
                                        certificateInstance.Thumbprint = thumbprintInstance2;
                                    }
                                    
                                    JToken toDeleteValue = sslCertificatesValue["toDelete"];
                                    if (toDeleteValue != null && toDeleteValue.Type != JTokenType.Null)
                                    {
                                        bool toDeleteInstance = ((bool)toDeleteValue);
                                        certificateInstance.ToDelete = toDeleteInstance;
                                    }
                                    
                                    JToken validValue = sslCertificatesValue["valid"];
                                    if (validValue != null && validValue.Type != JTokenType.Null)
                                    {
                                        bool validInstance = ((bool)validValue);
                                        certificateInstance.IsValid = validInstance;
                                    }
                                    
                                    JToken cerBlobValue = sslCertificatesValue["cerBlob"];
                                    if (cerBlobValue != null && cerBlobValue.Type != JTokenType.Null)
                                    {
                                        byte[] cerBlobInstance = Encoding.UTF8.GetBytes(((string)cerBlobValue));
                                        certificateInstance.CerBlob = cerBlobInstance;
                                    }
                                    
                                    JToken publicKeyHashValue = sslCertificatesValue["publicKeyHash"];
                                    if (publicKeyHashValue != null && publicKeyHashValue.Type != JTokenType.Null)
                                    {
                                        string publicKeyHashInstance = ((string)publicKeyHashValue);
                                        certificateInstance.PublicKeyHash = publicKeyHashInstance;
                                    }
                                }
                            }
                            
                            JToken selfLinkValue2 = propertiesValue["selfLink"];
                            if (selfLinkValue2 != null && selfLinkValue2.Type != JTokenType.Null)
                            {
                                Uri selfLinkInstance2 = TypeConversion.TryParseUri(((string)selfLinkValue2));
                                webSiteInstance.Uri = selfLinkInstance2;
                            }
                            
                            JToken serverFarmValue = propertiesValue["serverFarm"];
                            if (serverFarmValue != null && serverFarmValue.Type != JTokenType.Null)
                            {
                                string serverFarmInstance = ((string)serverFarmValue);
                                webSiteInstance.ServerFarm = serverFarmInstance;
                            }
                            
                            JToken siteModeValue = propertiesValue["siteMode"];
                            if (siteModeValue != null && siteModeValue.Type != JTokenType.Null)
                            {
                                WebSiteMode siteModeInstance = ((WebSiteMode)Enum.Parse(typeof(WebSiteMode), ((string)siteModeValue), true));
                                webSiteInstance.SiteMode = siteModeInstance;
                            }
                            
                            JToken sitePropertiesValue = propertiesValue["siteProperties"];
                            if (sitePropertiesValue != null && sitePropertiesValue.Type != JTokenType.Null)
                            {
                                WebSite.SiteProperties sitePropertiesInstance = new WebSite.SiteProperties();
                                webSiteInstance.Properties = sitePropertiesInstance;
                                
                                JToken appSettingsSequenceElement = ((JToken)sitePropertiesValue["appSettings"]);
                                if (appSettingsSequenceElement != null && appSettingsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in appSettingsSequenceElement)
                                    {
                                        string appSettingsKey = ((string)property.Name);
                                        string appSettingsValue = ((string)property.Value);
                                        sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                    }
                                }
                                
                                JToken metadataSequenceElement = ((JToken)sitePropertiesValue["metadata"]);
                                if (metadataSequenceElement != null && metadataSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in metadataSequenceElement)
                                    {
                                        string metadataKey = ((string)property2.Name);
                                        string metadataValue = ((string)property2.Value);
                                        sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)sitePropertiesValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property3 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property3.Name);
                                        string propertiesValue2 = ((string)property3.Value);
                                        sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue2);
                                    }
                                }
                            }
                            
                            JToken stateValue = propertiesValue["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                WebSiteState stateInstance = ((WebSiteState)Enum.Parse(typeof(WebSiteState), ((string)stateValue), true));
                                webSiteInstance.State = stateInstance;
                            }
                            
                            JToken usageStateValue = propertiesValue["usageState"];
                            if (usageStateValue != null && usageStateValue.Type != JTokenType.Null)
                            {
                                WebSiteUsageState usageStateInstance = ((WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), ((string)usageStateValue), true));
                                webSiteInstance.UsageState = usageStateInstance;
                            }
                            
                            JToken webSpaceValue = propertiesValue["webSpace"];
                            if (webSpaceValue != null && webSpaceValue.Type != JTokenType.Null)
                            {
                                string webSpaceInstance = ((string)webSpaceValue);
                                webSiteInstance.WebSpace = webSpaceInstance;
                            }
                        }
                        
                        JToken nameValue3 = responseDoc["name"];
                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                        {
                            string nameInstance3 = ((string)nameValue3);
                            webSiteInstance.Name = nameInstance3;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            webSiteInstance.Type = typeInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            webSiteInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property4 in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property4.Name);
                                string tagsValue = ((string)property4.Value);
                                webSiteInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public async Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(string resourceGroupName, string webSiteName, WebSiteGetConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/config?";
            url = url + "api-version=2014-04-01";
            if (parameters != null && parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeUriString(string.Join(",", parameters.PropertiesToInclude));
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetConfigurationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetConfigurationResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken siteConfigValue = responseDoc["SiteConfig"];
                    if (siteConfigValue != null && siteConfigValue.Type != JTokenType.Null)
                    {
                        WebSiteGetConfigurationResponse siteConfigInstance = new WebSiteGetConfigurationResponse();
                        
                        JToken appSettingsSequenceElement = ((JToken)siteConfigValue["appSettings"]);
                        if (appSettingsSequenceElement != null && appSettingsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in appSettingsSequenceElement)
                            {
                                string appSettingsKey = ((string)property.Name);
                                string appSettingsValue = ((string)property.Value);
                                siteConfigInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                            }
                        }
                        
                        JToken connectionStringsArray = siteConfigValue["connectionStrings"];
                        if (connectionStringsArray != null && connectionStringsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken connectionStringsValue in ((JArray)connectionStringsArray))
                            {
                                WebSiteGetConfigurationResponse.ConnectionStringInfo connStringInfoInstance = new WebSiteGetConfigurationResponse.ConnectionStringInfo();
                                siteConfigInstance.ConnectionStrings.Add(connStringInfoInstance);
                                
                                JToken connectionStringValue = connectionStringsValue["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    connStringInfoInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                JToken nameValue = connectionStringsValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    connStringInfoInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = connectionStringsValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    connStringInfoInstance.Type = typeInstance;
                                }
                            }
                        }
                        
                        JToken defaultDocumentsArray = siteConfigValue["defaultDocuments"];
                        if (defaultDocumentsArray != null && defaultDocumentsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken defaultDocumentsValue in ((JArray)defaultDocumentsArray))
                            {
                                siteConfigInstance.DefaultDocuments.Add(((string)defaultDocumentsValue));
                            }
                        }
                        
                        JToken detailedErrorLoggingEnabledValue = siteConfigValue["detailedErrorLoggingEnabled"];
                        if (detailedErrorLoggingEnabledValue != null && detailedErrorLoggingEnabledValue.Type != JTokenType.Null)
                        {
                            bool detailedErrorLoggingEnabledInstance = ((bool)detailedErrorLoggingEnabledValue);
                            siteConfigInstance.DetailedErrorLoggingEnabled = detailedErrorLoggingEnabledInstance;
                        }
                        
                        JToken documentRootValue = siteConfigValue["documentRoot"];
                        if (documentRootValue != null && documentRootValue.Type != JTokenType.Null)
                        {
                            string documentRootInstance = ((string)documentRootValue);
                            siteConfigInstance.DocumentRoot = documentRootInstance;
                        }
                        
                        JToken handlerMappingsArray = siteConfigValue["handlerMappings"];
                        if (handlerMappingsArray != null && handlerMappingsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken handlerMappingsValue in ((JArray)handlerMappingsArray))
                            {
                                WebSiteGetConfigurationResponse.HandlerMapping handlerMappingInstance = new WebSiteGetConfigurationResponse.HandlerMapping();
                                siteConfigInstance.HandlerMappings.Add(handlerMappingInstance);
                                
                                JToken argumentsValue = handlerMappingsValue["arguments"];
                                if (argumentsValue != null && argumentsValue.Type != JTokenType.Null)
                                {
                                    string argumentsInstance = ((string)argumentsValue);
                                    handlerMappingInstance.Arguments = argumentsInstance;
                                }
                                
                                JToken extensionValue = handlerMappingsValue["extension"];
                                if (extensionValue != null && extensionValue.Type != JTokenType.Null)
                                {
                                    string extensionInstance = ((string)extensionValue);
                                    handlerMappingInstance.Extension = extensionInstance;
                                }
                                
                                JToken scriptProcessorValue = handlerMappingsValue["scriptProcessor"];
                                if (scriptProcessorValue != null && scriptProcessorValue.Type != JTokenType.Null)
                                {
                                    string scriptProcessorInstance = ((string)scriptProcessorValue);
                                    handlerMappingInstance.ScriptProcessor = scriptProcessorInstance;
                                }
                            }
                        }
                        
                        JToken httpLoggingEnabledValue = siteConfigValue["httpLoggingEnabled"];
                        if (httpLoggingEnabledValue != null && httpLoggingEnabledValue.Type != JTokenType.Null)
                        {
                            bool httpLoggingEnabledInstance = ((bool)httpLoggingEnabledValue);
                            siteConfigInstance.HttpLoggingEnabled = httpLoggingEnabledInstance;
                        }
                        
                        JToken logsDirectorySizeLimitValue = siteConfigValue["logsDirectorySizeLimit"];
                        if (logsDirectorySizeLimitValue != null && logsDirectorySizeLimitValue.Type != JTokenType.Null)
                        {
                            int logsDirectorySizeLimitInstance = ((int)logsDirectorySizeLimitValue);
                            siteConfigInstance.LogsDirectorySizeLimit = logsDirectorySizeLimitInstance;
                        }
                        
                        JToken managedPipelineModeValue = siteConfigValue["managedPipelineMode"];
                        if (managedPipelineModeValue != null && managedPipelineModeValue.Type != JTokenType.Null)
                        {
                            ManagedPipelineMode managedPipelineModeInstance = ((ManagedPipelineMode)Enum.Parse(typeof(ManagedPipelineMode), ((string)managedPipelineModeValue), true));
                            siteConfigInstance.ManagedPipelineMode = managedPipelineModeInstance;
                        }
                        
                        JToken metadataSequenceElement = ((JToken)siteConfigValue["metadata"]);
                        if (metadataSequenceElement != null && metadataSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property2 in metadataSequenceElement)
                            {
                                string metadataKey = ((string)property2.Name);
                                string metadataValue = ((string)property2.Value);
                                siteConfigInstance.Metadata.Add(metadataKey, metadataValue);
                            }
                        }
                        
                        JToken netFrameworkVersionValue = siteConfigValue["netFrameworkVersion"];
                        if (netFrameworkVersionValue != null && netFrameworkVersionValue.Type != JTokenType.Null)
                        {
                            string netFrameworkVersionInstance = ((string)netFrameworkVersionValue);
                            siteConfigInstance.NetFrameworkVersion = netFrameworkVersionInstance;
                        }
                        
                        JToken numberOfWorkersValue = siteConfigValue["numberOfWorkers"];
                        if (numberOfWorkersValue != null && numberOfWorkersValue.Type != JTokenType.Null)
                        {
                            int numberOfWorkersInstance = ((int)numberOfWorkersValue);
                            siteConfigInstance.NumberOfWorkers = numberOfWorkersInstance;
                        }
                        
                        JToken phpVersionValue = siteConfigValue["phpVersion"];
                        if (phpVersionValue != null && phpVersionValue.Type != JTokenType.Null)
                        {
                            string phpVersionInstance = ((string)phpVersionValue);
                            siteConfigInstance.PhpVersion = phpVersionInstance;
                        }
                        
                        JToken publishingPasswordValue = siteConfigValue["publishingPassword"];
                        if (publishingPasswordValue != null && publishingPasswordValue.Type != JTokenType.Null)
                        {
                            string publishingPasswordInstance = ((string)publishingPasswordValue);
                            siteConfigInstance.PublishingPassword = publishingPasswordInstance;
                        }
                        
                        JToken publishingUsernameValue = siteConfigValue["publishingUsername"];
                        if (publishingUsernameValue != null && publishingUsernameValue.Type != JTokenType.Null)
                        {
                            string publishingUsernameInstance = ((string)publishingUsernameValue);
                            siteConfigInstance.PublishingUserName = publishingUsernameInstance;
                        }
                        
                        JToken remoteDebuggingEnabledValue = siteConfigValue["RemoteDebuggingEnabled"];
                        if (remoteDebuggingEnabledValue != null && remoteDebuggingEnabledValue.Type != JTokenType.Null)
                        {
                            bool remoteDebuggingEnabledInstance = ((bool)remoteDebuggingEnabledValue);
                            siteConfigInstance.RemoteDebuggingEnabled = remoteDebuggingEnabledInstance;
                        }
                        
                        JToken remoteDebuggingVersionValue = siteConfigValue["remoteDebuggingVersion"];
                        if (remoteDebuggingVersionValue != null && remoteDebuggingVersionValue.Type != JTokenType.Null)
                        {
                            RemoteDebuggingVersion remoteDebuggingVersionInstance = ((RemoteDebuggingVersion)Enum.Parse(typeof(RemoteDebuggingVersion), ((string)remoteDebuggingVersionValue), true));
                            siteConfigInstance.RemoteDebuggingVersion = remoteDebuggingVersionInstance;
                        }
                        
                        JToken requestTracingEnabledValue = siteConfigValue["requestTracingEnabled"];
                        if (requestTracingEnabledValue != null && requestTracingEnabledValue.Type != JTokenType.Null)
                        {
                            bool requestTracingEnabledInstance = ((bool)requestTracingEnabledValue);
                            siteConfigInstance.RequestTracingEnabled = requestTracingEnabledInstance;
                        }
                        
                        JToken requestTracingExpirationTimeValue = siteConfigValue["requestTracingExpirationTime"];
                        if (requestTracingExpirationTimeValue != null && requestTracingExpirationTimeValue.Type != JTokenType.Null)
                        {
                            DateTime requestTracingExpirationTimeInstance = ((DateTime)requestTracingExpirationTimeValue);
                            siteConfigInstance.RequestTracingExpirationTime = requestTracingExpirationTimeInstance;
                        }
                        
                        JToken scmTypeValue = siteConfigValue["scmType"];
                        if (scmTypeValue != null && scmTypeValue.Type != JTokenType.Null)
                        {
                            string scmTypeInstance = ((string)scmTypeValue);
                            siteConfigInstance.ScmType = scmTypeInstance;
                        }
                        
                        JToken use32BitWorkerProcessValue = siteConfigValue["use32BitWorkerProcess"];
                        if (use32BitWorkerProcessValue != null && use32BitWorkerProcessValue.Type != JTokenType.Null)
                        {
                            bool use32BitWorkerProcessInstance = ((bool)use32BitWorkerProcessValue);
                            siteConfigInstance.Use32BitWorkerProcess = use32BitWorkerProcessInstance;
                        }
                        
                        JToken webSocketsEnabledValue = siteConfigValue["webSocketsEnabled"];
                        if (webSocketsEnabledValue != null && webSocketsEnabledValue.Type != JTokenType.Null)
                        {
                            bool webSocketsEnabledInstance = ((bool)webSocketsEnabledValue);
                            siteConfigInstance.WebSocketsEnabled = webSocketsEnabledInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public async Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(string resourceGroupName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetHistoricalUsageMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/metrics?";
            url = url + "api-version=2014-04-01";
            if (parameters.MetricNames != null && parameters.MetricNames.Count > 0)
            {
                url = url + "&names=" + Uri.EscapeUriString(string.Join(",", parameters.MetricNames));
            }
            if (parameters.StartTime != null)
            {
                url = url + "&StartTime=" + Uri.EscapeUriString(parameters.StartTime.Value.ToString());
            }
            if (parameters.EndTime != null)
            {
                url = url + "&EndTime=" + Uri.EscapeUriString(parameters.EndTime.Value.ToString());
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetHistoricalUsageMetricsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetHistoricalUsageMetricsResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken metricResponsesValue = responseDoc["metricResponses"];
                    if (metricResponsesValue != null && metricResponsesValue.Type != JTokenType.Null)
                    {
                        WebSiteGetHistoricalUsageMetricsResponse metricResponsesInstance = new WebSiteGetHistoricalUsageMetricsResponse();
                        
                        JToken usageMetricsArray = metricResponsesValue;
                        if (usageMetricsArray != null && usageMetricsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken usageMetricsValue in ((JArray)usageMetricsArray))
                            {
                                WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric metricResponseInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric();
                                metricResponsesInstance.UsageMetrics.Add(metricResponseInstance);
                                
                                JToken codeValue = usageMetricsValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    metricResponseInstance.Code = codeInstance;
                                }
                                
                                JToken dataValue = usageMetricsValue["data"];
                                if (dataValue != null && dataValue.Type != JTokenType.Null)
                                {
                                    WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData dataInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData();
                                    metricResponseInstance.Data = dataInstance;
                                    
                                    JToken displayNameValue = dataValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        dataInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken endTimeValue = dataValue["EndTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        dataInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken nameValue = dataValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dataInstance.Name = nameInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = dataValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        string primaryAggregationTypeInstance = ((string)primaryAggregationTypeValue);
                                        dataInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken startTimeValue = dataValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        dataInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken timeGrainValue = dataValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        string timeGrainInstance = ((string)timeGrainValue);
                                        dataInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken unitValue = dataValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        string unitInstance = ((string)unitValue);
                                        dataInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken valuesArray = dataValue["Values"];
                                    if (valuesArray != null && valuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken valuesValue in ((JArray)valuesArray))
                                        {
                                            WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample metricSampleInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample();
                                            dataInstance.Values.Add(metricSampleInstance);
                                            
                                            JToken countValue = valuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricSampleInstance.Count = countInstance;
                                            }
                                            
                                            JToken maximumValue = valuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                string maximumInstance = ((string)maximumValue);
                                                metricSampleInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken minimumValue = valuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                string minimumInstance = ((string)minimumValue);
                                                metricSampleInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken timeCreatedValue = valuesValue["timeCreated"];
                                            if (timeCreatedValue != null && timeCreatedValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeCreatedInstance = ((DateTime)timeCreatedValue);
                                                metricSampleInstance.TimeCreated = timeCreatedInstance;
                                            }
                                            
                                            JToken totalValue = valuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                string totalInstance = ((string)totalValue);
                                                metricSampleInstance.Total = totalInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken messageValue = usageMetricsValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    metricResponseInstance.Message = messageInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the publish settings information for a web site.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public async Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(string resourceGroupName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetPublishProfileAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/publishxml?";
            url = url + "api-version=2014-04-01";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetPublishProfileResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetPublishProfileResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken publishDataValue = responseDoc["publishData"];
                    if (publishDataValue != null && publishDataValue.Type != JTokenType.Null)
                    {
                        WebSiteGetPublishProfileResponse publishDataInstance = new WebSiteGetPublishProfileResponse();
                        
                        JToken publishProfilesArray = publishDataValue;
                        if (publishProfilesArray != null && publishProfilesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken publishProfilesValue in ((JArray)publishProfilesArray))
                            {
                                WebSiteGetPublishProfileResponse.PublishProfile publishProfileInstance = new WebSiteGetPublishProfileResponse.PublishProfile();
                                publishDataInstance.PublishProfiles.Add(publishProfileInstance);
                                
                                JToken profileNameValue = publishProfilesValue["profileName"];
                                if (profileNameValue != null && profileNameValue.Type != JTokenType.Null)
                                {
                                    string profileNameInstance = ((string)profileNameValue);
                                    publishProfileInstance.ProfileName = profileNameInstance;
                                }
                                
                                JToken publishMethodValue = publishProfilesValue["publishMethod"];
                                if (publishMethodValue != null && publishMethodValue.Type != JTokenType.Null)
                                {
                                    string publishMethodInstance = ((string)publishMethodValue);
                                    publishProfileInstance.PublishMethod = publishMethodInstance;
                                }
                                
                                JToken publishUrlValue = publishProfilesValue["publishUrl"];
                                if (publishUrlValue != null && publishUrlValue.Type != JTokenType.Null)
                                {
                                    string publishUrlInstance = ((string)publishUrlValue);
                                    publishProfileInstance.PublishUrl = publishUrlInstance;
                                }
                                
                                JToken msdeploySiteValue = publishProfilesValue["msdeploySite"];
                                if (msdeploySiteValue != null && msdeploySiteValue.Type != JTokenType.Null)
                                {
                                    string msdeploySiteInstance = ((string)msdeploySiteValue);
                                    publishProfileInstance.MSDeploySite = msdeploySiteInstance;
                                }
                                
                                JToken ftpPassiveModeValue = publishProfilesValue["ftpPassiveMode"];
                                if (ftpPassiveModeValue != null && ftpPassiveModeValue.Type != JTokenType.Null)
                                {
                                    bool ftpPassiveModeInstance = ((bool)ftpPassiveModeValue);
                                    publishProfileInstance.FtpPassiveMode = ftpPassiveModeInstance;
                                }
                                
                                JToken userNameValue = publishProfilesValue["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    publishProfileInstance.UserName = userNameInstance;
                                }
                                
                                JToken userPWDValue = publishProfilesValue["userPWD"];
                                if (userPWDValue != null && userPWDValue.Type != JTokenType.Null)
                                {
                                    string userPWDInstance = ((string)userPWDValue);
                                    publishProfileInstance.UserPassword = userPWDInstance;
                                }
                                
                                JToken destinationAppUrlValue = publishProfilesValue["destinationAppUrl"];
                                if (destinationAppUrlValue != null && destinationAppUrlValue.Type != JTokenType.Null)
                                {
                                    Uri destinationAppUrlInstance = TypeConversion.TryParseUri(((string)destinationAppUrlValue));
                                    publishProfileInstance.DestinationAppUri = destinationAppUrlInstance;
                                }
                                
                                JToken sQLServerDBConnectionStringValue = publishProfilesValue["SQLServerDBConnectionString"];
                                if (sQLServerDBConnectionStringValue != null && sQLServerDBConnectionStringValue.Type != JTokenType.Null)
                                {
                                    string sQLServerDBConnectionStringInstance = ((string)sQLServerDBConnectionStringValue);
                                    publishProfileInstance.SqlServerConnectionString = sQLServerDBConnectionStringInstance;
                                }
                                
                                JToken mySQLDBConnectionStringValue = publishProfilesValue["mySQLDBConnectionString"];
                                if (mySQLDBConnectionStringValue != null && mySQLDBConnectionStringValue.Type != JTokenType.Null)
                                {
                                    string mySQLDBConnectionStringInstance = ((string)mySQLDBConnectionStringValue);
                                    publishProfileInstance.MySqlConnectionString = mySQLDBConnectionStringInstance;
                                }
                                
                                JToken hostingProviderForumLinkValue = publishProfilesValue["hostingProviderForumLink"];
                                if (hostingProviderForumLinkValue != null && hostingProviderForumLinkValue.Type != JTokenType.Null)
                                {
                                    Uri hostingProviderForumLinkInstance = TypeConversion.TryParseUri(((string)hostingProviderForumLinkValue));
                                    publishProfileInstance.HostingProviderForumUri = hostingProviderForumLinkInstance;
                                }
                                
                                JToken controlPanelLinkValue = publishProfilesValue["controlPanelLink"];
                                if (controlPanelLinkValue != null && controlPanelLinkValue.Type != JTokenType.Null)
                                {
                                    Uri controlPanelLinkInstance = TypeConversion.TryParseUri(((string)controlPanelLinkValue));
                                    publishProfileInstance.ControlPanelUri = controlPanelLinkInstance;
                                }
                                
                                JToken databasesArray = publishProfilesValue["databases"];
                                if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken databasesValue in ((JArray)databasesArray))
                                    {
                                        WebSiteGetPublishProfileResponse.Database addInstance = new WebSiteGetPublishProfileResponse.Database();
                                        publishProfileInstance.Databases.Add(addInstance);
                                        
                                        JToken nameValue = databasesValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            addInstance.Name = nameInstance;
                                        }
                                        
                                        JToken connectionStringValue = databasesValue["connectionString"];
                                        if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                        {
                                            string connectionStringInstance = ((string)connectionStringValue);
                                            addInstance.ConnectionString = connectionStringInstance;
                                        }
                                        
                                        JToken providerNameValue = databasesValue["providerName"];
                                        if (providerNameValue != null && providerNameValue.Type != JTokenType.Null)
                                        {
                                            string providerNameInstance = ((string)providerNameValue);
                                            addInstance.ProviderName = providerNameInstance;
                                        }
                                        
                                        JToken typeValue = databasesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            addInstance.Type = typeInstance;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public async Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(string resourceGroupName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/repository?";
            url = url + "api-version=2014-04-01";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetRepositoryResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetRepositoryResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken uriValue = responseDoc["uri"];
                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                        {
                            Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                            result.Uri = uriInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a web site's current usage metrics. The metrics returned
        /// include CPU Time, Data In, Data Out, Local bytes read, Local bytes
        /// written, Network bytes read, Network bytes written, WP stop
        /// requests, Memory Usage, CPU Time - Minute Limit, and File System
        /// Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public async Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(string resourceGroupName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetUsageMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/usages?";
            url = url + "api-version=2014-04-01";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetUsageMetricsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetUsageMetricsResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken usagesValue = responseDoc["usages"];
                    if (usagesValue != null && usagesValue.Type != JTokenType.Null)
                    {
                        WebSiteGetUsageMetricsResponse usagesInstance = new WebSiteGetUsageMetricsResponse();
                        
                        JToken usageMetricsArray = usagesValue;
                        if (usageMetricsArray != null && usageMetricsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken usageMetricsValue in ((JArray)usageMetricsArray))
                            {
                                WebSiteGetUsageMetricsResponse.UsageMetric usageInstance = new WebSiteGetUsageMetricsResponse.UsageMetric();
                                usagesInstance.UsageMetrics.Add(usageInstance);
                                
                                JToken computeModeValue = usageMetricsValue["computeMode"];
                                if (computeModeValue != null && computeModeValue.Type != JTokenType.Null)
                                {
                                    WebSiteComputeMode computeModeInstance = ((WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), ((string)computeModeValue), true));
                                    usageInstance.ComputeMode = computeModeInstance;
                                }
                                
                                JToken currentValueValue = usageMetricsValue["currentValue"];
                                if (currentValueValue != null && currentValueValue.Type != JTokenType.Null)
                                {
                                    string currentValueInstance = ((string)currentValueValue);
                                    usageInstance.CurrentValue = currentValueInstance;
                                }
                                
                                JToken displayNameValue = usageMetricsValue["displayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    usageInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken limitValue = usageMetricsValue["limit"];
                                if (limitValue != null && limitValue.Type != JTokenType.Null)
                                {
                                    string limitInstance = ((string)limitValue);
                                    usageInstance.Limit = limitInstance;
                                }
                                
                                JToken nameValue = usageMetricsValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    usageInstance.Name = nameInstance;
                                }
                                
                                JToken nextResetTimeValue = usageMetricsValue["nextResetTime"];
                                if (nextResetTimeValue != null && nextResetTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime nextResetTimeInstance = ((DateTime)nextResetTimeValue);
                                    usageInstance.NextResetTime = nextResetTimeInstance;
                                }
                                
                                JToken resourceNameValue = usageMetricsValue["resourceName"];
                                if (resourceNameValue != null && resourceNameValue.Type != JTokenType.Null)
                                {
                                    string resourceNameInstance = ((string)resourceNameValue);
                                    usageInstance.ResourceName = resourceNameInstance;
                                }
                                
                                JToken siteModeValue = usageMetricsValue["siteMode"];
                                if (siteModeValue != null && siteModeValue.Type != JTokenType.Null)
                                {
                                    WebSiteMode siteModeInstance = ((WebSiteMode)Enum.Parse(typeof(WebSiteMode), ((string)siteModeValue), true));
                                    usageInstance.SiteMode = siteModeInstance;
                                }
                                
                                JToken unitValue = usageMetricsValue["unit"];
                                if (unitValue != null && unitValue.Type != JTokenType.Null)
                                {
                                    string unitInstance = ((string)unitValue);
                                    usageInstance.Unit = unitInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the Web Sites in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public async Task<WebSiteListResponse> ListAsync(string resourceGroupName, WebSiteListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites?";
            url = url + "api-version=2014-04-01";
            if (parameters != null && parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeUriString(string.Join(",", parameters.PropertiesToInclude));
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken webSitesArray = responseDoc;
                        if (webSitesArray != null && webSitesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken webSitesValue in ((JArray)webSitesArray))
                            {
                                WebSite webSiteJsonFormatInstance = new WebSite();
                                result.WebSites.Add(webSiteJsonFormatInstance);
                                
                                JToken propertiesValue = webSitesValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    JToken adminEnabledValue = propertiesValue["adminEnabled"];
                                    if (adminEnabledValue != null && adminEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool adminEnabledInstance = ((bool)adminEnabledValue);
                                        webSiteJsonFormatInstance.AdminEnabled = adminEnabledInstance;
                                    }
                                    
                                    JToken availabilityStateValue = propertiesValue["availabilityState"];
                                    if (availabilityStateValue != null && availabilityStateValue.Type != JTokenType.Null)
                                    {
                                        WebSpaceAvailabilityState availabilityStateInstance = ((WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), ((string)availabilityStateValue), true));
                                        webSiteJsonFormatInstance.AvailabilityState = availabilityStateInstance;
                                    }
                                    
                                    JToken computeModeValue = propertiesValue["computeMode"];
                                    if (computeModeValue != null && computeModeValue.Type != JTokenType.Null)
                                    {
                                        WebSiteComputeMode computeModeInstance = ((WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), ((string)computeModeValue), true));
                                        webSiteJsonFormatInstance.ComputeMode = computeModeInstance;
                                    }
                                    
                                    JToken enabledValue = propertiesValue["enabled"];
                                    if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                    {
                                        bool enabledInstance = ((bool)enabledValue);
                                        webSiteJsonFormatInstance.Enabled = enabledInstance;
                                    }
                                    
                                    JToken enabledHostNamesArray = propertiesValue["enabledHostNames"];
                                    if (enabledHostNamesArray != null && enabledHostNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken enabledHostNamesValue in ((JArray)enabledHostNamesArray))
                                        {
                                            webSiteJsonFormatInstance.EnabledHostNames.Add(((string)enabledHostNamesValue));
                                        }
                                    }
                                    
                                    JToken hostNameSslStatesArray = propertiesValue["hostNameSslStates"];
                                    if (hostNameSslStatesArray != null && hostNameSslStatesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken hostNameSslStatesValue in ((JArray)hostNameSslStatesArray))
                                        {
                                            WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                            webSiteJsonFormatInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                            
                                            JToken nameValue = hostNameSslStatesValue["name"];
                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                            {
                                                string nameInstance = ((string)nameValue);
                                                webSiteHostNameSslStateInstance.Name = nameInstance;
                                            }
                                            
                                            JToken sslStateValue = hostNameSslStatesValue["sslState"];
                                            if (sslStateValue != null && sslStateValue.Type != JTokenType.Null)
                                            {
                                                WebSiteSslState sslStateInstance = ((WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), ((string)sslStateValue), true));
                                                webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                            }
                                            
                                            JToken thumbprintValue = hostNameSslStatesValue["thumbprint"];
                                            if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                                            {
                                                string thumbprintInstance = ((string)thumbprintValue);
                                                webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                            }
                                            
                                            JToken virtualIPValue = hostNameSslStatesValue["virtualIP"];
                                            if (virtualIPValue != null && virtualIPValue.Type != JTokenType.Null)
                                            {
                                                string virtualIPInstance = ((string)virtualIPValue);
                                                webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                            }
                                            
                                            JToken ipBasedSslResultValue = hostNameSslStatesValue["ipBasedSslResult"];
                                            if (ipBasedSslResultValue != null && ipBasedSslResultValue.Type != JTokenType.Null)
                                            {
                                                string ipBasedSslResultInstance = ((string)ipBasedSslResultValue);
                                                webSiteHostNameSslStateInstance.IpBasedSslResult = ipBasedSslResultInstance;
                                            }
                                            
                                            JToken toUpdateValue = hostNameSslStatesValue["toUpdate"];
                                            if (toUpdateValue != null && toUpdateValue.Type != JTokenType.Null)
                                            {
                                                bool toUpdateInstance = ((bool)toUpdateValue);
                                                webSiteHostNameSslStateInstance.ToUpdate = toUpdateInstance;
                                            }
                                            
                                            JToken toUpdateIpBasedSslValue = hostNameSslStatesValue["toUpdateIpBasedSsl"];
                                            if (toUpdateIpBasedSslValue != null && toUpdateIpBasedSslValue.Type != JTokenType.Null)
                                            {
                                                bool toUpdateIpBasedSslInstance = ((bool)toUpdateIpBasedSslValue);
                                                webSiteHostNameSslStateInstance.ToUpdateIpBasedSsl = toUpdateIpBasedSslInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken hostNamesArray = propertiesValue["hostNames"];
                                    if (hostNamesArray != null && hostNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken hostNamesValue in ((JArray)hostNamesArray))
                                        {
                                            webSiteJsonFormatInstance.HostNames.Add(((string)hostNamesValue));
                                        }
                                    }
                                    
                                    JToken lastModifiedTimeUtcValue = propertiesValue["lastModifiedTimeUtc"];
                                    if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                        webSiteJsonFormatInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                                    }
                                    
                                    JToken nameValue2 = propertiesValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        webSiteJsonFormatInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken ownerValue = propertiesValue["owner"];
                                    if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                                    {
                                        string ownerInstance = ((string)ownerValue);
                                        webSiteJsonFormatInstance.Owner = ownerInstance;
                                    }
                                    
                                    JToken repositorySiteNameValue = propertiesValue["repositorySiteName"];
                                    if (repositorySiteNameValue != null && repositorySiteNameValue.Type != JTokenType.Null)
                                    {
                                        string repositorySiteNameInstance = ((string)repositorySiteNameValue);
                                        webSiteJsonFormatInstance.RepositorySiteName = repositorySiteNameInstance;
                                    }
                                    
                                    JToken runtimeAvailabilityStateValue = propertiesValue["runtimeAvailabilityState"];
                                    if (runtimeAvailabilityStateValue != null && runtimeAvailabilityStateValue.Type != JTokenType.Null)
                                    {
                                        WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = ((WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), ((string)runtimeAvailabilityStateValue), true));
                                        webSiteJsonFormatInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                                    }
                                    
                                    JToken trafficManagerHostNamesArray = propertiesValue["trafficManagerHostNames"];
                                    if (trafficManagerHostNamesArray != null && trafficManagerHostNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken trafficManagerHostNamesValue in ((JArray)trafficManagerHostNamesArray))
                                        {
                                            webSiteJsonFormatInstance.TrafficManagerHostNames.Add(((string)trafficManagerHostNamesValue));
                                        }
                                    }
                                    
                                    JToken sslCertificatesArray = propertiesValue["sslCertificates"];
                                    if (sslCertificatesArray != null && sslCertificatesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken sslCertificatesValue in ((JArray)sslCertificatesArray))
                                        {
                                            WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                            webSiteJsonFormatInstance.SslCertificates.Add(certificateInstance);
                                            
                                            JToken expirationDateValue = sslCertificatesValue["expirationDate"];
                                            if (expirationDateValue != null && expirationDateValue.Type != JTokenType.Null)
                                            {
                                                DateTime expirationDateInstance = ((DateTime)expirationDateValue);
                                                certificateInstance.ExpirationDate = expirationDateInstance;
                                            }
                                            
                                            JToken friendlyNameValue = sslCertificatesValue["friendlyName"];
                                            if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance = ((string)friendlyNameValue);
                                                certificateInstance.FriendlyName = friendlyNameInstance;
                                            }
                                            
                                            JToken hostNamesArray2 = sslCertificatesValue["hostNames"];
                                            if (hostNamesArray2 != null && hostNamesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken hostNamesValue2 in ((JArray)hostNamesArray2))
                                                {
                                                    certificateInstance.HostNames.Add(((string)hostNamesValue2));
                                                }
                                            }
                                            
                                            JToken issueDateValue = sslCertificatesValue["issueDate"];
                                            if (issueDateValue != null && issueDateValue.Type != JTokenType.Null)
                                            {
                                                DateTime issueDateInstance = ((DateTime)issueDateValue);
                                                certificateInstance.IssueDate = issueDateInstance;
                                            }
                                            
                                            JToken issuerValue = sslCertificatesValue["issuer"];
                                            if (issuerValue != null && issuerValue.Type != JTokenType.Null)
                                            {
                                                string issuerInstance = ((string)issuerValue);
                                                certificateInstance.Issuer = issuerInstance;
                                            }
                                            
                                            JToken passwordValue = sslCertificatesValue["password"];
                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                            {
                                                string passwordInstance = ((string)passwordValue);
                                                certificateInstance.Password = passwordInstance;
                                            }
                                            
                                            JToken pfxBlobValue = sslCertificatesValue["pfxBlob"];
                                            if (pfxBlobValue != null && pfxBlobValue.Type != JTokenType.Null)
                                            {
                                                byte[] pfxBlobInstance = Encoding.UTF8.GetBytes(((string)pfxBlobValue));
                                                certificateInstance.PfxBlob = pfxBlobInstance;
                                            }
                                            
                                            JToken selfLinkValue = sslCertificatesValue["selfLink"];
                                            if (selfLinkValue != null && selfLinkValue.Type != JTokenType.Null)
                                            {
                                                Uri selfLinkInstance = TypeConversion.TryParseUri(((string)selfLinkValue));
                                                certificateInstance.SelfLinkUri = selfLinkInstance;
                                            }
                                            
                                            JToken siteNameValue = sslCertificatesValue["siteName"];
                                            if (siteNameValue != null && siteNameValue.Type != JTokenType.Null)
                                            {
                                                string siteNameInstance = ((string)siteNameValue);
                                                certificateInstance.SiteName = siteNameInstance;
                                            }
                                            
                                            JToken subjectNameValue = sslCertificatesValue["subjectName"];
                                            if (subjectNameValue != null && subjectNameValue.Type != JTokenType.Null)
                                            {
                                                string subjectNameInstance = ((string)subjectNameValue);
                                                certificateInstance.SubjectName = subjectNameInstance;
                                            }
                                            
                                            JToken thumbprintValue2 = sslCertificatesValue["thumbprint"];
                                            if (thumbprintValue2 != null && thumbprintValue2.Type != JTokenType.Null)
                                            {
                                                string thumbprintInstance2 = ((string)thumbprintValue2);
                                                certificateInstance.Thumbprint = thumbprintInstance2;
                                            }
                                            
                                            JToken toDeleteValue = sslCertificatesValue["toDelete"];
                                            if (toDeleteValue != null && toDeleteValue.Type != JTokenType.Null)
                                            {
                                                bool toDeleteInstance = ((bool)toDeleteValue);
                                                certificateInstance.ToDelete = toDeleteInstance;
                                            }
                                            
                                            JToken validValue = sslCertificatesValue["valid"];
                                            if (validValue != null && validValue.Type != JTokenType.Null)
                                            {
                                                bool validInstance = ((bool)validValue);
                                                certificateInstance.IsValid = validInstance;
                                            }
                                            
                                            JToken cerBlobValue = sslCertificatesValue["cerBlob"];
                                            if (cerBlobValue != null && cerBlobValue.Type != JTokenType.Null)
                                            {
                                                byte[] cerBlobInstance = Encoding.UTF8.GetBytes(((string)cerBlobValue));
                                                certificateInstance.CerBlob = cerBlobInstance;
                                            }
                                            
                                            JToken publicKeyHashValue = sslCertificatesValue["publicKeyHash"];
                                            if (publicKeyHashValue != null && publicKeyHashValue.Type != JTokenType.Null)
                                            {
                                                string publicKeyHashInstance = ((string)publicKeyHashValue);
                                                certificateInstance.PublicKeyHash = publicKeyHashInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken selfLinkValue2 = propertiesValue["selfLink"];
                                    if (selfLinkValue2 != null && selfLinkValue2.Type != JTokenType.Null)
                                    {
                                        Uri selfLinkInstance2 = TypeConversion.TryParseUri(((string)selfLinkValue2));
                                        webSiteJsonFormatInstance.Uri = selfLinkInstance2;
                                    }
                                    
                                    JToken serverFarmValue = propertiesValue["serverFarm"];
                                    if (serverFarmValue != null && serverFarmValue.Type != JTokenType.Null)
                                    {
                                        string serverFarmInstance = ((string)serverFarmValue);
                                        webSiteJsonFormatInstance.ServerFarm = serverFarmInstance;
                                    }
                                    
                                    JToken siteModeValue = propertiesValue["siteMode"];
                                    if (siteModeValue != null && siteModeValue.Type != JTokenType.Null)
                                    {
                                        WebSiteMode siteModeInstance = ((WebSiteMode)Enum.Parse(typeof(WebSiteMode), ((string)siteModeValue), true));
                                        webSiteJsonFormatInstance.SiteMode = siteModeInstance;
                                    }
                                    
                                    JToken sitePropertiesValue = propertiesValue["siteProperties"];
                                    if (sitePropertiesValue != null && sitePropertiesValue.Type != JTokenType.Null)
                                    {
                                        WebSite.SiteProperties sitePropertiesInstance = new WebSite.SiteProperties();
                                        webSiteJsonFormatInstance.Properties = sitePropertiesInstance;
                                        
                                        JToken appSettingsSequenceElement = ((JToken)sitePropertiesValue["appSettings"]);
                                        if (appSettingsSequenceElement != null && appSettingsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in appSettingsSequenceElement)
                                            {
                                                string appSettingsKey = ((string)property.Name);
                                                string appSettingsValue = ((string)property.Value);
                                                sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                            }
                                        }
                                        
                                        JToken metadataSequenceElement = ((JToken)sitePropertiesValue["metadata"]);
                                        if (metadataSequenceElement != null && metadataSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in metadataSequenceElement)
                                            {
                                                string metadataKey = ((string)property2.Name);
                                                string metadataValue = ((string)property2.Value);
                                                sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                            }
                                        }
                                        
                                        JToken propertiesSequenceElement = ((JToken)sitePropertiesValue["properties"]);
                                        if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property3 in propertiesSequenceElement)
                                            {
                                                string propertiesKey = ((string)property3.Name);
                                                string propertiesValue2 = ((string)property3.Value);
                                                sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue2);
                                            }
                                        }
                                    }
                                    
                                    JToken stateValue = propertiesValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        WebSiteState stateInstance = ((WebSiteState)Enum.Parse(typeof(WebSiteState), ((string)stateValue), true));
                                        webSiteJsonFormatInstance.State = stateInstance;
                                    }
                                    
                                    JToken usageStateValue = propertiesValue["usageState"];
                                    if (usageStateValue != null && usageStateValue.Type != JTokenType.Null)
                                    {
                                        WebSiteUsageState usageStateInstance = ((WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), ((string)usageStateValue), true));
                                        webSiteJsonFormatInstance.UsageState = usageStateInstance;
                                    }
                                    
                                    JToken webSpaceValue = propertiesValue["webSpace"];
                                    if (webSpaceValue != null && webSpaceValue.Type != JTokenType.Null)
                                    {
                                        string webSpaceInstance = ((string)webSpaceValue);
                                        webSiteJsonFormatInstance.WebSpace = webSpaceInstance;
                                    }
                                }
                                
                                JToken nameValue3 = webSitesValue["name"];
                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                {
                                    string nameInstance3 = ((string)nameValue3);
                                    webSiteJsonFormatInstance.Name = nameInstance3;
                                }
                                
                                JToken typeValue = webSitesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    webSiteJsonFormatInstance.Type = typeInstance;
                                }
                                
                                JToken locationValue = webSitesValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    webSiteJsonFormatInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)webSitesValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property4 in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property4.Name);
                                        string tagsValue = ((string)property4.Value);
                                        webSiteJsonFormatInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. TBD
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RestartAsync(string resourceGroupName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/restart?";
            url = url + "api-version=2014-04-01";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site Configuration parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateConfigurationAsync(string resourceGroupName, string webSiteName, WebSiteUpdateConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "/config?";
            url = url + "api-version=2014-04-01";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject siteConfigValue = new JObject();
                requestDoc = new JObject();
                requestDoc["siteConfig"] = siteConfigValue;
                
                JObject appSettingsDictionary = new JObject();
                if (parameters.AppSettings != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.AppSettings)
                    {
                        string appSettingsKey = pair.Key;
                        string appSettingsValue = pair.Value;
                        appSettingsDictionary[appSettingsKey] = appSettingsValue;
                    }
                }
                siteConfigValue["appSettings"] = appSettingsDictionary;
                
                if (parameters.ConnectionStrings != null)
                {
                    JArray connectionStringsArray = new JArray();
                    foreach (WebSiteUpdateConfigurationParameters.ConnectionStringInfo connectionStringsItem in parameters.ConnectionStrings)
                    {
                        JObject connStringInfoValue = new JObject();
                        connectionStringsArray.Add(connStringInfoValue);
                        
                        if (connectionStringsItem.ConnectionString != null)
                        {
                            connStringInfoValue["connectionString"] = connectionStringsItem.ConnectionString;
                        }
                        
                        if (connectionStringsItem.Name != null)
                        {
                            connStringInfoValue["name"] = connectionStringsItem.Name;
                        }
                        
                        if (connectionStringsItem.Type != null)
                        {
                            connStringInfoValue["type"] = connectionStringsItem.Type;
                        }
                    }
                    siteConfigValue["connectionStrings"] = connectionStringsArray;
                }
                
                if (parameters.DefaultDocuments != null)
                {
                    JArray defaultDocumentsArray = new JArray();
                    foreach (string defaultDocumentsItem in parameters.DefaultDocuments)
                    {
                        defaultDocumentsArray.Add(defaultDocumentsItem);
                    }
                    siteConfigValue["defaultDocuments"] = defaultDocumentsArray;
                }
                
                if (parameters.DetailedErrorLoggingEnabled != null)
                {
                    siteConfigValue["detailedErrorLoggingEnabled"] = parameters.DetailedErrorLoggingEnabled;
                }
                
                if (parameters.DocumentRoot != null)
                {
                    siteConfigValue["documentRoot"] = parameters.DocumentRoot;
                }
                
                if (parameters.HandlerMappings != null)
                {
                    JArray handlerMappingsArray = new JArray();
                    foreach (WebSiteUpdateConfigurationParameters.HandlerMapping handlerMappingsItem in parameters.HandlerMappings)
                    {
                        JObject handlerMappingValue = new JObject();
                        handlerMappingsArray.Add(handlerMappingValue);
                        
                        if (handlerMappingsItem.Arguments != null)
                        {
                            handlerMappingValue["arguments"] = handlerMappingsItem.Arguments;
                        }
                        
                        if (handlerMappingsItem.Extension != null)
                        {
                            handlerMappingValue["extension"] = handlerMappingsItem.Extension;
                        }
                        
                        if (handlerMappingsItem.ScriptProcessor != null)
                        {
                            handlerMappingValue["scriptProcessor"] = handlerMappingsItem.ScriptProcessor;
                        }
                    }
                    siteConfigValue["handlerMappings"] = handlerMappingsArray;
                }
                
                if (parameters.HttpLoggingEnabled != null)
                {
                    siteConfigValue["httpLoggingEnabled"] = parameters.HttpLoggingEnabled;
                }
                
                if (parameters.LogsDirectorySizeLimit != null)
                {
                    siteConfigValue["logsDirectorySizeLimit"] = parameters.LogsDirectorySizeLimit;
                }
                
                if (parameters.ManagedPipelineMode != null)
                {
                    siteConfigValue["managedPipelineMode"] = parameters.ManagedPipelineMode.ToString();
                }
                
                JObject metadataDictionary = new JObject();
                if (parameters.Metadata != null)
                {
                    foreach (KeyValuePair<string, string> pair2 in parameters.Metadata)
                    {
                        string metadataKey = pair2.Key;
                        string metadataValue = pair2.Value;
                        metadataDictionary[metadataKey] = metadataValue;
                    }
                }
                siteConfigValue["metadata"] = metadataDictionary;
                
                if (parameters.NetFrameworkVersion != null)
                {
                    siteConfigValue["netFrameworkVersion"] = parameters.NetFrameworkVersion;
                }
                
                if (parameters.NumberOfWorkers != null)
                {
                    siteConfigValue["numberOfWorkers"] = parameters.NumberOfWorkers;
                }
                
                if (parameters.PhpVersion != null)
                {
                    siteConfigValue["phpVersion"] = parameters.PhpVersion;
                }
                
                if (parameters.PublishingPassword != null)
                {
                    siteConfigValue["publishingPassword"] = parameters.PublishingPassword;
                }
                
                if (parameters.PublishingUserName != null)
                {
                    siteConfigValue["publishingUsername"] = parameters.PublishingUserName;
                }
                
                if (parameters.RemoteDebuggingEnabled != null)
                {
                    siteConfigValue["remoteDebuggingEnabled"] = parameters.RemoteDebuggingEnabled;
                }
                
                siteConfigValue["remoteDebuggingVersion"] = parameters.RemoteDebuggingVersion.ToString();
                
                if (parameters.RequestTracingEnabled != null)
                {
                    siteConfigValue["requestTracingEnabled"] = parameters.RequestTracingEnabled;
                }
                
                if (parameters.RequestTracingExpirationTime != null)
                {
                    siteConfigValue["requestTracingExpirationTime"] = parameters.RequestTracingExpirationTime;
                }
                
                if (parameters.ScmType != null)
                {
                    siteConfigValue["scmType"] = parameters.ScmType;
                }
                
                if (parameters.Use32BitWorkerProcess != null)
                {
                    siteConfigValue["use32BitWorkerProcess"] = parameters.Use32BitWorkerProcess;
                }
                
                if (parameters.WebSocketsEnabled != null)
                {
                    siteConfigValue["webSocketsEnabled"] = parameters.WebSocketsEnabled;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
