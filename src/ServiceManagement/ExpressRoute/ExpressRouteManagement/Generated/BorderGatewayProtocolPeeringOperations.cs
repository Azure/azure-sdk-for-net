// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.ExpressRoute;
using Microsoft.WindowsAzure.Management.ExpressRoute.Models;

namespace Microsoft.WindowsAzure.Management.ExpressRoute
{
    internal partial class BorderGatewayProtocolPeeringOperations : IServiceOperations<ExpressRouteManagementClient>, IBorderGatewayProtocolPeeringOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// BorderGatewayProtocolPeeringOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal BorderGatewayProtocolPeeringOperations(ExpressRouteManagementClient client)
        {
            this._client = client;
        }
        
        private ExpressRouteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.ExpressRoute.ExpressRouteManagementClient.
        /// </summary>
        public ExpressRouteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The New Border Gateway Protocol Peering operation creates a new
        /// Border Gateway Protocol Peering
        /// </summary>
        /// <param name='serviceKey'>
        /// Required. The service key representing the relationship between
        /// Azure and the customer.
        /// </param>
        /// <param name='accessType'>
        /// Required. Whether the peering is private or public.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the New Border Gateway Protocol
        /// Peering operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ExpressRouteOperationResponse> BeginNewAsync(string serviceKey, BgpPeeringAccessType accessType, BorderGatewayProtocolPeeringNewParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceKey == null)
            {
                throw new ArgumentNullException("serviceKey");
            }
            if (serviceKey.Length > 36)
            {
                throw new ArgumentOutOfRangeException("serviceKey");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.PrimaryPeerSubnet != null && parameters.PrimaryPeerSubnet.Length > 18)
            {
                throw new ArgumentOutOfRangeException("parameters.PrimaryPeerSubnet");
            }
            if (parameters.PrimaryPeerSubnetIpv6 != null && parameters.PrimaryPeerSubnetIpv6.Length > 45)
            {
                throw new ArgumentOutOfRangeException("parameters.PrimaryPeerSubnetIpv6");
            }
            if (parameters.SecondaryPeerSubnet != null && parameters.SecondaryPeerSubnet.Length > 18)
            {
                throw new ArgumentOutOfRangeException("parameters.SecondaryPeerSubnet");
            }
            if (parameters.SecondaryPeerSubnetIpv6 != null && parameters.SecondaryPeerSubnetIpv6.Length > 45)
            {
                throw new ArgumentOutOfRangeException("parameters.SecondaryPeerSubnetIpv6");
            }
            if (parameters.SharedKey != null && parameters.SharedKey.Length < 6)
            {
                throw new ArgumentOutOfRangeException("parameters.SharedKey");
            }
            if (parameters.SharedKey != null && parameters.SharedKey.Length > 24)
            {
                throw new ArgumentOutOfRangeException("parameters.SharedKey");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceKey", serviceKey);
                tracingParameters.Add("accessType", accessType);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginNewAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/dedicatedcircuits/";
            url = url + Uri.EscapeDataString(serviceKey);
            url = url + "/bgppeerings/";
            url = url + Uri.EscapeDataString(ExpressRouteManagementClient.BgpPeeringAccessTypeToString(accessType));
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement createBgpPeeringElement = new XElement(XName.Get("CreateBgpPeering", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(createBgpPeeringElement);
                
                if (parameters.AdvertisedPublicPrefixes != null)
                {
                    XElement advertisedPublicPrefixesElement = new XElement(XName.Get("AdvertisedPublicPrefixes", "http://schemas.microsoft.com/windowsazure"));
                    advertisedPublicPrefixesElement.Value = parameters.AdvertisedPublicPrefixes;
                    createBgpPeeringElement.Add(advertisedPublicPrefixesElement);
                }
                
                XElement customerAsnElement = new XElement(XName.Get("CustomerAsn", "http://schemas.microsoft.com/windowsazure"));
                customerAsnElement.Value = parameters.CustomerAutonomousSystemNumber.ToString();
                createBgpPeeringElement.Add(customerAsnElement);
                
                XElement peerAsnElement = new XElement(XName.Get("PeerAsn", "http://schemas.microsoft.com/windowsazure"));
                peerAsnElement.Value = parameters.PeerAutonomousSystemNumber.ToString();
                createBgpPeeringElement.Add(peerAsnElement);
                
                if (parameters.PrimaryPeerSubnet != null)
                {
                    XElement primaryPeerSubnetElement = new XElement(XName.Get("PrimaryPeerSubnet", "http://schemas.microsoft.com/windowsazure"));
                    primaryPeerSubnetElement.Value = parameters.PrimaryPeerSubnet;
                    createBgpPeeringElement.Add(primaryPeerSubnetElement);
                }
                
                if (parameters.RoutingRegistryName != null)
                {
                    XElement routingRegistryNameElement = new XElement(XName.Get("RoutingRegistryName", "http://schemas.microsoft.com/windowsazure"));
                    routingRegistryNameElement.Value = parameters.RoutingRegistryName;
                    createBgpPeeringElement.Add(routingRegistryNameElement);
                }
                
                if (parameters.SecondaryPeerSubnet != null)
                {
                    XElement secondaryPeerSubnetElement = new XElement(XName.Get("SecondaryPeerSubnet", "http://schemas.microsoft.com/windowsazure"));
                    secondaryPeerSubnetElement.Value = parameters.SecondaryPeerSubnet;
                    createBgpPeeringElement.Add(secondaryPeerSubnetElement);
                }
                
                if (parameters.SharedKey != null)
                {
                    XElement sharedKeyElement = new XElement(XName.Get("SharedKey", "http://schemas.microsoft.com/windowsazure"));
                    sharedKeyElement.Value = parameters.SharedKey;
                    createBgpPeeringElement.Add(sharedKeyElement);
                }
                
                XElement vlanIdElement = new XElement(XName.Get("VlanId", "http://schemas.microsoft.com/windowsazure"));
                vlanIdElement.Value = parameters.VirtualLanId.ToString();
                createBgpPeeringElement.Add(vlanIdElement);
                
                if (parameters.AdvertisedPublicPrefixesIpv6 != null)
                {
                    XElement advertisedPublicPrefixesIpv6Element = new XElement(XName.Get("AdvertisedPublicPrefixesIpv6", "http://schemas.microsoft.com/windowsazure"));
                    advertisedPublicPrefixesIpv6Element.Value = parameters.AdvertisedPublicPrefixesIpv6;
                    createBgpPeeringElement.Add(advertisedPublicPrefixesIpv6Element);
                }
                
                if (parameters.PrimaryPeerSubnetIpv6 != null)
                {
                    XElement primaryPeerSubnetIpv6Element = new XElement(XName.Get("PrimaryPeerSubnetIpv6", "http://schemas.microsoft.com/windowsazure"));
                    primaryPeerSubnetIpv6Element.Value = parameters.PrimaryPeerSubnetIpv6;
                    createBgpPeeringElement.Add(primaryPeerSubnetIpv6Element);
                }
                
                if (parameters.SecondaryPeerSubnetIpv6 != null)
                {
                    XElement secondaryPeerSubnetIpv6Element = new XElement(XName.Get("SecondaryPeerSubnetIpv6", "http://schemas.microsoft.com/windowsazure"));
                    secondaryPeerSubnetIpv6Element.Value = parameters.SecondaryPeerSubnetIpv6;
                    createBgpPeeringElement.Add(secondaryPeerSubnetIpv6Element);
                }
                
                XElement customerAsnIpv6Element = new XElement(XName.Get("CustomerAsnIpv6", "http://schemas.microsoft.com/windowsazure"));
                customerAsnIpv6Element.Value = parameters.CustomerAutonomousSystemNumberIpv6.ToString();
                createBgpPeeringElement.Add(customerAsnIpv6Element);
                
                if (parameters.RoutingRegistryNameIpv6 != null)
                {
                    XElement routingRegistryNameIpv6Element = new XElement(XName.Get("RoutingRegistryNameIpv6", "http://schemas.microsoft.com/windowsazure"));
                    routingRegistryNameIpv6Element.Value = parameters.RoutingRegistryNameIpv6;
                    createBgpPeeringElement.Add(routingRegistryNameIpv6Element);
                }
                
                XElement legacyModeElement = new XElement(XName.Get("LegacyMode", "http://schemas.microsoft.com/windowsazure"));
                legacyModeElement.Value = parameters.LegacyMode.ToString();
                createBgpPeeringElement.Add(legacyModeElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Remove Border Gateway Protocol Peering operation deletes an
        /// existing border gateway protocol peering.
        /// </summary>
        /// <param name='serviceKey'>
        /// Required. Service Key representing the border gateway protocol
        /// peering to be deleted.
        /// </param>
        /// <param name='accessType'>
        /// Required. Whether the peering is private or public.
        /// </param>
        /// <param name='peerAddressType'>
        /// Required. Whether the BGP Peer Address Type to deleted is IPv4,
        /// IPv6 or All.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ExpressRouteOperationResponse> BeginRemoveAsync(string serviceKey, BgpPeeringAccessType accessType, BgpPeerAddressType peerAddressType, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceKey == null)
            {
                throw new ArgumentNullException("serviceKey");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceKey", serviceKey);
                tracingParameters.Add("accessType", accessType);
                tracingParameters.Add("peerAddressType", peerAddressType);
                TracingAdapter.Enter(invocationId, this, "BeginRemoveAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/dedicatedcircuits/";
            url = url + Uri.EscapeDataString(serviceKey);
            url = url + "/bgppeerings/";
            url = url + Uri.EscapeDataString(ExpressRouteManagementClient.BgpPeeringAccessTypeToString(accessType));
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.0");
            queryParameters.Add("addressfamily=" + Uri.EscapeDataString(peerAddressType.ToString()));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Update Border Gateway Protocol Peering operation updates an
        /// existing bgp peering.
        /// </summary>
        /// <param name='serviceKey'>
        /// Required. The service key representing the relationship between
        /// Azure and the customer.
        /// </param>
        /// <param name='accessType'>
        /// Required. Whether the peering is private or public.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Border Gateway Protocol
        /// Peering operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<ExpressRouteOperationResponse> BeginUpdateAsync(string serviceKey, BgpPeeringAccessType accessType, BorderGatewayProtocolPeeringUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceKey == null)
            {
                throw new ArgumentNullException("serviceKey");
            }
            if (serviceKey.Length > 36)
            {
                throw new ArgumentOutOfRangeException("serviceKey");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.PrimaryPeerSubnet != null && parameters.PrimaryPeerSubnet.Length > 18)
            {
                throw new ArgumentOutOfRangeException("parameters.PrimaryPeerSubnet");
            }
            if (parameters.PrimaryPeerSubnetIpv6 != null && parameters.PrimaryPeerSubnetIpv6.Length > 45)
            {
                throw new ArgumentOutOfRangeException("parameters.PrimaryPeerSubnetIpv6");
            }
            if (parameters.SecondaryPeerSubnet != null && parameters.SecondaryPeerSubnet.Length > 18)
            {
                throw new ArgumentOutOfRangeException("parameters.SecondaryPeerSubnet");
            }
            if (parameters.SecondaryPeerSubnetIpv6 != null && parameters.SecondaryPeerSubnetIpv6.Length > 45)
            {
                throw new ArgumentOutOfRangeException("parameters.SecondaryPeerSubnetIpv6");
            }
            if (parameters.SharedKey != null && parameters.SharedKey.Length < 6)
            {
                throw new ArgumentOutOfRangeException("parameters.SharedKey");
            }
            if (parameters.SharedKey != null && parameters.SharedKey.Length > 24)
            {
                throw new ArgumentOutOfRangeException("parameters.SharedKey");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceKey", serviceKey);
                tracingParameters.Add("accessType", accessType);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/dedicatedcircuits/";
            url = url + Uri.EscapeDataString(serviceKey);
            url = url + "/bgppeerings/";
            url = url + Uri.EscapeDataString(ExpressRouteManagementClient.BgpPeeringAccessTypeToString(accessType));
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateBgpPeeringElement = new XElement(XName.Get("UpdateBgpPeering", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(updateBgpPeeringElement);
                
                if (parameters.AdvertisedPublicPrefixes != null)
                {
                    XElement advertisedPublicPrefixesElement = new XElement(XName.Get("AdvertisedPublicPrefixes", "http://schemas.microsoft.com/windowsazure"));
                    advertisedPublicPrefixesElement.Value = parameters.AdvertisedPublicPrefixes;
                    updateBgpPeeringElement.Add(advertisedPublicPrefixesElement);
                }
                
                XElement customerAsnElement = new XElement(XName.Get("CustomerAsn", "http://schemas.microsoft.com/windowsazure"));
                customerAsnElement.Value = parameters.CustomerAutonomousSystemNumber.ToString();
                updateBgpPeeringElement.Add(customerAsnElement);
                
                XElement peerAsnElement = new XElement(XName.Get("PeerAsn", "http://schemas.microsoft.com/windowsazure"));
                peerAsnElement.Value = parameters.PeerAutonomousSystemNumber.ToString();
                updateBgpPeeringElement.Add(peerAsnElement);
                
                if (parameters.PrimaryPeerSubnet != null)
                {
                    XElement primaryPeerSubnetElement = new XElement(XName.Get("PrimaryPeerSubnet", "http://schemas.microsoft.com/windowsazure"));
                    primaryPeerSubnetElement.Value = parameters.PrimaryPeerSubnet;
                    updateBgpPeeringElement.Add(primaryPeerSubnetElement);
                }
                
                if (parameters.RoutingRegistryName != null)
                {
                    XElement routingRegistryNameElement = new XElement(XName.Get("RoutingRegistryName", "http://schemas.microsoft.com/windowsazure"));
                    routingRegistryNameElement.Value = parameters.RoutingRegistryName;
                    updateBgpPeeringElement.Add(routingRegistryNameElement);
                }
                
                if (parameters.SecondaryPeerSubnet != null)
                {
                    XElement secondaryPeerSubnetElement = new XElement(XName.Get("SecondaryPeerSubnet", "http://schemas.microsoft.com/windowsazure"));
                    secondaryPeerSubnetElement.Value = parameters.SecondaryPeerSubnet;
                    updateBgpPeeringElement.Add(secondaryPeerSubnetElement);
                }
                
                if (parameters.SharedKey != null)
                {
                    XElement sharedKeyElement = new XElement(XName.Get("SharedKey", "http://schemas.microsoft.com/windowsazure"));
                    sharedKeyElement.Value = parameters.SharedKey;
                    updateBgpPeeringElement.Add(sharedKeyElement);
                }
                
                XElement vlanIdElement = new XElement(XName.Get("VlanId", "http://schemas.microsoft.com/windowsazure"));
                vlanIdElement.Value = parameters.VirtualLanId.ToString();
                updateBgpPeeringElement.Add(vlanIdElement);
                
                if (parameters.AdvertisedPublicPrefixesIpv6 != null)
                {
                    XElement advertisedPublicPrefixesIpv6Element = new XElement(XName.Get("AdvertisedPublicPrefixesIpv6", "http://schemas.microsoft.com/windowsazure"));
                    advertisedPublicPrefixesIpv6Element.Value = parameters.AdvertisedPublicPrefixesIpv6;
                    updateBgpPeeringElement.Add(advertisedPublicPrefixesIpv6Element);
                }
                
                if (parameters.PrimaryPeerSubnetIpv6 != null)
                {
                    XElement primaryPeerSubnetIpv6Element = new XElement(XName.Get("PrimaryPeerSubnetIpv6", "http://schemas.microsoft.com/windowsazure"));
                    primaryPeerSubnetIpv6Element.Value = parameters.PrimaryPeerSubnetIpv6;
                    updateBgpPeeringElement.Add(primaryPeerSubnetIpv6Element);
                }
                
                if (parameters.SecondaryPeerSubnetIpv6 != null)
                {
                    XElement secondaryPeerSubnetIpv6Element = new XElement(XName.Get("SecondaryPeerSubnetIpv6", "http://schemas.microsoft.com/windowsazure"));
                    secondaryPeerSubnetIpv6Element.Value = parameters.SecondaryPeerSubnetIpv6;
                    updateBgpPeeringElement.Add(secondaryPeerSubnetIpv6Element);
                }
                
                XElement customerAsnIpv6Element = new XElement(XName.Get("CustomerAsnIpv6", "http://schemas.microsoft.com/windowsazure"));
                customerAsnIpv6Element.Value = parameters.CustomerAutonomousSystemNumberIpv6.ToString();
                updateBgpPeeringElement.Add(customerAsnIpv6Element);
                
                if (parameters.RoutingRegistryNameIpv6 != null)
                {
                    XElement routingRegistryNameIpv6Element = new XElement(XName.Get("RoutingRegistryNameIpv6", "http://schemas.microsoft.com/windowsazure"));
                    routingRegistryNameIpv6Element.Value = parameters.RoutingRegistryNameIpv6;
                    updateBgpPeeringElement.Add(routingRegistryNameIpv6Element);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Border Gateway Protocol Peering operation retrieves the bgp
        /// peering for the dedicated circuit with the specified service key.
        /// </summary>
        /// <param name='serviceKey'>
        /// Required. The servicee key representing the dedicated circuit.
        /// </param>
        /// <param name='accessType'>
        /// Required. Whether the peering is private or public.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Border Gateway Protocol Peering Operation Response.
        /// </returns>
        public async Task<BorderGatewayProtocolPeeringGetResponse> GetAsync(string serviceKey, BgpPeeringAccessType accessType, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceKey == null)
            {
                throw new ArgumentNullException("serviceKey");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceKey", serviceKey);
                tracingParameters.Add("accessType", accessType);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/dedicatedcircuits/";
            url = url + Uri.EscapeDataString(serviceKey);
            url = url + "/bgppeerings/";
            url = url + Uri.EscapeDataString(ExpressRouteManagementClient.BgpPeeringAccessTypeToString(accessType));
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BorderGatewayProtocolPeeringGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BorderGatewayProtocolPeeringGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement bgpPeeringElement = responseDoc.Element(XName.Get("BgpPeering", "http://schemas.microsoft.com/windowsazure"));
                        if (bgpPeeringElement != null)
                        {
                            AzureBgpPeering bgpPeeringInstance = new AzureBgpPeering();
                            result.BgpPeering = bgpPeeringInstance;
                            
                            XElement advertisedPublicPrefixesElement = bgpPeeringElement.Element(XName.Get("AdvertisedPublicPrefixes", "http://schemas.microsoft.com/windowsazure"));
                            if (advertisedPublicPrefixesElement != null)
                            {
                                string advertisedPublicPrefixesInstance = advertisedPublicPrefixesElement.Value;
                                bgpPeeringInstance.AdvertisedPublicPrefixes = advertisedPublicPrefixesInstance;
                            }
                            
                            XElement advertisedPublicPrefixesStateElement = bgpPeeringElement.Element(XName.Get("AdvertisedPublicPrefixesState", "http://schemas.microsoft.com/windowsazure"));
                            if (advertisedPublicPrefixesStateElement != null)
                            {
                                string advertisedPublicPrefixesStateInstance = advertisedPublicPrefixesStateElement.Value;
                                bgpPeeringInstance.AdvertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                            }
                            
                            XElement azureAsnElement = bgpPeeringElement.Element(XName.Get("AzureAsn", "http://schemas.microsoft.com/windowsazure"));
                            if (azureAsnElement != null)
                            {
                                uint azureAsnInstance = uint.Parse(azureAsnElement.Value, CultureInfo.InvariantCulture);
                                bgpPeeringInstance.AzureAsn = azureAsnInstance;
                            }
                            
                            XElement customerAsnElement = bgpPeeringElement.Element(XName.Get("CustomerAsn", "http://schemas.microsoft.com/windowsazure"));
                            if (customerAsnElement != null)
                            {
                                uint customerAsnInstance = uint.Parse(customerAsnElement.Value, CultureInfo.InvariantCulture);
                                bgpPeeringInstance.CustomerAutonomousSystemNumber = customerAsnInstance;
                            }
                            
                            XElement peerAsnElement = bgpPeeringElement.Element(XName.Get("PeerAsn", "http://schemas.microsoft.com/windowsazure"));
                            if (peerAsnElement != null)
                            {
                                uint peerAsnInstance = uint.Parse(peerAsnElement.Value, CultureInfo.InvariantCulture);
                                bgpPeeringInstance.PeerAsn = peerAsnInstance;
                            }
                            
                            XElement primaryAzurePortElement = bgpPeeringElement.Element(XName.Get("PrimaryAzurePort", "http://schemas.microsoft.com/windowsazure"));
                            if (primaryAzurePortElement != null)
                            {
                                string primaryAzurePortInstance = primaryAzurePortElement.Value;
                                bgpPeeringInstance.PrimaryAzurePort = primaryAzurePortInstance;
                            }
                            
                            XElement primaryPeerSubnetElement = bgpPeeringElement.Element(XName.Get("PrimaryPeerSubnet", "http://schemas.microsoft.com/windowsazure"));
                            if (primaryPeerSubnetElement != null)
                            {
                                string primaryPeerSubnetInstance = primaryPeerSubnetElement.Value;
                                bgpPeeringInstance.PrimaryPeerSubnet = primaryPeerSubnetInstance;
                            }
                            
                            XElement routingRegistryNameElement = bgpPeeringElement.Element(XName.Get("RoutingRegistryName", "http://schemas.microsoft.com/windowsazure"));
                            if (routingRegistryNameElement != null)
                            {
                                string routingRegistryNameInstance = routingRegistryNameElement.Value;
                                bgpPeeringInstance.RoutingRegistryName = routingRegistryNameInstance;
                            }
                            
                            XElement secondaryAzurePortElement = bgpPeeringElement.Element(XName.Get("SecondaryAzurePort", "http://schemas.microsoft.com/windowsazure"));
                            if (secondaryAzurePortElement != null)
                            {
                                string secondaryAzurePortInstance = secondaryAzurePortElement.Value;
                                bgpPeeringInstance.SecondaryAzurePort = secondaryAzurePortInstance;
                            }
                            
                            XElement secondaryPeerSubnetElement = bgpPeeringElement.Element(XName.Get("SecondaryPeerSubnet", "http://schemas.microsoft.com/windowsazure"));
                            if (secondaryPeerSubnetElement != null)
                            {
                                string secondaryPeerSubnetInstance = secondaryPeerSubnetElement.Value;
                                bgpPeeringInstance.SecondaryPeerSubnet = secondaryPeerSubnetInstance;
                            }
                            
                            XElement stateElement = bgpPeeringElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                BgpPeeringState stateInstance = ((BgpPeeringState)Enum.Parse(typeof(BgpPeeringState), stateElement.Value, true));
                                bgpPeeringInstance.State = stateInstance;
                            }
                            
                            XElement vlanIdElement = bgpPeeringElement.Element(XName.Get("VlanId", "http://schemas.microsoft.com/windowsazure"));
                            if (vlanIdElement != null)
                            {
                                uint vlanIdInstance = uint.Parse(vlanIdElement.Value, CultureInfo.InvariantCulture);
                                bgpPeeringInstance.VlanId = vlanIdInstance;
                            }
                            
                            XElement advertisedCommunitiesElement = bgpPeeringElement.Element(XName.Get("AdvertisedCommunities", "http://schemas.microsoft.com/windowsazure"));
                            if (advertisedCommunitiesElement != null)
                            {
                                string advertisedCommunitiesInstance = advertisedCommunitiesElement.Value;
                                bgpPeeringInstance.AdvertisedCommunities = advertisedCommunitiesInstance;
                            }
                            
                            XElement advertisedPublicPrefixesIpv6Element = bgpPeeringElement.Element(XName.Get("AdvertisedPublicPrefixesIpv6", "http://schemas.microsoft.com/windowsazure"));
                            if (advertisedPublicPrefixesIpv6Element != null)
                            {
                                string advertisedPublicPrefixesIpv6Instance = advertisedPublicPrefixesIpv6Element.Value;
                                bgpPeeringInstance.AdvertisedPublicPrefixesIpv6 = advertisedPublicPrefixesIpv6Instance;
                            }
                            
                            XElement advertisedPublicPrefixesStateIpv6Element = bgpPeeringElement.Element(XName.Get("AdvertisedPublicPrefixesStateIpv6", "http://schemas.microsoft.com/windowsazure"));
                            if (advertisedPublicPrefixesStateIpv6Element != null)
                            {
                                string advertisedPublicPrefixesStateIpv6Instance = advertisedPublicPrefixesStateIpv6Element.Value;
                                bgpPeeringInstance.AdvertisedPublicPrefixesStateIpv6 = advertisedPublicPrefixesStateIpv6Instance;
                            }
                            
                            XElement primaryPeerSubnetIpv6Element = bgpPeeringElement.Element(XName.Get("PrimaryPeerSubnetIpv6", "http://schemas.microsoft.com/windowsazure"));
                            if (primaryPeerSubnetIpv6Element != null)
                            {
                                string primaryPeerSubnetIpv6Instance = primaryPeerSubnetIpv6Element.Value;
                                bgpPeeringInstance.PrimaryPeerSubnetIpv6 = primaryPeerSubnetIpv6Instance;
                            }
                            
                            XElement secondaryPeerSubnetIpv6Element = bgpPeeringElement.Element(XName.Get("SecondaryPeerSubnetIpv6", "http://schemas.microsoft.com/windowsazure"));
                            if (secondaryPeerSubnetIpv6Element != null)
                            {
                                string secondaryPeerSubnetIpv6Instance = secondaryPeerSubnetIpv6Element.Value;
                                bgpPeeringInstance.SecondaryPeerSubnetIpv6 = secondaryPeerSubnetIpv6Instance;
                            }
                            
                            XElement customerAsnIpv6Element = bgpPeeringElement.Element(XName.Get("CustomerAsnIpv6", "http://schemas.microsoft.com/windowsazure"));
                            if (customerAsnIpv6Element != null)
                            {
                                uint customerAsnIpv6Instance = uint.Parse(customerAsnIpv6Element.Value, CultureInfo.InvariantCulture);
                                bgpPeeringInstance.CustomerAutonomousSystemNumberIpv6 = customerAsnIpv6Instance;
                            }
                            
                            XElement routingRegistryNameIpv6Element = bgpPeeringElement.Element(XName.Get("RoutingRegistryNameIpv6", "http://schemas.microsoft.com/windowsazure"));
                            if (routingRegistryNameIpv6Element != null)
                            {
                                string routingRegistryNameIpv6Instance = routingRegistryNameIpv6Element.Value;
                                bgpPeeringInstance.RoutingRegistryNameIpv6 = routingRegistryNameIpv6Instance;
                            }
                            
                            XElement stateIpv6Element = bgpPeeringElement.Element(XName.Get("StateIpv6", "http://schemas.microsoft.com/windowsazure"));
                            if (stateIpv6Element != null)
                            {
                                BgpPeeringState stateIpv6Instance = ((BgpPeeringState)Enum.Parse(typeof(BgpPeeringState), stateIpv6Element.Value, true));
                                bgpPeeringInstance.StateIpv6 = stateIpv6Instance;
                            }
                            
                            XElement legacyModeElement = bgpPeeringElement.Element(XName.Get("LegacyMode", "http://schemas.microsoft.com/windowsazure"));
                            if (legacyModeElement != null)
                            {
                                uint legacyModeInstance = uint.Parse(legacyModeElement.Value, CultureInfo.InvariantCulture);
                                bgpPeeringInstance.LegacyMode = legacyModeInstance;
                            }
                            
                            XElement advertisedCommunitiesIpv6Element = bgpPeeringElement.Element(XName.Get("AdvertisedCommunitiesIpv6", "http://schemas.microsoft.com/windowsazure"));
                            if (advertisedCommunitiesIpv6Element != null)
                            {
                                string advertisedCommunitiesIpv6Instance = advertisedCommunitiesIpv6Element.Value;
                                bgpPeeringInstance.AdvertisedCommunitiesIpv6 = advertisedCommunitiesIpv6Instance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Express Route operation status gets information on the
        /// status of Express Route operations in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154112.aspx
        /// for more information)
        /// </summary>
        /// <param name='operationId'>
        /// Required. The id  of the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ExpressRouteOperationStatusResponse> GetOperationStatusAsync(string operationId, CancellationToken cancellationToken)
        {
            // Validate
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationId", operationId);
                TracingAdapter.Enter(invocationId, this, "GetOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/operation/";
            url = url + Uri.EscapeDataString(operationId);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2011-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteOperationStatusResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteOperationStatusResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationElement = responseDoc.Element(XName.Get("GatewayOperation", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationElement != null)
                        {
                            XElement idElement = gatewayOperationElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.Id = idInstance;
                            }
                            
                            XElement statusElement = gatewayOperationElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null)
                            {
                                ExpressRouteOperationStatus statusInstance = ((ExpressRouteOperationStatus)Enum.Parse(typeof(ExpressRouteOperationStatus), statusElement.Value, true));
                                result.Status = statusInstance;
                            }
                            
                            XElement httpStatusCodeElement = gatewayOperationElement.Element(XName.Get("HttpStatusCode", "http://schemas.microsoft.com/windowsazure"));
                            if (httpStatusCodeElement != null)
                            {
                                HttpStatusCode httpStatusCodeInstance = ((HttpStatusCode)Enum.Parse(typeof(HttpStatusCode), httpStatusCodeElement.Value, true));
                                result.HttpStatusCode = httpStatusCodeInstance;
                            }
                            
                            XElement dataElement = gatewayOperationElement.Element(XName.Get("Data", "http://schemas.microsoft.com/windowsazure"));
                            if (dataElement != null)
                            {
                                string dataInstance = dataElement.Value;
                                result.Data = dataInstance;
                            }
                            
                            XElement errorElement = gatewayOperationElement.Element(XName.Get("Error", "http://schemas.microsoft.com/windowsazure"));
                            if (errorElement != null)
                            {
                                ExpressRouteOperationStatusResponse.ErrorDetails errorInstance = new ExpressRouteOperationStatusResponse.ErrorDetails();
                                result.Error = errorInstance;
                                
                                XElement codeElement = errorElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                if (codeElement != null)
                                {
                                    string codeInstance = codeElement.Value;
                                    errorInstance.Code = codeInstance;
                                }
                                
                                XElement messageElement = errorElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                if (messageElement != null)
                                {
                                    string messageInstance = messageElement.Value;
                                    errorInstance.Message = messageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The New Border Gateway Protocol Peering operation creates a new
        /// border gateway protocol peering associated with the dedicated
        /// circuit specified by the service key provided.
        /// </summary>
        /// <param name='serviceKey'>
        /// Required. The service key representing the relationship between
        /// Azure and the customer.
        /// </param>
        /// <param name='accessType'>
        /// Required. Whether the peering is private or public.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the New Bgp Peering operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ExpressRouteOperationStatusResponse> NewAsync(string serviceKey, BgpPeeringAccessType accessType, BorderGatewayProtocolPeeringNewParameters parameters, CancellationToken cancellationToken)
        {
            ExpressRouteManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceKey", serviceKey);
                tracingParameters.Add("accessType", accessType);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "NewAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ExpressRouteOperationResponse response = await client.BorderGatewayProtocolPeerings.BeginNewAsync(serviceKey, accessType, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ExpressRouteOperationStatusResponse result = await client.BorderGatewayProtocolPeerings.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ExpressRouteOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.BorderGatewayProtocolPeerings.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != ExpressRouteOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Remove Border Gateway Protocol Peering operation deletes an
        /// existing border gateway protocol peering.
        /// </summary>
        /// <param name='serviceKey'>
        /// Required. Service key associated with the border gateway protocol
        /// peering to be deleted.
        /// </param>
        /// <param name='accessType'>
        /// Required. Whether the peering is private or public.
        /// </param>
        /// <param name='peerAddressType'>
        /// Required. Whether the BGP Peer Address Type to deleted is IPv4,
        /// IPv6 or All.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ExpressRouteOperationStatusResponse> RemoveAsync(string serviceKey, BgpPeeringAccessType accessType, BgpPeerAddressType peerAddressType, CancellationToken cancellationToken)
        {
            ExpressRouteManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceKey", serviceKey);
                tracingParameters.Add("accessType", accessType);
                tracingParameters.Add("peerAddressType", peerAddressType);
                TracingAdapter.Enter(invocationId, this, "RemoveAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ExpressRouteOperationResponse response = await client.BorderGatewayProtocolPeerings.BeginRemoveAsync(serviceKey, accessType, peerAddressType, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ExpressRouteOperationStatusResponse result = await client.BorderGatewayProtocolPeerings.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ExpressRouteOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.BorderGatewayProtocolPeerings.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != ExpressRouteOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Update Border Gateway Protocol Peering operation updates an
        /// existing border gateway protocol peering or creates a new one if
        /// one doesn't exist.
        /// </summary>
        /// <param name='serviceKey'>
        /// Required. The service key representing the relationship between
        /// Azure and the customer.
        /// </param>
        /// <param name='accessType'>
        /// Required. Whether the peering is private or public.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Border Gateway Protocol
        /// Peering operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ExpressRouteOperationStatusResponse> UpdateAsync(string serviceKey, BgpPeeringAccessType accessType, BorderGatewayProtocolPeeringUpdateParameters parameters, CancellationToken cancellationToken)
        {
            ExpressRouteManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceKey", serviceKey);
                tracingParameters.Add("accessType", accessType);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ExpressRouteOperationResponse response = await client.BorderGatewayProtocolPeerings.BeginUpdateAsync(serviceKey, accessType, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ExpressRouteOperationStatusResponse result = await client.BorderGatewayProtocolPeerings.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == ExpressRouteOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.BorderGatewayProtocolPeerings.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != ExpressRouteOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
