// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.RemoteApp;
using Microsoft.Azure.Management.RemoteApp.Models;

namespace Microsoft.Azure.Management.RemoteApp
{
    /// <summary>
    /// RmoteApp management client
    /// </summary>
    public static partial class VNetOperationsExtensions
    {
        /// <summary>
        /// Creates or updates a virtual network.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <param name='vNetDetails'>
        /// Required. Details about the virtual network to create or update.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId CreateOrUpdate(this IVNetOperations operations, string vNetName, VNetParameter vNetDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVNetOperations)s).CreateOrUpdateAsync(vNetName, vNetDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates or updates a virtual network.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <param name='vNetDetails'>
        /// Required. Details about the virtual network to create or update.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> CreateOrUpdateAsync(this IVNetOperations operations, string vNetName, VNetParameter vNetDetails)
        {
            return operations.CreateOrUpdateAsync(vNetName, vNetDetails, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the specified RemoteApp virtual network
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId Delete(this IVNetOperations operations, string vNetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVNetOperations)s).DeleteAsync(vNetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the specified RemoteApp virtual network
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> DeleteAsync(this IVNetOperations operations, string vNetName)
        {
            return operations.DeleteAsync(vNetName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the specified virtual network's configuration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <param name='includeSharedKey'>
        /// Required. Set to true to get back the shared key used to configure
        /// the VPN connection
        /// </param>
        /// <returns>
        /// RemoteApp virtual network information.
        /// </returns>
        public static VNetResult Get(this IVNetOperations operations, string vNetName, bool includeSharedKey)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVNetOperations)s).GetAsync(vNetName, includeSharedKey);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the specified virtual network's configuration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <param name='includeSharedKey'>
        /// Required. Set to true to get back the shared key used to configure
        /// the VPN connection
        /// </param>
        /// <returns>
        /// RemoteApp virtual network information.
        /// </returns>
        public static Task<VNetResult> GetAsync(this IVNetOperations operations, string vNetName, bool includeSharedKey)
        {
            return operations.GetAsync(vNetName, includeSharedKey, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the status of the call from ResetVpnSharedKey.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='trackingId'>
        /// Required. Tracking ID returned by ResetVpnSharedKey
        /// </param>
        /// <returns>
        /// Current state of a long running operation.
        /// </returns>
        public static VNetOperationStatusResult GetResetVpnSharedKeyOperationStatus(this IVNetOperations operations, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVNetOperations)s).GetResetVpnSharedKeyOperationStatusAsync(trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the status of the call from ResetVpnSharedKey.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='trackingId'>
        /// Required. Tracking ID returned by ResetVpnSharedKey
        /// </param>
        /// <returns>
        /// Current state of a long running operation.
        /// </returns>
        public static Task<VNetOperationStatusResult> GetResetVpnSharedKeyOperationStatusAsync(this IVNetOperations operations, string trackingId)
        {
            return operations.GetResetVpnSharedKeyOperationStatusAsync(trackingId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a configuration script to configure the VPN deviceto connect
        /// to the given virtual network. Run this script on the VPN device.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <param name='vendor'>
        /// Optional. Vendor
        /// </param>
        /// <param name='vpnDevice'>
        /// Optional. Model of the VPN
        /// </param>
        /// <param name='osFamily'>
        /// Optional. OS Family
        /// </param>
        /// <returns>
        /// Script that can be used to set up a VPN device.
        /// </returns>
        public static VNetConfigScriptResult GetVpnDeviceConfigScript(this IVNetOperations operations, string vNetName, string vendor, string vpnDevice, string osFamily)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVNetOperations)s).GetVpnDeviceConfigScriptAsync(vNetName, vendor, vpnDevice, osFamily);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a configuration script to configure the VPN deviceto connect
        /// to the given virtual network. Run this script on the VPN device.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <param name='vendor'>
        /// Optional. Vendor
        /// </param>
        /// <param name='vpnDevice'>
        /// Optional. Model of the VPN
        /// </param>
        /// <param name='osFamily'>
        /// Optional. OS Family
        /// </param>
        /// <returns>
        /// Script that can be used to set up a VPN device.
        /// </returns>
        public static Task<VNetConfigScriptResult> GetVpnDeviceConfigScriptAsync(this IVNetOperations operations, string vNetName, string vendor, string vpnDevice, string osFamily)
        {
            return operations.GetVpnDeviceConfigScriptAsync(vNetName, vendor, vpnDevice, osFamily, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets details of supported VPN devices
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <returns>
        /// The VPN device information.
        /// </returns>
        public static VNetVpnDeviceResult GetVpnDevices(this IVNetOperations operations, string vNetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVNetOperations)s).GetVpnDevicesAsync(vNetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets details of supported VPN devices
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <returns>
        /// The VPN device information.
        /// </returns>
        public static Task<VNetVpnDeviceResult> GetVpnDevicesAsync(this IVNetOperations operations, string vNetName)
        {
            return operations.GetVpnDevicesAsync(vNetName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of virtual network configurations.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <returns>
        /// List of virtual networks.
        /// </returns>
        public static VNetListResult List(this IVNetOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVNetOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a list of virtual network configurations.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <returns>
        /// List of virtual networks.
        /// </returns>
        public static Task<VNetListResult> ListAsync(this IVNetOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Posts a request to asynchronously generate a new shared key for the
        /// specified virtual network and returns a tracking ID for the
        /// operation.Use GetResetVpnSharedKeyOperationStatus with this
        /// tracking ID to determine when the operation has completed.  When
        /// the status returns Success,call Get passing the virtual network
        /// name and true for the includeSharedKey parameter. This will return
        /// a VNetResult containing the new key.Call GetVpnConfigScript to get
        /// back the configuration script to configure the VPN device. Run
        /// this script using the new key on the VPN device.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId ResetVpnSharedKey(this IVNetOperations operations, string vNetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVNetOperations)s).ResetVpnSharedKeyAsync(vNetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Posts a request to asynchronously generate a new shared key for the
        /// specified virtual network and returns a tracking ID for the
        /// operation.Use GetResetVpnSharedKeyOperationStatus with this
        /// tracking ID to determine when the operation has completed.  When
        /// the status returns Success,call Get passing the virtual network
        /// name and true for the includeSharedKey parameter. This will return
        /// a VNetResult containing the new key.Call GetVpnConfigScript to get
        /// back the configuration script to configure the VPN device. Run
        /// this script using the new key on the VPN device.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.IVNetOperations.
        /// </param>
        /// <param name='vNetName'>
        /// Required. RemoteApp virtual network name.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> ResetVpnSharedKeyAsync(this IVNetOperations operations, string vNetName)
        {
            return operations.ResetVpnSharedKeyAsync(vNetName, CancellationToken.None);
        }
    }
}
