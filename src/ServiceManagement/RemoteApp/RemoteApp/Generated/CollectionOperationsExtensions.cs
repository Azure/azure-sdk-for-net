// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.RemoteApp;
using Microsoft.Azure.Management.RemoteApp.Models;

namespace Microsoft.Azure.Management.RemoteApp
{
    /// <summary>
    /// RmoteApp management client
    /// </summary>
    public static partial class CollectionOperationsExtensions
    {
        /// <summary>
        /// Creates a collection with the given details.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// creation details of the collection or update and deploy (true for
        /// populate only).
        /// </param>
        /// <param name='collectionDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId Create(this ICollectionOperations operations, bool populateOnly, CollectionCreationDetails collectionDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).CreateAsync(populateOnly, collectionDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a collection with the given details.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// creation details of the collection or update and deploy (true for
        /// populate only).
        /// </param>
        /// <param name='collectionDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> CreateAsync(this ICollectionOperations operations, bool populateOnly, CollectionCreationDetails collectionDetails)
        {
            return operations.CreateAsync(populateOnly, collectionDetails, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The name of the collection.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId Delete(this ICollectionOperations operations, string collectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).DeleteAsync(collectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The name of the collection.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> DeleteAsync(this ICollectionOperations operations, string collectionName)
        {
            return operations.DeleteAsync(collectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Disconnects the session associated with the user UPN
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name where the session exists.
        /// </param>
        /// <param name='sessionParameter'>
        /// Required. The session command parameter to disconnect a session.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId DisconnectSession(this ICollectionOperations operations, string collectionName, SessionCommandParameter sessionParameter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).DisconnectSessionAsync(collectionName, sessionParameter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Disconnects the session associated with the user UPN
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name where the session exists.
        /// </param>
        /// <param name='sessionParameter'>
        /// Required. The session command parameter to disconnect a session.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> DisconnectSessionAsync(this ICollectionOperations operations, string collectionName, SessionCommandParameter sessionParameter)
        {
            return operations.DisconnectSessionAsync(collectionName, sessionParameter, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the result for a given collection
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The name of the collection.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public static CollectionResult Get(this ICollectionOperations operations, string collectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).GetAsync(collectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the result for a given collection
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The name of the collection.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public static Task<CollectionResult> GetAsync(this ICollectionOperations operations, string collectionName)
        {
            return operations.GetAsync(collectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the specified Active directory's configuration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. Name of the collection
        /// </param>
        /// <returns>
        /// Similar in structure to the VNet class but used to return one of
        /// these in GET requests.
        /// </returns>
        public static ActiveDirectoryConfigResult GetAd(this ICollectionOperations operations, string collectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).GetAdAsync(collectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the specified Active directory's configuration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. Name of the collection
        /// </param>
        /// <returns>
        /// Similar in structure to the VNet class but used to return one of
        /// these in GET requests.
        /// </returns>
        public static Task<ActiveDirectoryConfigResult> GetAdAsync(this ICollectionOperations operations, string collectionName)
        {
            return operations.GetAdAsync(collectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the summary of collection usage for the requested period.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The collection name.
        /// </param>
        /// <param name='year'>
        /// Required. The billing year in YYYY format.
        /// </param>
        /// <param name='month'>
        /// Required. The billing month in range of 01 through 12 inclusive.
        /// </param>
        /// <param name='locale'>
        /// Required. The locale value which will be applied to the generated
        /// usage report.
        /// </param>
        /// <returns>
        /// The collection usage billing details.
        /// </returns>
        public static CollectionUsageDetailsResult GetUsageDetails(this ICollectionOperations operations, string collectionName, string year, string month, string locale)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).GetUsageDetailsAsync(collectionName, year, month, locale);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the summary of collection usage for the requested period.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The collection name.
        /// </param>
        /// <param name='year'>
        /// Required. The billing year in YYYY format.
        /// </param>
        /// <param name='month'>
        /// Required. The billing month in range of 01 through 12 inclusive.
        /// </param>
        /// <param name='locale'>
        /// Required. The locale value which will be applied to the generated
        /// usage report.
        /// </param>
        /// <returns>
        /// The collection usage billing details.
        /// </returns>
        public static Task<CollectionUsageDetailsResult> GetUsageDetailsAsync(this ICollectionOperations operations, string collectionName, string year, string month, string locale)
        {
            return operations.GetUsageDetailsAsync(collectionName, year, month, locale, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the summary of collection usage for the requested period.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The collection name.
        /// </param>
        /// <param name='year'>
        /// Required. The billing year in YYYY format.
        /// </param>
        /// <param name='month'>
        /// Required. The billing month in range of 01 through 12 inclusive.
        /// </param>
        /// <returns>
        /// The collection usage billing summary.
        /// </returns>
        public static CollectionUsageSummaryListResult GetUsageSummary(this ICollectionOperations operations, string collectionName, string year, string month)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).GetUsageSummaryAsync(collectionName, year, month);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the summary of collection usage for the requested period.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The collection name.
        /// </param>
        /// <param name='year'>
        /// Required. The billing year in YYYY format.
        /// </param>
        /// <param name='month'>
        /// Required. The billing month in range of 01 through 12 inclusive.
        /// </param>
        /// <returns>
        /// The collection usage billing summary.
        /// </returns>
        public static Task<CollectionUsageSummaryListResult> GetUsageSummaryAsync(this ICollectionOperations operations, string collectionName, string year, string month)
        {
            return operations.GetUsageSummaryAsync(collectionName, year, month, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the list of all collection currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <returns>
        /// The response for the get collections list operation.
        /// </returns>
        public static CollectionListResult List(this ICollectionOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the list of all collection currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <returns>
        /// The response for the get collections list operation.
        /// </returns>
        public static Task<CollectionListResult> ListAsync(this ICollectionOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the list of all sessions in the collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name where the sessions exists.
        /// </param>
        /// <returns>
        /// List of user sessions in a given collection.
        /// </returns>
        public static CollectionSessionListResult ListSessions(this ICollectionOperations operations, string collectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).ListSessionsAsync(collectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the list of all sessions in the collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name where the sessions exists.
        /// </param>
        /// <returns>
        /// List of user sessions in a given collection.
        /// </returns>
        public static Task<CollectionSessionListResult> ListSessionsAsync(this ICollectionOperations operations, string collectionName)
        {
            return operations.ListSessionsAsync(collectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Logs off the session associated with the user UPN
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name where the session exists.
        /// </param>
        /// <param name='sessionParameter'>
        /// Required. The session command parameter to logoff a session.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId LogoffSession(this ICollectionOperations operations, string collectionName, SessionCommandParameter sessionParameter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).LogoffSessionAsync(collectionName, sessionParameter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Logs off the session associated with the user UPN
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name where the session exists.
        /// </param>
        /// <param name='sessionParameter'>
        /// Required. The session command parameter to logoff a session.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> LogoffSessionAsync(this ICollectionOperations operations, string collectionName, SessionCommandParameter sessionParameter)
        {
            return operations.LogoffSessionAsync(collectionName, sessionParameter, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of all regions where collection can be created for the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <returns>
        /// The list of locations.
        /// </returns>
        public static RegionListResult RegionList(this ICollectionOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).RegionListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a list of all regions where collection can be created for the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <returns>
        /// The list of locations.
        /// </returns>
        public static Task<RegionListResult> RegionListAsync(this ICollectionOperations operations)
        {
            return operations.RegionListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Sends message to the session associated with the user UPN
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name where the session exists.
        /// </param>
        /// <param name='sessionMessageParameter'>
        /// Required. The session command parameter to send message to a
        /// session.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId SendMessageToSession(this ICollectionOperations operations, string collectionName, SessionSendMessageCommandParameter sessionMessageParameter)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).SendMessageToSessionAsync(collectionName, sessionMessageParameter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sends message to the session associated with the user UPN
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name where the session exists.
        /// </param>
        /// <param name='sessionMessageParameter'>
        /// Required. The session command parameter to send message to a
        /// session.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> SendMessageToSessionAsync(this ICollectionOperations operations, string collectionName, SessionSendMessageCommandParameter sessionMessageParameter)
        {
            return operations.SendMessageToSessionAsync(collectionName, sessionMessageParameter, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets a new information to the collection with given id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The name of the collection.
        /// </param>
        /// <param name='forceRedeploy'>
        /// Required. A flag denoting if the request is to re-deploy the
        /// collection after it is updated.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// collection details(true for populate only).
        /// </param>
        /// <param name='collectionDetails'>
        /// Required. Details for the collection to be updated.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId Set(this ICollectionOperations operations, string collectionName, bool forceRedeploy, bool populateOnly, CollectionUpdateDetails collectionDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).SetAsync(collectionName, forceRedeploy, populateOnly, collectionDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets a new information to the collection with given id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The name of the collection.
        /// </param>
        /// <param name='forceRedeploy'>
        /// Required. A flag denoting if the request is to re-deploy the
        /// collection after it is updated.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// collection details(true for populate only).
        /// </param>
        /// <param name='collectionDetails'>
        /// Required. Details for the collection to be updated.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> SetAsync(this ICollectionOperations operations, string collectionName, bool forceRedeploy, bool populateOnly, CollectionUpdateDetails collectionDetails)
        {
            return operations.SetAsync(collectionName, forceRedeploy, populateOnly, collectionDetails, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates the specified Active directory's configuration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. Name of the collection
        /// </param>
        /// <param name='activeDirectoryConfigDetails'>
        /// Required. AD config
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId SetAd(this ICollectionOperations operations, string collectionName, ActiveDirectoryConfigParameter activeDirectoryConfigDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICollectionOperations)s).SetAdAsync(collectionName, activeDirectoryConfigDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates the specified Active directory's configuration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RemoteApp.ICollectionOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. Name of the collection
        /// </param>
        /// <param name='activeDirectoryConfigDetails'>
        /// Required. AD config
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> SetAdAsync(this ICollectionOperations operations, string collectionName, ActiveDirectoryConfigParameter activeDirectoryConfigDetails)
        {
            return operations.SetAdAsync(collectionName, activeDirectoryConfigDetails, CancellationToken.None);
        }
    }
}
