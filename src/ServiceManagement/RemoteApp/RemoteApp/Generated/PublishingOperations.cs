// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.WindowsAzure.Management.RemoteApp;
using Microsoft.WindowsAzure.Management.RemoteApp.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.RemoteApp
{
    /// <summary>
    /// Operations related to publishing.
    /// </summary>
    internal partial class PublishingOperations : IServiceOperations<RemoteAppManagementClient>, IPublishingOperations
    {
        /// <summary>
        /// Initializes a new instance of the PublishingOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal PublishingOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Gets the details of a published application with given alias (short
        /// unique name) from the collection.
        /// </summary>
        /// <param name='collectionName'>
        /// Required. Collection Name
        /// </param>
        /// <param name='alias'>
        /// Required. Alias of published application
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplication operation.
        /// </returns>
        public async Task<GetPublishedApplicationResult> GetAsync(string collectionName, string alias, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionName == null)
            {
                throw new ArgumentNullException("collectionName");
            }
            if (alias == null)
            {
                throw new ArgumentNullException("alias");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionName", collectionName);
                tracingParameters.Add("alias", alias);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/";
            if (this.Client.RdfeNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.RdfeNamespace);
            }
            url = url + "/collections/";
            url = url + Uri.EscapeDataString(collectionName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(alias);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetPublishedApplicationResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetPublishedApplicationResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            PublishedApplicationDetails resultInstance = new PublishedApplicationDetails();
                            result.Result = resultInstance;
                            
                            JToken availableToUsersValue = responseDoc["AvailableToUsers"];
                            if (availableToUsersValue != null && availableToUsersValue.Type != JTokenType.Null)
                            {
                                bool availableToUsersInstance = ((bool)availableToUsersValue);
                                resultInstance.AvailableToUsers = availableToUsersInstance;
                            }
                            
                            JToken aliasValue = responseDoc["Alias"];
                            if (aliasValue != null && aliasValue.Type != JTokenType.Null)
                            {
                                string aliasInstance = ((string)aliasValue);
                                resultInstance.Alias = aliasInstance;
                            }
                            
                            JToken commandLineArgumentsValue = responseDoc["CommandLineArguments"];
                            if (commandLineArgumentsValue != null && commandLineArgumentsValue.Type != JTokenType.Null)
                            {
                                string commandLineArgumentsInstance = ((string)commandLineArgumentsValue);
                                resultInstance.CommandLineArguments = commandLineArgumentsInstance;
                            }
                            
                            JToken iconUriValue = responseDoc["IconUri"];
                            if (iconUriValue != null && iconUriValue.Type != JTokenType.Null)
                            {
                                string iconUriInstance = ((string)iconUriValue);
                                resultInstance.IconUri = iconUriInstance;
                            }
                            
                            JToken nameValue = responseDoc["Name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resultInstance.Name = nameInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                AppPublishingStatus statusInstance = ((AppPublishingStatus)(((int)statusValue)));
                                resultInstance.Status = statusInstance;
                            }
                            
                            JToken iconPngUrisValue = responseDoc["IconPngUris"];
                            if (iconPngUrisValue != null && iconPngUrisValue.Type != JTokenType.Null)
                            {
                                IconPngUrisType iconPngUrisInstance = new IconPngUrisType();
                                resultInstance.IconPngUris = iconPngUrisInstance;
                                
                                JToken iconPngUrisSequenceElement = ((JToken)iconPngUrisValue);
                                if (iconPngUrisSequenceElement != null && iconPngUrisSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JToken iconPngUrisElement in ((JArray)iconPngUrisSequenceElement))
                                    {
                                        int iconPngUrisKey = int.Parse(((string)iconPngUrisElement["Key"]), CultureInfo.InvariantCulture);
                                        string iconPngUrisValue2 = ((string)iconPngUrisElement["Value"]);
                                        iconPngUrisInstance.IconPngUris.Add(iconPngUrisKey, iconPngUrisValue2);
                                    }
                                }
                            }
                            
                            JToken virtualPathValue = responseDoc["VirtualPath"];
                            if (virtualPathValue != null && virtualPathValue.Type != JTokenType.Null)
                            {
                                string virtualPathInstance = ((string)virtualPathValue);
                                resultInstance.VirtualPath = virtualPathInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of details for all published applications from the
        /// collection.
        /// </summary>
        /// <param name='collectionName'>
        /// Required. Collection Name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplicationList operation.
        /// </returns>
        public async Task<GetPublishedApplicationListResult> ListAsync(string collectionName, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionName == null)
            {
                throw new ArgumentNullException("collectionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionName", collectionName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/";
            if (this.Client.RdfeNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.RdfeNamespace);
            }
            url = url + "/collections/";
            url = url + Uri.EscapeDataString(collectionName);
            url = url + "/applications";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetPublishedApplicationListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetPublishedApplicationListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resultListArray = responseDoc;
                            if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resultListValue in ((JArray)resultListArray))
                                {
                                    PublishedApplicationDetails publishedApplicationDetailsInstance = new PublishedApplicationDetails();
                                    result.ResultList.Add(publishedApplicationDetailsInstance);
                                    
                                    JToken availableToUsersValue = resultListValue["AvailableToUsers"];
                                    if (availableToUsersValue != null && availableToUsersValue.Type != JTokenType.Null)
                                    {
                                        bool availableToUsersInstance = ((bool)availableToUsersValue);
                                        publishedApplicationDetailsInstance.AvailableToUsers = availableToUsersInstance;
                                    }
                                    
                                    JToken aliasValue = resultListValue["Alias"];
                                    if (aliasValue != null && aliasValue.Type != JTokenType.Null)
                                    {
                                        string aliasInstance = ((string)aliasValue);
                                        publishedApplicationDetailsInstance.Alias = aliasInstance;
                                    }
                                    
                                    JToken commandLineArgumentsValue = resultListValue["CommandLineArguments"];
                                    if (commandLineArgumentsValue != null && commandLineArgumentsValue.Type != JTokenType.Null)
                                    {
                                        string commandLineArgumentsInstance = ((string)commandLineArgumentsValue);
                                        publishedApplicationDetailsInstance.CommandLineArguments = commandLineArgumentsInstance;
                                    }
                                    
                                    JToken iconUriValue = resultListValue["IconUri"];
                                    if (iconUriValue != null && iconUriValue.Type != JTokenType.Null)
                                    {
                                        string iconUriInstance = ((string)iconUriValue);
                                        publishedApplicationDetailsInstance.IconUri = iconUriInstance;
                                    }
                                    
                                    JToken nameValue = resultListValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        publishedApplicationDetailsInstance.Name = nameInstance;
                                    }
                                    
                                    JToken statusValue = resultListValue["Status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        AppPublishingStatus statusInstance = ((AppPublishingStatus)(((int)statusValue)));
                                        publishedApplicationDetailsInstance.Status = statusInstance;
                                    }
                                    
                                    JToken iconPngUrisValue = resultListValue["IconPngUris"];
                                    if (iconPngUrisValue != null && iconPngUrisValue.Type != JTokenType.Null)
                                    {
                                        IconPngUrisType iconPngUrisInstance = new IconPngUrisType();
                                        publishedApplicationDetailsInstance.IconPngUris = iconPngUrisInstance;
                                        
                                        JToken iconPngUrisSequenceElement = ((JToken)iconPngUrisValue);
                                        if (iconPngUrisSequenceElement != null && iconPngUrisSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JToken iconPngUrisElement in ((JArray)iconPngUrisSequenceElement))
                                            {
                                                int iconPngUrisKey = int.Parse(((string)iconPngUrisElement["Key"]), CultureInfo.InvariantCulture);
                                                string iconPngUrisValue2 = ((string)iconPngUrisElement["Value"]);
                                                iconPngUrisInstance.IconPngUris.Add(iconPngUrisKey, iconPngUrisValue2);
                                            }
                                        }
                                    }
                                    
                                    JToken virtualPathValue = resultListValue["VirtualPath"];
                                    if (virtualPathValue != null && virtualPathValue.Type != JTokenType.Null)
                                    {
                                        string virtualPathInstance = ((string)virtualPathValue);
                                        publishedApplicationDetailsInstance.VirtualPath = virtualPathInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets a published application matching the given alias (short unique
        /// name) in the collection.
        /// </summary>
        /// <param name='collectionName'>
        /// Required. Collection Name
        /// </param>
        /// <param name='alias'>
        /// Required. Alias of published application
        /// </param>
        /// <param name='applicationDetails'>
        /// Required. New details for the application
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of ModifyApplicaton operation.
        /// </returns>
        public async Task<ModifyApplicationResult> ModifyApplicationAsync(string collectionName, string alias, ApplicationDetailsParameter applicationDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionName == null)
            {
                throw new ArgumentNullException("collectionName");
            }
            if (alias == null)
            {
                throw new ArgumentNullException("alias");
            }
            if (applicationDetails == null)
            {
                throw new ArgumentNullException("applicationDetails");
            }
            if (applicationDetails.Details != null)
            {
                if (applicationDetails.Details.Name == null)
                {
                    throw new ArgumentNullException("applicationDetails.Details.Name");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionName", collectionName);
                tracingParameters.Add("alias", alias);
                tracingParameters.Add("applicationDetails", applicationDetails);
                TracingAdapter.Enter(invocationId, this, "ModifyApplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/";
            if (this.Client.RdfeNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.RdfeNamespace);
            }
            url = url + "/collections/";
            url = url + Uri.EscapeDataString(collectionName);
            url = url + "/applications/";
            url = url + Uri.EscapeDataString(alias);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject applicationDetailsParameterValue = new JObject();
                requestDoc = applicationDetailsParameterValue;
                
                if (applicationDetails.Details != null)
                {
                    applicationDetailsParameterValue["AvailableToUsers"] = applicationDetails.Details.AvailableToUsers;
                    
                    if (applicationDetails.Details.Alias != null)
                    {
                        applicationDetailsParameterValue["Alias"] = applicationDetails.Details.Alias;
                    }
                    
                    if (applicationDetails.Details.CommandLineArguments != null)
                    {
                        applicationDetailsParameterValue["CommandLineArguments"] = applicationDetails.Details.CommandLineArguments;
                    }
                    
                    if (applicationDetails.Details.IconUri != null)
                    {
                        applicationDetailsParameterValue["IconUri"] = applicationDetails.Details.IconUri;
                    }
                    
                    applicationDetailsParameterValue["Name"] = applicationDetails.Details.Name;
                    
                    applicationDetailsParameterValue["Status"] = ((int)applicationDetails.Details.Status);
                    
                    if (applicationDetails.Details.IconPngUris != null)
                    {
                        JObject iconPngUrisValue = new JObject();
                        applicationDetailsParameterValue["IconPngUris"] = iconPngUrisValue;
                        
                        if (applicationDetails.Details.IconPngUris.IconPngUris != null)
                        {
                            if (applicationDetails.Details.IconPngUris.IconPngUris is ILazyCollection == false || ((ILazyCollection)applicationDetails.Details.IconPngUris.IconPngUris).IsInitialized)
                            {
                                JArray iconPngUrisDictionary = new JArray();
                                foreach (KeyValuePair<int, string> pair in applicationDetails.Details.IconPngUris.IconPngUris)
                                {
                                    int iconPngUrisKey = pair.Key;
                                    string iconPngUrisValue2 = pair.Value;
                                    JObject iconPngUrisItemObject = new JObject();
                                    iconPngUrisItemObject["Key"] = iconPngUrisKey.ToString();
                                    iconPngUrisItemObject["Value"] = iconPngUrisValue2;
                                    iconPngUrisDictionary.Add(iconPngUrisItemObject);
                                }
                                iconPngUrisValue["IconPngUris"] = iconPngUrisDictionary;
                            }
                        }
                    }
                    
                    if (applicationDetails.Details.VirtualPath != null)
                    {
                        applicationDetailsParameterValue["VirtualPath"] = applicationDetails.Details.VirtualPath;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ModifyApplicationResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ModifyApplicationResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            PublishingOperationResult publishingOpResultInstance = new PublishingOperationResult();
                            result.Result = publishingOpResultInstance;
                            
                            JToken applicationAliasValue = responseDoc["ApplicationAlias"];
                            if (applicationAliasValue != null && applicationAliasValue.Type != JTokenType.Null)
                            {
                                string applicationAliasInstance = ((string)applicationAliasValue);
                                publishingOpResultInstance.ApplicationAlias = applicationAliasInstance;
                            }
                            
                            JToken applicationVirtualPathValue = responseDoc["ApplicationVirtualPath"];
                            if (applicationVirtualPathValue != null && applicationVirtualPathValue.Type != JTokenType.Null)
                            {
                                string applicationVirtualPathInstance = ((string)applicationVirtualPathValue);
                                publishingOpResultInstance.ApplicationVirtualPath = applicationVirtualPathInstance;
                            }
                            
                            JToken successValue = responseDoc["Success"];
                            if (successValue != null && successValue.Type != JTokenType.Null)
                            {
                                bool successInstance = ((bool)successValue);
                                publishingOpResultInstance.Success = successInstance;
                            }
                            
                            JToken errorMessageValue = responseDoc["ErrorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                publishingOpResultInstance.ErrorMessage = errorMessageInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Publishes remote applications with given application details in the
        /// collection.
        /// </summary>
        /// <param name='collectionName'>
        /// Required. Collection Name
        /// </param>
        /// <param name='applicationDetailsList'>
        /// Required. List of publishing details
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of PublishApplications operation.
        /// </returns>
        public async Task<PublishApplicationsResult> PublishApplicationsAsync(string collectionName, ApplicationDetailsListParameter applicationDetailsList, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionName == null)
            {
                throw new ArgumentNullException("collectionName");
            }
            if (applicationDetailsList == null)
            {
                throw new ArgumentNullException("applicationDetailsList");
            }
            if (applicationDetailsList.DetailsList != null)
            {
                foreach (PublishedApplicationDetails detailsListParameterItem in applicationDetailsList.DetailsList)
                {
                    if (detailsListParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("applicationDetailsList.DetailsList.Name");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionName", collectionName);
                tracingParameters.Add("applicationDetailsList", applicationDetailsList);
                TracingAdapter.Enter(invocationId, this, "PublishApplicationsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/";
            if (this.Client.RdfeNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.RdfeNamespace);
            }
            url = url + "/collections/";
            url = url + Uri.EscapeDataString(collectionName);
            url = url + "/applications";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (applicationDetailsList.DetailsList != null)
                {
                    if (applicationDetailsList.DetailsList is ILazyCollection == false || ((ILazyCollection)applicationDetailsList.DetailsList).IsInitialized)
                    {
                        JArray detailsListArray = new JArray();
                        foreach (PublishedApplicationDetails detailsListItem in applicationDetailsList.DetailsList)
                        {
                            JObject publishedApplicationDetailsValue = new JObject();
                            detailsListArray.Add(publishedApplicationDetailsValue);
                            
                            publishedApplicationDetailsValue["AvailableToUsers"] = detailsListItem.AvailableToUsers;
                            
                            if (detailsListItem.Alias != null)
                            {
                                publishedApplicationDetailsValue["Alias"] = detailsListItem.Alias;
                            }
                            
                            if (detailsListItem.CommandLineArguments != null)
                            {
                                publishedApplicationDetailsValue["CommandLineArguments"] = detailsListItem.CommandLineArguments;
                            }
                            
                            if (detailsListItem.IconUri != null)
                            {
                                publishedApplicationDetailsValue["IconUri"] = detailsListItem.IconUri;
                            }
                            
                            publishedApplicationDetailsValue["Name"] = detailsListItem.Name;
                            
                            publishedApplicationDetailsValue["Status"] = ((int)detailsListItem.Status);
                            
                            if (detailsListItem.IconPngUris != null)
                            {
                                JObject iconPngUrisValue = new JObject();
                                publishedApplicationDetailsValue["IconPngUris"] = iconPngUrisValue;
                                
                                if (detailsListItem.IconPngUris.IconPngUris != null)
                                {
                                    if (detailsListItem.IconPngUris.IconPngUris is ILazyCollection == false || ((ILazyCollection)detailsListItem.IconPngUris.IconPngUris).IsInitialized)
                                    {
                                        JArray iconPngUrisDictionary = new JArray();
                                        foreach (KeyValuePair<int, string> pair in detailsListItem.IconPngUris.IconPngUris)
                                        {
                                            int iconPngUrisKey = pair.Key;
                                            string iconPngUrisValue2 = pair.Value;
                                            JObject iconPngUrisItemObject = new JObject();
                                            iconPngUrisItemObject["Key"] = iconPngUrisKey.ToString();
                                            iconPngUrisItemObject["Value"] = iconPngUrisValue2;
                                            iconPngUrisDictionary.Add(iconPngUrisItemObject);
                                        }
                                        iconPngUrisValue["IconPngUris"] = iconPngUrisDictionary;
                                    }
                                }
                            }
                            
                            if (detailsListItem.VirtualPath != null)
                            {
                                publishedApplicationDetailsValue["VirtualPath"] = detailsListItem.VirtualPath;
                            }
                        }
                        requestDoc = detailsListArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PublishApplicationsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PublishApplicationsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resultListArray = responseDoc;
                            if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resultListValue in ((JArray)resultListArray))
                                {
                                    PublishingOperationResult publishingOperationResultInstance = new PublishingOperationResult();
                                    result.ResultList.Add(publishingOperationResultInstance);
                                    
                                    JToken applicationAliasValue = resultListValue["ApplicationAlias"];
                                    if (applicationAliasValue != null && applicationAliasValue.Type != JTokenType.Null)
                                    {
                                        string applicationAliasInstance = ((string)applicationAliasValue);
                                        publishingOperationResultInstance.ApplicationAlias = applicationAliasInstance;
                                    }
                                    
                                    JToken applicationVirtualPathValue = resultListValue["ApplicationVirtualPath"];
                                    if (applicationVirtualPathValue != null && applicationVirtualPathValue.Type != JTokenType.Null)
                                    {
                                        string applicationVirtualPathInstance = ((string)applicationVirtualPathValue);
                                        publishingOperationResultInstance.ApplicationVirtualPath = applicationVirtualPathInstance;
                                    }
                                    
                                    JToken successValue = resultListValue["Success"];
                                    if (successValue != null && successValue.Type != JTokenType.Null)
                                    {
                                        bool successInstance = ((bool)successValue);
                                        publishingOperationResultInstance.Success = successInstance;
                                    }
                                    
                                    JToken errorMessageValue = resultListValue["ErrorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        publishingOperationResultInstance.ErrorMessage = errorMessageInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a start menu application details for the given id from the
        /// collection.
        /// </summary>
        /// <param name='collectionName'>
        /// Required. Collection Name
        /// </param>
        /// <param name='applicationId'>
        /// Required. Start menu application Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplication operation.
        /// </returns>
        public async Task<GetStartMenuApplicationResult> StartMenuApplicationAsync(string collectionName, string applicationId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionName == null)
            {
                throw new ArgumentNullException("collectionName");
            }
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionName", collectionName);
                tracingParameters.Add("applicationId", applicationId);
                TracingAdapter.Enter(invocationId, this, "StartMenuApplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/";
            if (this.Client.RdfeNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.RdfeNamespace);
            }
            url = url + "/collections/";
            url = url + Uri.EscapeDataString(collectionName);
            url = url + "/startMenuApps/";
            url = url + Uri.EscapeDataString(applicationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetStartMenuApplicationResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetStartMenuApplicationResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StartMenuApplication resultInstance = new StartMenuApplication();
                            result.Result = resultInstance;
                            
                            JToken commandLineArgumentsValue = responseDoc["CommandLineArguments"];
                            if (commandLineArgumentsValue != null && commandLineArgumentsValue.Type != JTokenType.Null)
                            {
                                string commandLineArgumentsInstance = ((string)commandLineArgumentsValue);
                                resultInstance.CommandLineArguments = commandLineArgumentsInstance;
                            }
                            
                            JToken iconPngUrisSequenceElement = ((JToken)responseDoc["IconPngUris"]);
                            if (iconPngUrisSequenceElement != null && iconPngUrisSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JToken iconPngUrisElement in ((JArray)iconPngUrisSequenceElement))
                                {
                                    int iconPngUrisKey = int.Parse(((string)iconPngUrisElement["Key"]), CultureInfo.InvariantCulture);
                                    string iconPngUrisValue = ((string)iconPngUrisElement["Value"]);
                                    resultInstance.IconPngUris.Add(iconPngUrisKey, iconPngUrisValue);
                                }
                            }
                            
                            JToken iconUriValue = responseDoc["IconUri"];
                            if (iconUriValue != null && iconUriValue.Type != JTokenType.Null)
                            {
                                string iconUriInstance = ((string)iconUriValue);
                                resultInstance.IconUri = iconUriInstance;
                            }
                            
                            JToken idValue = responseDoc["Id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                resultInstance.StartMenuAppId = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["Name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                resultInstance.Name = nameInstance;
                            }
                            
                            JToken virtualPathValue = responseDoc["VirtualPath"];
                            if (virtualPathValue != null && virtualPathValue.Type != JTokenType.Null)
                            {
                                string virtualPathInstance = ((string)virtualPathValue);
                                resultInstance.VirtualPath = virtualPathInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of all start menu applications from the collection.
        /// </summary>
        /// <param name='collectionName'>
        /// Required. Collection Name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplicationList operation.
        /// </returns>
        public async Task<GetStartMenuApplicationListResult> StartMenuApplicationListAsync(string collectionName, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionName == null)
            {
                throw new ArgumentNullException("collectionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionName", collectionName);
                TracingAdapter.Enter(invocationId, this, "StartMenuApplicationListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/";
            if (this.Client.RdfeNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.RdfeNamespace);
            }
            url = url + "/collections/";
            url = url + Uri.EscapeDataString(collectionName);
            url = url + "/startMenuApps";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetStartMenuApplicationListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetStartMenuApplicationListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resultListArray = responseDoc;
                            if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resultListValue in ((JArray)resultListArray))
                                {
                                    StartMenuApplication startMenuApplicationInstance = new StartMenuApplication();
                                    result.ResultList.Add(startMenuApplicationInstance);
                                    
                                    JToken commandLineArgumentsValue = resultListValue["CommandLineArguments"];
                                    if (commandLineArgumentsValue != null && commandLineArgumentsValue.Type != JTokenType.Null)
                                    {
                                        string commandLineArgumentsInstance = ((string)commandLineArgumentsValue);
                                        startMenuApplicationInstance.CommandLineArguments = commandLineArgumentsInstance;
                                    }
                                    
                                    JToken iconPngUrisSequenceElement = ((JToken)resultListValue["IconPngUris"]);
                                    if (iconPngUrisSequenceElement != null && iconPngUrisSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JToken iconPngUrisElement in ((JArray)iconPngUrisSequenceElement))
                                        {
                                            int iconPngUrisKey = int.Parse(((string)iconPngUrisElement["Key"]), CultureInfo.InvariantCulture);
                                            string iconPngUrisValue = ((string)iconPngUrisElement["Value"]);
                                            startMenuApplicationInstance.IconPngUris.Add(iconPngUrisKey, iconPngUrisValue);
                                        }
                                    }
                                    
                                    JToken iconUriValue = resultListValue["IconUri"];
                                    if (iconUriValue != null && iconUriValue.Type != JTokenType.Null)
                                    {
                                        string iconUriInstance = ((string)iconUriValue);
                                        startMenuApplicationInstance.IconUri = iconUriInstance;
                                    }
                                    
                                    JToken idValue = resultListValue["Id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        startMenuApplicationInstance.StartMenuAppId = idInstance;
                                    }
                                    
                                    JToken nameValue = resultListValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        startMenuApplicationInstance.Name = nameInstance;
                                    }
                                    
                                    JToken virtualPathValue = resultListValue["VirtualPath"];
                                    if (virtualPathValue != null && virtualPathValue.Type != JTokenType.Null)
                                    {
                                        string virtualPathInstance = ((string)virtualPathValue);
                                        startMenuApplicationInstance.VirtualPath = virtualPathInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unpublishes published applications matching the given list of
        /// application aliases (short unique names) from the collection.
        /// </summary>
        /// <param name='collectionName'>
        /// Required. Collection Name
        /// </param>
        /// <param name='aliasesList'>
        /// Required. List of application aliases to be unpublished
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishApplications operation.
        /// </returns>
        public async Task<UnpublishApplicationsResult> UnpublishAsync(string collectionName, AliasesListParameter aliasesList, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionName == null)
            {
                throw new ArgumentNullException("collectionName");
            }
            if (aliasesList == null)
            {
                throw new ArgumentNullException("aliasesList");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionName", collectionName);
                tracingParameters.Add("aliasesList", aliasesList);
                TracingAdapter.Enter(invocationId, this, "UnpublishAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/";
            if (this.Client.RdfeNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.RdfeNamespace);
            }
            url = url + "/collections/";
            url = url + Uri.EscapeDataString(collectionName);
            url = url + "/applications";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (aliasesList.AliasesList != null)
                {
                    if (aliasesList.AliasesList is ILazyCollection == false || ((ILazyCollection)aliasesList.AliasesList).IsInitialized)
                    {
                        JArray aliasesArray = new JArray();
                        foreach (string aliasesItem in aliasesList.AliasesList)
                        {
                            aliasesArray.Add(aliasesItem);
                        }
                        requestDoc = aliasesArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UnpublishApplicationsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UnpublishApplicationsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resultListArray = responseDoc;
                            if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resultListValue in ((JArray)resultListArray))
                                {
                                    PublishingOperationResult publishingOperationResultInstance = new PublishingOperationResult();
                                    result.ResultList.Add(publishingOperationResultInstance);
                                    
                                    JToken applicationAliasValue = resultListValue["ApplicationAlias"];
                                    if (applicationAliasValue != null && applicationAliasValue.Type != JTokenType.Null)
                                    {
                                        string applicationAliasInstance = ((string)applicationAliasValue);
                                        publishingOperationResultInstance.ApplicationAlias = applicationAliasInstance;
                                    }
                                    
                                    JToken applicationVirtualPathValue = resultListValue["ApplicationVirtualPath"];
                                    if (applicationVirtualPathValue != null && applicationVirtualPathValue.Type != JTokenType.Null)
                                    {
                                        string applicationVirtualPathInstance = ((string)applicationVirtualPathValue);
                                        publishingOperationResultInstance.ApplicationVirtualPath = applicationVirtualPathInstance;
                                    }
                                    
                                    JToken successValue = resultListValue["Success"];
                                    if (successValue != null && successValue.Type != JTokenType.Null)
                                    {
                                        bool successInstance = ((bool)successValue);
                                        publishingOperationResultInstance.Success = successInstance;
                                    }
                                    
                                    JToken errorMessageValue = resultListValue["ErrorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        publishingOperationResultInstance.ErrorMessage = errorMessageInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unpublishes all published applications from the collection.
        /// </summary>
        /// <param name='collectionName'>
        /// Required. Collection Name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishApplications operation.
        /// </returns>
        public async Task<UnpublishApplicationsResult> UnpublishAllAsync(string collectionName, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionName == null)
            {
                throw new ArgumentNullException("collectionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionName", collectionName);
                TracingAdapter.Enter(invocationId, this, "UnpublishAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/";
            if (this.Client.RdfeNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.RdfeNamespace);
            }
            url = url + "/collections/";
            url = url + Uri.EscapeDataString(collectionName);
            url = url + "/applications/unpublishAll";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UnpublishApplicationsResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UnpublishApplicationsResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken resultListArray = responseDoc;
                            if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken resultListValue in ((JArray)resultListArray))
                                {
                                    PublishingOperationResult publishingOperationResultInstance = new PublishingOperationResult();
                                    result.ResultList.Add(publishingOperationResultInstance);
                                    
                                    JToken applicationAliasValue = resultListValue["ApplicationAlias"];
                                    if (applicationAliasValue != null && applicationAliasValue.Type != JTokenType.Null)
                                    {
                                        string applicationAliasInstance = ((string)applicationAliasValue);
                                        publishingOperationResultInstance.ApplicationAlias = applicationAliasInstance;
                                    }
                                    
                                    JToken applicationVirtualPathValue = resultListValue["ApplicationVirtualPath"];
                                    if (applicationVirtualPathValue != null && applicationVirtualPathValue.Type != JTokenType.Null)
                                    {
                                        string applicationVirtualPathInstance = ((string)applicationVirtualPathValue);
                                        publishingOperationResultInstance.ApplicationVirtualPath = applicationVirtualPathInstance;
                                    }
                                    
                                    JToken successValue = resultListValue["Success"];
                                    if (successValue != null && successValue.Type != JTokenType.Null)
                                    {
                                        bool successInstance = ((bool)successValue);
                                        publishingOperationResultInstance.Success = successInstance;
                                    }
                                    
                                    JToken errorMessageValue = resultListValue["ErrorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        publishingOperationResultInstance.ErrorMessage = errorMessageInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
