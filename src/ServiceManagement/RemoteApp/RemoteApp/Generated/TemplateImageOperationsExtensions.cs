// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.RemoteApp;
using Microsoft.WindowsAzure.Management.RemoteApp.Models;

namespace Microsoft.WindowsAzure.Management.RemoteApp
{
    /// <summary>
    /// RmoteApp management client
    /// </summary>
    public static partial class TemplateImageOperationsExtensions
    {
        /// <summary>
        /// Deletes an existing template image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageName'>
        /// Required. The template image name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this ITemplateImageOperations operations, string imageName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).DeleteAsync(imageName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes an existing template image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageName'>
        /// Required. The template image name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this ITemplateImageOperations operations, string imageName)
        {
            return operations.DeleteAsync(imageName, CancellationToken.None);
        }
        
        /// <summary>
        /// Ensures storage is ready for the given region. Call this before
        /// uploading an image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='region'>
        /// Required. Azure datacenter region.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId EnsureStorageInRegion(this ITemplateImageOperations operations, string region)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).EnsureStorageInRegionAsync(region);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Ensures storage is ready for the given region. Call this before
        /// uploading an image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='region'>
        /// Required. Azure datacenter region.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> EnsureStorageInRegionAsync(this ITemplateImageOperations operations, string region)
        {
            return operations.EnsureStorageInRegionAsync(region, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets details of a template image for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageName'>
        /// Required. Name of the template image.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.Get.
        /// </returns>
        public static TemplateImageResult Get(this ITemplateImageOperations operations, string imageName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).GetAsync(imageName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets details of a template image for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageName'>
        /// Required. Name of the template image.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.Get.
        /// </returns>
        public static Task<TemplateImageResult> GetAsync(this ITemplateImageOperations operations, string imageName)
        {
            return operations.GetAsync(imageName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the script for template image upload. Pass this script Uri and
        /// SAS obtianed from template image Set or Get operations.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <returns>
        /// Definition for result of GetUploadScript operation.
        /// </returns>
        public static UploadScriptResult GetUploadScript(this ITemplateImageOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).GetUploadScriptAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the script for template image upload. Pass this script Uri and
        /// SAS obtianed from template image Set or Get operations.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <returns>
        /// Definition for result of GetUploadScript operation.
        /// </returns>
        public static Task<UploadScriptResult> GetUploadScriptAsync(this ITemplateImageOperations operations)
        {
            return operations.GetUploadScriptAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of template images for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public static TemplateImageListResult List(this ITemplateImageOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a list of template images for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public static Task<TemplateImageListResult> ListAsync(this ITemplateImageOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Migrate the template image of a collection to the specified azure
        /// storage account
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The collection name.
        /// </param>
        /// <param name='targetAccountName'>
        /// Required. The destination storage account name
        /// </param>
        /// <param name='targetAccountKey'>
        /// Required. The destination storage account key
        /// </param>
        /// <param name='targetContainerName'>
        /// Required. The destination container name
        /// </param>
        /// <param name='overwriteExistingTemplateImage'>
        /// Required. A flag denoting if the request is to overwrite the
        /// existing template image in the destination storage account
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId Migrate(this ITemplateImageOperations operations, string collectionName, string targetAccountName, string targetAccountKey, string targetContainerName, bool overwriteExistingTemplateImage)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).MigrateAsync(collectionName, targetAccountName, targetAccountKey, targetContainerName, overwriteExistingTemplateImage);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Migrate the template image of a collection to the specified azure
        /// storage account
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The collection name.
        /// </param>
        /// <param name='targetAccountName'>
        /// Required. The destination storage account name
        /// </param>
        /// <param name='targetAccountKey'>
        /// Required. The destination storage account key
        /// </param>
        /// <param name='targetContainerName'>
        /// Required. The destination container name
        /// </param>
        /// <param name='overwriteExistingTemplateImage'>
        /// Required. A flag denoting if the request is to overwrite the
        /// existing template image in the destination storage account
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> MigrateAsync(this ITemplateImageOperations operations, string collectionName, string targetAccountName, string targetAccountKey, string targetContainerName, bool overwriteExistingTemplateImage)
        {
            return operations.MigrateAsync(collectionName, targetAccountName, targetAccountKey, targetContainerName, overwriteExistingTemplateImage, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets a template image details.  If the template image already
        /// exists, only the Name can be changed.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageDetails'>
        /// Required. Details for the template image to be created or updated.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.Get.
        /// </returns>
        public static TemplateImageResult Set(this ITemplateImageOperations operations, TemplateImageDetails imageDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).SetAsync(imageDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets a template image details.  If the template image already
        /// exists, only the Name can be changed.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageDetails'>
        /// Required. Details for the template image to be created or updated.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.Get.
        /// </returns>
        public static Task<TemplateImageResult> SetAsync(this ITemplateImageOperations operations, TemplateImageDetails imageDetails)
        {
            return operations.SetAsync(imageDetails, CancellationToken.None);
        }
    }
}
