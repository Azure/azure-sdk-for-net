// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.RemoteApp.Models;

namespace Microsoft.WindowsAzure.Management.RemoteApp
{
    /// <summary>
    /// Operations to create, modify, list, and delete template images.
    /// </summary>
    public partial interface ITemplateImageOperations
    {
        /// <summary>
        /// Deletes an existing template image.
        /// </summary>
        /// <param name='imageName'>
        /// The template image name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> DeleteAsync(string imageName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Ensures storage is ready for the given region. Call this before
        /// uploading an image.
        /// </summary>
        /// <param name='region'>
        /// Azure datacenter region.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        Task<OperationResultWithTrackingId> EnsureStorageInRegionAsync(string region, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets details of a template image for the subscription.
        /// </summary>
        /// <param name='imageName'>
        /// Name of the template image.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.Get.
        /// </returns>
        Task<TemplateImageResult> GetAsync(string imageName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the script for template image upload. Pass this script Uri and
        /// SAS obtianed from template image Set or Get operations.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetUploadScript operation.
        /// </returns>
        Task<UploadScriptResult> GetUploadScriptAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of template images for the subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        Task<TemplateImageListResult> ListAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Migrate the template image of a collection to the specified azure
        /// storage account
        /// </summary>
        /// <param name='collectionName'>
        /// The collection name.
        /// </param>
        /// <param name='targetAccountName'>
        /// The destination storage account name
        /// </param>
        /// <param name='targetAccountKey'>
        /// The destination storage account key
        /// </param>
        /// <param name='targetContainerName'>
        /// The destination container name
        /// </param>
        /// <param name='overwriteExistingTemplateImage'>
        /// A flag denoting if the request is to overwrite the existing
        /// template image in the destination storage account
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        Task<OperationResultWithTrackingId> MigrateAsync(string collectionName, string targetAccountName, string targetAccountKey, string targetContainerName, bool overwriteExistingTemplateImage, CancellationToken cancellationToken);
        
        /// <summary>
        /// Sets a template image details.  If the template image already
        /// exists, only the Name can be changed.
        /// </summary>
        /// <param name='imageDetails'>
        /// Details for the template image to be created or updated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.Get.
        /// </returns>
        Task<TemplateImageResult> SetAsync(TemplateImageDetails imageDetails, CancellationToken cancellationToken);
    }
}
