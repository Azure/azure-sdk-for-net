// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.RemoteApp;

namespace Microsoft.WindowsAzure.Management.RemoteApp
{
    /// <summary>
    /// RmoteApp management client
    /// </summary>
    public static partial class UserDiskOperationsExtensions
    {
        /// <summary>
        /// Copy user disk from one collection to the other and keep the source
        /// user disk.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IUserDiskOperations.
        /// </param>
        /// <param name='srcCollectionName'>
        /// Required. The source collection name.
        /// </param>
        /// <param name='dstCollectionName'>
        /// Required. The destination collection name.
        /// </param>
        /// <param name='userUpn'>
        /// Required. The user upn.
        /// </param>
        /// <param name='overwriteExistingUserDisk'>
        /// Required. A flag denoting if the request is to overwrite the
        /// existing user disk
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Copy(this IUserDiskOperations operations, string srcCollectionName, string dstCollectionName, string userUpn, bool overwriteExistingUserDisk)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserDiskOperations)s).CopyAsync(srcCollectionName, dstCollectionName, userUpn, overwriteExistingUserDisk);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Copy user disk from one collection to the other and keep the source
        /// user disk.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IUserDiskOperations.
        /// </param>
        /// <param name='srcCollectionName'>
        /// Required. The source collection name.
        /// </param>
        /// <param name='dstCollectionName'>
        /// Required. The destination collection name.
        /// </param>
        /// <param name='userUpn'>
        /// Required. The user upn.
        /// </param>
        /// <param name='overwriteExistingUserDisk'>
        /// Required. A flag denoting if the request is to overwrite the
        /// existing user disk
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> CopyAsync(this IUserDiskOperations operations, string srcCollectionName, string dstCollectionName, string userUpn, bool overwriteExistingUserDisk)
        {
            return operations.CopyAsync(srcCollectionName, dstCollectionName, userUpn, overwriteExistingUserDisk, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the given user disk.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IUserDiskOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name.
        /// </param>
        /// <param name='userUpn'>
        /// Required. The user upn.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IUserDiskOperations operations, string collectionName, string userUpn)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserDiskOperations)s).DeleteAsync(collectionName, userUpn);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the given user disk.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IUserDiskOperations.
        /// </param>
        /// <param name='collectionName'>
        /// Required. The RemoteApp collection name.
        /// </param>
        /// <param name='userUpn'>
        /// Required. The user upn.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IUserDiskOperations operations, string collectionName, string userUpn)
        {
            return operations.DeleteAsync(collectionName, userUpn, CancellationToken.None);
        }
    }
}
