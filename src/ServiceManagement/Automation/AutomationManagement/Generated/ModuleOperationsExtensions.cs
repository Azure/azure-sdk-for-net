// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Automation;
using Microsoft.WindowsAzure.Management.Automation.Models;

namespace Microsoft.WindowsAzure.Management.Automation
{
    public static partial class ModuleOperationsExtensions
    {
        /// <summary>
        /// Create the module identified by module name.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The create parameters for module.
        /// </param>
        /// <returns>
        /// The response model for the create module operation.
        /// </returns>
        public static ModuleCreateResponse Create(this IModuleOperations operations, string automationAccount, ModuleCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IModuleOperations)s).CreateAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create the module identified by module name.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The create parameters for module.
        /// </param>
        /// <returns>
        /// The response model for the create module operation.
        /// </returns>
        public static Task<ModuleCreateResponse> CreateAsync(this IModuleOperations operations, string automationAccount, ModuleCreateParameters parameters)
        {
            return operations.CreateAsync(automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete the module by name.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='moduleName'>
        /// Required. The module name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IModuleOperations operations, string automationAccount, string moduleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IModuleOperations)s).DeleteAsync(automationAccount, moduleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete the module by name.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='moduleName'>
        /// Required. The module name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IModuleOperations operations, string automationAccount, string moduleName)
        {
            return operations.DeleteAsync(automationAccount, moduleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the module identified by module name.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='moduleName'>
        /// Required. The module name.
        /// </param>
        /// <returns>
        /// The response model for the get module operation.
        /// </returns>
        public static ModuleGetResponse Get(this IModuleOperations operations, string automationAccount, string moduleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IModuleOperations)s).GetAsync(automationAccount, moduleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the module identified by module name.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='moduleName'>
        /// Required. The module name.
        /// </param>
        /// <returns>
        /// The response model for the get module operation.
        /// </returns>
        public static Task<ModuleGetResponse> GetAsync(this IModuleOperations operations, string automationAccount, string moduleName)
        {
            return operations.GetAsync(automationAccount, moduleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of modules.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <returns>
        /// The response model for the list module operation.
        /// </returns>
        public static ModuleListResponse List(this IModuleOperations operations, string automationAccount)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IModuleOperations)s).ListAsync(automationAccount);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of modules.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <returns>
        /// The response model for the list module operation.
        /// </returns>
        public static Task<ModuleListResponse> ListAsync(this IModuleOperations operations, string automationAccount)
        {
            return operations.ListAsync(automationAccount, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve next list of modules.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <returns>
        /// The response model for the list module operation.
        /// </returns>
        public static ModuleListResponse ListNext(this IModuleOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IModuleOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve next list of modules.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <returns>
        /// The response model for the list module operation.
        /// </returns>
        public static Task<ModuleListResponse> ListNextAsync(this IModuleOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Create the module identified by module name.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The update parameters for module.
        /// </param>
        /// <returns>
        /// The response model for the get module operation.
        /// </returns>
        public static ModuleGetResponse Update(this IModuleOperations operations, string automationAccount, ModuleUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IModuleOperations)s).UpdateAsync(automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create the module identified by module name.  (see
        /// http://aka.ms/azureautomationsdk/moduleoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Automation.IModuleOperations.
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The update parameters for module.
        /// </param>
        /// <returns>
        /// The response model for the get module operation.
        /// </returns>
        public static Task<ModuleGetResponse> UpdateAsync(this IModuleOperations operations, string automationAccount, ModuleUpdateParameters parameters)
        {
            return operations.UpdateAsync(automationAccount, parameters, CancellationToken.None);
        }
    }
}
