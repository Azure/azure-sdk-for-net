// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API provides programmatic access to much of the
    /// functionality available through the Management Portal. The Service
    /// Management API is a REST API. All API operations are performed over
    /// SSL, and are mutually authenticated using X.509 v3 certificates.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460799.aspx for
    /// more information)
    /// </summary>
    public static partial class ExtensionImageOperationsExtensions
    {
        /// <summary>
        /// Register a new extension. An extension is identified by the
        /// combination of its ProviderNamespace and Type (case-sensitive
        /// string). It is not allowed to register an extension with the same
        /// identity (i.e. combination of ProviderNamespace and Type) of an
        /// already-registered extension. To register new version of an
        /// existing extension, the Update Extension API should be used.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Register Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginRegistering(this IExtensionImageOperations operations, ExtensionImageRegisterParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExtensionImageOperations)s).BeginRegisteringAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Register a new extension. An extension is identified by the
        /// combination of its ProviderNamespace and Type (case-sensitive
        /// string). It is not allowed to register an extension with the same
        /// identity (i.e. combination of ProviderNamespace and Type) of an
        /// already-registered extension. To register new version of an
        /// existing extension, the Update Extension API should be used.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Register Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginRegisteringAsync(this IExtensionImageOperations operations, ExtensionImageRegisterParameters parameters)
        {
            return operations.BeginRegisteringAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Unregister a version of an extension that was previously registered
        /// using either the Register Extension or Update Extension APIs. An
        /// extension version is identified by the combination of its
        /// ProviderNamespace, Type and Version which are specified when
        /// registering the extension. Unregistering is only allowed for
        /// internal extensions, that is, the extensions for which the
        /// IsInternalExtension field is set to 'true' during registration or
        /// during an update. There is a quota (15) on the number of
        /// extensions that can be registered per subscription. If your
        /// subscription runs out of quota, you will wither need to unregister
        /// some of the internal extensions or contact Azure (same email used
        /// to become a publisher)  to increase the quota.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='providerNamespace'>
        /// Required. The provider namespace of the extension image to
        /// unregister.
        /// </param>
        /// <param name='type'>
        /// Required. The type of the extension image to unregister.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the extension image to unregister.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginUnregistering(this IExtensionImageOperations operations, string providerNamespace, string type, string version)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExtensionImageOperations)s).BeginUnregisteringAsync(providerNamespace, type, version);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Unregister a version of an extension that was previously registered
        /// using either the Register Extension or Update Extension APIs. An
        /// extension version is identified by the combination of its
        /// ProviderNamespace, Type and Version which are specified when
        /// registering the extension. Unregistering is only allowed for
        /// internal extensions, that is, the extensions for which the
        /// IsInternalExtension field is set to 'true' during registration or
        /// during an update. There is a quota (15) on the number of
        /// extensions that can be registered per subscription. If your
        /// subscription runs out of quota, you will wither need to unregister
        /// some of the internal extensions or contact Azure (same email used
        /// to become a publisher)  to increase the quota.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='providerNamespace'>
        /// Required. The provider namespace of the extension image to
        /// unregister.
        /// </param>
        /// <param name='type'>
        /// Required. The type of the extension image to unregister.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the extension image to unregister.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginUnregisteringAsync(this IExtensionImageOperations operations, string providerNamespace, string type, string version)
        {
            return operations.BeginUnregisteringAsync(providerNamespace, type, version, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a new extension. It is allowed to update an extension which
        /// had already been registered with the same identity (i.e.
        /// combination of ProviderNamespace and Type) but with different
        /// version. It will fail if the extension to update has an identity
        /// that has not been registered before, or there is already an
        /// extension with the same identity and same version.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginUpdating(this IExtensionImageOperations operations, ExtensionImageUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExtensionImageOperations)s).BeginUpdatingAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update a new extension. It is allowed to update an extension which
        /// had already been registered with the same identity (i.e.
        /// combination of ProviderNamespace and Type) but with different
        /// version. It will fail if the extension to update has an identity
        /// that has not been registered before, or there is already an
        /// extension with the same identity and same version.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginUpdatingAsync(this IExtensionImageOperations operations, ExtensionImageUpdateParameters parameters)
        {
            return operations.BeginUpdatingAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Register a new extension. An extension is identified by the
        /// combination of its ProviderNamespace and Type (case-sensitive
        /// string). It is not allowed to register an extension with the same
        /// identity (i.e. combination of ProviderNamespace and Type) of an
        /// already-registered extension. To register new version of an
        /// existing extension, the Update Extension API should be used.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Register Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse Register(this IExtensionImageOperations operations, ExtensionImageRegisterParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExtensionImageOperations)s).RegisterAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Register a new extension. An extension is identified by the
        /// combination of its ProviderNamespace and Type (case-sensitive
        /// string). It is not allowed to register an extension with the same
        /// identity (i.e. combination of ProviderNamespace and Type) of an
        /// already-registered extension. To register new version of an
        /// existing extension, the Update Extension API should be used.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Register Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RegisterAsync(this IExtensionImageOperations operations, ExtensionImageRegisterParameters parameters)
        {
            return operations.RegisterAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Unregister a version of an extension that was previously registered
        /// using either the Register Extension or Update Extension APIs. An
        /// extension version is identified by the combination of its
        /// ProviderNamespace, Type and Version which are specified when
        /// registering the extension. Unregistering is only allowed for
        /// internal extensions, that is, the extensions for which the
        /// IsInternalExtension field is set to 'true' during registration or
        /// during an update. There is a quota (15) on the number of
        /// extensions that can be registered per subscription. If your
        /// subscription runs out of quota, you will wither need to unregister
        /// some of the internal extensions or contact Azure (same email used
        /// to become a publisher)  to increase the quota.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='providerNamespace'>
        /// Required. The provider namespace of the extension image to
        /// unregister.
        /// </param>
        /// <param name='type'>
        /// Required. The type of the extension image to unregister.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the extension image to unregister.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse Unregister(this IExtensionImageOperations operations, string providerNamespace, string type, string version)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExtensionImageOperations)s).UnregisterAsync(providerNamespace, type, version);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Unregister a version of an extension that was previously registered
        /// using either the Register Extension or Update Extension APIs. An
        /// extension version is identified by the combination of its
        /// ProviderNamespace, Type and Version which are specified when
        /// registering the extension. Unregistering is only allowed for
        /// internal extensions, that is, the extensions for which the
        /// IsInternalExtension field is set to 'true' during registration or
        /// during an update. There is a quota (15) on the number of
        /// extensions that can be registered per subscription. If your
        /// subscription runs out of quota, you will wither need to unregister
        /// some of the internal extensions or contact Azure (same email used
        /// to become a publisher)  to increase the quota.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='providerNamespace'>
        /// Required. The provider namespace of the extension image to
        /// unregister.
        /// </param>
        /// <param name='type'>
        /// Required. The type of the extension image to unregister.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the extension image to unregister.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> UnregisterAsync(this IExtensionImageOperations operations, string providerNamespace, string type, string version)
        {
            return operations.UnregisterAsync(providerNamespace, type, version, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a new extension. It is allowed to update an extension which
        /// had already been registered with the same identity (i.e.
        /// combination of ProviderNamespace and Type) but with different
        /// version. It will fail if the extension to update has an identity
        /// that has not been registered before, or there is already an
        /// extension with the same identity and same version.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse Update(this IExtensionImageOperations operations, ExtensionImageUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IExtensionImageOperations)s).UpdateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update a new extension. It is allowed to update an extension which
        /// had already been registered with the same identity (i.e.
        /// combination of ProviderNamespace and Type) but with different
        /// version. It will fail if the extension to update has an identity
        /// that has not been registered before, or there is already an
        /// extension with the same identity and same version.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IExtensionImageOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> UpdateAsync(this IExtensionImageOperations operations, ExtensionImageUpdateParameters parameters)
        {
            return operations.UpdateAsync(parameters, CancellationToken.None);
        }
    }
}
