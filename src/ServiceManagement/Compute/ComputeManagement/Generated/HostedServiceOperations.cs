// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the hosted
    /// services beneath your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460812.aspx for
    /// more information)
    /// </summary>
    internal partial class HostedServiceOperations : IServiceOperations<ComputeManagementClient>, IHostedServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the HostedServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal HostedServiceOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Add Extension operation adds an available extension to your
        /// cloud service. In Azure, a process can run as an extension of a
        /// cloud service. For example, Remote Desktop Access or the Azure
        /// Diagnostics Agent can run as extensions to the cloud service. You
        /// can find the available extension by using the List Available
        /// Extensions operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Extension operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> AddExtensionAsync(string serviceName, HostedServiceAddExtensionParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "AddExtensionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.HostedServices.BeginAddingExtensionAsync(serviceName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Begin Adding Extension operation adds an available extension to
        /// your cloud service. In Azure, a process can run as an extension of
        /// a cloud service. For example, Remote Desktop Access or the Azure
        /// Diagnostics Agent can run as extensions to the cloud service. You
        /// can find the available extension by using the List Available
        /// Extensions operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Adding Extension
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginAddingExtensionAsync(string serviceName, HostedServiceAddExtensionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Id == null)
            {
                throw new ArgumentNullException("parameters.Id");
            }
            if (parameters.Type == null)
            {
                throw new ArgumentNullException("parameters.Type");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginAddingExtensionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/extensions";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(extensionElement);
                
                if (parameters.ProviderNamespace != null)
                {
                    XElement providerNameSpaceElement = new XElement(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                    providerNameSpaceElement.Value = parameters.ProviderNamespace;
                    extensionElement.Add(providerNameSpaceElement);
                }
                
                XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                typeElement.Value = parameters.Type;
                extensionElement.Add(typeElement);
                
                XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                idElement.Value = parameters.Id;
                extensionElement.Add(idElement);
                
                if (parameters.Thumbprint != null)
                {
                    XElement thumbprintElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                    thumbprintElement.Value = parameters.Thumbprint;
                    extensionElement.Add(thumbprintElement);
                }
                
                if (parameters.ThumbprintAlgorithm != null)
                {
                    XElement thumbprintAlgorithmElement = new XElement(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                    thumbprintAlgorithmElement.Value = parameters.ThumbprintAlgorithm;
                    extensionElement.Add(thumbprintAlgorithmElement);
                }
                
                if (parameters.PublicConfiguration != null)
                {
                    XElement publicConfigurationElement = new XElement(XName.Get("PublicConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    publicConfigurationElement.Value = TypeConversion.ToBase64String(parameters.PublicConfiguration);
                    extensionElement.Add(publicConfigurationElement);
                }
                
                if (parameters.PrivateConfiguration != null)
                {
                    XElement privateConfigurationElement = new XElement(XName.Get("PrivateConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    privateConfigurationElement.Value = TypeConversion.ToBase64String(parameters.PrivateConfiguration);
                    extensionElement.Add(privateConfigurationElement);
                }
                
                if (parameters.Version != null)
                {
                    XElement versionElement = new XElement(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                    versionElement.Value = parameters.Version;
                    extensionElement.Add(versionElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The DeleteAll Hosted Service operation deletes the specified cloud
        /// service as well as operating system disk, attached data disks, and
        /// the source blobs for the disks from storage from Microsoft Azure.
        /// (see
        /// 'http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx'
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDeletingAllAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=media");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Deleting Extension operation deletes the specified
        /// extension from a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='extensionId'>
        /// Required. The identifier that was assigned to the extension when it
        /// was added to the cloud service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDeletingExtensionAsync(string serviceName, string extensionId, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (extensionId == null)
            {
                throw new ArgumentNullException("extensionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("extensionId", extensionId);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingExtensionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/extensions/";
            url = url + Uri.EscapeDataString(extensionId);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Check Hosted Service Name Availability operation checks for the
        /// availability of the specified cloud service name.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154116.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service name that you would like to use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Check Hosted Service Name Availability operation response.
        /// </returns>
        public async Task<HostedServiceCheckNameAvailabilityResponse> CheckNameAvailabilityAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "CheckNameAvailabilityAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/operations/isavailable/";
            url = url + Uri.EscapeDataString(serviceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceCheckNameAvailabilityResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HostedServiceCheckNameAvailabilityResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement availabilityResponseElement = responseDoc.Element(XName.Get("AvailabilityResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (availabilityResponseElement != null)
                        {
                            XElement resultElement = availabilityResponseElement.Element(XName.Get("Result", "http://schemas.microsoft.com/windowsazure"));
                            if (resultElement != null)
                            {
                                bool resultInstance = bool.Parse(resultElement.Value);
                                result.IsAvailable = resultInstance;
                            }
                            
                            XElement reasonElement = availabilityResponseElement.Element(XName.Get("Reason", "http://schemas.microsoft.com/windowsazure"));
                            if (reasonElement != null)
                            {
                                string reasonInstance = reasonElement.Value;
                                result.Reason = reasonInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create Hosted Service operation creates a new cloud service in
        /// Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441304.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Hosted Service
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateAsync(HostedServiceCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Description != null && parameters.Description.Length > 1024)
            {
                throw new ArgumentOutOfRangeException("parameters.Description");
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.ServiceName == null)
            {
                throw new ArgumentNullException("parameters.ServiceName");
            }
            // TODO: Validate parameters.ServiceName is a valid DNS name.
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement createHostedServiceElement = new XElement(XName.Get("CreateHostedService", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(createHostedServiceElement);
                
                XElement serviceNameElement = new XElement(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                serviceNameElement.Value = parameters.ServiceName;
                createHostedServiceElement.Add(serviceNameElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                createHostedServiceElement.Add(labelElement);
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    createHostedServiceElement.Add(descriptionElement);
                }
                
                if (parameters.Location != null)
                {
                    XElement locationElement = new XElement(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                    locationElement.Value = parameters.Location;
                    createHostedServiceElement.Add(locationElement);
                }
                
                if (parameters.AffinityGroup != null)
                {
                    XElement affinityGroupElement = new XElement(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                    affinityGroupElement.Value = parameters.AffinityGroup;
                    createHostedServiceElement.Add(affinityGroupElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    if (parameters.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)parameters.ExtendedProperties).IsInitialized)
                    {
                        XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                        foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                        {
                            string extendedPropertiesKey = pair.Key;
                            string extendedPropertiesValue = pair.Value;
                            XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                            
                            XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                            extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                            
                            XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesValueElement.Value = extendedPropertiesValue;
                            extendedPropertiesElement.Add(extendedPropertiesValueElement);
                        }
                        createHostedServiceElement.Add(extendedPropertiesDictionaryElement);
                    }
                }
                
                if (parameters.ReverseDnsFqdn != null)
                {
                    XElement reverseDnsFqdnElement = new XElement(XName.Get("ReverseDnsFqdn", "http://schemas.microsoft.com/windowsazure"));
                    reverseDnsFqdnElement.Value = parameters.ReverseDnsFqdn;
                    createHostedServiceElement.Add(reverseDnsFqdnElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Hosted Service operation deletes the specified cloud
        /// service from Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The DeleteAll Hosted Service operation deletes the specified cloud
        /// service as well as operating system disk, attached data disks, and
        /// the source blobs for the disks from storage from Microsoft Azure.
        /// (see
        /// 'http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx'
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> DeleteAllAsync(string serviceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "DeleteAllAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.HostedServices.BeginDeletingAllAsync(serviceName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete Extension operation deletes the specified extension from
        /// a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='extensionId'>
        /// Required. The identifier that was assigned to the extension when it
        /// was added to the cloud service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> DeleteExtensionAsync(string serviceName, string extensionId, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("extensionId", extensionId);
                TracingAdapter.Enter(invocationId, this, "DeleteExtensionAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.HostedServices.BeginDeletingExtensionAsync(serviceName, extensionId, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get Hosted Service Properties operation retrieves system
        /// properties for the specified cloud service. These properties
        /// include the service name and service type; and the name of the
        /// affinity group to which the service belongs, or its location if it
        /// is not part of an affinity group.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Hosted Service operation response.
        /// </returns>
        public async Task<HostedServiceGetResponse> GetAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HostedServiceGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement hostedServiceElement = responseDoc.Element(XName.Get("HostedService", "http://schemas.microsoft.com/windowsazure"));
                        if (hostedServiceElement != null)
                        {
                            XElement urlElement = hostedServiceElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                            if (urlElement != null)
                            {
                                Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                                result.Uri = urlInstance;
                            }
                            
                            XElement serviceNameElement = hostedServiceElement.Element(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceNameElement != null)
                            {
                                string serviceNameInstance = serviceNameElement.Value;
                                result.ServiceName = serviceNameInstance;
                            }
                            
                            XElement hostedServicePropertiesElement = hostedServiceElement.Element(XName.Get("HostedServiceProperties", "http://schemas.microsoft.com/windowsazure"));
                            if (hostedServicePropertiesElement != null)
                            {
                                HostedServiceProperties hostedServicePropertiesInstance = new HostedServiceProperties();
                                result.Properties = hostedServicePropertiesInstance;
                                
                                XElement descriptionElement = hostedServicePropertiesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    hostedServicePropertiesInstance.Description = descriptionInstance;
                                }
                                
                                XElement affinityGroupElement = hostedServicePropertiesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                                if (affinityGroupElement != null)
                                {
                                    string affinityGroupInstance = affinityGroupElement.Value;
                                    hostedServicePropertiesInstance.AffinityGroup = affinityGroupInstance;
                                }
                                
                                XElement locationElement = hostedServicePropertiesElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                                if (locationElement != null)
                                {
                                    string locationInstance = locationElement.Value;
                                    hostedServicePropertiesInstance.Location = locationInstance;
                                }
                                
                                XElement labelElement = hostedServicePropertiesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement != null)
                                {
                                    string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                                    hostedServicePropertiesInstance.Label = labelInstance;
                                }
                                
                                XElement statusElement = hostedServicePropertiesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                if (statusElement != null)
                                {
                                    HostedServiceStatus statusInstance = ((HostedServiceStatus)Enum.Parse(typeof(HostedServiceStatus), statusElement.Value, true));
                                    hostedServicePropertiesInstance.Status = statusInstance;
                                }
                                
                                XElement dateCreatedElement = hostedServicePropertiesElement.Element(XName.Get("DateCreated", "http://schemas.microsoft.com/windowsazure"));
                                if (dateCreatedElement != null)
                                {
                                    DateTime dateCreatedInstance = DateTime.Parse(dateCreatedElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    hostedServicePropertiesInstance.DateCreated = dateCreatedInstance;
                                }
                                
                                XElement dateLastModifiedElement = hostedServicePropertiesElement.Element(XName.Get("DateLastModified", "http://schemas.microsoft.com/windowsazure"));
                                if (dateLastModifiedElement != null)
                                {
                                    DateTime dateLastModifiedInstance = DateTime.Parse(dateLastModifiedElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    hostedServicePropertiesInstance.DateLastModified = dateLastModifiedInstance;
                                }
                                
                                XElement extendedPropertiesSequenceElement = hostedServicePropertiesElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                                if (extendedPropertiesSequenceElement != null)
                                {
                                    foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        hostedServicePropertiesInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                    }
                                }
                                
                                XElement reverseDnsFqdnElement = hostedServicePropertiesElement.Element(XName.Get("ReverseDnsFqdn", "http://schemas.microsoft.com/windowsazure"));
                                if (reverseDnsFqdnElement != null)
                                {
                                    string reverseDnsFqdnInstance = reverseDnsFqdnElement.Value;
                                    hostedServicePropertiesInstance.ReverseDnsFqdn = reverseDnsFqdnInstance;
                                }
                            }
                            
                            XElement computeCapabilitiesElement = hostedServiceElement.Element(XName.Get("ComputeCapabilities", "http://schemas.microsoft.com/windowsazure"));
                            if (computeCapabilitiesElement != null)
                            {
                                ComputeCapabilities computeCapabilitiesInstance = new ComputeCapabilities();
                                result.ComputeCapabilities = computeCapabilitiesInstance;
                                
                                XElement virtualMachinesRoleSizesSequenceElement = computeCapabilitiesElement.Element(XName.Get("VirtualMachinesRoleSizes", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualMachinesRoleSizesSequenceElement != null)
                                {
                                    foreach (XElement virtualMachinesRoleSizesElement in virtualMachinesRoleSizesSequenceElement.Elements(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        computeCapabilitiesInstance.VirtualMachinesRoleSizes.Add(virtualMachinesRoleSizesElement.Value);
                                    }
                                }
                                
                                XElement webWorkerRoleSizesSequenceElement = computeCapabilitiesElement.Element(XName.Get("WebWorkerRoleSizes", "http://schemas.microsoft.com/windowsazure"));
                                if (webWorkerRoleSizesSequenceElement != null)
                                {
                                    foreach (XElement webWorkerRoleSizesElement in webWorkerRoleSizesSequenceElement.Elements(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        computeCapabilitiesInstance.WebWorkerRoleSizes.Add(webWorkerRoleSizesElement.Value);
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Detailed Hosted Service Properties operation retrieves
        /// system properties for the specified cloud service. These
        /// properties include the service name and service type; the name of
        /// the affinity group to which the service belongs, or its location
        /// if it is not part of an affinity group; and information on the
        /// deployments of the service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The detailed Get Hosted Service operation response.
        /// </returns>
        public async Task<HostedServiceGetDetailedResponse> GetDetailedAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "GetDetailedAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("embed-detail=true");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceGetDetailedResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HostedServiceGetDetailedResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement hostedServiceElement = responseDoc.Element(XName.Get("HostedService", "http://schemas.microsoft.com/windowsazure"));
                        if (hostedServiceElement != null)
                        {
                            XElement deploymentsSequenceElement = hostedServiceElement.Element(XName.Get("Deployments", "http://schemas.microsoft.com/windowsazure"));
                            if (deploymentsSequenceElement != null)
                            {
                                foreach (XElement deploymentsElement in deploymentsSequenceElement.Elements(XName.Get("Deployment", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    HostedServiceGetDetailedResponse.Deployment deploymentInstance = new HostedServiceGetDetailedResponse.Deployment();
                                    result.Deployments.Add(deploymentInstance);
                                    
                                    XElement nameElement = deploymentsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        deploymentInstance.Name = nameInstance;
                                    }
                                    
                                    XElement deploymentSlotElement = deploymentsElement.Element(XName.Get("DeploymentSlot", "http://schemas.microsoft.com/windowsazure"));
                                    if (deploymentSlotElement != null)
                                    {
                                        DeploymentSlot deploymentSlotInstance = ((DeploymentSlot)Enum.Parse(typeof(DeploymentSlot), deploymentSlotElement.Value, true));
                                        deploymentInstance.DeploymentSlot = deploymentSlotInstance;
                                    }
                                    
                                    XElement privateIDElement = deploymentsElement.Element(XName.Get("PrivateID", "http://schemas.microsoft.com/windowsazure"));
                                    if (privateIDElement != null)
                                    {
                                        string privateIDInstance = privateIDElement.Value;
                                        deploymentInstance.PrivateId = privateIDInstance;
                                    }
                                    
                                    XElement statusElement = deploymentsElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                    if (statusElement != null)
                                    {
                                        DeploymentStatus statusInstance = ((DeploymentStatus)Enum.Parse(typeof(DeploymentStatus), statusElement.Value, true));
                                        deploymentInstance.Status = statusInstance;
                                    }
                                    
                                    XElement labelElement = deploymentsElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                    if (labelElement != null)
                                    {
                                        string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                                        deploymentInstance.Label = labelInstance;
                                    }
                                    
                                    XElement urlElement = deploymentsElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                                    if (urlElement != null)
                                    {
                                        Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                                        deploymentInstance.Uri = urlInstance;
                                    }
                                    
                                    XElement configurationElement = deploymentsElement.Element(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                                    if (configurationElement != null)
                                    {
                                        string configurationInstance = TypeConversion.FromBase64String(configurationElement.Value);
                                        deploymentInstance.Configuration = configurationInstance;
                                    }
                                    
                                    XElement roleInstanceListSequenceElement = deploymentsElement.Element(XName.Get("RoleInstanceList", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleInstanceListSequenceElement != null)
                                    {
                                        foreach (XElement roleInstanceListElement in roleInstanceListSequenceElement.Elements(XName.Get("RoleInstance", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            RoleInstance roleInstanceInstance = new RoleInstance();
                                            deploymentInstance.RoleInstances.Add(roleInstanceInstance);
                                            
                                            XElement roleNameElement = roleInstanceListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                            if (roleNameElement != null)
                                            {
                                                string roleNameInstance = roleNameElement.Value;
                                                roleInstanceInstance.RoleName = roleNameInstance;
                                            }
                                            
                                            XElement instanceNameElement = roleInstanceListElement.Element(XName.Get("InstanceName", "http://schemas.microsoft.com/windowsazure"));
                                            if (instanceNameElement != null)
                                            {
                                                string instanceNameInstance = instanceNameElement.Value;
                                                roleInstanceInstance.InstanceName = instanceNameInstance;
                                            }
                                            
                                            XElement instanceStatusElement = roleInstanceListElement.Element(XName.Get("InstanceStatus", "http://schemas.microsoft.com/windowsazure"));
                                            if (instanceStatusElement != null)
                                            {
                                                string instanceStatusInstance = instanceStatusElement.Value;
                                                roleInstanceInstance.InstanceStatus = instanceStatusInstance;
                                            }
                                            
                                            XElement instanceUpgradeDomainElement = roleInstanceListElement.Element(XName.Get("InstanceUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                            if (instanceUpgradeDomainElement != null && !string.IsNullOrEmpty(instanceUpgradeDomainElement.Value))
                                            {
                                                int instanceUpgradeDomainInstance = int.Parse(instanceUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                                roleInstanceInstance.InstanceUpgradeDomain = instanceUpgradeDomainInstance;
                                            }
                                            
                                            XElement instanceFaultDomainElement = roleInstanceListElement.Element(XName.Get("InstanceFaultDomain", "http://schemas.microsoft.com/windowsazure"));
                                            if (instanceFaultDomainElement != null && !string.IsNullOrEmpty(instanceFaultDomainElement.Value))
                                            {
                                                int instanceFaultDomainInstance = int.Parse(instanceFaultDomainElement.Value, CultureInfo.InvariantCulture);
                                                roleInstanceInstance.InstanceFaultDomain = instanceFaultDomainInstance;
                                            }
                                            
                                            XElement instanceSizeElement = roleInstanceListElement.Element(XName.Get("InstanceSize", "http://schemas.microsoft.com/windowsazure"));
                                            if (instanceSizeElement != null)
                                            {
                                                string instanceSizeInstance = instanceSizeElement.Value;
                                                roleInstanceInstance.InstanceSize = instanceSizeInstance;
                                            }
                                            
                                            XElement instanceStateDetailsElement = roleInstanceListElement.Element(XName.Get("InstanceStateDetails", "http://schemas.microsoft.com/windowsazure"));
                                            if (instanceStateDetailsElement != null)
                                            {
                                                string instanceStateDetailsInstance = instanceStateDetailsElement.Value;
                                                roleInstanceInstance.InstanceStateDetails = instanceStateDetailsInstance;
                                            }
                                            
                                            XElement instanceErrorCodeElement = roleInstanceListElement.Element(XName.Get("InstanceErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                            if (instanceErrorCodeElement != null)
                                            {
                                                string instanceErrorCodeInstance = instanceErrorCodeElement.Value;
                                                roleInstanceInstance.InstanceErrorCode = instanceErrorCodeInstance;
                                            }
                                            
                                            XElement ipAddressElement = roleInstanceListElement.Element(XName.Get("IpAddress", "http://schemas.microsoft.com/windowsazure"));
                                            if (ipAddressElement != null)
                                            {
                                                string ipAddressInstance = ipAddressElement.Value;
                                                roleInstanceInstance.IPAddress = ipAddressInstance;
                                            }
                                            
                                            XElement instanceEndpointsSequenceElement = roleInstanceListElement.Element(XName.Get("InstanceEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                            if (instanceEndpointsSequenceElement != null)
                                            {
                                                foreach (XElement instanceEndpointsElement in instanceEndpointsSequenceElement.Elements(XName.Get("InstanceEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    InstanceEndpoint instanceEndpointInstance = new InstanceEndpoint();
                                                    roleInstanceInstance.InstanceEndpoints.Add(instanceEndpointInstance);
                                                    
                                                    XElement localPortElement = instanceEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                                    if (localPortElement != null && !string.IsNullOrEmpty(localPortElement.Value))
                                                    {
                                                        int localPortInstance = int.Parse(localPortElement.Value, CultureInfo.InvariantCulture);
                                                        instanceEndpointInstance.LocalPort = localPortInstance;
                                                    }
                                                    
                                                    XElement nameElement2 = instanceEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement2 != null)
                                                    {
                                                        string nameInstance2 = nameElement2.Value;
                                                        instanceEndpointInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    XElement publicPortElement = instanceEndpointsElement.Element(XName.Get("PublicPort", "http://schemas.microsoft.com/windowsazure"));
                                                    if (publicPortElement != null)
                                                    {
                                                        int publicPortInstance = int.Parse(publicPortElement.Value, CultureInfo.InvariantCulture);
                                                        instanceEndpointInstance.Port = publicPortInstance;
                                                    }
                                                    
                                                    XElement protocolElement = instanceEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    if (protocolElement != null)
                                                    {
                                                        string protocolInstance = protocolElement.Value;
                                                        instanceEndpointInstance.Protocol = protocolInstance;
                                                    }
                                                    
                                                    XElement vipElement = instanceEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                                    if (vipElement != null)
                                                    {
                                                        string vipInstance = vipElement.Value;
                                                        instanceEndpointInstance.VirtualIPAddress = vipInstance;
                                                    }
                                                    
                                                    XElement idleTimeoutInMinutesElement = instanceEndpointsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                    if (idleTimeoutInMinutesElement != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement.Value))
                                                    {
                                                        int idleTimeoutInMinutesInstance = int.Parse(idleTimeoutInMinutesElement.Value, CultureInfo.InvariantCulture);
                                                        instanceEndpointInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement guestAgentStatusElement = roleInstanceListElement.Element(XName.Get("GuestAgentStatus", "http://schemas.microsoft.com/windowsazure"));
                                            if (guestAgentStatusElement != null)
                                            {
                                                GuestAgentStatus guestAgentStatusInstance = new GuestAgentStatus();
                                                roleInstanceInstance.GuestAgentStatus = guestAgentStatusInstance;
                                                
                                                XElement protocolVersionElement = guestAgentStatusElement.Element(XName.Get("ProtocolVersion", "http://schemas.microsoft.com/windowsazure"));
                                                if (protocolVersionElement != null)
                                                {
                                                    string protocolVersionInstance = protocolVersionElement.Value;
                                                    guestAgentStatusInstance.ProtocolVersion = protocolVersionInstance;
                                                }
                                                
                                                XElement timestampElement = guestAgentStatusElement.Element(XName.Get("Timestamp", "http://schemas.microsoft.com/windowsazure"));
                                                if (timestampElement != null && !string.IsNullOrEmpty(timestampElement.Value))
                                                {
                                                    DateTime timestampInstance = DateTime.Parse(timestampElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                    guestAgentStatusInstance.Timestamp = timestampInstance;
                                                }
                                                
                                                XElement guestAgentVersionElement = guestAgentStatusElement.Element(XName.Get("GuestAgentVersion", "http://schemas.microsoft.com/windowsazure"));
                                                if (guestAgentVersionElement != null)
                                                {
                                                    string guestAgentVersionInstance = guestAgentVersionElement.Value;
                                                    guestAgentStatusInstance.GuestAgentVersion = guestAgentVersionInstance;
                                                }
                                                
                                                XElement statusElement2 = guestAgentStatusElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                                if (statusElement2 != null)
                                                {
                                                    string statusInstance2 = statusElement2.Value;
                                                    guestAgentStatusInstance.Status = statusInstance2;
                                                }
                                                
                                                XElement codeElement = guestAgentStatusElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                                if (codeElement != null && !string.IsNullOrEmpty(codeElement.Value))
                                                {
                                                    int codeInstance = int.Parse(codeElement.Value, CultureInfo.InvariantCulture);
                                                    guestAgentStatusInstance.Code = codeInstance;
                                                }
                                                
                                                XElement messageElement = guestAgentStatusElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                if (messageElement != null)
                                                {
                                                    GuestAgentMessage messageInstance = new GuestAgentMessage();
                                                    guestAgentStatusInstance.Message = messageInstance;
                                                    
                                                    XElement messageResourceIdElement = messageElement.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                    if (messageResourceIdElement != null)
                                                    {
                                                        string messageResourceIdInstance = messageResourceIdElement.Value;
                                                        messageInstance.MessageResourceId = messageResourceIdInstance;
                                                    }
                                                    
                                                    XElement paramListSequenceElement = messageElement.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                    if (paramListSequenceElement != null)
                                                    {
                                                        foreach (XElement paramListElement in paramListSequenceElement.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            messageInstance.ParamList.Add(paramListElement.Value);
                                                        }
                                                    }
                                                }
                                                
                                                XElement formattedMessageElement = guestAgentStatusElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                                if (formattedMessageElement != null)
                                                {
                                                    GuestAgentFormattedMessage formattedMessageInstance = new GuestAgentFormattedMessage();
                                                    guestAgentStatusInstance.FormattedMessage = formattedMessageInstance;
                                                    
                                                    XElement languageElement = formattedMessageElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                    if (languageElement != null)
                                                    {
                                                        string languageInstance = languageElement.Value;
                                                        formattedMessageInstance.Language = languageInstance;
                                                    }
                                                    
                                                    XElement messageElement2 = formattedMessageElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                    if (messageElement2 != null)
                                                    {
                                                        string messageInstance2 = messageElement2.Value;
                                                        formattedMessageInstance.Message = messageInstance2;
                                                    }
                                                }
                                            }
                                            
                                            XElement resourceExtensionStatusListSequenceElement = roleInstanceListElement.Element(XName.Get("ResourceExtensionStatusList", "http://schemas.microsoft.com/windowsazure"));
                                            if (resourceExtensionStatusListSequenceElement != null)
                                            {
                                                foreach (XElement resourceExtensionStatusListElement in resourceExtensionStatusListSequenceElement.Elements(XName.Get("ResourceExtensionStatus", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    ResourceExtensionStatus resourceExtensionStatusInstance = new ResourceExtensionStatus();
                                                    roleInstanceInstance.ResourceExtensionStatusList.Add(resourceExtensionStatusInstance);
                                                    
                                                    XElement handlerNameElement = resourceExtensionStatusListElement.Element(XName.Get("HandlerName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (handlerNameElement != null)
                                                    {
                                                        string handlerNameInstance = handlerNameElement.Value;
                                                        resourceExtensionStatusInstance.HandlerName = handlerNameInstance;
                                                    }
                                                    
                                                    XElement versionElement = resourceExtensionStatusListElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                                    if (versionElement != null)
                                                    {
                                                        string versionInstance = versionElement.Value;
                                                        resourceExtensionStatusInstance.Version = versionInstance;
                                                    }
                                                    
                                                    XElement statusElement3 = resourceExtensionStatusListElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                                    if (statusElement3 != null)
                                                    {
                                                        string statusInstance3 = statusElement3.Value;
                                                        resourceExtensionStatusInstance.Status = statusInstance3;
                                                    }
                                                    
                                                    XElement codeElement2 = resourceExtensionStatusListElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                                    if (codeElement2 != null && !string.IsNullOrEmpty(codeElement2.Value))
                                                    {
                                                        int codeInstance2 = int.Parse(codeElement2.Value, CultureInfo.InvariantCulture);
                                                        resourceExtensionStatusInstance.Code = codeInstance2;
                                                    }
                                                    
                                                    XElement messageElement3 = resourceExtensionStatusListElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                    if (messageElement3 != null)
                                                    {
                                                        GuestAgentMessage messageInstance3 = new GuestAgentMessage();
                                                        resourceExtensionStatusInstance.Message = messageInstance3;
                                                        
                                                        XElement messageResourceIdElement2 = messageElement3.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                        if (messageResourceIdElement2 != null)
                                                        {
                                                            string messageResourceIdInstance2 = messageResourceIdElement2.Value;
                                                            messageInstance3.MessageResourceId = messageResourceIdInstance2;
                                                        }
                                                        
                                                        XElement paramListSequenceElement2 = messageElement3.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                        if (paramListSequenceElement2 != null)
                                                        {
                                                            foreach (XElement paramListElement2 in paramListSequenceElement2.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                messageInstance3.ParamList.Add(paramListElement2.Value);
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement formattedMessageElement2 = resourceExtensionStatusListElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                                    if (formattedMessageElement2 != null)
                                                    {
                                                        GuestAgentFormattedMessage formattedMessageInstance2 = new GuestAgentFormattedMessage();
                                                        resourceExtensionStatusInstance.FormattedMessage = formattedMessageInstance2;
                                                        
                                                        XElement languageElement2 = formattedMessageElement2.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                        if (languageElement2 != null)
                                                        {
                                                            string languageInstance2 = languageElement2.Value;
                                                            formattedMessageInstance2.Language = languageInstance2;
                                                        }
                                                        
                                                        XElement messageElement4 = formattedMessageElement2.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                        if (messageElement4 != null)
                                                        {
                                                            string messageInstance4 = messageElement4.Value;
                                                            formattedMessageInstance2.Message = messageInstance4;
                                                        }
                                                    }
                                                    
                                                    XElement extensionSettingStatusElement = resourceExtensionStatusListElement.Element(XName.Get("ExtensionSettingStatus", "http://schemas.microsoft.com/windowsazure"));
                                                    if (extensionSettingStatusElement != null)
                                                    {
                                                        ResourceExtensionConfigurationStatus extensionSettingStatusInstance = new ResourceExtensionConfigurationStatus();
                                                        resourceExtensionStatusInstance.ExtensionSettingStatus = extensionSettingStatusInstance;
                                                        
                                                        XElement timestampElement2 = extensionSettingStatusElement.Element(XName.Get("Timestamp", "http://schemas.microsoft.com/windowsazure"));
                                                        if (timestampElement2 != null && !string.IsNullOrEmpty(timestampElement2.Value))
                                                        {
                                                            DateTime timestampInstance2 = DateTime.Parse(timestampElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                            extensionSettingStatusInstance.Timestamp = timestampInstance2;
                                                        }
                                                        
                                                        XElement configurationAppliedTimeElement = extensionSettingStatusElement.Element(XName.Get("ConfigurationAppliedTime", "http://schemas.microsoft.com/windowsazure"));
                                                        if (configurationAppliedTimeElement != null && !string.IsNullOrEmpty(configurationAppliedTimeElement.Value))
                                                        {
                                                            DateTime configurationAppliedTimeInstance = DateTime.Parse(configurationAppliedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                            extensionSettingStatusInstance.ConfigurationAppliedTime = configurationAppliedTimeInstance;
                                                        }
                                                        
                                                        XElement nameElement3 = extensionSettingStatusElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                        if (nameElement3 != null)
                                                        {
                                                            string nameInstance3 = nameElement3.Value;
                                                            extensionSettingStatusInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        XElement operationElement = extensionSettingStatusElement.Element(XName.Get("Operation", "http://schemas.microsoft.com/windowsazure"));
                                                        if (operationElement != null)
                                                        {
                                                            string operationInstance = operationElement.Value;
                                                            extensionSettingStatusInstance.Operation = operationInstance;
                                                        }
                                                        
                                                        XElement statusElement4 = extensionSettingStatusElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                                        if (statusElement4 != null)
                                                        {
                                                            string statusInstance4 = statusElement4.Value;
                                                            extensionSettingStatusInstance.Status = statusInstance4;
                                                        }
                                                        
                                                        XElement codeElement3 = extensionSettingStatusElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                                        if (codeElement3 != null && !string.IsNullOrEmpty(codeElement3.Value))
                                                        {
                                                            int codeInstance3 = int.Parse(codeElement3.Value, CultureInfo.InvariantCulture);
                                                            extensionSettingStatusInstance.Code = codeInstance3;
                                                        }
                                                        
                                                        XElement messageElement5 = extensionSettingStatusElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                        if (messageElement5 != null)
                                                        {
                                                            GuestAgentMessage messageInstance5 = new GuestAgentMessage();
                                                            extensionSettingStatusInstance.Message = messageInstance5;
                                                            
                                                            XElement messageResourceIdElement3 = messageElement5.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                            if (messageResourceIdElement3 != null)
                                                            {
                                                                string messageResourceIdInstance3 = messageResourceIdElement3.Value;
                                                                messageInstance5.MessageResourceId = messageResourceIdInstance3;
                                                            }
                                                            
                                                            XElement paramListSequenceElement3 = messageElement5.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                            if (paramListSequenceElement3 != null)
                                                            {
                                                                foreach (XElement paramListElement3 in paramListSequenceElement3.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                                {
                                                                    messageInstance5.ParamList.Add(paramListElement3.Value);
                                                                }
                                                            }
                                                        }
                                                        
                                                        XElement formattedMessageElement3 = extensionSettingStatusElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                                        if (formattedMessageElement3 != null)
                                                        {
                                                            GuestAgentFormattedMessage formattedMessageInstance3 = new GuestAgentFormattedMessage();
                                                            extensionSettingStatusInstance.FormattedMessage = formattedMessageInstance3;
                                                            
                                                            XElement languageElement3 = formattedMessageElement3.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                            if (languageElement3 != null)
                                                            {
                                                                string languageInstance3 = languageElement3.Value;
                                                                formattedMessageInstance3.Language = languageInstance3;
                                                            }
                                                            
                                                            XElement messageElement6 = formattedMessageElement3.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                            if (messageElement6 != null)
                                                            {
                                                                string messageInstance6 = messageElement6.Value;
                                                                formattedMessageInstance3.Message = messageInstance6;
                                                            }
                                                        }
                                                        
                                                        XElement subStatusListSequenceElement = extensionSettingStatusElement.Element(XName.Get("SubStatusList", "http://schemas.microsoft.com/windowsazure"));
                                                        if (subStatusListSequenceElement != null)
                                                        {
                                                            foreach (XElement subStatusListElement in subStatusListSequenceElement.Elements(XName.Get("SubStatus", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                ResourceExtensionSubStatus subStatusInstance = new ResourceExtensionSubStatus();
                                                                extensionSettingStatusInstance.SubStatusList.Add(subStatusInstance);
                                                                
                                                                XElement nameElement4 = subStatusListElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                                if (nameElement4 != null)
                                                                {
                                                                    string nameInstance4 = nameElement4.Value;
                                                                    subStatusInstance.Name = nameInstance4;
                                                                }
                                                                
                                                                XElement statusElement5 = subStatusListElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                                                if (statusElement5 != null)
                                                                {
                                                                    string statusInstance5 = statusElement5.Value;
                                                                    subStatusInstance.Status = statusInstance5;
                                                                }
                                                                
                                                                XElement codeElement4 = subStatusListElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                                                if (codeElement4 != null && !string.IsNullOrEmpty(codeElement4.Value))
                                                                {
                                                                    int codeInstance4 = int.Parse(codeElement4.Value, CultureInfo.InvariantCulture);
                                                                    subStatusInstance.Code = codeInstance4;
                                                                }
                                                                
                                                                XElement messageElement7 = subStatusListElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                                if (messageElement7 != null)
                                                                {
                                                                    GuestAgentMessage messageInstance7 = new GuestAgentMessage();
                                                                    subStatusInstance.Message = messageInstance7;
                                                                    
                                                                    XElement messageResourceIdElement4 = messageElement7.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (messageResourceIdElement4 != null)
                                                                    {
                                                                        string messageResourceIdInstance4 = messageResourceIdElement4.Value;
                                                                        messageInstance7.MessageResourceId = messageResourceIdInstance4;
                                                                    }
                                                                    
                                                                    XElement paramListSequenceElement4 = messageElement7.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (paramListSequenceElement4 != null)
                                                                    {
                                                                        foreach (XElement paramListElement4 in paramListSequenceElement4.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                                        {
                                                                            messageInstance7.ParamList.Add(paramListElement4.Value);
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                XElement formattedMessageElement4 = subStatusListElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                                                if (formattedMessageElement4 != null)
                                                                {
                                                                    GuestAgentFormattedMessage formattedMessageInstance4 = new GuestAgentFormattedMessage();
                                                                    subStatusInstance.FormattedMessage = formattedMessageInstance4;
                                                                    
                                                                    XElement languageElement4 = formattedMessageElement4.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (languageElement4 != null)
                                                                    {
                                                                        string languageInstance4 = languageElement4.Value;
                                                                        formattedMessageInstance4.Language = languageInstance4;
                                                                    }
                                                                    
                                                                    XElement messageElement8 = formattedMessageElement4.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (messageElement8 != null)
                                                                    {
                                                                        string messageInstance8 = messageElement8.Value;
                                                                        formattedMessageInstance4.Message = messageInstance8;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement powerStateElement = roleInstanceListElement.Element(XName.Get("PowerState", "http://schemas.microsoft.com/windowsazure"));
                                            if (powerStateElement != null)
                                            {
                                                RoleInstancePowerState powerStateInstance = ((RoleInstancePowerState)Enum.Parse(typeof(RoleInstancePowerState), powerStateElement.Value, true));
                                                roleInstanceInstance.PowerState = powerStateInstance;
                                            }
                                            
                                            XElement hostNameElement = roleInstanceListElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                            if (hostNameElement != null)
                                            {
                                                string hostNameInstance = hostNameElement.Value;
                                                roleInstanceInstance.HostName = hostNameInstance;
                                            }
                                            
                                            XElement remoteAccessCertificateThumbprintElement = roleInstanceListElement.Element(XName.Get("RemoteAccessCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                            if (remoteAccessCertificateThumbprintElement != null)
                                            {
                                                string remoteAccessCertificateThumbprintInstance = remoteAccessCertificateThumbprintElement.Value;
                                                roleInstanceInstance.RemoteAccessCertificateThumbprint = remoteAccessCertificateThumbprintInstance;
                                            }
                                            
                                            XElement publicIPsSequenceElement = roleInstanceListElement.Element(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                            if (publicIPsSequenceElement != null)
                                            {
                                                foreach (XElement publicIPsElement in publicIPsSequenceElement.Elements(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    RoleInstance.PublicIP publicIPInstance = new RoleInstance.PublicIP();
                                                    roleInstanceInstance.PublicIPs.Add(publicIPInstance);
                                                    
                                                    XElement nameElement5 = publicIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement5 != null)
                                                    {
                                                        string nameInstance5 = nameElement5.Value;
                                                        publicIPInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    XElement addressElement = publicIPsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                                    if (addressElement != null)
                                                    {
                                                        string addressInstance = addressElement.Value;
                                                        publicIPInstance.Address = addressInstance;
                                                    }
                                                    
                                                    XElement idleTimeoutInMinutesElement2 = publicIPsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                    if (idleTimeoutInMinutesElement2 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement2.Value))
                                                    {
                                                        int idleTimeoutInMinutesInstance2 = int.Parse(idleTimeoutInMinutesElement2.Value, CultureInfo.InvariantCulture);
                                                        publicIPInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                                                    }
                                                    
                                                    XElement domainNameLabelElement = publicIPsElement.Element(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                                    if (domainNameLabelElement != null)
                                                    {
                                                        string domainNameLabelInstance = domainNameLabelElement.Value;
                                                        publicIPInstance.DomainNameLabel = domainNameLabelInstance;
                                                    }
                                                    
                                                    XElement fqdnsSequenceElement = publicIPsElement.Element(XName.Get("Fqdns", "http://schemas.microsoft.com/windowsazure"));
                                                    if (fqdnsSequenceElement != null)
                                                    {
                                                        foreach (XElement fqdnsElement in fqdnsSequenceElement.Elements(XName.Get("Fqdn", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            publicIPInstance.Fqdns.Add(fqdnsElement.Value);
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement networkInterfacesSequenceElement = roleInstanceListElement.Element(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                            if (networkInterfacesSequenceElement != null)
                                            {
                                                foreach (XElement networkInterfacesElement in networkInterfacesSequenceElement.Elements(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    NetworkInterfaceInstance networkInterfaceInstance = new NetworkInterfaceInstance();
                                                    roleInstanceInstance.NetworkInterfaces.Add(networkInterfaceInstance);
                                                    
                                                    XElement nameElement6 = networkInterfacesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement6 != null)
                                                    {
                                                        string nameInstance6 = nameElement6.Value;
                                                        networkInterfaceInstance.Name = nameInstance6;
                                                    }
                                                    
                                                    XElement macAddressElement = networkInterfacesElement.Element(XName.Get("MacAddress", "http://schemas.microsoft.com/windowsazure"));
                                                    if (macAddressElement != null)
                                                    {
                                                        string macAddressInstance = macAddressElement.Value;
                                                        networkInterfaceInstance.MacAddress = macAddressInstance;
                                                    }
                                                    
                                                    XElement iPConfigurationsSequenceElement = networkInterfacesElement.Element(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                                    if (iPConfigurationsSequenceElement != null)
                                                    {
                                                        foreach (XElement iPConfigurationsElement in iPConfigurationsSequenceElement.Elements(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            IPConfigurationInstance iPConfigurationInstance = new IPConfigurationInstance();
                                                            networkInterfaceInstance.IPConfigurations.Add(iPConfigurationInstance);
                                                            
                                                            XElement subnetNameElement = iPConfigurationsElement.Element(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                            if (subnetNameElement != null)
                                                            {
                                                                string subnetNameInstance = subnetNameElement.Value;
                                                                iPConfigurationInstance.SubnetName = subnetNameInstance;
                                                            }
                                                            
                                                            XElement addressElement2 = iPConfigurationsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                                            if (addressElement2 != null)
                                                            {
                                                                string addressInstance2 = addressElement2.Value;
                                                                iPConfigurationInstance.Address = addressInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement upgradeStatusElement = deploymentsElement.Element(XName.Get("UpgradeStatus", "http://schemas.microsoft.com/windowsazure"));
                                    if (upgradeStatusElement != null)
                                    {
                                        UpgradeStatus upgradeStatusInstance = new UpgradeStatus();
                                        deploymentInstance.UpgradeStatus = upgradeStatusInstance;
                                        
                                        XElement upgradeTypeElement = upgradeStatusElement.Element(XName.Get("UpgradeType", "http://schemas.microsoft.com/windowsazure"));
                                        if (upgradeTypeElement != null)
                                        {
                                            DeploymentUpgradeType upgradeTypeInstance = ((DeploymentUpgradeType)Enum.Parse(typeof(DeploymentUpgradeType), upgradeTypeElement.Value, true));
                                            upgradeStatusInstance.UpgradeType = upgradeTypeInstance;
                                        }
                                        
                                        XElement currentUpgradeDomainStateElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomainState", "http://schemas.microsoft.com/windowsazure"));
                                        if (currentUpgradeDomainStateElement != null)
                                        {
                                            UpgradeDomainState currentUpgradeDomainStateInstance = ((UpgradeDomainState)Enum.Parse(typeof(UpgradeDomainState), currentUpgradeDomainStateElement.Value, true));
                                            upgradeStatusInstance.CurrentUpgradeDomainState = currentUpgradeDomainStateInstance;
                                        }
                                        
                                        XElement currentUpgradeDomainElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                        if (currentUpgradeDomainElement != null)
                                        {
                                            int currentUpgradeDomainInstance = int.Parse(currentUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                            upgradeStatusInstance.CurrentUpgradeDomain = currentUpgradeDomainInstance;
                                        }
                                    }
                                    
                                    XElement upgradeDomainCountElement = deploymentsElement.Element(XName.Get("UpgradeDomainCount", "http://schemas.microsoft.com/windowsazure"));
                                    if (upgradeDomainCountElement != null)
                                    {
                                        int upgradeDomainCountInstance = int.Parse(upgradeDomainCountElement.Value, CultureInfo.InvariantCulture);
                                        deploymentInstance.UpgradeDomainCount = upgradeDomainCountInstance;
                                    }
                                    
                                    XElement roleListSequenceElement = deploymentsElement.Element(XName.Get("RoleList", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleListSequenceElement != null)
                                    {
                                        foreach (XElement roleListElement in roleListSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            Role roleInstance = new Role();
                                            deploymentInstance.Roles.Add(roleInstance);
                                            
                                            XElement roleNameElement2 = roleListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                            if (roleNameElement2 != null)
                                            {
                                                string roleNameInstance2 = roleNameElement2.Value;
                                                roleInstance.RoleName = roleNameInstance2;
                                            }
                                            
                                            XElement osVersionElement = roleListElement.Element(XName.Get("OsVersion", "http://schemas.microsoft.com/windowsazure"));
                                            if (osVersionElement != null)
                                            {
                                                string osVersionInstance = osVersionElement.Value;
                                                roleInstance.OSVersion = osVersionInstance;
                                            }
                                            
                                            XElement roleTypeElement = roleListElement.Element(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                                            if (roleTypeElement != null)
                                            {
                                                string roleTypeInstance = roleTypeElement.Value;
                                                roleInstance.RoleType = roleTypeInstance;
                                            }
                                            
                                            XElement configurationSetsSequenceElement = roleListElement.Element(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                                            if (configurationSetsSequenceElement != null)
                                            {
                                                foreach (XElement configurationSetsElement in configurationSetsSequenceElement.Elements(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                                    roleInstance.ConfigurationSets.Add(configurationSetInstance);
                                                    
                                                    XElement configurationSetTypeElement = configurationSetsElement.Element(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                                    if (configurationSetTypeElement != null)
                                                    {
                                                        string configurationSetTypeInstance = configurationSetTypeElement.Value;
                                                        configurationSetInstance.ConfigurationSetType = configurationSetTypeInstance;
                                                    }
                                                    
                                                    XElement inputEndpointsSequenceElement = configurationSetsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                                    if (inputEndpointsSequenceElement != null)
                                                    {
                                                        foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            InputEndpoint inputEndpointInstance = new InputEndpoint();
                                                            configurationSetInstance.InputEndpoints.Add(inputEndpointInstance);
                                                            
                                                            XElement loadBalancedEndpointSetNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                                            if (loadBalancedEndpointSetNameElement != null)
                                                            {
                                                                string loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement.Value;
                                                                inputEndpointInstance.LoadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                                                            }
                                                            
                                                            XElement localPortElement2 = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                                            if (localPortElement2 != null && !string.IsNullOrEmpty(localPortElement2.Value))
                                                            {
                                                                int localPortInstance2 = int.Parse(localPortElement2.Value, CultureInfo.InvariantCulture);
                                                                inputEndpointInstance.LocalPort = localPortInstance2;
                                                            }
                                                            
                                                            XElement nameElement7 = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                            if (nameElement7 != null)
                                                            {
                                                                string nameInstance7 = nameElement7.Value;
                                                                inputEndpointInstance.Name = nameInstance7;
                                                            }
                                                            
                                                            XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                            if (portElement != null && !string.IsNullOrEmpty(portElement.Value))
                                                            {
                                                                int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                                inputEndpointInstance.Port = portInstance;
                                                            }
                                                            
                                                            XElement loadBalancerProbeElement = inputEndpointsElement.Element(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                                            if (loadBalancerProbeElement != null)
                                                            {
                                                                LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                                inputEndpointInstance.LoadBalancerProbe = loadBalancerProbeInstance;
                                                                
                                                                XElement pathElement = loadBalancerProbeElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                                if (pathElement != null)
                                                                {
                                                                    string pathInstance = pathElement.Value;
                                                                    loadBalancerProbeInstance.Path = pathInstance;
                                                                }
                                                                
                                                                XElement portElement2 = loadBalancerProbeElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                                if (portElement2 != null)
                                                                {
                                                                    int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                                    loadBalancerProbeInstance.Port = portInstance2;
                                                                }
                                                                
                                                                XElement protocolElement2 = loadBalancerProbeElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                                if (protocolElement2 != null)
                                                                {
                                                                    LoadBalancerProbeTransportProtocol protocolInstance2 = ComputeManagementClient.ParseLoadBalancerProbeTransportProtocol(protocolElement2.Value);
                                                                    loadBalancerProbeInstance.Protocol = protocolInstance2;
                                                                }
                                                                
                                                                XElement intervalInSecondsElement = loadBalancerProbeElement.Element(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                                if (intervalInSecondsElement != null && !string.IsNullOrEmpty(intervalInSecondsElement.Value))
                                                                {
                                                                    int intervalInSecondsInstance = int.Parse(intervalInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                                    loadBalancerProbeInstance.IntervalInSeconds = intervalInSecondsInstance;
                                                                }
                                                                
                                                                XElement timeoutInSecondsElement = loadBalancerProbeElement.Element(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                                if (timeoutInSecondsElement != null && !string.IsNullOrEmpty(timeoutInSecondsElement.Value))
                                                                {
                                                                    int timeoutInSecondsInstance = int.Parse(timeoutInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                                    loadBalancerProbeInstance.TimeoutInSeconds = timeoutInSecondsInstance;
                                                                }
                                                            }
                                                            
                                                            XElement protocolElement3 = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                            if (protocolElement3 != null)
                                                            {
                                                                string protocolInstance3 = protocolElement3.Value;
                                                                inputEndpointInstance.Protocol = protocolInstance3;
                                                            }
                                                            
                                                            XElement vipElement2 = inputEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                                            if (vipElement2 != null)
                                                            {
                                                                string vipInstance2 = vipElement2.Value;
                                                                inputEndpointInstance.VirtualIPAddress = vipInstance2;
                                                            }
                                                            
                                                            XElement enableDirectServerReturnElement = inputEndpointsElement.Element(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                                            if (enableDirectServerReturnElement != null && !string.IsNullOrEmpty(enableDirectServerReturnElement.Value))
                                                            {
                                                                bool enableDirectServerReturnInstance = bool.Parse(enableDirectServerReturnElement.Value);
                                                                inputEndpointInstance.EnableDirectServerReturn = enableDirectServerReturnInstance;
                                                            }
                                                            
                                                            XElement loadBalancerNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancerName", "http://schemas.microsoft.com/windowsazure"));
                                                            if (loadBalancerNameElement != null)
                                                            {
                                                                string loadBalancerNameInstance = loadBalancerNameElement.Value;
                                                                inputEndpointInstance.LoadBalancerName = loadBalancerNameInstance;
                                                            }
                                                            
                                                            XElement endpointAclElement = inputEndpointsElement.Element(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                                            if (endpointAclElement != null)
                                                            {
                                                                EndpointAcl endpointAclInstance = new EndpointAcl();
                                                                inputEndpointInstance.EndpointAcl = endpointAclInstance;
                                                                
                                                                XElement rulesSequenceElement = endpointAclElement.Element(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                                if (rulesSequenceElement != null)
                                                                {
                                                                    foreach (XElement rulesElement in rulesSequenceElement.Elements(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure")))
                                                                    {
                                                                        AccessControlListRule ruleInstance = new AccessControlListRule();
                                                                        endpointAclInstance.Rules.Add(ruleInstance);
                                                                        
                                                                        XElement orderElement = rulesElement.Element(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (orderElement != null && !string.IsNullOrEmpty(orderElement.Value))
                                                                        {
                                                                            int orderInstance = int.Parse(orderElement.Value, CultureInfo.InvariantCulture);
                                                                            ruleInstance.Order = orderInstance;
                                                                        }
                                                                        
                                                                        XElement actionElement = rulesElement.Element(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (actionElement != null)
                                                                        {
                                                                            string actionInstance = actionElement.Value;
                                                                            ruleInstance.Action = actionInstance;
                                                                        }
                                                                        
                                                                        XElement remoteSubnetElement = rulesElement.Element(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (remoteSubnetElement != null)
                                                                        {
                                                                            string remoteSubnetInstance = remoteSubnetElement.Value;
                                                                            ruleInstance.RemoteSubnet = remoteSubnetInstance;
                                                                        }
                                                                        
                                                                        XElement descriptionElement = rulesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (descriptionElement != null)
                                                                        {
                                                                            string descriptionInstance = descriptionElement.Value;
                                                                            ruleInstance.Description = descriptionInstance;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            XElement idleTimeoutInMinutesElement3 = inputEndpointsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                            if (idleTimeoutInMinutesElement3 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement3.Value))
                                                            {
                                                                int idleTimeoutInMinutesInstance3 = int.Parse(idleTimeoutInMinutesElement3.Value, CultureInfo.InvariantCulture);
                                                                inputEndpointInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance3;
                                                            }
                                                            
                                                            XElement loadBalancerDistributionElement = inputEndpointsElement.Element(XName.Get("LoadBalancerDistribution", "http://schemas.microsoft.com/windowsazure"));
                                                            if (loadBalancerDistributionElement != null)
                                                            {
                                                                string loadBalancerDistributionInstance = loadBalancerDistributionElement.Value;
                                                                inputEndpointInstance.LoadBalancerDistribution = loadBalancerDistributionInstance;
                                                            }
                                                            
                                                            XElement virtualIPNameElement = inputEndpointsElement.Element(XName.Get("VirtualIPName", "http://schemas.microsoft.com/windowsazure"));
                                                            if (virtualIPNameElement != null)
                                                            {
                                                                string virtualIPNameInstance = virtualIPNameElement.Value;
                                                                inputEndpointInstance.VirtualIPName = virtualIPNameInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement subnetNamesSequenceElement = configurationSetsElement.Element(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                                    if (subnetNamesSequenceElement != null)
                                                    {
                                                        foreach (XElement subnetNamesElement in subnetNamesSequenceElement.Elements(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            configurationSetInstance.SubnetNames.Add(subnetNamesElement.Value);
                                                        }
                                                    }
                                                    
                                                    XElement staticVirtualNetworkIPAddressElement = configurationSetsElement.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                    if (staticVirtualNetworkIPAddressElement != null)
                                                    {
                                                        string staticVirtualNetworkIPAddressInstance = staticVirtualNetworkIPAddressElement.Value;
                                                        configurationSetInstance.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance;
                                                    }
                                                    
                                                    XElement publicIPsSequenceElement2 = configurationSetsElement.Element(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                                    if (publicIPsSequenceElement2 != null)
                                                    {
                                                        foreach (XElement publicIPsElement2 in publicIPsSequenceElement2.Elements(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            ConfigurationSet.PublicIP publicIPInstance2 = new ConfigurationSet.PublicIP();
                                                            configurationSetInstance.PublicIPs.Add(publicIPInstance2);
                                                            
                                                            XElement nameElement8 = publicIPsElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                            if (nameElement8 != null)
                                                            {
                                                                string nameInstance8 = nameElement8.Value;
                                                                publicIPInstance2.Name = nameInstance8;
                                                            }
                                                            
                                                            XElement idleTimeoutInMinutesElement4 = publicIPsElement2.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                            if (idleTimeoutInMinutesElement4 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement4.Value))
                                                            {
                                                                int idleTimeoutInMinutesInstance4 = int.Parse(idleTimeoutInMinutesElement4.Value, CultureInfo.InvariantCulture);
                                                                publicIPInstance2.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance4;
                                                            }
                                                            
                                                            XElement domainNameLabelElement2 = publicIPsElement2.Element(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                                            if (domainNameLabelElement2 != null)
                                                            {
                                                                string domainNameLabelInstance2 = domainNameLabelElement2.Value;
                                                                publicIPInstance2.DomainNameLabel = domainNameLabelInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement networkInterfacesSequenceElement2 = configurationSetsElement.Element(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                                    if (networkInterfacesSequenceElement2 != null)
                                                    {
                                                        foreach (XElement networkInterfacesElement2 in networkInterfacesSequenceElement2.Elements(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            NetworkInterface networkInterfaceInstance2 = new NetworkInterface();
                                                            configurationSetInstance.NetworkInterfaces.Add(networkInterfaceInstance2);
                                                            
                                                            XElement nameElement9 = networkInterfacesElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                            if (nameElement9 != null)
                                                            {
                                                                string nameInstance9 = nameElement9.Value;
                                                                networkInterfaceInstance2.Name = nameInstance9;
                                                            }
                                                            
                                                            XElement iPConfigurationsSequenceElement2 = networkInterfacesElement2.Element(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                                            if (iPConfigurationsSequenceElement2 != null)
                                                            {
                                                                foreach (XElement iPConfigurationsElement2 in iPConfigurationsSequenceElement2.Elements(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                                                {
                                                                    IPConfiguration iPConfigurationInstance2 = new IPConfiguration();
                                                                    networkInterfaceInstance2.IPConfigurations.Add(iPConfigurationInstance2);
                                                                    
                                                                    XElement subnetNameElement2 = iPConfigurationsElement2.Element(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (subnetNameElement2 != null)
                                                                    {
                                                                        string subnetNameInstance2 = subnetNameElement2.Value;
                                                                        iPConfigurationInstance2.SubnetName = subnetNameInstance2;
                                                                    }
                                                                    
                                                                    XElement staticVirtualNetworkIPAddressElement2 = iPConfigurationsElement2.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (staticVirtualNetworkIPAddressElement2 != null)
                                                                    {
                                                                        string staticVirtualNetworkIPAddressInstance2 = staticVirtualNetworkIPAddressElement2.Value;
                                                                        iPConfigurationInstance2.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance2;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            XElement networkSecurityGroupElement = networkInterfacesElement2.Element(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                                            if (networkSecurityGroupElement != null)
                                                            {
                                                                string networkSecurityGroupInstance = networkSecurityGroupElement.Value;
                                                                networkInterfaceInstance2.NetworkSecurityGroup = networkSecurityGroupInstance;
                                                            }
                                                            
                                                            XElement iPForwardingElement = networkInterfacesElement2.Element(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                                            if (iPForwardingElement != null)
                                                            {
                                                                string iPForwardingInstance = iPForwardingElement.Value;
                                                                networkInterfaceInstance2.IPForwarding = iPForwardingInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement networkSecurityGroupElement2 = configurationSetsElement.Element(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                                    if (networkSecurityGroupElement2 != null)
                                                    {
                                                        string networkSecurityGroupInstance2 = networkSecurityGroupElement2.Value;
                                                        configurationSetInstance.NetworkSecurityGroup = networkSecurityGroupInstance2;
                                                    }
                                                    
                                                    XElement iPForwardingElement2 = configurationSetsElement.Element(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                                    if (iPForwardingElement2 != null)
                                                    {
                                                        string iPForwardingInstance2 = iPForwardingElement2.Value;
                                                        configurationSetInstance.IPForwarding = iPForwardingInstance2;
                                                    }
                                                    
                                                    XElement computerNameElement = configurationSetsElement.Element(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (computerNameElement != null)
                                                    {
                                                        string computerNameInstance = computerNameElement.Value;
                                                        configurationSetInstance.ComputerName = computerNameInstance;
                                                    }
                                                    
                                                    XElement adminPasswordElement = configurationSetsElement.Element(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                                    if (adminPasswordElement != null)
                                                    {
                                                        string adminPasswordInstance = adminPasswordElement.Value;
                                                        configurationSetInstance.AdminPassword = adminPasswordInstance;
                                                    }
                                                    
                                                    XElement resetPasswordOnFirstLogonElement = configurationSetsElement.Element(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                                    if (resetPasswordOnFirstLogonElement != null && !string.IsNullOrEmpty(resetPasswordOnFirstLogonElement.Value))
                                                    {
                                                        bool resetPasswordOnFirstLogonInstance = bool.Parse(resetPasswordOnFirstLogonElement.Value);
                                                        configurationSetInstance.ResetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                                                    }
                                                    
                                                    XElement enableAutomaticUpdatesElement = configurationSetsElement.Element(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                                    if (enableAutomaticUpdatesElement != null && !string.IsNullOrEmpty(enableAutomaticUpdatesElement.Value))
                                                    {
                                                        bool enableAutomaticUpdatesInstance = bool.Parse(enableAutomaticUpdatesElement.Value);
                                                        configurationSetInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                    }
                                                    
                                                    XElement timeZoneElement = configurationSetsElement.Element(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                                    if (timeZoneElement != null)
                                                    {
                                                        string timeZoneInstance = timeZoneElement.Value;
                                                        configurationSetInstance.TimeZone = timeZoneInstance;
                                                    }
                                                    
                                                    XElement domainJoinElement = configurationSetsElement.Element(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                                    if (domainJoinElement != null)
                                                    {
                                                        DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                                        configurationSetInstance.DomainJoin = domainJoinInstance;
                                                        
                                                        XElement credentialsElement = domainJoinElement.Element(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                                        if (credentialsElement != null)
                                                        {
                                                            DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                                            domainJoinInstance.Credentials = credentialsInstance;
                                                            
                                                            XElement domainElement = credentialsElement.Element(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                                            if (domainElement != null)
                                                            {
                                                                string domainInstance = domainElement.Value;
                                                                credentialsInstance.Domain = domainInstance;
                                                            }
                                                            
                                                            XElement usernameElement = credentialsElement.Element(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                                            if (usernameElement != null)
                                                            {
                                                                string usernameInstance = usernameElement.Value;
                                                                credentialsInstance.UserName = usernameInstance;
                                                            }
                                                            
                                                            XElement passwordElement = credentialsElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                                            if (passwordElement != null)
                                                            {
                                                                string passwordInstance = passwordElement.Value;
                                                                credentialsInstance.Password = passwordInstance;
                                                            }
                                                        }
                                                        
                                                        XElement joinDomainElement = domainJoinElement.Element(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                                        if (joinDomainElement != null)
                                                        {
                                                            string joinDomainInstance = joinDomainElement.Value;
                                                            domainJoinInstance.DomainToJoin = joinDomainInstance;
                                                        }
                                                        
                                                        XElement machineObjectOUElement = domainJoinElement.Element(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                                        if (machineObjectOUElement != null)
                                                        {
                                                            string machineObjectOUInstance = machineObjectOUElement.Value;
                                                            domainJoinInstance.LdapMachineObjectOU = machineObjectOUInstance;
                                                        }
                                                        
                                                        XElement provisioningElement = domainJoinElement.Element(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                                        if (provisioningElement != null)
                                                        {
                                                            DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                                            domainJoinInstance.Provisioning = provisioningInstance;
                                                            
                                                            XElement accountDataElement = provisioningElement.Element(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                                            if (accountDataElement != null)
                                                            {
                                                                string accountDataInstance = accountDataElement.Value;
                                                                provisioningInstance.AccountData = accountDataInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement storedCertificateSettingsSequenceElement = configurationSetsElement.Element(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                                    if (storedCertificateSettingsSequenceElement != null)
                                                    {
                                                        foreach (XElement storedCertificateSettingsElement in storedCertificateSettingsSequenceElement.Elements(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                                            configurationSetInstance.StoredCertificateSettings.Add(certificateSettingInstance);
                                                            
                                                            XElement storeLocationElement = storedCertificateSettingsElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                                            if (storeLocationElement != null)
                                                            {
                                                            }
                                                            
                                                            XElement storeNameElement = storedCertificateSettingsElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                                            if (storeNameElement != null)
                                                            {
                                                                string storeNameInstance = storeNameElement.Value;
                                                                certificateSettingInstance.StoreName = storeNameInstance;
                                                            }
                                                            
                                                            XElement thumbprintElement = storedCertificateSettingsElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                            if (thumbprintElement != null)
                                                            {
                                                                string thumbprintInstance = thumbprintElement.Value;
                                                                certificateSettingInstance.Thumbprint = thumbprintInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement winRMElement = configurationSetsElement.Element(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                                    if (winRMElement != null)
                                                    {
                                                        WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                                        configurationSetInstance.WindowsRemoteManagement = winRMInstance;
                                                        
                                                        XElement listenersSequenceElement = winRMElement.Element(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                                        if (listenersSequenceElement != null)
                                                        {
                                                            foreach (XElement listenersElement in listenersSequenceElement.Elements(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                                winRMInstance.Listeners.Add(listenerInstance);
                                                                
                                                                XElement protocolElement4 = listenersElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                                if (protocolElement4 != null)
                                                                {
                                                                    VirtualMachineWindowsRemoteManagementListenerType protocolInstance4 = ((VirtualMachineWindowsRemoteManagementListenerType)Enum.Parse(typeof(VirtualMachineWindowsRemoteManagementListenerType), protocolElement4.Value, true));
                                                                    listenerInstance.ListenerType = protocolInstance4;
                                                                }
                                                                
                                                                XElement certificateThumbprintElement = listenersElement.Element(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                                if (certificateThumbprintElement != null)
                                                                {
                                                                    string certificateThumbprintInstance = certificateThumbprintElement.Value;
                                                                    listenerInstance.CertificateThumbprint = certificateThumbprintInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement adminUsernameElement = configurationSetsElement.Element(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                                    if (adminUsernameElement != null)
                                                    {
                                                        string adminUsernameInstance = adminUsernameElement.Value;
                                                        configurationSetInstance.AdminUserName = adminUsernameInstance;
                                                    }
                                                    
                                                    XElement additionalUnattendContentElement = configurationSetsElement.Element(XName.Get("AdditionalUnattendContent", "http://schemas.microsoft.com/windowsazure"));
                                                    if (additionalUnattendContentElement != null)
                                                    {
                                                        AdditionalUnattendContentSettings additionalUnattendContentInstance = new AdditionalUnattendContentSettings();
                                                        configurationSetInstance.AdditionalUnattendContent = additionalUnattendContentInstance;
                                                        
                                                        XElement passesSequenceElement = additionalUnattendContentElement.Element(XName.Get("Passes", "http://schemas.microsoft.com/windowsazure"));
                                                        if (passesSequenceElement != null)
                                                        {
                                                            foreach (XElement passesElement in passesSequenceElement.Elements(XName.Get("UnattendPass", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                UnattendPassSettings unattendPassInstance = new UnattendPassSettings();
                                                                additionalUnattendContentInstance.UnattendPasses.Add(unattendPassInstance);
                                                                
                                                                XElement passNameElement = passesElement.Element(XName.Get("PassName", "http://schemas.microsoft.com/windowsazure"));
                                                                if (passNameElement != null)
                                                                {
                                                                    string passNameInstance = passNameElement.Value;
                                                                    unattendPassInstance.PassName = passNameInstance;
                                                                }
                                                                
                                                                XElement componentsSequenceElement = passesElement.Element(XName.Get("Components", "http://schemas.microsoft.com/windowsazure"));
                                                                if (componentsSequenceElement != null)
                                                                {
                                                                    foreach (XElement componentsElement in componentsSequenceElement.Elements(XName.Get("UnattendComponent", "http://schemas.microsoft.com/windowsazure")))
                                                                    {
                                                                        UnattendComponent unattendComponentInstance = new UnattendComponent();
                                                                        unattendPassInstance.UnattendComponents.Add(unattendComponentInstance);
                                                                        
                                                                        XElement componentNameElement = componentsElement.Element(XName.Get("ComponentName", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (componentNameElement != null)
                                                                        {
                                                                            string componentNameInstance = componentNameElement.Value;
                                                                            unattendComponentInstance.ComponentName = componentNameInstance;
                                                                        }
                                                                        
                                                                        XElement componentSettingsSequenceElement = componentsElement.Element(XName.Get("ComponentSettings", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (componentSettingsSequenceElement != null)
                                                                        {
                                                                            foreach (XElement componentSettingsElement in componentSettingsSequenceElement.Elements(XName.Get("ComponentSetting", "http://schemas.microsoft.com/windowsazure")))
                                                                            {
                                                                                ComponentSetting componentSettingInstance = new ComponentSetting();
                                                                                unattendComponentInstance.UnattendComponentSettings.Add(componentSettingInstance);
                                                                                
                                                                                XElement settingNameElement = componentSettingsElement.Element(XName.Get("SettingName", "http://schemas.microsoft.com/windowsazure"));
                                                                                if (settingNameElement != null)
                                                                                {
                                                                                    string settingNameInstance = settingNameElement.Value;
                                                                                    componentSettingInstance.SettingName = settingNameInstance;
                                                                                }
                                                                                
                                                                                XElement contentElement = componentSettingsElement.Element(XName.Get("Content", "http://schemas.microsoft.com/windowsazure"));
                                                                                if (contentElement != null)
                                                                                {
                                                                                    string contentInstance = TypeConversion.FromBase64String(contentElement.Value);
                                                                                    componentSettingInstance.Content = contentInstance;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement hostNameElement2 = configurationSetsElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (hostNameElement2 != null)
                                                    {
                                                        string hostNameInstance2 = hostNameElement2.Value;
                                                        configurationSetInstance.HostName = hostNameInstance2;
                                                    }
                                                    
                                                    XElement userNameElement = configurationSetsElement.Element(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (userNameElement != null)
                                                    {
                                                        string userNameInstance = userNameElement.Value;
                                                        configurationSetInstance.UserName = userNameInstance;
                                                    }
                                                    
                                                    XElement userPasswordElement = configurationSetsElement.Element(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                                    if (userPasswordElement != null)
                                                    {
                                                        string userPasswordInstance = userPasswordElement.Value;
                                                        configurationSetInstance.UserPassword = userPasswordInstance;
                                                    }
                                                    
                                                    XElement disableSshPasswordAuthenticationElement = configurationSetsElement.Element(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                                    if (disableSshPasswordAuthenticationElement != null && !string.IsNullOrEmpty(disableSshPasswordAuthenticationElement.Value))
                                                    {
                                                        bool disableSshPasswordAuthenticationInstance = bool.Parse(disableSshPasswordAuthenticationElement.Value);
                                                        configurationSetInstance.DisableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                                                    }
                                                    
                                                    XElement sSHElement = configurationSetsElement.Element(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                                    if (sSHElement != null)
                                                    {
                                                        SshSettings sSHInstance = new SshSettings();
                                                        configurationSetInstance.SshSettings = sSHInstance;
                                                        
                                                        XElement publicKeysSequenceElement = sSHElement.Element(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                                        if (publicKeysSequenceElement != null)
                                                        {
                                                            foreach (XElement publicKeysElement in publicKeysSequenceElement.Elements(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                                sSHInstance.PublicKeys.Add(publicKeyInstance);
                                                                
                                                                XElement fingerprintElement = publicKeysElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                                if (fingerprintElement != null)
                                                                {
                                                                    string fingerprintInstance = fingerprintElement.Value;
                                                                    publicKeyInstance.Fingerprint = fingerprintInstance;
                                                                }
                                                                
                                                                XElement pathElement2 = publicKeysElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                                if (pathElement2 != null)
                                                                {
                                                                    string pathInstance2 = pathElement2.Value;
                                                                    publicKeyInstance.Path = pathInstance2;
                                                                }
                                                            }
                                                        }
                                                        
                                                        XElement keyPairsSequenceElement = sSHElement.Element(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                                        if (keyPairsSequenceElement != null)
                                                        {
                                                            foreach (XElement keyPairsElement in keyPairsSequenceElement.Elements(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                                sSHInstance.KeyPairs.Add(keyPairInstance);
                                                                
                                                                XElement fingerprintElement2 = keyPairsElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                                if (fingerprintElement2 != null)
                                                                {
                                                                    string fingerprintInstance2 = fingerprintElement2.Value;
                                                                    keyPairInstance.Fingerprint = fingerprintInstance2;
                                                                }
                                                                
                                                                XElement pathElement3 = keyPairsElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                                if (pathElement3 != null)
                                                                {
                                                                    string pathInstance3 = pathElement3.Value;
                                                                    keyPairInstance.Path = pathInstance3;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement customDataElement = configurationSetsElement.Element(XName.Get("CustomData", "http://schemas.microsoft.com/windowsazure"));
                                                    if (customDataElement != null)
                                                    {
                                                        string customDataInstance = customDataElement.Value;
                                                        configurationSetInstance.CustomData = customDataInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement resourceExtensionReferencesSequenceElement = roleListElement.Element(XName.Get("ResourceExtensionReferences", "http://schemas.microsoft.com/windowsazure"));
                                            if (resourceExtensionReferencesSequenceElement != null)
                                            {
                                                foreach (XElement resourceExtensionReferencesElement in resourceExtensionReferencesSequenceElement.Elements(XName.Get("ResourceExtensionReference", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    ResourceExtensionReference resourceExtensionReferenceInstance = new ResourceExtensionReference();
                                                    roleInstance.ResourceExtensionReferences.Add(resourceExtensionReferenceInstance);
                                                    
                                                    XElement referenceNameElement = resourceExtensionReferencesElement.Element(XName.Get("ReferenceName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (referenceNameElement != null)
                                                    {
                                                        string referenceNameInstance = referenceNameElement.Value;
                                                        resourceExtensionReferenceInstance.ReferenceName = referenceNameInstance;
                                                    }
                                                    
                                                    XElement publisherElement = resourceExtensionReferencesElement.Element(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                                                    if (publisherElement != null)
                                                    {
                                                        string publisherInstance = publisherElement.Value;
                                                        resourceExtensionReferenceInstance.Publisher = publisherInstance;
                                                    }
                                                    
                                                    XElement nameElement10 = resourceExtensionReferencesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement10 != null)
                                                    {
                                                        string nameInstance10 = nameElement10.Value;
                                                        resourceExtensionReferenceInstance.Name = nameInstance10;
                                                    }
                                                    
                                                    XElement versionElement2 = resourceExtensionReferencesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                                    if (versionElement2 != null)
                                                    {
                                                        string versionInstance2 = versionElement2.Value;
                                                        resourceExtensionReferenceInstance.Version = versionInstance2;
                                                    }
                                                    
                                                    XElement resourceExtensionParameterValuesSequenceElement = resourceExtensionReferencesElement.Element(XName.Get("ResourceExtensionParameterValues", "http://schemas.microsoft.com/windowsazure"));
                                                    if (resourceExtensionParameterValuesSequenceElement != null)
                                                    {
                                                        foreach (XElement resourceExtensionParameterValuesElement in resourceExtensionParameterValuesSequenceElement.Elements(XName.Get("ResourceExtensionParameterValue", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            ResourceExtensionParameterValue resourceExtensionParameterValueInstance = new ResourceExtensionParameterValue();
                                                            resourceExtensionReferenceInstance.ResourceExtensionParameterValues.Add(resourceExtensionParameterValueInstance);
                                                            
                                                            XElement keyElement = resourceExtensionParameterValuesElement.Element(XName.Get("Key", "http://schemas.microsoft.com/windowsazure"));
                                                            if (keyElement != null)
                                                            {
                                                                string keyInstance = keyElement.Value;
                                                                resourceExtensionParameterValueInstance.Key = keyInstance;
                                                            }
                                                            
                                                            XElement valueElement = resourceExtensionParameterValuesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                                                            if (valueElement != null)
                                                            {
                                                                string valueInstance = TypeConversion.FromBase64String(valueElement.Value);
                                                                resourceExtensionParameterValueInstance.Value = valueInstance;
                                                            }
                                                            
                                                            XElement typeElement = resourceExtensionParameterValuesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                                            if (typeElement != null)
                                                            {
                                                                string typeInstance = typeElement.Value;
                                                                resourceExtensionParameterValueInstance.Type = typeInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement stateElement = resourceExtensionReferencesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                                    if (stateElement != null)
                                                    {
                                                        string stateInstance = stateElement.Value;
                                                        resourceExtensionReferenceInstance.State = stateInstance;
                                                    }
                                                    
                                                    XElement forceUpdateElement = resourceExtensionReferencesElement.Element(XName.Get("ForceUpdate", "http://schemas.microsoft.com/windowsazure"));
                                                    if (forceUpdateElement != null && !string.IsNullOrEmpty(forceUpdateElement.Value))
                                                    {
                                                        bool forceUpdateInstance = bool.Parse(forceUpdateElement.Value);
                                                        resourceExtensionReferenceInstance.ForceUpdate = forceUpdateInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement vMImageNameElement = roleListElement.Element(XName.Get("VMImageName", "http://schemas.microsoft.com/windowsazure"));
                                            if (vMImageNameElement != null)
                                            {
                                                string vMImageNameInstance = vMImageNameElement.Value;
                                                roleInstance.VMImageName = vMImageNameInstance;
                                            }
                                            
                                            XElement mediaLocationElement = roleListElement.Element(XName.Get("MediaLocation", "http://schemas.microsoft.com/windowsazure"));
                                            if (mediaLocationElement != null)
                                            {
                                                Uri mediaLocationInstance = TypeConversion.TryParseUri(mediaLocationElement.Value);
                                                roleInstance.MediaLocation = mediaLocationInstance;
                                            }
                                            
                                            XElement availabilitySetNameElement = roleListElement.Element(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                                            if (availabilitySetNameElement != null)
                                            {
                                                string availabilitySetNameInstance = availabilitySetNameElement.Value;
                                                roleInstance.AvailabilitySetName = availabilitySetNameInstance;
                                            }
                                            
                                            XElement dataVirtualHardDisksSequenceElement = roleListElement.Element(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                                            if (dataVirtualHardDisksSequenceElement != null)
                                            {
                                                foreach (XElement dataVirtualHardDisksElement in dataVirtualHardDisksSequenceElement.Elements(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                                    roleInstance.DataVirtualHardDisks.Add(dataVirtualHardDiskInstance);
                                                    
                                                    XElement hostCachingElement = dataVirtualHardDisksElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                                    if (hostCachingElement != null)
                                                    {
                                                        string hostCachingInstance = hostCachingElement.Value;
                                                        dataVirtualHardDiskInstance.HostCaching = hostCachingInstance;
                                                    }
                                                    
                                                    XElement diskLabelElement = dataVirtualHardDisksElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                                    if (diskLabelElement != null)
                                                    {
                                                        string diskLabelInstance = diskLabelElement.Value;
                                                        dataVirtualHardDiskInstance.Label = diskLabelInstance;
                                                    }
                                                    
                                                    XElement diskNameElement = dataVirtualHardDisksElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (diskNameElement != null)
                                                    {
                                                        string diskNameInstance = diskNameElement.Value;
                                                        dataVirtualHardDiskInstance.Name = diskNameInstance;
                                                    }
                                                    
                                                    XElement lunElement = dataVirtualHardDisksElement.Element(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                                    if (lunElement != null && !string.IsNullOrEmpty(lunElement.Value))
                                                    {
                                                        int lunInstance = int.Parse(lunElement.Value, CultureInfo.InvariantCulture);
                                                        dataVirtualHardDiskInstance.LogicalUnitNumber = lunInstance;
                                                    }
                                                    
                                                    XElement logicalDiskSizeInGBElement = dataVirtualHardDisksElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                                    if (logicalDiskSizeInGBElement != null && !string.IsNullOrEmpty(logicalDiskSizeInGBElement.Value))
                                                    {
                                                        int logicalDiskSizeInGBInstance = int.Parse(logicalDiskSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                                        dataVirtualHardDiskInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                                                    }
                                                    
                                                    XElement mediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                                    if (mediaLinkElement != null)
                                                    {
                                                        Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                                        dataVirtualHardDiskInstance.MediaLink = mediaLinkInstance;
                                                    }
                                                    
                                                    XElement sourceMediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("SourceMediaLink", "http://schemas.microsoft.com/windowsazure"));
                                                    if (sourceMediaLinkElement != null)
                                                    {
                                                        Uri sourceMediaLinkInstance = TypeConversion.TryParseUri(sourceMediaLinkElement.Value);
                                                        dataVirtualHardDiskInstance.SourceMediaLink = sourceMediaLinkInstance;
                                                    }
                                                    
                                                    XElement iOTypeElement = dataVirtualHardDisksElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                                    if (iOTypeElement != null)
                                                    {
                                                        string iOTypeInstance = iOTypeElement.Value;
                                                        dataVirtualHardDiskInstance.IOType = iOTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement labelElement2 = roleListElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                            if (labelElement2 != null)
                                            {
                                                string labelInstance2 = labelElement2.Value;
                                                roleInstance.Label = labelInstance2;
                                            }
                                            
                                            XElement oSVirtualHardDiskElement = roleListElement.Element(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                                            if (oSVirtualHardDiskElement != null)
                                            {
                                                OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                                roleInstance.OSVirtualHardDisk = oSVirtualHardDiskInstance;
                                                
                                                XElement hostCachingElement2 = oSVirtualHardDiskElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                                if (hostCachingElement2 != null)
                                                {
                                                    string hostCachingInstance2 = hostCachingElement2.Value;
                                                    oSVirtualHardDiskInstance.HostCaching = hostCachingInstance2;
                                                }
                                                
                                                XElement diskLabelElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                                if (diskLabelElement2 != null)
                                                {
                                                    string diskLabelInstance2 = diskLabelElement2.Value;
                                                    oSVirtualHardDiskInstance.Label = diskLabelInstance2;
                                                }
                                                
                                                XElement diskNameElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                                if (diskNameElement2 != null)
                                                {
                                                    string diskNameInstance2 = diskNameElement2.Value;
                                                    oSVirtualHardDiskInstance.Name = diskNameInstance2;
                                                }
                                                
                                                XElement mediaLinkElement2 = oSVirtualHardDiskElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                                if (mediaLinkElement2 != null)
                                                {
                                                    Uri mediaLinkInstance2 = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                                    oSVirtualHardDiskInstance.MediaLink = mediaLinkInstance2;
                                                }
                                                
                                                XElement sourceImageNameElement = oSVirtualHardDiskElement.Element(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                                                if (sourceImageNameElement != null)
                                                {
                                                    string sourceImageNameInstance = sourceImageNameElement.Value;
                                                    oSVirtualHardDiskInstance.SourceImageName = sourceImageNameInstance;
                                                }
                                                
                                                XElement osElement = oSVirtualHardDiskElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                                if (osElement != null)
                                                {
                                                    string osInstance = osElement.Value;
                                                    oSVirtualHardDiskInstance.OperatingSystem = osInstance;
                                                }
                                                
                                                XElement remoteSourceImageLinkElement = oSVirtualHardDiskElement.Element(XName.Get("RemoteSourceImageLink", "http://schemas.microsoft.com/windowsazure"));
                                                if (remoteSourceImageLinkElement != null)
                                                {
                                                    Uri remoteSourceImageLinkInstance = TypeConversion.TryParseUri(remoteSourceImageLinkElement.Value);
                                                    oSVirtualHardDiskInstance.RemoteSourceImageLink = remoteSourceImageLinkInstance;
                                                }
                                                
                                                XElement iOTypeElement2 = oSVirtualHardDiskElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                                if (iOTypeElement2 != null)
                                                {
                                                    string iOTypeInstance2 = iOTypeElement2.Value;
                                                    oSVirtualHardDiskInstance.IOType = iOTypeInstance2;
                                                }
                                                
                                                XElement resizedSizeInGBElement = oSVirtualHardDiskElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                                if (resizedSizeInGBElement != null && !string.IsNullOrEmpty(resizedSizeInGBElement.Value))
                                                {
                                                    int resizedSizeInGBInstance = int.Parse(resizedSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                                    oSVirtualHardDiskInstance.ResizedSizeInGB = resizedSizeInGBInstance;
                                                }
                                            }
                                            
                                            XElement roleSizeElement = roleListElement.Element(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                                            if (roleSizeElement != null)
                                            {
                                                string roleSizeInstance = roleSizeElement.Value;
                                                roleInstance.RoleSize = roleSizeInstance;
                                            }
                                            
                                            XElement defaultWinRmCertificateThumbprintElement = roleListElement.Element(XName.Get("DefaultWinRmCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                            if (defaultWinRmCertificateThumbprintElement != null)
                                            {
                                                string defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement.Value;
                                                roleInstance.DefaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
                                            }
                                            
                                            XElement provisionGuestAgentElement = roleListElement.Element(XName.Get("ProvisionGuestAgent", "http://schemas.microsoft.com/windowsazure"));
                                            if (provisionGuestAgentElement != null && !string.IsNullOrEmpty(provisionGuestAgentElement.Value))
                                            {
                                                bool provisionGuestAgentInstance = bool.Parse(provisionGuestAgentElement.Value);
                                                roleInstance.ProvisionGuestAgent = provisionGuestAgentInstance;
                                            }
                                            
                                            XElement vMImageInputElement = roleListElement.Element(XName.Get("VMImageInput", "http://schemas.microsoft.com/windowsazure"));
                                            if (vMImageInputElement != null)
                                            {
                                                VMImageInput vMImageInputInstance = new VMImageInput();
                                                roleInstance.VMImageInput = vMImageInputInstance;
                                                
                                                XElement oSDiskConfigurationElement = vMImageInputElement.Element(XName.Get("OSDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                                if (oSDiskConfigurationElement != null)
                                                {
                                                    OSDiskConfiguration oSDiskConfigurationInstance = new OSDiskConfiguration();
                                                    vMImageInputInstance.OSDiskConfiguration = oSDiskConfigurationInstance;
                                                    
                                                    XElement resizedSizeInGBElement2 = oSDiskConfigurationElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                                    if (resizedSizeInGBElement2 != null && !string.IsNullOrEmpty(resizedSizeInGBElement2.Value))
                                                    {
                                                        int resizedSizeInGBInstance2 = int.Parse(resizedSizeInGBElement2.Value, CultureInfo.InvariantCulture);
                                                        oSDiskConfigurationInstance.ResizedSizeInGB = resizedSizeInGBInstance2;
                                                    }
                                                }
                                                
                                                XElement dataDiskConfigurationsSequenceElement = vMImageInputElement.Element(XName.Get("DataDiskConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                                if (dataDiskConfigurationsSequenceElement != null)
                                                {
                                                    foreach (XElement dataDiskConfigurationsElement in dataDiskConfigurationsSequenceElement.Elements(XName.Get("DataDiskConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        DataDiskConfiguration dataDiskConfigurationInstance = new DataDiskConfiguration();
                                                        vMImageInputInstance.DataDiskConfigurations.Add(dataDiskConfigurationInstance);
                                                        
                                                        XElement nameElement11 = dataDiskConfigurationsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                        if (nameElement11 != null)
                                                        {
                                                            string nameInstance11 = nameElement11.Value;
                                                            dataDiskConfigurationInstance.DiskName = nameInstance11;
                                                        }
                                                        
                                                        XElement resizedSizeInGBElement3 = dataDiskConfigurationsElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                                        if (resizedSizeInGBElement3 != null && !string.IsNullOrEmpty(resizedSizeInGBElement3.Value))
                                                        {
                                                            int resizedSizeInGBInstance3 = int.Parse(resizedSizeInGBElement3.Value, CultureInfo.InvariantCulture);
                                                            dataDiskConfigurationInstance.ResizedSizeInGB = resizedSizeInGBInstance3;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement debugSettingsElement = roleListElement.Element(XName.Get("DebugSettings", "http://schemas.microsoft.com/windowsazure"));
                                            if (debugSettingsElement != null)
                                            {
                                                DebugSettings debugSettingsInstance = new DebugSettings();
                                                roleInstance.DebugSettings = debugSettingsInstance;
                                                
                                                XElement bootDiagnosticsEnabledElement = debugSettingsElement.Element(XName.Get("BootDiagnosticsEnabled", "http://schemas.microsoft.com/windowsazure"));
                                                if (bootDiagnosticsEnabledElement != null)
                                                {
                                                    bool bootDiagnosticsEnabledInstance = bool.Parse(bootDiagnosticsEnabledElement.Value);
                                                    debugSettingsInstance.BootDiagnosticsEnabled = bootDiagnosticsEnabledInstance;
                                                }
                                                
                                                XElement consoleScreenshotBlobUriElement = debugSettingsElement.Element(XName.Get("ConsoleScreenshotBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                                if (consoleScreenshotBlobUriElement != null)
                                                {
                                                    Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(consoleScreenshotBlobUriElement.Value);
                                                    debugSettingsInstance.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                                }
                                                
                                                XElement serialOutputBlobUriElement = debugSettingsElement.Element(XName.Get("SerialOutputBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                                if (serialOutputBlobUriElement != null)
                                                {
                                                    Uri serialOutputBlobUriInstance = TypeConversion.TryParseUri(serialOutputBlobUriElement.Value);
                                                    debugSettingsInstance.SerialOutputBlobUri = serialOutputBlobUriInstance;
                                                }
                                            }
                                            
                                            XElement licenseTypeElement = roleListElement.Element(XName.Get("LicenseType", "http://schemas.microsoft.com/windowsazure"));
                                            if (licenseTypeElement != null)
                                            {
                                                string licenseTypeInstance = licenseTypeElement.Value;
                                                roleInstance.LicenseType = licenseTypeInstance;
                                            }
                                            
                                            XElement migrationStateElement = roleListElement.Element(XName.Get("MigrationState", "http://schemas.microsoft.com/windowsazure"));
                                            if (migrationStateElement != null)
                                            {
                                                string migrationStateInstance = migrationStateElement.Value;
                                                roleInstance.MigrationState = migrationStateInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement sdkVersionElement = deploymentsElement.Element(XName.Get("SdkVersion", "http://schemas.microsoft.com/windowsazure"));
                                    if (sdkVersionElement != null)
                                    {
                                        string sdkVersionInstance = sdkVersionElement.Value;
                                        deploymentInstance.SdkVersion = sdkVersionInstance;
                                    }
                                    
                                    XElement lockedElement = deploymentsElement.Element(XName.Get("Locked", "http://schemas.microsoft.com/windowsazure"));
                                    if (lockedElement != null)
                                    {
                                        bool lockedInstance = bool.Parse(lockedElement.Value);
                                        deploymentInstance.Locked = lockedInstance;
                                    }
                                    
                                    XElement rollbackAllowedElement = deploymentsElement.Element(XName.Get("RollbackAllowed", "http://schemas.microsoft.com/windowsazure"));
                                    if (rollbackAllowedElement != null)
                                    {
                                        bool rollbackAllowedInstance = bool.Parse(rollbackAllowedElement.Value);
                                        deploymentInstance.RollbackAllowed = rollbackAllowedInstance;
                                    }
                                    
                                    XElement createdTimeElement = deploymentsElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (createdTimeElement != null)
                                    {
                                        DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        deploymentInstance.CreatedTime = createdTimeInstance;
                                    }
                                    
                                    XElement lastModifiedTimeElement = deploymentsElement.Element(XName.Get("LastModifiedTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (lastModifiedTimeElement != null)
                                    {
                                        string lastModifiedTimeInstance = lastModifiedTimeElement.Value;
                                        deploymentInstance.LastModifiedTime = lastModifiedTimeInstance;
                                    }
                                    
                                    XElement virtualNetworkNameElement = deploymentsElement.Element(XName.Get("VirtualNetworkName", "http://schemas.microsoft.com/windowsazure"));
                                    if (virtualNetworkNameElement != null)
                                    {
                                        string virtualNetworkNameInstance = virtualNetworkNameElement.Value;
                                        deploymentInstance.VirtualNetworkName = virtualNetworkNameInstance;
                                    }
                                    
                                    XElement extendedPropertiesSequenceElement = deploymentsElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                                    if (extendedPropertiesSequenceElement != null)
                                    {
                                        foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                            string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                            deploymentInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                        }
                                    }
                                    
                                    XElement persistentVMDowntimeElement = deploymentsElement.Element(XName.Get("PersistentVMDowntime", "http://schemas.microsoft.com/windowsazure"));
                                    if (persistentVMDowntimeElement != null)
                                    {
                                        PersistentVMDowntime persistentVMDowntimeInstance = new PersistentVMDowntime();
                                        deploymentInstance.PersistentVMDowntime = persistentVMDowntimeInstance;
                                        
                                        XElement startTimeElement = persistentVMDowntimeElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                        if (startTimeElement != null)
                                        {
                                            DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                            persistentVMDowntimeInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        XElement endTimeElement = persistentVMDowntimeElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                        if (endTimeElement != null)
                                        {
                                            DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                            persistentVMDowntimeInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        XElement statusElement6 = persistentVMDowntimeElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                        if (statusElement6 != null)
                                        {
                                            string statusInstance6 = statusElement6.Value;
                                            persistentVMDowntimeInstance.Status = statusInstance6;
                                        }
                                    }
                                    
                                    XElement virtualIPsSequenceElement = deploymentsElement.Element(XName.Get("VirtualIPs", "http://schemas.microsoft.com/windowsazure"));
                                    if (virtualIPsSequenceElement != null)
                                    {
                                        foreach (XElement virtualIPsElement in virtualIPsSequenceElement.Elements(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            VirtualIPAddress virtualIPInstance = new VirtualIPAddress();
                                            deploymentInstance.VirtualIPAddresses.Add(virtualIPInstance);
                                            
                                            XElement addressElement3 = virtualIPsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                            if (addressElement3 != null)
                                            {
                                                string addressInstance3 = addressElement3.Value;
                                                virtualIPInstance.Address = addressInstance3;
                                            }
                                            
                                            XElement isDnsProgrammedElement = virtualIPsElement.Element(XName.Get("IsDnsProgrammed", "http://schemas.microsoft.com/windowsazure"));
                                            if (isDnsProgrammedElement != null && !string.IsNullOrEmpty(isDnsProgrammedElement.Value))
                                            {
                                                bool isDnsProgrammedInstance = bool.Parse(isDnsProgrammedElement.Value);
                                                virtualIPInstance.IsDnsProgrammed = isDnsProgrammedInstance;
                                            }
                                            
                                            XElement nameElement12 = virtualIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement12 != null)
                                            {
                                                string nameInstance12 = nameElement12.Value;
                                                virtualIPInstance.Name = nameInstance12;
                                            }
                                            
                                            XElement reservedIPNameElement = virtualIPsElement.Element(XName.Get("ReservedIPName", "http://schemas.microsoft.com/windowsazure"));
                                            if (reservedIPNameElement != null)
                                            {
                                                string reservedIPNameInstance = reservedIPNameElement.Value;
                                                virtualIPInstance.ReservedIPName = reservedIPNameInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement dnsElement = deploymentsElement.Element(XName.Get("Dns", "http://schemas.microsoft.com/windowsazure"));
                                    if (dnsElement != null)
                                    {
                                        DnsSettings dnsInstance = new DnsSettings();
                                        deploymentInstance.DnsSettings = dnsInstance;
                                        
                                        XElement dnsServersSequenceElement = dnsElement.Element(XName.Get("DnsServers", "http://schemas.microsoft.com/windowsazure"));
                                        if (dnsServersSequenceElement != null)
                                        {
                                            foreach (XElement dnsServersElement in dnsServersSequenceElement.Elements(XName.Get("DnsServer", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                DnsServer dnsServerInstance = new DnsServer();
                                                dnsInstance.DnsServers.Add(dnsServerInstance);
                                                
                                                XElement nameElement13 = dnsServersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement13 != null)
                                                {
                                                    string nameInstance13 = nameElement13.Value;
                                                    dnsServerInstance.Name = nameInstance13;
                                                }
                                                
                                                XElement addressElement4 = dnsServersElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                                if (addressElement4 != null)
                                                {
                                                    string addressInstance4 = addressElement4.Value;
                                                    dnsServerInstance.Address = addressInstance4;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            XElement urlElement2 = hostedServiceElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                            if (urlElement2 != null)
                            {
                                Uri urlInstance2 = TypeConversion.TryParseUri(urlElement2.Value);
                                result.Uri = urlInstance2;
                            }
                            
                            XElement serviceNameElement = hostedServiceElement.Element(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceNameElement != null)
                            {
                                string serviceNameInstance = serviceNameElement.Value;
                                result.ServiceName = serviceNameInstance;
                            }
                            
                            XElement hostedServicePropertiesElement = hostedServiceElement.Element(XName.Get("HostedServiceProperties", "http://schemas.microsoft.com/windowsazure"));
                            if (hostedServicePropertiesElement != null)
                            {
                                HostedServiceProperties hostedServicePropertiesInstance = new HostedServiceProperties();
                                result.Properties = hostedServicePropertiesInstance;
                                
                                XElement descriptionElement2 = hostedServicePropertiesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement2 != null)
                                {
                                    string descriptionInstance2 = descriptionElement2.Value;
                                    hostedServicePropertiesInstance.Description = descriptionInstance2;
                                }
                                
                                XElement affinityGroupElement = hostedServicePropertiesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                                if (affinityGroupElement != null)
                                {
                                    string affinityGroupInstance = affinityGroupElement.Value;
                                    hostedServicePropertiesInstance.AffinityGroup = affinityGroupInstance;
                                }
                                
                                XElement locationElement = hostedServicePropertiesElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                                if (locationElement != null)
                                {
                                    string locationInstance = locationElement.Value;
                                    hostedServicePropertiesInstance.Location = locationInstance;
                                }
                                
                                XElement labelElement3 = hostedServicePropertiesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement3 != null)
                                {
                                    string labelInstance3 = TypeConversion.FromBase64String(labelElement3.Value);
                                    hostedServicePropertiesInstance.Label = labelInstance3;
                                }
                                
                                XElement statusElement7 = hostedServicePropertiesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                if (statusElement7 != null)
                                {
                                    HostedServiceStatus statusInstance7 = ((HostedServiceStatus)Enum.Parse(typeof(HostedServiceStatus), statusElement7.Value, true));
                                    hostedServicePropertiesInstance.Status = statusInstance7;
                                }
                                
                                XElement dateCreatedElement = hostedServicePropertiesElement.Element(XName.Get("DateCreated", "http://schemas.microsoft.com/windowsazure"));
                                if (dateCreatedElement != null)
                                {
                                    DateTime dateCreatedInstance = DateTime.Parse(dateCreatedElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    hostedServicePropertiesInstance.DateCreated = dateCreatedInstance;
                                }
                                
                                XElement dateLastModifiedElement = hostedServicePropertiesElement.Element(XName.Get("DateLastModified", "http://schemas.microsoft.com/windowsazure"));
                                if (dateLastModifiedElement != null)
                                {
                                    DateTime dateLastModifiedInstance = DateTime.Parse(dateLastModifiedElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    hostedServicePropertiesInstance.DateLastModified = dateLastModifiedInstance;
                                }
                                
                                XElement extendedPropertiesSequenceElement2 = hostedServicePropertiesElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                                if (extendedPropertiesSequenceElement2 != null)
                                {
                                    foreach (XElement extendedPropertiesElement2 in extendedPropertiesSequenceElement2.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string extendedPropertiesKey2 = extendedPropertiesElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string extendedPropertiesValue2 = extendedPropertiesElement2.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        hostedServicePropertiesInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                    }
                                }
                                
                                XElement reverseDnsFqdnElement = hostedServicePropertiesElement.Element(XName.Get("ReverseDnsFqdn", "http://schemas.microsoft.com/windowsazure"));
                                if (reverseDnsFqdnElement != null)
                                {
                                    string reverseDnsFqdnInstance = reverseDnsFqdnElement.Value;
                                    hostedServicePropertiesInstance.ReverseDnsFqdn = reverseDnsFqdnInstance;
                                }
                            }
                            
                            XElement computeCapabilitiesElement = hostedServiceElement.Element(XName.Get("ComputeCapabilities", "http://schemas.microsoft.com/windowsazure"));
                            if (computeCapabilitiesElement != null)
                            {
                                ComputeCapabilities computeCapabilitiesInstance = new ComputeCapabilities();
                                result.ComputeCapabilities = computeCapabilitiesInstance;
                                
                                XElement virtualMachinesRoleSizesSequenceElement = computeCapabilitiesElement.Element(XName.Get("VirtualMachinesRoleSizes", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualMachinesRoleSizesSequenceElement != null)
                                {
                                    foreach (XElement virtualMachinesRoleSizesElement in virtualMachinesRoleSizesSequenceElement.Elements(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        computeCapabilitiesInstance.VirtualMachinesRoleSizes.Add(virtualMachinesRoleSizesElement.Value);
                                    }
                                }
                                
                                XElement webWorkerRoleSizesSequenceElement = computeCapabilitiesElement.Element(XName.Get("WebWorkerRoleSizes", "http://schemas.microsoft.com/windowsazure"));
                                if (webWorkerRoleSizesSequenceElement != null)
                                {
                                    foreach (XElement webWorkerRoleSizesElement in webWorkerRoleSizesSequenceElement.Elements(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        computeCapabilitiesInstance.WebWorkerRoleSizes.Add(webWorkerRoleSizesElement.Value);
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Extension operation retrieves information about a specified
        /// extension that was added to a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169557.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='extensionId'>
        /// Required. The identifier that was assigned to the extension when it
        /// was added to the cloud service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Extension operation response.
        /// </returns>
        public async Task<HostedServiceGetExtensionResponse> GetExtensionAsync(string serviceName, string extensionId, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (extensionId == null)
            {
                throw new ArgumentNullException("extensionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("extensionId", extensionId);
                TracingAdapter.Enter(invocationId, this, "GetExtensionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/extensions/";
            url = url + Uri.EscapeDataString(extensionId);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceGetExtensionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HostedServiceGetExtensionResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement extensionElement = responseDoc.Element(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                        if (extensionElement != null)
                        {
                            XElement providerNameSpaceElement = extensionElement.Element(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                            if (providerNameSpaceElement != null)
                            {
                                string providerNameSpaceInstance = providerNameSpaceElement.Value;
                                result.ProviderNamespace = providerNameSpaceInstance;
                            }
                            
                            XElement typeElement = extensionElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null)
                            {
                                string typeInstance = typeElement.Value;
                                result.Type = typeInstance;
                            }
                            
                            XElement idElement = extensionElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.Id = idInstance;
                            }
                            
                            XElement versionElement = extensionElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                            if (versionElement != null)
                            {
                                string versionInstance = versionElement.Value;
                                result.Version = versionInstance;
                            }
                            
                            XElement thumbprintElement = extensionElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                            if (thumbprintElement != null)
                            {
                                string thumbprintInstance = thumbprintElement.Value;
                                result.Thumbprint = thumbprintInstance;
                            }
                            
                            XElement thumbprintAlgorithmElement = extensionElement.Element(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                            if (thumbprintAlgorithmElement != null)
                            {
                                string thumbprintAlgorithmInstance = thumbprintAlgorithmElement.Value;
                                result.ThumbprintAlgorithm = thumbprintAlgorithmInstance;
                            }
                            
                            XElement publicConfigurationElement = extensionElement.Element(XName.Get("PublicConfiguration", "http://schemas.microsoft.com/windowsazure"));
                            if (publicConfigurationElement != null)
                            {
                                string publicConfigurationInstance = TypeConversion.FromBase64String(publicConfigurationElement.Value);
                                result.PublicConfiguration = publicConfigurationInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Hosted Services operation lists the cloud services
        /// available under the current subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460781.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Hosted Service operation response.
        /// </returns>
        public async Task<HostedServiceListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HostedServiceListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement hostedServicesSequenceElement = responseDoc.Element(XName.Get("HostedServices", "http://schemas.microsoft.com/windowsazure"));
                        if (hostedServicesSequenceElement != null)
                        {
                            foreach (XElement hostedServicesElement in hostedServicesSequenceElement.Elements(XName.Get("HostedService", "http://schemas.microsoft.com/windowsazure")))
                            {
                                HostedServiceListResponse.HostedService hostedServiceInstance = new HostedServiceListResponse.HostedService();
                                result.HostedServices.Add(hostedServiceInstance);
                                
                                XElement urlElement = hostedServicesElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                                if (urlElement != null)
                                {
                                    Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                                    hostedServiceInstance.Uri = urlInstance;
                                }
                                
                                XElement serviceNameElement = hostedServicesElement.Element(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                                if (serviceNameElement != null)
                                {
                                    string serviceNameInstance = serviceNameElement.Value;
                                    hostedServiceInstance.ServiceName = serviceNameInstance;
                                }
                                
                                XElement hostedServicePropertiesElement = hostedServicesElement.Element(XName.Get("HostedServiceProperties", "http://schemas.microsoft.com/windowsazure"));
                                if (hostedServicePropertiesElement != null)
                                {
                                    HostedServiceProperties hostedServicePropertiesInstance = new HostedServiceProperties();
                                    hostedServiceInstance.Properties = hostedServicePropertiesInstance;
                                    
                                    XElement descriptionElement = hostedServicePropertiesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                    if (descriptionElement != null)
                                    {
                                        string descriptionInstance = descriptionElement.Value;
                                        hostedServicePropertiesInstance.Description = descriptionInstance;
                                    }
                                    
                                    XElement affinityGroupElement = hostedServicePropertiesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                                    if (affinityGroupElement != null)
                                    {
                                        string affinityGroupInstance = affinityGroupElement.Value;
                                        hostedServicePropertiesInstance.AffinityGroup = affinityGroupInstance;
                                    }
                                    
                                    XElement locationElement = hostedServicePropertiesElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                                    if (locationElement != null)
                                    {
                                        string locationInstance = locationElement.Value;
                                        hostedServicePropertiesInstance.Location = locationInstance;
                                    }
                                    
                                    XElement labelElement = hostedServicePropertiesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                    if (labelElement != null)
                                    {
                                        string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                                        hostedServicePropertiesInstance.Label = labelInstance;
                                    }
                                    
                                    XElement statusElement = hostedServicePropertiesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                    if (statusElement != null)
                                    {
                                        HostedServiceStatus statusInstance = ((HostedServiceStatus)Enum.Parse(typeof(HostedServiceStatus), statusElement.Value, true));
                                        hostedServicePropertiesInstance.Status = statusInstance;
                                    }
                                    
                                    XElement dateCreatedElement = hostedServicePropertiesElement.Element(XName.Get("DateCreated", "http://schemas.microsoft.com/windowsazure"));
                                    if (dateCreatedElement != null)
                                    {
                                        DateTime dateCreatedInstance = DateTime.Parse(dateCreatedElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        hostedServicePropertiesInstance.DateCreated = dateCreatedInstance;
                                    }
                                    
                                    XElement dateLastModifiedElement = hostedServicePropertiesElement.Element(XName.Get("DateLastModified", "http://schemas.microsoft.com/windowsazure"));
                                    if (dateLastModifiedElement != null)
                                    {
                                        DateTime dateLastModifiedInstance = DateTime.Parse(dateLastModifiedElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        hostedServicePropertiesInstance.DateLastModified = dateLastModifiedInstance;
                                    }
                                    
                                    XElement extendedPropertiesSequenceElement = hostedServicePropertiesElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                                    if (extendedPropertiesSequenceElement != null)
                                    {
                                        foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                            string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                            hostedServicePropertiesInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                        }
                                    }
                                    
                                    XElement reverseDnsFqdnElement = hostedServicePropertiesElement.Element(XName.Get("ReverseDnsFqdn", "http://schemas.microsoft.com/windowsazure"));
                                    if (reverseDnsFqdnElement != null)
                                    {
                                        string reverseDnsFqdnInstance = reverseDnsFqdnElement.Value;
                                        hostedServicePropertiesInstance.ReverseDnsFqdn = reverseDnsFqdnInstance;
                                    }
                                }
                                
                                XElement computeCapabilitiesElement = hostedServicesElement.Element(XName.Get("ComputeCapabilities", "http://schemas.microsoft.com/windowsazure"));
                                if (computeCapabilitiesElement != null)
                                {
                                    ComputeCapabilities computeCapabilitiesInstance = new ComputeCapabilities();
                                    hostedServiceInstance.ComputeCapabilities = computeCapabilitiesInstance;
                                    
                                    XElement virtualMachinesRoleSizesSequenceElement = computeCapabilitiesElement.Element(XName.Get("VirtualMachinesRoleSizes", "http://schemas.microsoft.com/windowsazure"));
                                    if (virtualMachinesRoleSizesSequenceElement != null)
                                    {
                                        foreach (XElement virtualMachinesRoleSizesElement in virtualMachinesRoleSizesSequenceElement.Elements(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            computeCapabilitiesInstance.VirtualMachinesRoleSizes.Add(virtualMachinesRoleSizesElement.Value);
                                        }
                                    }
                                    
                                    XElement webWorkerRoleSizesSequenceElement = computeCapabilitiesElement.Element(XName.Get("WebWorkerRoleSizes", "http://schemas.microsoft.com/windowsazure"));
                                    if (webWorkerRoleSizesSequenceElement != null)
                                    {
                                        foreach (XElement webWorkerRoleSizesElement in webWorkerRoleSizesSequenceElement.Elements(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            computeCapabilitiesInstance.WebWorkerRoleSizes.Add(webWorkerRoleSizesElement.Value);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Available Extensions operation lists the extensions that
        /// are available to add to your cloud service. In Windows Azure, a
        /// process can run as an extension of a cloud service. For example,
        /// Remote Desktop Access or the Azure Diagnostics Agent can run as
        /// extensions to the cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Available Extensions operation response.
        /// </returns>
        public async Task<HostedServiceListAvailableExtensionsResponse> ListAvailableExtensionsAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAvailableExtensionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/extensions";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceListAvailableExtensionsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HostedServiceListAvailableExtensionsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement extensionImagesSequenceElement = responseDoc.Element(XName.Get("ExtensionImages", "http://schemas.microsoft.com/windowsazure"));
                        if (extensionImagesSequenceElement != null)
                        {
                            foreach (XElement extensionImagesElement in extensionImagesSequenceElement.Elements(XName.Get("ExtensionImage", "http://schemas.microsoft.com/windowsazure")))
                            {
                                ExtensionImage extensionImageInstance = new ExtensionImage();
                                result.ExtensionImages.Add(extensionImageInstance);
                                
                                XElement providerNameSpaceElement = extensionImagesElement.Element(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                                if (providerNameSpaceElement != null)
                                {
                                    string providerNameSpaceInstance = providerNameSpaceElement.Value;
                                    extensionImageInstance.ProviderNameSpace = providerNameSpaceInstance;
                                }
                                
                                XElement typeElement = extensionImagesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement != null)
                                {
                                    string typeInstance = typeElement.Value;
                                    extensionImageInstance.Type = typeInstance;
                                }
                                
                                XElement versionElement = extensionImagesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                if (versionElement != null)
                                {
                                    string versionInstance = versionElement.Value;
                                    extensionImageInstance.Version = versionInstance;
                                }
                                
                                XElement labelElement = extensionImagesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement != null)
                                {
                                    string labelInstance = labelElement.Value;
                                    extensionImageInstance.Label = labelInstance;
                                }
                                
                                XElement hostingResourcesElement = extensionImagesElement.Element(XName.Get("HostingResources", "http://schemas.microsoft.com/windowsazure"));
                                if (hostingResourcesElement != null)
                                {
                                    string hostingResourcesInstance = hostingResourcesElement.Value;
                                    extensionImageInstance.HostingResources = hostingResourcesInstance;
                                }
                                
                                XElement mediaLinkElement = extensionImagesElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                if (mediaLinkElement != null)
                                {
                                    Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                    extensionImageInstance.MediaLink = mediaLinkInstance;
                                }
                                
                                XElement certificateElement = extensionImagesElement.Element(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure"));
                                if (certificateElement != null)
                                {
                                    ExtensionCertificateConfiguration certificateInstance = new ExtensionCertificateConfiguration();
                                    extensionImageInstance.Certificate = certificateInstance;
                                    
                                    XElement storeLocationElement = certificateElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                    if (storeLocationElement != null)
                                    {
                                        string storeLocationInstance = storeLocationElement.Value;
                                        certificateInstance.StoreLocation = storeLocationInstance;
                                    }
                                    
                                    XElement storeNameElement = certificateElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                    if (storeNameElement != null)
                                    {
                                        string storeNameInstance = storeNameElement.Value;
                                        certificateInstance.StoreName = storeNameInstance;
                                    }
                                    
                                    XElement thumbprintRequiredElement = certificateElement.Element(XName.Get("ThumbprintRequired", "http://schemas.microsoft.com/windowsazure"));
                                    if (thumbprintRequiredElement != null && !string.IsNullOrEmpty(thumbprintRequiredElement.Value))
                                    {
                                        bool thumbprintRequiredInstance = bool.Parse(thumbprintRequiredElement.Value);
                                        certificateInstance.ThumbprintRequired = thumbprintRequiredInstance;
                                    }
                                    
                                    XElement thumbprintAlgorithmElement = certificateElement.Element(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                                    if (thumbprintAlgorithmElement != null)
                                    {
                                        string thumbprintAlgorithmInstance = thumbprintAlgorithmElement.Value;
                                        certificateInstance.ThumbprintAlgorithm = thumbprintAlgorithmInstance;
                                    }
                                }
                                
                                XElement endpointsElement = extensionImagesElement.Element(XName.Get("Endpoints", "http://schemas.microsoft.com/windowsazure"));
                                if (endpointsElement != null)
                                {
                                    ExtensionEndpointConfiguration endpointsInstance = new ExtensionEndpointConfiguration();
                                    extensionImageInstance.ExtensionEndpoints = endpointsInstance;
                                    
                                    XElement inputEndpointsSequenceElement = endpointsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (inputEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionEndpointConfiguration.InputEndpoint inputEndpointInstance = new ExtensionEndpointConfiguration.InputEndpoint();
                                            endpointsInstance.InputEndpoints.Add(inputEndpointInstance);
                                            
                                            XElement nameElement = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement != null)
                                            {
                                                string nameInstance = nameElement.Value;
                                                inputEndpointInstance.Name = nameInstance;
                                            }
                                            
                                            XElement protocolElement = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement != null)
                                            {
                                                string protocolInstance = protocolElement.Value;
                                                inputEndpointInstance.Protocol = protocolInstance;
                                            }
                                            
                                            XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            if (portElement != null)
                                            {
                                                int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                inputEndpointInstance.Port = portInstance;
                                            }
                                            
                                            XElement localPortElement = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (localPortElement != null)
                                            {
                                                string localPortInstance = localPortElement.Value;
                                                inputEndpointInstance.LocalPort = localPortInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement internalEndpointsSequenceElement = endpointsElement.Element(XName.Get("InternalEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (internalEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement internalEndpointsElement in internalEndpointsSequenceElement.Elements(XName.Get("InternalEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionEndpointConfiguration.InternalEndpoint internalEndpointInstance = new ExtensionEndpointConfiguration.InternalEndpoint();
                                            endpointsInstance.InternalEndpoints.Add(internalEndpointInstance);
                                            
                                            XElement nameElement2 = internalEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement2 != null)
                                            {
                                                string nameInstance2 = nameElement2.Value;
                                                internalEndpointInstance.Name = nameInstance2;
                                            }
                                            
                                            XElement protocolElement2 = internalEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement2 != null)
                                            {
                                                string protocolInstance2 = protocolElement2.Value;
                                                internalEndpointInstance.Protocol = protocolInstance2;
                                            }
                                            
                                            XElement portElement2 = internalEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            if (portElement2 != null)
                                            {
                                                int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                internalEndpointInstance.Port = portInstance2;
                                            }
                                        }
                                    }
                                    
                                    XElement instanceInputEndpointsSequenceElement = endpointsElement.Element(XName.Get("InstanceInputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceInputEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement instanceInputEndpointsElement in instanceInputEndpointsSequenceElement.Elements(XName.Get("InstanceInputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionEndpointConfiguration.InstanceInputEndpoint instanceInputEndpointInstance = new ExtensionEndpointConfiguration.InstanceInputEndpoint();
                                            endpointsInstance.InstanceInputEndpoints.Add(instanceInputEndpointInstance);
                                            
                                            XElement nameElement3 = instanceInputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement3 != null)
                                            {
                                                string nameInstance3 = nameElement3.Value;
                                                instanceInputEndpointInstance.Name = nameInstance3;
                                            }
                                            
                                            XElement protocolElement3 = instanceInputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement3 != null)
                                            {
                                                string protocolInstance3 = protocolElement3.Value;
                                                instanceInputEndpointInstance.Protocol = protocolInstance3;
                                            }
                                            
                                            XElement localPortElement2 = instanceInputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (localPortElement2 != null)
                                            {
                                                string localPortInstance2 = localPortElement2.Value;
                                                instanceInputEndpointInstance.LocalPort = localPortInstance2;
                                            }
                                            
                                            XElement fixedPortMinElement = instanceInputEndpointsElement.Element(XName.Get("FixedPortMin", "http://schemas.microsoft.com/windowsazure"));
                                            if (fixedPortMinElement != null)
                                            {
                                                int fixedPortMinInstance = int.Parse(fixedPortMinElement.Value, CultureInfo.InvariantCulture);
                                                instanceInputEndpointInstance.FixedPortMin = fixedPortMinInstance;
                                            }
                                            
                                            XElement fixedPortMaxElement = instanceInputEndpointsElement.Element(XName.Get("FixedPortMax", "http://schemas.microsoft.com/windowsazure"));
                                            if (fixedPortMaxElement != null)
                                            {
                                                int fixedPortMaxInstance = int.Parse(fixedPortMaxElement.Value, CultureInfo.InvariantCulture);
                                                instanceInputEndpointInstance.FixedPortMax = fixedPortMaxInstance;
                                            }
                                        }
                                    }
                                }
                                
                                XElement publicConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PublicConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                                if (publicConfigurationSchemaElement != null)
                                {
                                    string publicConfigurationSchemaInstance = TypeConversion.FromBase64String(publicConfigurationSchemaElement.Value);
                                    extensionImageInstance.PublicConfigurationSchema = publicConfigurationSchemaInstance;
                                }
                                
                                XElement privateConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PrivateConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                                if (privateConfigurationSchemaElement != null)
                                {
                                    string privateConfigurationSchemaInstance = TypeConversion.FromBase64String(privateConfigurationSchemaElement.Value);
                                    extensionImageInstance.PrivateConfigurationSchema = privateConfigurationSchemaInstance;
                                }
                                
                                XElement descriptionElement = extensionImagesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    extensionImageInstance.Description = descriptionInstance;
                                }
                                
                                XElement publisherNameElement = extensionImagesElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                                if (publisherNameElement != null)
                                {
                                    string publisherNameInstance = publisherNameElement.Value;
                                    extensionImageInstance.PublisherName = publisherNameInstance;
                                }
                                
                                XElement publishedDateElement = extensionImagesElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                                if (publishedDateElement != null && !string.IsNullOrEmpty(publishedDateElement.Value))
                                {
                                    DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    extensionImageInstance.PublishedDate = publishedDateInstance;
                                }
                                
                                XElement localResourcesSequenceElement = extensionImagesElement.Element(XName.Get("LocalResources", "http://schemas.microsoft.com/windowsazure"));
                                if (localResourcesSequenceElement != null)
                                {
                                    foreach (XElement localResourcesElement in localResourcesSequenceElement.Elements(XName.Get("LocalResource", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ExtensionLocalResourceConfiguration localResourceInstance = new ExtensionLocalResourceConfiguration();
                                        extensionImageInstance.LocalResources.Add(localResourceInstance);
                                        
                                        XElement nameElement4 = localResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement4 != null)
                                        {
                                            string nameInstance4 = nameElement4.Value;
                                            localResourceInstance.Name = nameInstance4;
                                        }
                                        
                                        XElement sizeInMBElement = localResourcesElement.Element(XName.Get("SizeInMB", "http://schemas.microsoft.com/windowsazure"));
                                        if (sizeInMBElement != null && !string.IsNullOrEmpty(sizeInMBElement.Value))
                                        {
                                            int sizeInMBInstance = int.Parse(sizeInMBElement.Value, CultureInfo.InvariantCulture);
                                            localResourceInstance.SizeInMB = sizeInMBInstance;
                                        }
                                    }
                                }
                                
                                XElement blockRoleUponFailureElement = extensionImagesElement.Element(XName.Get("BlockRoleUponFailure", "http://schemas.microsoft.com/windowsazure"));
                                if (blockRoleUponFailureElement != null && !string.IsNullOrEmpty(blockRoleUponFailureElement.Value))
                                {
                                    bool blockRoleUponFailureInstance = bool.Parse(blockRoleUponFailureElement.Value);
                                    extensionImageInstance.BlockRoleUponFailure = blockRoleUponFailureInstance;
                                }
                                
                                XElement isInternalExtensionElement = extensionImagesElement.Element(XName.Get("IsInternalExtension", "http://schemas.microsoft.com/windowsazure"));
                                if (isInternalExtensionElement != null && !string.IsNullOrEmpty(isInternalExtensionElement.Value))
                                {
                                    bool isInternalExtensionInstance = bool.Parse(isInternalExtensionElement.Value);
                                    extensionImageInstance.IsInternalExtension = isInternalExtensionInstance;
                                }
                                
                                XElement sampleConfigElement = extensionImagesElement.Element(XName.Get("SampleConfig", "http://schemas.microsoft.com/windowsazure"));
                                if (sampleConfigElement != null)
                                {
                                    string sampleConfigInstance = TypeConversion.FromBase64String(sampleConfigElement.Value);
                                    extensionImageInstance.SampleConfig = sampleConfigInstance;
                                }
                                
                                XElement replicationCompletedElement = extensionImagesElement.Element(XName.Get("ReplicationCompleted", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationCompletedElement != null && !string.IsNullOrEmpty(replicationCompletedElement.Value))
                                {
                                    bool replicationCompletedInstance = bool.Parse(replicationCompletedElement.Value);
                                    extensionImageInstance.ReplicationCompleted = replicationCompletedInstance;
                                }
                                
                                XElement eulaElement = extensionImagesElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                                if (eulaElement != null)
                                {
                                    Uri eulaInstance = TypeConversion.TryParseUri(eulaElement.Value);
                                    extensionImageInstance.Eula = eulaInstance;
                                }
                                
                                XElement privacyUriElement = extensionImagesElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                                if (privacyUriElement != null)
                                {
                                    Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                                    extensionImageInstance.PrivacyUri = privacyUriInstance;
                                }
                                
                                XElement homepageUriElement = extensionImagesElement.Element(XName.Get("HomepageUri", "http://schemas.microsoft.com/windowsazure"));
                                if (homepageUriElement != null)
                                {
                                    Uri homepageUriInstance = TypeConversion.TryParseUri(homepageUriElement.Value);
                                    extensionImageInstance.HomepageUri = homepageUriInstance;
                                }
                                
                                XElement isJsonExtensionElement = extensionImagesElement.Element(XName.Get("IsJsonExtension", "http://schemas.microsoft.com/windowsazure"));
                                if (isJsonExtensionElement != null && !string.IsNullOrEmpty(isJsonExtensionElement.Value))
                                {
                                    bool isJsonExtensionInstance = bool.Parse(isJsonExtensionElement.Value);
                                    extensionImageInstance.IsJsonExtension = isJsonExtensionInstance;
                                }
                                
                                XElement disallowMajorVersionUpgradeElement = extensionImagesElement.Element(XName.Get("DisallowMajorVersionUpgrade", "http://schemas.microsoft.com/windowsazure"));
                                if (disallowMajorVersionUpgradeElement != null && !string.IsNullOrEmpty(disallowMajorVersionUpgradeElement.Value))
                                {
                                    bool disallowMajorVersionUpgradeInstance = bool.Parse(disallowMajorVersionUpgradeElement.Value);
                                    extensionImageInstance.DisallowMajorVersionUpgrade = disallowMajorVersionUpgradeInstance;
                                }
                                
                                XElement supportedOSElement = extensionImagesElement.Element(XName.Get("SupportedOS", "http://schemas.microsoft.com/windowsazure"));
                                if (supportedOSElement != null)
                                {
                                    string supportedOSInstance = supportedOSElement.Value;
                                    extensionImageInstance.SupportedOS = supportedOSInstance;
                                }
                                
                                XElement companyNameElement = extensionImagesElement.Element(XName.Get("CompanyName", "http://schemas.microsoft.com/windowsazure"));
                                if (companyNameElement != null)
                                {
                                    string companyNameInstance = companyNameElement.Value;
                                    extensionImageInstance.CompanyName = companyNameInstance;
                                }
                                
                                XElement regionsElement = extensionImagesElement.Element(XName.Get("Regions", "http://schemas.microsoft.com/windowsazure"));
                                if (regionsElement != null)
                                {
                                    string regionsInstance = regionsElement.Value;
                                    extensionImageInstance.Regions = regionsInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Extensions operation lists all of the extensions that were
        /// added to a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169561.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Extensions operation response.
        /// </returns>
        public async Task<HostedServiceListExtensionsResponse> ListExtensionsAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                TracingAdapter.Enter(invocationId, this, "ListExtensionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/extensions";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceListExtensionsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HostedServiceListExtensionsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement extensionsSequenceElement = responseDoc.Element(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                        if (extensionsSequenceElement != null)
                        {
                            foreach (XElement extensionsElement in extensionsSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                            {
                                HostedServiceListExtensionsResponse.Extension extensionInstance = new HostedServiceListExtensionsResponse.Extension();
                                result.Extensions.Add(extensionInstance);
                                
                                XElement providerNameSpaceElement = extensionsElement.Element(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                                if (providerNameSpaceElement != null)
                                {
                                    string providerNameSpaceInstance = providerNameSpaceElement.Value;
                                    extensionInstance.ProviderNamespace = providerNameSpaceInstance;
                                }
                                
                                XElement typeElement = extensionsElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement != null)
                                {
                                    string typeInstance = typeElement.Value;
                                    extensionInstance.Type = typeInstance;
                                }
                                
                                XElement idElement = extensionsElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                if (idElement != null)
                                {
                                    string idInstance = idElement.Value;
                                    extensionInstance.Id = idInstance;
                                }
                                
                                XElement versionElement = extensionsElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                if (versionElement != null)
                                {
                                    string versionInstance = versionElement.Value;
                                    extensionInstance.Version = versionInstance;
                                }
                                
                                XElement thumbprintElement = extensionsElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement != null)
                                {
                                    string thumbprintInstance = thumbprintElement.Value;
                                    extensionInstance.Thumbprint = thumbprintInstance;
                                }
                                
                                XElement thumbprintAlgorithmElement = extensionsElement.Element(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintAlgorithmElement != null)
                                {
                                    string thumbprintAlgorithmInstance = thumbprintAlgorithmElement.Value;
                                    extensionInstance.ThumbprintAlgorithm = thumbprintAlgorithmInstance;
                                }
                                
                                XElement publicConfigurationElement = extensionsElement.Element(XName.Get("PublicConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                if (publicConfigurationElement != null)
                                {
                                    string publicConfigurationInstance = TypeConversion.FromBase64String(publicConfigurationElement.Value);
                                    extensionInstance.PublicConfiguration = publicConfigurationInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Extension Versions operation lists the versions of an
        /// extension that are available to add to a cloud service. In Azure,
        /// a process can run as an extension of a cloud service. For example,
        /// Remote Desktop Access or the Azure Diagnostics Agent can run as
        /// extensions to the cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn495437.aspx
        /// for more information)
        /// </summary>
        /// <param name='providerNamespace'>
        /// Required. The provider namespace.
        /// </param>
        /// <param name='extensionType'>
        /// Required. The extension type name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Available Extensions operation response.
        /// </returns>
        public async Task<HostedServiceListAvailableExtensionsResponse> ListExtensionVersionsAsync(string providerNamespace, string extensionType, CancellationToken cancellationToken)
        {
            // Validate
            if (providerNamespace == null)
            {
                throw new ArgumentNullException("providerNamespace");
            }
            if (extensionType == null)
            {
                throw new ArgumentNullException("extensionType");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("providerNamespace", providerNamespace);
                tracingParameters.Add("extensionType", extensionType);
                TracingAdapter.Enter(invocationId, this, "ListExtensionVersionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/extensions/";
            url = url + Uri.EscapeDataString(providerNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(extensionType);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceListAvailableExtensionsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HostedServiceListAvailableExtensionsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement extensionImagesSequenceElement = responseDoc.Element(XName.Get("ExtensionImages", "http://schemas.microsoft.com/windowsazure"));
                        if (extensionImagesSequenceElement != null)
                        {
                            foreach (XElement extensionImagesElement in extensionImagesSequenceElement.Elements(XName.Get("ExtensionImage", "http://schemas.microsoft.com/windowsazure")))
                            {
                                ExtensionImage extensionImageInstance = new ExtensionImage();
                                result.ExtensionImages.Add(extensionImageInstance);
                                
                                XElement providerNameSpaceElement = extensionImagesElement.Element(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                                if (providerNameSpaceElement != null)
                                {
                                    string providerNameSpaceInstance = providerNameSpaceElement.Value;
                                    extensionImageInstance.ProviderNameSpace = providerNameSpaceInstance;
                                }
                                
                                XElement typeElement = extensionImagesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement != null)
                                {
                                    string typeInstance = typeElement.Value;
                                    extensionImageInstance.Type = typeInstance;
                                }
                                
                                XElement versionElement = extensionImagesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                if (versionElement != null)
                                {
                                    string versionInstance = versionElement.Value;
                                    extensionImageInstance.Version = versionInstance;
                                }
                                
                                XElement labelElement = extensionImagesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement != null)
                                {
                                    string labelInstance = labelElement.Value;
                                    extensionImageInstance.Label = labelInstance;
                                }
                                
                                XElement hostingResourcesElement = extensionImagesElement.Element(XName.Get("HostingResources", "http://schemas.microsoft.com/windowsazure"));
                                if (hostingResourcesElement != null)
                                {
                                    string hostingResourcesInstance = hostingResourcesElement.Value;
                                    extensionImageInstance.HostingResources = hostingResourcesInstance;
                                }
                                
                                XElement mediaLinkElement = extensionImagesElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                if (mediaLinkElement != null)
                                {
                                    Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                    extensionImageInstance.MediaLink = mediaLinkInstance;
                                }
                                
                                XElement certificateElement = extensionImagesElement.Element(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure"));
                                if (certificateElement != null)
                                {
                                    ExtensionCertificateConfiguration certificateInstance = new ExtensionCertificateConfiguration();
                                    extensionImageInstance.Certificate = certificateInstance;
                                    
                                    XElement storeLocationElement = certificateElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                    if (storeLocationElement != null)
                                    {
                                        string storeLocationInstance = storeLocationElement.Value;
                                        certificateInstance.StoreLocation = storeLocationInstance;
                                    }
                                    
                                    XElement storeNameElement = certificateElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                    if (storeNameElement != null)
                                    {
                                        string storeNameInstance = storeNameElement.Value;
                                        certificateInstance.StoreName = storeNameInstance;
                                    }
                                    
                                    XElement thumbprintRequiredElement = certificateElement.Element(XName.Get("ThumbprintRequired", "http://schemas.microsoft.com/windowsazure"));
                                    if (thumbprintRequiredElement != null && !string.IsNullOrEmpty(thumbprintRequiredElement.Value))
                                    {
                                        bool thumbprintRequiredInstance = bool.Parse(thumbprintRequiredElement.Value);
                                        certificateInstance.ThumbprintRequired = thumbprintRequiredInstance;
                                    }
                                    
                                    XElement thumbprintAlgorithmElement = certificateElement.Element(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                                    if (thumbprintAlgorithmElement != null)
                                    {
                                        string thumbprintAlgorithmInstance = thumbprintAlgorithmElement.Value;
                                        certificateInstance.ThumbprintAlgorithm = thumbprintAlgorithmInstance;
                                    }
                                }
                                
                                XElement endpointsElement = extensionImagesElement.Element(XName.Get("Endpoints", "http://schemas.microsoft.com/windowsazure"));
                                if (endpointsElement != null)
                                {
                                    ExtensionEndpointConfiguration endpointsInstance = new ExtensionEndpointConfiguration();
                                    extensionImageInstance.ExtensionEndpoints = endpointsInstance;
                                    
                                    XElement inputEndpointsSequenceElement = endpointsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (inputEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionEndpointConfiguration.InputEndpoint inputEndpointInstance = new ExtensionEndpointConfiguration.InputEndpoint();
                                            endpointsInstance.InputEndpoints.Add(inputEndpointInstance);
                                            
                                            XElement nameElement = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement != null)
                                            {
                                                string nameInstance = nameElement.Value;
                                                inputEndpointInstance.Name = nameInstance;
                                            }
                                            
                                            XElement protocolElement = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement != null)
                                            {
                                                string protocolInstance = protocolElement.Value;
                                                inputEndpointInstance.Protocol = protocolInstance;
                                            }
                                            
                                            XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            if (portElement != null)
                                            {
                                                int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                inputEndpointInstance.Port = portInstance;
                                            }
                                            
                                            XElement localPortElement = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (localPortElement != null)
                                            {
                                                string localPortInstance = localPortElement.Value;
                                                inputEndpointInstance.LocalPort = localPortInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement internalEndpointsSequenceElement = endpointsElement.Element(XName.Get("InternalEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (internalEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement internalEndpointsElement in internalEndpointsSequenceElement.Elements(XName.Get("InternalEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionEndpointConfiguration.InternalEndpoint internalEndpointInstance = new ExtensionEndpointConfiguration.InternalEndpoint();
                                            endpointsInstance.InternalEndpoints.Add(internalEndpointInstance);
                                            
                                            XElement nameElement2 = internalEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement2 != null)
                                            {
                                                string nameInstance2 = nameElement2.Value;
                                                internalEndpointInstance.Name = nameInstance2;
                                            }
                                            
                                            XElement protocolElement2 = internalEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement2 != null)
                                            {
                                                string protocolInstance2 = protocolElement2.Value;
                                                internalEndpointInstance.Protocol = protocolInstance2;
                                            }
                                            
                                            XElement portElement2 = internalEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            if (portElement2 != null)
                                            {
                                                int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                internalEndpointInstance.Port = portInstance2;
                                            }
                                        }
                                    }
                                    
                                    XElement instanceInputEndpointsSequenceElement = endpointsElement.Element(XName.Get("InstanceInputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceInputEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement instanceInputEndpointsElement in instanceInputEndpointsSequenceElement.Elements(XName.Get("InstanceInputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionEndpointConfiguration.InstanceInputEndpoint instanceInputEndpointInstance = new ExtensionEndpointConfiguration.InstanceInputEndpoint();
                                            endpointsInstance.InstanceInputEndpoints.Add(instanceInputEndpointInstance);
                                            
                                            XElement nameElement3 = instanceInputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement3 != null)
                                            {
                                                string nameInstance3 = nameElement3.Value;
                                                instanceInputEndpointInstance.Name = nameInstance3;
                                            }
                                            
                                            XElement protocolElement3 = instanceInputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement3 != null)
                                            {
                                                string protocolInstance3 = protocolElement3.Value;
                                                instanceInputEndpointInstance.Protocol = protocolInstance3;
                                            }
                                            
                                            XElement localPortElement2 = instanceInputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (localPortElement2 != null)
                                            {
                                                string localPortInstance2 = localPortElement2.Value;
                                                instanceInputEndpointInstance.LocalPort = localPortInstance2;
                                            }
                                            
                                            XElement fixedPortMinElement = instanceInputEndpointsElement.Element(XName.Get("FixedPortMin", "http://schemas.microsoft.com/windowsazure"));
                                            if (fixedPortMinElement != null)
                                            {
                                                int fixedPortMinInstance = int.Parse(fixedPortMinElement.Value, CultureInfo.InvariantCulture);
                                                instanceInputEndpointInstance.FixedPortMin = fixedPortMinInstance;
                                            }
                                            
                                            XElement fixedPortMaxElement = instanceInputEndpointsElement.Element(XName.Get("FixedPortMax", "http://schemas.microsoft.com/windowsazure"));
                                            if (fixedPortMaxElement != null)
                                            {
                                                int fixedPortMaxInstance = int.Parse(fixedPortMaxElement.Value, CultureInfo.InvariantCulture);
                                                instanceInputEndpointInstance.FixedPortMax = fixedPortMaxInstance;
                                            }
                                        }
                                    }
                                }
                                
                                XElement publicConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PublicConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                                if (publicConfigurationSchemaElement != null)
                                {
                                    string publicConfigurationSchemaInstance = TypeConversion.FromBase64String(publicConfigurationSchemaElement.Value);
                                    extensionImageInstance.PublicConfigurationSchema = publicConfigurationSchemaInstance;
                                }
                                
                                XElement privateConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PrivateConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                                if (privateConfigurationSchemaElement != null)
                                {
                                    string privateConfigurationSchemaInstance = TypeConversion.FromBase64String(privateConfigurationSchemaElement.Value);
                                    extensionImageInstance.PrivateConfigurationSchema = privateConfigurationSchemaInstance;
                                }
                                
                                XElement descriptionElement = extensionImagesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    extensionImageInstance.Description = descriptionInstance;
                                }
                                
                                XElement publisherNameElement = extensionImagesElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                                if (publisherNameElement != null)
                                {
                                    string publisherNameInstance = publisherNameElement.Value;
                                    extensionImageInstance.PublisherName = publisherNameInstance;
                                }
                                
                                XElement publishedDateElement = extensionImagesElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                                if (publishedDateElement != null && !string.IsNullOrEmpty(publishedDateElement.Value))
                                {
                                    DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    extensionImageInstance.PublishedDate = publishedDateInstance;
                                }
                                
                                XElement localResourcesSequenceElement = extensionImagesElement.Element(XName.Get("LocalResources", "http://schemas.microsoft.com/windowsazure"));
                                if (localResourcesSequenceElement != null)
                                {
                                    foreach (XElement localResourcesElement in localResourcesSequenceElement.Elements(XName.Get("LocalResource", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ExtensionLocalResourceConfiguration localResourceInstance = new ExtensionLocalResourceConfiguration();
                                        extensionImageInstance.LocalResources.Add(localResourceInstance);
                                        
                                        XElement nameElement4 = localResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement4 != null)
                                        {
                                            string nameInstance4 = nameElement4.Value;
                                            localResourceInstance.Name = nameInstance4;
                                        }
                                        
                                        XElement sizeInMBElement = localResourcesElement.Element(XName.Get("SizeInMB", "http://schemas.microsoft.com/windowsazure"));
                                        if (sizeInMBElement != null && !string.IsNullOrEmpty(sizeInMBElement.Value))
                                        {
                                            int sizeInMBInstance = int.Parse(sizeInMBElement.Value, CultureInfo.InvariantCulture);
                                            localResourceInstance.SizeInMB = sizeInMBInstance;
                                        }
                                    }
                                }
                                
                                XElement blockRoleUponFailureElement = extensionImagesElement.Element(XName.Get("BlockRoleUponFailure", "http://schemas.microsoft.com/windowsazure"));
                                if (blockRoleUponFailureElement != null && !string.IsNullOrEmpty(blockRoleUponFailureElement.Value))
                                {
                                    bool blockRoleUponFailureInstance = bool.Parse(blockRoleUponFailureElement.Value);
                                    extensionImageInstance.BlockRoleUponFailure = blockRoleUponFailureInstance;
                                }
                                
                                XElement isInternalExtensionElement = extensionImagesElement.Element(XName.Get("IsInternalExtension", "http://schemas.microsoft.com/windowsazure"));
                                if (isInternalExtensionElement != null && !string.IsNullOrEmpty(isInternalExtensionElement.Value))
                                {
                                    bool isInternalExtensionInstance = bool.Parse(isInternalExtensionElement.Value);
                                    extensionImageInstance.IsInternalExtension = isInternalExtensionInstance;
                                }
                                
                                XElement sampleConfigElement = extensionImagesElement.Element(XName.Get("SampleConfig", "http://schemas.microsoft.com/windowsazure"));
                                if (sampleConfigElement != null)
                                {
                                    string sampleConfigInstance = TypeConversion.FromBase64String(sampleConfigElement.Value);
                                    extensionImageInstance.SampleConfig = sampleConfigInstance;
                                }
                                
                                XElement replicationCompletedElement = extensionImagesElement.Element(XName.Get("ReplicationCompleted", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationCompletedElement != null && !string.IsNullOrEmpty(replicationCompletedElement.Value))
                                {
                                    bool replicationCompletedInstance = bool.Parse(replicationCompletedElement.Value);
                                    extensionImageInstance.ReplicationCompleted = replicationCompletedInstance;
                                }
                                
                                XElement eulaElement = extensionImagesElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                                if (eulaElement != null)
                                {
                                    Uri eulaInstance = TypeConversion.TryParseUri(eulaElement.Value);
                                    extensionImageInstance.Eula = eulaInstance;
                                }
                                
                                XElement privacyUriElement = extensionImagesElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                                if (privacyUriElement != null)
                                {
                                    Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                                    extensionImageInstance.PrivacyUri = privacyUriInstance;
                                }
                                
                                XElement homepageUriElement = extensionImagesElement.Element(XName.Get("HomepageUri", "http://schemas.microsoft.com/windowsazure"));
                                if (homepageUriElement != null)
                                {
                                    Uri homepageUriInstance = TypeConversion.TryParseUri(homepageUriElement.Value);
                                    extensionImageInstance.HomepageUri = homepageUriInstance;
                                }
                                
                                XElement isJsonExtensionElement = extensionImagesElement.Element(XName.Get("IsJsonExtension", "http://schemas.microsoft.com/windowsazure"));
                                if (isJsonExtensionElement != null && !string.IsNullOrEmpty(isJsonExtensionElement.Value))
                                {
                                    bool isJsonExtensionInstance = bool.Parse(isJsonExtensionElement.Value);
                                    extensionImageInstance.IsJsonExtension = isJsonExtensionInstance;
                                }
                                
                                XElement disallowMajorVersionUpgradeElement = extensionImagesElement.Element(XName.Get("DisallowMajorVersionUpgrade", "http://schemas.microsoft.com/windowsazure"));
                                if (disallowMajorVersionUpgradeElement != null && !string.IsNullOrEmpty(disallowMajorVersionUpgradeElement.Value))
                                {
                                    bool disallowMajorVersionUpgradeInstance = bool.Parse(disallowMajorVersionUpgradeElement.Value);
                                    extensionImageInstance.DisallowMajorVersionUpgrade = disallowMajorVersionUpgradeInstance;
                                }
                                
                                XElement supportedOSElement = extensionImagesElement.Element(XName.Get("SupportedOS", "http://schemas.microsoft.com/windowsazure"));
                                if (supportedOSElement != null)
                                {
                                    string supportedOSInstance = supportedOSElement.Value;
                                    extensionImageInstance.SupportedOS = supportedOSInstance;
                                }
                                
                                XElement companyNameElement = extensionImagesElement.Element(XName.Get("CompanyName", "http://schemas.microsoft.com/windowsazure"));
                                if (companyNameElement != null)
                                {
                                    string companyNameInstance = companyNameElement.Value;
                                    extensionImageInstance.CompanyName = companyNameInstance;
                                }
                                
                                XElement regionsElement = extensionImagesElement.Element(XName.Get("Regions", "http://schemas.microsoft.com/windowsazure"));
                                if (regionsElement != null)
                                {
                                    string regionsInstance = regionsElement.Value;
                                    extensionImageInstance.Regions = regionsInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Available Extensions operation lists the extensions that
        /// are available to add to your cloud service. In Windows Azure, a
        /// process can run as an extension of a cloud service. For example,
        /// Remote Desktop Access or the Azure Diagnostics Agent can run as
        /// extensions to the cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Available Extensions operation response.
        /// </returns>
        public async Task<HostedServiceListAvailableExtensionsResponse> ListPublisherExtensionsAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListPublisherExtensionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/publisherextensions";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceListAvailableExtensionsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HostedServiceListAvailableExtensionsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement extensionImagesSequenceElement = responseDoc.Element(XName.Get("ExtensionImages", "http://schemas.microsoft.com/windowsazure"));
                        if (extensionImagesSequenceElement != null)
                        {
                            foreach (XElement extensionImagesElement in extensionImagesSequenceElement.Elements(XName.Get("ExtensionImage", "http://schemas.microsoft.com/windowsazure")))
                            {
                                ExtensionImage extensionImageInstance = new ExtensionImage();
                                result.ExtensionImages.Add(extensionImageInstance);
                                
                                XElement providerNameSpaceElement = extensionImagesElement.Element(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                                if (providerNameSpaceElement != null)
                                {
                                    string providerNameSpaceInstance = providerNameSpaceElement.Value;
                                    extensionImageInstance.ProviderNameSpace = providerNameSpaceInstance;
                                }
                                
                                XElement typeElement = extensionImagesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement != null)
                                {
                                    string typeInstance = typeElement.Value;
                                    extensionImageInstance.Type = typeInstance;
                                }
                                
                                XElement versionElement = extensionImagesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                if (versionElement != null)
                                {
                                    string versionInstance = versionElement.Value;
                                    extensionImageInstance.Version = versionInstance;
                                }
                                
                                XElement labelElement = extensionImagesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement != null)
                                {
                                    string labelInstance = labelElement.Value;
                                    extensionImageInstance.Label = labelInstance;
                                }
                                
                                XElement hostingResourcesElement = extensionImagesElement.Element(XName.Get("HostingResources", "http://schemas.microsoft.com/windowsazure"));
                                if (hostingResourcesElement != null)
                                {
                                    string hostingResourcesInstance = hostingResourcesElement.Value;
                                    extensionImageInstance.HostingResources = hostingResourcesInstance;
                                }
                                
                                XElement mediaLinkElement = extensionImagesElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                if (mediaLinkElement != null)
                                {
                                    Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                    extensionImageInstance.MediaLink = mediaLinkInstance;
                                }
                                
                                XElement certificateElement = extensionImagesElement.Element(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure"));
                                if (certificateElement != null)
                                {
                                    ExtensionCertificateConfiguration certificateInstance = new ExtensionCertificateConfiguration();
                                    extensionImageInstance.Certificate = certificateInstance;
                                    
                                    XElement storeLocationElement = certificateElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                    if (storeLocationElement != null)
                                    {
                                        string storeLocationInstance = storeLocationElement.Value;
                                        certificateInstance.StoreLocation = storeLocationInstance;
                                    }
                                    
                                    XElement storeNameElement = certificateElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                    if (storeNameElement != null)
                                    {
                                        string storeNameInstance = storeNameElement.Value;
                                        certificateInstance.StoreName = storeNameInstance;
                                    }
                                    
                                    XElement thumbprintRequiredElement = certificateElement.Element(XName.Get("ThumbprintRequired", "http://schemas.microsoft.com/windowsazure"));
                                    if (thumbprintRequiredElement != null && !string.IsNullOrEmpty(thumbprintRequiredElement.Value))
                                    {
                                        bool thumbprintRequiredInstance = bool.Parse(thumbprintRequiredElement.Value);
                                        certificateInstance.ThumbprintRequired = thumbprintRequiredInstance;
                                    }
                                    
                                    XElement thumbprintAlgorithmElement = certificateElement.Element(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                                    if (thumbprintAlgorithmElement != null)
                                    {
                                        string thumbprintAlgorithmInstance = thumbprintAlgorithmElement.Value;
                                        certificateInstance.ThumbprintAlgorithm = thumbprintAlgorithmInstance;
                                    }
                                }
                                
                                XElement endpointsElement = extensionImagesElement.Element(XName.Get("Endpoints", "http://schemas.microsoft.com/windowsazure"));
                                if (endpointsElement != null)
                                {
                                    ExtensionEndpointConfiguration endpointsInstance = new ExtensionEndpointConfiguration();
                                    extensionImageInstance.ExtensionEndpoints = endpointsInstance;
                                    
                                    XElement inputEndpointsSequenceElement = endpointsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (inputEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionEndpointConfiguration.InputEndpoint inputEndpointInstance = new ExtensionEndpointConfiguration.InputEndpoint();
                                            endpointsInstance.InputEndpoints.Add(inputEndpointInstance);
                                            
                                            XElement nameElement = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement != null)
                                            {
                                                string nameInstance = nameElement.Value;
                                                inputEndpointInstance.Name = nameInstance;
                                            }
                                            
                                            XElement protocolElement = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement != null)
                                            {
                                                string protocolInstance = protocolElement.Value;
                                                inputEndpointInstance.Protocol = protocolInstance;
                                            }
                                            
                                            XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            if (portElement != null)
                                            {
                                                int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                inputEndpointInstance.Port = portInstance;
                                            }
                                            
                                            XElement localPortElement = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (localPortElement != null)
                                            {
                                                string localPortInstance = localPortElement.Value;
                                                inputEndpointInstance.LocalPort = localPortInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement internalEndpointsSequenceElement = endpointsElement.Element(XName.Get("InternalEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (internalEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement internalEndpointsElement in internalEndpointsSequenceElement.Elements(XName.Get("InternalEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionEndpointConfiguration.InternalEndpoint internalEndpointInstance = new ExtensionEndpointConfiguration.InternalEndpoint();
                                            endpointsInstance.InternalEndpoints.Add(internalEndpointInstance);
                                            
                                            XElement nameElement2 = internalEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement2 != null)
                                            {
                                                string nameInstance2 = nameElement2.Value;
                                                internalEndpointInstance.Name = nameInstance2;
                                            }
                                            
                                            XElement protocolElement2 = internalEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement2 != null)
                                            {
                                                string protocolInstance2 = protocolElement2.Value;
                                                internalEndpointInstance.Protocol = protocolInstance2;
                                            }
                                            
                                            XElement portElement2 = internalEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            if (portElement2 != null)
                                            {
                                                int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                internalEndpointInstance.Port = portInstance2;
                                            }
                                        }
                                    }
                                    
                                    XElement instanceInputEndpointsSequenceElement = endpointsElement.Element(XName.Get("InstanceInputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceInputEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement instanceInputEndpointsElement in instanceInputEndpointsSequenceElement.Elements(XName.Get("InstanceInputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionEndpointConfiguration.InstanceInputEndpoint instanceInputEndpointInstance = new ExtensionEndpointConfiguration.InstanceInputEndpoint();
                                            endpointsInstance.InstanceInputEndpoints.Add(instanceInputEndpointInstance);
                                            
                                            XElement nameElement3 = instanceInputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement3 != null)
                                            {
                                                string nameInstance3 = nameElement3.Value;
                                                instanceInputEndpointInstance.Name = nameInstance3;
                                            }
                                            
                                            XElement protocolElement3 = instanceInputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement3 != null)
                                            {
                                                string protocolInstance3 = protocolElement3.Value;
                                                instanceInputEndpointInstance.Protocol = protocolInstance3;
                                            }
                                            
                                            XElement localPortElement2 = instanceInputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (localPortElement2 != null)
                                            {
                                                string localPortInstance2 = localPortElement2.Value;
                                                instanceInputEndpointInstance.LocalPort = localPortInstance2;
                                            }
                                            
                                            XElement fixedPortMinElement = instanceInputEndpointsElement.Element(XName.Get("FixedPortMin", "http://schemas.microsoft.com/windowsazure"));
                                            if (fixedPortMinElement != null)
                                            {
                                                int fixedPortMinInstance = int.Parse(fixedPortMinElement.Value, CultureInfo.InvariantCulture);
                                                instanceInputEndpointInstance.FixedPortMin = fixedPortMinInstance;
                                            }
                                            
                                            XElement fixedPortMaxElement = instanceInputEndpointsElement.Element(XName.Get("FixedPortMax", "http://schemas.microsoft.com/windowsazure"));
                                            if (fixedPortMaxElement != null)
                                            {
                                                int fixedPortMaxInstance = int.Parse(fixedPortMaxElement.Value, CultureInfo.InvariantCulture);
                                                instanceInputEndpointInstance.FixedPortMax = fixedPortMaxInstance;
                                            }
                                        }
                                    }
                                }
                                
                                XElement publicConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PublicConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                                if (publicConfigurationSchemaElement != null)
                                {
                                    string publicConfigurationSchemaInstance = TypeConversion.FromBase64String(publicConfigurationSchemaElement.Value);
                                    extensionImageInstance.PublicConfigurationSchema = publicConfigurationSchemaInstance;
                                }
                                
                                XElement privateConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PrivateConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                                if (privateConfigurationSchemaElement != null)
                                {
                                    string privateConfigurationSchemaInstance = TypeConversion.FromBase64String(privateConfigurationSchemaElement.Value);
                                    extensionImageInstance.PrivateConfigurationSchema = privateConfigurationSchemaInstance;
                                }
                                
                                XElement descriptionElement = extensionImagesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    extensionImageInstance.Description = descriptionInstance;
                                }
                                
                                XElement publisherNameElement = extensionImagesElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                                if (publisherNameElement != null)
                                {
                                    string publisherNameInstance = publisherNameElement.Value;
                                    extensionImageInstance.PublisherName = publisherNameInstance;
                                }
                                
                                XElement publishedDateElement = extensionImagesElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                                if (publishedDateElement != null && !string.IsNullOrEmpty(publishedDateElement.Value))
                                {
                                    DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    extensionImageInstance.PublishedDate = publishedDateInstance;
                                }
                                
                                XElement localResourcesSequenceElement = extensionImagesElement.Element(XName.Get("LocalResources", "http://schemas.microsoft.com/windowsazure"));
                                if (localResourcesSequenceElement != null)
                                {
                                    foreach (XElement localResourcesElement in localResourcesSequenceElement.Elements(XName.Get("LocalResource", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ExtensionLocalResourceConfiguration localResourceInstance = new ExtensionLocalResourceConfiguration();
                                        extensionImageInstance.LocalResources.Add(localResourceInstance);
                                        
                                        XElement nameElement4 = localResourcesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement4 != null)
                                        {
                                            string nameInstance4 = nameElement4.Value;
                                            localResourceInstance.Name = nameInstance4;
                                        }
                                        
                                        XElement sizeInMBElement = localResourcesElement.Element(XName.Get("SizeInMB", "http://schemas.microsoft.com/windowsazure"));
                                        if (sizeInMBElement != null && !string.IsNullOrEmpty(sizeInMBElement.Value))
                                        {
                                            int sizeInMBInstance = int.Parse(sizeInMBElement.Value, CultureInfo.InvariantCulture);
                                            localResourceInstance.SizeInMB = sizeInMBInstance;
                                        }
                                    }
                                }
                                
                                XElement blockRoleUponFailureElement = extensionImagesElement.Element(XName.Get("BlockRoleUponFailure", "http://schemas.microsoft.com/windowsazure"));
                                if (blockRoleUponFailureElement != null && !string.IsNullOrEmpty(blockRoleUponFailureElement.Value))
                                {
                                    bool blockRoleUponFailureInstance = bool.Parse(blockRoleUponFailureElement.Value);
                                    extensionImageInstance.BlockRoleUponFailure = blockRoleUponFailureInstance;
                                }
                                
                                XElement isInternalExtensionElement = extensionImagesElement.Element(XName.Get("IsInternalExtension", "http://schemas.microsoft.com/windowsazure"));
                                if (isInternalExtensionElement != null && !string.IsNullOrEmpty(isInternalExtensionElement.Value))
                                {
                                    bool isInternalExtensionInstance = bool.Parse(isInternalExtensionElement.Value);
                                    extensionImageInstance.IsInternalExtension = isInternalExtensionInstance;
                                }
                                
                                XElement sampleConfigElement = extensionImagesElement.Element(XName.Get("SampleConfig", "http://schemas.microsoft.com/windowsazure"));
                                if (sampleConfigElement != null)
                                {
                                    string sampleConfigInstance = TypeConversion.FromBase64String(sampleConfigElement.Value);
                                    extensionImageInstance.SampleConfig = sampleConfigInstance;
                                }
                                
                                XElement replicationCompletedElement = extensionImagesElement.Element(XName.Get("ReplicationCompleted", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationCompletedElement != null && !string.IsNullOrEmpty(replicationCompletedElement.Value))
                                {
                                    bool replicationCompletedInstance = bool.Parse(replicationCompletedElement.Value);
                                    extensionImageInstance.ReplicationCompleted = replicationCompletedInstance;
                                }
                                
                                XElement eulaElement = extensionImagesElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                                if (eulaElement != null)
                                {
                                    Uri eulaInstance = TypeConversion.TryParseUri(eulaElement.Value);
                                    extensionImageInstance.Eula = eulaInstance;
                                }
                                
                                XElement privacyUriElement = extensionImagesElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                                if (privacyUriElement != null)
                                {
                                    Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                                    extensionImageInstance.PrivacyUri = privacyUriInstance;
                                }
                                
                                XElement homepageUriElement = extensionImagesElement.Element(XName.Get("HomepageUri", "http://schemas.microsoft.com/windowsazure"));
                                if (homepageUriElement != null)
                                {
                                    Uri homepageUriInstance = TypeConversion.TryParseUri(homepageUriElement.Value);
                                    extensionImageInstance.HomepageUri = homepageUriInstance;
                                }
                                
                                XElement isJsonExtensionElement = extensionImagesElement.Element(XName.Get("IsJsonExtension", "http://schemas.microsoft.com/windowsazure"));
                                if (isJsonExtensionElement != null && !string.IsNullOrEmpty(isJsonExtensionElement.Value))
                                {
                                    bool isJsonExtensionInstance = bool.Parse(isJsonExtensionElement.Value);
                                    extensionImageInstance.IsJsonExtension = isJsonExtensionInstance;
                                }
                                
                                XElement disallowMajorVersionUpgradeElement = extensionImagesElement.Element(XName.Get("DisallowMajorVersionUpgrade", "http://schemas.microsoft.com/windowsazure"));
                                if (disallowMajorVersionUpgradeElement != null && !string.IsNullOrEmpty(disallowMajorVersionUpgradeElement.Value))
                                {
                                    bool disallowMajorVersionUpgradeInstance = bool.Parse(disallowMajorVersionUpgradeElement.Value);
                                    extensionImageInstance.DisallowMajorVersionUpgrade = disallowMajorVersionUpgradeInstance;
                                }
                                
                                XElement supportedOSElement = extensionImagesElement.Element(XName.Get("SupportedOS", "http://schemas.microsoft.com/windowsazure"));
                                if (supportedOSElement != null)
                                {
                                    string supportedOSInstance = supportedOSElement.Value;
                                    extensionImageInstance.SupportedOS = supportedOSInstance;
                                }
                                
                                XElement companyNameElement = extensionImagesElement.Element(XName.Get("CompanyName", "http://schemas.microsoft.com/windowsazure"));
                                if (companyNameElement != null)
                                {
                                    string companyNameInstance = companyNameElement.Value;
                                    extensionImageInstance.CompanyName = companyNameInstance;
                                }
                                
                                XElement regionsElement = extensionImagesElement.Element(XName.Get("Regions", "http://schemas.microsoft.com/windowsazure"));
                                if (regionsElement != null)
                                {
                                    string regionsInstance = regionsElement.Value;
                                    extensionImageInstance.Regions = regionsInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Update Hosted Service operation can update the label or
        /// description of a cloud service in Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441303.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Hosted Service
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateAsync(string serviceName, HostedServiceUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Description != null && parameters.Description.Length > 1024)
            {
                throw new ArgumentOutOfRangeException("parameters.Description");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateHostedServiceElement = new XElement(XName.Get("UpdateHostedService", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(updateHostedServiceElement);
                
                if (parameters.Label != null)
                {
                    XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                    labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                    updateHostedServiceElement.Add(labelElement);
                }
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    updateHostedServiceElement.Add(descriptionElement);
                }
                
                if (parameters.ReverseDnsFqdn != null)
                {
                    XElement reverseDnsFqdnElement = new XElement(XName.Get("ReverseDnsFqdn", "http://schemas.microsoft.com/windowsazure"));
                    reverseDnsFqdnElement.Value = parameters.ReverseDnsFqdn;
                    updateHostedServiceElement.Add(reverseDnsFqdnElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    if (parameters.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)parameters.ExtendedProperties).IsInitialized)
                    {
                        XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                        foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                        {
                            string extendedPropertiesKey = pair.Key;
                            string extendedPropertiesValue = pair.Value;
                            XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                            
                            XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                            extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                            
                            XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesValueElement.Value = extendedPropertiesValue;
                            extendedPropertiesElement.Add(extendedPropertiesValueElement);
                        }
                        updateHostedServiceElement.Add(extendedPropertiesDictionaryElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
