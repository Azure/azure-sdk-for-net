// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the service
    /// and virtual machine extension images in your publisher subscription.
    /// </summary>
    internal partial class ExtensionImageOperations : IServiceOperations<ComputeManagementClient>, IExtensionImageOperations
    {
        /// <summary>
        /// Initializes a new instance of the ExtensionImageOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ExtensionImageOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Register a new extension. An extension is identified by the
        /// combination of its ProviderNamespace and Type (case-sensitive
        /// string). It is not allowed to register an extension with the same
        /// identity (i.e. combination of ProviderNamespace and Type) of an
        /// already-registered extension. To register new version of an
        /// existing extension, the Update Extension API should be used.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Register Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginRegisteringAsync(ExtensionImageRegisterParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Certificate != null)
            {
                if (parameters.Certificate.StoreLocation == null)
                {
                    throw new ArgumentNullException("parameters.Certificate.StoreLocation");
                }
            }
            if (parameters.ExtensionEndpoints != null)
            {
                if (parameters.ExtensionEndpoints.InputEndpoints != null)
                {
                    foreach (ExtensionEndpointConfiguration.InputEndpoint inputEndpointsParameterItem in parameters.ExtensionEndpoints.InputEndpoints)
                    {
                        if (inputEndpointsParameterItem.LocalPort == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InputEndpoints.LocalPort");
                        }
                        if (inputEndpointsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InputEndpoints.Name");
                        }
                        if (inputEndpointsParameterItem.Protocol == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InputEndpoints.Protocol");
                        }
                    }
                }
                if (parameters.ExtensionEndpoints.InstanceInputEndpoints != null)
                {
                    foreach (ExtensionEndpointConfiguration.InstanceInputEndpoint instanceInputEndpointsParameterItem in parameters.ExtensionEndpoints.InstanceInputEndpoints)
                    {
                        if (instanceInputEndpointsParameterItem.LocalPort == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InstanceInputEndpoints.LocalPort");
                        }
                        if (instanceInputEndpointsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InstanceInputEndpoints.Name");
                        }
                        if (instanceInputEndpointsParameterItem.Protocol == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InstanceInputEndpoints.Protocol");
                        }
                    }
                }
                if (parameters.ExtensionEndpoints.InternalEndpoints != null)
                {
                    foreach (ExtensionEndpointConfiguration.InternalEndpoint internalEndpointsParameterItem in parameters.ExtensionEndpoints.InternalEndpoints)
                    {
                        if (internalEndpointsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InternalEndpoints.Name");
                        }
                        if (internalEndpointsParameterItem.Protocol == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InternalEndpoints.Protocol");
                        }
                    }
                }
            }
            if (parameters.LocalResources != null)
            {
                foreach (ExtensionLocalResourceConfiguration localResourcesParameterItem in parameters.LocalResources)
                {
                    if (localResourcesParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("parameters.LocalResources.Name");
                    }
                }
            }
            if (parameters.ProviderNameSpace == null)
            {
                throw new ArgumentNullException("parameters.ProviderNameSpace");
            }
            if (parameters.Type == null)
            {
                throw new ArgumentNullException("parameters.Type");
            }
            if (parameters.Version == null)
            {
                throw new ArgumentNullException("parameters.Version");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginRegisteringAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/extensions";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement extensionImageElement = new XElement(XName.Get("ExtensionImage", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(extensionImageElement);
                
                XElement providerNameSpaceElement = new XElement(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                providerNameSpaceElement.Value = parameters.ProviderNameSpace;
                extensionImageElement.Add(providerNameSpaceElement);
                
                XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                typeElement.Value = parameters.Type;
                extensionImageElement.Add(typeElement);
                
                XElement versionElement = new XElement(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                versionElement.Value = parameters.Version;
                extensionImageElement.Add(versionElement);
                
                if (parameters.Label != null)
                {
                    XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                    labelElement.Value = parameters.Label;
                    extensionImageElement.Add(labelElement);
                }
                
                if (parameters.HostingResources != null)
                {
                    XElement hostingResourcesElement = new XElement(XName.Get("HostingResources", "http://schemas.microsoft.com/windowsazure"));
                    hostingResourcesElement.Value = parameters.HostingResources;
                    extensionImageElement.Add(hostingResourcesElement);
                }
                
                if (parameters.MediaLink != null)
                {
                    XElement mediaLinkElement = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                    mediaLinkElement.Value = parameters.MediaLink.AbsoluteUri;
                    extensionImageElement.Add(mediaLinkElement);
                }
                
                if (parameters.Certificate != null)
                {
                    XElement certificateElement = new XElement(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure"));
                    extensionImageElement.Add(certificateElement);
                    
                    XElement storeLocationElement = new XElement(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                    storeLocationElement.Value = parameters.Certificate.StoreLocation;
                    certificateElement.Add(storeLocationElement);
                    
                    if (parameters.Certificate.StoreName != null)
                    {
                        XElement storeNameElement = new XElement(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                        storeNameElement.Value = parameters.Certificate.StoreName;
                        certificateElement.Add(storeNameElement);
                    }
                    
                    if (parameters.Certificate.ThumbprintRequired != null)
                    {
                        XElement thumbprintRequiredElement = new XElement(XName.Get("ThumbprintRequired", "http://schemas.microsoft.com/windowsazure"));
                        thumbprintRequiredElement.Value = parameters.Certificate.ThumbprintRequired.ToString().ToLower();
                        certificateElement.Add(thumbprintRequiredElement);
                    }
                    
                    if (parameters.Certificate.ThumbprintAlgorithm != null)
                    {
                        XElement thumbprintAlgorithmElement = new XElement(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                        thumbprintAlgorithmElement.Value = parameters.Certificate.ThumbprintAlgorithm;
                        certificateElement.Add(thumbprintAlgorithmElement);
                    }
                }
                
                if (parameters.ExtensionEndpoints != null)
                {
                    XElement endpointsElement = new XElement(XName.Get("Endpoints", "http://schemas.microsoft.com/windowsazure"));
                    extensionImageElement.Add(endpointsElement);
                    
                    if (parameters.ExtensionEndpoints.InputEndpoints != null)
                    {
                        if (parameters.ExtensionEndpoints.InputEndpoints is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionEndpoints.InputEndpoints).IsInitialized)
                        {
                            XElement inputEndpointsSequenceElement = new XElement(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionEndpointConfiguration.InputEndpoint inputEndpointsItem in parameters.ExtensionEndpoints.InputEndpoints)
                            {
                                XElement inputEndpointElement = new XElement(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                inputEndpointsSequenceElement.Add(inputEndpointElement);
                                
                                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement.Value = inputEndpointsItem.Name;
                                inputEndpointElement.Add(nameElement);
                                
                                XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                protocolElement.Value = inputEndpointsItem.Protocol;
                                inputEndpointElement.Add(protocolElement);
                                
                                XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                portElement.Value = inputEndpointsItem.Port.ToString();
                                inputEndpointElement.Add(portElement);
                                
                                XElement localPortElement = new XElement(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                localPortElement.Value = inputEndpointsItem.LocalPort;
                                inputEndpointElement.Add(localPortElement);
                            }
                            endpointsElement.Add(inputEndpointsSequenceElement);
                        }
                    }
                    
                    if (parameters.ExtensionEndpoints.InternalEndpoints != null)
                    {
                        if (parameters.ExtensionEndpoints.InternalEndpoints is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionEndpoints.InternalEndpoints).IsInitialized)
                        {
                            XElement internalEndpointsSequenceElement = new XElement(XName.Get("InternalEndpoints", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionEndpointConfiguration.InternalEndpoint internalEndpointsItem in parameters.ExtensionEndpoints.InternalEndpoints)
                            {
                                XElement internalEndpointElement = new XElement(XName.Get("InternalEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                internalEndpointsSequenceElement.Add(internalEndpointElement);
                                
                                XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement2.Value = internalEndpointsItem.Name;
                                internalEndpointElement.Add(nameElement2);
                                
                                XElement protocolElement2 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                protocolElement2.Value = internalEndpointsItem.Protocol;
                                internalEndpointElement.Add(protocolElement2);
                                
                                XElement portElement2 = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                portElement2.Value = internalEndpointsItem.Port.ToString();
                                internalEndpointElement.Add(portElement2);
                            }
                            endpointsElement.Add(internalEndpointsSequenceElement);
                        }
                    }
                    
                    if (parameters.ExtensionEndpoints.InstanceInputEndpoints != null)
                    {
                        if (parameters.ExtensionEndpoints.InstanceInputEndpoints is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionEndpoints.InstanceInputEndpoints).IsInitialized)
                        {
                            XElement instanceInputEndpointsSequenceElement = new XElement(XName.Get("InstanceInputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionEndpointConfiguration.InstanceInputEndpoint instanceInputEndpointsItem in parameters.ExtensionEndpoints.InstanceInputEndpoints)
                            {
                                XElement instanceInputEndpointElement = new XElement(XName.Get("InstanceInputEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                instanceInputEndpointsSequenceElement.Add(instanceInputEndpointElement);
                                
                                XElement nameElement3 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement3.Value = instanceInputEndpointsItem.Name;
                                instanceInputEndpointElement.Add(nameElement3);
                                
                                XElement protocolElement3 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                protocolElement3.Value = instanceInputEndpointsItem.Protocol;
                                instanceInputEndpointElement.Add(protocolElement3);
                                
                                XElement localPortElement2 = new XElement(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                localPortElement2.Value = instanceInputEndpointsItem.LocalPort;
                                instanceInputEndpointElement.Add(localPortElement2);
                                
                                XElement fixedPortMinElement = new XElement(XName.Get("FixedPortMin", "http://schemas.microsoft.com/windowsazure"));
                                fixedPortMinElement.Value = instanceInputEndpointsItem.FixedPortMin.ToString();
                                instanceInputEndpointElement.Add(fixedPortMinElement);
                                
                                XElement fixedPortMaxElement = new XElement(XName.Get("FixedPortMax", "http://schemas.microsoft.com/windowsazure"));
                                fixedPortMaxElement.Value = instanceInputEndpointsItem.FixedPortMax.ToString();
                                instanceInputEndpointElement.Add(fixedPortMaxElement);
                            }
                            endpointsElement.Add(instanceInputEndpointsSequenceElement);
                        }
                    }
                }
                
                if (parameters.PublicConfigurationSchema != null)
                {
                    XElement publicConfigurationSchemaElement = new XElement(XName.Get("PublicConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                    publicConfigurationSchemaElement.Value = TypeConversion.ToBase64String(parameters.PublicConfigurationSchema);
                    extensionImageElement.Add(publicConfigurationSchemaElement);
                }
                
                if (parameters.PrivateConfigurationSchema != null)
                {
                    XElement privateConfigurationSchemaElement = new XElement(XName.Get("PrivateConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                    privateConfigurationSchemaElement.Value = TypeConversion.ToBase64String(parameters.PrivateConfigurationSchema);
                    extensionImageElement.Add(privateConfigurationSchemaElement);
                }
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    extensionImageElement.Add(descriptionElement);
                }
                
                if (parameters.PublisherName != null)
                {
                    XElement publisherNameElement = new XElement(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                    publisherNameElement.Value = parameters.PublisherName;
                    extensionImageElement.Add(publisherNameElement);
                }
                
                if (parameters.PublishedDate != null)
                {
                    XElement publishedDateElement = new XElement(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                    publishedDateElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.PublishedDate.Value.ToUniversalTime());
                    extensionImageElement.Add(publishedDateElement);
                }
                
                if (parameters.LocalResources != null)
                {
                    XElement localResourcesSequenceElement = new XElement(XName.Get("LocalResources", "http://schemas.microsoft.com/windowsazure"));
                    foreach (ExtensionLocalResourceConfiguration localResourcesItem in parameters.LocalResources)
                    {
                        XElement localResourceElement = new XElement(XName.Get("LocalResource", "http://schemas.microsoft.com/windowsazure"));
                        localResourcesSequenceElement.Add(localResourceElement);
                        
                        XElement nameElement4 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        nameElement4.Value = localResourcesItem.Name;
                        localResourceElement.Add(nameElement4);
                        
                        if (localResourcesItem.SizeInMB != null)
                        {
                            XElement sizeInMBElement = new XElement(XName.Get("SizeInMB", "http://schemas.microsoft.com/windowsazure"));
                            sizeInMBElement.Value = localResourcesItem.SizeInMB.ToString();
                            localResourceElement.Add(sizeInMBElement);
                        }
                    }
                    extensionImageElement.Add(localResourcesSequenceElement);
                }
                
                if (parameters.BlockRoleUponFailure != null)
                {
                    XElement blockRoleUponFailureElement = new XElement(XName.Get("BlockRoleUponFailure", "http://schemas.microsoft.com/windowsazure"));
                    blockRoleUponFailureElement.Value = parameters.BlockRoleUponFailure.ToString().ToLower();
                    extensionImageElement.Add(blockRoleUponFailureElement);
                }
                
                if (parameters.IsInternalExtension != null)
                {
                    XElement isInternalExtensionElement = new XElement(XName.Get("IsInternalExtension", "http://schemas.microsoft.com/windowsazure"));
                    isInternalExtensionElement.Value = parameters.IsInternalExtension.ToString().ToLower();
                    extensionImageElement.Add(isInternalExtensionElement);
                }
                
                if (parameters.SampleConfig != null)
                {
                    XElement sampleConfigElement = new XElement(XName.Get("SampleConfig", "http://schemas.microsoft.com/windowsazure"));
                    sampleConfigElement.Value = TypeConversion.ToBase64String(parameters.SampleConfig);
                    extensionImageElement.Add(sampleConfigElement);
                }
                
                if (parameters.ReplicationCompleted != null)
                {
                    XElement replicationCompletedElement = new XElement(XName.Get("ReplicationCompleted", "http://schemas.microsoft.com/windowsazure"));
                    replicationCompletedElement.Value = parameters.ReplicationCompleted.ToString().ToLower();
                    extensionImageElement.Add(replicationCompletedElement);
                }
                
                if (parameters.Eula != null)
                {
                    XElement eulaElement = new XElement(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                    eulaElement.Value = parameters.Eula.AbsoluteUri;
                    extensionImageElement.Add(eulaElement);
                }
                
                if (parameters.PrivacyUri != null)
                {
                    XElement privacyUriElement = new XElement(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                    privacyUriElement.Value = parameters.PrivacyUri.AbsoluteUri;
                    extensionImageElement.Add(privacyUriElement);
                }
                
                if (parameters.HomepageUri != null)
                {
                    XElement homepageUriElement = new XElement(XName.Get("HomepageUri", "http://schemas.microsoft.com/windowsazure"));
                    homepageUriElement.Value = parameters.HomepageUri.AbsoluteUri;
                    extensionImageElement.Add(homepageUriElement);
                }
                
                if (parameters.IsJsonExtension != null)
                {
                    XElement isJsonExtensionElement = new XElement(XName.Get("IsJsonExtension", "http://schemas.microsoft.com/windowsazure"));
                    isJsonExtensionElement.Value = parameters.IsJsonExtension.ToString().ToLower();
                    extensionImageElement.Add(isJsonExtensionElement);
                }
                
                if (parameters.DisallowMajorVersionUpgrade != null)
                {
                    XElement disallowMajorVersionUpgradeElement = new XElement(XName.Get("DisallowMajorVersionUpgrade", "http://schemas.microsoft.com/windowsazure"));
                    disallowMajorVersionUpgradeElement.Value = parameters.DisallowMajorVersionUpgrade.ToString().ToLower();
                    extensionImageElement.Add(disallowMajorVersionUpgradeElement);
                }
                
                if (parameters.SupportedOS != null)
                {
                    XElement supportedOSElement = new XElement(XName.Get("SupportedOS", "http://schemas.microsoft.com/windowsazure"));
                    supportedOSElement.Value = parameters.SupportedOS;
                    extensionImageElement.Add(supportedOSElement);
                }
                
                if (parameters.CompanyName != null)
                {
                    XElement companyNameElement = new XElement(XName.Get("CompanyName", "http://schemas.microsoft.com/windowsazure"));
                    companyNameElement.Value = parameters.CompanyName;
                    extensionImageElement.Add(companyNameElement);
                }
                
                if (parameters.Regions != null)
                {
                    XElement regionsElement = new XElement(XName.Get("Regions", "http://schemas.microsoft.com/windowsazure"));
                    regionsElement.Value = parameters.Regions;
                    extensionImageElement.Add(regionsElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unregister a version of an extension that was previously registered
        /// using either the Register Extension or Update Extension APIs. An
        /// extension version is identified by the combination of its
        /// ProviderNamespace, Type and Version which are specified when
        /// registering the extension. Unregistering is only allowed for
        /// internal extensions, that is, the extensions for which the
        /// IsInternalExtension field is set to 'true' during registration or
        /// during an update. There is a quota (15) on the number of
        /// extensions that can be registered per subscription. If your
        /// subscription runs out of quota, you will wither need to unregister
        /// some of the internal extensions or contact Azure (same email used
        /// to become a publisher)  to increase the quota.
        /// </summary>
        /// <param name='providerNamespace'>
        /// Required. The provider namespace of the extension image to
        /// unregister.
        /// </param>
        /// <param name='type'>
        /// Required. The type of the extension image to unregister.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the extension image to unregister.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUnregisteringAsync(string providerNamespace, string type, string version, CancellationToken cancellationToken)
        {
            // Validate
            if (providerNamespace == null)
            {
                throw new ArgumentNullException("providerNamespace");
            }
            if (type == null)
            {
                throw new ArgumentNullException("type");
            }
            if (version == null)
            {
                throw new ArgumentNullException("version");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("providerNamespace", providerNamespace);
                tracingParameters.Add("type", type);
                tracingParameters.Add("version", version);
                TracingAdapter.Enter(invocationId, this, "BeginUnregisteringAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/extensions/";
            url = url + Uri.EscapeDataString(providerNamespace);
            url = url + "/";
            url = url + Uri.EscapeDataString(type);
            url = url + "/";
            url = url + Uri.EscapeDataString(version);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update a new extension. It is allowed to update an extension which
        /// had already been registered with the same identity (i.e.
        /// combination of ProviderNamespace and Type) but with different
        /// version. It will fail if the extension to update has an identity
        /// that has not been registered before, or there is already an
        /// extension with the same identity and same version.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUpdatingAsync(ExtensionImageUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Certificate != null)
            {
                if (parameters.Certificate.StoreLocation == null)
                {
                    throw new ArgumentNullException("parameters.Certificate.StoreLocation");
                }
            }
            if (parameters.ExtensionEndpoints != null)
            {
                if (parameters.ExtensionEndpoints.InputEndpoints != null)
                {
                    foreach (ExtensionEndpointConfiguration.InputEndpoint inputEndpointsParameterItem in parameters.ExtensionEndpoints.InputEndpoints)
                    {
                        if (inputEndpointsParameterItem.LocalPort == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InputEndpoints.LocalPort");
                        }
                        if (inputEndpointsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InputEndpoints.Name");
                        }
                        if (inputEndpointsParameterItem.Protocol == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InputEndpoints.Protocol");
                        }
                    }
                }
                if (parameters.ExtensionEndpoints.InstanceInputEndpoints != null)
                {
                    foreach (ExtensionEndpointConfiguration.InstanceInputEndpoint instanceInputEndpointsParameterItem in parameters.ExtensionEndpoints.InstanceInputEndpoints)
                    {
                        if (instanceInputEndpointsParameterItem.LocalPort == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InstanceInputEndpoints.LocalPort");
                        }
                        if (instanceInputEndpointsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InstanceInputEndpoints.Name");
                        }
                        if (instanceInputEndpointsParameterItem.Protocol == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InstanceInputEndpoints.Protocol");
                        }
                    }
                }
                if (parameters.ExtensionEndpoints.InternalEndpoints != null)
                {
                    foreach (ExtensionEndpointConfiguration.InternalEndpoint internalEndpointsParameterItem in parameters.ExtensionEndpoints.InternalEndpoints)
                    {
                        if (internalEndpointsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InternalEndpoints.Name");
                        }
                        if (internalEndpointsParameterItem.Protocol == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionEndpoints.InternalEndpoints.Protocol");
                        }
                    }
                }
            }
            if (parameters.LocalResources != null)
            {
                foreach (ExtensionLocalResourceConfiguration localResourcesParameterItem in parameters.LocalResources)
                {
                    if (localResourcesParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("parameters.LocalResources.Name");
                    }
                }
            }
            if (parameters.ProviderNameSpace == null)
            {
                throw new ArgumentNullException("parameters.ProviderNameSpace");
            }
            if (parameters.Type == null)
            {
                throw new ArgumentNullException("parameters.Type");
            }
            if (parameters.Version == null)
            {
                throw new ArgumentNullException("parameters.Version");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/extensions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("action=update");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement extensionImageElement = new XElement(XName.Get("ExtensionImage", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(extensionImageElement);
                
                XElement providerNameSpaceElement = new XElement(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                providerNameSpaceElement.Value = parameters.ProviderNameSpace;
                extensionImageElement.Add(providerNameSpaceElement);
                
                XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                typeElement.Value = parameters.Type;
                extensionImageElement.Add(typeElement);
                
                XElement versionElement = new XElement(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                versionElement.Value = parameters.Version;
                extensionImageElement.Add(versionElement);
                
                if (parameters.Label != null)
                {
                    XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                    labelElement.Value = parameters.Label;
                    extensionImageElement.Add(labelElement);
                }
                
                if (parameters.HostingResources != null)
                {
                    XElement hostingResourcesElement = new XElement(XName.Get("HostingResources", "http://schemas.microsoft.com/windowsazure"));
                    hostingResourcesElement.Value = parameters.HostingResources;
                    extensionImageElement.Add(hostingResourcesElement);
                }
                
                if (parameters.MediaLink != null)
                {
                    XElement mediaLinkElement = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                    mediaLinkElement.Value = parameters.MediaLink.AbsoluteUri;
                    extensionImageElement.Add(mediaLinkElement);
                }
                
                if (parameters.Certificate != null)
                {
                    XElement certificateElement = new XElement(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure"));
                    extensionImageElement.Add(certificateElement);
                    
                    XElement storeLocationElement = new XElement(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                    storeLocationElement.Value = parameters.Certificate.StoreLocation;
                    certificateElement.Add(storeLocationElement);
                    
                    if (parameters.Certificate.StoreName != null)
                    {
                        XElement storeNameElement = new XElement(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                        storeNameElement.Value = parameters.Certificate.StoreName;
                        certificateElement.Add(storeNameElement);
                    }
                    
                    if (parameters.Certificate.ThumbprintRequired != null)
                    {
                        XElement thumbprintRequiredElement = new XElement(XName.Get("ThumbprintRequired", "http://schemas.microsoft.com/windowsazure"));
                        thumbprintRequiredElement.Value = parameters.Certificate.ThumbprintRequired.ToString().ToLower();
                        certificateElement.Add(thumbprintRequiredElement);
                    }
                    
                    if (parameters.Certificate.ThumbprintAlgorithm != null)
                    {
                        XElement thumbprintAlgorithmElement = new XElement(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                        thumbprintAlgorithmElement.Value = parameters.Certificate.ThumbprintAlgorithm;
                        certificateElement.Add(thumbprintAlgorithmElement);
                    }
                }
                
                if (parameters.ExtensionEndpoints != null)
                {
                    XElement endpointsElement = new XElement(XName.Get("Endpoints", "http://schemas.microsoft.com/windowsazure"));
                    extensionImageElement.Add(endpointsElement);
                    
                    if (parameters.ExtensionEndpoints.InputEndpoints != null)
                    {
                        if (parameters.ExtensionEndpoints.InputEndpoints is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionEndpoints.InputEndpoints).IsInitialized)
                        {
                            XElement inputEndpointsSequenceElement = new XElement(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionEndpointConfiguration.InputEndpoint inputEndpointsItem in parameters.ExtensionEndpoints.InputEndpoints)
                            {
                                XElement inputEndpointElement = new XElement(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                inputEndpointsSequenceElement.Add(inputEndpointElement);
                                
                                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement.Value = inputEndpointsItem.Name;
                                inputEndpointElement.Add(nameElement);
                                
                                XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                protocolElement.Value = inputEndpointsItem.Protocol;
                                inputEndpointElement.Add(protocolElement);
                                
                                XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                portElement.Value = inputEndpointsItem.Port.ToString();
                                inputEndpointElement.Add(portElement);
                                
                                XElement localPortElement = new XElement(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                localPortElement.Value = inputEndpointsItem.LocalPort;
                                inputEndpointElement.Add(localPortElement);
                            }
                            endpointsElement.Add(inputEndpointsSequenceElement);
                        }
                    }
                    
                    if (parameters.ExtensionEndpoints.InternalEndpoints != null)
                    {
                        if (parameters.ExtensionEndpoints.InternalEndpoints is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionEndpoints.InternalEndpoints).IsInitialized)
                        {
                            XElement internalEndpointsSequenceElement = new XElement(XName.Get("InternalEndpoints", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionEndpointConfiguration.InternalEndpoint internalEndpointsItem in parameters.ExtensionEndpoints.InternalEndpoints)
                            {
                                XElement internalEndpointElement = new XElement(XName.Get("InternalEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                internalEndpointsSequenceElement.Add(internalEndpointElement);
                                
                                XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement2.Value = internalEndpointsItem.Name;
                                internalEndpointElement.Add(nameElement2);
                                
                                XElement protocolElement2 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                protocolElement2.Value = internalEndpointsItem.Protocol;
                                internalEndpointElement.Add(protocolElement2);
                                
                                XElement portElement2 = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                portElement2.Value = internalEndpointsItem.Port.ToString();
                                internalEndpointElement.Add(portElement2);
                            }
                            endpointsElement.Add(internalEndpointsSequenceElement);
                        }
                    }
                    
                    if (parameters.ExtensionEndpoints.InstanceInputEndpoints != null)
                    {
                        if (parameters.ExtensionEndpoints.InstanceInputEndpoints is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionEndpoints.InstanceInputEndpoints).IsInitialized)
                        {
                            XElement instanceInputEndpointsSequenceElement = new XElement(XName.Get("InstanceInputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionEndpointConfiguration.InstanceInputEndpoint instanceInputEndpointsItem in parameters.ExtensionEndpoints.InstanceInputEndpoints)
                            {
                                XElement instanceInputEndpointElement = new XElement(XName.Get("InstanceInputEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                instanceInputEndpointsSequenceElement.Add(instanceInputEndpointElement);
                                
                                XElement nameElement3 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement3.Value = instanceInputEndpointsItem.Name;
                                instanceInputEndpointElement.Add(nameElement3);
                                
                                XElement protocolElement3 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                protocolElement3.Value = instanceInputEndpointsItem.Protocol;
                                instanceInputEndpointElement.Add(protocolElement3);
                                
                                XElement localPortElement2 = new XElement(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                localPortElement2.Value = instanceInputEndpointsItem.LocalPort;
                                instanceInputEndpointElement.Add(localPortElement2);
                                
                                XElement fixedPortMinElement = new XElement(XName.Get("FixedPortMin", "http://schemas.microsoft.com/windowsazure"));
                                fixedPortMinElement.Value = instanceInputEndpointsItem.FixedPortMin.ToString();
                                instanceInputEndpointElement.Add(fixedPortMinElement);
                                
                                XElement fixedPortMaxElement = new XElement(XName.Get("FixedPortMax", "http://schemas.microsoft.com/windowsazure"));
                                fixedPortMaxElement.Value = instanceInputEndpointsItem.FixedPortMax.ToString();
                                instanceInputEndpointElement.Add(fixedPortMaxElement);
                            }
                            endpointsElement.Add(instanceInputEndpointsSequenceElement);
                        }
                    }
                }
                
                if (parameters.PublicConfigurationSchema != null)
                {
                    XElement publicConfigurationSchemaElement = new XElement(XName.Get("PublicConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                    publicConfigurationSchemaElement.Value = TypeConversion.ToBase64String(parameters.PublicConfigurationSchema);
                    extensionImageElement.Add(publicConfigurationSchemaElement);
                }
                
                if (parameters.PrivateConfigurationSchema != null)
                {
                    XElement privateConfigurationSchemaElement = new XElement(XName.Get("PrivateConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                    privateConfigurationSchemaElement.Value = TypeConversion.ToBase64String(parameters.PrivateConfigurationSchema);
                    extensionImageElement.Add(privateConfigurationSchemaElement);
                }
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    extensionImageElement.Add(descriptionElement);
                }
                
                if (parameters.PublisherName != null)
                {
                    XElement publisherNameElement = new XElement(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                    publisherNameElement.Value = parameters.PublisherName;
                    extensionImageElement.Add(publisherNameElement);
                }
                
                if (parameters.PublishedDate != null)
                {
                    XElement publishedDateElement = new XElement(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                    publishedDateElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.PublishedDate.Value.ToUniversalTime());
                    extensionImageElement.Add(publishedDateElement);
                }
                
                if (parameters.LocalResources != null)
                {
                    XElement localResourcesSequenceElement = new XElement(XName.Get("LocalResources", "http://schemas.microsoft.com/windowsazure"));
                    foreach (ExtensionLocalResourceConfiguration localResourcesItem in parameters.LocalResources)
                    {
                        XElement localResourceElement = new XElement(XName.Get("LocalResource", "http://schemas.microsoft.com/windowsazure"));
                        localResourcesSequenceElement.Add(localResourceElement);
                        
                        XElement nameElement4 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        nameElement4.Value = localResourcesItem.Name;
                        localResourceElement.Add(nameElement4);
                        
                        if (localResourcesItem.SizeInMB != null)
                        {
                            XElement sizeInMBElement = new XElement(XName.Get("SizeInMB", "http://schemas.microsoft.com/windowsazure"));
                            sizeInMBElement.Value = localResourcesItem.SizeInMB.ToString();
                            localResourceElement.Add(sizeInMBElement);
                        }
                    }
                    extensionImageElement.Add(localResourcesSequenceElement);
                }
                
                if (parameters.BlockRoleUponFailure != null)
                {
                    XElement blockRoleUponFailureElement = new XElement(XName.Get("BlockRoleUponFailure", "http://schemas.microsoft.com/windowsazure"));
                    blockRoleUponFailureElement.Value = parameters.BlockRoleUponFailure.ToString().ToLower();
                    extensionImageElement.Add(blockRoleUponFailureElement);
                }
                
                if (parameters.IsInternalExtension != null)
                {
                    XElement isInternalExtensionElement = new XElement(XName.Get("IsInternalExtension", "http://schemas.microsoft.com/windowsazure"));
                    isInternalExtensionElement.Value = parameters.IsInternalExtension.ToString().ToLower();
                    extensionImageElement.Add(isInternalExtensionElement);
                }
                
                if (parameters.SampleConfig != null)
                {
                    XElement sampleConfigElement = new XElement(XName.Get("SampleConfig", "http://schemas.microsoft.com/windowsazure"));
                    sampleConfigElement.Value = TypeConversion.ToBase64String(parameters.SampleConfig);
                    extensionImageElement.Add(sampleConfigElement);
                }
                
                if (parameters.ReplicationCompleted != null)
                {
                    XElement replicationCompletedElement = new XElement(XName.Get("ReplicationCompleted", "http://schemas.microsoft.com/windowsazure"));
                    replicationCompletedElement.Value = parameters.ReplicationCompleted.ToString().ToLower();
                    extensionImageElement.Add(replicationCompletedElement);
                }
                
                if (parameters.Eula != null)
                {
                    XElement eulaElement = new XElement(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                    eulaElement.Value = parameters.Eula.AbsoluteUri;
                    extensionImageElement.Add(eulaElement);
                }
                
                if (parameters.PrivacyUri != null)
                {
                    XElement privacyUriElement = new XElement(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                    privacyUriElement.Value = parameters.PrivacyUri.AbsoluteUri;
                    extensionImageElement.Add(privacyUriElement);
                }
                
                if (parameters.HomepageUri != null)
                {
                    XElement homepageUriElement = new XElement(XName.Get("HomepageUri", "http://schemas.microsoft.com/windowsazure"));
                    homepageUriElement.Value = parameters.HomepageUri.AbsoluteUri;
                    extensionImageElement.Add(homepageUriElement);
                }
                
                if (parameters.IsJsonExtension != null)
                {
                    XElement isJsonExtensionElement = new XElement(XName.Get("IsJsonExtension", "http://schemas.microsoft.com/windowsazure"));
                    isJsonExtensionElement.Value = parameters.IsJsonExtension.ToString().ToLower();
                    extensionImageElement.Add(isJsonExtensionElement);
                }
                
                if (parameters.DisallowMajorVersionUpgrade != null)
                {
                    XElement disallowMajorVersionUpgradeElement = new XElement(XName.Get("DisallowMajorVersionUpgrade", "http://schemas.microsoft.com/windowsazure"));
                    disallowMajorVersionUpgradeElement.Value = parameters.DisallowMajorVersionUpgrade.ToString().ToLower();
                    extensionImageElement.Add(disallowMajorVersionUpgradeElement);
                }
                
                if (parameters.SupportedOS != null)
                {
                    XElement supportedOSElement = new XElement(XName.Get("SupportedOS", "http://schemas.microsoft.com/windowsazure"));
                    supportedOSElement.Value = parameters.SupportedOS;
                    extensionImageElement.Add(supportedOSElement);
                }
                
                if (parameters.CompanyName != null)
                {
                    XElement companyNameElement = new XElement(XName.Get("CompanyName", "http://schemas.microsoft.com/windowsazure"));
                    companyNameElement.Value = parameters.CompanyName;
                    extensionImageElement.Add(companyNameElement);
                }
                
                if (parameters.Regions != null)
                {
                    XElement regionsElement = new XElement(XName.Get("Regions", "http://schemas.microsoft.com/windowsazure"));
                    regionsElement.Value = parameters.Regions;
                    extensionImageElement.Add(regionsElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Register a new extension. An extension is identified by the
        /// combination of its ProviderNamespace and Type (case-sensitive
        /// string). It is not allowed to register an extension with the same
        /// identity (i.e. combination of ProviderNamespace and Type) of an
        /// already-registered extension. To register new version of an
        /// existing extension, the Update Extension API should be used.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Register Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> RegisterAsync(ExtensionImageRegisterParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "RegisterAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.ExtensionImages.BeginRegisteringAsync(parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Unregister a version of an extension that was previously registered
        /// using either the Register Extension or Update Extension APIs. An
        /// extension version is identified by the combination of its
        /// ProviderNamespace, Type and Version which are specified when
        /// registering the extension. Unregistering is only allowed for
        /// internal extensions, that is, the extensions for which the
        /// IsInternalExtension field is set to 'true' during registration or
        /// during an update. There is a quota (15) on the number of
        /// extensions that can be registered per subscription. If your
        /// subscription runs out of quota, you will wither need to unregister
        /// some of the internal extensions or contact Azure (same email used
        /// to become a publisher)  to increase the quota.
        /// </summary>
        /// <param name='providerNamespace'>
        /// Required. The provider namespace of the extension image to
        /// unregister.
        /// </param>
        /// <param name='type'>
        /// Required. The type of the extension image to unregister.
        /// </param>
        /// <param name='version'>
        /// Required. The version of the extension image to unregister.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UnregisterAsync(string providerNamespace, string type, string version, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("providerNamespace", providerNamespace);
                tracingParameters.Add("type", type);
                tracingParameters.Add("version", version);
                TracingAdapter.Enter(invocationId, this, "UnregisterAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.ExtensionImages.BeginUnregisteringAsync(providerNamespace, type, version, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Update a new extension. It is allowed to update an extension which
        /// had already been registered with the same identity (i.e.
        /// combination of ProviderNamespace and Type) but with different
        /// version. It will fail if the extension to update has an identity
        /// that has not been registered before, or there is already an
        /// extension with the same identity and same version.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Virtual Machine
        /// Extension Image operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UpdateAsync(ExtensionImageUpdateParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.ExtensionImages.BeginUpdatingAsync(parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
