// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API provides programmatic access to much of the
    /// functionality available through the Management Portal. The Service
    /// Management API is a REST API. All API operations are performed over
    /// SSL, and are mutually authenticated using X.509 v3 certificates.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460799.aspx for
    /// more information)
    /// </summary>
    public static partial class DeploymentOperationsExtensions
    {
        /// <summary>
        /// The Abort Deployment Operation validates and aborts your deployment
        /// for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse AbortMigration(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).AbortMigrationAsync(serviceName, deploymentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Abort Deployment Operation validates and aborts your deployment
        /// for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> AbortMigrationAsync(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return operations.AbortMigrationAsync(serviceName, deploymentName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Abort Deployment Operation validates and aborts your deployment
        /// for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginAbortMigration(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginAbortMigrationAsync(serviceName, deploymentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Abort Deployment Operation validates and aborts your deployment
        /// for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginAbortMigrationAsync(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return operations.BeginAbortMigrationAsync(serviceName, deploymentName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Changing Deployment Configuration By Name operation
        /// initiates a change to the deployment configuration. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Changing Configuration
        /// Deployment By Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginChangingConfigurationByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginChangingConfigurationByNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Changing Deployment Configuration By Name operation
        /// initiates a change to the deployment configuration. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Changing Configuration
        /// Deployment By Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginChangingConfigurationByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters)
        {
            return operations.BeginChangingConfigurationByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Changing Deployment Configuration By Slot operation
        /// initiates a change to the deployment configuration. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Changing Configuration
        /// Deployment By Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginChangingConfigurationBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginChangingConfigurationBySlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Changing Deployment Configuration By Slot operation
        /// initiates a change to the deployment configuration. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Changing Configuration
        /// Deployment By Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginChangingConfigurationBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters)
        {
            return operations.BeginChangingConfigurationBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Commit Deployment Operation validates and commits your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginCommitMigration(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginCommitMigrationAsync(serviceName, deploymentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Commit Deployment Operation validates and commits your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginCommitMigrationAsync(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return operations.BeginCommitMigrationAsync(serviceName, deploymentName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Creating Deployment operation uploads a new service
        /// package and creates a new deployment in the staging or production
        /// environments. This operation is an asynchronous operation. To
        /// determine whether the management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Creating Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginCreating(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginCreatingAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Creating Deployment operation uploads a new service
        /// package and creates a new deployment in the staging or production
        /// environments. This operation is an asynchronous operation. To
        /// determine whether the management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Creating Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginCreatingAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Deleting Deployment By Name operation deletes the
        /// specified deployment. This operation is an asynchronous operation.
        /// To determine whether the Management service has finished
        /// processing the request, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginDeletingByName(this IDeploymentOperations operations, string serviceName, string deploymentName, bool deleteFromStorage)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginDeletingByNameAsync(serviceName, deploymentName, deleteFromStorage);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Deleting Deployment By Name operation deletes the
        /// specified deployment. This operation is an asynchronous operation.
        /// To determine whether the Management service has finished
        /// processing the request, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginDeletingByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, bool deleteFromStorage)
        {
            return operations.BeginDeletingByNameAsync(serviceName, deploymentName, deleteFromStorage, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Deleting Deployment By Slot operation deletes the
        /// specified deployment. This operation is an asynchronous operation.
        /// To determine whether the Management service has finished
        /// processing the request, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginDeletingBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginDeletingBySlotAsync(serviceName, deploymentSlot);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Deleting Deployment By Slot operation deletes the
        /// specified deployment. This operation is an asynchronous operation.
        /// To determine whether the Management service has finished
        /// processing the request, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginDeletingBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            return operations.BeginDeletingBySlotAsync(serviceName, deploymentSlot, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes a role instance from a
        /// deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The name of the deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginDeletingRoleInstanceByBeploymentSlot(this IDeploymentOperations operations, string serviceName, string deploymentSlot, DeploymentDeleteRoleInstanceParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginDeletingRoleInstanceByBeploymentSlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes a role instance from a
        /// deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The name of the deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginDeletingRoleInstanceByBeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, string deploymentSlot, DeploymentDeleteRoleInstanceParameters parameters)
        {
            return operations.BeginDeletingRoleInstanceByBeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes a role instance from a
        /// deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginDeletingRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentDeleteRoleInstanceParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginDeletingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes a role instance from a
        /// deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginDeletingRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentDeleteRoleInstanceParameters parameters)
        {
            return operations.BeginDeletingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Package By Name operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginGettingPackageByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentGetPackageParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginGettingPackageByNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Package By Name operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginGettingPackageByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentGetPackageParameters parameters)
        {
            return operations.BeginGettingPackageByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Package By Slot operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginGettingPackageBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginGettingPackageBySlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Package By Slot operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginGettingPackageBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters)
        {
            return operations.BeginGettingPackageBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Prepare Deployment Operation validates and prepares your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='parameters'>
        /// Required. Deployment Network resource parameters for migration.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginPrepareMigration(this IDeploymentOperations operations, string serviceName, string deploymentName, PrepareDeploymentMigrationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginPrepareMigrationAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Prepare Deployment Operation validates and prepares your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='parameters'>
        /// Required. Deployment Network resource parameters for migration.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginPrepareMigrationAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, PrepareDeploymentMigrationParameters parameters)
        {
            return operations.BeginPrepareMigrationAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Rebooting Role Instance By Deployment Name operation
        /// requests a reboot of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginRebootingRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginRebootingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Rebooting Role Instance By Deployment Name operation
        /// requests a reboot of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginRebootingRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return operations.BeginRebootingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Rebooting Role Instance By Deployment Slot operation
        /// requests a reboot of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginRebootingRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginRebootingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Rebooting Role Instance By Deployment Slot operation
        /// requests a reboot of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginRebootingRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return operations.BeginRebootingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginRebuildingRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName, string resources)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginRebuildingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, resources);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginRebuildingRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName, string resources)
        {
            return operations.BeginRebuildingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, resources, CancellationToken.None);
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginRebuildingRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, string deploymentSlot, string roleInstanceName, string resources)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginRebuildingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, resources);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginRebuildingRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, string deploymentSlot, string roleInstanceName, string resources)
        {
            return operations.BeginRebuildingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, resources, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Reimaging Role Instance By Deployment Name operation
        /// requests a reimage of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginReimagingRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginReimagingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Reimaging Role Instance By Deployment Name operation
        /// requests a reimage of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginReimagingRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return operations.BeginReimagingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Reimaging Role Instance By Deployment Slot operation
        /// requests a reimage of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginReimagingRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginReimagingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Reimaging Role Instance By Deployment Slot operation
        /// requests a reimage of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginReimagingRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return operations.BeginReimagingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Swapping Deployment operation initiates a virtual IP
        /// address swap between the staging and production deployment
        /// environments for a service. If the service is currently running in
        /// the staging environment, it will be swapped to the production
        /// environment. If it is running in the production environment, it
        /// will be swapped to staging. For more information on this type of
        /// upgrade, see Performing Virtual IP Swap Upgrades at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Swapping Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginSwapping(this IDeploymentOperations operations, string serviceName, DeploymentSwapParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginSwappingAsync(serviceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Swapping Deployment operation initiates a virtual IP
        /// address swap between the staging and production deployment
        /// environments for a service. If the service is currently running in
        /// the staging environment, it will be swapped to the production
        /// environment. If it is running in the production environment, it
        /// will be swapped to staging. For more information on this type of
        /// upgrade, see Performing Virtual IP Swap Upgrades at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Swapping Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginSwappingAsync(this IDeploymentOperations operations, string serviceName, DeploymentSwapParameters parameters)
        {
            return operations.BeginSwappingAsync(serviceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Updating Deployment Status By Deployment Name operation
        /// initiates a change in the running status of a deployment. The
        /// status of a deployment can be running or suspended. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Updating Deployment
        /// Status By Deployment Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginUpdatingStatusByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginUpdatingStatusByDeploymentNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Updating Deployment Status By Deployment Name operation
        /// initiates a change in the running status of a deployment. The
        /// status of a deployment can be running or suspended. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Updating Deployment
        /// Status By Deployment Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginUpdatingStatusByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters)
        {
            return operations.BeginUpdatingStatusByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Updating Deployment Status By Deployment Slot operation
        /// initiates a change in the running status of a deployment. The
        /// status of a deployment can be running or suspended. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Updating Deployment
        /// Status By Deployment Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginUpdatingStatusByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginUpdatingStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Updating Deployment Status By Deployment Slot operation
        /// initiates a change in the running status of a deployment. The
        /// status of a deployment can be running or suspended. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Updating Deployment
        /// Status By Deployment Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginUpdatingStatusByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters)
        {
            return operations.BeginUpdatingStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Upgrading Deployment By Name operation initiates an
        /// update of role instances in a deployment using the package and
        /// configuration that you specify. For more information about
        /// updating role instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the request has been processed, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Upgrading Deployment By
        /// Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginUpgradingByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpgradeParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginUpgradingByNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Upgrading Deployment By Name operation initiates an
        /// update of role instances in a deployment using the package and
        /// configuration that you specify. For more information about
        /// updating role instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the request has been processed, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Upgrading Deployment By
        /// Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginUpgradingByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpgradeParameters parameters)
        {
            return operations.BeginUpgradingByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Upgrading Deployment By Slot operation initiates an
        /// update of role instances in a deployment using the package and
        /// configuration that you specify. For more information about
        /// updating role instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.This
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Upgrading Deployment By
        /// Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginUpgradingBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginUpgradingBySlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Upgrading Deployment By Slot operation initiates an
        /// update of role instances in a deployment using the package and
        /// configuration that you specify. For more information about
        /// updating role instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.This
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Upgrading Deployment By
        /// Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginUpgradingBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters)
        {
            return operations.BeginUpgradingBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Walking Upgrade Domain By Deployment Name operation
        /// specifies an update domain in which a role instance must be
        /// updated. For more information about updating role instances, see
        /// Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Walking Upgrade Domain
        /// By Deployment Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginWalkingUpgradeDomainByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginWalkingUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Walking Upgrade Domain By Deployment Name operation
        /// specifies an update domain in which a role instance must be
        /// updated. For more information about updating role instances, see
        /// Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Walking Upgrade Domain
        /// By Deployment Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginWalkingUpgradeDomainByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return operations.BeginWalkingUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Walking Upgrade Domain By Deployment Slot operation
        /// specifies an update domain in which a role instance must be
        /// updated. For more information about updating role instances, see
        /// Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Walking Upgrade Domain
        /// By Deployment Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginWalkingUpgradeDomainByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).BeginWalkingUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Walking Upgrade Domain By Deployment Slot operation
        /// specifies an update domain in which a role instance must be
        /// updated. For more information about updating role instances, see
        /// Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Walking Upgrade Domain
        /// By Deployment Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginWalkingUpgradeDomainByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return operations.BeginWalkingUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Change Deployment Configuration By Name operation initiates a
        /// change to the deployment configuration. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Change ConfigurationDeployment
        /// By Name operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse ChangeConfigurationByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).ChangeConfigurationByNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Change Deployment Configuration By Name operation initiates a
        /// change to the deployment configuration. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Change ConfigurationDeployment
        /// By Name operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> ChangeConfigurationByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters)
        {
            return operations.ChangeConfigurationByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Change Deployment Configuration By Slot operation initiates a
        /// change to the deployment configuration. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Change Configuration
        /// Deployment By Slot operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse ChangeConfigurationBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).ChangeConfigurationBySlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Change Deployment Configuration By Slot operation initiates a
        /// change to the deployment configuration. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Change Configuration
        /// Deployment By Slot operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> ChangeConfigurationBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters)
        {
            return operations.ChangeConfigurationBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Commit Deployment Operation validates and commits your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse CommitMigration(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).CommitMigrationAsync(serviceName, deploymentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Commit Deployment Operation validates and commits your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CommitMigrationAsync(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return operations.CommitMigrationAsync(serviceName, deploymentName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Deployment operation uploads a new service package and
        /// creates a new deployment in the staging or production
        /// environments. This operation is an asynchronous operation. To
        /// determine whether the management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse Create(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).CreateAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Create Deployment operation uploads a new service package and
        /// creates a new deployment in the staging or production
        /// environments. This operation is an asynchronous operation. To
        /// determine whether the management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CreateAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters)
        {
            return operations.CreateAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Deployment By Name operation deletes the specified
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse DeleteByName(this IDeploymentOperations operations, string serviceName, string deploymentName, bool deleteFromStorage)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).DeleteByNameAsync(serviceName, deploymentName, deleteFromStorage);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Deployment By Name operation deletes the specified
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> DeleteByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, bool deleteFromStorage)
        {
            return operations.DeleteByNameAsync(serviceName, deploymentName, deleteFromStorage, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Deployment By Slot operation deletes the specified
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse DeleteBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).DeleteBySlotAsync(serviceName, deploymentSlot);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Deployment By Slot operation deletes the specified
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> DeleteBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            return operations.DeleteBySlotAsync(serviceName, deploymentSlot, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes a role instance from a
        /// deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse DeleteRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentDeleteRoleInstanceParameters roleInstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).DeleteRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes a role instance from a
        /// deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> DeleteRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentDeleteRoleInstanceParameters roleInstanceName)
        {
            return operations.DeleteRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes the role instances from
        /// a deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The name of the deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse DeleteRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, string deploymentSlot, DeploymentDeleteRoleInstanceParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).DeleteRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes the role instances from
        /// a deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The name of the deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> DeleteRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, string deploymentSlot, DeploymentDeleteRoleInstanceParameters parameters)
        {
            return operations.DeleteRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Deployment By Name operation returns configuration
        /// information, status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public static DeploymentGetResponse GetByName(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).GetByNameAsync(serviceName, deploymentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Deployment By Name operation returns configuration
        /// information, status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public static Task<DeploymentGetResponse> GetByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return operations.GetByNameAsync(serviceName, deploymentName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Deployment By Slot operation returns configuration
        /// information, status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public static DeploymentGetResponse GetBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).GetBySlotAsync(serviceName, deploymentSlot);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Deployment By Slot operation returns configuration
        /// information, status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public static Task<DeploymentGetResponse> GetBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            return operations.GetBySlotAsync(serviceName, deploymentSlot, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Package By Name operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Name operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse GetPackageByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentGetPackageParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).GetPackageByNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Package By Name operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Name operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> GetPackageByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentGetPackageParameters parameters)
        {
            return operations.GetPackageByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Package By Slot operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Slot operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse GetPackageBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).GetPackageBySlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Package By Slot operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Slot operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> GetPackageBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters)
        {
            return operations.GetPackageBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='startTime'>
        /// Required. Datetime in UTC representing the start time of the query.
        /// </param>
        /// <param name='endTime'>
        /// Required. Datetime in UTC representing the end time of the query.
        /// </param>
        /// <returns>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </returns>
        public static DeploymentEventListResponse ListEvents(this IDeploymentOperations operations, string serviceName, string deploymentName, DateTime startTime, DateTime endTime)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).ListEventsAsync(serviceName, deploymentName, startTime, endTime);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='startTime'>
        /// Required. Datetime in UTC representing the start time of the query.
        /// </param>
        /// <param name='endTime'>
        /// Required. Datetime in UTC representing the end time of the query.
        /// </param>
        /// <returns>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </returns>
        public static Task<DeploymentEventListResponse> ListEventsAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DateTime startTime, DateTime endTime)
        {
            return operations.ListEventsAsync(serviceName, deploymentName, startTime, endTime, CancellationToken.None);
        }
        
        /// <summary>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='startTime'>
        /// Required. Datetime in UTC representing the start time of the query.
        /// </param>
        /// <param name='endTime'>
        /// Required. Datetime in UTC representing the end time of the query.
        /// </param>
        /// <returns>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </returns>
        public static DeploymentEventListResponse ListEventsBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DateTime startTime, DateTime endTime)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).ListEventsBySlotAsync(serviceName, deploymentSlot, startTime, endTime);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='startTime'>
        /// Required. Datetime in UTC representing the start time of the query.
        /// </param>
        /// <param name='endTime'>
        /// Required. Datetime in UTC representing the end time of the query.
        /// </param>
        /// <returns>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </returns>
        public static Task<DeploymentEventListResponse> ListEventsBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DateTime startTime, DateTime endTime)
        {
            return operations.ListEventsBySlotAsync(serviceName, deploymentSlot, startTime, endTime, CancellationToken.None);
        }
        
        /// <summary>
        /// The Prepare Deployment Operation validates and prepares your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='parameters'>
        /// Required. Deployment Network resource parameters for migration.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse PrepareMigration(this IDeploymentOperations operations, string serviceName, string deploymentName, PrepareDeploymentMigrationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).PrepareMigrationAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Prepare Deployment Operation validates and prepares your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='parameters'>
        /// Required. Deployment Network resource parameters for migration.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> PrepareMigrationAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, PrepareDeploymentMigrationParameters parameters)
        {
            return operations.PrepareMigrationAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reboot Role Instance By Deployment Name operation requests a
        /// reboot of a role instance that is running in a deployment. This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse RebootRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).RebootRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Reboot Role Instance By Deployment Name operation requests a
        /// reboot of a role instance that is running in a deployment. This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RebootRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return operations.RebootRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reboot Role Instance By Deployment Slot operation requests a
        /// reboot of a role instance that is running in a deployment. This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse RebootRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).RebootRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Reboot Role Instance By Deployment Slot operation requests a
        /// reboot of a role instance that is running in a deployment. This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RebootRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return operations.RebootRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse RebuildRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName, string resources)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).RebuildRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, resources);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RebuildRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName, string resources)
        {
            return operations.RebuildRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, resources, CancellationToken.None);
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse RebuildRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, string deploymentSlot, string roleInstanceName, string resources)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).RebuildRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, resources);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RebuildRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, string deploymentSlot, string roleInstanceName, string resources)
        {
            return operations.RebuildRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, resources, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reimage Role Instance By Deployment Name operation requests a
        /// reimage of a role instance that is running in a deployment.This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse ReimageRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).ReimageRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Reimage Role Instance By Deployment Name operation requests a
        /// reimage of a role instance that is running in a deployment.This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> ReimageRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return operations.ReimageRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reimage Role Instance By Deployment Slot operation requests a
        /// reimage of a role instance that is running in a deployment. This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse ReimageRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).ReimageRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Reimage Role Instance By Deployment Slot operation requests a
        /// reimage of a role instance that is running in a deployment. This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> ReimageRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return operations.ReimageRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade By Deployment Name operation cancels
        /// an in-progress configuration update and returns the deployment to
        /// its state before the update was started. This operation can only
        /// be called when an update is in progress on the deployment. The
        /// deployment status can be detected by calling the Get Deployment
        /// operation or Get Hosted Service Properties operation and
        /// inspecting the RollbackAllowed element. If the value returned is
        /// true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Rollback Update Or Upgrade By
        /// Deployment Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse RollbackUpdateOrUpgradeByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentRollbackUpdateOrUpgradeParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).RollbackUpdateOrUpgradeByDeploymentNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade By Deployment Name operation cancels
        /// an in-progress configuration update and returns the deployment to
        /// its state before the update was started. This operation can only
        /// be called when an update is in progress on the deployment. The
        /// deployment status can be detected by calling the Get Deployment
        /// operation or Get Hosted Service Properties operation and
        /// inspecting the RollbackAllowed element. If the value returned is
        /// true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Rollback Update Or Upgrade By
        /// Deployment Name operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RollbackUpdateOrUpgradeByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentRollbackUpdateOrUpgradeParameters parameters)
        {
            return operations.RollbackUpdateOrUpgradeByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade By Deployment Slot operation cancels
        /// an in-progress configuration update and returns the deployment to
        /// its state before the update was started. This operation can only
        /// be called when an update is in progress on the deployment. The
        /// deployment status can be detected by calling the Get Deployment
        /// operation or Get Hosted Service Properties operation and
        /// inspecting the RollbackAllowed element. If the value returned is
        /// true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Rollback Update Or Upgrade By
        /// Deployment Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse RollbackUpdateOrUpgradeByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentRollbackUpdateOrUpgradeParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).RollbackUpdateOrUpgradeByDeploymentSlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade By Deployment Slot operation cancels
        /// an in-progress configuration update and returns the deployment to
        /// its state before the update was started. This operation can only
        /// be called when an update is in progress on the deployment. The
        /// deployment status can be detected by calling the Get Deployment
        /// operation or Get Hosted Service Properties operation and
        /// inspecting the RollbackAllowed element. If the value returned is
        /// true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Rollback Update Or Upgrade By
        /// Deployment Slot operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RollbackUpdateOrUpgradeByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentRollbackUpdateOrUpgradeParameters parameters)
        {
            return operations.RollbackUpdateOrUpgradeByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Swap Deployment operation initiates a virtual IP address swap
        /// between the staging and production deployment environments for a
        /// service. If the service is currently running in the staging
        /// environment, it will be swapped to the production environment. If
        /// it is running in the production environment, it will be swapped to
        /// staging. For more information on this type of upgrade, see
        /// Performing Virtual IP Swap Upgrades at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Swap Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse Swap(this IDeploymentOperations operations, string serviceName, DeploymentSwapParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).SwapAsync(serviceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Swap Deployment operation initiates a virtual IP address swap
        /// between the staging and production deployment environments for a
        /// service. If the service is currently running in the staging
        /// environment, it will be swapped to the production environment. If
        /// it is running in the production environment, it will be swapped to
        /// staging. For more information on this type of upgrade, see
        /// Performing Virtual IP Swap Upgrades at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Swap Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> SwapAsync(this IDeploymentOperations operations, string serviceName, DeploymentSwapParameters parameters)
        {
            return operations.SwapAsync(serviceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Deployment Status By Deployment Name operation initiates
        /// a change in the running status of a deployment. The status of a
        /// deployment can be running or suspended. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Deployment Status By
        /// Deployment Name operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse UpdateStatusByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).UpdateStatusByDeploymentNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Update Deployment Status By Deployment Name operation initiates
        /// a change in the running status of a deployment. The status of a
        /// deployment can be running or suspended. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Deployment Status By
        /// Deployment Name operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> UpdateStatusByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters)
        {
            return operations.UpdateStatusByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Deployment Status By Deployment Slot operation initiates
        /// a change in the running status of a deployment. The status of a
        /// deployment can be running or suspended. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Deployment Status By
        /// Deployment Slot operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse UpdateStatusByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).UpdateStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Update Deployment Status By Deployment Slot operation initiates
        /// a change in the running status of a deployment. The status of a
        /// deployment can be running or suspended. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Deployment Status By
        /// Deployment Slot operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> UpdateStatusByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters)
        {
            return operations.UpdateStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Upgrade Deployment By Name operation initiates an update of
        /// role instances in a deployment using the package and configuration
        /// that you specify. For more information about updating role
        /// instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the request has been processed, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Upgrade Deployment By Name
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse UpgradeByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpgradeParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).UpgradeByNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Upgrade Deployment By Name operation initiates an update of
        /// role instances in a deployment using the package and configuration
        /// that you specify. For more information about updating role
        /// instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the request has been processed, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Upgrade Deployment By Name
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> UpgradeByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpgradeParameters parameters)
        {
            return operations.UpgradeByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Upgrade Deployment By Slot operation initiates an update of
        /// role instances in a deployment using the package and configuration
        /// that you specify. For more information about updating role
        /// instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the request has been processed, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Upgrade Deployment By Slot
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse UpgradeBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).UpgradeBySlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Upgrade Deployment By Slot operation initiates an update of
        /// role instances in a deployment using the package and configuration
        /// that you specify. For more information about updating role
        /// instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the request has been processed, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Upgrade Deployment By Slot
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> UpgradeBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters)
        {
            return operations.UpgradeBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Walk Upgrade Domain By Deployment Name operation specifies an
        /// update domain in which a role instance must be updated. For more
        /// information about updating role instances, see Update an Azure
        /// Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Walk Upgrade Domain By
        /// Deployment Name operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse WalkUpgradeDomainByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).WalkUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Walk Upgrade Domain By Deployment Name operation specifies an
        /// update domain in which a role instance must be updated. For more
        /// information about updating role instances, see Update an Azure
        /// Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Walk Upgrade Domain By
        /// Deployment Name operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> WalkUpgradeDomainByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return operations.WalkUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Walk Upgrade Domain By Deployment Slot operation specifies an
        /// update domain in which a role instance must be updated. For more
        /// information about updating role instances, see Update an Azure
        /// Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Walk Upgrade Domain By
        /// Deployment Slot operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse WalkUpgradeDomainByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeploymentOperations)s).WalkUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Walk Upgrade Domain By Deployment Slot operation specifies an
        /// update domain in which a role instance must be updated. For more
        /// information about updating role instances, see Update an Azure
        /// Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Walk Upgrade Domain By
        /// Deployment Slot operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> WalkUpgradeDomainByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return operations.WalkUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
    }
}
