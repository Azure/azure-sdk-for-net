// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the OS
    /// images in your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157175.aspx for
    /// more information)
    /// </summary>
    internal partial class VirtualMachineOSImageOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineOSImageOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineOSImageOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineOSImageOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Share an already replicated OS image. This operation is only for
        /// publishers. You have to be registered as image publisher with
        /// Windows Azure to be able to call this.
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the virtual machine image to share.
        /// </param>
        /// <param name='permission'>
        /// Required. The sharing permission: public, msdn, or private.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginSharingAsync(string imageName, string permission, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            if (permission == null)
            {
                throw new ArgumentNullException("permission");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                tracingParameters.Add("permission", permission);
                TracingAdapter.Enter(invocationId, this, "BeginSharingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/images/";
            url = url + Uri.EscapeDataString(imageName);
            url = url + "/shareasync";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("permission=" + Uri.EscapeDataString(permission));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unreplicate an OS image to multiple target locations. This
        /// operation is only for publishers. You have to be registered as
        /// image publisher with Windows Azure to be able to call this. Note:
        /// The operation removes the published copies of the user OS Image.
        /// It does not remove the actual user OS Image. To remove the actual
        /// user OS Image, the publisher will have to call Delete OS Image.
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the virtual machine image to replicate. Note:
        /// The OS Image Name should be the user OS Image, not the published
        /// name of the OS Image.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUnreplicatingAsync(string imageName, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                TracingAdapter.Enter(invocationId, this, "BeginUnreplicatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/images/";
            url = url + Uri.EscapeDataString(imageName);
            url = url + "/unreplicate";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create OS Image operation adds an operating system image that
        /// is stored in a storage account and is available from the image
        /// repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157192.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine Image
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Parameters returned from the Create Virtual Machine Image operation.
        /// </returns>
        public async Task<VirtualMachineOSImageCreateResponse> CreateAsync(VirtualMachineOSImageCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.MediaLinkUri == null)
            {
                throw new ArgumentNullException("parameters.MediaLinkUri");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.OperatingSystemType == null)
            {
                throw new ArgumentNullException("parameters.OperatingSystemType");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/images";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement oSImageElement = new XElement(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(oSImageElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = parameters.Label;
                oSImageElement.Add(labelElement);
                
                XElement mediaLinkElement = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                mediaLinkElement.Value = parameters.MediaLinkUri.AbsoluteUri;
                oSImageElement.Add(mediaLinkElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                oSImageElement.Add(nameElement);
                
                XElement osElement = new XElement(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                osElement.Value = parameters.OperatingSystemType;
                oSImageElement.Add(osElement);
                
                if (parameters.Eula != null)
                {
                    XElement eulaElement = new XElement(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                    eulaElement.Value = parameters.Eula;
                    oSImageElement.Add(eulaElement);
                }
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    oSImageElement.Add(descriptionElement);
                }
                
                if (parameters.ImageFamily != null)
                {
                    XElement imageFamilyElement = new XElement(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                    imageFamilyElement.Value = parameters.ImageFamily;
                    oSImageElement.Add(imageFamilyElement);
                }
                
                if (parameters.PublishedDate != null)
                {
                    XElement publishedDateElement = new XElement(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                    publishedDateElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.PublishedDate.Value.ToUniversalTime());
                    oSImageElement.Add(publishedDateElement);
                }
                
                XElement isPremiumElement = new XElement(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                isPremiumElement.Value = parameters.IsPremium.ToString().ToLower();
                oSImageElement.Add(isPremiumElement);
                
                XElement showInGuiElement = new XElement(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                showInGuiElement.Value = parameters.ShowInGui.ToString().ToLower();
                oSImageElement.Add(showInGuiElement);
                
                if (parameters.PrivacyUri != null)
                {
                    XElement privacyUriElement = new XElement(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                    privacyUriElement.Value = parameters.PrivacyUri.AbsoluteUri;
                    oSImageElement.Add(privacyUriElement);
                }
                
                if (parameters.IconUri != null)
                {
                    XElement iconUriElement = new XElement(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                    iconUriElement.Value = parameters.IconUri;
                    oSImageElement.Add(iconUriElement);
                }
                
                if (parameters.RecommendedVMSize != null)
                {
                    XElement recommendedVMSizeElement = new XElement(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                    recommendedVMSizeElement.Value = parameters.RecommendedVMSize;
                    oSImageElement.Add(recommendedVMSizeElement);
                }
                
                if (parameters.SmallIconUri != null)
                {
                    XElement smallIconUriElement = new XElement(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                    smallIconUriElement.Value = parameters.SmallIconUri;
                    oSImageElement.Add(smallIconUriElement);
                }
                
                if (parameters.Language != null)
                {
                    XElement languageElement = new XElement(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                    languageElement.Value = parameters.Language;
                    oSImageElement.Add(languageElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineOSImageCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineOSImageCreateResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement oSImageElement2 = responseDoc.Element(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                        if (oSImageElement2 != null)
                        {
                            XElement locationElement = oSImageElement2.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                            if (locationElement != null)
                            {
                                string locationInstance = locationElement.Value;
                                result.Location = locationInstance;
                            }
                            
                            XElement categoryElement = oSImageElement2.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                            if (categoryElement != null)
                            {
                                string categoryInstance = categoryElement.Value;
                                result.Category = categoryInstance;
                            }
                            
                            XElement labelElement2 = oSImageElement2.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement2 != null)
                            {
                                string labelInstance = labelElement2.Value;
                                result.Label = labelInstance;
                            }
                            
                            XElement logicalSizeInGBElement = oSImageElement2.Element(XName.Get("LogicalSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                            if (logicalSizeInGBElement != null)
                            {
                                double logicalSizeInGBInstance = double.Parse(logicalSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                result.LogicalSizeInGB = logicalSizeInGBInstance;
                            }
                            
                            XElement mediaLinkElement2 = oSImageElement2.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                            if (mediaLinkElement2 != null)
                            {
                                Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                result.MediaLinkUri = mediaLinkInstance;
                            }
                            
                            XElement nameElement2 = oSImageElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null)
                            {
                                string nameInstance = nameElement2.Value;
                                result.Name = nameInstance;
                            }
                            
                            XElement osElement2 = oSImageElement2.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                            if (osElement2 != null)
                            {
                                string osInstance = osElement2.Value;
                                result.OperatingSystemType = osInstance;
                            }
                            
                            XElement eulaElement2 = oSImageElement2.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                            if (eulaElement2 != null)
                            {
                                string eulaInstance = eulaElement2.Value;
                                result.Eula = eulaInstance;
                            }
                            
                            XElement descriptionElement2 = oSImageElement2.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement2 != null)
                            {
                                string descriptionInstance = descriptionElement2.Value;
                                result.Description = descriptionInstance;
                            }
                            
                            XElement imageFamilyElement2 = oSImageElement2.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                            if (imageFamilyElement2 != null)
                            {
                                string imageFamilyInstance = imageFamilyElement2.Value;
                                result.ImageFamily = imageFamilyInstance;
                            }
                            
                            XElement publishedDateElement2 = oSImageElement2.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                            if (publishedDateElement2 != null && !string.IsNullOrEmpty(publishedDateElement2.Value))
                            {
                                DateTime publishedDateInstance = DateTime.Parse(publishedDateElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.PublishedDate = publishedDateInstance;
                            }
                            
                            XElement publisherNameElement = oSImageElement2.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                            if (publisherNameElement != null)
                            {
                                string publisherNameInstance = publisherNameElement.Value;
                                result.PublisherName = publisherNameInstance;
                            }
                            
                            XElement isPremiumElement2 = oSImageElement2.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                            if (isPremiumElement2 != null && !string.IsNullOrEmpty(isPremiumElement2.Value))
                            {
                                bool isPremiumInstance = bool.Parse(isPremiumElement2.Value);
                                result.IsPremium = isPremiumInstance;
                            }
                            
                            XElement showInGuiElement2 = oSImageElement2.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                            if (showInGuiElement2 != null && !string.IsNullOrEmpty(showInGuiElement2.Value))
                            {
                                bool showInGuiInstance = bool.Parse(showInGuiElement2.Value);
                                result.ShowInGui = showInGuiInstance;
                            }
                            
                            XElement privacyUriElement2 = oSImageElement2.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                            if (privacyUriElement2 != null)
                            {
                                Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement2.Value);
                                result.PrivacyUri = privacyUriInstance;
                            }
                            
                            XElement iconUriElement2 = oSImageElement2.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (iconUriElement2 != null)
                            {
                                string iconUriInstance = iconUriElement2.Value;
                                result.IconUri = iconUriInstance;
                            }
                            
                            XElement recommendedVMSizeElement2 = oSImageElement2.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                            if (recommendedVMSizeElement2 != null)
                            {
                                string recommendedVMSizeInstance = recommendedVMSizeElement2.Value;
                                result.RecommendedVMSize = recommendedVMSizeInstance;
                            }
                            
                            XElement smallIconUriElement2 = oSImageElement2.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (smallIconUriElement2 != null)
                            {
                                string smallIconUriInstance = smallIconUriElement2.Value;
                                result.SmallIconUri = smallIconUriInstance;
                            }
                            
                            XElement languageElement2 = oSImageElement2.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                            if (languageElement2 != null)
                            {
                                string languageInstance = languageElement2.Value;
                                result.Language = languageInstance;
                            }
                            
                            XElement iOTypeElement = oSImageElement2.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                            if (iOTypeElement != null)
                            {
                                string iOTypeInstance = iOTypeElement.Value;
                                result.IOType = iOTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete OS Image operation deletes the specified OS image from
        /// your image repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157203.aspx
        /// for more information)
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the image to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob for the image should also
        /// be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string imageName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/images/";
            url = url + Uri.EscapeDataString(imageName);
            List<string> queryParameters = new List<string>();
            if (deleteFromStorage == true)
            {
                queryParameters.Add("comp=media");
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get OS Image operation retrieves the details for an operating
        /// system image from the image repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx
        /// for more information)
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the OS image to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A virtual machine image associated with your subscription.
        /// </returns>
        public async Task<VirtualMachineOSImageGetResponse> GetAsync(string imageName, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/images/";
            url = url + Uri.EscapeDataString(imageName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineOSImageGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineOSImageGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement oSImageElement = responseDoc.Element(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                        if (oSImageElement != null)
                        {
                            XElement affinityGroupElement = oSImageElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                            if (affinityGroupElement != null)
                            {
                                string affinityGroupInstance = affinityGroupElement.Value;
                                result.AffinityGroup = affinityGroupInstance;
                            }
                            
                            XElement categoryElement = oSImageElement.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                            if (categoryElement != null)
                            {
                                string categoryInstance = categoryElement.Value;
                                result.Category = categoryInstance;
                            }
                            
                            XElement labelElement = oSImageElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null)
                            {
                                string labelInstance = labelElement.Value;
                                result.Label = labelInstance;
                            }
                            
                            XElement locationElement = oSImageElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                            if (locationElement != null)
                            {
                                string locationInstance = locationElement.Value;
                                result.Location = locationInstance;
                            }
                            
                            XElement logicalSizeInGBElement = oSImageElement.Element(XName.Get("LogicalSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                            if (logicalSizeInGBElement != null)
                            {
                                double logicalSizeInGBInstance = double.Parse(logicalSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                result.LogicalSizeInGB = logicalSizeInGBInstance;
                            }
                            
                            XElement mediaLinkElement = oSImageElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                            if (mediaLinkElement != null)
                            {
                                Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                result.MediaLinkUri = mediaLinkInstance;
                            }
                            
                            XElement nameElement = oSImageElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                result.Name = nameInstance;
                            }
                            
                            XElement osElement = oSImageElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                            if (osElement != null)
                            {
                                string osInstance = osElement.Value;
                                result.OperatingSystemType = osInstance;
                            }
                            
                            XElement eulaElement = oSImageElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                            if (eulaElement != null)
                            {
                                string eulaInstance = eulaElement.Value;
                                result.Eula = eulaInstance;
                            }
                            
                            XElement descriptionElement = oSImageElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                result.Description = descriptionInstance;
                            }
                            
                            XElement imageFamilyElement = oSImageElement.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                            if (imageFamilyElement != null)
                            {
                                string imageFamilyInstance = imageFamilyElement.Value;
                                result.ImageFamily = imageFamilyInstance;
                            }
                            
                            XElement showInGuiElement = oSImageElement.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                            if (showInGuiElement != null && !string.IsNullOrEmpty(showInGuiElement.Value))
                            {
                                bool showInGuiInstance = bool.Parse(showInGuiElement.Value);
                                result.ShowInGui = showInGuiInstance;
                            }
                            
                            XElement publishedDateElement = oSImageElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                            if (publishedDateElement != null)
                            {
                                DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.PublishedDate = publishedDateInstance;
                            }
                            
                            XElement isPremiumElement = oSImageElement.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                            if (isPremiumElement != null && !string.IsNullOrEmpty(isPremiumElement.Value))
                            {
                                bool isPremiumInstance = bool.Parse(isPremiumElement.Value);
                                result.IsPremium = isPremiumInstance;
                            }
                            
                            XElement iconUriElement = oSImageElement.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (iconUriElement != null)
                            {
                                string iconUriInstance = iconUriElement.Value;
                                result.IconUri = iconUriInstance;
                            }
                            
                            XElement privacyUriElement = oSImageElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                            if (privacyUriElement != null)
                            {
                                Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                                result.PrivacyUri = privacyUriInstance;
                            }
                            
                            XElement recommendedVMSizeElement = oSImageElement.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                            if (recommendedVMSizeElement != null)
                            {
                                string recommendedVMSizeInstance = recommendedVMSizeElement.Value;
                                result.RecommendedVMSize = recommendedVMSizeInstance;
                            }
                            
                            XElement publisherNameElement = oSImageElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                            if (publisherNameElement != null)
                            {
                                string publisherNameInstance = publisherNameElement.Value;
                                result.PublisherName = publisherNameInstance;
                            }
                            
                            XElement smallIconUriElement = oSImageElement.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (smallIconUriElement != null)
                            {
                                string smallIconUriInstance = smallIconUriElement.Value;
                                result.SmallIconUri = smallIconUriInstance;
                            }
                            
                            XElement languageElement = oSImageElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                            if (languageElement != null)
                            {
                                string languageInstance = languageElement.Value;
                                result.Language = languageInstance;
                            }
                            
                            XElement iOTypeElement = oSImageElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                            if (iOTypeElement != null)
                            {
                                string iOTypeInstance = iOTypeElement.Value;
                                result.IOType = iOTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets OS Image's properties and its replication details. This
        /// operation is only for publishers. You have to be registered as
        /// image publisher with Windows Azure to be able to call this.
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the virtual machine image to replicate.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Details OS Images operation response.
        /// </returns>
        public async Task<VirtualMachineOSImageGetDetailsResponse> GetDetailsAsync(string imageName, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                TracingAdapter.Enter(invocationId, this, "GetDetailsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/images/";
            url = url + Uri.EscapeDataString(imageName);
            url = url + "/details";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineOSImageGetDetailsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineOSImageGetDetailsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement oSImageDetailsElement = responseDoc.Element(XName.Get("OSImageDetails", "http://schemas.microsoft.com/windowsazure"));
                        if (oSImageDetailsElement != null)
                        {
                            XElement isCorruptedElement = oSImageDetailsElement.Element(XName.Get("IsCorrupted", "http://schemas.microsoft.com/windowsazure"));
                            if (isCorruptedElement != null && !string.IsNullOrEmpty(isCorruptedElement.Value))
                            {
                                bool isCorruptedInstance = bool.Parse(isCorruptedElement.Value);
                                result.IsCorrupted = isCorruptedInstance;
                            }
                            
                            XElement replicationProgressSequenceElement = oSImageDetailsElement.Element(XName.Get("ReplicationProgress", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationProgressSequenceElement != null)
                            {
                                foreach (XElement replicationProgressElement in replicationProgressSequenceElement.Elements(XName.Get("ReplicationProgressElement", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    VirtualMachineOSImageGetDetailsResponse.ReplicationProgressElement replicationProgressElementInstance = new VirtualMachineOSImageGetDetailsResponse.ReplicationProgressElement();
                                    result.ReplicationProgress.Add(replicationProgressElementInstance);
                                    
                                    XElement locationElement = replicationProgressElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                                    if (locationElement != null)
                                    {
                                        string locationInstance = locationElement.Value;
                                        replicationProgressElementInstance.Location = locationInstance;
                                    }
                                    
                                    XElement progressElement = replicationProgressElement.Element(XName.Get("Progress", "http://schemas.microsoft.com/windowsazure"));
                                    if (progressElement != null)
                                    {
                                        string progressInstance = progressElement.Value;
                                        replicationProgressElementInstance.Progress = progressInstance;
                                    }
                                }
                            }
                            
                            XElement computeImageAttributesElement = oSImageDetailsElement.Element(XName.Get("ComputeImageAttributes", "http://schemas.microsoft.com/windowsazure"));
                            if (computeImageAttributesElement != null)
                            {
                                ComputeImageAttributes computeImageAttributesInstance = new ComputeImageAttributes();
                                result.ComputeImageAttributes = computeImageAttributesInstance;
                                
                                XElement offerElement = computeImageAttributesElement.Element(XName.Get("Offer", "http://schemas.microsoft.com/windowsazure"));
                                if (offerElement != null)
                                {
                                    string offerInstance = offerElement.Value;
                                    computeImageAttributesInstance.Offer = offerInstance;
                                }
                                
                                XElement skuElement = computeImageAttributesElement.Element(XName.Get("Sku", "http://schemas.microsoft.com/windowsazure"));
                                if (skuElement != null)
                                {
                                    string skuInstance = skuElement.Value;
                                    computeImageAttributesInstance.Sku = skuInstance;
                                }
                                
                                XElement versionElement = computeImageAttributesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                if (versionElement != null)
                                {
                                    string versionInstance = versionElement.Value;
                                    computeImageAttributesInstance.Version = versionInstance;
                                }
                            }
                            
                            XElement marketplaceImageAttributesElement = oSImageDetailsElement.Element(XName.Get("MarketplaceImageAttributes", "http://schemas.microsoft.com/windowsazure"));
                            if (marketplaceImageAttributesElement != null)
                            {
                                MarketplaceImageAttributes marketplaceImageAttributesInstance = new MarketplaceImageAttributes();
                                result.MarketplaceImageAttributes = marketplaceImageAttributesInstance;
                                
                                XElement publisherIdElement = marketplaceImageAttributesElement.Element(XName.Get("PublisherId", "http://schemas.microsoft.com/windowsazure"));
                                if (publisherIdElement != null)
                                {
                                    string publisherIdInstance = publisherIdElement.Value;
                                    marketplaceImageAttributesInstance.PublisherId = publisherIdInstance;
                                }
                                
                                XElement planElement = marketplaceImageAttributesElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                                if (planElement != null)
                                {
                                    Plan planInstance = new Plan();
                                    marketplaceImageAttributesInstance.Plan = planInstance;
                                    
                                    XElement nameElement = planElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        planInstance.Name = nameInstance;
                                    }
                                    
                                    XElement publisherElement = planElement.Element(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                                    if (publisherElement != null)
                                    {
                                        string publisherInstance = publisherElement.Value;
                                        planInstance.Publisher = publisherInstance;
                                    }
                                    
                                    XElement productElement = planElement.Element(XName.Get("Product", "http://schemas.microsoft.com/windowsazure"));
                                    if (productElement != null)
                                    {
                                        string productInstance = productElement.Value;
                                        planInstance.Product = productInstance;
                                    }
                                }
                            }
                            
                            XElement affinityGroupElement = oSImageDetailsElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                            if (affinityGroupElement != null)
                            {
                                string affinityGroupInstance = affinityGroupElement.Value;
                                result.AffinityGroup = affinityGroupInstance;
                            }
                            
                            XElement categoryElement = oSImageDetailsElement.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                            if (categoryElement != null)
                            {
                                string categoryInstance = categoryElement.Value;
                                result.Category = categoryInstance;
                            }
                            
                            XElement labelElement = oSImageDetailsElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null)
                            {
                                string labelInstance = labelElement.Value;
                                result.Label = labelInstance;
                            }
                            
                            XElement locationElement2 = oSImageDetailsElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                            if (locationElement2 != null)
                            {
                                string locationInstance2 = locationElement2.Value;
                                result.Location = locationInstance2;
                            }
                            
                            XElement logicalSizeInGBElement = oSImageDetailsElement.Element(XName.Get("LogicalSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                            if (logicalSizeInGBElement != null)
                            {
                                double logicalSizeInGBInstance = double.Parse(logicalSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                result.LogicalSizeInGB = logicalSizeInGBInstance;
                            }
                            
                            XElement mediaLinkElement = oSImageDetailsElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                            if (mediaLinkElement != null)
                            {
                                Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                result.MediaLinkUri = mediaLinkInstance;
                            }
                            
                            XElement nameElement2 = oSImageDetailsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null)
                            {
                                string nameInstance2 = nameElement2.Value;
                                result.Name = nameInstance2;
                            }
                            
                            XElement osElement = oSImageDetailsElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                            if (osElement != null)
                            {
                                string osInstance = osElement.Value;
                                result.OperatingSystemType = osInstance;
                            }
                            
                            XElement eulaElement = oSImageDetailsElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                            if (eulaElement != null)
                            {
                                string eulaInstance = eulaElement.Value;
                                result.Eula = eulaInstance;
                            }
                            
                            XElement descriptionElement = oSImageDetailsElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                result.Description = descriptionInstance;
                            }
                            
                            XElement imageFamilyElement = oSImageDetailsElement.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                            if (imageFamilyElement != null)
                            {
                                string imageFamilyInstance = imageFamilyElement.Value;
                                result.ImageFamily = imageFamilyInstance;
                            }
                            
                            XElement showInGuiElement = oSImageDetailsElement.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                            if (showInGuiElement != null && !string.IsNullOrEmpty(showInGuiElement.Value))
                            {
                                bool showInGuiInstance = bool.Parse(showInGuiElement.Value);
                                result.ShowInGui = showInGuiInstance;
                            }
                            
                            XElement publishedDateElement = oSImageDetailsElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                            if (publishedDateElement != null)
                            {
                                DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.PublishedDate = publishedDateInstance;
                            }
                            
                            XElement isPremiumElement = oSImageDetailsElement.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                            if (isPremiumElement != null && !string.IsNullOrEmpty(isPremiumElement.Value))
                            {
                                bool isPremiumInstance = bool.Parse(isPremiumElement.Value);
                                result.IsPremium = isPremiumInstance;
                            }
                            
                            XElement iconUriElement = oSImageDetailsElement.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (iconUriElement != null)
                            {
                                string iconUriInstance = iconUriElement.Value;
                                result.IconUri = iconUriInstance;
                            }
                            
                            XElement privacyUriElement = oSImageDetailsElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                            if (privacyUriElement != null)
                            {
                                Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                                result.PrivacyUri = privacyUriInstance;
                            }
                            
                            XElement recommendedVMSizeElement = oSImageDetailsElement.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                            if (recommendedVMSizeElement != null)
                            {
                                string recommendedVMSizeInstance = recommendedVMSizeElement.Value;
                                result.RecommendedVMSize = recommendedVMSizeInstance;
                            }
                            
                            XElement publisherNameElement = oSImageDetailsElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                            if (publisherNameElement != null)
                            {
                                string publisherNameInstance = publisherNameElement.Value;
                                result.PublisherName = publisherNameInstance;
                            }
                            
                            XElement smallIconUriElement = oSImageDetailsElement.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (smallIconUriElement != null)
                            {
                                string smallIconUriInstance = smallIconUriElement.Value;
                                result.SmallIconUri = smallIconUriInstance;
                            }
                            
                            XElement languageElement = oSImageDetailsElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                            if (languageElement != null)
                            {
                                string languageInstance = languageElement.Value;
                                result.Language = languageInstance;
                            }
                            
                            XElement iOTypeElement = oSImageDetailsElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                            if (iOTypeElement != null)
                            {
                                string iOTypeInstance = iOTypeElement.Value;
                                result.IOType = iOTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List OS Images operation retrieves a list of the operating
        /// system images from the image repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List OS Images operation response.
        /// </returns>
        public async Task<VirtualMachineOSImageListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/images";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineOSImageListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineOSImageListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement imagesSequenceElement = responseDoc.Element(XName.Get("Images", "http://schemas.microsoft.com/windowsazure"));
                        if (imagesSequenceElement != null)
                        {
                            foreach (XElement imagesElement in imagesSequenceElement.Elements(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure")))
                            {
                                VirtualMachineOSImageListResponse.VirtualMachineOSImage oSImageInstance = new VirtualMachineOSImageListResponse.VirtualMachineOSImage();
                                result.Images.Add(oSImageInstance);
                                
                                XElement affinityGroupElement = imagesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                                if (affinityGroupElement != null)
                                {
                                    string affinityGroupInstance = affinityGroupElement.Value;
                                    oSImageInstance.AffinityGroup = affinityGroupInstance;
                                }
                                
                                XElement categoryElement = imagesElement.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                                if (categoryElement != null)
                                {
                                    string categoryInstance = categoryElement.Value;
                                    oSImageInstance.Category = categoryInstance;
                                }
                                
                                XElement labelElement = imagesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement != null)
                                {
                                    string labelInstance = labelElement.Value;
                                    oSImageInstance.Label = labelInstance;
                                }
                                
                                XElement locationElement = imagesElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                                if (locationElement != null)
                                {
                                    string locationInstance = locationElement.Value;
                                    oSImageInstance.Location = locationInstance;
                                }
                                
                                XElement logicalSizeInGBElement = imagesElement.Element(XName.Get("LogicalSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                if (logicalSizeInGBElement != null)
                                {
                                    double logicalSizeInGBInstance = double.Parse(logicalSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                    oSImageInstance.LogicalSizeInGB = logicalSizeInGBInstance;
                                }
                                
                                XElement mediaLinkElement = imagesElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                if (mediaLinkElement != null)
                                {
                                    Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                    oSImageInstance.MediaLinkUri = mediaLinkInstance;
                                }
                                
                                XElement nameElement = imagesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    oSImageInstance.Name = nameInstance;
                                }
                                
                                XElement osElement = imagesElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                if (osElement != null)
                                {
                                    string osInstance = osElement.Value;
                                    oSImageInstance.OperatingSystemType = osInstance;
                                }
                                
                                XElement eulaElement = imagesElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                                if (eulaElement != null)
                                {
                                    string eulaInstance = eulaElement.Value;
                                    oSImageInstance.Eula = eulaInstance;
                                }
                                
                                XElement descriptionElement = imagesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    oSImageInstance.Description = descriptionInstance;
                                }
                                
                                XElement imageFamilyElement = imagesElement.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                                if (imageFamilyElement != null)
                                {
                                    string imageFamilyInstance = imageFamilyElement.Value;
                                    oSImageInstance.ImageFamily = imageFamilyInstance;
                                }
                                
                                XElement showInGuiElement = imagesElement.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                                if (showInGuiElement != null && !string.IsNullOrEmpty(showInGuiElement.Value))
                                {
                                    bool showInGuiInstance = bool.Parse(showInGuiElement.Value);
                                    oSImageInstance.ShowInGui = showInGuiInstance;
                                }
                                
                                XElement publishedDateElement = imagesElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                                if (publishedDateElement != null)
                                {
                                    DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    oSImageInstance.PublishedDate = publishedDateInstance;
                                }
                                
                                XElement isPremiumElement = imagesElement.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                                if (isPremiumElement != null && !string.IsNullOrEmpty(isPremiumElement.Value))
                                {
                                    bool isPremiumInstance = bool.Parse(isPremiumElement.Value);
                                    oSImageInstance.IsPremium = isPremiumInstance;
                                }
                                
                                XElement privacyUriElement = imagesElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                                if (privacyUriElement != null)
                                {
                                    Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                                    oSImageInstance.PrivacyUri = privacyUriInstance;
                                }
                                
                                XElement recommendedVMSizeElement = imagesElement.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                                if (recommendedVMSizeElement != null)
                                {
                                    string recommendedVMSizeInstance = recommendedVMSizeElement.Value;
                                    oSImageInstance.RecommendedVMSize = recommendedVMSizeInstance;
                                }
                                
                                XElement publisherNameElement = imagesElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                                if (publisherNameElement != null)
                                {
                                    string publisherNameInstance = publisherNameElement.Value;
                                    oSImageInstance.PublisherName = publisherNameInstance;
                                }
                                
                                XElement pricingDetailLinkElement = imagesElement.Element(XName.Get("PricingDetailLink", "http://schemas.microsoft.com/windowsazure"));
                                if (pricingDetailLinkElement != null)
                                {
                                    Uri pricingDetailLinkInstance = TypeConversion.TryParseUri(pricingDetailLinkElement.Value);
                                    oSImageInstance.PricingDetailUri = pricingDetailLinkInstance;
                                }
                                
                                XElement iconUriElement = imagesElement.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                                if (iconUriElement != null)
                                {
                                    string iconUriInstance = iconUriElement.Value;
                                    oSImageInstance.IconUri = iconUriInstance;
                                }
                                
                                XElement smallIconUriElement = imagesElement.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                                if (smallIconUriElement != null)
                                {
                                    string smallIconUriInstance = smallIconUriElement.Value;
                                    oSImageInstance.SmallIconUri = smallIconUriInstance;
                                }
                                
                                XElement languageElement = imagesElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                if (languageElement != null)
                                {
                                    string languageInstance = languageElement.Value;
                                    oSImageInstance.Language = languageInstance;
                                }
                                
                                XElement iOTypeElement = imagesElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                if (iOTypeElement != null)
                                {
                                    string iOTypeInstance = iOTypeElement.Value;
                                    oSImageInstance.IOType = iOTypeInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Replicate an OS image to multiple target locations. This operation
        /// is only for publishers. You have to be registered as image
        /// publisher with Windows Azure to be able to call this.
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the virtual machine OS image to replicate.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Replicate Virtual Machine
        /// Image operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the published name of the image.
        /// </returns>
        public async Task<VirtualMachineOSImageReplicateResponse> ReplicateAsync(string imageName, VirtualMachineOSImageReplicateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ComputeImageAttributes == null)
            {
                throw new ArgumentNullException("parameters.ComputeImageAttributes");
            }
            if (parameters.ComputeImageAttributes.Offer == null)
            {
                throw new ArgumentNullException("parameters.ComputeImageAttributes.Offer");
            }
            if (parameters.ComputeImageAttributes.Sku == null)
            {
                throw new ArgumentNullException("parameters.ComputeImageAttributes.Sku");
            }
            if (parameters.ComputeImageAttributes.Version == null)
            {
                throw new ArgumentNullException("parameters.ComputeImageAttributes.Version");
            }
            if (parameters.MarketplaceImageAttributes != null)
            {
                if (parameters.MarketplaceImageAttributes.Plan == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.Plan");
                }
                if (parameters.MarketplaceImageAttributes.Plan.Name == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.Plan.Name");
                }
                if (parameters.MarketplaceImageAttributes.Plan.Product == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.Plan.Product");
                }
                if (parameters.MarketplaceImageAttributes.Plan.Publisher == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.Plan.Publisher");
                }
                if (parameters.MarketplaceImageAttributes.PublisherId == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.PublisherId");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ReplicateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/images/";
            url = url + Uri.EscapeDataString(imageName);
            url = url + "/replicate";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement replicationInputElement = new XElement(XName.Get("ReplicationInput", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(replicationInputElement);
                
                if (parameters.TargetLocations != null)
                {
                    if (parameters.TargetLocations is ILazyCollection == false || ((ILazyCollection)parameters.TargetLocations).IsInitialized)
                    {
                        XElement targetLocationsSequenceElement = new XElement(XName.Get("TargetLocations", "http://schemas.microsoft.com/windowsazure"));
                        foreach (string targetLocationsItem in parameters.TargetLocations)
                        {
                            XElement targetLocationsItemElement = new XElement(XName.Get("Region", "http://schemas.microsoft.com/windowsazure"));
                            targetLocationsItemElement.Value = targetLocationsItem;
                            targetLocationsSequenceElement.Add(targetLocationsItemElement);
                        }
                        replicationInputElement.Add(targetLocationsSequenceElement);
                    }
                }
                
                XElement computeImageAttributesElement = new XElement(XName.Get("ComputeImageAttributes", "http://schemas.microsoft.com/windowsazure"));
                replicationInputElement.Add(computeImageAttributesElement);
                
                XElement offerElement = new XElement(XName.Get("Offer", "http://schemas.microsoft.com/windowsazure"));
                offerElement.Value = parameters.ComputeImageAttributes.Offer;
                computeImageAttributesElement.Add(offerElement);
                
                XElement skuElement = new XElement(XName.Get("Sku", "http://schemas.microsoft.com/windowsazure"));
                skuElement.Value = parameters.ComputeImageAttributes.Sku;
                computeImageAttributesElement.Add(skuElement);
                
                XElement versionElement = new XElement(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                versionElement.Value = parameters.ComputeImageAttributes.Version;
                computeImageAttributesElement.Add(versionElement);
                
                if (parameters.MarketplaceImageAttributes != null)
                {
                    XElement marketplaceImageAttributesElement = new XElement(XName.Get("MarketplaceImageAttributes", "http://schemas.microsoft.com/windowsazure"));
                    replicationInputElement.Add(marketplaceImageAttributesElement);
                    
                    XElement publisherIdElement = new XElement(XName.Get("PublisherId", "http://schemas.microsoft.com/windowsazure"));
                    publisherIdElement.Value = parameters.MarketplaceImageAttributes.PublisherId;
                    marketplaceImageAttributesElement.Add(publisherIdElement);
                    
                    XElement planElement = new XElement(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                    marketplaceImageAttributesElement.Add(planElement);
                    
                    XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                    nameElement.Value = parameters.MarketplaceImageAttributes.Plan.Name;
                    planElement.Add(nameElement);
                    
                    XElement publisherElement = new XElement(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                    publisherElement.Value = parameters.MarketplaceImageAttributes.Plan.Publisher;
                    planElement.Add(publisherElement);
                    
                    XElement productElement = new XElement(XName.Get("Product", "http://schemas.microsoft.com/windowsazure"));
                    productElement.Value = parameters.MarketplaceImageAttributes.Plan.Product;
                    planElement.Add(productElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineOSImageReplicateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineOSImageReplicateResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement virtualMachineOSImageReplicateResponseElement = responseDoc.Element(XName.Get("VirtualMachineOSImageReplicateResponse", ""));
                        if (virtualMachineOSImageReplicateResponseElement != null)
                        {
                            XElement stringElement = virtualMachineOSImageReplicateResponseElement.Element(XName.Get("string", ""));
                            if (stringElement != null)
                            {
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Share an already replicated OS image. This operation is only for
        /// publishers. You have to be registered as image publisher with
        /// Windows Azure to be able to call this.
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the virtual machine image to share.
        /// </param>
        /// <param name='permission'>
        /// Required. The sharing permission: public, msdn, or private.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> ShareAsync(string imageName, string permission, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                tracingParameters.Add("permission", permission);
                TracingAdapter.Enter(invocationId, this, "ShareAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachineOSImages.BeginSharingAsync(imageName, permission, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Unreplicate an OS image to multiple target locations. This
        /// operation is only for publishers. You have to be registered as
        /// image publisher with Windows Azure to be able to call this. Note:
        /// The operation removes the published copies of the user OS Image.
        /// It does not remove the actual user OS Image. To remove the actual
        /// user OS Image, the publisher will have to call Delete OS Image.
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the virtual machine image to replicate. Note:
        /// The OS Image Name should be the user OS Image, not the published
        /// name of the OS Image.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UnreplicateAsync(string imageName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                TracingAdapter.Enter(invocationId, this, "UnreplicateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachineOSImages.BeginUnreplicatingAsync(imageName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Update OS Image operation updates an OS image that in your
        /// image repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157198.aspx
        /// for more information)
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the virtual machine image to be updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Virtual Machine Image
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Parameters returned from the Create Virtual Machine Image operation.
        /// </returns>
        public async Task<VirtualMachineOSImageUpdateResponse> UpdateAsync(string imageName, VirtualMachineOSImageUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/images/";
            url = url + Uri.EscapeDataString(imageName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement oSImageElement = new XElement(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(oSImageElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = parameters.Label;
                oSImageElement.Add(labelElement);
                
                if (parameters.Eula != null)
                {
                    XElement eulaElement = new XElement(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                    eulaElement.Value = parameters.Eula;
                    oSImageElement.Add(eulaElement);
                }
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    oSImageElement.Add(descriptionElement);
                }
                
                if (parameters.ImageFamily != null)
                {
                    XElement imageFamilyElement = new XElement(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                    imageFamilyElement.Value = parameters.ImageFamily;
                    oSImageElement.Add(imageFamilyElement);
                }
                
                if (parameters.ShowInGui != null)
                {
                    XElement showInGuiElement = new XElement(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                    showInGuiElement.Value = parameters.ShowInGui.ToString().ToLower();
                    oSImageElement.Add(showInGuiElement);
                }
                
                if (parameters.PublishedDate != null)
                {
                    XElement publishedDateElement = new XElement(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                    publishedDateElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.PublishedDate.Value.ToUniversalTime());
                    oSImageElement.Add(publishedDateElement);
                }
                
                if (parameters.IsPremium != null)
                {
                    XElement isPremiumElement = new XElement(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                    isPremiumElement.Value = parameters.IsPremium.ToString().ToLower();
                    oSImageElement.Add(isPremiumElement);
                }
                
                if (parameters.PrivacyUri != null)
                {
                    XElement privacyUriElement = new XElement(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                    privacyUriElement.Value = parameters.PrivacyUri.AbsoluteUri;
                    oSImageElement.Add(privacyUriElement);
                }
                
                if (parameters.IconUri != null)
                {
                    XElement iconUriElement = new XElement(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                    iconUriElement.Value = parameters.IconUri;
                    oSImageElement.Add(iconUriElement);
                }
                
                if (parameters.RecommendedVMSize != null)
                {
                    XElement recommendedVMSizeElement = new XElement(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                    recommendedVMSizeElement.Value = parameters.RecommendedVMSize;
                    oSImageElement.Add(recommendedVMSizeElement);
                }
                
                if (parameters.SmallIconUri != null)
                {
                    XElement smallIconUriElement = new XElement(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                    smallIconUriElement.Value = parameters.SmallIconUri;
                    oSImageElement.Add(smallIconUriElement);
                }
                
                if (parameters.Language != null)
                {
                    XElement languageElement = new XElement(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                    languageElement.Value = parameters.Language;
                    oSImageElement.Add(languageElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineOSImageUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineOSImageUpdateResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement oSImageElement2 = responseDoc.Element(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                        if (oSImageElement2 != null)
                        {
                            XElement locationElement = oSImageElement2.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                            if (locationElement != null)
                            {
                                string locationInstance = locationElement.Value;
                                result.Location = locationInstance;
                            }
                            
                            XElement categoryElement = oSImageElement2.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                            if (categoryElement != null)
                            {
                                string categoryInstance = categoryElement.Value;
                                result.Category = categoryInstance;
                            }
                            
                            XElement labelElement2 = oSImageElement2.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement2 != null)
                            {
                                string labelInstance = labelElement2.Value;
                                result.Label = labelInstance;
                            }
                            
                            XElement logicalSizeInGBElement = oSImageElement2.Element(XName.Get("LogicalSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                            if (logicalSizeInGBElement != null)
                            {
                                double logicalSizeInGBInstance = double.Parse(logicalSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                result.LogicalSizeInGB = logicalSizeInGBInstance;
                            }
                            
                            XElement mediaLinkElement = oSImageElement2.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                            if (mediaLinkElement != null)
                            {
                                Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                result.MediaLinkUri = mediaLinkInstance;
                            }
                            
                            XElement nameElement = oSImageElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                result.Name = nameInstance;
                            }
                            
                            XElement osElement = oSImageElement2.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                            if (osElement != null)
                            {
                                string osInstance = osElement.Value;
                                result.OperatingSystemType = osInstance;
                            }
                            
                            XElement eulaElement2 = oSImageElement2.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                            if (eulaElement2 != null)
                            {
                                string eulaInstance = eulaElement2.Value;
                                result.Eula = eulaInstance;
                            }
                            
                            XElement descriptionElement2 = oSImageElement2.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement2 != null)
                            {
                                string descriptionInstance = descriptionElement2.Value;
                                result.Description = descriptionInstance;
                            }
                            
                            XElement imageFamilyElement2 = oSImageElement2.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                            if (imageFamilyElement2 != null)
                            {
                                string imageFamilyInstance = imageFamilyElement2.Value;
                                result.ImageFamily = imageFamilyInstance;
                            }
                            
                            XElement publishedDateElement2 = oSImageElement2.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                            if (publishedDateElement2 != null && !string.IsNullOrEmpty(publishedDateElement2.Value))
                            {
                                DateTime publishedDateInstance = DateTime.Parse(publishedDateElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.PublishedDate = publishedDateInstance;
                            }
                            
                            XElement publisherNameElement = oSImageElement2.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                            if (publisherNameElement != null)
                            {
                                string publisherNameInstance = publisherNameElement.Value;
                                result.PublisherName = publisherNameInstance;
                            }
                            
                            XElement isPremiumElement2 = oSImageElement2.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                            if (isPremiumElement2 != null && !string.IsNullOrEmpty(isPremiumElement2.Value))
                            {
                                bool isPremiumInstance = bool.Parse(isPremiumElement2.Value);
                                result.IsPremium = isPremiumInstance;
                            }
                            
                            XElement showInGuiElement2 = oSImageElement2.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                            if (showInGuiElement2 != null && !string.IsNullOrEmpty(showInGuiElement2.Value))
                            {
                                bool showInGuiInstance = bool.Parse(showInGuiElement2.Value);
                                result.ShowInGui = showInGuiInstance;
                            }
                            
                            XElement privacyUriElement2 = oSImageElement2.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                            if (privacyUriElement2 != null)
                            {
                                Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement2.Value);
                                result.PrivacyUri = privacyUriInstance;
                            }
                            
                            XElement iconUriElement2 = oSImageElement2.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (iconUriElement2 != null)
                            {
                                string iconUriInstance = iconUriElement2.Value;
                                result.IconUri = iconUriInstance;
                            }
                            
                            XElement recommendedVMSizeElement2 = oSImageElement2.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                            if (recommendedVMSizeElement2 != null)
                            {
                                string recommendedVMSizeInstance = recommendedVMSizeElement2.Value;
                                result.RecommendedVMSize = recommendedVMSizeInstance;
                            }
                            
                            XElement smallIconUriElement2 = oSImageElement2.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (smallIconUriElement2 != null)
                            {
                                string smallIconUriInstance = smallIconUriElement2.Value;
                                result.SmallIconUri = smallIconUriInstance;
                            }
                            
                            XElement languageElement2 = oSImageElement2.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                            if (languageElement2 != null)
                            {
                                string languageInstance = languageElement2.Value;
                                result.Language = languageInstance;
                            }
                            
                            XElement iOTypeElement = oSImageElement2.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                            if (iOTypeElement != null)
                            {
                                string iOTypeInstance = iOTypeElement.Value;
                                result.IOType = iOTypeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
