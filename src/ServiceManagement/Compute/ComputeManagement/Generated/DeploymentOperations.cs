// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the
    /// deployments in your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460812.aspx for
    /// more information)
    /// </summary>
    internal partial class DeploymentOperations : IServiceOperations<ComputeManagementClient>, IDeploymentOperations
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DeploymentOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Abort Deployment Operation validates and aborts your deployment
        /// for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> AbortMigrationAsync(string serviceName, string deploymentName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                TracingAdapter.Enter(invocationId, this, "AbortMigrationAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginAbortMigrationAsync(serviceName, deploymentName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Abort Deployment Operation validates and aborts your deployment
        /// for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginAbortMigrationAsync(string serviceName, string deploymentName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                TracingAdapter.Enter(invocationId, this, "BeginAbortMigrationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/migration";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=abort");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Changing Deployment Configuration By Name operation
        /// initiates a change to the deployment configuration. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Changing Configuration
        /// Deployment By Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginChangingConfigurationByNameAsync(string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                if (parameters.ExtensionConfiguration.AllRoles != null)
                {
                    foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                    {
                        if (allRolesParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                        }
                    }
                }
                if (parameters.ExtensionConfiguration.NamedRoles != null)
                {
                    foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                    {
                        if (namedRolesParameterItem.Extensions == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                        }
                        if (namedRolesParameterItem.Extensions != null)
                        {
                            foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                            {
                                if (extensionsParameterItem.Id == null)
                                {
                                    throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                                }
                            }
                        }
                        if (namedRolesParameterItem.RoleName == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginChangingConfigurationByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=config");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement changeConfigurationElement = new XElement(XName.Get("ChangeConfiguration", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(changeConfigurationElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                changeConfigurationElement.Add(configurationElement);
                
                if (parameters.TreatWarningsAsError != null)
                {
                    XElement treatWarningsAsErrorElement = new XElement(XName.Get("TreatWarningsAsError", "http://schemas.microsoft.com/windowsazure"));
                    treatWarningsAsErrorElement.Value = parameters.TreatWarningsAsError.ToString().ToLower();
                    changeConfigurationElement.Add(treatWarningsAsErrorElement);
                }
                
                if (parameters.Mode != null)
                {
                    XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                    modeElement.Value = parameters.Mode.ToString();
                    changeConfigurationElement.Add(modeElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    if (parameters.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)parameters.ExtendedProperties).IsInitialized)
                    {
                        XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                        foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                        {
                            string extendedPropertiesKey = pair.Key;
                            string extendedPropertiesValue = pair.Value;
                            XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                            
                            XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                            extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                            
                            XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesValueElement.Value = extendedPropertiesValue;
                            extendedPropertiesElement.Add(extendedPropertiesValueElement);
                        }
                        changeConfigurationElement.Add(extendedPropertiesDictionaryElement);
                    }
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    changeConfigurationElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.AllRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.AllRoles).IsInitialized)
                        {
                            XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                            {
                                XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                allRolesSequenceElement.Add(extensionElement);
                                
                                XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement.Value = allRolesItem.Id;
                                extensionElement.Add(idElement);
                                
                                if (allRolesItem.State != null)
                                {
                                    XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    stateElement.Value = allRolesItem.State;
                                    extensionElement.Add(stateElement);
                                }
                            }
                            extensionConfigurationElement.Add(allRolesSequenceElement);
                        }
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.NamedRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.NamedRoles).IsInitialized)
                        {
                            XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                            {
                                XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                                namedRolesSequenceElement.Add(roleElement);
                                
                                XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                roleNameElement.Value = namedRolesItem.RoleName;
                                roleElement.Add(roleNameElement);
                                
                                if (namedRolesItem.Extensions is ILazyCollection == false || ((ILazyCollection)namedRolesItem.Extensions).IsInitialized)
                                {
                                    XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                                    {
                                        XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                        extensionsSequenceElement.Add(extensionElement2);
                                        
                                        XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                        idElement2.Value = extensionsItem.Id;
                                        extensionElement2.Add(idElement2);
                                        
                                        if (extensionsItem.State != null)
                                        {
                                            XElement stateElement2 = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                            stateElement2.Value = extensionsItem.State;
                                            extensionElement2.Add(stateElement2);
                                        }
                                    }
                                    roleElement.Add(extensionsSequenceElement);
                                }
                            }
                            extensionConfigurationElement.Add(namedRolesSequenceElement);
                        }
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Changing Deployment Configuration By Slot operation
        /// initiates a change to the deployment configuration. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Changing Configuration
        /// Deployment By Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginChangingConfigurationBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                if (parameters.ExtensionConfiguration.AllRoles != null)
                {
                    foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                    {
                        if (allRolesParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                        }
                    }
                }
                if (parameters.ExtensionConfiguration.NamedRoles != null)
                {
                    foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                    {
                        if (namedRolesParameterItem.Extensions == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                        }
                        if (namedRolesParameterItem.Extensions != null)
                        {
                            foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                            {
                                if (extensionsParameterItem.Id == null)
                                {
                                    throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                                }
                            }
                        }
                        if (namedRolesParameterItem.RoleName == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginChangingConfigurationBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=config");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement changeConfigurationElement = new XElement(XName.Get("ChangeConfiguration", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(changeConfigurationElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                changeConfigurationElement.Add(configurationElement);
                
                if (parameters.TreatWarningsAsError != null)
                {
                    XElement treatWarningsAsErrorElement = new XElement(XName.Get("TreatWarningsAsError", "http://schemas.microsoft.com/windowsazure"));
                    treatWarningsAsErrorElement.Value = parameters.TreatWarningsAsError.ToString().ToLower();
                    changeConfigurationElement.Add(treatWarningsAsErrorElement);
                }
                
                if (parameters.Mode != null)
                {
                    XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                    modeElement.Value = parameters.Mode.ToString();
                    changeConfigurationElement.Add(modeElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    if (parameters.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)parameters.ExtendedProperties).IsInitialized)
                    {
                        XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                        foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                        {
                            string extendedPropertiesKey = pair.Key;
                            string extendedPropertiesValue = pair.Value;
                            XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                            
                            XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                            extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                            
                            XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesValueElement.Value = extendedPropertiesValue;
                            extendedPropertiesElement.Add(extendedPropertiesValueElement);
                        }
                        changeConfigurationElement.Add(extendedPropertiesDictionaryElement);
                    }
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    changeConfigurationElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.AllRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.AllRoles).IsInitialized)
                        {
                            XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                            {
                                XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                allRolesSequenceElement.Add(extensionElement);
                                
                                XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement.Value = allRolesItem.Id;
                                extensionElement.Add(idElement);
                                
                                if (allRolesItem.State != null)
                                {
                                    XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    stateElement.Value = allRolesItem.State;
                                    extensionElement.Add(stateElement);
                                }
                            }
                            extensionConfigurationElement.Add(allRolesSequenceElement);
                        }
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.NamedRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.NamedRoles).IsInitialized)
                        {
                            XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                            {
                                XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                                namedRolesSequenceElement.Add(roleElement);
                                
                                XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                roleNameElement.Value = namedRolesItem.RoleName;
                                roleElement.Add(roleNameElement);
                                
                                if (namedRolesItem.Extensions is ILazyCollection == false || ((ILazyCollection)namedRolesItem.Extensions).IsInitialized)
                                {
                                    XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                                    {
                                        XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                        extensionsSequenceElement.Add(extensionElement2);
                                        
                                        XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                        idElement2.Value = extensionsItem.Id;
                                        extensionElement2.Add(idElement2);
                                        
                                        if (extensionsItem.State != null)
                                        {
                                            XElement stateElement2 = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                            stateElement2.Value = extensionsItem.State;
                                            extensionElement2.Add(stateElement2);
                                        }
                                    }
                                    roleElement.Add(extensionsSequenceElement);
                                }
                            }
                            extensionConfigurationElement.Add(namedRolesSequenceElement);
                        }
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Commit Deployment Operation validates and commits your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginCommitMigrationAsync(string serviceName, string deploymentName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                TracingAdapter.Enter(invocationId, this, "BeginCommitMigrationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/migration";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=commit");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Creating Deployment operation uploads a new service
        /// package and creates a new deployment in the staging or production
        /// environments. This operation is an asynchronous operation. To
        /// determine whether the management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Creating Deployment
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginCreatingAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                if (parameters.ExtensionConfiguration.AllRoles != null)
                {
                    foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                    {
                        if (allRolesParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                        }
                    }
                }
                if (parameters.ExtensionConfiguration.NamedRoles != null)
                {
                    foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                    {
                        if (namedRolesParameterItem.Extensions == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                        }
                        if (namedRolesParameterItem.Extensions != null)
                        {
                            foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                            {
                                if (extensionsParameterItem.Id == null)
                                {
                                    throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                                }
                            }
                        }
                        if (namedRolesParameterItem.RoleName == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                        }
                    }
                }
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.Label.Length > 100)
            {
                throw new ArgumentOutOfRangeException("parameters.Label");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.PackageUri == null)
            {
                throw new ArgumentNullException("parameters.PackageUri");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement createDeploymentElement = new XElement(XName.Get("CreateDeployment", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(createDeploymentElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                createDeploymentElement.Add(nameElement);
                
                XElement packageUrlElement = new XElement(XName.Get("PackageUrl", "http://schemas.microsoft.com/windowsazure"));
                packageUrlElement.Value = parameters.PackageUri.AbsoluteUri;
                createDeploymentElement.Add(packageUrlElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                createDeploymentElement.Add(labelElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                createDeploymentElement.Add(configurationElement);
                
                if (parameters.StartDeployment != null)
                {
                    XElement startDeploymentElement = new XElement(XName.Get("StartDeployment", "http://schemas.microsoft.com/windowsazure"));
                    startDeploymentElement.Value = parameters.StartDeployment.ToString().ToLower();
                    createDeploymentElement.Add(startDeploymentElement);
                }
                
                if (parameters.TreatWarningsAsError != null)
                {
                    XElement treatWarningsAsErrorElement = new XElement(XName.Get("TreatWarningsAsError", "http://schemas.microsoft.com/windowsazure"));
                    treatWarningsAsErrorElement.Value = parameters.TreatWarningsAsError.ToString().ToLower();
                    createDeploymentElement.Add(treatWarningsAsErrorElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    if (parameters.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)parameters.ExtendedProperties).IsInitialized)
                    {
                        XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                        foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                        {
                            string extendedPropertiesKey = pair.Key;
                            string extendedPropertiesValue = pair.Value;
                            XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                            
                            XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                            extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                            
                            XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesValueElement.Value = extendedPropertiesValue;
                            extendedPropertiesElement.Add(extendedPropertiesValueElement);
                        }
                        createDeploymentElement.Add(extendedPropertiesDictionaryElement);
                    }
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    createDeploymentElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.AllRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.AllRoles).IsInitialized)
                        {
                            XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                            {
                                XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                allRolesSequenceElement.Add(extensionElement);
                                
                                XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement.Value = allRolesItem.Id;
                                extensionElement.Add(idElement);
                                
                                if (allRolesItem.State != null)
                                {
                                    XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    stateElement.Value = allRolesItem.State;
                                    extensionElement.Add(stateElement);
                                }
                            }
                            extensionConfigurationElement.Add(allRolesSequenceElement);
                        }
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.NamedRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.NamedRoles).IsInitialized)
                        {
                            XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                            {
                                XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                                namedRolesSequenceElement.Add(roleElement);
                                
                                XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                roleNameElement.Value = namedRolesItem.RoleName;
                                roleElement.Add(roleNameElement);
                                
                                if (namedRolesItem.Extensions is ILazyCollection == false || ((ILazyCollection)namedRolesItem.Extensions).IsInitialized)
                                {
                                    XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                                    {
                                        XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                        extensionsSequenceElement.Add(extensionElement2);
                                        
                                        XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                        idElement2.Value = extensionsItem.Id;
                                        extensionElement2.Add(idElement2);
                                        
                                        if (extensionsItem.State != null)
                                        {
                                            XElement stateElement2 = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                            stateElement2.Value = extensionsItem.State;
                                            extensionElement2.Add(stateElement2);
                                        }
                                    }
                                    roleElement.Add(extensionsSequenceElement);
                                }
                            }
                            extensionConfigurationElement.Add(namedRolesSequenceElement);
                        }
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Deleting Deployment By Name operation deletes the
        /// specified deployment. This operation is an asynchronous operation.
        /// To determine whether the Management service has finished
        /// processing the request, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDeletingByNameAsync(string serviceName, string deploymentName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            List<string> queryParameters = new List<string>();
            if (deleteFromStorage == true)
            {
                queryParameters.Add("comp=media");
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Deleting Deployment By Slot operation deletes the
        /// specified deployment. This operation is an asynchronous operation.
        /// To determine whether the Management service has finished
        /// processing the request, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDeletingBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes a role instance from a
        /// deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The name of the deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDeletingRoleInstanceByBeploymentSlotAsync(string serviceName, string deploymentSlot, DeploymentDeleteRoleInstanceParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentSlot == null)
            {
                throw new ArgumentNullException("deploymentSlot");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingRoleInstanceByBeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot);
            url = url + "/roleinstances/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=delete");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (parameters.Name != null)
                {
                    if (parameters.Name is ILazyCollection == false || ((ILazyCollection)parameters.Name).IsInitialized)
                    {
                        XElement roleInstancesSequenceElement = new XElement(XName.Get("RoleInstances", "http://schemas.microsoft.com/windowsazure"));
                        foreach (string roleInstancesItem in parameters.Name)
                        {
                            XElement roleInstancesItemElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            roleInstancesItemElement.Value = roleInstancesItem;
                            roleInstancesSequenceElement.Add(roleInstancesItemElement);
                        }
                        requestDoc.Add(roleInstancesSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes a role instance from a
        /// deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDeletingRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentDeleteRoleInstanceParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=delete");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (parameters.Name != null)
                {
                    if (parameters.Name is ILazyCollection == false || ((ILazyCollection)parameters.Name).IsInitialized)
                    {
                        XElement roleInstancesSequenceElement = new XElement(XName.Get("RoleInstances", "http://schemas.microsoft.com/windowsazure"));
                        foreach (string roleInstancesItem in parameters.Name)
                        {
                            XElement roleInstancesItemElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            roleInstancesItemElement.Value = roleInstancesItem;
                            roleInstancesSequenceElement.Add(roleInstancesItemElement);
                        }
                        requestDoc.Add(roleInstancesSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Package By Name operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginGettingPackageByNameAsync(string serviceName, string deploymentName, DeploymentGetPackageParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ContainerUri == null)
            {
                throw new ArgumentNullException("parameters.ContainerUri");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginGettingPackageByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/package";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("containerUri=" + Uri.EscapeDataString(parameters.ContainerUri.AbsoluteUri) + " +");
            if (parameters.OverwriteExisting != null)
            {
                queryParameters.Add("overwriteExisting=" + Uri.EscapeDataString(parameters.OverwriteExisting.Value.ToString().ToLower()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Package By Slot operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginGettingPackageBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ContainerUri == null)
            {
                throw new ArgumentNullException("parameters.ContainerUri");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginGettingPackageBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            url = url + "/package";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("containerUri=" + Uri.EscapeDataString(parameters.ContainerUri.AbsoluteUri) + " +");
            if (parameters.OverwriteExisting != null)
            {
                queryParameters.Add("overwriteExisting=" + Uri.EscapeDataString(parameters.OverwriteExisting.Value.ToString().ToLower()));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Prepare Deployment Operation validates and prepares your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='parameters'>
        /// Required. Deployment Network resource parameters for migration.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginPrepareMigrationAsync(string serviceName, string deploymentName, PrepareDeploymentMigrationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DestinationVirtualNetwork == null)
            {
                throw new ArgumentNullException("parameters.DestinationVirtualNetwork");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.SubNetName == null)
            {
                throw new ArgumentNullException("parameters.SubNetName");
            }
            if (parameters.VirtualNetworkName == null)
            {
                throw new ArgumentNullException("parameters.VirtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginPrepareMigrationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/migration";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=prepare");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement deploymentNetworkResourceElement = new XElement(XName.Get("DeploymentNetworkResource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(deploymentNetworkResourceElement);
                
                XElement resourceGroupNameElement = new XElement(XName.Get("ResourceGroupName", "http://schemas.microsoft.com/windowsazure"));
                resourceGroupNameElement.Value = parameters.ResourceGroupName;
                deploymentNetworkResourceElement.Add(resourceGroupNameElement);
                
                XElement virtualNetworkNameElement = new XElement(XName.Get("VirtualNetworkName", "http://schemas.microsoft.com/windowsazure"));
                virtualNetworkNameElement.Value = parameters.VirtualNetworkName;
                deploymentNetworkResourceElement.Add(virtualNetworkNameElement);
                
                XElement subNetNameElement = new XElement(XName.Get("SubNetName", "http://schemas.microsoft.com/windowsazure"));
                subNetNameElement.Value = parameters.SubNetName;
                deploymentNetworkResourceElement.Add(subNetNameElement);
                
                XElement destinationVirtualNetworkElement = new XElement(XName.Get("DestinationVirtualNetwork", "http://schemas.microsoft.com/windowsazure"));
                destinationVirtualNetworkElement.Value = parameters.DestinationVirtualNetwork;
                deploymentNetworkResourceElement.Add(destinationVirtualNetworkElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Rebooting Role Instance By Deployment Name operation
        /// requests a reboot of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginRebootingRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                TracingAdapter.Enter(invocationId, this, "BeginRebootingRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(roleInstanceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=reboot");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Rebooting Role Instance By Deployment Slot operation
        /// requests a reboot of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginRebootingRoleInstanceByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                TracingAdapter.Enter(invocationId, this, "BeginRebootingRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(roleInstanceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=reboot");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginRebuildingRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, string resources, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            if (resources == null)
            {
                throw new ArgumentNullException("resources");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                tracingParameters.Add("resources", resources);
                TracingAdapter.Enter(invocationId, this, "BeginRebuildingRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(roleInstanceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=rebuild");
            queryParameters.Add("resources=" + Uri.EscapeDataString(resources));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginRebuildingRoleInstanceByDeploymentSlotAsync(string serviceName, string deploymentSlot, string roleInstanceName, string resources, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentSlot == null)
            {
                throw new ArgumentNullException("deploymentSlot");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            if (resources == null)
            {
                throw new ArgumentNullException("resources");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                tracingParameters.Add("resources", resources);
                TracingAdapter.Enter(invocationId, this, "BeginRebuildingRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(roleInstanceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=rebuild");
            queryParameters.Add("resources=" + Uri.EscapeDataString(resources));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Reimaging Role Instance By Deployment Name operation
        /// requests a reimage of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginReimagingRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                TracingAdapter.Enter(invocationId, this, "BeginReimagingRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(roleInstanceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=reimage");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Reimaging Role Instance By Deployment Slot operation
        /// requests a reimage of a role instance that is running in a
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginReimagingRoleInstanceByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                TracingAdapter.Enter(invocationId, this, "BeginReimagingRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(roleInstanceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=reimage");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Swapping Deployment operation initiates a virtual IP
        /// address swap between the staging and production deployment
        /// environments for a service. If the service is currently running in
        /// the staging environment, it will be swapped to the production
        /// environment. If it is running in the production environment, it
        /// will be swapped to staging. For more information on this type of
        /// upgrade, see Performing Virtual IP Swap Upgrades at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Swapping Deployment
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginSwappingAsync(string serviceName, DeploymentSwapParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.SourceDeployment == null)
            {
                throw new ArgumentNullException("parameters.SourceDeployment");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginSwappingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement swapElement = new XElement(XName.Get("Swap", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(swapElement);
                
                if (parameters.ProductionDeployment != null)
                {
                    XElement productionElement = new XElement(XName.Get("Production", "http://schemas.microsoft.com/windowsazure"));
                    productionElement.Value = parameters.ProductionDeployment;
                    swapElement.Add(productionElement);
                }
                
                XElement sourceDeploymentElement = new XElement(XName.Get("SourceDeployment", "http://schemas.microsoft.com/windowsazure"));
                sourceDeploymentElement.Value = parameters.SourceDeployment;
                swapElement.Add(sourceDeploymentElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Updating Deployment Status By Deployment Name operation
        /// initiates a change in the running status of a deployment. The
        /// status of a deployment can be running or suspended. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Updating Deployment
        /// Status By Deployment Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUpdatingStatusByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingStatusByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=status");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateDeploymentStatusElement = new XElement(XName.Get("UpdateDeploymentStatus", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(updateDeploymentStatusElement);
                
                XElement statusElement = new XElement(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                statusElement.Value = parameters.Status.ToString();
                updateDeploymentStatusElement.Add(statusElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Updating Deployment Status By Deployment Slot operation
        /// initiates a change in the running status of a deployment. The
        /// status of a deployment can be running or suspended. This operation
        /// is an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Updating Deployment
        /// Status By Deployment Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUpdatingStatusByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingStatusByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=status");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateDeploymentStatusElement = new XElement(XName.Get("UpdateDeploymentStatus", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(updateDeploymentStatusElement);
                
                XElement statusElement = new XElement(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                statusElement.Value = parameters.Status.ToString();
                updateDeploymentStatusElement.Add(statusElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Upgrading Deployment By Name operation initiates an
        /// update of role instances in a deployment using the package and
        /// configuration that you specify. For more information about
        /// updating role instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the request has been processed, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Upgrading Deployment By
        /// Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUpgradingByNameAsync(string serviceName, string deploymentName, DeploymentUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                if (parameters.ExtensionConfiguration.AllRoles != null)
                {
                    foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                    {
                        if (allRolesParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                        }
                    }
                }
                if (parameters.ExtensionConfiguration.NamedRoles != null)
                {
                    foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                    {
                        if (namedRolesParameterItem.Extensions == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                        }
                        if (namedRolesParameterItem.Extensions != null)
                        {
                            foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                            {
                                if (extensionsParameterItem.Id == null)
                                {
                                    throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                                }
                            }
                        }
                        if (namedRolesParameterItem.RoleName == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                        }
                    }
                }
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.Label.Length > 100)
            {
                throw new ArgumentOutOfRangeException("parameters.Label");
            }
            if (parameters.PackageUri == null)
            {
                throw new ArgumentNullException("parameters.PackageUri");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpgradingByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=upgrade");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement upgradeDeploymentElement = new XElement(XName.Get("UpgradeDeployment", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(upgradeDeploymentElement);
                
                XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                modeElement.Value = parameters.Mode.ToString();
                upgradeDeploymentElement.Add(modeElement);
                
                XElement packageUrlElement = new XElement(XName.Get("PackageUrl", "http://schemas.microsoft.com/windowsazure"));
                packageUrlElement.Value = parameters.PackageUri.AbsoluteUri;
                upgradeDeploymentElement.Add(packageUrlElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                upgradeDeploymentElement.Add(configurationElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                upgradeDeploymentElement.Add(labelElement);
                
                if (parameters.RoleToUpgrade != null)
                {
                    XElement roleToUpgradeElement = new XElement(XName.Get("RoleToUpgrade", "http://schemas.microsoft.com/windowsazure"));
                    roleToUpgradeElement.Value = parameters.RoleToUpgrade;
                    upgradeDeploymentElement.Add(roleToUpgradeElement);
                }
                
                XElement forceElement = new XElement(XName.Get("Force", "http://schemas.microsoft.com/windowsazure"));
                forceElement.Value = parameters.Force.ToString().ToLower();
                upgradeDeploymentElement.Add(forceElement);
                
                if (parameters.ExtendedProperties != null)
                {
                    if (parameters.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)parameters.ExtendedProperties).IsInitialized)
                    {
                        XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                        foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                        {
                            string extendedPropertiesKey = pair.Key;
                            string extendedPropertiesValue = pair.Value;
                            XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                            
                            XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                            extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                            
                            XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesValueElement.Value = extendedPropertiesValue;
                            extendedPropertiesElement.Add(extendedPropertiesValueElement);
                        }
                        upgradeDeploymentElement.Add(extendedPropertiesDictionaryElement);
                    }
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    upgradeDeploymentElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.AllRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.AllRoles).IsInitialized)
                        {
                            XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                            {
                                XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                allRolesSequenceElement.Add(extensionElement);
                                
                                XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement.Value = allRolesItem.Id;
                                extensionElement.Add(idElement);
                                
                                if (allRolesItem.State != null)
                                {
                                    XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    stateElement.Value = allRolesItem.State;
                                    extensionElement.Add(stateElement);
                                }
                            }
                            extensionConfigurationElement.Add(allRolesSequenceElement);
                        }
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.NamedRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.NamedRoles).IsInitialized)
                        {
                            XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                            {
                                XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                                namedRolesSequenceElement.Add(roleElement);
                                
                                XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                roleNameElement.Value = namedRolesItem.RoleName;
                                roleElement.Add(roleNameElement);
                                
                                if (namedRolesItem.Extensions is ILazyCollection == false || ((ILazyCollection)namedRolesItem.Extensions).IsInitialized)
                                {
                                    XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                                    {
                                        XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                        extensionsSequenceElement.Add(extensionElement2);
                                        
                                        XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                        idElement2.Value = extensionsItem.Id;
                                        extensionElement2.Add(idElement2);
                                        
                                        if (extensionsItem.State != null)
                                        {
                                            XElement stateElement2 = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                            stateElement2.Value = extensionsItem.State;
                                            extensionElement2.Add(stateElement2);
                                        }
                                    }
                                    roleElement.Add(extensionsSequenceElement);
                                }
                            }
                            extensionConfigurationElement.Add(namedRolesSequenceElement);
                        }
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Upgrading Deployment By Slot operation initiates an
        /// update of role instances in a deployment using the package and
        /// configuration that you specify. For more information about
        /// updating role instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.This
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Upgrading Deployment By
        /// Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUpgradingBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                if (parameters.ExtensionConfiguration.AllRoles != null)
                {
                    foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                    {
                        if (allRolesParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                        }
                    }
                }
                if (parameters.ExtensionConfiguration.NamedRoles != null)
                {
                    foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                    {
                        if (namedRolesParameterItem.Extensions == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                        }
                        if (namedRolesParameterItem.Extensions != null)
                        {
                            foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                            {
                                if (extensionsParameterItem.Id == null)
                                {
                                    throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                                }
                            }
                        }
                        if (namedRolesParameterItem.RoleName == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                        }
                    }
                }
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.Label.Length > 100)
            {
                throw new ArgumentOutOfRangeException("parameters.Label");
            }
            if (parameters.PackageUri == null)
            {
                throw new ArgumentNullException("parameters.PackageUri");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpgradingBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=upgrade");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement upgradeDeploymentElement = new XElement(XName.Get("UpgradeDeployment", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(upgradeDeploymentElement);
                
                XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                modeElement.Value = parameters.Mode.ToString();
                upgradeDeploymentElement.Add(modeElement);
                
                XElement packageUrlElement = new XElement(XName.Get("PackageUrl", "http://schemas.microsoft.com/windowsazure"));
                packageUrlElement.Value = parameters.PackageUri.AbsoluteUri;
                upgradeDeploymentElement.Add(packageUrlElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                upgradeDeploymentElement.Add(configurationElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                upgradeDeploymentElement.Add(labelElement);
                
                if (parameters.RoleToUpgrade != null)
                {
                    XElement roleToUpgradeElement = new XElement(XName.Get("RoleToUpgrade", "http://schemas.microsoft.com/windowsazure"));
                    roleToUpgradeElement.Value = parameters.RoleToUpgrade;
                    upgradeDeploymentElement.Add(roleToUpgradeElement);
                }
                
                XElement forceElement = new XElement(XName.Get("Force", "http://schemas.microsoft.com/windowsazure"));
                forceElement.Value = parameters.Force.ToString().ToLower();
                upgradeDeploymentElement.Add(forceElement);
                
                if (parameters.ExtendedProperties != null)
                {
                    if (parameters.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)parameters.ExtendedProperties).IsInitialized)
                    {
                        XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                        foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                        {
                            string extendedPropertiesKey = pair.Key;
                            string extendedPropertiesValue = pair.Value;
                            XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                            
                            XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                            extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                            
                            XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                            extendedPropertiesValueElement.Value = extendedPropertiesValue;
                            extendedPropertiesElement.Add(extendedPropertiesValueElement);
                        }
                        upgradeDeploymentElement.Add(extendedPropertiesDictionaryElement);
                    }
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    upgradeDeploymentElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.AllRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.AllRoles).IsInitialized)
                        {
                            XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                            {
                                XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                allRolesSequenceElement.Add(extensionElement);
                                
                                XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement.Value = allRolesItem.Id;
                                extensionElement.Add(idElement);
                                
                                if (allRolesItem.State != null)
                                {
                                    XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    stateElement.Value = allRolesItem.State;
                                    extensionElement.Add(stateElement);
                                }
                            }
                            extensionConfigurationElement.Add(allRolesSequenceElement);
                        }
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        if (parameters.ExtensionConfiguration.NamedRoles is ILazyCollection == false || ((ILazyCollection)parameters.ExtensionConfiguration.NamedRoles).IsInitialized)
                        {
                            XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                            {
                                XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                                namedRolesSequenceElement.Add(roleElement);
                                
                                XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                roleNameElement.Value = namedRolesItem.RoleName;
                                roleElement.Add(roleNameElement);
                                
                                if (namedRolesItem.Extensions is ILazyCollection == false || ((ILazyCollection)namedRolesItem.Extensions).IsInitialized)
                                {
                                    XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                                    {
                                        XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                        extensionsSequenceElement.Add(extensionElement2);
                                        
                                        XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                        idElement2.Value = extensionsItem.Id;
                                        extensionElement2.Add(idElement2);
                                        
                                        if (extensionsItem.State != null)
                                        {
                                            XElement stateElement2 = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                            stateElement2.Value = extensionsItem.State;
                                            extensionElement2.Add(stateElement2);
                                        }
                                    }
                                    roleElement.Add(extensionsSequenceElement);
                                }
                            }
                            extensionConfigurationElement.Add(namedRolesSequenceElement);
                        }
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Walking Upgrade Domain By Deployment Name operation
        /// specifies an update domain in which a role instance must be
        /// updated. For more information about updating role instances, see
        /// Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Walking Upgrade Domain
        /// By Deployment Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginWalkingUpgradeDomainByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginWalkingUpgradeDomainByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=walkupgradedomain");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement walkUpgradeDomainElement = new XElement(XName.Get("WalkUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(walkUpgradeDomainElement);
                
                XElement upgradeDomainElement = new XElement(XName.Get("UpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                upgradeDomainElement.Value = parameters.UpgradeDomain.ToString();
                walkUpgradeDomainElement.Add(upgradeDomainElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Walking Upgrade Domain By Deployment Slot operation
        /// specifies an update domain in which a role instance must be
        /// updated. For more information about updating role instances, see
        /// Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Walking Upgrade Domain
        /// By Deployment Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginWalkingUpgradeDomainByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginWalkingUpgradeDomainByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=walkupgradedomain");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement walkUpgradeDomainElement = new XElement(XName.Get("WalkUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(walkUpgradeDomainElement);
                
                XElement upgradeDomainElement = new XElement(XName.Get("UpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                upgradeDomainElement.Value = parameters.UpgradeDomain.ToString();
                walkUpgradeDomainElement.Add(upgradeDomainElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Change Deployment Configuration By Name operation initiates a
        /// change to the deployment configuration. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Change ConfigurationDeployment
        /// By Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> ChangeConfigurationByNameAsync(string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ChangeConfigurationByNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginChangingConfigurationByNameAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Change Deployment Configuration By Slot operation initiates a
        /// change to the deployment configuration. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Change Configuration
        /// Deployment By Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> ChangeConfigurationBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ChangeConfigurationBySlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginChangingConfigurationBySlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Commit Deployment Operation validates and commits your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> CommitMigrationAsync(string serviceName, string deploymentName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                TracingAdapter.Enter(invocationId, this, "CommitMigrationAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginCommitMigrationAsync(serviceName, deploymentName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Create Deployment operation uploads a new service package and
        /// creates a new deployment in the staging or production
        /// environments. This operation is an asynchronous operation. To
        /// determine whether the management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> CreateAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginCreatingAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete Deployment By Name operation deletes the specified
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> DeleteByNameAsync(string serviceName, string deploymentName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                TracingAdapter.Enter(invocationId, this, "DeleteByNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginDeletingByNameAsync(serviceName, deploymentName, deleteFromStorage, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete Deployment By Slot operation deletes the specified
        /// deployment. This operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> DeleteBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                TracingAdapter.Enter(invocationId, this, "DeleteBySlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginDeletingBySlotAsync(serviceName, deploymentSlot, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes a role instance from a
        /// deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> DeleteRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentDeleteRoleInstanceParameters roleInstanceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                TracingAdapter.Enter(invocationId, this, "DeleteRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginDeletingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete Role Instances operation deletes the role instances from
        /// a deployment in a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469418.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The name of the deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete the role.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> DeleteRoleInstanceByDeploymentSlotAsync(string serviceName, string deploymentSlot, DeploymentDeleteRoleInstanceParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "DeleteRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginDeletingRoleInstanceByBeploymentSlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get Deployment By Name operation returns configuration
        /// information, status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public async Task<DeploymentGetResponse> GetByNameAsync(string serviceName, string deploymentName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                TracingAdapter.Enter(invocationId, this, "GetByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeploymentGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement deploymentElement = responseDoc.Element(XName.Get("Deployment", "http://schemas.microsoft.com/windowsazure"));
                        if (deploymentElement != null)
                        {
                            XElement nameElement = deploymentElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                result.Name = nameInstance;
                            }
                            
                            XElement deploymentSlotElement = deploymentElement.Element(XName.Get("DeploymentSlot", "http://schemas.microsoft.com/windowsazure"));
                            if (deploymentSlotElement != null)
                            {
                                DeploymentSlot deploymentSlotInstance = ((DeploymentSlot)Enum.Parse(typeof(DeploymentSlot), deploymentSlotElement.Value, true));
                                result.DeploymentSlot = deploymentSlotInstance;
                            }
                            
                            XElement privateIDElement = deploymentElement.Element(XName.Get("PrivateID", "http://schemas.microsoft.com/windowsazure"));
                            if (privateIDElement != null)
                            {
                                string privateIDInstance = privateIDElement.Value;
                                result.PrivateId = privateIDInstance;
                            }
                            
                            XElement statusElement = deploymentElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null)
                            {
                                DeploymentStatus statusInstance = ((DeploymentStatus)Enum.Parse(typeof(DeploymentStatus), statusElement.Value, true));
                                result.Status = statusInstance;
                            }
                            
                            XElement labelElement = deploymentElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null)
                            {
                                string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                                result.Label = labelInstance;
                            }
                            
                            XElement urlElement = deploymentElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                            if (urlElement != null)
                            {
                                Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                                result.Uri = urlInstance;
                            }
                            
                            XElement configurationElement = deploymentElement.Element(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                            if (configurationElement != null)
                            {
                                string configurationInstance = TypeConversion.FromBase64String(configurationElement.Value);
                                result.Configuration = configurationInstance;
                            }
                            
                            XElement roleInstanceListSequenceElement = deploymentElement.Element(XName.Get("RoleInstanceList", "http://schemas.microsoft.com/windowsazure"));
                            if (roleInstanceListSequenceElement != null)
                            {
                                foreach (XElement roleInstanceListElement in roleInstanceListSequenceElement.Elements(XName.Get("RoleInstance", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    RoleInstance roleInstanceInstance = new RoleInstance();
                                    result.RoleInstances.Add(roleInstanceInstance);
                                    
                                    XElement roleNameElement = roleInstanceListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleNameElement != null)
                                    {
                                        string roleNameInstance = roleNameElement.Value;
                                        roleInstanceInstance.RoleName = roleNameInstance;
                                    }
                                    
                                    XElement instanceNameElement = roleInstanceListElement.Element(XName.Get("InstanceName", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceNameElement != null)
                                    {
                                        string instanceNameInstance = instanceNameElement.Value;
                                        roleInstanceInstance.InstanceName = instanceNameInstance;
                                    }
                                    
                                    XElement instanceStatusElement = roleInstanceListElement.Element(XName.Get("InstanceStatus", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceStatusElement != null)
                                    {
                                        string instanceStatusInstance = instanceStatusElement.Value;
                                        roleInstanceInstance.InstanceStatus = instanceStatusInstance;
                                    }
                                    
                                    XElement instanceUpgradeDomainElement = roleInstanceListElement.Element(XName.Get("InstanceUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceUpgradeDomainElement != null && !string.IsNullOrEmpty(instanceUpgradeDomainElement.Value))
                                    {
                                        int instanceUpgradeDomainInstance = int.Parse(instanceUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                        roleInstanceInstance.InstanceUpgradeDomain = instanceUpgradeDomainInstance;
                                    }
                                    
                                    XElement instanceFaultDomainElement = roleInstanceListElement.Element(XName.Get("InstanceFaultDomain", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceFaultDomainElement != null && !string.IsNullOrEmpty(instanceFaultDomainElement.Value))
                                    {
                                        int instanceFaultDomainInstance = int.Parse(instanceFaultDomainElement.Value, CultureInfo.InvariantCulture);
                                        roleInstanceInstance.InstanceFaultDomain = instanceFaultDomainInstance;
                                    }
                                    
                                    XElement instanceSizeElement = roleInstanceListElement.Element(XName.Get("InstanceSize", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceSizeElement != null)
                                    {
                                        string instanceSizeInstance = instanceSizeElement.Value;
                                        roleInstanceInstance.InstanceSize = instanceSizeInstance;
                                    }
                                    
                                    XElement instanceStateDetailsElement = roleInstanceListElement.Element(XName.Get("InstanceStateDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceStateDetailsElement != null)
                                    {
                                        string instanceStateDetailsInstance = instanceStateDetailsElement.Value;
                                        roleInstanceInstance.InstanceStateDetails = instanceStateDetailsInstance;
                                    }
                                    
                                    XElement instanceErrorCodeElement = roleInstanceListElement.Element(XName.Get("InstanceErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceErrorCodeElement != null)
                                    {
                                        string instanceErrorCodeInstance = instanceErrorCodeElement.Value;
                                        roleInstanceInstance.InstanceErrorCode = instanceErrorCodeInstance;
                                    }
                                    
                                    XElement ipAddressElement = roleInstanceListElement.Element(XName.Get("IpAddress", "http://schemas.microsoft.com/windowsazure"));
                                    if (ipAddressElement != null)
                                    {
                                        string ipAddressInstance = ipAddressElement.Value;
                                        roleInstanceInstance.IPAddress = ipAddressInstance;
                                    }
                                    
                                    XElement instanceEndpointsSequenceElement = roleInstanceListElement.Element(XName.Get("InstanceEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement instanceEndpointsElement in instanceEndpointsSequenceElement.Elements(XName.Get("InstanceEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            InstanceEndpoint instanceEndpointInstance = new InstanceEndpoint();
                                            roleInstanceInstance.InstanceEndpoints.Add(instanceEndpointInstance);
                                            
                                            XElement localPortElement = instanceEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (localPortElement != null && !string.IsNullOrEmpty(localPortElement.Value))
                                            {
                                                int localPortInstance = int.Parse(localPortElement.Value, CultureInfo.InvariantCulture);
                                                instanceEndpointInstance.LocalPort = localPortInstance;
                                            }
                                            
                                            XElement nameElement2 = instanceEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement2 != null)
                                            {
                                                string nameInstance2 = nameElement2.Value;
                                                instanceEndpointInstance.Name = nameInstance2;
                                            }
                                            
                                            XElement publicPortElement = instanceEndpointsElement.Element(XName.Get("PublicPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (publicPortElement != null)
                                            {
                                                int publicPortInstance = int.Parse(publicPortElement.Value, CultureInfo.InvariantCulture);
                                                instanceEndpointInstance.Port = publicPortInstance;
                                            }
                                            
                                            XElement protocolElement = instanceEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement != null)
                                            {
                                                string protocolInstance = protocolElement.Value;
                                                instanceEndpointInstance.Protocol = protocolInstance;
                                            }
                                            
                                            XElement vipElement = instanceEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                            if (vipElement != null)
                                            {
                                                string vipInstance = vipElement.Value;
                                                instanceEndpointInstance.VirtualIPAddress = vipInstance;
                                            }
                                            
                                            XElement idleTimeoutInMinutesElement = instanceEndpointsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            if (idleTimeoutInMinutesElement != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement.Value))
                                            {
                                                int idleTimeoutInMinutesInstance = int.Parse(idleTimeoutInMinutesElement.Value, CultureInfo.InvariantCulture);
                                                instanceEndpointInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement guestAgentStatusElement = roleInstanceListElement.Element(XName.Get("GuestAgentStatus", "http://schemas.microsoft.com/windowsazure"));
                                    if (guestAgentStatusElement != null)
                                    {
                                        GuestAgentStatus guestAgentStatusInstance = new GuestAgentStatus();
                                        roleInstanceInstance.GuestAgentStatus = guestAgentStatusInstance;
                                        
                                        XElement protocolVersionElement = guestAgentStatusElement.Element(XName.Get("ProtocolVersion", "http://schemas.microsoft.com/windowsazure"));
                                        if (protocolVersionElement != null)
                                        {
                                            string protocolVersionInstance = protocolVersionElement.Value;
                                            guestAgentStatusInstance.ProtocolVersion = protocolVersionInstance;
                                        }
                                        
                                        XElement timestampElement = guestAgentStatusElement.Element(XName.Get("Timestamp", "http://schemas.microsoft.com/windowsazure"));
                                        if (timestampElement != null && !string.IsNullOrEmpty(timestampElement.Value))
                                        {
                                            DateTime timestampInstance = DateTime.Parse(timestampElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                            guestAgentStatusInstance.Timestamp = timestampInstance;
                                        }
                                        
                                        XElement guestAgentVersionElement = guestAgentStatusElement.Element(XName.Get("GuestAgentVersion", "http://schemas.microsoft.com/windowsazure"));
                                        if (guestAgentVersionElement != null)
                                        {
                                            string guestAgentVersionInstance = guestAgentVersionElement.Value;
                                            guestAgentStatusInstance.GuestAgentVersion = guestAgentVersionInstance;
                                        }
                                        
                                        XElement statusElement2 = guestAgentStatusElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                        if (statusElement2 != null)
                                        {
                                            string statusInstance2 = statusElement2.Value;
                                            guestAgentStatusInstance.Status = statusInstance2;
                                        }
                                        
                                        XElement codeElement = guestAgentStatusElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                        if (codeElement != null && !string.IsNullOrEmpty(codeElement.Value))
                                        {
                                            int codeInstance = int.Parse(codeElement.Value, CultureInfo.InvariantCulture);
                                            guestAgentStatusInstance.Code = codeInstance;
                                        }
                                        
                                        XElement messageElement = guestAgentStatusElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                        if (messageElement != null)
                                        {
                                            GuestAgentMessage messageInstance = new GuestAgentMessage();
                                            guestAgentStatusInstance.Message = messageInstance;
                                            
                                            XElement messageResourceIdElement = messageElement.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                            if (messageResourceIdElement != null)
                                            {
                                                string messageResourceIdInstance = messageResourceIdElement.Value;
                                                messageInstance.MessageResourceId = messageResourceIdInstance;
                                            }
                                            
                                            XElement paramListSequenceElement = messageElement.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                            if (paramListSequenceElement != null)
                                            {
                                                foreach (XElement paramListElement in paramListSequenceElement.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    messageInstance.ParamList.Add(paramListElement.Value);
                                                }
                                            }
                                        }
                                        
                                        XElement formattedMessageElement = guestAgentStatusElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                        if (formattedMessageElement != null)
                                        {
                                            GuestAgentFormattedMessage formattedMessageInstance = new GuestAgentFormattedMessage();
                                            guestAgentStatusInstance.FormattedMessage = formattedMessageInstance;
                                            
                                            XElement languageElement = formattedMessageElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                            if (languageElement != null)
                                            {
                                                string languageInstance = languageElement.Value;
                                                formattedMessageInstance.Language = languageInstance;
                                            }
                                            
                                            XElement messageElement2 = formattedMessageElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                            if (messageElement2 != null)
                                            {
                                                string messageInstance2 = messageElement2.Value;
                                                formattedMessageInstance.Message = messageInstance2;
                                            }
                                        }
                                    }
                                    
                                    XElement resourceExtensionStatusListSequenceElement = roleInstanceListElement.Element(XName.Get("ResourceExtensionStatusList", "http://schemas.microsoft.com/windowsazure"));
                                    if (resourceExtensionStatusListSequenceElement != null)
                                    {
                                        foreach (XElement resourceExtensionStatusListElement in resourceExtensionStatusListSequenceElement.Elements(XName.Get("ResourceExtensionStatus", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ResourceExtensionStatus resourceExtensionStatusInstance = new ResourceExtensionStatus();
                                            roleInstanceInstance.ResourceExtensionStatusList.Add(resourceExtensionStatusInstance);
                                            
                                            XElement handlerNameElement = resourceExtensionStatusListElement.Element(XName.Get("HandlerName", "http://schemas.microsoft.com/windowsazure"));
                                            if (handlerNameElement != null)
                                            {
                                                string handlerNameInstance = handlerNameElement.Value;
                                                resourceExtensionStatusInstance.HandlerName = handlerNameInstance;
                                            }
                                            
                                            XElement versionElement = resourceExtensionStatusListElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                            if (versionElement != null)
                                            {
                                                string versionInstance = versionElement.Value;
                                                resourceExtensionStatusInstance.Version = versionInstance;
                                            }
                                            
                                            XElement statusElement3 = resourceExtensionStatusListElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                            if (statusElement3 != null)
                                            {
                                                string statusInstance3 = statusElement3.Value;
                                                resourceExtensionStatusInstance.Status = statusInstance3;
                                            }
                                            
                                            XElement codeElement2 = resourceExtensionStatusListElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                            if (codeElement2 != null && !string.IsNullOrEmpty(codeElement2.Value))
                                            {
                                                int codeInstance2 = int.Parse(codeElement2.Value, CultureInfo.InvariantCulture);
                                                resourceExtensionStatusInstance.Code = codeInstance2;
                                            }
                                            
                                            XElement messageElement3 = resourceExtensionStatusListElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                            if (messageElement3 != null)
                                            {
                                                GuestAgentMessage messageInstance3 = new GuestAgentMessage();
                                                resourceExtensionStatusInstance.Message = messageInstance3;
                                                
                                                XElement messageResourceIdElement2 = messageElement3.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                if (messageResourceIdElement2 != null)
                                                {
                                                    string messageResourceIdInstance2 = messageResourceIdElement2.Value;
                                                    messageInstance3.MessageResourceId = messageResourceIdInstance2;
                                                }
                                                
                                                XElement paramListSequenceElement2 = messageElement3.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                if (paramListSequenceElement2 != null)
                                                {
                                                    foreach (XElement paramListElement2 in paramListSequenceElement2.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        messageInstance3.ParamList.Add(paramListElement2.Value);
                                                    }
                                                }
                                            }
                                            
                                            XElement formattedMessageElement2 = resourceExtensionStatusListElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                            if (formattedMessageElement2 != null)
                                            {
                                                GuestAgentFormattedMessage formattedMessageInstance2 = new GuestAgentFormattedMessage();
                                                resourceExtensionStatusInstance.FormattedMessage = formattedMessageInstance2;
                                                
                                                XElement languageElement2 = formattedMessageElement2.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                if (languageElement2 != null)
                                                {
                                                    string languageInstance2 = languageElement2.Value;
                                                    formattedMessageInstance2.Language = languageInstance2;
                                                }
                                                
                                                XElement messageElement4 = formattedMessageElement2.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                if (messageElement4 != null)
                                                {
                                                    string messageInstance4 = messageElement4.Value;
                                                    formattedMessageInstance2.Message = messageInstance4;
                                                }
                                            }
                                            
                                            XElement extensionSettingStatusElement = resourceExtensionStatusListElement.Element(XName.Get("ExtensionSettingStatus", "http://schemas.microsoft.com/windowsazure"));
                                            if (extensionSettingStatusElement != null)
                                            {
                                                ResourceExtensionConfigurationStatus extensionSettingStatusInstance = new ResourceExtensionConfigurationStatus();
                                                resourceExtensionStatusInstance.ExtensionSettingStatus = extensionSettingStatusInstance;
                                                
                                                XElement timestampElement2 = extensionSettingStatusElement.Element(XName.Get("Timestamp", "http://schemas.microsoft.com/windowsazure"));
                                                if (timestampElement2 != null && !string.IsNullOrEmpty(timestampElement2.Value))
                                                {
                                                    DateTime timestampInstance2 = DateTime.Parse(timestampElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                    extensionSettingStatusInstance.Timestamp = timestampInstance2;
                                                }
                                                
                                                XElement configurationAppliedTimeElement = extensionSettingStatusElement.Element(XName.Get("ConfigurationAppliedTime", "http://schemas.microsoft.com/windowsazure"));
                                                if (configurationAppliedTimeElement != null && !string.IsNullOrEmpty(configurationAppliedTimeElement.Value))
                                                {
                                                    DateTime configurationAppliedTimeInstance = DateTime.Parse(configurationAppliedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                    extensionSettingStatusInstance.ConfigurationAppliedTime = configurationAppliedTimeInstance;
                                                }
                                                
                                                XElement nameElement3 = extensionSettingStatusElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement3 != null)
                                                {
                                                    string nameInstance3 = nameElement3.Value;
                                                    extensionSettingStatusInstance.Name = nameInstance3;
                                                }
                                                
                                                XElement operationElement = extensionSettingStatusElement.Element(XName.Get("Operation", "http://schemas.microsoft.com/windowsazure"));
                                                if (operationElement != null)
                                                {
                                                    string operationInstance = operationElement.Value;
                                                    extensionSettingStatusInstance.Operation = operationInstance;
                                                }
                                                
                                                XElement statusElement4 = extensionSettingStatusElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                                if (statusElement4 != null)
                                                {
                                                    string statusInstance4 = statusElement4.Value;
                                                    extensionSettingStatusInstance.Status = statusInstance4;
                                                }
                                                
                                                XElement codeElement3 = extensionSettingStatusElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                                if (codeElement3 != null && !string.IsNullOrEmpty(codeElement3.Value))
                                                {
                                                    int codeInstance3 = int.Parse(codeElement3.Value, CultureInfo.InvariantCulture);
                                                    extensionSettingStatusInstance.Code = codeInstance3;
                                                }
                                                
                                                XElement messageElement5 = extensionSettingStatusElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                if (messageElement5 != null)
                                                {
                                                    GuestAgentMessage messageInstance5 = new GuestAgentMessage();
                                                    extensionSettingStatusInstance.Message = messageInstance5;
                                                    
                                                    XElement messageResourceIdElement3 = messageElement5.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                    if (messageResourceIdElement3 != null)
                                                    {
                                                        string messageResourceIdInstance3 = messageResourceIdElement3.Value;
                                                        messageInstance5.MessageResourceId = messageResourceIdInstance3;
                                                    }
                                                    
                                                    XElement paramListSequenceElement3 = messageElement5.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                    if (paramListSequenceElement3 != null)
                                                    {
                                                        foreach (XElement paramListElement3 in paramListSequenceElement3.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            messageInstance5.ParamList.Add(paramListElement3.Value);
                                                        }
                                                    }
                                                }
                                                
                                                XElement formattedMessageElement3 = extensionSettingStatusElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                                if (formattedMessageElement3 != null)
                                                {
                                                    GuestAgentFormattedMessage formattedMessageInstance3 = new GuestAgentFormattedMessage();
                                                    extensionSettingStatusInstance.FormattedMessage = formattedMessageInstance3;
                                                    
                                                    XElement languageElement3 = formattedMessageElement3.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                    if (languageElement3 != null)
                                                    {
                                                        string languageInstance3 = languageElement3.Value;
                                                        formattedMessageInstance3.Language = languageInstance3;
                                                    }
                                                    
                                                    XElement messageElement6 = formattedMessageElement3.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                    if (messageElement6 != null)
                                                    {
                                                        string messageInstance6 = messageElement6.Value;
                                                        formattedMessageInstance3.Message = messageInstance6;
                                                    }
                                                }
                                                
                                                XElement subStatusListSequenceElement = extensionSettingStatusElement.Element(XName.Get("SubStatusList", "http://schemas.microsoft.com/windowsazure"));
                                                if (subStatusListSequenceElement != null)
                                                {
                                                    foreach (XElement subStatusListElement in subStatusListSequenceElement.Elements(XName.Get("SubStatus", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        ResourceExtensionSubStatus subStatusInstance = new ResourceExtensionSubStatus();
                                                        extensionSettingStatusInstance.SubStatusList.Add(subStatusInstance);
                                                        
                                                        XElement nameElement4 = subStatusListElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                        if (nameElement4 != null)
                                                        {
                                                            string nameInstance4 = nameElement4.Value;
                                                            subStatusInstance.Name = nameInstance4;
                                                        }
                                                        
                                                        XElement statusElement5 = subStatusListElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                                        if (statusElement5 != null)
                                                        {
                                                            string statusInstance5 = statusElement5.Value;
                                                            subStatusInstance.Status = statusInstance5;
                                                        }
                                                        
                                                        XElement codeElement4 = subStatusListElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                                        if (codeElement4 != null && !string.IsNullOrEmpty(codeElement4.Value))
                                                        {
                                                            int codeInstance4 = int.Parse(codeElement4.Value, CultureInfo.InvariantCulture);
                                                            subStatusInstance.Code = codeInstance4;
                                                        }
                                                        
                                                        XElement messageElement7 = subStatusListElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                        if (messageElement7 != null)
                                                        {
                                                            GuestAgentMessage messageInstance7 = new GuestAgentMessage();
                                                            subStatusInstance.Message = messageInstance7;
                                                            
                                                            XElement messageResourceIdElement4 = messageElement7.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                            if (messageResourceIdElement4 != null)
                                                            {
                                                                string messageResourceIdInstance4 = messageResourceIdElement4.Value;
                                                                messageInstance7.MessageResourceId = messageResourceIdInstance4;
                                                            }
                                                            
                                                            XElement paramListSequenceElement4 = messageElement7.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                            if (paramListSequenceElement4 != null)
                                                            {
                                                                foreach (XElement paramListElement4 in paramListSequenceElement4.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                                {
                                                                    messageInstance7.ParamList.Add(paramListElement4.Value);
                                                                }
                                                            }
                                                        }
                                                        
                                                        XElement formattedMessageElement4 = subStatusListElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                                        if (formattedMessageElement4 != null)
                                                        {
                                                            GuestAgentFormattedMessage formattedMessageInstance4 = new GuestAgentFormattedMessage();
                                                            subStatusInstance.FormattedMessage = formattedMessageInstance4;
                                                            
                                                            XElement languageElement4 = formattedMessageElement4.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                            if (languageElement4 != null)
                                                            {
                                                                string languageInstance4 = languageElement4.Value;
                                                                formattedMessageInstance4.Language = languageInstance4;
                                                            }
                                                            
                                                            XElement messageElement8 = formattedMessageElement4.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                            if (messageElement8 != null)
                                                            {
                                                                string messageInstance8 = messageElement8.Value;
                                                                formattedMessageInstance4.Message = messageInstance8;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement powerStateElement = roleInstanceListElement.Element(XName.Get("PowerState", "http://schemas.microsoft.com/windowsazure"));
                                    if (powerStateElement != null)
                                    {
                                        RoleInstancePowerState powerStateInstance = ((RoleInstancePowerState)Enum.Parse(typeof(RoleInstancePowerState), powerStateElement.Value, true));
                                        roleInstanceInstance.PowerState = powerStateInstance;
                                    }
                                    
                                    XElement hostNameElement = roleInstanceListElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostNameElement != null)
                                    {
                                        string hostNameInstance = hostNameElement.Value;
                                        roleInstanceInstance.HostName = hostNameInstance;
                                    }
                                    
                                    XElement remoteAccessCertificateThumbprintElement = roleInstanceListElement.Element(XName.Get("RemoteAccessCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                    if (remoteAccessCertificateThumbprintElement != null)
                                    {
                                        string remoteAccessCertificateThumbprintInstance = remoteAccessCertificateThumbprintElement.Value;
                                        roleInstanceInstance.RemoteAccessCertificateThumbprint = remoteAccessCertificateThumbprintInstance;
                                    }
                                    
                                    XElement publicIPsSequenceElement = roleInstanceListElement.Element(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                    if (publicIPsSequenceElement != null)
                                    {
                                        foreach (XElement publicIPsElement in publicIPsSequenceElement.Elements(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            RoleInstance.PublicIP publicIPInstance = new RoleInstance.PublicIP();
                                            roleInstanceInstance.PublicIPs.Add(publicIPInstance);
                                            
                                            XElement nameElement5 = publicIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement5 != null)
                                            {
                                                string nameInstance5 = nameElement5.Value;
                                                publicIPInstance.Name = nameInstance5;
                                            }
                                            
                                            XElement addressElement = publicIPsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                            if (addressElement != null)
                                            {
                                                string addressInstance = addressElement.Value;
                                                publicIPInstance.Address = addressInstance;
                                            }
                                            
                                            XElement idleTimeoutInMinutesElement2 = publicIPsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            if (idleTimeoutInMinutesElement2 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement2.Value))
                                            {
                                                int idleTimeoutInMinutesInstance2 = int.Parse(idleTimeoutInMinutesElement2.Value, CultureInfo.InvariantCulture);
                                                publicIPInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                                            }
                                            
                                            XElement domainNameLabelElement = publicIPsElement.Element(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                            if (domainNameLabelElement != null)
                                            {
                                                string domainNameLabelInstance = domainNameLabelElement.Value;
                                                publicIPInstance.DomainNameLabel = domainNameLabelInstance;
                                            }
                                            
                                            XElement fqdnsSequenceElement = publicIPsElement.Element(XName.Get("Fqdns", "http://schemas.microsoft.com/windowsazure"));
                                            if (fqdnsSequenceElement != null)
                                            {
                                                foreach (XElement fqdnsElement in fqdnsSequenceElement.Elements(XName.Get("Fqdn", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    publicIPInstance.Fqdns.Add(fqdnsElement.Value);
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement networkInterfacesSequenceElement = roleInstanceListElement.Element(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                    if (networkInterfacesSequenceElement != null)
                                    {
                                        foreach (XElement networkInterfacesElement in networkInterfacesSequenceElement.Elements(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            NetworkInterfaceInstance networkInterfaceInstance = new NetworkInterfaceInstance();
                                            roleInstanceInstance.NetworkInterfaces.Add(networkInterfaceInstance);
                                            
                                            XElement nameElement6 = networkInterfacesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement6 != null)
                                            {
                                                string nameInstance6 = nameElement6.Value;
                                                networkInterfaceInstance.Name = nameInstance6;
                                            }
                                            
                                            XElement macAddressElement = networkInterfacesElement.Element(XName.Get("MacAddress", "http://schemas.microsoft.com/windowsazure"));
                                            if (macAddressElement != null)
                                            {
                                                string macAddressInstance = macAddressElement.Value;
                                                networkInterfaceInstance.MacAddress = macAddressInstance;
                                            }
                                            
                                            XElement iPConfigurationsSequenceElement = networkInterfacesElement.Element(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                            if (iPConfigurationsSequenceElement != null)
                                            {
                                                foreach (XElement iPConfigurationsElement in iPConfigurationsSequenceElement.Elements(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    IPConfigurationInstance iPConfigurationInstance = new IPConfigurationInstance();
                                                    networkInterfaceInstance.IPConfigurations.Add(iPConfigurationInstance);
                                                    
                                                    XElement subnetNameElement = iPConfigurationsElement.Element(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (subnetNameElement != null)
                                                    {
                                                        string subnetNameInstance = subnetNameElement.Value;
                                                        iPConfigurationInstance.SubnetName = subnetNameInstance;
                                                    }
                                                    
                                                    XElement addressElement2 = iPConfigurationsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                                    if (addressElement2 != null)
                                                    {
                                                        string addressInstance2 = addressElement2.Value;
                                                        iPConfigurationInstance.Address = addressInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            XElement upgradeStatusElement = deploymentElement.Element(XName.Get("UpgradeStatus", "http://schemas.microsoft.com/windowsazure"));
                            if (upgradeStatusElement != null)
                            {
                                UpgradeStatus upgradeStatusInstance = new UpgradeStatus();
                                result.UpgradeStatus = upgradeStatusInstance;
                                
                                XElement upgradeTypeElement = upgradeStatusElement.Element(XName.Get("UpgradeType", "http://schemas.microsoft.com/windowsazure"));
                                if (upgradeTypeElement != null)
                                {
                                    DeploymentUpgradeType upgradeTypeInstance = ((DeploymentUpgradeType)Enum.Parse(typeof(DeploymentUpgradeType), upgradeTypeElement.Value, true));
                                    upgradeStatusInstance.UpgradeType = upgradeTypeInstance;
                                }
                                
                                XElement currentUpgradeDomainStateElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomainState", "http://schemas.microsoft.com/windowsazure"));
                                if (currentUpgradeDomainStateElement != null)
                                {
                                    UpgradeDomainState currentUpgradeDomainStateInstance = ((UpgradeDomainState)Enum.Parse(typeof(UpgradeDomainState), currentUpgradeDomainStateElement.Value, true));
                                    upgradeStatusInstance.CurrentUpgradeDomainState = currentUpgradeDomainStateInstance;
                                }
                                
                                XElement currentUpgradeDomainElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                if (currentUpgradeDomainElement != null)
                                {
                                    int currentUpgradeDomainInstance = int.Parse(currentUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                    upgradeStatusInstance.CurrentUpgradeDomain = currentUpgradeDomainInstance;
                                }
                            }
                            
                            XElement upgradeDomainCountElement = deploymentElement.Element(XName.Get("UpgradeDomainCount", "http://schemas.microsoft.com/windowsazure"));
                            if (upgradeDomainCountElement != null)
                            {
                                int upgradeDomainCountInstance = int.Parse(upgradeDomainCountElement.Value, CultureInfo.InvariantCulture);
                                result.UpgradeDomainCount = upgradeDomainCountInstance;
                            }
                            
                            XElement roleListSequenceElement = deploymentElement.Element(XName.Get("RoleList", "http://schemas.microsoft.com/windowsazure"));
                            if (roleListSequenceElement != null)
                            {
                                foreach (XElement roleListElement in roleListSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    Role roleInstance = new Role();
                                    result.Roles.Add(roleInstance);
                                    
                                    XElement roleNameElement2 = roleListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleNameElement2 != null)
                                    {
                                        string roleNameInstance2 = roleNameElement2.Value;
                                        roleInstance.RoleName = roleNameInstance2;
                                    }
                                    
                                    XElement osVersionElement = roleListElement.Element(XName.Get("OsVersion", "http://schemas.microsoft.com/windowsazure"));
                                    if (osVersionElement != null)
                                    {
                                        string osVersionInstance = osVersionElement.Value;
                                        roleInstance.OSVersion = osVersionInstance;
                                    }
                                    
                                    XElement roleTypeElement = roleListElement.Element(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleTypeElement != null)
                                    {
                                        string roleTypeInstance = roleTypeElement.Value;
                                        roleInstance.RoleType = roleTypeInstance;
                                    }
                                    
                                    XElement configurationSetsSequenceElement = roleListElement.Element(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                                    if (configurationSetsSequenceElement != null)
                                    {
                                        foreach (XElement configurationSetsElement in configurationSetsSequenceElement.Elements(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                            roleInstance.ConfigurationSets.Add(configurationSetInstance);
                                            
                                            XElement configurationSetTypeElement = configurationSetsElement.Element(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                            if (configurationSetTypeElement != null)
                                            {
                                                string configurationSetTypeInstance = configurationSetTypeElement.Value;
                                                configurationSetInstance.ConfigurationSetType = configurationSetTypeInstance;
                                            }
                                            
                                            XElement inputEndpointsSequenceElement = configurationSetsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                            if (inputEndpointsSequenceElement != null)
                                            {
                                                foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    InputEndpoint inputEndpointInstance = new InputEndpoint();
                                                    configurationSetInstance.InputEndpoints.Add(inputEndpointInstance);
                                                    
                                                    XElement loadBalancedEndpointSetNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (loadBalancedEndpointSetNameElement != null)
                                                    {
                                                        string loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement.Value;
                                                        inputEndpointInstance.LoadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                                                    }
                                                    
                                                    XElement localPortElement2 = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                                    if (localPortElement2 != null && !string.IsNullOrEmpty(localPortElement2.Value))
                                                    {
                                                        int localPortInstance2 = int.Parse(localPortElement2.Value, CultureInfo.InvariantCulture);
                                                        inputEndpointInstance.LocalPort = localPortInstance2;
                                                    }
                                                    
                                                    XElement nameElement7 = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement7 != null)
                                                    {
                                                        string nameInstance7 = nameElement7.Value;
                                                        inputEndpointInstance.Name = nameInstance7;
                                                    }
                                                    
                                                    XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                    if (portElement != null && !string.IsNullOrEmpty(portElement.Value))
                                                    {
                                                        int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                        inputEndpointInstance.Port = portInstance;
                                                    }
                                                    
                                                    XElement loadBalancerProbeElement = inputEndpointsElement.Element(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                                    if (loadBalancerProbeElement != null)
                                                    {
                                                        LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                        inputEndpointInstance.LoadBalancerProbe = loadBalancerProbeInstance;
                                                        
                                                        XElement pathElement = loadBalancerProbeElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                        if (pathElement != null)
                                                        {
                                                            string pathInstance = pathElement.Value;
                                                            loadBalancerProbeInstance.Path = pathInstance;
                                                        }
                                                        
                                                        XElement portElement2 = loadBalancerProbeElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                        if (portElement2 != null)
                                                        {
                                                            int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                            loadBalancerProbeInstance.Port = portInstance2;
                                                        }
                                                        
                                                        XElement protocolElement2 = loadBalancerProbeElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                        if (protocolElement2 != null)
                                                        {
                                                            LoadBalancerProbeTransportProtocol protocolInstance2 = ComputeManagementClient.ParseLoadBalancerProbeTransportProtocol(protocolElement2.Value);
                                                            loadBalancerProbeInstance.Protocol = protocolInstance2;
                                                        }
                                                        
                                                        XElement intervalInSecondsElement = loadBalancerProbeElement.Element(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                        if (intervalInSecondsElement != null && !string.IsNullOrEmpty(intervalInSecondsElement.Value))
                                                        {
                                                            int intervalInSecondsInstance = int.Parse(intervalInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                            loadBalancerProbeInstance.IntervalInSeconds = intervalInSecondsInstance;
                                                        }
                                                        
                                                        XElement timeoutInSecondsElement = loadBalancerProbeElement.Element(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                        if (timeoutInSecondsElement != null && !string.IsNullOrEmpty(timeoutInSecondsElement.Value))
                                                        {
                                                            int timeoutInSecondsInstance = int.Parse(timeoutInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                            loadBalancerProbeInstance.TimeoutInSeconds = timeoutInSecondsInstance;
                                                        }
                                                    }
                                                    
                                                    XElement protocolElement3 = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    if (protocolElement3 != null)
                                                    {
                                                        string protocolInstance3 = protocolElement3.Value;
                                                        inputEndpointInstance.Protocol = protocolInstance3;
                                                    }
                                                    
                                                    XElement vipElement2 = inputEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                                    if (vipElement2 != null)
                                                    {
                                                        string vipInstance2 = vipElement2.Value;
                                                        inputEndpointInstance.VirtualIPAddress = vipInstance2;
                                                    }
                                                    
                                                    XElement enableDirectServerReturnElement = inputEndpointsElement.Element(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                                    if (enableDirectServerReturnElement != null && !string.IsNullOrEmpty(enableDirectServerReturnElement.Value))
                                                    {
                                                        bool enableDirectServerReturnInstance = bool.Parse(enableDirectServerReturnElement.Value);
                                                        inputEndpointInstance.EnableDirectServerReturn = enableDirectServerReturnInstance;
                                                    }
                                                    
                                                    XElement loadBalancerNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancerName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (loadBalancerNameElement != null)
                                                    {
                                                        string loadBalancerNameInstance = loadBalancerNameElement.Value;
                                                        inputEndpointInstance.LoadBalancerName = loadBalancerNameInstance;
                                                    }
                                                    
                                                    XElement endpointAclElement = inputEndpointsElement.Element(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                                    if (endpointAclElement != null)
                                                    {
                                                        EndpointAcl endpointAclInstance = new EndpointAcl();
                                                        inputEndpointInstance.EndpointAcl = endpointAclInstance;
                                                        
                                                        XElement rulesSequenceElement = endpointAclElement.Element(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                        if (rulesSequenceElement != null)
                                                        {
                                                            foreach (XElement rulesElement in rulesSequenceElement.Elements(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                AccessControlListRule ruleInstance = new AccessControlListRule();
                                                                endpointAclInstance.Rules.Add(ruleInstance);
                                                                
                                                                XElement orderElement = rulesElement.Element(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                                if (orderElement != null && !string.IsNullOrEmpty(orderElement.Value))
                                                                {
                                                                    int orderInstance = int.Parse(orderElement.Value, CultureInfo.InvariantCulture);
                                                                    ruleInstance.Order = orderInstance;
                                                                }
                                                                
                                                                XElement actionElement = rulesElement.Element(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                                if (actionElement != null)
                                                                {
                                                                    string actionInstance = actionElement.Value;
                                                                    ruleInstance.Action = actionInstance;
                                                                }
                                                                
                                                                XElement remoteSubnetElement = rulesElement.Element(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                                if (remoteSubnetElement != null)
                                                                {
                                                                    string remoteSubnetInstance = remoteSubnetElement.Value;
                                                                    ruleInstance.RemoteSubnet = remoteSubnetInstance;
                                                                }
                                                                
                                                                XElement descriptionElement = rulesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                                if (descriptionElement != null)
                                                                {
                                                                    string descriptionInstance = descriptionElement.Value;
                                                                    ruleInstance.Description = descriptionInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement idleTimeoutInMinutesElement3 = inputEndpointsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                    if (idleTimeoutInMinutesElement3 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement3.Value))
                                                    {
                                                        int idleTimeoutInMinutesInstance3 = int.Parse(idleTimeoutInMinutesElement3.Value, CultureInfo.InvariantCulture);
                                                        inputEndpointInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance3;
                                                    }
                                                    
                                                    XElement loadBalancerDistributionElement = inputEndpointsElement.Element(XName.Get("LoadBalancerDistribution", "http://schemas.microsoft.com/windowsazure"));
                                                    if (loadBalancerDistributionElement != null)
                                                    {
                                                        string loadBalancerDistributionInstance = loadBalancerDistributionElement.Value;
                                                        inputEndpointInstance.LoadBalancerDistribution = loadBalancerDistributionInstance;
                                                    }
                                                    
                                                    XElement virtualIPNameElement = inputEndpointsElement.Element(XName.Get("VirtualIPName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (virtualIPNameElement != null)
                                                    {
                                                        string virtualIPNameInstance = virtualIPNameElement.Value;
                                                        inputEndpointInstance.VirtualIPName = virtualIPNameInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement subnetNamesSequenceElement = configurationSetsElement.Element(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                            if (subnetNamesSequenceElement != null)
                                            {
                                                foreach (XElement subnetNamesElement in subnetNamesSequenceElement.Elements(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    configurationSetInstance.SubnetNames.Add(subnetNamesElement.Value);
                                                }
                                            }
                                            
                                            XElement staticVirtualNetworkIPAddressElement = configurationSetsElement.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                            if (staticVirtualNetworkIPAddressElement != null)
                                            {
                                                string staticVirtualNetworkIPAddressInstance = staticVirtualNetworkIPAddressElement.Value;
                                                configurationSetInstance.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance;
                                            }
                                            
                                            XElement publicIPsSequenceElement2 = configurationSetsElement.Element(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                            if (publicIPsSequenceElement2 != null)
                                            {
                                                foreach (XElement publicIPsElement2 in publicIPsSequenceElement2.Elements(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    ConfigurationSet.PublicIP publicIPInstance2 = new ConfigurationSet.PublicIP();
                                                    configurationSetInstance.PublicIPs.Add(publicIPInstance2);
                                                    
                                                    XElement nameElement8 = publicIPsElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement8 != null)
                                                    {
                                                        string nameInstance8 = nameElement8.Value;
                                                        publicIPInstance2.Name = nameInstance8;
                                                    }
                                                    
                                                    XElement idleTimeoutInMinutesElement4 = publicIPsElement2.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                    if (idleTimeoutInMinutesElement4 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement4.Value))
                                                    {
                                                        int idleTimeoutInMinutesInstance4 = int.Parse(idleTimeoutInMinutesElement4.Value, CultureInfo.InvariantCulture);
                                                        publicIPInstance2.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance4;
                                                    }
                                                    
                                                    XElement domainNameLabelElement2 = publicIPsElement2.Element(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                                    if (domainNameLabelElement2 != null)
                                                    {
                                                        string domainNameLabelInstance2 = domainNameLabelElement2.Value;
                                                        publicIPInstance2.DomainNameLabel = domainNameLabelInstance2;
                                                    }
                                                }
                                            }
                                            
                                            XElement networkInterfacesSequenceElement2 = configurationSetsElement.Element(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                            if (networkInterfacesSequenceElement2 != null)
                                            {
                                                foreach (XElement networkInterfacesElement2 in networkInterfacesSequenceElement2.Elements(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    NetworkInterface networkInterfaceInstance2 = new NetworkInterface();
                                                    configurationSetInstance.NetworkInterfaces.Add(networkInterfaceInstance2);
                                                    
                                                    XElement nameElement9 = networkInterfacesElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement9 != null)
                                                    {
                                                        string nameInstance9 = nameElement9.Value;
                                                        networkInterfaceInstance2.Name = nameInstance9;
                                                    }
                                                    
                                                    XElement iPConfigurationsSequenceElement2 = networkInterfacesElement2.Element(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                                    if (iPConfigurationsSequenceElement2 != null)
                                                    {
                                                        foreach (XElement iPConfigurationsElement2 in iPConfigurationsSequenceElement2.Elements(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            IPConfiguration iPConfigurationInstance2 = new IPConfiguration();
                                                            networkInterfaceInstance2.IPConfigurations.Add(iPConfigurationInstance2);
                                                            
                                                            XElement subnetNameElement2 = iPConfigurationsElement2.Element(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                            if (subnetNameElement2 != null)
                                                            {
                                                                string subnetNameInstance2 = subnetNameElement2.Value;
                                                                iPConfigurationInstance2.SubnetName = subnetNameInstance2;
                                                            }
                                                            
                                                            XElement staticVirtualNetworkIPAddressElement2 = iPConfigurationsElement2.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                            if (staticVirtualNetworkIPAddressElement2 != null)
                                                            {
                                                                string staticVirtualNetworkIPAddressInstance2 = staticVirtualNetworkIPAddressElement2.Value;
                                                                iPConfigurationInstance2.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement networkSecurityGroupElement = networkInterfacesElement2.Element(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                                    if (networkSecurityGroupElement != null)
                                                    {
                                                        string networkSecurityGroupInstance = networkSecurityGroupElement.Value;
                                                        networkInterfaceInstance2.NetworkSecurityGroup = networkSecurityGroupInstance;
                                                    }
                                                    
                                                    XElement iPForwardingElement = networkInterfacesElement2.Element(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                                    if (iPForwardingElement != null)
                                                    {
                                                        string iPForwardingInstance = iPForwardingElement.Value;
                                                        networkInterfaceInstance2.IPForwarding = iPForwardingInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement networkSecurityGroupElement2 = configurationSetsElement.Element(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                            if (networkSecurityGroupElement2 != null)
                                            {
                                                string networkSecurityGroupInstance2 = networkSecurityGroupElement2.Value;
                                                configurationSetInstance.NetworkSecurityGroup = networkSecurityGroupInstance2;
                                            }
                                            
                                            XElement iPForwardingElement2 = configurationSetsElement.Element(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                            if (iPForwardingElement2 != null)
                                            {
                                                string iPForwardingInstance2 = iPForwardingElement2.Value;
                                                configurationSetInstance.IPForwarding = iPForwardingInstance2;
                                            }
                                            
                                            XElement computerNameElement = configurationSetsElement.Element(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                            if (computerNameElement != null)
                                            {
                                                string computerNameInstance = computerNameElement.Value;
                                                configurationSetInstance.ComputerName = computerNameInstance;
                                            }
                                            
                                            XElement adminPasswordElement = configurationSetsElement.Element(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                            if (adminPasswordElement != null)
                                            {
                                                string adminPasswordInstance = adminPasswordElement.Value;
                                                configurationSetInstance.AdminPassword = adminPasswordInstance;
                                            }
                                            
                                            XElement resetPasswordOnFirstLogonElement = configurationSetsElement.Element(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                            if (resetPasswordOnFirstLogonElement != null && !string.IsNullOrEmpty(resetPasswordOnFirstLogonElement.Value))
                                            {
                                                bool resetPasswordOnFirstLogonInstance = bool.Parse(resetPasswordOnFirstLogonElement.Value);
                                                configurationSetInstance.ResetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                                            }
                                            
                                            XElement enableAutomaticUpdatesElement = configurationSetsElement.Element(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                            if (enableAutomaticUpdatesElement != null && !string.IsNullOrEmpty(enableAutomaticUpdatesElement.Value))
                                            {
                                                bool enableAutomaticUpdatesInstance = bool.Parse(enableAutomaticUpdatesElement.Value);
                                                configurationSetInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                            }
                                            
                                            XElement timeZoneElement = configurationSetsElement.Element(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                            if (timeZoneElement != null)
                                            {
                                                string timeZoneInstance = timeZoneElement.Value;
                                                configurationSetInstance.TimeZone = timeZoneInstance;
                                            }
                                            
                                            XElement domainJoinElement = configurationSetsElement.Element(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                            if (domainJoinElement != null)
                                            {
                                                DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                                configurationSetInstance.DomainJoin = domainJoinInstance;
                                                
                                                XElement credentialsElement = domainJoinElement.Element(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                                if (credentialsElement != null)
                                                {
                                                    DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                                    domainJoinInstance.Credentials = credentialsInstance;
                                                    
                                                    XElement domainElement = credentialsElement.Element(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                                    if (domainElement != null)
                                                    {
                                                        string domainInstance = domainElement.Value;
                                                        credentialsInstance.Domain = domainInstance;
                                                    }
                                                    
                                                    XElement usernameElement = credentialsElement.Element(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                                    if (usernameElement != null)
                                                    {
                                                        string usernameInstance = usernameElement.Value;
                                                        credentialsInstance.UserName = usernameInstance;
                                                    }
                                                    
                                                    XElement passwordElement = credentialsElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                                    if (passwordElement != null)
                                                    {
                                                        string passwordInstance = passwordElement.Value;
                                                        credentialsInstance.Password = passwordInstance;
                                                    }
                                                }
                                                
                                                XElement joinDomainElement = domainJoinElement.Element(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                                if (joinDomainElement != null)
                                                {
                                                    string joinDomainInstance = joinDomainElement.Value;
                                                    domainJoinInstance.DomainToJoin = joinDomainInstance;
                                                }
                                                
                                                XElement machineObjectOUElement = domainJoinElement.Element(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                                if (machineObjectOUElement != null)
                                                {
                                                    string machineObjectOUInstance = machineObjectOUElement.Value;
                                                    domainJoinInstance.LdapMachineObjectOU = machineObjectOUInstance;
                                                }
                                                
                                                XElement provisioningElement = domainJoinElement.Element(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                                if (provisioningElement != null)
                                                {
                                                    DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                                    domainJoinInstance.Provisioning = provisioningInstance;
                                                    
                                                    XElement accountDataElement = provisioningElement.Element(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                                    if (accountDataElement != null)
                                                    {
                                                        string accountDataInstance = accountDataElement.Value;
                                                        provisioningInstance.AccountData = accountDataInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement storedCertificateSettingsSequenceElement = configurationSetsElement.Element(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                            if (storedCertificateSettingsSequenceElement != null)
                                            {
                                                foreach (XElement storedCertificateSettingsElement in storedCertificateSettingsSequenceElement.Elements(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                                    configurationSetInstance.StoredCertificateSettings.Add(certificateSettingInstance);
                                                    
                                                    XElement storeLocationElement = storedCertificateSettingsElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                                    if (storeLocationElement != null)
                                                    {
                                                    }
                                                    
                                                    XElement storeNameElement = storedCertificateSettingsElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (storeNameElement != null)
                                                    {
                                                        string storeNameInstance = storeNameElement.Value;
                                                        certificateSettingInstance.StoreName = storeNameInstance;
                                                    }
                                                    
                                                    XElement thumbprintElement = storedCertificateSettingsElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                    if (thumbprintElement != null)
                                                    {
                                                        string thumbprintInstance = thumbprintElement.Value;
                                                        certificateSettingInstance.Thumbprint = thumbprintInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement winRMElement = configurationSetsElement.Element(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                            if (winRMElement != null)
                                            {
                                                WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                                configurationSetInstance.WindowsRemoteManagement = winRMInstance;
                                                
                                                XElement listenersSequenceElement = winRMElement.Element(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                                if (listenersSequenceElement != null)
                                                {
                                                    foreach (XElement listenersElement in listenersSequenceElement.Elements(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                        winRMInstance.Listeners.Add(listenerInstance);
                                                        
                                                        XElement protocolElement4 = listenersElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                        if (protocolElement4 != null)
                                                        {
                                                            VirtualMachineWindowsRemoteManagementListenerType protocolInstance4 = ((VirtualMachineWindowsRemoteManagementListenerType)Enum.Parse(typeof(VirtualMachineWindowsRemoteManagementListenerType), protocolElement4.Value, true));
                                                            listenerInstance.ListenerType = protocolInstance4;
                                                        }
                                                        
                                                        XElement certificateThumbprintElement = listenersElement.Element(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                        if (certificateThumbprintElement != null)
                                                        {
                                                            string certificateThumbprintInstance = certificateThumbprintElement.Value;
                                                            listenerInstance.CertificateThumbprint = certificateThumbprintInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement adminUsernameElement = configurationSetsElement.Element(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                            if (adminUsernameElement != null)
                                            {
                                                string adminUsernameInstance = adminUsernameElement.Value;
                                                configurationSetInstance.AdminUserName = adminUsernameInstance;
                                            }
                                            
                                            XElement additionalUnattendContentElement = configurationSetsElement.Element(XName.Get("AdditionalUnattendContent", "http://schemas.microsoft.com/windowsazure"));
                                            if (additionalUnattendContentElement != null)
                                            {
                                                AdditionalUnattendContentSettings additionalUnattendContentInstance = new AdditionalUnattendContentSettings();
                                                configurationSetInstance.AdditionalUnattendContent = additionalUnattendContentInstance;
                                                
                                                XElement passesSequenceElement = additionalUnattendContentElement.Element(XName.Get("Passes", "http://schemas.microsoft.com/windowsazure"));
                                                if (passesSequenceElement != null)
                                                {
                                                    foreach (XElement passesElement in passesSequenceElement.Elements(XName.Get("UnattendPass", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        UnattendPassSettings unattendPassInstance = new UnattendPassSettings();
                                                        additionalUnattendContentInstance.UnattendPasses.Add(unattendPassInstance);
                                                        
                                                        XElement passNameElement = passesElement.Element(XName.Get("PassName", "http://schemas.microsoft.com/windowsazure"));
                                                        if (passNameElement != null)
                                                        {
                                                            string passNameInstance = passNameElement.Value;
                                                            unattendPassInstance.PassName = passNameInstance;
                                                        }
                                                        
                                                        XElement componentsSequenceElement = passesElement.Element(XName.Get("Components", "http://schemas.microsoft.com/windowsazure"));
                                                        if (componentsSequenceElement != null)
                                                        {
                                                            foreach (XElement componentsElement in componentsSequenceElement.Elements(XName.Get("UnattendComponent", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                UnattendComponent unattendComponentInstance = new UnattendComponent();
                                                                unattendPassInstance.UnattendComponents.Add(unattendComponentInstance);
                                                                
                                                                XElement componentNameElement = componentsElement.Element(XName.Get("ComponentName", "http://schemas.microsoft.com/windowsazure"));
                                                                if (componentNameElement != null)
                                                                {
                                                                    string componentNameInstance = componentNameElement.Value;
                                                                    unattendComponentInstance.ComponentName = componentNameInstance;
                                                                }
                                                                
                                                                XElement componentSettingsSequenceElement = componentsElement.Element(XName.Get("ComponentSettings", "http://schemas.microsoft.com/windowsazure"));
                                                                if (componentSettingsSequenceElement != null)
                                                                {
                                                                    foreach (XElement componentSettingsElement in componentSettingsSequenceElement.Elements(XName.Get("ComponentSetting", "http://schemas.microsoft.com/windowsazure")))
                                                                    {
                                                                        ComponentSetting componentSettingInstance = new ComponentSetting();
                                                                        unattendComponentInstance.UnattendComponentSettings.Add(componentSettingInstance);
                                                                        
                                                                        XElement settingNameElement = componentSettingsElement.Element(XName.Get("SettingName", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (settingNameElement != null)
                                                                        {
                                                                            string settingNameInstance = settingNameElement.Value;
                                                                            componentSettingInstance.SettingName = settingNameInstance;
                                                                        }
                                                                        
                                                                        XElement contentElement = componentSettingsElement.Element(XName.Get("Content", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (contentElement != null)
                                                                        {
                                                                            string contentInstance = TypeConversion.FromBase64String(contentElement.Value);
                                                                            componentSettingInstance.Content = contentInstance;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement hostNameElement2 = configurationSetsElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                            if (hostNameElement2 != null)
                                            {
                                                string hostNameInstance2 = hostNameElement2.Value;
                                                configurationSetInstance.HostName = hostNameInstance2;
                                            }
                                            
                                            XElement userNameElement = configurationSetsElement.Element(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                            if (userNameElement != null)
                                            {
                                                string userNameInstance = userNameElement.Value;
                                                configurationSetInstance.UserName = userNameInstance;
                                            }
                                            
                                            XElement userPasswordElement = configurationSetsElement.Element(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                            if (userPasswordElement != null)
                                            {
                                                string userPasswordInstance = userPasswordElement.Value;
                                                configurationSetInstance.UserPassword = userPasswordInstance;
                                            }
                                            
                                            XElement disableSshPasswordAuthenticationElement = configurationSetsElement.Element(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                            if (disableSshPasswordAuthenticationElement != null && !string.IsNullOrEmpty(disableSshPasswordAuthenticationElement.Value))
                                            {
                                                bool disableSshPasswordAuthenticationInstance = bool.Parse(disableSshPasswordAuthenticationElement.Value);
                                                configurationSetInstance.DisableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                                            }
                                            
                                            XElement sSHElement = configurationSetsElement.Element(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                            if (sSHElement != null)
                                            {
                                                SshSettings sSHInstance = new SshSettings();
                                                configurationSetInstance.SshSettings = sSHInstance;
                                                
                                                XElement publicKeysSequenceElement = sSHElement.Element(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                                if (publicKeysSequenceElement != null)
                                                {
                                                    foreach (XElement publicKeysElement in publicKeysSequenceElement.Elements(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                        sSHInstance.PublicKeys.Add(publicKeyInstance);
                                                        
                                                        XElement fingerprintElement = publicKeysElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                        if (fingerprintElement != null)
                                                        {
                                                            string fingerprintInstance = fingerprintElement.Value;
                                                            publicKeyInstance.Fingerprint = fingerprintInstance;
                                                        }
                                                        
                                                        XElement pathElement2 = publicKeysElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                        if (pathElement2 != null)
                                                        {
                                                            string pathInstance2 = pathElement2.Value;
                                                            publicKeyInstance.Path = pathInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                XElement keyPairsSequenceElement = sSHElement.Element(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                                if (keyPairsSequenceElement != null)
                                                {
                                                    foreach (XElement keyPairsElement in keyPairsSequenceElement.Elements(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                        sSHInstance.KeyPairs.Add(keyPairInstance);
                                                        
                                                        XElement fingerprintElement2 = keyPairsElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                        if (fingerprintElement2 != null)
                                                        {
                                                            string fingerprintInstance2 = fingerprintElement2.Value;
                                                            keyPairInstance.Fingerprint = fingerprintInstance2;
                                                        }
                                                        
                                                        XElement pathElement3 = keyPairsElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                        if (pathElement3 != null)
                                                        {
                                                            string pathInstance3 = pathElement3.Value;
                                                            keyPairInstance.Path = pathInstance3;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement customDataElement = configurationSetsElement.Element(XName.Get("CustomData", "http://schemas.microsoft.com/windowsazure"));
                                            if (customDataElement != null)
                                            {
                                                string customDataInstance = customDataElement.Value;
                                                configurationSetInstance.CustomData = customDataInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement resourceExtensionReferencesSequenceElement = roleListElement.Element(XName.Get("ResourceExtensionReferences", "http://schemas.microsoft.com/windowsazure"));
                                    if (resourceExtensionReferencesSequenceElement != null)
                                    {
                                        foreach (XElement resourceExtensionReferencesElement in resourceExtensionReferencesSequenceElement.Elements(XName.Get("ResourceExtensionReference", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ResourceExtensionReference resourceExtensionReferenceInstance = new ResourceExtensionReference();
                                            roleInstance.ResourceExtensionReferences.Add(resourceExtensionReferenceInstance);
                                            
                                            XElement referenceNameElement = resourceExtensionReferencesElement.Element(XName.Get("ReferenceName", "http://schemas.microsoft.com/windowsazure"));
                                            if (referenceNameElement != null)
                                            {
                                                string referenceNameInstance = referenceNameElement.Value;
                                                resourceExtensionReferenceInstance.ReferenceName = referenceNameInstance;
                                            }
                                            
                                            XElement publisherElement = resourceExtensionReferencesElement.Element(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                                            if (publisherElement != null)
                                            {
                                                string publisherInstance = publisherElement.Value;
                                                resourceExtensionReferenceInstance.Publisher = publisherInstance;
                                            }
                                            
                                            XElement nameElement10 = resourceExtensionReferencesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement10 != null)
                                            {
                                                string nameInstance10 = nameElement10.Value;
                                                resourceExtensionReferenceInstance.Name = nameInstance10;
                                            }
                                            
                                            XElement versionElement2 = resourceExtensionReferencesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                            if (versionElement2 != null)
                                            {
                                                string versionInstance2 = versionElement2.Value;
                                                resourceExtensionReferenceInstance.Version = versionInstance2;
                                            }
                                            
                                            XElement resourceExtensionParameterValuesSequenceElement = resourceExtensionReferencesElement.Element(XName.Get("ResourceExtensionParameterValues", "http://schemas.microsoft.com/windowsazure"));
                                            if (resourceExtensionParameterValuesSequenceElement != null)
                                            {
                                                foreach (XElement resourceExtensionParameterValuesElement in resourceExtensionParameterValuesSequenceElement.Elements(XName.Get("ResourceExtensionParameterValue", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    ResourceExtensionParameterValue resourceExtensionParameterValueInstance = new ResourceExtensionParameterValue();
                                                    resourceExtensionReferenceInstance.ResourceExtensionParameterValues.Add(resourceExtensionParameterValueInstance);
                                                    
                                                    XElement keyElement = resourceExtensionParameterValuesElement.Element(XName.Get("Key", "http://schemas.microsoft.com/windowsazure"));
                                                    if (keyElement != null)
                                                    {
                                                        string keyInstance = keyElement.Value;
                                                        resourceExtensionParameterValueInstance.Key = keyInstance;
                                                    }
                                                    
                                                    XElement valueElement = resourceExtensionParameterValuesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                                                    if (valueElement != null)
                                                    {
                                                        string valueInstance = TypeConversion.FromBase64String(valueElement.Value);
                                                        resourceExtensionParameterValueInstance.Value = valueInstance;
                                                    }
                                                    
                                                    XElement typeElement = resourceExtensionParameterValuesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                                    if (typeElement != null)
                                                    {
                                                        string typeInstance = typeElement.Value;
                                                        resourceExtensionParameterValueInstance.Type = typeInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement stateElement = resourceExtensionReferencesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                            if (stateElement != null)
                                            {
                                                string stateInstance = stateElement.Value;
                                                resourceExtensionReferenceInstance.State = stateInstance;
                                            }
                                            
                                            XElement forceUpdateElement = resourceExtensionReferencesElement.Element(XName.Get("ForceUpdate", "http://schemas.microsoft.com/windowsazure"));
                                            if (forceUpdateElement != null && !string.IsNullOrEmpty(forceUpdateElement.Value))
                                            {
                                                bool forceUpdateInstance = bool.Parse(forceUpdateElement.Value);
                                                resourceExtensionReferenceInstance.ForceUpdate = forceUpdateInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement vMImageNameElement = roleListElement.Element(XName.Get("VMImageName", "http://schemas.microsoft.com/windowsazure"));
                                    if (vMImageNameElement != null)
                                    {
                                        string vMImageNameInstance = vMImageNameElement.Value;
                                        roleInstance.VMImageName = vMImageNameInstance;
                                    }
                                    
                                    XElement mediaLocationElement = roleListElement.Element(XName.Get("MediaLocation", "http://schemas.microsoft.com/windowsazure"));
                                    if (mediaLocationElement != null)
                                    {
                                        Uri mediaLocationInstance = TypeConversion.TryParseUri(mediaLocationElement.Value);
                                        roleInstance.MediaLocation = mediaLocationInstance;
                                    }
                                    
                                    XElement availabilitySetNameElement = roleListElement.Element(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                                    if (availabilitySetNameElement != null)
                                    {
                                        string availabilitySetNameInstance = availabilitySetNameElement.Value;
                                        roleInstance.AvailabilitySetName = availabilitySetNameInstance;
                                    }
                                    
                                    XElement dataVirtualHardDisksSequenceElement = roleListElement.Element(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                                    if (dataVirtualHardDisksSequenceElement != null)
                                    {
                                        foreach (XElement dataVirtualHardDisksElement in dataVirtualHardDisksSequenceElement.Elements(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                            roleInstance.DataVirtualHardDisks.Add(dataVirtualHardDiskInstance);
                                            
                                            XElement hostCachingElement = dataVirtualHardDisksElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                            if (hostCachingElement != null)
                                            {
                                                string hostCachingInstance = hostCachingElement.Value;
                                                dataVirtualHardDiskInstance.HostCaching = hostCachingInstance;
                                            }
                                            
                                            XElement diskLabelElement = dataVirtualHardDisksElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                            if (diskLabelElement != null)
                                            {
                                                string diskLabelInstance = diskLabelElement.Value;
                                                dataVirtualHardDiskInstance.Label = diskLabelInstance;
                                            }
                                            
                                            XElement diskNameElement = dataVirtualHardDisksElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                            if (diskNameElement != null)
                                            {
                                                string diskNameInstance = diskNameElement.Value;
                                                dataVirtualHardDiskInstance.Name = diskNameInstance;
                                            }
                                            
                                            XElement lunElement = dataVirtualHardDisksElement.Element(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                            if (lunElement != null && !string.IsNullOrEmpty(lunElement.Value))
                                            {
                                                int lunInstance = int.Parse(lunElement.Value, CultureInfo.InvariantCulture);
                                                dataVirtualHardDiskInstance.LogicalUnitNumber = lunInstance;
                                            }
                                            
                                            XElement logicalDiskSizeInGBElement = dataVirtualHardDisksElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                            if (logicalDiskSizeInGBElement != null && !string.IsNullOrEmpty(logicalDiskSizeInGBElement.Value))
                                            {
                                                int logicalDiskSizeInGBInstance = int.Parse(logicalDiskSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                                dataVirtualHardDiskInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                                            }
                                            
                                            XElement mediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                            if (mediaLinkElement != null)
                                            {
                                                Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                                dataVirtualHardDiskInstance.MediaLink = mediaLinkInstance;
                                            }
                                            
                                            XElement sourceMediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("SourceMediaLink", "http://schemas.microsoft.com/windowsazure"));
                                            if (sourceMediaLinkElement != null)
                                            {
                                                Uri sourceMediaLinkInstance = TypeConversion.TryParseUri(sourceMediaLinkElement.Value);
                                                dataVirtualHardDiskInstance.SourceMediaLink = sourceMediaLinkInstance;
                                            }
                                            
                                            XElement iOTypeElement = dataVirtualHardDisksElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                            if (iOTypeElement != null)
                                            {
                                                string iOTypeInstance = iOTypeElement.Value;
                                                dataVirtualHardDiskInstance.IOType = iOTypeInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement labelElement2 = roleListElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                    if (labelElement2 != null)
                                    {
                                        string labelInstance2 = labelElement2.Value;
                                        roleInstance.Label = labelInstance2;
                                    }
                                    
                                    XElement oSVirtualHardDiskElement = roleListElement.Element(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                                    if (oSVirtualHardDiskElement != null)
                                    {
                                        OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                        roleInstance.OSVirtualHardDisk = oSVirtualHardDiskInstance;
                                        
                                        XElement hostCachingElement2 = oSVirtualHardDiskElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                        if (hostCachingElement2 != null)
                                        {
                                            string hostCachingInstance2 = hostCachingElement2.Value;
                                            oSVirtualHardDiskInstance.HostCaching = hostCachingInstance2;
                                        }
                                        
                                        XElement diskLabelElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                        if (diskLabelElement2 != null)
                                        {
                                            string diskLabelInstance2 = diskLabelElement2.Value;
                                            oSVirtualHardDiskInstance.Label = diskLabelInstance2;
                                        }
                                        
                                        XElement diskNameElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                        if (diskNameElement2 != null)
                                        {
                                            string diskNameInstance2 = diskNameElement2.Value;
                                            oSVirtualHardDiskInstance.Name = diskNameInstance2;
                                        }
                                        
                                        XElement mediaLinkElement2 = oSVirtualHardDiskElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                        if (mediaLinkElement2 != null)
                                        {
                                            Uri mediaLinkInstance2 = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                            oSVirtualHardDiskInstance.MediaLink = mediaLinkInstance2;
                                        }
                                        
                                        XElement sourceImageNameElement = oSVirtualHardDiskElement.Element(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                                        if (sourceImageNameElement != null)
                                        {
                                            string sourceImageNameInstance = sourceImageNameElement.Value;
                                            oSVirtualHardDiskInstance.SourceImageName = sourceImageNameInstance;
                                        }
                                        
                                        XElement osElement = oSVirtualHardDiskElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                        if (osElement != null)
                                        {
                                            string osInstance = osElement.Value;
                                            oSVirtualHardDiskInstance.OperatingSystem = osInstance;
                                        }
                                        
                                        XElement remoteSourceImageLinkElement = oSVirtualHardDiskElement.Element(XName.Get("RemoteSourceImageLink", "http://schemas.microsoft.com/windowsazure"));
                                        if (remoteSourceImageLinkElement != null)
                                        {
                                            Uri remoteSourceImageLinkInstance = TypeConversion.TryParseUri(remoteSourceImageLinkElement.Value);
                                            oSVirtualHardDiskInstance.RemoteSourceImageLink = remoteSourceImageLinkInstance;
                                        }
                                        
                                        XElement iOTypeElement2 = oSVirtualHardDiskElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                        if (iOTypeElement2 != null)
                                        {
                                            string iOTypeInstance2 = iOTypeElement2.Value;
                                            oSVirtualHardDiskInstance.IOType = iOTypeInstance2;
                                        }
                                        
                                        XElement resizedSizeInGBElement = oSVirtualHardDiskElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                        if (resizedSizeInGBElement != null && !string.IsNullOrEmpty(resizedSizeInGBElement.Value))
                                        {
                                            int resizedSizeInGBInstance = int.Parse(resizedSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                            oSVirtualHardDiskInstance.ResizedSizeInGB = resizedSizeInGBInstance;
                                        }
                                    }
                                    
                                    XElement roleSizeElement = roleListElement.Element(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleSizeElement != null)
                                    {
                                        string roleSizeInstance = roleSizeElement.Value;
                                        roleInstance.RoleSize = roleSizeInstance;
                                    }
                                    
                                    XElement defaultWinRmCertificateThumbprintElement = roleListElement.Element(XName.Get("DefaultWinRmCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                    if (defaultWinRmCertificateThumbprintElement != null)
                                    {
                                        string defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement.Value;
                                        roleInstance.DefaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
                                    }
                                    
                                    XElement provisionGuestAgentElement = roleListElement.Element(XName.Get("ProvisionGuestAgent", "http://schemas.microsoft.com/windowsazure"));
                                    if (provisionGuestAgentElement != null && !string.IsNullOrEmpty(provisionGuestAgentElement.Value))
                                    {
                                        bool provisionGuestAgentInstance = bool.Parse(provisionGuestAgentElement.Value);
                                        roleInstance.ProvisionGuestAgent = provisionGuestAgentInstance;
                                    }
                                    
                                    XElement vMImageInputElement = roleListElement.Element(XName.Get("VMImageInput", "http://schemas.microsoft.com/windowsazure"));
                                    if (vMImageInputElement != null)
                                    {
                                        VMImageInput vMImageInputInstance = new VMImageInput();
                                        roleInstance.VMImageInput = vMImageInputInstance;
                                        
                                        XElement oSDiskConfigurationElement = vMImageInputElement.Element(XName.Get("OSDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                        if (oSDiskConfigurationElement != null)
                                        {
                                            OSDiskConfiguration oSDiskConfigurationInstance = new OSDiskConfiguration();
                                            vMImageInputInstance.OSDiskConfiguration = oSDiskConfigurationInstance;
                                            
                                            XElement resizedSizeInGBElement2 = oSDiskConfigurationElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                            if (resizedSizeInGBElement2 != null && !string.IsNullOrEmpty(resizedSizeInGBElement2.Value))
                                            {
                                                int resizedSizeInGBInstance2 = int.Parse(resizedSizeInGBElement2.Value, CultureInfo.InvariantCulture);
                                                oSDiskConfigurationInstance.ResizedSizeInGB = resizedSizeInGBInstance2;
                                            }
                                        }
                                        
                                        XElement dataDiskConfigurationsSequenceElement = vMImageInputElement.Element(XName.Get("DataDiskConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                        if (dataDiskConfigurationsSequenceElement != null)
                                        {
                                            foreach (XElement dataDiskConfigurationsElement in dataDiskConfigurationsSequenceElement.Elements(XName.Get("DataDiskConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                DataDiskConfiguration dataDiskConfigurationInstance = new DataDiskConfiguration();
                                                vMImageInputInstance.DataDiskConfigurations.Add(dataDiskConfigurationInstance);
                                                
                                                XElement nameElement11 = dataDiskConfigurationsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement11 != null)
                                                {
                                                    string nameInstance11 = nameElement11.Value;
                                                    dataDiskConfigurationInstance.DiskName = nameInstance11;
                                                }
                                                
                                                XElement resizedSizeInGBElement3 = dataDiskConfigurationsElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                                if (resizedSizeInGBElement3 != null && !string.IsNullOrEmpty(resizedSizeInGBElement3.Value))
                                                {
                                                    int resizedSizeInGBInstance3 = int.Parse(resizedSizeInGBElement3.Value, CultureInfo.InvariantCulture);
                                                    dataDiskConfigurationInstance.ResizedSizeInGB = resizedSizeInGBInstance3;
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement debugSettingsElement = roleListElement.Element(XName.Get("DebugSettings", "http://schemas.microsoft.com/windowsazure"));
                                    if (debugSettingsElement != null)
                                    {
                                        DebugSettings debugSettingsInstance = new DebugSettings();
                                        roleInstance.DebugSettings = debugSettingsInstance;
                                        
                                        XElement bootDiagnosticsEnabledElement = debugSettingsElement.Element(XName.Get("BootDiagnosticsEnabled", "http://schemas.microsoft.com/windowsazure"));
                                        if (bootDiagnosticsEnabledElement != null)
                                        {
                                            bool bootDiagnosticsEnabledInstance = bool.Parse(bootDiagnosticsEnabledElement.Value);
                                            debugSettingsInstance.BootDiagnosticsEnabled = bootDiagnosticsEnabledInstance;
                                        }
                                        
                                        XElement consoleScreenshotBlobUriElement = debugSettingsElement.Element(XName.Get("ConsoleScreenshotBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                        if (consoleScreenshotBlobUriElement != null)
                                        {
                                            Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(consoleScreenshotBlobUriElement.Value);
                                            debugSettingsInstance.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                        }
                                        
                                        XElement serialOutputBlobUriElement = debugSettingsElement.Element(XName.Get("SerialOutputBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                        if (serialOutputBlobUriElement != null)
                                        {
                                            Uri serialOutputBlobUriInstance = TypeConversion.TryParseUri(serialOutputBlobUriElement.Value);
                                            debugSettingsInstance.SerialOutputBlobUri = serialOutputBlobUriInstance;
                                        }
                                    }
                                    
                                    XElement licenseTypeElement = roleListElement.Element(XName.Get("LicenseType", "http://schemas.microsoft.com/windowsazure"));
                                    if (licenseTypeElement != null)
                                    {
                                        string licenseTypeInstance = licenseTypeElement.Value;
                                        roleInstance.LicenseType = licenseTypeInstance;
                                    }
                                    
                                    XElement migrationStateElement = roleListElement.Element(XName.Get("MigrationState", "http://schemas.microsoft.com/windowsazure"));
                                    if (migrationStateElement != null)
                                    {
                                        string migrationStateInstance = migrationStateElement.Value;
                                        roleInstance.MigrationState = migrationStateInstance;
                                    }
                                }
                            }
                            
                            XElement sdkVersionElement = deploymentElement.Element(XName.Get("SdkVersion", "http://schemas.microsoft.com/windowsazure"));
                            if (sdkVersionElement != null)
                            {
                                string sdkVersionInstance = sdkVersionElement.Value;
                                result.SdkVersion = sdkVersionInstance;
                            }
                            
                            XElement lockedElement = deploymentElement.Element(XName.Get("Locked", "http://schemas.microsoft.com/windowsazure"));
                            if (lockedElement != null && !string.IsNullOrEmpty(lockedElement.Value))
                            {
                                bool lockedInstance = bool.Parse(lockedElement.Value);
                                result.Locked = lockedInstance;
                            }
                            
                            XElement rollbackAllowedElement = deploymentElement.Element(XName.Get("RollbackAllowed", "http://schemas.microsoft.com/windowsazure"));
                            if (rollbackAllowedElement != null && !string.IsNullOrEmpty(rollbackAllowedElement.Value))
                            {
                                bool rollbackAllowedInstance = bool.Parse(rollbackAllowedElement.Value);
                                result.RollbackAllowed = rollbackAllowedInstance;
                            }
                            
                            XElement virtualNetworkNameElement = deploymentElement.Element(XName.Get("VirtualNetworkName", "http://schemas.microsoft.com/windowsazure"));
                            if (virtualNetworkNameElement != null)
                            {
                                string virtualNetworkNameInstance = virtualNetworkNameElement.Value;
                                result.VirtualNetworkName = virtualNetworkNameInstance;
                            }
                            
                            XElement createdTimeElement = deploymentElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/windowsazure"));
                            if (createdTimeElement != null)
                            {
                                DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.CreatedTime = createdTimeInstance;
                            }
                            
                            XElement lastModifiedTimeElement = deploymentElement.Element(XName.Get("LastModifiedTime", "http://schemas.microsoft.com/windowsazure"));
                            if (lastModifiedTimeElement != null)
                            {
                                DateTime lastModifiedTimeInstance = DateTime.Parse(lastModifiedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.LastModifiedTime = lastModifiedTimeInstance;
                            }
                            
                            XElement extendedPropertiesSequenceElement = deploymentElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                            if (extendedPropertiesSequenceElement != null)
                            {
                                foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    result.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                }
                            }
                            
                            XElement dnsElement = deploymentElement.Element(XName.Get("Dns", "http://schemas.microsoft.com/windowsazure"));
                            if (dnsElement != null)
                            {
                                DnsSettings dnsInstance = new DnsSettings();
                                result.DnsSettings = dnsInstance;
                                
                                XElement dnsServersSequenceElement = dnsElement.Element(XName.Get("DnsServers", "http://schemas.microsoft.com/windowsazure"));
                                if (dnsServersSequenceElement != null)
                                {
                                    foreach (XElement dnsServersElement in dnsServersSequenceElement.Elements(XName.Get("DnsServer", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        DnsServer dnsServerInstance = new DnsServer();
                                        dnsInstance.DnsServers.Add(dnsServerInstance);
                                        
                                        XElement nameElement12 = dnsServersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement12 != null)
                                        {
                                            string nameInstance12 = nameElement12.Value;
                                            dnsServerInstance.Name = nameInstance12;
                                        }
                                        
                                        XElement addressElement3 = dnsServersElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                        if (addressElement3 != null)
                                        {
                                            string addressInstance3 = addressElement3.Value;
                                            dnsServerInstance.Address = addressInstance3;
                                        }
                                    }
                                }
                            }
                            
                            XElement persistentVMDowntimeElement = deploymentElement.Element(XName.Get("PersistentVMDowntime", "http://schemas.microsoft.com/windowsazure"));
                            if (persistentVMDowntimeElement != null)
                            {
                                PersistentVMDowntime persistentVMDowntimeInstance = new PersistentVMDowntime();
                                result.PersistentVMDowntime = persistentVMDowntimeInstance;
                                
                                XElement startTimeElement = persistentVMDowntimeElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                if (startTimeElement != null)
                                {
                                    DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    persistentVMDowntimeInstance.StartTime = startTimeInstance;
                                }
                                
                                XElement endTimeElement = persistentVMDowntimeElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                if (endTimeElement != null)
                                {
                                    DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    persistentVMDowntimeInstance.EndTime = endTimeInstance;
                                }
                                
                                XElement statusElement6 = persistentVMDowntimeElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                if (statusElement6 != null)
                                {
                                    string statusInstance6 = statusElement6.Value;
                                    persistentVMDowntimeInstance.Status = statusInstance6;
                                }
                            }
                            
                            XElement virtualIPsSequenceElement = deploymentElement.Element(XName.Get("VirtualIPs", "http://schemas.microsoft.com/windowsazure"));
                            if (virtualIPsSequenceElement != null)
                            {
                                foreach (XElement virtualIPsElement in virtualIPsSequenceElement.Elements(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    VirtualIPAddress virtualIPInstance = new VirtualIPAddress();
                                    result.VirtualIPAddresses.Add(virtualIPInstance);
                                    
                                    XElement addressElement4 = virtualIPsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                    if (addressElement4 != null)
                                    {
                                        string addressInstance4 = addressElement4.Value;
                                        virtualIPInstance.Address = addressInstance4;
                                    }
                                    
                                    XElement isDnsProgrammedElement = virtualIPsElement.Element(XName.Get("IsDnsProgrammed", "http://schemas.microsoft.com/windowsazure"));
                                    if (isDnsProgrammedElement != null && !string.IsNullOrEmpty(isDnsProgrammedElement.Value))
                                    {
                                        bool isDnsProgrammedInstance = bool.Parse(isDnsProgrammedElement.Value);
                                        virtualIPInstance.IsDnsProgrammed = isDnsProgrammedInstance;
                                    }
                                    
                                    XElement nameElement13 = virtualIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement13 != null)
                                    {
                                        string nameInstance13 = nameElement13.Value;
                                        virtualIPInstance.Name = nameInstance13;
                                    }
                                    
                                    XElement reservedIPNameElement = virtualIPsElement.Element(XName.Get("ReservedIPName", "http://schemas.microsoft.com/windowsazure"));
                                    if (reservedIPNameElement != null)
                                    {
                                        string reservedIPNameInstance = reservedIPNameElement.Value;
                                        virtualIPInstance.ReservedIPName = reservedIPNameInstance;
                                    }
                                }
                            }
                            
                            XElement extensionConfigurationElement = deploymentElement.Element(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                            if (extensionConfigurationElement != null)
                            {
                                ExtensionConfiguration extensionConfigurationInstance = new ExtensionConfiguration();
                                result.ExtensionConfiguration = extensionConfigurationInstance;
                                
                                XElement allRolesSequenceElement = extensionConfigurationElement.Element(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                                if (allRolesSequenceElement != null)
                                {
                                    foreach (XElement allRolesElement in allRolesSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ExtensionConfiguration.Extension extensionInstance = new ExtensionConfiguration.Extension();
                                        extensionConfigurationInstance.AllRoles.Add(extensionInstance);
                                        
                                        XElement idElement = allRolesElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                        if (idElement != null)
                                        {
                                            string idInstance = idElement.Value;
                                            extensionInstance.Id = idInstance;
                                        }
                                        
                                        XElement stateElement2 = allRolesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                        if (stateElement2 != null)
                                        {
                                            string stateInstance2 = stateElement2.Value;
                                            extensionInstance.State = stateInstance2;
                                        }
                                    }
                                }
                                
                                XElement namedRolesSequenceElement = extensionConfigurationElement.Element(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                                if (namedRolesSequenceElement != null)
                                {
                                    foreach (XElement namedRolesElement in namedRolesSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ExtensionConfiguration.NamedRole roleInstance2 = new ExtensionConfiguration.NamedRole();
                                        extensionConfigurationInstance.NamedRoles.Add(roleInstance2);
                                        
                                        XElement roleNameElement3 = namedRolesElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                        if (roleNameElement3 != null)
                                        {
                                            string roleNameInstance3 = roleNameElement3.Value;
                                            roleInstance2.RoleName = roleNameInstance3;
                                        }
                                        
                                        XElement extensionsSequenceElement = namedRolesElement.Element(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                                        if (extensionsSequenceElement != null)
                                        {
                                            foreach (XElement extensionsElement in extensionsSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                ExtensionConfiguration.Extension extensionInstance2 = new ExtensionConfiguration.Extension();
                                                roleInstance2.Extensions.Add(extensionInstance2);
                                                
                                                XElement idElement2 = extensionsElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                                if (idElement2 != null)
                                                {
                                                    string idInstance2 = idElement2.Value;
                                                    extensionInstance2.Id = idInstance2;
                                                }
                                                
                                                XElement stateElement3 = extensionsElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                                if (stateElement3 != null)
                                                {
                                                    string stateInstance3 = stateElement3.Value;
                                                    extensionInstance2.State = stateInstance3;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            XElement reservedIPNameElement2 = deploymentElement.Element(XName.Get("ReservedIPName", "http://schemas.microsoft.com/windowsazure"));
                            if (reservedIPNameElement2 != null)
                            {
                                string reservedIPNameInstance2 = reservedIPNameElement2.Value;
                                result.ReservedIPName = reservedIPNameInstance2;
                            }
                            
                            XElement loadBalancersSequenceElement = deploymentElement.Element(XName.Get("LoadBalancers", "http://schemas.microsoft.com/windowsazure"));
                            if (loadBalancersSequenceElement != null)
                            {
                                foreach (XElement loadBalancersElement in loadBalancersSequenceElement.Elements(XName.Get("LoadBalancer", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    LoadBalancer loadBalancerInstance = new LoadBalancer();
                                    result.LoadBalancers.Add(loadBalancerInstance);
                                    
                                    XElement nameElement14 = loadBalancersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement14 != null)
                                    {
                                        string nameInstance14 = nameElement14.Value;
                                        loadBalancerInstance.Name = nameInstance14;
                                    }
                                    
                                    XElement frontendIpConfigurationElement = loadBalancersElement.Element(XName.Get("FrontendIpConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                    if (frontendIpConfigurationElement != null)
                                    {
                                        FrontendIPConfiguration frontendIpConfigurationInstance = new FrontendIPConfiguration();
                                        loadBalancerInstance.FrontendIPConfiguration = frontendIpConfigurationInstance;
                                        
                                        XElement typeElement2 = frontendIpConfigurationElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                        if (typeElement2 != null)
                                        {
                                            string typeInstance2 = typeElement2.Value;
                                            frontendIpConfigurationInstance.Type = typeInstance2;
                                        }
                                        
                                        XElement subnetNameElement3 = frontendIpConfigurationElement.Element(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                        if (subnetNameElement3 != null)
                                        {
                                            string subnetNameInstance3 = subnetNameElement3.Value;
                                            frontendIpConfigurationInstance.SubnetName = subnetNameInstance3;
                                        }
                                        
                                        XElement staticVirtualNetworkIPAddressElement3 = frontendIpConfigurationElement.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                        if (staticVirtualNetworkIPAddressElement3 != null)
                                        {
                                            string staticVirtualNetworkIPAddressInstance3 = staticVirtualNetworkIPAddressElement3.Value;
                                            frontendIpConfigurationInstance.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance3;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Deployment By Slot operation returns configuration
        /// information, status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public async Task<DeploymentGetResponse> GetBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                TracingAdapter.Enter(invocationId, this, "GetBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeploymentGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement deploymentElement = responseDoc.Element(XName.Get("Deployment", "http://schemas.microsoft.com/windowsazure"));
                        if (deploymentElement != null)
                        {
                            XElement nameElement = deploymentElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                result.Name = nameInstance;
                            }
                            
                            XElement deploymentSlotElement = deploymentElement.Element(XName.Get("DeploymentSlot", "http://schemas.microsoft.com/windowsazure"));
                            if (deploymentSlotElement != null)
                            {
                                DeploymentSlot deploymentSlotInstance = ((DeploymentSlot)Enum.Parse(typeof(DeploymentSlot), deploymentSlotElement.Value, true));
                                result.DeploymentSlot = deploymentSlotInstance;
                            }
                            
                            XElement privateIDElement = deploymentElement.Element(XName.Get("PrivateID", "http://schemas.microsoft.com/windowsazure"));
                            if (privateIDElement != null)
                            {
                                string privateIDInstance = privateIDElement.Value;
                                result.PrivateId = privateIDInstance;
                            }
                            
                            XElement statusElement = deploymentElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null)
                            {
                                DeploymentStatus statusInstance = ((DeploymentStatus)Enum.Parse(typeof(DeploymentStatus), statusElement.Value, true));
                                result.Status = statusInstance;
                            }
                            
                            XElement labelElement = deploymentElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null)
                            {
                                string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                                result.Label = labelInstance;
                            }
                            
                            XElement urlElement = deploymentElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                            if (urlElement != null)
                            {
                                Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                                result.Uri = urlInstance;
                            }
                            
                            XElement configurationElement = deploymentElement.Element(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                            if (configurationElement != null)
                            {
                                string configurationInstance = TypeConversion.FromBase64String(configurationElement.Value);
                                result.Configuration = configurationInstance;
                            }
                            
                            XElement roleInstanceListSequenceElement = deploymentElement.Element(XName.Get("RoleInstanceList", "http://schemas.microsoft.com/windowsazure"));
                            if (roleInstanceListSequenceElement != null)
                            {
                                foreach (XElement roleInstanceListElement in roleInstanceListSequenceElement.Elements(XName.Get("RoleInstance", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    RoleInstance roleInstanceInstance = new RoleInstance();
                                    result.RoleInstances.Add(roleInstanceInstance);
                                    
                                    XElement roleNameElement = roleInstanceListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleNameElement != null)
                                    {
                                        string roleNameInstance = roleNameElement.Value;
                                        roleInstanceInstance.RoleName = roleNameInstance;
                                    }
                                    
                                    XElement instanceNameElement = roleInstanceListElement.Element(XName.Get("InstanceName", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceNameElement != null)
                                    {
                                        string instanceNameInstance = instanceNameElement.Value;
                                        roleInstanceInstance.InstanceName = instanceNameInstance;
                                    }
                                    
                                    XElement instanceStatusElement = roleInstanceListElement.Element(XName.Get("InstanceStatus", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceStatusElement != null)
                                    {
                                        string instanceStatusInstance = instanceStatusElement.Value;
                                        roleInstanceInstance.InstanceStatus = instanceStatusInstance;
                                    }
                                    
                                    XElement instanceUpgradeDomainElement = roleInstanceListElement.Element(XName.Get("InstanceUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceUpgradeDomainElement != null && !string.IsNullOrEmpty(instanceUpgradeDomainElement.Value))
                                    {
                                        int instanceUpgradeDomainInstance = int.Parse(instanceUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                        roleInstanceInstance.InstanceUpgradeDomain = instanceUpgradeDomainInstance;
                                    }
                                    
                                    XElement instanceFaultDomainElement = roleInstanceListElement.Element(XName.Get("InstanceFaultDomain", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceFaultDomainElement != null && !string.IsNullOrEmpty(instanceFaultDomainElement.Value))
                                    {
                                        int instanceFaultDomainInstance = int.Parse(instanceFaultDomainElement.Value, CultureInfo.InvariantCulture);
                                        roleInstanceInstance.InstanceFaultDomain = instanceFaultDomainInstance;
                                    }
                                    
                                    XElement instanceSizeElement = roleInstanceListElement.Element(XName.Get("InstanceSize", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceSizeElement != null)
                                    {
                                        string instanceSizeInstance = instanceSizeElement.Value;
                                        roleInstanceInstance.InstanceSize = instanceSizeInstance;
                                    }
                                    
                                    XElement instanceStateDetailsElement = roleInstanceListElement.Element(XName.Get("InstanceStateDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceStateDetailsElement != null)
                                    {
                                        string instanceStateDetailsInstance = instanceStateDetailsElement.Value;
                                        roleInstanceInstance.InstanceStateDetails = instanceStateDetailsInstance;
                                    }
                                    
                                    XElement instanceErrorCodeElement = roleInstanceListElement.Element(XName.Get("InstanceErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceErrorCodeElement != null)
                                    {
                                        string instanceErrorCodeInstance = instanceErrorCodeElement.Value;
                                        roleInstanceInstance.InstanceErrorCode = instanceErrorCodeInstance;
                                    }
                                    
                                    XElement ipAddressElement = roleInstanceListElement.Element(XName.Get("IpAddress", "http://schemas.microsoft.com/windowsazure"));
                                    if (ipAddressElement != null)
                                    {
                                        string ipAddressInstance = ipAddressElement.Value;
                                        roleInstanceInstance.IPAddress = ipAddressInstance;
                                    }
                                    
                                    XElement instanceEndpointsSequenceElement = roleInstanceListElement.Element(XName.Get("InstanceEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement instanceEndpointsElement in instanceEndpointsSequenceElement.Elements(XName.Get("InstanceEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            InstanceEndpoint instanceEndpointInstance = new InstanceEndpoint();
                                            roleInstanceInstance.InstanceEndpoints.Add(instanceEndpointInstance);
                                            
                                            XElement localPortElement = instanceEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (localPortElement != null && !string.IsNullOrEmpty(localPortElement.Value))
                                            {
                                                int localPortInstance = int.Parse(localPortElement.Value, CultureInfo.InvariantCulture);
                                                instanceEndpointInstance.LocalPort = localPortInstance;
                                            }
                                            
                                            XElement nameElement2 = instanceEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement2 != null)
                                            {
                                                string nameInstance2 = nameElement2.Value;
                                                instanceEndpointInstance.Name = nameInstance2;
                                            }
                                            
                                            XElement publicPortElement = instanceEndpointsElement.Element(XName.Get("PublicPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (publicPortElement != null)
                                            {
                                                int publicPortInstance = int.Parse(publicPortElement.Value, CultureInfo.InvariantCulture);
                                                instanceEndpointInstance.Port = publicPortInstance;
                                            }
                                            
                                            XElement protocolElement = instanceEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement != null)
                                            {
                                                string protocolInstance = protocolElement.Value;
                                                instanceEndpointInstance.Protocol = protocolInstance;
                                            }
                                            
                                            XElement vipElement = instanceEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                            if (vipElement != null)
                                            {
                                                string vipInstance = vipElement.Value;
                                                instanceEndpointInstance.VirtualIPAddress = vipInstance;
                                            }
                                            
                                            XElement idleTimeoutInMinutesElement = instanceEndpointsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            if (idleTimeoutInMinutesElement != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement.Value))
                                            {
                                                int idleTimeoutInMinutesInstance = int.Parse(idleTimeoutInMinutesElement.Value, CultureInfo.InvariantCulture);
                                                instanceEndpointInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement guestAgentStatusElement = roleInstanceListElement.Element(XName.Get("GuestAgentStatus", "http://schemas.microsoft.com/windowsazure"));
                                    if (guestAgentStatusElement != null)
                                    {
                                        GuestAgentStatus guestAgentStatusInstance = new GuestAgentStatus();
                                        roleInstanceInstance.GuestAgentStatus = guestAgentStatusInstance;
                                        
                                        XElement protocolVersionElement = guestAgentStatusElement.Element(XName.Get("ProtocolVersion", "http://schemas.microsoft.com/windowsazure"));
                                        if (protocolVersionElement != null)
                                        {
                                            string protocolVersionInstance = protocolVersionElement.Value;
                                            guestAgentStatusInstance.ProtocolVersion = protocolVersionInstance;
                                        }
                                        
                                        XElement timestampElement = guestAgentStatusElement.Element(XName.Get("Timestamp", "http://schemas.microsoft.com/windowsazure"));
                                        if (timestampElement != null && !string.IsNullOrEmpty(timestampElement.Value))
                                        {
                                            DateTime timestampInstance = DateTime.Parse(timestampElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                            guestAgentStatusInstance.Timestamp = timestampInstance;
                                        }
                                        
                                        XElement guestAgentVersionElement = guestAgentStatusElement.Element(XName.Get("GuestAgentVersion", "http://schemas.microsoft.com/windowsazure"));
                                        if (guestAgentVersionElement != null)
                                        {
                                            string guestAgentVersionInstance = guestAgentVersionElement.Value;
                                            guestAgentStatusInstance.GuestAgentVersion = guestAgentVersionInstance;
                                        }
                                        
                                        XElement statusElement2 = guestAgentStatusElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                        if (statusElement2 != null)
                                        {
                                            string statusInstance2 = statusElement2.Value;
                                            guestAgentStatusInstance.Status = statusInstance2;
                                        }
                                        
                                        XElement codeElement = guestAgentStatusElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                        if (codeElement != null && !string.IsNullOrEmpty(codeElement.Value))
                                        {
                                            int codeInstance = int.Parse(codeElement.Value, CultureInfo.InvariantCulture);
                                            guestAgentStatusInstance.Code = codeInstance;
                                        }
                                        
                                        XElement messageElement = guestAgentStatusElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                        if (messageElement != null)
                                        {
                                            GuestAgentMessage messageInstance = new GuestAgentMessage();
                                            guestAgentStatusInstance.Message = messageInstance;
                                            
                                            XElement messageResourceIdElement = messageElement.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                            if (messageResourceIdElement != null)
                                            {
                                                string messageResourceIdInstance = messageResourceIdElement.Value;
                                                messageInstance.MessageResourceId = messageResourceIdInstance;
                                            }
                                            
                                            XElement paramListSequenceElement = messageElement.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                            if (paramListSequenceElement != null)
                                            {
                                                foreach (XElement paramListElement in paramListSequenceElement.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    messageInstance.ParamList.Add(paramListElement.Value);
                                                }
                                            }
                                        }
                                        
                                        XElement formattedMessageElement = guestAgentStatusElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                        if (formattedMessageElement != null)
                                        {
                                            GuestAgentFormattedMessage formattedMessageInstance = new GuestAgentFormattedMessage();
                                            guestAgentStatusInstance.FormattedMessage = formattedMessageInstance;
                                            
                                            XElement languageElement = formattedMessageElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                            if (languageElement != null)
                                            {
                                                string languageInstance = languageElement.Value;
                                                formattedMessageInstance.Language = languageInstance;
                                            }
                                            
                                            XElement messageElement2 = formattedMessageElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                            if (messageElement2 != null)
                                            {
                                                string messageInstance2 = messageElement2.Value;
                                                formattedMessageInstance.Message = messageInstance2;
                                            }
                                        }
                                    }
                                    
                                    XElement resourceExtensionStatusListSequenceElement = roleInstanceListElement.Element(XName.Get("ResourceExtensionStatusList", "http://schemas.microsoft.com/windowsazure"));
                                    if (resourceExtensionStatusListSequenceElement != null)
                                    {
                                        foreach (XElement resourceExtensionStatusListElement in resourceExtensionStatusListSequenceElement.Elements(XName.Get("ResourceExtensionStatus", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ResourceExtensionStatus resourceExtensionStatusInstance = new ResourceExtensionStatus();
                                            roleInstanceInstance.ResourceExtensionStatusList.Add(resourceExtensionStatusInstance);
                                            
                                            XElement handlerNameElement = resourceExtensionStatusListElement.Element(XName.Get("HandlerName", "http://schemas.microsoft.com/windowsazure"));
                                            if (handlerNameElement != null)
                                            {
                                                string handlerNameInstance = handlerNameElement.Value;
                                                resourceExtensionStatusInstance.HandlerName = handlerNameInstance;
                                            }
                                            
                                            XElement versionElement = resourceExtensionStatusListElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                            if (versionElement != null)
                                            {
                                                string versionInstance = versionElement.Value;
                                                resourceExtensionStatusInstance.Version = versionInstance;
                                            }
                                            
                                            XElement statusElement3 = resourceExtensionStatusListElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                            if (statusElement3 != null)
                                            {
                                                string statusInstance3 = statusElement3.Value;
                                                resourceExtensionStatusInstance.Status = statusInstance3;
                                            }
                                            
                                            XElement codeElement2 = resourceExtensionStatusListElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                            if (codeElement2 != null && !string.IsNullOrEmpty(codeElement2.Value))
                                            {
                                                int codeInstance2 = int.Parse(codeElement2.Value, CultureInfo.InvariantCulture);
                                                resourceExtensionStatusInstance.Code = codeInstance2;
                                            }
                                            
                                            XElement messageElement3 = resourceExtensionStatusListElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                            if (messageElement3 != null)
                                            {
                                                GuestAgentMessage messageInstance3 = new GuestAgentMessage();
                                                resourceExtensionStatusInstance.Message = messageInstance3;
                                                
                                                XElement messageResourceIdElement2 = messageElement3.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                if (messageResourceIdElement2 != null)
                                                {
                                                    string messageResourceIdInstance2 = messageResourceIdElement2.Value;
                                                    messageInstance3.MessageResourceId = messageResourceIdInstance2;
                                                }
                                                
                                                XElement paramListSequenceElement2 = messageElement3.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                if (paramListSequenceElement2 != null)
                                                {
                                                    foreach (XElement paramListElement2 in paramListSequenceElement2.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        messageInstance3.ParamList.Add(paramListElement2.Value);
                                                    }
                                                }
                                            }
                                            
                                            XElement formattedMessageElement2 = resourceExtensionStatusListElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                            if (formattedMessageElement2 != null)
                                            {
                                                GuestAgentFormattedMessage formattedMessageInstance2 = new GuestAgentFormattedMessage();
                                                resourceExtensionStatusInstance.FormattedMessage = formattedMessageInstance2;
                                                
                                                XElement languageElement2 = formattedMessageElement2.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                if (languageElement2 != null)
                                                {
                                                    string languageInstance2 = languageElement2.Value;
                                                    formattedMessageInstance2.Language = languageInstance2;
                                                }
                                                
                                                XElement messageElement4 = formattedMessageElement2.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                if (messageElement4 != null)
                                                {
                                                    string messageInstance4 = messageElement4.Value;
                                                    formattedMessageInstance2.Message = messageInstance4;
                                                }
                                            }
                                            
                                            XElement extensionSettingStatusElement = resourceExtensionStatusListElement.Element(XName.Get("ExtensionSettingStatus", "http://schemas.microsoft.com/windowsazure"));
                                            if (extensionSettingStatusElement != null)
                                            {
                                                ResourceExtensionConfigurationStatus extensionSettingStatusInstance = new ResourceExtensionConfigurationStatus();
                                                resourceExtensionStatusInstance.ExtensionSettingStatus = extensionSettingStatusInstance;
                                                
                                                XElement timestampElement2 = extensionSettingStatusElement.Element(XName.Get("Timestamp", "http://schemas.microsoft.com/windowsazure"));
                                                if (timestampElement2 != null && !string.IsNullOrEmpty(timestampElement2.Value))
                                                {
                                                    DateTime timestampInstance2 = DateTime.Parse(timestampElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                    extensionSettingStatusInstance.Timestamp = timestampInstance2;
                                                }
                                                
                                                XElement configurationAppliedTimeElement = extensionSettingStatusElement.Element(XName.Get("ConfigurationAppliedTime", "http://schemas.microsoft.com/windowsazure"));
                                                if (configurationAppliedTimeElement != null && !string.IsNullOrEmpty(configurationAppliedTimeElement.Value))
                                                {
                                                    DateTime configurationAppliedTimeInstance = DateTime.Parse(configurationAppliedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                    extensionSettingStatusInstance.ConfigurationAppliedTime = configurationAppliedTimeInstance;
                                                }
                                                
                                                XElement nameElement3 = extensionSettingStatusElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement3 != null)
                                                {
                                                    string nameInstance3 = nameElement3.Value;
                                                    extensionSettingStatusInstance.Name = nameInstance3;
                                                }
                                                
                                                XElement operationElement = extensionSettingStatusElement.Element(XName.Get("Operation", "http://schemas.microsoft.com/windowsazure"));
                                                if (operationElement != null)
                                                {
                                                    string operationInstance = operationElement.Value;
                                                    extensionSettingStatusInstance.Operation = operationInstance;
                                                }
                                                
                                                XElement statusElement4 = extensionSettingStatusElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                                if (statusElement4 != null)
                                                {
                                                    string statusInstance4 = statusElement4.Value;
                                                    extensionSettingStatusInstance.Status = statusInstance4;
                                                }
                                                
                                                XElement codeElement3 = extensionSettingStatusElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                                if (codeElement3 != null && !string.IsNullOrEmpty(codeElement3.Value))
                                                {
                                                    int codeInstance3 = int.Parse(codeElement3.Value, CultureInfo.InvariantCulture);
                                                    extensionSettingStatusInstance.Code = codeInstance3;
                                                }
                                                
                                                XElement messageElement5 = extensionSettingStatusElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                if (messageElement5 != null)
                                                {
                                                    GuestAgentMessage messageInstance5 = new GuestAgentMessage();
                                                    extensionSettingStatusInstance.Message = messageInstance5;
                                                    
                                                    XElement messageResourceIdElement3 = messageElement5.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                    if (messageResourceIdElement3 != null)
                                                    {
                                                        string messageResourceIdInstance3 = messageResourceIdElement3.Value;
                                                        messageInstance5.MessageResourceId = messageResourceIdInstance3;
                                                    }
                                                    
                                                    XElement paramListSequenceElement3 = messageElement5.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                    if (paramListSequenceElement3 != null)
                                                    {
                                                        foreach (XElement paramListElement3 in paramListSequenceElement3.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            messageInstance5.ParamList.Add(paramListElement3.Value);
                                                        }
                                                    }
                                                }
                                                
                                                XElement formattedMessageElement3 = extensionSettingStatusElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                                if (formattedMessageElement3 != null)
                                                {
                                                    GuestAgentFormattedMessage formattedMessageInstance3 = new GuestAgentFormattedMessage();
                                                    extensionSettingStatusInstance.FormattedMessage = formattedMessageInstance3;
                                                    
                                                    XElement languageElement3 = formattedMessageElement3.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                    if (languageElement3 != null)
                                                    {
                                                        string languageInstance3 = languageElement3.Value;
                                                        formattedMessageInstance3.Language = languageInstance3;
                                                    }
                                                    
                                                    XElement messageElement6 = formattedMessageElement3.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                    if (messageElement6 != null)
                                                    {
                                                        string messageInstance6 = messageElement6.Value;
                                                        formattedMessageInstance3.Message = messageInstance6;
                                                    }
                                                }
                                                
                                                XElement subStatusListSequenceElement = extensionSettingStatusElement.Element(XName.Get("SubStatusList", "http://schemas.microsoft.com/windowsazure"));
                                                if (subStatusListSequenceElement != null)
                                                {
                                                    foreach (XElement subStatusListElement in subStatusListSequenceElement.Elements(XName.Get("SubStatus", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        ResourceExtensionSubStatus subStatusInstance = new ResourceExtensionSubStatus();
                                                        extensionSettingStatusInstance.SubStatusList.Add(subStatusInstance);
                                                        
                                                        XElement nameElement4 = subStatusListElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                        if (nameElement4 != null)
                                                        {
                                                            string nameInstance4 = nameElement4.Value;
                                                            subStatusInstance.Name = nameInstance4;
                                                        }
                                                        
                                                        XElement statusElement5 = subStatusListElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                                        if (statusElement5 != null)
                                                        {
                                                            string statusInstance5 = statusElement5.Value;
                                                            subStatusInstance.Status = statusInstance5;
                                                        }
                                                        
                                                        XElement codeElement4 = subStatusListElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                                        if (codeElement4 != null && !string.IsNullOrEmpty(codeElement4.Value))
                                                        {
                                                            int codeInstance4 = int.Parse(codeElement4.Value, CultureInfo.InvariantCulture);
                                                            subStatusInstance.Code = codeInstance4;
                                                        }
                                                        
                                                        XElement messageElement7 = subStatusListElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                        if (messageElement7 != null)
                                                        {
                                                            GuestAgentMessage messageInstance7 = new GuestAgentMessage();
                                                            subStatusInstance.Message = messageInstance7;
                                                            
                                                            XElement messageResourceIdElement4 = messageElement7.Element(XName.Get("MessageResourceId", "http://schemas.microsoft.com/windowsazure"));
                                                            if (messageResourceIdElement4 != null)
                                                            {
                                                                string messageResourceIdInstance4 = messageResourceIdElement4.Value;
                                                                messageInstance7.MessageResourceId = messageResourceIdInstance4;
                                                            }
                                                            
                                                            XElement paramListSequenceElement4 = messageElement7.Element(XName.Get("ParamList", "http://schemas.microsoft.com/windowsazure"));
                                                            if (paramListSequenceElement4 != null)
                                                            {
                                                                foreach (XElement paramListElement4 in paramListSequenceElement4.Elements(XName.Get("Param", "http://schemas.microsoft.com/windowsazure")))
                                                                {
                                                                    messageInstance7.ParamList.Add(paramListElement4.Value);
                                                                }
                                                            }
                                                        }
                                                        
                                                        XElement formattedMessageElement4 = subStatusListElement.Element(XName.Get("FormattedMessage", "http://schemas.microsoft.com/windowsazure"));
                                                        if (formattedMessageElement4 != null)
                                                        {
                                                            GuestAgentFormattedMessage formattedMessageInstance4 = new GuestAgentFormattedMessage();
                                                            subStatusInstance.FormattedMessage = formattedMessageInstance4;
                                                            
                                                            XElement languageElement4 = formattedMessageElement4.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                                            if (languageElement4 != null)
                                                            {
                                                                string languageInstance4 = languageElement4.Value;
                                                                formattedMessageInstance4.Language = languageInstance4;
                                                            }
                                                            
                                                            XElement messageElement8 = formattedMessageElement4.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                                            if (messageElement8 != null)
                                                            {
                                                                string messageInstance8 = messageElement8.Value;
                                                                formattedMessageInstance4.Message = messageInstance8;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement powerStateElement = roleInstanceListElement.Element(XName.Get("PowerState", "http://schemas.microsoft.com/windowsazure"));
                                    if (powerStateElement != null)
                                    {
                                        RoleInstancePowerState powerStateInstance = ((RoleInstancePowerState)Enum.Parse(typeof(RoleInstancePowerState), powerStateElement.Value, true));
                                        roleInstanceInstance.PowerState = powerStateInstance;
                                    }
                                    
                                    XElement hostNameElement = roleInstanceListElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostNameElement != null)
                                    {
                                        string hostNameInstance = hostNameElement.Value;
                                        roleInstanceInstance.HostName = hostNameInstance;
                                    }
                                    
                                    XElement remoteAccessCertificateThumbprintElement = roleInstanceListElement.Element(XName.Get("RemoteAccessCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                    if (remoteAccessCertificateThumbprintElement != null)
                                    {
                                        string remoteAccessCertificateThumbprintInstance = remoteAccessCertificateThumbprintElement.Value;
                                        roleInstanceInstance.RemoteAccessCertificateThumbprint = remoteAccessCertificateThumbprintInstance;
                                    }
                                    
                                    XElement publicIPsSequenceElement = roleInstanceListElement.Element(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                    if (publicIPsSequenceElement != null)
                                    {
                                        foreach (XElement publicIPsElement in publicIPsSequenceElement.Elements(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            RoleInstance.PublicIP publicIPInstance = new RoleInstance.PublicIP();
                                            roleInstanceInstance.PublicIPs.Add(publicIPInstance);
                                            
                                            XElement nameElement5 = publicIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement5 != null)
                                            {
                                                string nameInstance5 = nameElement5.Value;
                                                publicIPInstance.Name = nameInstance5;
                                            }
                                            
                                            XElement addressElement = publicIPsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                            if (addressElement != null)
                                            {
                                                string addressInstance = addressElement.Value;
                                                publicIPInstance.Address = addressInstance;
                                            }
                                            
                                            XElement idleTimeoutInMinutesElement2 = publicIPsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            if (idleTimeoutInMinutesElement2 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement2.Value))
                                            {
                                                int idleTimeoutInMinutesInstance2 = int.Parse(idleTimeoutInMinutesElement2.Value, CultureInfo.InvariantCulture);
                                                publicIPInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                                            }
                                            
                                            XElement domainNameLabelElement = publicIPsElement.Element(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                            if (domainNameLabelElement != null)
                                            {
                                                string domainNameLabelInstance = domainNameLabelElement.Value;
                                                publicIPInstance.DomainNameLabel = domainNameLabelInstance;
                                            }
                                            
                                            XElement fqdnsSequenceElement = publicIPsElement.Element(XName.Get("Fqdns", "http://schemas.microsoft.com/windowsazure"));
                                            if (fqdnsSequenceElement != null)
                                            {
                                                foreach (XElement fqdnsElement in fqdnsSequenceElement.Elements(XName.Get("Fqdn", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    publicIPInstance.Fqdns.Add(fqdnsElement.Value);
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement networkInterfacesSequenceElement = roleInstanceListElement.Element(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                    if (networkInterfacesSequenceElement != null)
                                    {
                                        foreach (XElement networkInterfacesElement in networkInterfacesSequenceElement.Elements(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            NetworkInterfaceInstance networkInterfaceInstance = new NetworkInterfaceInstance();
                                            roleInstanceInstance.NetworkInterfaces.Add(networkInterfaceInstance);
                                            
                                            XElement nameElement6 = networkInterfacesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement6 != null)
                                            {
                                                string nameInstance6 = nameElement6.Value;
                                                networkInterfaceInstance.Name = nameInstance6;
                                            }
                                            
                                            XElement macAddressElement = networkInterfacesElement.Element(XName.Get("MacAddress", "http://schemas.microsoft.com/windowsazure"));
                                            if (macAddressElement != null)
                                            {
                                                string macAddressInstance = macAddressElement.Value;
                                                networkInterfaceInstance.MacAddress = macAddressInstance;
                                            }
                                            
                                            XElement iPConfigurationsSequenceElement = networkInterfacesElement.Element(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                            if (iPConfigurationsSequenceElement != null)
                                            {
                                                foreach (XElement iPConfigurationsElement in iPConfigurationsSequenceElement.Elements(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    IPConfigurationInstance iPConfigurationInstance = new IPConfigurationInstance();
                                                    networkInterfaceInstance.IPConfigurations.Add(iPConfigurationInstance);
                                                    
                                                    XElement subnetNameElement = iPConfigurationsElement.Element(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (subnetNameElement != null)
                                                    {
                                                        string subnetNameInstance = subnetNameElement.Value;
                                                        iPConfigurationInstance.SubnetName = subnetNameInstance;
                                                    }
                                                    
                                                    XElement addressElement2 = iPConfigurationsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                                    if (addressElement2 != null)
                                                    {
                                                        string addressInstance2 = addressElement2.Value;
                                                        iPConfigurationInstance.Address = addressInstance2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            XElement upgradeStatusElement = deploymentElement.Element(XName.Get("UpgradeStatus", "http://schemas.microsoft.com/windowsazure"));
                            if (upgradeStatusElement != null)
                            {
                                UpgradeStatus upgradeStatusInstance = new UpgradeStatus();
                                result.UpgradeStatus = upgradeStatusInstance;
                                
                                XElement upgradeTypeElement = upgradeStatusElement.Element(XName.Get("UpgradeType", "http://schemas.microsoft.com/windowsazure"));
                                if (upgradeTypeElement != null)
                                {
                                    DeploymentUpgradeType upgradeTypeInstance = ((DeploymentUpgradeType)Enum.Parse(typeof(DeploymentUpgradeType), upgradeTypeElement.Value, true));
                                    upgradeStatusInstance.UpgradeType = upgradeTypeInstance;
                                }
                                
                                XElement currentUpgradeDomainStateElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomainState", "http://schemas.microsoft.com/windowsazure"));
                                if (currentUpgradeDomainStateElement != null)
                                {
                                    UpgradeDomainState currentUpgradeDomainStateInstance = ((UpgradeDomainState)Enum.Parse(typeof(UpgradeDomainState), currentUpgradeDomainStateElement.Value, true));
                                    upgradeStatusInstance.CurrentUpgradeDomainState = currentUpgradeDomainStateInstance;
                                }
                                
                                XElement currentUpgradeDomainElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                if (currentUpgradeDomainElement != null)
                                {
                                    int currentUpgradeDomainInstance = int.Parse(currentUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                    upgradeStatusInstance.CurrentUpgradeDomain = currentUpgradeDomainInstance;
                                }
                            }
                            
                            XElement upgradeDomainCountElement = deploymentElement.Element(XName.Get("UpgradeDomainCount", "http://schemas.microsoft.com/windowsazure"));
                            if (upgradeDomainCountElement != null)
                            {
                                int upgradeDomainCountInstance = int.Parse(upgradeDomainCountElement.Value, CultureInfo.InvariantCulture);
                                result.UpgradeDomainCount = upgradeDomainCountInstance;
                            }
                            
                            XElement roleListSequenceElement = deploymentElement.Element(XName.Get("RoleList", "http://schemas.microsoft.com/windowsazure"));
                            if (roleListSequenceElement != null)
                            {
                                foreach (XElement roleListElement in roleListSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    Role roleInstance = new Role();
                                    result.Roles.Add(roleInstance);
                                    
                                    XElement roleNameElement2 = roleListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleNameElement2 != null)
                                    {
                                        string roleNameInstance2 = roleNameElement2.Value;
                                        roleInstance.RoleName = roleNameInstance2;
                                    }
                                    
                                    XElement osVersionElement = roleListElement.Element(XName.Get("OsVersion", "http://schemas.microsoft.com/windowsazure"));
                                    if (osVersionElement != null)
                                    {
                                        string osVersionInstance = osVersionElement.Value;
                                        roleInstance.OSVersion = osVersionInstance;
                                    }
                                    
                                    XElement roleTypeElement = roleListElement.Element(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleTypeElement != null)
                                    {
                                        string roleTypeInstance = roleTypeElement.Value;
                                        roleInstance.RoleType = roleTypeInstance;
                                    }
                                    
                                    XElement configurationSetsSequenceElement = roleListElement.Element(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                                    if (configurationSetsSequenceElement != null)
                                    {
                                        foreach (XElement configurationSetsElement in configurationSetsSequenceElement.Elements(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                            roleInstance.ConfigurationSets.Add(configurationSetInstance);
                                            
                                            XElement configurationSetTypeElement = configurationSetsElement.Element(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                            if (configurationSetTypeElement != null)
                                            {
                                                string configurationSetTypeInstance = configurationSetTypeElement.Value;
                                                configurationSetInstance.ConfigurationSetType = configurationSetTypeInstance;
                                            }
                                            
                                            XElement inputEndpointsSequenceElement = configurationSetsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                            if (inputEndpointsSequenceElement != null)
                                            {
                                                foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    InputEndpoint inputEndpointInstance = new InputEndpoint();
                                                    configurationSetInstance.InputEndpoints.Add(inputEndpointInstance);
                                                    
                                                    XElement loadBalancedEndpointSetNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (loadBalancedEndpointSetNameElement != null)
                                                    {
                                                        string loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement.Value;
                                                        inputEndpointInstance.LoadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                                                    }
                                                    
                                                    XElement localPortElement2 = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                                    if (localPortElement2 != null && !string.IsNullOrEmpty(localPortElement2.Value))
                                                    {
                                                        int localPortInstance2 = int.Parse(localPortElement2.Value, CultureInfo.InvariantCulture);
                                                        inputEndpointInstance.LocalPort = localPortInstance2;
                                                    }
                                                    
                                                    XElement nameElement7 = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement7 != null)
                                                    {
                                                        string nameInstance7 = nameElement7.Value;
                                                        inputEndpointInstance.Name = nameInstance7;
                                                    }
                                                    
                                                    XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                    if (portElement != null && !string.IsNullOrEmpty(portElement.Value))
                                                    {
                                                        int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                        inputEndpointInstance.Port = portInstance;
                                                    }
                                                    
                                                    XElement loadBalancerProbeElement = inputEndpointsElement.Element(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                                    if (loadBalancerProbeElement != null)
                                                    {
                                                        LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                        inputEndpointInstance.LoadBalancerProbe = loadBalancerProbeInstance;
                                                        
                                                        XElement pathElement = loadBalancerProbeElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                        if (pathElement != null)
                                                        {
                                                            string pathInstance = pathElement.Value;
                                                            loadBalancerProbeInstance.Path = pathInstance;
                                                        }
                                                        
                                                        XElement portElement2 = loadBalancerProbeElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                        if (portElement2 != null)
                                                        {
                                                            int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                            loadBalancerProbeInstance.Port = portInstance2;
                                                        }
                                                        
                                                        XElement protocolElement2 = loadBalancerProbeElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                        if (protocolElement2 != null)
                                                        {
                                                            LoadBalancerProbeTransportProtocol protocolInstance2 = ComputeManagementClient.ParseLoadBalancerProbeTransportProtocol(protocolElement2.Value);
                                                            loadBalancerProbeInstance.Protocol = protocolInstance2;
                                                        }
                                                        
                                                        XElement intervalInSecondsElement = loadBalancerProbeElement.Element(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                        if (intervalInSecondsElement != null && !string.IsNullOrEmpty(intervalInSecondsElement.Value))
                                                        {
                                                            int intervalInSecondsInstance = int.Parse(intervalInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                            loadBalancerProbeInstance.IntervalInSeconds = intervalInSecondsInstance;
                                                        }
                                                        
                                                        XElement timeoutInSecondsElement = loadBalancerProbeElement.Element(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                        if (timeoutInSecondsElement != null && !string.IsNullOrEmpty(timeoutInSecondsElement.Value))
                                                        {
                                                            int timeoutInSecondsInstance = int.Parse(timeoutInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                            loadBalancerProbeInstance.TimeoutInSeconds = timeoutInSecondsInstance;
                                                        }
                                                    }
                                                    
                                                    XElement protocolElement3 = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    if (protocolElement3 != null)
                                                    {
                                                        string protocolInstance3 = protocolElement3.Value;
                                                        inputEndpointInstance.Protocol = protocolInstance3;
                                                    }
                                                    
                                                    XElement vipElement2 = inputEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                                    if (vipElement2 != null)
                                                    {
                                                        string vipInstance2 = vipElement2.Value;
                                                        inputEndpointInstance.VirtualIPAddress = vipInstance2;
                                                    }
                                                    
                                                    XElement enableDirectServerReturnElement = inputEndpointsElement.Element(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                                    if (enableDirectServerReturnElement != null && !string.IsNullOrEmpty(enableDirectServerReturnElement.Value))
                                                    {
                                                        bool enableDirectServerReturnInstance = bool.Parse(enableDirectServerReturnElement.Value);
                                                        inputEndpointInstance.EnableDirectServerReturn = enableDirectServerReturnInstance;
                                                    }
                                                    
                                                    XElement loadBalancerNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancerName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (loadBalancerNameElement != null)
                                                    {
                                                        string loadBalancerNameInstance = loadBalancerNameElement.Value;
                                                        inputEndpointInstance.LoadBalancerName = loadBalancerNameInstance;
                                                    }
                                                    
                                                    XElement endpointAclElement = inputEndpointsElement.Element(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                                    if (endpointAclElement != null)
                                                    {
                                                        EndpointAcl endpointAclInstance = new EndpointAcl();
                                                        inputEndpointInstance.EndpointAcl = endpointAclInstance;
                                                        
                                                        XElement rulesSequenceElement = endpointAclElement.Element(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                        if (rulesSequenceElement != null)
                                                        {
                                                            foreach (XElement rulesElement in rulesSequenceElement.Elements(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                AccessControlListRule ruleInstance = new AccessControlListRule();
                                                                endpointAclInstance.Rules.Add(ruleInstance);
                                                                
                                                                XElement orderElement = rulesElement.Element(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                                if (orderElement != null && !string.IsNullOrEmpty(orderElement.Value))
                                                                {
                                                                    int orderInstance = int.Parse(orderElement.Value, CultureInfo.InvariantCulture);
                                                                    ruleInstance.Order = orderInstance;
                                                                }
                                                                
                                                                XElement actionElement = rulesElement.Element(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                                if (actionElement != null)
                                                                {
                                                                    string actionInstance = actionElement.Value;
                                                                    ruleInstance.Action = actionInstance;
                                                                }
                                                                
                                                                XElement remoteSubnetElement = rulesElement.Element(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                                if (remoteSubnetElement != null)
                                                                {
                                                                    string remoteSubnetInstance = remoteSubnetElement.Value;
                                                                    ruleInstance.RemoteSubnet = remoteSubnetInstance;
                                                                }
                                                                
                                                                XElement descriptionElement = rulesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                                if (descriptionElement != null)
                                                                {
                                                                    string descriptionInstance = descriptionElement.Value;
                                                                    ruleInstance.Description = descriptionInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement idleTimeoutInMinutesElement3 = inputEndpointsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                    if (idleTimeoutInMinutesElement3 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement3.Value))
                                                    {
                                                        int idleTimeoutInMinutesInstance3 = int.Parse(idleTimeoutInMinutesElement3.Value, CultureInfo.InvariantCulture);
                                                        inputEndpointInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance3;
                                                    }
                                                    
                                                    XElement loadBalancerDistributionElement = inputEndpointsElement.Element(XName.Get("LoadBalancerDistribution", "http://schemas.microsoft.com/windowsazure"));
                                                    if (loadBalancerDistributionElement != null)
                                                    {
                                                        string loadBalancerDistributionInstance = loadBalancerDistributionElement.Value;
                                                        inputEndpointInstance.LoadBalancerDistribution = loadBalancerDistributionInstance;
                                                    }
                                                    
                                                    XElement virtualIPNameElement = inputEndpointsElement.Element(XName.Get("VirtualIPName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (virtualIPNameElement != null)
                                                    {
                                                        string virtualIPNameInstance = virtualIPNameElement.Value;
                                                        inputEndpointInstance.VirtualIPName = virtualIPNameInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement subnetNamesSequenceElement = configurationSetsElement.Element(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                            if (subnetNamesSequenceElement != null)
                                            {
                                                foreach (XElement subnetNamesElement in subnetNamesSequenceElement.Elements(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    configurationSetInstance.SubnetNames.Add(subnetNamesElement.Value);
                                                }
                                            }
                                            
                                            XElement staticVirtualNetworkIPAddressElement = configurationSetsElement.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                            if (staticVirtualNetworkIPAddressElement != null)
                                            {
                                                string staticVirtualNetworkIPAddressInstance = staticVirtualNetworkIPAddressElement.Value;
                                                configurationSetInstance.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance;
                                            }
                                            
                                            XElement publicIPsSequenceElement2 = configurationSetsElement.Element(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                            if (publicIPsSequenceElement2 != null)
                                            {
                                                foreach (XElement publicIPsElement2 in publicIPsSequenceElement2.Elements(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    ConfigurationSet.PublicIP publicIPInstance2 = new ConfigurationSet.PublicIP();
                                                    configurationSetInstance.PublicIPs.Add(publicIPInstance2);
                                                    
                                                    XElement nameElement8 = publicIPsElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement8 != null)
                                                    {
                                                        string nameInstance8 = nameElement8.Value;
                                                        publicIPInstance2.Name = nameInstance8;
                                                    }
                                                    
                                                    XElement idleTimeoutInMinutesElement4 = publicIPsElement2.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                    if (idleTimeoutInMinutesElement4 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement4.Value))
                                                    {
                                                        int idleTimeoutInMinutesInstance4 = int.Parse(idleTimeoutInMinutesElement4.Value, CultureInfo.InvariantCulture);
                                                        publicIPInstance2.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance4;
                                                    }
                                                    
                                                    XElement domainNameLabelElement2 = publicIPsElement2.Element(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                                    if (domainNameLabelElement2 != null)
                                                    {
                                                        string domainNameLabelInstance2 = domainNameLabelElement2.Value;
                                                        publicIPInstance2.DomainNameLabel = domainNameLabelInstance2;
                                                    }
                                                }
                                            }
                                            
                                            XElement networkInterfacesSequenceElement2 = configurationSetsElement.Element(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                            if (networkInterfacesSequenceElement2 != null)
                                            {
                                                foreach (XElement networkInterfacesElement2 in networkInterfacesSequenceElement2.Elements(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    NetworkInterface networkInterfaceInstance2 = new NetworkInterface();
                                                    configurationSetInstance.NetworkInterfaces.Add(networkInterfaceInstance2);
                                                    
                                                    XElement nameElement9 = networkInterfacesElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    if (nameElement9 != null)
                                                    {
                                                        string nameInstance9 = nameElement9.Value;
                                                        networkInterfaceInstance2.Name = nameInstance9;
                                                    }
                                                    
                                                    XElement iPConfigurationsSequenceElement2 = networkInterfacesElement2.Element(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                                    if (iPConfigurationsSequenceElement2 != null)
                                                    {
                                                        foreach (XElement iPConfigurationsElement2 in iPConfigurationsSequenceElement2.Elements(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            IPConfiguration iPConfigurationInstance2 = new IPConfiguration();
                                                            networkInterfaceInstance2.IPConfigurations.Add(iPConfigurationInstance2);
                                                            
                                                            XElement subnetNameElement2 = iPConfigurationsElement2.Element(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                            if (subnetNameElement2 != null)
                                                            {
                                                                string subnetNameInstance2 = subnetNameElement2.Value;
                                                                iPConfigurationInstance2.SubnetName = subnetNameInstance2;
                                                            }
                                                            
                                                            XElement staticVirtualNetworkIPAddressElement2 = iPConfigurationsElement2.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                            if (staticVirtualNetworkIPAddressElement2 != null)
                                                            {
                                                                string staticVirtualNetworkIPAddressInstance2 = staticVirtualNetworkIPAddressElement2.Value;
                                                                iPConfigurationInstance2.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement networkSecurityGroupElement = networkInterfacesElement2.Element(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                                    if (networkSecurityGroupElement != null)
                                                    {
                                                        string networkSecurityGroupInstance = networkSecurityGroupElement.Value;
                                                        networkInterfaceInstance2.NetworkSecurityGroup = networkSecurityGroupInstance;
                                                    }
                                                    
                                                    XElement iPForwardingElement = networkInterfacesElement2.Element(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                                    if (iPForwardingElement != null)
                                                    {
                                                        string iPForwardingInstance = iPForwardingElement.Value;
                                                        networkInterfaceInstance2.IPForwarding = iPForwardingInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement networkSecurityGroupElement2 = configurationSetsElement.Element(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                            if (networkSecurityGroupElement2 != null)
                                            {
                                                string networkSecurityGroupInstance2 = networkSecurityGroupElement2.Value;
                                                configurationSetInstance.NetworkSecurityGroup = networkSecurityGroupInstance2;
                                            }
                                            
                                            XElement iPForwardingElement2 = configurationSetsElement.Element(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                            if (iPForwardingElement2 != null)
                                            {
                                                string iPForwardingInstance2 = iPForwardingElement2.Value;
                                                configurationSetInstance.IPForwarding = iPForwardingInstance2;
                                            }
                                            
                                            XElement computerNameElement = configurationSetsElement.Element(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                            if (computerNameElement != null)
                                            {
                                                string computerNameInstance = computerNameElement.Value;
                                                configurationSetInstance.ComputerName = computerNameInstance;
                                            }
                                            
                                            XElement adminPasswordElement = configurationSetsElement.Element(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                            if (adminPasswordElement != null)
                                            {
                                                string adminPasswordInstance = adminPasswordElement.Value;
                                                configurationSetInstance.AdminPassword = adminPasswordInstance;
                                            }
                                            
                                            XElement resetPasswordOnFirstLogonElement = configurationSetsElement.Element(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                            if (resetPasswordOnFirstLogonElement != null && !string.IsNullOrEmpty(resetPasswordOnFirstLogonElement.Value))
                                            {
                                                bool resetPasswordOnFirstLogonInstance = bool.Parse(resetPasswordOnFirstLogonElement.Value);
                                                configurationSetInstance.ResetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                                            }
                                            
                                            XElement enableAutomaticUpdatesElement = configurationSetsElement.Element(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                            if (enableAutomaticUpdatesElement != null && !string.IsNullOrEmpty(enableAutomaticUpdatesElement.Value))
                                            {
                                                bool enableAutomaticUpdatesInstance = bool.Parse(enableAutomaticUpdatesElement.Value);
                                                configurationSetInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                            }
                                            
                                            XElement timeZoneElement = configurationSetsElement.Element(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                            if (timeZoneElement != null)
                                            {
                                                string timeZoneInstance = timeZoneElement.Value;
                                                configurationSetInstance.TimeZone = timeZoneInstance;
                                            }
                                            
                                            XElement domainJoinElement = configurationSetsElement.Element(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                            if (domainJoinElement != null)
                                            {
                                                DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                                configurationSetInstance.DomainJoin = domainJoinInstance;
                                                
                                                XElement credentialsElement = domainJoinElement.Element(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                                if (credentialsElement != null)
                                                {
                                                    DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                                    domainJoinInstance.Credentials = credentialsInstance;
                                                    
                                                    XElement domainElement = credentialsElement.Element(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                                    if (domainElement != null)
                                                    {
                                                        string domainInstance = domainElement.Value;
                                                        credentialsInstance.Domain = domainInstance;
                                                    }
                                                    
                                                    XElement usernameElement = credentialsElement.Element(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                                    if (usernameElement != null)
                                                    {
                                                        string usernameInstance = usernameElement.Value;
                                                        credentialsInstance.UserName = usernameInstance;
                                                    }
                                                    
                                                    XElement passwordElement = credentialsElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                                    if (passwordElement != null)
                                                    {
                                                        string passwordInstance = passwordElement.Value;
                                                        credentialsInstance.Password = passwordInstance;
                                                    }
                                                }
                                                
                                                XElement joinDomainElement = domainJoinElement.Element(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                                if (joinDomainElement != null)
                                                {
                                                    string joinDomainInstance = joinDomainElement.Value;
                                                    domainJoinInstance.DomainToJoin = joinDomainInstance;
                                                }
                                                
                                                XElement machineObjectOUElement = domainJoinElement.Element(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                                if (machineObjectOUElement != null)
                                                {
                                                    string machineObjectOUInstance = machineObjectOUElement.Value;
                                                    domainJoinInstance.LdapMachineObjectOU = machineObjectOUInstance;
                                                }
                                                
                                                XElement provisioningElement = domainJoinElement.Element(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                                if (provisioningElement != null)
                                                {
                                                    DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                                    domainJoinInstance.Provisioning = provisioningInstance;
                                                    
                                                    XElement accountDataElement = provisioningElement.Element(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                                    if (accountDataElement != null)
                                                    {
                                                        string accountDataInstance = accountDataElement.Value;
                                                        provisioningInstance.AccountData = accountDataInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement storedCertificateSettingsSequenceElement = configurationSetsElement.Element(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                            if (storedCertificateSettingsSequenceElement != null)
                                            {
                                                foreach (XElement storedCertificateSettingsElement in storedCertificateSettingsSequenceElement.Elements(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                                    configurationSetInstance.StoredCertificateSettings.Add(certificateSettingInstance);
                                                    
                                                    XElement storeLocationElement = storedCertificateSettingsElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                                    if (storeLocationElement != null)
                                                    {
                                                    }
                                                    
                                                    XElement storeNameElement = storedCertificateSettingsElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (storeNameElement != null)
                                                    {
                                                        string storeNameInstance = storeNameElement.Value;
                                                        certificateSettingInstance.StoreName = storeNameInstance;
                                                    }
                                                    
                                                    XElement thumbprintElement = storedCertificateSettingsElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                    if (thumbprintElement != null)
                                                    {
                                                        string thumbprintInstance = thumbprintElement.Value;
                                                        certificateSettingInstance.Thumbprint = thumbprintInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement winRMElement = configurationSetsElement.Element(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                            if (winRMElement != null)
                                            {
                                                WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                                configurationSetInstance.WindowsRemoteManagement = winRMInstance;
                                                
                                                XElement listenersSequenceElement = winRMElement.Element(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                                if (listenersSequenceElement != null)
                                                {
                                                    foreach (XElement listenersElement in listenersSequenceElement.Elements(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                        winRMInstance.Listeners.Add(listenerInstance);
                                                        
                                                        XElement protocolElement4 = listenersElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                        if (protocolElement4 != null)
                                                        {
                                                            VirtualMachineWindowsRemoteManagementListenerType protocolInstance4 = ((VirtualMachineWindowsRemoteManagementListenerType)Enum.Parse(typeof(VirtualMachineWindowsRemoteManagementListenerType), protocolElement4.Value, true));
                                                            listenerInstance.ListenerType = protocolInstance4;
                                                        }
                                                        
                                                        XElement certificateThumbprintElement = listenersElement.Element(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                        if (certificateThumbprintElement != null)
                                                        {
                                                            string certificateThumbprintInstance = certificateThumbprintElement.Value;
                                                            listenerInstance.CertificateThumbprint = certificateThumbprintInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement adminUsernameElement = configurationSetsElement.Element(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                            if (adminUsernameElement != null)
                                            {
                                                string adminUsernameInstance = adminUsernameElement.Value;
                                                configurationSetInstance.AdminUserName = adminUsernameInstance;
                                            }
                                            
                                            XElement additionalUnattendContentElement = configurationSetsElement.Element(XName.Get("AdditionalUnattendContent", "http://schemas.microsoft.com/windowsazure"));
                                            if (additionalUnattendContentElement != null)
                                            {
                                                AdditionalUnattendContentSettings additionalUnattendContentInstance = new AdditionalUnattendContentSettings();
                                                configurationSetInstance.AdditionalUnattendContent = additionalUnattendContentInstance;
                                                
                                                XElement passesSequenceElement = additionalUnattendContentElement.Element(XName.Get("Passes", "http://schemas.microsoft.com/windowsazure"));
                                                if (passesSequenceElement != null)
                                                {
                                                    foreach (XElement passesElement in passesSequenceElement.Elements(XName.Get("UnattendPass", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        UnattendPassSettings unattendPassInstance = new UnattendPassSettings();
                                                        additionalUnattendContentInstance.UnattendPasses.Add(unattendPassInstance);
                                                        
                                                        XElement passNameElement = passesElement.Element(XName.Get("PassName", "http://schemas.microsoft.com/windowsazure"));
                                                        if (passNameElement != null)
                                                        {
                                                            string passNameInstance = passNameElement.Value;
                                                            unattendPassInstance.PassName = passNameInstance;
                                                        }
                                                        
                                                        XElement componentsSequenceElement = passesElement.Element(XName.Get("Components", "http://schemas.microsoft.com/windowsazure"));
                                                        if (componentsSequenceElement != null)
                                                        {
                                                            foreach (XElement componentsElement in componentsSequenceElement.Elements(XName.Get("UnattendComponent", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                UnattendComponent unattendComponentInstance = new UnattendComponent();
                                                                unattendPassInstance.UnattendComponents.Add(unattendComponentInstance);
                                                                
                                                                XElement componentNameElement = componentsElement.Element(XName.Get("ComponentName", "http://schemas.microsoft.com/windowsazure"));
                                                                if (componentNameElement != null)
                                                                {
                                                                    string componentNameInstance = componentNameElement.Value;
                                                                    unattendComponentInstance.ComponentName = componentNameInstance;
                                                                }
                                                                
                                                                XElement componentSettingsSequenceElement = componentsElement.Element(XName.Get("ComponentSettings", "http://schemas.microsoft.com/windowsazure"));
                                                                if (componentSettingsSequenceElement != null)
                                                                {
                                                                    foreach (XElement componentSettingsElement in componentSettingsSequenceElement.Elements(XName.Get("ComponentSetting", "http://schemas.microsoft.com/windowsazure")))
                                                                    {
                                                                        ComponentSetting componentSettingInstance = new ComponentSetting();
                                                                        unattendComponentInstance.UnattendComponentSettings.Add(componentSettingInstance);
                                                                        
                                                                        XElement settingNameElement = componentSettingsElement.Element(XName.Get("SettingName", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (settingNameElement != null)
                                                                        {
                                                                            string settingNameInstance = settingNameElement.Value;
                                                                            componentSettingInstance.SettingName = settingNameInstance;
                                                                        }
                                                                        
                                                                        XElement contentElement = componentSettingsElement.Element(XName.Get("Content", "http://schemas.microsoft.com/windowsazure"));
                                                                        if (contentElement != null)
                                                                        {
                                                                            string contentInstance = TypeConversion.FromBase64String(contentElement.Value);
                                                                            componentSettingInstance.Content = contentInstance;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement hostNameElement2 = configurationSetsElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                            if (hostNameElement2 != null)
                                            {
                                                string hostNameInstance2 = hostNameElement2.Value;
                                                configurationSetInstance.HostName = hostNameInstance2;
                                            }
                                            
                                            XElement userNameElement = configurationSetsElement.Element(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                            if (userNameElement != null)
                                            {
                                                string userNameInstance = userNameElement.Value;
                                                configurationSetInstance.UserName = userNameInstance;
                                            }
                                            
                                            XElement userPasswordElement = configurationSetsElement.Element(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                            if (userPasswordElement != null)
                                            {
                                                string userPasswordInstance = userPasswordElement.Value;
                                                configurationSetInstance.UserPassword = userPasswordInstance;
                                            }
                                            
                                            XElement disableSshPasswordAuthenticationElement = configurationSetsElement.Element(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                            if (disableSshPasswordAuthenticationElement != null && !string.IsNullOrEmpty(disableSshPasswordAuthenticationElement.Value))
                                            {
                                                bool disableSshPasswordAuthenticationInstance = bool.Parse(disableSshPasswordAuthenticationElement.Value);
                                                configurationSetInstance.DisableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                                            }
                                            
                                            XElement sSHElement = configurationSetsElement.Element(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                            if (sSHElement != null)
                                            {
                                                SshSettings sSHInstance = new SshSettings();
                                                configurationSetInstance.SshSettings = sSHInstance;
                                                
                                                XElement publicKeysSequenceElement = sSHElement.Element(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                                if (publicKeysSequenceElement != null)
                                                {
                                                    foreach (XElement publicKeysElement in publicKeysSequenceElement.Elements(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                        sSHInstance.PublicKeys.Add(publicKeyInstance);
                                                        
                                                        XElement fingerprintElement = publicKeysElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                        if (fingerprintElement != null)
                                                        {
                                                            string fingerprintInstance = fingerprintElement.Value;
                                                            publicKeyInstance.Fingerprint = fingerprintInstance;
                                                        }
                                                        
                                                        XElement pathElement2 = publicKeysElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                        if (pathElement2 != null)
                                                        {
                                                            string pathInstance2 = pathElement2.Value;
                                                            publicKeyInstance.Path = pathInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                XElement keyPairsSequenceElement = sSHElement.Element(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                                if (keyPairsSequenceElement != null)
                                                {
                                                    foreach (XElement keyPairsElement in keyPairsSequenceElement.Elements(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                        sSHInstance.KeyPairs.Add(keyPairInstance);
                                                        
                                                        XElement fingerprintElement2 = keyPairsElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                        if (fingerprintElement2 != null)
                                                        {
                                                            string fingerprintInstance2 = fingerprintElement2.Value;
                                                            keyPairInstance.Fingerprint = fingerprintInstance2;
                                                        }
                                                        
                                                        XElement pathElement3 = keyPairsElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                        if (pathElement3 != null)
                                                        {
                                                            string pathInstance3 = pathElement3.Value;
                                                            keyPairInstance.Path = pathInstance3;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement customDataElement = configurationSetsElement.Element(XName.Get("CustomData", "http://schemas.microsoft.com/windowsazure"));
                                            if (customDataElement != null)
                                            {
                                                string customDataInstance = customDataElement.Value;
                                                configurationSetInstance.CustomData = customDataInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement resourceExtensionReferencesSequenceElement = roleListElement.Element(XName.Get("ResourceExtensionReferences", "http://schemas.microsoft.com/windowsazure"));
                                    if (resourceExtensionReferencesSequenceElement != null)
                                    {
                                        foreach (XElement resourceExtensionReferencesElement in resourceExtensionReferencesSequenceElement.Elements(XName.Get("ResourceExtensionReference", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ResourceExtensionReference resourceExtensionReferenceInstance = new ResourceExtensionReference();
                                            roleInstance.ResourceExtensionReferences.Add(resourceExtensionReferenceInstance);
                                            
                                            XElement referenceNameElement = resourceExtensionReferencesElement.Element(XName.Get("ReferenceName", "http://schemas.microsoft.com/windowsazure"));
                                            if (referenceNameElement != null)
                                            {
                                                string referenceNameInstance = referenceNameElement.Value;
                                                resourceExtensionReferenceInstance.ReferenceName = referenceNameInstance;
                                            }
                                            
                                            XElement publisherElement = resourceExtensionReferencesElement.Element(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                                            if (publisherElement != null)
                                            {
                                                string publisherInstance = publisherElement.Value;
                                                resourceExtensionReferenceInstance.Publisher = publisherInstance;
                                            }
                                            
                                            XElement nameElement10 = resourceExtensionReferencesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement10 != null)
                                            {
                                                string nameInstance10 = nameElement10.Value;
                                                resourceExtensionReferenceInstance.Name = nameInstance10;
                                            }
                                            
                                            XElement versionElement2 = resourceExtensionReferencesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                            if (versionElement2 != null)
                                            {
                                                string versionInstance2 = versionElement2.Value;
                                                resourceExtensionReferenceInstance.Version = versionInstance2;
                                            }
                                            
                                            XElement resourceExtensionParameterValuesSequenceElement = resourceExtensionReferencesElement.Element(XName.Get("ResourceExtensionParameterValues", "http://schemas.microsoft.com/windowsazure"));
                                            if (resourceExtensionParameterValuesSequenceElement != null)
                                            {
                                                foreach (XElement resourceExtensionParameterValuesElement in resourceExtensionParameterValuesSequenceElement.Elements(XName.Get("ResourceExtensionParameterValue", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    ResourceExtensionParameterValue resourceExtensionParameterValueInstance = new ResourceExtensionParameterValue();
                                                    resourceExtensionReferenceInstance.ResourceExtensionParameterValues.Add(resourceExtensionParameterValueInstance);
                                                    
                                                    XElement keyElement = resourceExtensionParameterValuesElement.Element(XName.Get("Key", "http://schemas.microsoft.com/windowsazure"));
                                                    if (keyElement != null)
                                                    {
                                                        string keyInstance = keyElement.Value;
                                                        resourceExtensionParameterValueInstance.Key = keyInstance;
                                                    }
                                                    
                                                    XElement valueElement = resourceExtensionParameterValuesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                                                    if (valueElement != null)
                                                    {
                                                        string valueInstance = TypeConversion.FromBase64String(valueElement.Value);
                                                        resourceExtensionParameterValueInstance.Value = valueInstance;
                                                    }
                                                    
                                                    XElement typeElement = resourceExtensionParameterValuesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                                    if (typeElement != null)
                                                    {
                                                        string typeInstance = typeElement.Value;
                                                        resourceExtensionParameterValueInstance.Type = typeInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement stateElement = resourceExtensionReferencesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                            if (stateElement != null)
                                            {
                                                string stateInstance = stateElement.Value;
                                                resourceExtensionReferenceInstance.State = stateInstance;
                                            }
                                            
                                            XElement forceUpdateElement = resourceExtensionReferencesElement.Element(XName.Get("ForceUpdate", "http://schemas.microsoft.com/windowsazure"));
                                            if (forceUpdateElement != null && !string.IsNullOrEmpty(forceUpdateElement.Value))
                                            {
                                                bool forceUpdateInstance = bool.Parse(forceUpdateElement.Value);
                                                resourceExtensionReferenceInstance.ForceUpdate = forceUpdateInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement vMImageNameElement = roleListElement.Element(XName.Get("VMImageName", "http://schemas.microsoft.com/windowsazure"));
                                    if (vMImageNameElement != null)
                                    {
                                        string vMImageNameInstance = vMImageNameElement.Value;
                                        roleInstance.VMImageName = vMImageNameInstance;
                                    }
                                    
                                    XElement mediaLocationElement = roleListElement.Element(XName.Get("MediaLocation", "http://schemas.microsoft.com/windowsazure"));
                                    if (mediaLocationElement != null)
                                    {
                                        Uri mediaLocationInstance = TypeConversion.TryParseUri(mediaLocationElement.Value);
                                        roleInstance.MediaLocation = mediaLocationInstance;
                                    }
                                    
                                    XElement availabilitySetNameElement = roleListElement.Element(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                                    if (availabilitySetNameElement != null)
                                    {
                                        string availabilitySetNameInstance = availabilitySetNameElement.Value;
                                        roleInstance.AvailabilitySetName = availabilitySetNameInstance;
                                    }
                                    
                                    XElement dataVirtualHardDisksSequenceElement = roleListElement.Element(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                                    if (dataVirtualHardDisksSequenceElement != null)
                                    {
                                        foreach (XElement dataVirtualHardDisksElement in dataVirtualHardDisksSequenceElement.Elements(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                            roleInstance.DataVirtualHardDisks.Add(dataVirtualHardDiskInstance);
                                            
                                            XElement hostCachingElement = dataVirtualHardDisksElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                            if (hostCachingElement != null)
                                            {
                                                string hostCachingInstance = hostCachingElement.Value;
                                                dataVirtualHardDiskInstance.HostCaching = hostCachingInstance;
                                            }
                                            
                                            XElement diskLabelElement = dataVirtualHardDisksElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                            if (diskLabelElement != null)
                                            {
                                                string diskLabelInstance = diskLabelElement.Value;
                                                dataVirtualHardDiskInstance.Label = diskLabelInstance;
                                            }
                                            
                                            XElement diskNameElement = dataVirtualHardDisksElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                            if (diskNameElement != null)
                                            {
                                                string diskNameInstance = diskNameElement.Value;
                                                dataVirtualHardDiskInstance.Name = diskNameInstance;
                                            }
                                            
                                            XElement lunElement = dataVirtualHardDisksElement.Element(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                            if (lunElement != null && !string.IsNullOrEmpty(lunElement.Value))
                                            {
                                                int lunInstance = int.Parse(lunElement.Value, CultureInfo.InvariantCulture);
                                                dataVirtualHardDiskInstance.LogicalUnitNumber = lunInstance;
                                            }
                                            
                                            XElement logicalDiskSizeInGBElement = dataVirtualHardDisksElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                            if (logicalDiskSizeInGBElement != null && !string.IsNullOrEmpty(logicalDiskSizeInGBElement.Value))
                                            {
                                                int logicalDiskSizeInGBInstance = int.Parse(logicalDiskSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                                dataVirtualHardDiskInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                                            }
                                            
                                            XElement mediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                            if (mediaLinkElement != null)
                                            {
                                                Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                                dataVirtualHardDiskInstance.MediaLink = mediaLinkInstance;
                                            }
                                            
                                            XElement sourceMediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("SourceMediaLink", "http://schemas.microsoft.com/windowsazure"));
                                            if (sourceMediaLinkElement != null)
                                            {
                                                Uri sourceMediaLinkInstance = TypeConversion.TryParseUri(sourceMediaLinkElement.Value);
                                                dataVirtualHardDiskInstance.SourceMediaLink = sourceMediaLinkInstance;
                                            }
                                            
                                            XElement iOTypeElement = dataVirtualHardDisksElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                            if (iOTypeElement != null)
                                            {
                                                string iOTypeInstance = iOTypeElement.Value;
                                                dataVirtualHardDiskInstance.IOType = iOTypeInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement labelElement2 = roleListElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                    if (labelElement2 != null)
                                    {
                                        string labelInstance2 = labelElement2.Value;
                                        roleInstance.Label = labelInstance2;
                                    }
                                    
                                    XElement oSVirtualHardDiskElement = roleListElement.Element(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                                    if (oSVirtualHardDiskElement != null)
                                    {
                                        OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                        roleInstance.OSVirtualHardDisk = oSVirtualHardDiskInstance;
                                        
                                        XElement hostCachingElement2 = oSVirtualHardDiskElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                        if (hostCachingElement2 != null)
                                        {
                                            string hostCachingInstance2 = hostCachingElement2.Value;
                                            oSVirtualHardDiskInstance.HostCaching = hostCachingInstance2;
                                        }
                                        
                                        XElement diskLabelElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                        if (diskLabelElement2 != null)
                                        {
                                            string diskLabelInstance2 = diskLabelElement2.Value;
                                            oSVirtualHardDiskInstance.Label = diskLabelInstance2;
                                        }
                                        
                                        XElement diskNameElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                        if (diskNameElement2 != null)
                                        {
                                            string diskNameInstance2 = diskNameElement2.Value;
                                            oSVirtualHardDiskInstance.Name = diskNameInstance2;
                                        }
                                        
                                        XElement mediaLinkElement2 = oSVirtualHardDiskElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                        if (mediaLinkElement2 != null)
                                        {
                                            Uri mediaLinkInstance2 = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                            oSVirtualHardDiskInstance.MediaLink = mediaLinkInstance2;
                                        }
                                        
                                        XElement sourceImageNameElement = oSVirtualHardDiskElement.Element(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                                        if (sourceImageNameElement != null)
                                        {
                                            string sourceImageNameInstance = sourceImageNameElement.Value;
                                            oSVirtualHardDiskInstance.SourceImageName = sourceImageNameInstance;
                                        }
                                        
                                        XElement osElement = oSVirtualHardDiskElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                        if (osElement != null)
                                        {
                                            string osInstance = osElement.Value;
                                            oSVirtualHardDiskInstance.OperatingSystem = osInstance;
                                        }
                                        
                                        XElement remoteSourceImageLinkElement = oSVirtualHardDiskElement.Element(XName.Get("RemoteSourceImageLink", "http://schemas.microsoft.com/windowsazure"));
                                        if (remoteSourceImageLinkElement != null)
                                        {
                                            Uri remoteSourceImageLinkInstance = TypeConversion.TryParseUri(remoteSourceImageLinkElement.Value);
                                            oSVirtualHardDiskInstance.RemoteSourceImageLink = remoteSourceImageLinkInstance;
                                        }
                                        
                                        XElement iOTypeElement2 = oSVirtualHardDiskElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                        if (iOTypeElement2 != null)
                                        {
                                            string iOTypeInstance2 = iOTypeElement2.Value;
                                            oSVirtualHardDiskInstance.IOType = iOTypeInstance2;
                                        }
                                        
                                        XElement resizedSizeInGBElement = oSVirtualHardDiskElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                        if (resizedSizeInGBElement != null && !string.IsNullOrEmpty(resizedSizeInGBElement.Value))
                                        {
                                            int resizedSizeInGBInstance = int.Parse(resizedSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                            oSVirtualHardDiskInstance.ResizedSizeInGB = resizedSizeInGBInstance;
                                        }
                                    }
                                    
                                    XElement roleSizeElement = roleListElement.Element(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleSizeElement != null)
                                    {
                                        string roleSizeInstance = roleSizeElement.Value;
                                        roleInstance.RoleSize = roleSizeInstance;
                                    }
                                    
                                    XElement defaultWinRmCertificateThumbprintElement = roleListElement.Element(XName.Get("DefaultWinRmCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                    if (defaultWinRmCertificateThumbprintElement != null)
                                    {
                                        string defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement.Value;
                                        roleInstance.DefaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
                                    }
                                    
                                    XElement provisionGuestAgentElement = roleListElement.Element(XName.Get("ProvisionGuestAgent", "http://schemas.microsoft.com/windowsazure"));
                                    if (provisionGuestAgentElement != null && !string.IsNullOrEmpty(provisionGuestAgentElement.Value))
                                    {
                                        bool provisionGuestAgentInstance = bool.Parse(provisionGuestAgentElement.Value);
                                        roleInstance.ProvisionGuestAgent = provisionGuestAgentInstance;
                                    }
                                    
                                    XElement vMImageInputElement = roleListElement.Element(XName.Get("VMImageInput", "http://schemas.microsoft.com/windowsazure"));
                                    if (vMImageInputElement != null)
                                    {
                                        VMImageInput vMImageInputInstance = new VMImageInput();
                                        roleInstance.VMImageInput = vMImageInputInstance;
                                        
                                        XElement oSDiskConfigurationElement = vMImageInputElement.Element(XName.Get("OSDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                        if (oSDiskConfigurationElement != null)
                                        {
                                            OSDiskConfiguration oSDiskConfigurationInstance = new OSDiskConfiguration();
                                            vMImageInputInstance.OSDiskConfiguration = oSDiskConfigurationInstance;
                                            
                                            XElement resizedSizeInGBElement2 = oSDiskConfigurationElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                            if (resizedSizeInGBElement2 != null && !string.IsNullOrEmpty(resizedSizeInGBElement2.Value))
                                            {
                                                int resizedSizeInGBInstance2 = int.Parse(resizedSizeInGBElement2.Value, CultureInfo.InvariantCulture);
                                                oSDiskConfigurationInstance.ResizedSizeInGB = resizedSizeInGBInstance2;
                                            }
                                        }
                                        
                                        XElement dataDiskConfigurationsSequenceElement = vMImageInputElement.Element(XName.Get("DataDiskConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                        if (dataDiskConfigurationsSequenceElement != null)
                                        {
                                            foreach (XElement dataDiskConfigurationsElement in dataDiskConfigurationsSequenceElement.Elements(XName.Get("DataDiskConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                DataDiskConfiguration dataDiskConfigurationInstance = new DataDiskConfiguration();
                                                vMImageInputInstance.DataDiskConfigurations.Add(dataDiskConfigurationInstance);
                                                
                                                XElement nameElement11 = dataDiskConfigurationsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement11 != null)
                                                {
                                                    string nameInstance11 = nameElement11.Value;
                                                    dataDiskConfigurationInstance.DiskName = nameInstance11;
                                                }
                                                
                                                XElement resizedSizeInGBElement3 = dataDiskConfigurationsElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                                if (resizedSizeInGBElement3 != null && !string.IsNullOrEmpty(resizedSizeInGBElement3.Value))
                                                {
                                                    int resizedSizeInGBInstance3 = int.Parse(resizedSizeInGBElement3.Value, CultureInfo.InvariantCulture);
                                                    dataDiskConfigurationInstance.ResizedSizeInGB = resizedSizeInGBInstance3;
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement debugSettingsElement = roleListElement.Element(XName.Get("DebugSettings", "http://schemas.microsoft.com/windowsazure"));
                                    if (debugSettingsElement != null)
                                    {
                                        DebugSettings debugSettingsInstance = new DebugSettings();
                                        roleInstance.DebugSettings = debugSettingsInstance;
                                        
                                        XElement bootDiagnosticsEnabledElement = debugSettingsElement.Element(XName.Get("BootDiagnosticsEnabled", "http://schemas.microsoft.com/windowsazure"));
                                        if (bootDiagnosticsEnabledElement != null)
                                        {
                                            bool bootDiagnosticsEnabledInstance = bool.Parse(bootDiagnosticsEnabledElement.Value);
                                            debugSettingsInstance.BootDiagnosticsEnabled = bootDiagnosticsEnabledInstance;
                                        }
                                        
                                        XElement consoleScreenshotBlobUriElement = debugSettingsElement.Element(XName.Get("ConsoleScreenshotBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                        if (consoleScreenshotBlobUriElement != null)
                                        {
                                            Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(consoleScreenshotBlobUriElement.Value);
                                            debugSettingsInstance.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                        }
                                        
                                        XElement serialOutputBlobUriElement = debugSettingsElement.Element(XName.Get("SerialOutputBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                        if (serialOutputBlobUriElement != null)
                                        {
                                            Uri serialOutputBlobUriInstance = TypeConversion.TryParseUri(serialOutputBlobUriElement.Value);
                                            debugSettingsInstance.SerialOutputBlobUri = serialOutputBlobUriInstance;
                                        }
                                    }
                                    
                                    XElement licenseTypeElement = roleListElement.Element(XName.Get("LicenseType", "http://schemas.microsoft.com/windowsazure"));
                                    if (licenseTypeElement != null)
                                    {
                                        string licenseTypeInstance = licenseTypeElement.Value;
                                        roleInstance.LicenseType = licenseTypeInstance;
                                    }
                                    
                                    XElement migrationStateElement = roleListElement.Element(XName.Get("MigrationState", "http://schemas.microsoft.com/windowsazure"));
                                    if (migrationStateElement != null)
                                    {
                                        string migrationStateInstance = migrationStateElement.Value;
                                        roleInstance.MigrationState = migrationStateInstance;
                                    }
                                }
                            }
                            
                            XElement sdkVersionElement = deploymentElement.Element(XName.Get("SdkVersion", "http://schemas.microsoft.com/windowsazure"));
                            if (sdkVersionElement != null)
                            {
                                string sdkVersionInstance = sdkVersionElement.Value;
                                result.SdkVersion = sdkVersionInstance;
                            }
                            
                            XElement lockedElement = deploymentElement.Element(XName.Get("Locked", "http://schemas.microsoft.com/windowsazure"));
                            if (lockedElement != null && !string.IsNullOrEmpty(lockedElement.Value))
                            {
                                bool lockedInstance = bool.Parse(lockedElement.Value);
                                result.Locked = lockedInstance;
                            }
                            
                            XElement rollbackAllowedElement = deploymentElement.Element(XName.Get("RollbackAllowed", "http://schemas.microsoft.com/windowsazure"));
                            if (rollbackAllowedElement != null && !string.IsNullOrEmpty(rollbackAllowedElement.Value))
                            {
                                bool rollbackAllowedInstance = bool.Parse(rollbackAllowedElement.Value);
                                result.RollbackAllowed = rollbackAllowedInstance;
                            }
                            
                            XElement virtualNetworkNameElement = deploymentElement.Element(XName.Get("VirtualNetworkName", "http://schemas.microsoft.com/windowsazure"));
                            if (virtualNetworkNameElement != null)
                            {
                                string virtualNetworkNameInstance = virtualNetworkNameElement.Value;
                                result.VirtualNetworkName = virtualNetworkNameInstance;
                            }
                            
                            XElement createdTimeElement = deploymentElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/windowsazure"));
                            if (createdTimeElement != null)
                            {
                                DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.CreatedTime = createdTimeInstance;
                            }
                            
                            XElement lastModifiedTimeElement = deploymentElement.Element(XName.Get("LastModifiedTime", "http://schemas.microsoft.com/windowsazure"));
                            if (lastModifiedTimeElement != null)
                            {
                                DateTime lastModifiedTimeInstance = DateTime.Parse(lastModifiedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.LastModifiedTime = lastModifiedTimeInstance;
                            }
                            
                            XElement extendedPropertiesSequenceElement = deploymentElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                            if (extendedPropertiesSequenceElement != null)
                            {
                                foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    result.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                }
                            }
                            
                            XElement dnsElement = deploymentElement.Element(XName.Get("Dns", "http://schemas.microsoft.com/windowsazure"));
                            if (dnsElement != null)
                            {
                                DnsSettings dnsInstance = new DnsSettings();
                                result.DnsSettings = dnsInstance;
                                
                                XElement dnsServersSequenceElement = dnsElement.Element(XName.Get("DnsServers", "http://schemas.microsoft.com/windowsazure"));
                                if (dnsServersSequenceElement != null)
                                {
                                    foreach (XElement dnsServersElement in dnsServersSequenceElement.Elements(XName.Get("DnsServer", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        DnsServer dnsServerInstance = new DnsServer();
                                        dnsInstance.DnsServers.Add(dnsServerInstance);
                                        
                                        XElement nameElement12 = dnsServersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement12 != null)
                                        {
                                            string nameInstance12 = nameElement12.Value;
                                            dnsServerInstance.Name = nameInstance12;
                                        }
                                        
                                        XElement addressElement3 = dnsServersElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                        if (addressElement3 != null)
                                        {
                                            string addressInstance3 = addressElement3.Value;
                                            dnsServerInstance.Address = addressInstance3;
                                        }
                                    }
                                }
                            }
                            
                            XElement persistentVMDowntimeElement = deploymentElement.Element(XName.Get("PersistentVMDowntime", "http://schemas.microsoft.com/windowsazure"));
                            if (persistentVMDowntimeElement != null)
                            {
                                PersistentVMDowntime persistentVMDowntimeInstance = new PersistentVMDowntime();
                                result.PersistentVMDowntime = persistentVMDowntimeInstance;
                                
                                XElement startTimeElement = persistentVMDowntimeElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                if (startTimeElement != null)
                                {
                                    DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    persistentVMDowntimeInstance.StartTime = startTimeInstance;
                                }
                                
                                XElement endTimeElement = persistentVMDowntimeElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                if (endTimeElement != null)
                                {
                                    DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    persistentVMDowntimeInstance.EndTime = endTimeInstance;
                                }
                                
                                XElement statusElement6 = persistentVMDowntimeElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                if (statusElement6 != null)
                                {
                                    string statusInstance6 = statusElement6.Value;
                                    persistentVMDowntimeInstance.Status = statusInstance6;
                                }
                            }
                            
                            XElement virtualIPsSequenceElement = deploymentElement.Element(XName.Get("VirtualIPs", "http://schemas.microsoft.com/windowsazure"));
                            if (virtualIPsSequenceElement != null)
                            {
                                foreach (XElement virtualIPsElement in virtualIPsSequenceElement.Elements(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    VirtualIPAddress virtualIPInstance = new VirtualIPAddress();
                                    result.VirtualIPAddresses.Add(virtualIPInstance);
                                    
                                    XElement addressElement4 = virtualIPsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                    if (addressElement4 != null)
                                    {
                                        string addressInstance4 = addressElement4.Value;
                                        virtualIPInstance.Address = addressInstance4;
                                    }
                                    
                                    XElement isDnsProgrammedElement = virtualIPsElement.Element(XName.Get("IsDnsProgrammed", "http://schemas.microsoft.com/windowsazure"));
                                    if (isDnsProgrammedElement != null && !string.IsNullOrEmpty(isDnsProgrammedElement.Value))
                                    {
                                        bool isDnsProgrammedInstance = bool.Parse(isDnsProgrammedElement.Value);
                                        virtualIPInstance.IsDnsProgrammed = isDnsProgrammedInstance;
                                    }
                                    
                                    XElement nameElement13 = virtualIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement13 != null)
                                    {
                                        string nameInstance13 = nameElement13.Value;
                                        virtualIPInstance.Name = nameInstance13;
                                    }
                                    
                                    XElement reservedIPNameElement = virtualIPsElement.Element(XName.Get("ReservedIPName", "http://schemas.microsoft.com/windowsazure"));
                                    if (reservedIPNameElement != null)
                                    {
                                        string reservedIPNameInstance = reservedIPNameElement.Value;
                                        virtualIPInstance.ReservedIPName = reservedIPNameInstance;
                                    }
                                }
                            }
                            
                            XElement extensionConfigurationElement = deploymentElement.Element(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                            if (extensionConfigurationElement != null)
                            {
                                ExtensionConfiguration extensionConfigurationInstance = new ExtensionConfiguration();
                                result.ExtensionConfiguration = extensionConfigurationInstance;
                                
                                XElement allRolesSequenceElement = extensionConfigurationElement.Element(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                                if (allRolesSequenceElement != null)
                                {
                                    foreach (XElement allRolesElement in allRolesSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ExtensionConfiguration.Extension extensionInstance = new ExtensionConfiguration.Extension();
                                        extensionConfigurationInstance.AllRoles.Add(extensionInstance);
                                        
                                        XElement idElement = allRolesElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                        if (idElement != null)
                                        {
                                            string idInstance = idElement.Value;
                                            extensionInstance.Id = idInstance;
                                        }
                                        
                                        XElement stateElement2 = allRolesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                        if (stateElement2 != null)
                                        {
                                            string stateInstance2 = stateElement2.Value;
                                            extensionInstance.State = stateInstance2;
                                        }
                                    }
                                }
                                
                                XElement namedRolesSequenceElement = extensionConfigurationElement.Element(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                                if (namedRolesSequenceElement != null)
                                {
                                    foreach (XElement namedRolesElement in namedRolesSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ExtensionConfiguration.NamedRole roleInstance2 = new ExtensionConfiguration.NamedRole();
                                        extensionConfigurationInstance.NamedRoles.Add(roleInstance2);
                                        
                                        XElement roleNameElement3 = namedRolesElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                        if (roleNameElement3 != null)
                                        {
                                            string roleNameInstance3 = roleNameElement3.Value;
                                            roleInstance2.RoleName = roleNameInstance3;
                                        }
                                        
                                        XElement extensionsSequenceElement = namedRolesElement.Element(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                                        if (extensionsSequenceElement != null)
                                        {
                                            foreach (XElement extensionsElement in extensionsSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                ExtensionConfiguration.Extension extensionInstance2 = new ExtensionConfiguration.Extension();
                                                roleInstance2.Extensions.Add(extensionInstance2);
                                                
                                                XElement idElement2 = extensionsElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                                if (idElement2 != null)
                                                {
                                                    string idInstance2 = idElement2.Value;
                                                    extensionInstance2.Id = idInstance2;
                                                }
                                                
                                                XElement stateElement3 = extensionsElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                                if (stateElement3 != null)
                                                {
                                                    string stateInstance3 = stateElement3.Value;
                                                    extensionInstance2.State = stateInstance3;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            XElement reservedIPNameElement2 = deploymentElement.Element(XName.Get("ReservedIPName", "http://schemas.microsoft.com/windowsazure"));
                            if (reservedIPNameElement2 != null)
                            {
                                string reservedIPNameInstance2 = reservedIPNameElement2.Value;
                                result.ReservedIPName = reservedIPNameInstance2;
                            }
                            
                            XElement loadBalancersSequenceElement = deploymentElement.Element(XName.Get("LoadBalancers", "http://schemas.microsoft.com/windowsazure"));
                            if (loadBalancersSequenceElement != null)
                            {
                                foreach (XElement loadBalancersElement in loadBalancersSequenceElement.Elements(XName.Get("LoadBalancer", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    LoadBalancer loadBalancerInstance = new LoadBalancer();
                                    result.LoadBalancers.Add(loadBalancerInstance);
                                    
                                    XElement nameElement14 = loadBalancersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement14 != null)
                                    {
                                        string nameInstance14 = nameElement14.Value;
                                        loadBalancerInstance.Name = nameInstance14;
                                    }
                                    
                                    XElement frontendIpConfigurationElement = loadBalancersElement.Element(XName.Get("FrontendIpConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                    if (frontendIpConfigurationElement != null)
                                    {
                                        FrontendIPConfiguration frontendIpConfigurationInstance = new FrontendIPConfiguration();
                                        loadBalancerInstance.FrontendIPConfiguration = frontendIpConfigurationInstance;
                                        
                                        XElement typeElement2 = frontendIpConfigurationElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                        if (typeElement2 != null)
                                        {
                                            string typeInstance2 = typeElement2.Value;
                                            frontendIpConfigurationInstance.Type = typeInstance2;
                                        }
                                        
                                        XElement subnetNameElement3 = frontendIpConfigurationElement.Element(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                        if (subnetNameElement3 != null)
                                        {
                                            string subnetNameInstance3 = subnetNameElement3.Value;
                                            frontendIpConfigurationInstance.SubnetName = subnetNameInstance3;
                                        }
                                        
                                        XElement staticVirtualNetworkIPAddressElement3 = frontendIpConfigurationElement.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                        if (staticVirtualNetworkIPAddressElement3 != null)
                                        {
                                            string staticVirtualNetworkIPAddressInstance3 = staticVirtualNetworkIPAddressElement3.Value;
                                            frontendIpConfigurationInstance.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance3;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Package By Name operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> GetPackageByNameAsync(string serviceName, string deploymentName, DeploymentGetPackageParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "GetPackageByNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginGettingPackageByNameAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get Package By Slot operation retrieves a cloud service package
        /// for a deployment and stores the package files in Azure Blob
        /// storage. The following package files are placed in storage: the
        /// cloud service configuration file (.cscfg), providing configuration
        /// settings for the cloud service and individual roles, including the
        /// number of role instances; and the service package (.cspkg),
        /// containing the application code and the service definition file.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Package By Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> GetPackageBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "GetPackageBySlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginGettingPackageBySlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='startTime'>
        /// Required. Datetime in UTC representing the start time of the query.
        /// </param>
        /// <param name='endTime'>
        /// Required. Datetime in UTC representing the end time of the query.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </returns>
        public async Task<DeploymentEventListResponse> ListEventsAsync(string serviceName, string deploymentName, DateTime startTime, DateTime endTime, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("startTime", startTime);
                tracingParameters.Add("endTime", endTime);
                TracingAdapter.Enter(invocationId, this, "ListEventsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/events";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("starttime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", startTime.ToUniversalTime())));
            queryParameters.Add("endtime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", endTime.ToUniversalTime())));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentEventListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeploymentEventListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement deploymentEventCollectionElement = responseDoc.Element(XName.Get("DeploymentEventCollection", "http://schemas.microsoft.com/windowsazure"));
                        if (deploymentEventCollectionElement != null)
                        {
                            XElement rebootEventsSequenceElement = deploymentEventCollectionElement.Element(XName.Get("RebootEvents", "http://schemas.microsoft.com/windowsazure"));
                            if (rebootEventsSequenceElement != null)
                            {
                                foreach (XElement rebootEventsElement in rebootEventsSequenceElement.Elements(XName.Get("RebootEvent", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    RebootEvent rebootEventInstance = new RebootEvent();
                                    result.DeploymentEvents.Add(rebootEventInstance);
                                    
                                    XElement roleNameElement = rebootEventsElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleNameElement != null)
                                    {
                                        string roleNameInstance = roleNameElement.Value;
                                        rebootEventInstance.RoleName = roleNameInstance;
                                    }
                                    
                                    XElement instanceNameElement = rebootEventsElement.Element(XName.Get("InstanceName", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceNameElement != null)
                                    {
                                        string instanceNameInstance = instanceNameElement.Value;
                                        rebootEventInstance.InstanceName = instanceNameInstance;
                                    }
                                    
                                    XElement rebootReasonElement = rebootEventsElement.Element(XName.Get("RebootReason", "http://schemas.microsoft.com/windowsazure"));
                                    if (rebootReasonElement != null)
                                    {
                                        string rebootReasonInstance = rebootReasonElement.Value;
                                        rebootEventInstance.RebootReason = rebootReasonInstance;
                                    }
                                    
                                    XElement rebootStartTimeElement = rebootEventsElement.Element(XName.Get("RebootStartTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (rebootStartTimeElement != null && !string.IsNullOrEmpty(rebootStartTimeElement.Value))
                                    {
                                        DateTime rebootStartTimeInstance = DateTime.Parse(rebootStartTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        rebootEventInstance.RebootStartTime = rebootStartTimeInstance;
                                    }
                                }
                            }
                            
                            XElement continuationTokenElement = deploymentEventCollectionElement.Element(XName.Get("ContinuationToken", "http://schemas.microsoft.com/windowsazure"));
                            if (continuationTokenElement != null)
                            {
                                string continuationTokenInstance = continuationTokenElement.Value;
                                result.ContinuationToken = continuationTokenInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='startTime'>
        /// Required. Datetime in UTC representing the start time of the query.
        /// </param>
        /// <param name='endTime'>
        /// Required. Datetime in UTC representing the end time of the query.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Identifies the list of reboot events due to planned maintenance
        /// that impacted a deployment in the optionally provided timeframe.
        /// </returns>
        public async Task<DeploymentEventListResponse> ListEventsBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DateTime startTime, DateTime endTime, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("startTime", startTime);
                tracingParameters.Add("endTime", endTime);
                TracingAdapter.Enter(invocationId, this, "ListEventsBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            url = url + "/events";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("starttime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", startTime.ToUniversalTime())));
            queryParameters.Add("endtime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", endTime.ToUniversalTime())));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentEventListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeploymentEventListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement deploymentEventCollectionElement = responseDoc.Element(XName.Get("DeploymentEventCollection", "http://schemas.microsoft.com/windowsazure"));
                        if (deploymentEventCollectionElement != null)
                        {
                            XElement rebootEventsSequenceElement = deploymentEventCollectionElement.Element(XName.Get("RebootEvents", "http://schemas.microsoft.com/windowsazure"));
                            if (rebootEventsSequenceElement != null)
                            {
                                foreach (XElement rebootEventsElement in rebootEventsSequenceElement.Elements(XName.Get("RebootEvent", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    RebootEvent rebootEventInstance = new RebootEvent();
                                    result.DeploymentEvents.Add(rebootEventInstance);
                                    
                                    XElement roleNameElement = rebootEventsElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleNameElement != null)
                                    {
                                        string roleNameInstance = roleNameElement.Value;
                                        rebootEventInstance.RoleName = roleNameInstance;
                                    }
                                    
                                    XElement instanceNameElement = rebootEventsElement.Element(XName.Get("InstanceName", "http://schemas.microsoft.com/windowsazure"));
                                    if (instanceNameElement != null)
                                    {
                                        string instanceNameInstance = instanceNameElement.Value;
                                        rebootEventInstance.InstanceName = instanceNameInstance;
                                    }
                                    
                                    XElement rebootReasonElement = rebootEventsElement.Element(XName.Get("RebootReason", "http://schemas.microsoft.com/windowsazure"));
                                    if (rebootReasonElement != null)
                                    {
                                        string rebootReasonInstance = rebootReasonElement.Value;
                                        rebootEventInstance.RebootReason = rebootReasonInstance;
                                    }
                                    
                                    XElement rebootStartTimeElement = rebootEventsElement.Element(XName.Get("RebootStartTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (rebootStartTimeElement != null && !string.IsNullOrEmpty(rebootStartTimeElement.Value))
                                    {
                                        DateTime rebootStartTimeInstance = DateTime.Parse(rebootStartTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        rebootEventInstance.RebootStartTime = rebootStartTimeInstance;
                                    }
                                }
                            }
                            
                            XElement continuationTokenElement = deploymentEventCollectionElement.Element(XName.Get("ContinuationToken", "http://schemas.microsoft.com/windowsazure"));
                            if (continuationTokenElement != null)
                            {
                                string continuationTokenInstance = continuationTokenElement.Value;
                                result.ContinuationToken = continuationTokenInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Prepare Deployment Operation validates and prepares your
        /// deployment for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='parameters'>
        /// Required. Deployment Network resource parameters for migration.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> PrepareMigrationAsync(string serviceName, string deploymentName, PrepareDeploymentMigrationParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "PrepareMigrationAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginPrepareMigrationAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Reboot Role Instance By Deployment Name operation requests a
        /// reboot of a role instance that is running in a deployment. This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> RebootRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                TracingAdapter.Enter(invocationId, this, "RebootRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginRebootingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Reboot Role Instance By Deployment Slot operation requests a
        /// reboot of a role instance that is running in a deployment. This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> RebootRoleInstanceByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                TracingAdapter.Enter(invocationId, this, "RebootRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginRebootingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> RebuildRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, string resources, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                tracingParameters.Add("resources", resources);
                TracingAdapter.Enter(invocationId, this, "RebuildRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginRebuildingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, resources, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Rebuild Role Instance asynchronous operation reinstalls the
        /// operating system on instances of web roles or worker roles and
        /// initializes the storage resources that are used by them. If you do
        /// not want to initialize storage resources, you can use Reimage Role
        /// Instance
        /// athttp://msdn.microsoft.com/en-us/library/azure/gg441292.aspx.For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see http://msdn.microsoft.com/en-us/library/azure/dn627518.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='resources'>
        /// Required. Specifies the resources that must be rebuilt. Currently,
        /// the only supported value is 'allLocalDrives'.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> RebuildRoleInstanceByDeploymentSlotAsync(string serviceName, string deploymentSlot, string roleInstanceName, string resources, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                tracingParameters.Add("resources", resources);
                TracingAdapter.Enter(invocationId, this, "RebuildRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginRebuildingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, resources, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Reimage Role Instance By Deployment Name operation requests a
        /// reimage of a role instance that is running in a deployment.This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> ReimageRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                TracingAdapter.Enter(invocationId, this, "ReimageRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginReimagingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Reimage Role Instance By Deployment Slot operation requests a
        /// reimage of a role instance that is running in a deployment. This
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status. For more information on asynchronous operations,
        /// see Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// Required. The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> ReimageRoleInstanceByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                TracingAdapter.Enter(invocationId, this, "ReimageRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginReimagingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade By Deployment Name operation cancels
        /// an in-progress configuration update and returns the deployment to
        /// its state before the update was started. This operation can only
        /// be called when an update is in progress on the deployment. The
        /// deployment status can be detected by calling the Get Deployment
        /// operation or Get Hosted Service Properties operation and
        /// inspecting the RollbackAllowed element. If the value returned is
        /// true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Rollback Update Or Upgrade By
        /// Deployment Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RollbackUpdateOrUpgradeByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentRollbackUpdateOrUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "RollbackUpdateOrUpgradeByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=rollback");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement rollbackUpdateOrUpgradeElement = new XElement(XName.Get("RollbackUpdateOrUpgrade", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(rollbackUpdateOrUpgradeElement);
                
                XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                modeElement.Value = parameters.Mode.ToString();
                rollbackUpdateOrUpgradeElement.Add(modeElement);
                
                XElement forceElement = new XElement(XName.Get("Force", "http://schemas.microsoft.com/windowsazure"));
                forceElement.Value = parameters.Force.ToString().ToLower();
                rollbackUpdateOrUpgradeElement.Add(forceElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade By Deployment Slot operation cancels
        /// an in-progress configuration update and returns the deployment to
        /// its state before the update was started. This operation can only
        /// be called when an update is in progress on the deployment. The
        /// deployment status can be detected by calling the Get Deployment
        /// operation or Get Hosted Service Properties operation and
        /// inspecting the RollbackAllowed element. If the value returned is
        /// true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Rollback Update Or Upgrade By
        /// Deployment Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RollbackUpdateOrUpgradeByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentRollbackUpdateOrUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "RollbackUpdateOrUpgradeByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deploymentslots/";
            url = url + Uri.EscapeDataString(deploymentSlot.ToString());
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=rollback");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement rollbackUpdateOrUpgradeElement = new XElement(XName.Get("RollbackUpdateOrUpgrade", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(rollbackUpdateOrUpgradeElement);
                
                XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                modeElement.Value = parameters.Mode.ToString();
                rollbackUpdateOrUpgradeElement.Add(modeElement);
                
                XElement forceElement = new XElement(XName.Get("Force", "http://schemas.microsoft.com/windowsazure"));
                forceElement.Value = parameters.Force.ToString().ToLower();
                rollbackUpdateOrUpgradeElement.Add(forceElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Swap Deployment operation initiates a virtual IP address swap
        /// between the staging and production deployment environments for a
        /// service. If the service is currently running in the staging
        /// environment, it will be swapped to the production environment. If
        /// it is running in the production environment, it will be swapped to
        /// staging. For more information on this type of upgrade, see
        /// Performing Virtual IP Swap Upgrades at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee517253.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Swap Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> SwapAsync(string serviceName, DeploymentSwapParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SwapAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginSwappingAsync(serviceName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Update Deployment Status By Deployment Name operation initiates
        /// a change in the running status of a deployment. The status of a
        /// deployment can be running or suspended. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Deployment Status By
        /// Deployment Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UpdateStatusByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateStatusByDeploymentNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginUpdatingStatusByDeploymentNameAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Update Deployment Status By Deployment Slot operation initiates
        /// a change in the running status of a deployment. The status of a
        /// deployment can be running or suspended. This operation is an
        /// asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Deployment Status By
        /// Deployment Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UpdateStatusByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateStatusByDeploymentSlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginUpdatingStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Upgrade Deployment By Name operation initiates an update of
        /// role instances in a deployment using the package and configuration
        /// that you specify. For more information about updating role
        /// instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the request has been processed, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Upgrade Deployment By Name
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UpgradeByNameAsync(string serviceName, string deploymentName, DeploymentUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpgradeByNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginUpgradingByNameAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Upgrade Deployment By Slot operation initiates an update of
        /// role instances in a deployment using the package and configuration
        /// that you specify. For more information about updating role
        /// instances, see Update an Azure Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the request has been processed, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// To perform an automatic update of a deployment, call Upgrade
        /// Deployment or Change Deployment Configuration with the Mode
        /// element set to automatic. The update proceeds from that point
        /// without a need for further input. You can call Get Operation
        /// Status to determine when the update is complete. To perform a
        /// manual update, first call Upgrade Deployment with the Mode element
        /// set to manual. Next, call Walk Upgrade Domain to update each
        /// domain within the deployment. You should make sure that the
        /// operation is complete by calling Get Operation Status before
        /// updating the next domain. Important: An update that adds or
        /// removes role instances will result in a configuration update to
        /// all roles that are deployed in the cloud service. Existing role
        /// instances need to be notified of new role instances so that all
        /// role instances can communicate together in the cloud service. By
        /// default, a cloud service is deployed with five update domains,
        /// which are updated one at a time during an in-place update. For
        /// information on modifying the number of update domains in the
        /// service definition file, see the Azure Service Definition Schema
        /// (.csdef File). To determine the update domain in which a
        /// particular instance is running in Windows Azure, use the
        /// UpdateDomain property of the RoleInstance class. See the Azure
        /// Managed Library Reference at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dd179380.aspx
        /// for more information.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Upgrade Deployment By Slot
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UpgradeBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpgradeBySlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginUpgradingBySlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Validate Deployment Operation validates your deployment for
        /// IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. Name of the deployment to be migrated.
        /// </param>
        /// <param name='parameters'>
        /// Required. Deployment Network resource parameters for migration.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Validate Deployment Migration operation response.
        /// </returns>
        public async Task<XrpMigrationValidateDeploymentResponse> ValidateMigrationAsync(string serviceName, string deploymentName, PrepareDeploymentMigrationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DestinationVirtualNetwork == null)
            {
                throw new ArgumentNullException("parameters.DestinationVirtualNetwork");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            if (parameters.SubNetName == null)
            {
                throw new ArgumentNullException("parameters.SubNetName");
            }
            if (parameters.VirtualNetworkName == null)
            {
                throw new ArgumentNullException("parameters.VirtualNetworkName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ValidateMigrationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/migration";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=validate");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement deploymentNetworkResourceElement = new XElement(XName.Get("DeploymentNetworkResource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(deploymentNetworkResourceElement);
                
                XElement resourceGroupNameElement = new XElement(XName.Get("ResourceGroupName", "http://schemas.microsoft.com/windowsazure"));
                resourceGroupNameElement.Value = parameters.ResourceGroupName;
                deploymentNetworkResourceElement.Add(resourceGroupNameElement);
                
                XElement virtualNetworkNameElement = new XElement(XName.Get("VirtualNetworkName", "http://schemas.microsoft.com/windowsazure"));
                virtualNetworkNameElement.Value = parameters.VirtualNetworkName;
                deploymentNetworkResourceElement.Add(virtualNetworkNameElement);
                
                XElement subNetNameElement = new XElement(XName.Get("SubNetName", "http://schemas.microsoft.com/windowsazure"));
                subNetNameElement.Value = parameters.SubNetName;
                deploymentNetworkResourceElement.Add(subNetNameElement);
                
                XElement destinationVirtualNetworkElement = new XElement(XName.Get("DestinationVirtualNetwork", "http://schemas.microsoft.com/windowsazure"));
                destinationVirtualNetworkElement.Value = parameters.DestinationVirtualNetwork;
                deploymentNetworkResourceElement.Add(destinationVirtualNetworkElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    XrpMigrationValidateDeploymentResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new XrpMigrationValidateDeploymentResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement validationMessagesSequenceElement = responseDoc.Element(XName.Get("ValidationMessages", "http://schemas.microsoft.com/windowsazure"));
                        if (validationMessagesSequenceElement != null)
                        {
                            foreach (XElement validationMessagesElement in validationMessagesSequenceElement.Elements(XName.Get("ValidationMessage", "http://schemas.microsoft.com/windowsazure")))
                            {
                                XrpMigrationValidateDeploymentMessage validationMessageInstance = new XrpMigrationValidateDeploymentMessage();
                                result.ValidateDeploymentMessages.Add(validationMessageInstance);
                                
                                XElement resourceTypeElement = validationMessagesElement.Element(XName.Get("ResourceType", "http://schemas.microsoft.com/windowsazure"));
                                if (resourceTypeElement != null)
                                {
                                    string resourceTypeInstance = resourceTypeElement.Value;
                                    validationMessageInstance.ResourceType = resourceTypeInstance;
                                }
                                
                                XElement resourceNameElement = validationMessagesElement.Element(XName.Get("ResourceName", "http://schemas.microsoft.com/windowsazure"));
                                if (resourceNameElement != null)
                                {
                                    string resourceNameInstance = resourceNameElement.Value;
                                    validationMessageInstance.ResourceName = resourceNameInstance;
                                }
                                
                                XElement categoryElement = validationMessagesElement.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                                if (categoryElement != null)
                                {
                                    string categoryInstance = categoryElement.Value;
                                    validationMessageInstance.Category = categoryInstance;
                                }
                                
                                XElement messageElement = validationMessagesElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                if (messageElement != null)
                                {
                                    string messageInstance = messageElement.Value;
                                    validationMessageInstance.Message = messageInstance;
                                }
                                
                                XElement virtualMachineElement = validationMessagesElement.Element(XName.Get("VirtualMachine", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualMachineElement != null)
                                {
                                    string virtualMachineInstance = virtualMachineElement.Value;
                                    validationMessageInstance.VirtualMachineName = virtualMachineInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Walk Upgrade Domain By Deployment Name operation specifies an
        /// update domain in which a role instance must be updated. For more
        /// information about updating role instances, see Update an Azure
        /// Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Walk Upgrade Domain By
        /// Deployment Name operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> WalkUpgradeDomainByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "WalkUpgradeDomainByDeploymentNameAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginWalkingUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Walk Upgrade Domain By Deployment Slot operation specifies an
        /// update domain in which a role instance must be updated. For more
        /// information about updating role instances, see Update an Azure
        /// Service at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh472157.aspx.
        /// This operation is an asynchronous operation. To determine whether
        /// the Management service has finished processing the request, call
        /// Get Operation Status. For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests
        /// at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460791.aspx.
        /// Prior to calling the Walk Upgrade Domain operation you must have
        /// called Upgrade Deployment, Change Deployment Configuration, or
        /// Rollback Update Or Upgrade. By default, a service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see the Azure Service
        /// Definition Schema (.csdef File). To perform a manual update of
        /// your deployment, proceed in this order: Call Upgrade Deployment
        /// with the Mode element set to manual. Call Walk Upgrade Domain to
        /// update each domain within the deployment. Update domains must be
        /// updated in order. For example, begin with domain 0, proceed to
        /// domain 1, and so on. Important: An update that adds or removes
        /// role instances will result in a configuration update to all roles
        /// that are deployed in the cloud service. Existing role instances
        /// need to be notified of new role instances so that all role
        /// instances can communicate together in the cloud service. While an
        /// update is in progress, call Get Deployment to determine its
        /// status. If the update is in progress, Get Deployment returns an
        /// UpgradeStatus element that contains information about the update.
        /// If the update is complete, or if no update is in progress, then
        /// the UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// Required. The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Walk Upgrade Domain By
        /// Deployment Slot operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> WalkUpgradeDomainByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "WalkUpgradeDomainByDeploymentSlotAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.Deployments.BeginWalkingUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
