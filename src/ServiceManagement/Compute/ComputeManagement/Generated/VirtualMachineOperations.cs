// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// machines in your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157206.aspx for
    /// more information)
    /// </summary>
    internal partial class VirtualMachineOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Begin Capturing Role operation creates a copy of the operating
        /// system virtual hard disk (VHD) that is deployed in the virtual
        /// machine, saves the VHD copy in the same storage location as the
        /// operating system VHD, and registers the copy as an image in your
        /// image gallery. From the captured image, you can create additional
        /// customized virtual machines. For more information about images and
        /// disks, see Manage Disks and Images at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj672979.aspx.
        /// For more information about capturing images, see How to Capture an
        /// Image of a Virtual Machine Running Windows Server 2008 R2 at
        /// http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-capture-image-windows-server/
        /// or How to Capture an Image of a Virtual Machine Running Linux at
        /// http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-linux-capture-image/.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to restart.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Capturing Virtual
        /// Machine operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginCapturingOSImageAsync(string serviceName, string deploymentName, string virtualMachineName, VirtualMachineCaptureOSImageParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ProvisioningConfiguration != null)
            {
                if (parameters.ProvisioningConfiguration.AdditionalUnattendContent != null)
                {
                    if (parameters.ProvisioningConfiguration.AdditionalUnattendContent.UnattendPasses != null)
                    {
                        foreach (UnattendPassSettings unattendPassesParameterItem in parameters.ProvisioningConfiguration.AdditionalUnattendContent.UnattendPasses)
                        {
                            if (unattendPassesParameterItem.PassName == null)
                            {
                                throw new ArgumentNullException("parameters.ProvisioningConfiguration.AdditionalUnattendContent.UnattendPasses.PassName");
                            }
                            if (unattendPassesParameterItem.UnattendComponents != null)
                            {
                                foreach (UnattendComponent unattendComponentsParameterItem in unattendPassesParameterItem.UnattendComponents)
                                {
                                    if (unattendComponentsParameterItem.ComponentName == null)
                                    {
                                        throw new ArgumentNullException("parameters.ProvisioningConfiguration.AdditionalUnattendContent.UnattendPasses.UnattendComponents.ComponentName");
                                    }
                                    if (unattendComponentsParameterItem.UnattendComponentSettings != null)
                                    {
                                        foreach (ComponentSetting unattendComponentSettingsParameterItem in unattendComponentsParameterItem.UnattendComponentSettings)
                                        {
                                            if (unattendComponentSettingsParameterItem.SettingName == null)
                                            {
                                                throw new ArgumentNullException("parameters.ProvisioningConfiguration.AdditionalUnattendContent.UnattendPasses.UnattendComponents.UnattendComponentSettings.SettingName");
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (parameters.ProvisioningConfiguration.DomainJoin != null)
                {
                    if (parameters.ProvisioningConfiguration.DomainJoin.Credentials != null)
                    {
                        if (parameters.ProvisioningConfiguration.DomainJoin.Credentials.Password == null)
                        {
                            throw new ArgumentNullException("parameters.ProvisioningConfiguration.DomainJoin.Credentials.Password");
                        }
                        if (parameters.ProvisioningConfiguration.DomainJoin.Credentials.UserName == null)
                        {
                            throw new ArgumentNullException("parameters.ProvisioningConfiguration.DomainJoin.Credentials.UserName");
                        }
                    }
                }
                if (parameters.ProvisioningConfiguration.HostName != null && parameters.ProvisioningConfiguration.HostName.Length < 1)
                {
                    throw new ArgumentOutOfRangeException("parameters.ProvisioningConfiguration.HostName");
                }
                if (parameters.ProvisioningConfiguration.HostName != null && parameters.ProvisioningConfiguration.HostName.Length > 64)
                {
                    throw new ArgumentOutOfRangeException("parameters.ProvisioningConfiguration.HostName");
                }
                if (parameters.ProvisioningConfiguration.SshSettings != null)
                {
                    if (parameters.ProvisioningConfiguration.SshSettings.KeyPairs != null)
                    {
                        foreach (SshSettingKeyPair keyPairsParameterItem in parameters.ProvisioningConfiguration.SshSettings.KeyPairs)
                        {
                            if (keyPairsParameterItem.Fingerprint == null)
                            {
                                throw new ArgumentNullException("parameters.ProvisioningConfiguration.SshSettings.KeyPairs.Fingerprint");
                            }
                            if (keyPairsParameterItem.Path == null)
                            {
                                throw new ArgumentNullException("parameters.ProvisioningConfiguration.SshSettings.KeyPairs.Path");
                            }
                        }
                    }
                    if (parameters.ProvisioningConfiguration.SshSettings.PublicKeys != null)
                    {
                        foreach (SshSettingPublicKey publicKeysParameterItem in parameters.ProvisioningConfiguration.SshSettings.PublicKeys)
                        {
                            if (publicKeysParameterItem.Fingerprint == null)
                            {
                                throw new ArgumentNullException("parameters.ProvisioningConfiguration.SshSettings.PublicKeys.Fingerprint");
                            }
                            if (publicKeysParameterItem.Path == null)
                            {
                                throw new ArgumentNullException("parameters.ProvisioningConfiguration.SshSettings.PublicKeys.Path");
                            }
                        }
                    }
                }
                if (parameters.ProvisioningConfiguration.StoredCertificateSettings != null)
                {
                    foreach (StoredCertificateSettings storedCertificateSettingsParameterItem in parameters.ProvisioningConfiguration.StoredCertificateSettings)
                    {
                        if (storedCertificateSettingsParameterItem.StoreName == null)
                        {
                            throw new ArgumentNullException("parameters.ProvisioningConfiguration.StoredCertificateSettings.StoreName");
                        }
                        if (storedCertificateSettingsParameterItem.Thumbprint == null)
                        {
                            throw new ArgumentNullException("parameters.ProvisioningConfiguration.StoredCertificateSettings.Thumbprint");
                        }
                    }
                }
                if (parameters.ProvisioningConfiguration.UserName != null && parameters.ProvisioningConfiguration.UserName.Length < 1)
                {
                    throw new ArgumentOutOfRangeException("parameters.ProvisioningConfiguration.UserName");
                }
                if (parameters.ProvisioningConfiguration.UserName != null && parameters.ProvisioningConfiguration.UserName.Length > 32)
                {
                    throw new ArgumentOutOfRangeException("parameters.ProvisioningConfiguration.UserName");
                }
                if (parameters.ProvisioningConfiguration.UserPassword != null && parameters.ProvisioningConfiguration.UserPassword.Length < 6)
                {
                    throw new ArgumentOutOfRangeException("parameters.ProvisioningConfiguration.UserPassword");
                }
                if (parameters.ProvisioningConfiguration.UserPassword != null && parameters.ProvisioningConfiguration.UserPassword.Length > 72)
                {
                    throw new ArgumentOutOfRangeException("parameters.ProvisioningConfiguration.UserPassword");
                }
            }
            if (parameters.TargetImageLabel == null)
            {
                throw new ArgumentNullException("parameters.TargetImageLabel");
            }
            if (parameters.TargetImageName == null)
            {
                throw new ArgumentNullException("parameters.TargetImageName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCapturingOSImageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            url = url + "/Operations";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement captureRoleOperationElement = new XElement(XName.Get("CaptureRoleOperation", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(captureRoleOperationElement);
                
                XElement operationTypeElement = new XElement(XName.Get("OperationType", "http://schemas.microsoft.com/windowsazure"));
                operationTypeElement.Value = "CaptureRoleOperation";
                captureRoleOperationElement.Add(operationTypeElement);
                
                XElement postCaptureActionElement = new XElement(XName.Get("PostCaptureAction", "http://schemas.microsoft.com/windowsazure"));
                postCaptureActionElement.Value = parameters.PostCaptureAction.ToString();
                captureRoleOperationElement.Add(postCaptureActionElement);
                
                if (parameters.ProvisioningConfiguration != null)
                {
                    XElement provisioningConfigurationElement = new XElement(XName.Get("ProvisioningConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    captureRoleOperationElement.Add(provisioningConfigurationElement);
                    
                    if (parameters.ProvisioningConfiguration.ConfigurationSetType != null)
                    {
                        XElement configurationSetTypeElement = new XElement(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                        configurationSetTypeElement.Value = parameters.ProvisioningConfiguration.ConfigurationSetType;
                        provisioningConfigurationElement.Add(configurationSetTypeElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.InputEndpoints != null)
                    {
                        if (parameters.ProvisioningConfiguration.InputEndpoints is ILazyCollection == false || ((ILazyCollection)parameters.ProvisioningConfiguration.InputEndpoints).IsInitialized)
                        {
                            XElement inputEndpointsSequenceElement = new XElement(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                            foreach (InputEndpoint inputEndpointsItem in parameters.ProvisioningConfiguration.InputEndpoints)
                            {
                                XElement inputEndpointElement = new XElement(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                inputEndpointsSequenceElement.Add(inputEndpointElement);
                                
                                if (inputEndpointsItem.LoadBalancedEndpointSetName != null)
                                {
                                    XElement loadBalancedEndpointSetNameElement = new XElement(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                    loadBalancedEndpointSetNameElement.Value = inputEndpointsItem.LoadBalancedEndpointSetName;
                                    inputEndpointElement.Add(loadBalancedEndpointSetNameElement);
                                }
                                
                                if (inputEndpointsItem.LocalPort != null)
                                {
                                    XElement localPortElement = new XElement(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                    localPortElement.Value = inputEndpointsItem.LocalPort.ToString();
                                    inputEndpointElement.Add(localPortElement);
                                }
                                
                                if (inputEndpointsItem.Name != null)
                                {
                                    XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    nameElement.Value = inputEndpointsItem.Name;
                                    inputEndpointElement.Add(nameElement);
                                }
                                
                                if (inputEndpointsItem.Port != null)
                                {
                                    XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                    portElement.Value = inputEndpointsItem.Port.ToString();
                                    inputEndpointElement.Add(portElement);
                                }
                                
                                if (inputEndpointsItem.LoadBalancerProbe != null)
                                {
                                    XElement loadBalancerProbeElement = new XElement(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                    inputEndpointElement.Add(loadBalancerProbeElement);
                                    
                                    if (inputEndpointsItem.LoadBalancerProbe.Path != null)
                                    {
                                        XElement pathElement = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                        pathElement.Value = inputEndpointsItem.LoadBalancerProbe.Path;
                                        loadBalancerProbeElement.Add(pathElement);
                                    }
                                    
                                    XElement portElement2 = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                    portElement2.Value = inputEndpointsItem.LoadBalancerProbe.Port.ToString();
                                    loadBalancerProbeElement.Add(portElement2);
                                    
                                    XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                    protocolElement.Value = ComputeManagementClient.LoadBalancerProbeTransportProtocolToString(inputEndpointsItem.LoadBalancerProbe.Protocol);
                                    loadBalancerProbeElement.Add(protocolElement);
                                    
                                    if (inputEndpointsItem.LoadBalancerProbe.IntervalInSeconds != null)
                                    {
                                        XElement intervalInSecondsElement = new XElement(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                        intervalInSecondsElement.Value = inputEndpointsItem.LoadBalancerProbe.IntervalInSeconds.ToString();
                                        loadBalancerProbeElement.Add(intervalInSecondsElement);
                                    }
                                    
                                    if (inputEndpointsItem.LoadBalancerProbe.TimeoutInSeconds != null)
                                    {
                                        XElement timeoutInSecondsElement = new XElement(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                        timeoutInSecondsElement.Value = inputEndpointsItem.LoadBalancerProbe.TimeoutInSeconds.ToString();
                                        loadBalancerProbeElement.Add(timeoutInSecondsElement);
                                    }
                                }
                                
                                if (inputEndpointsItem.Protocol != null)
                                {
                                    XElement protocolElement2 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                    protocolElement2.Value = inputEndpointsItem.Protocol;
                                    inputEndpointElement.Add(protocolElement2);
                                }
                                
                                if (inputEndpointsItem.VirtualIPAddress != null)
                                {
                                    XElement vipElement = new XElement(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                    vipElement.Value = inputEndpointsItem.VirtualIPAddress;
                                    inputEndpointElement.Add(vipElement);
                                }
                                
                                if (inputEndpointsItem.EnableDirectServerReturn != null)
                                {
                                    XElement enableDirectServerReturnElement = new XElement(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                    enableDirectServerReturnElement.Value = inputEndpointsItem.EnableDirectServerReturn.ToString().ToLower();
                                    inputEndpointElement.Add(enableDirectServerReturnElement);
                                }
                                
                                if (inputEndpointsItem.LoadBalancerName != null)
                                {
                                    XElement loadBalancerNameElement = new XElement(XName.Get("LoadBalancerName", "http://schemas.microsoft.com/windowsazure"));
                                    loadBalancerNameElement.Value = inputEndpointsItem.LoadBalancerName;
                                    inputEndpointElement.Add(loadBalancerNameElement);
                                }
                                
                                if (inputEndpointsItem.EndpointAcl != null)
                                {
                                    XElement endpointAclElement = new XElement(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                    inputEndpointElement.Add(endpointAclElement);
                                    
                                    if (inputEndpointsItem.EndpointAcl.Rules != null)
                                    {
                                        if (inputEndpointsItem.EndpointAcl.Rules is ILazyCollection == false || ((ILazyCollection)inputEndpointsItem.EndpointAcl.Rules).IsInitialized)
                                        {
                                            XElement rulesSequenceElement = new XElement(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                            foreach (AccessControlListRule rulesItem in inputEndpointsItem.EndpointAcl.Rules)
                                            {
                                                XElement ruleElement = new XElement(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure"));
                                                rulesSequenceElement.Add(ruleElement);
                                                
                                                if (rulesItem.Order != null)
                                                {
                                                    XElement orderElement = new XElement(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                    orderElement.Value = rulesItem.Order.ToString();
                                                    ruleElement.Add(orderElement);
                                                }
                                                
                                                if (rulesItem.Action != null)
                                                {
                                                    XElement actionElement = new XElement(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                    actionElement.Value = rulesItem.Action;
                                                    ruleElement.Add(actionElement);
                                                }
                                                
                                                if (rulesItem.RemoteSubnet != null)
                                                {
                                                    XElement remoteSubnetElement = new XElement(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                    remoteSubnetElement.Value = rulesItem.RemoteSubnet;
                                                    ruleElement.Add(remoteSubnetElement);
                                                }
                                                
                                                if (rulesItem.Description != null)
                                                {
                                                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                    descriptionElement.Value = rulesItem.Description;
                                                    ruleElement.Add(descriptionElement);
                                                }
                                            }
                                            endpointAclElement.Add(rulesSequenceElement);
                                        }
                                    }
                                }
                                
                                if (inputEndpointsItem.IdleTimeoutInMinutes != null)
                                {
                                    XElement idleTimeoutInMinutesElement = new XElement(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                    idleTimeoutInMinutesElement.Value = inputEndpointsItem.IdleTimeoutInMinutes.ToString();
                                    inputEndpointElement.Add(idleTimeoutInMinutesElement);
                                }
                                
                                if (inputEndpointsItem.LoadBalancerDistribution != null)
                                {
                                    XElement loadBalancerDistributionElement = new XElement(XName.Get("LoadBalancerDistribution", "http://schemas.microsoft.com/windowsazure"));
                                    loadBalancerDistributionElement.Value = inputEndpointsItem.LoadBalancerDistribution;
                                    inputEndpointElement.Add(loadBalancerDistributionElement);
                                }
                                
                                if (inputEndpointsItem.VirtualIPName != null)
                                {
                                    XElement virtualIPNameElement = new XElement(XName.Get("VirtualIPName", "http://schemas.microsoft.com/windowsazure"));
                                    virtualIPNameElement.Value = inputEndpointsItem.VirtualIPName;
                                    inputEndpointElement.Add(virtualIPNameElement);
                                }
                            }
                            provisioningConfigurationElement.Add(inputEndpointsSequenceElement);
                        }
                    }
                    
                    if (parameters.ProvisioningConfiguration.SubnetNames != null)
                    {
                        if (parameters.ProvisioningConfiguration.SubnetNames is ILazyCollection == false || ((ILazyCollection)parameters.ProvisioningConfiguration.SubnetNames).IsInitialized)
                        {
                            XElement subnetNamesSequenceElement = new XElement(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                            foreach (string subnetNamesItem in parameters.ProvisioningConfiguration.SubnetNames)
                            {
                                XElement subnetNamesItemElement = new XElement(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                subnetNamesItemElement.Value = subnetNamesItem;
                                subnetNamesSequenceElement.Add(subnetNamesItemElement);
                            }
                            provisioningConfigurationElement.Add(subnetNamesSequenceElement);
                        }
                    }
                    
                    if (parameters.ProvisioningConfiguration.StaticVirtualNetworkIPAddress != null)
                    {
                        XElement staticVirtualNetworkIPAddressElement = new XElement(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                        staticVirtualNetworkIPAddressElement.Value = parameters.ProvisioningConfiguration.StaticVirtualNetworkIPAddress;
                        provisioningConfigurationElement.Add(staticVirtualNetworkIPAddressElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.PublicIPs != null)
                    {
                        if (parameters.ProvisioningConfiguration.PublicIPs is ILazyCollection == false || ((ILazyCollection)parameters.ProvisioningConfiguration.PublicIPs).IsInitialized)
                        {
                            XElement publicIPsSequenceElement = new XElement(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ConfigurationSet.PublicIP publicIPsItem in parameters.ProvisioningConfiguration.PublicIPs)
                            {
                                XElement publicIPElement = new XElement(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure"));
                                publicIPsSequenceElement.Add(publicIPElement);
                                
                                if (publicIPsItem.Name != null)
                                {
                                    XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    nameElement2.Value = publicIPsItem.Name;
                                    publicIPElement.Add(nameElement2);
                                }
                                
                                if (publicIPsItem.IdleTimeoutInMinutes != null)
                                {
                                    XElement idleTimeoutInMinutesElement2 = new XElement(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                    idleTimeoutInMinutesElement2.Value = publicIPsItem.IdleTimeoutInMinutes.ToString();
                                    publicIPElement.Add(idleTimeoutInMinutesElement2);
                                }
                                
                                if (publicIPsItem.DomainNameLabel != null)
                                {
                                    XElement domainNameLabelElement = new XElement(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                    domainNameLabelElement.Value = publicIPsItem.DomainNameLabel;
                                    publicIPElement.Add(domainNameLabelElement);
                                }
                            }
                            provisioningConfigurationElement.Add(publicIPsSequenceElement);
                        }
                    }
                    
                    if (parameters.ProvisioningConfiguration.NetworkInterfaces != null)
                    {
                        if (parameters.ProvisioningConfiguration.NetworkInterfaces is ILazyCollection == false || ((ILazyCollection)parameters.ProvisioningConfiguration.NetworkInterfaces).IsInitialized)
                        {
                            XElement networkInterfacesSequenceElement = new XElement(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                            foreach (NetworkInterface networkInterfacesItem in parameters.ProvisioningConfiguration.NetworkInterfaces)
                            {
                                XElement networkInterfaceElement = new XElement(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure"));
                                networkInterfacesSequenceElement.Add(networkInterfaceElement);
                                
                                if (networkInterfacesItem.Name != null)
                                {
                                    XElement nameElement3 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    nameElement3.Value = networkInterfacesItem.Name;
                                    networkInterfaceElement.Add(nameElement3);
                                }
                                
                                if (networkInterfacesItem.IPConfigurations != null)
                                {
                                    if (networkInterfacesItem.IPConfigurations is ILazyCollection == false || ((ILazyCollection)networkInterfacesItem.IPConfigurations).IsInitialized)
                                    {
                                        XElement iPConfigurationsSequenceElement = new XElement(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                        foreach (IPConfiguration iPConfigurationsItem in networkInterfacesItem.IPConfigurations)
                                        {
                                            XElement iPConfigurationElement = new XElement(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                            iPConfigurationsSequenceElement.Add(iPConfigurationElement);
                                            
                                            if (iPConfigurationsItem.SubnetName != null)
                                            {
                                                XElement subnetNameElement = new XElement(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                subnetNameElement.Value = iPConfigurationsItem.SubnetName;
                                                iPConfigurationElement.Add(subnetNameElement);
                                            }
                                            
                                            if (iPConfigurationsItem.StaticVirtualNetworkIPAddress != null)
                                            {
                                                XElement staticVirtualNetworkIPAddressElement2 = new XElement(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                staticVirtualNetworkIPAddressElement2.Value = iPConfigurationsItem.StaticVirtualNetworkIPAddress;
                                                iPConfigurationElement.Add(staticVirtualNetworkIPAddressElement2);
                                            }
                                        }
                                        networkInterfaceElement.Add(iPConfigurationsSequenceElement);
                                    }
                                }
                                
                                if (networkInterfacesItem.NetworkSecurityGroup != null)
                                {
                                    XElement networkSecurityGroupElement = new XElement(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                    networkSecurityGroupElement.Value = networkInterfacesItem.NetworkSecurityGroup;
                                    networkInterfaceElement.Add(networkSecurityGroupElement);
                                }
                                
                                if (networkInterfacesItem.IPForwarding != null)
                                {
                                    XElement iPForwardingElement = new XElement(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                    iPForwardingElement.Value = networkInterfacesItem.IPForwarding;
                                    networkInterfaceElement.Add(iPForwardingElement);
                                }
                            }
                            provisioningConfigurationElement.Add(networkInterfacesSequenceElement);
                        }
                    }
                    
                    if (parameters.ProvisioningConfiguration.NetworkSecurityGroup != null)
                    {
                        XElement networkSecurityGroupElement2 = new XElement(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                        networkSecurityGroupElement2.Value = parameters.ProvisioningConfiguration.NetworkSecurityGroup;
                        provisioningConfigurationElement.Add(networkSecurityGroupElement2);
                    }
                    
                    if (parameters.ProvisioningConfiguration.IPForwarding != null)
                    {
                        XElement iPForwardingElement2 = new XElement(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                        iPForwardingElement2.Value = parameters.ProvisioningConfiguration.IPForwarding;
                        provisioningConfigurationElement.Add(iPForwardingElement2);
                    }
                    
                    if (parameters.ProvisioningConfiguration.ComputerName != null)
                    {
                        XElement computerNameElement = new XElement(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                        computerNameElement.Value = parameters.ProvisioningConfiguration.ComputerName;
                        provisioningConfigurationElement.Add(computerNameElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.AdminPassword != null)
                    {
                        XElement adminPasswordElement = new XElement(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                        adminPasswordElement.Value = parameters.ProvisioningConfiguration.AdminPassword;
                        provisioningConfigurationElement.Add(adminPasswordElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.ResetPasswordOnFirstLogon != null)
                    {
                        XElement resetPasswordOnFirstLogonElement = new XElement(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                        resetPasswordOnFirstLogonElement.Value = parameters.ProvisioningConfiguration.ResetPasswordOnFirstLogon.ToString().ToLower();
                        provisioningConfigurationElement.Add(resetPasswordOnFirstLogonElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.EnableAutomaticUpdates != null)
                    {
                        XElement enableAutomaticUpdatesElement = new XElement(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                        enableAutomaticUpdatesElement.Value = parameters.ProvisioningConfiguration.EnableAutomaticUpdates.ToString().ToLower();
                        provisioningConfigurationElement.Add(enableAutomaticUpdatesElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.TimeZone != null)
                    {
                        XElement timeZoneElement = new XElement(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                        timeZoneElement.Value = parameters.ProvisioningConfiguration.TimeZone;
                        provisioningConfigurationElement.Add(timeZoneElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.DomainJoin != null)
                    {
                        XElement domainJoinElement = new XElement(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                        provisioningConfigurationElement.Add(domainJoinElement);
                        
                        if (parameters.ProvisioningConfiguration.DomainJoin.Credentials != null)
                        {
                            XElement credentialsElement = new XElement(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                            domainJoinElement.Add(credentialsElement);
                            
                            if (parameters.ProvisioningConfiguration.DomainJoin.Credentials.Domain != null)
                            {
                                XElement domainElement = new XElement(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                domainElement.Value = parameters.ProvisioningConfiguration.DomainJoin.Credentials.Domain;
                                credentialsElement.Add(domainElement);
                            }
                            
                            XElement usernameElement = new XElement(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                            usernameElement.Value = parameters.ProvisioningConfiguration.DomainJoin.Credentials.UserName;
                            credentialsElement.Add(usernameElement);
                            
                            XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                            passwordElement.Value = parameters.ProvisioningConfiguration.DomainJoin.Credentials.Password;
                            credentialsElement.Add(passwordElement);
                        }
                        
                        if (parameters.ProvisioningConfiguration.DomainJoin.DomainToJoin != null)
                        {
                            XElement joinDomainElement = new XElement(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                            joinDomainElement.Value = parameters.ProvisioningConfiguration.DomainJoin.DomainToJoin;
                            domainJoinElement.Add(joinDomainElement);
                        }
                        
                        if (parameters.ProvisioningConfiguration.DomainJoin.LdapMachineObjectOU != null)
                        {
                            XElement machineObjectOUElement = new XElement(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                            machineObjectOUElement.Value = parameters.ProvisioningConfiguration.DomainJoin.LdapMachineObjectOU;
                            domainJoinElement.Add(machineObjectOUElement);
                        }
                        
                        if (parameters.ProvisioningConfiguration.DomainJoin.Provisioning != null)
                        {
                            XElement provisioningElement = new XElement(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                            domainJoinElement.Add(provisioningElement);
                            
                            if (parameters.ProvisioningConfiguration.DomainJoin.Provisioning.AccountData != null)
                            {
                                XElement accountDataElement = new XElement(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                accountDataElement.Value = parameters.ProvisioningConfiguration.DomainJoin.Provisioning.AccountData;
                                provisioningElement.Add(accountDataElement);
                            }
                        }
                    }
                    
                    if (parameters.ProvisioningConfiguration.StoredCertificateSettings != null)
                    {
                        if (parameters.ProvisioningConfiguration.StoredCertificateSettings is ILazyCollection == false || ((ILazyCollection)parameters.ProvisioningConfiguration.StoredCertificateSettings).IsInitialized)
                        {
                            XElement storedCertificateSettingsSequenceElement = new XElement(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                            foreach (StoredCertificateSettings storedCertificateSettingsItem in parameters.ProvisioningConfiguration.StoredCertificateSettings)
                            {
                                XElement certificateSettingElement = new XElement(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure"));
                                storedCertificateSettingsSequenceElement.Add(certificateSettingElement);
                                
                                XElement storeLocationElement = new XElement(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                storeLocationElement.Value = "LocalMachine";
                                certificateSettingElement.Add(storeLocationElement);
                                
                                XElement storeNameElement = new XElement(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                storeNameElement.Value = storedCertificateSettingsItem.StoreName;
                                certificateSettingElement.Add(storeNameElement);
                                
                                XElement thumbprintElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                thumbprintElement.Value = storedCertificateSettingsItem.Thumbprint;
                                certificateSettingElement.Add(thumbprintElement);
                            }
                            provisioningConfigurationElement.Add(storedCertificateSettingsSequenceElement);
                        }
                    }
                    
                    if (parameters.ProvisioningConfiguration.WindowsRemoteManagement != null)
                    {
                        XElement winRMElement = new XElement(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                        provisioningConfigurationElement.Add(winRMElement);
                        
                        if (parameters.ProvisioningConfiguration.WindowsRemoteManagement.Listeners != null)
                        {
                            if (parameters.ProvisioningConfiguration.WindowsRemoteManagement.Listeners is ILazyCollection == false || ((ILazyCollection)parameters.ProvisioningConfiguration.WindowsRemoteManagement.Listeners).IsInitialized)
                            {
                                XElement listenersSequenceElement = new XElement(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                foreach (WindowsRemoteManagementListener listenersItem in parameters.ProvisioningConfiguration.WindowsRemoteManagement.Listeners)
                                {
                                    XElement listenerElement = new XElement(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure"));
                                    listenersSequenceElement.Add(listenerElement);
                                    
                                    if (listenersItem.CertificateThumbprint != null)
                                    {
                                        XElement certificateThumbprintElement = new XElement(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                        certificateThumbprintElement.Value = listenersItem.CertificateThumbprint;
                                        listenerElement.Add(certificateThumbprintElement);
                                    }
                                    
                                    XElement protocolElement3 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                    protocolElement3.Value = listenersItem.ListenerType.ToString();
                                    listenerElement.Add(protocolElement3);
                                }
                                winRMElement.Add(listenersSequenceElement);
                            }
                        }
                    }
                    
                    if (parameters.ProvisioningConfiguration.AdminUserName != null)
                    {
                        XElement adminUsernameElement = new XElement(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                        adminUsernameElement.Value = parameters.ProvisioningConfiguration.AdminUserName;
                        provisioningConfigurationElement.Add(adminUsernameElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.AdditionalUnattendContent != null)
                    {
                        XElement additionalUnattendContentElement = new XElement(XName.Get("AdditionalUnattendContent", "http://schemas.microsoft.com/windowsazure"));
                        provisioningConfigurationElement.Add(additionalUnattendContentElement);
                        
                        if (parameters.ProvisioningConfiguration.AdditionalUnattendContent.UnattendPasses != null)
                        {
                            if (parameters.ProvisioningConfiguration.AdditionalUnattendContent.UnattendPasses is ILazyCollection == false || ((ILazyCollection)parameters.ProvisioningConfiguration.AdditionalUnattendContent.UnattendPasses).IsInitialized)
                            {
                                XElement passesSequenceElement = new XElement(XName.Get("Passes", "http://schemas.microsoft.com/windowsazure"));
                                foreach (UnattendPassSettings passesItem in parameters.ProvisioningConfiguration.AdditionalUnattendContent.UnattendPasses)
                                {
                                    XElement unattendPassElement = new XElement(XName.Get("UnattendPass", "http://schemas.microsoft.com/windowsazure"));
                                    passesSequenceElement.Add(unattendPassElement);
                                    
                                    XElement passNameElement = new XElement(XName.Get("PassName", "http://schemas.microsoft.com/windowsazure"));
                                    passNameElement.Value = passesItem.PassName;
                                    unattendPassElement.Add(passNameElement);
                                    
                                    if (passesItem.UnattendComponents != null)
                                    {
                                        if (passesItem.UnattendComponents is ILazyCollection == false || ((ILazyCollection)passesItem.UnattendComponents).IsInitialized)
                                        {
                                            XElement componentsSequenceElement = new XElement(XName.Get("Components", "http://schemas.microsoft.com/windowsazure"));
                                            foreach (UnattendComponent componentsItem in passesItem.UnattendComponents)
                                            {
                                                XElement unattendComponentElement = new XElement(XName.Get("UnattendComponent", "http://schemas.microsoft.com/windowsazure"));
                                                componentsSequenceElement.Add(unattendComponentElement);
                                                
                                                XElement componentNameElement = new XElement(XName.Get("ComponentName", "http://schemas.microsoft.com/windowsazure"));
                                                componentNameElement.Value = componentsItem.ComponentName;
                                                unattendComponentElement.Add(componentNameElement);
                                                
                                                if (componentsItem.UnattendComponentSettings != null)
                                                {
                                                    if (componentsItem.UnattendComponentSettings is ILazyCollection == false || ((ILazyCollection)componentsItem.UnattendComponentSettings).IsInitialized)
                                                    {
                                                        XElement componentSettingsSequenceElement = new XElement(XName.Get("ComponentSettings", "http://schemas.microsoft.com/windowsazure"));
                                                        foreach (ComponentSetting componentSettingsItem in componentsItem.UnattendComponentSettings)
                                                        {
                                                            XElement componentSettingElement = new XElement(XName.Get("ComponentSetting", "http://schemas.microsoft.com/windowsazure"));
                                                            componentSettingsSequenceElement.Add(componentSettingElement);
                                                            
                                                            XElement settingNameElement = new XElement(XName.Get("SettingName", "http://schemas.microsoft.com/windowsazure"));
                                                            settingNameElement.Value = componentSettingsItem.SettingName;
                                                            componentSettingElement.Add(settingNameElement);
                                                            
                                                            if (componentSettingsItem.Content != null)
                                                            {
                                                                XElement contentElement = new XElement(XName.Get("Content", "http://schemas.microsoft.com/windowsazure"));
                                                                contentElement.Value = TypeConversion.ToBase64String(componentSettingsItem.Content);
                                                                componentSettingElement.Add(contentElement);
                                                            }
                                                        }
                                                        unattendComponentElement.Add(componentSettingsSequenceElement);
                                                    }
                                                }
                                            }
                                            unattendPassElement.Add(componentsSequenceElement);
                                        }
                                    }
                                }
                                additionalUnattendContentElement.Add(passesSequenceElement);
                            }
                        }
                    }
                    
                    if (parameters.ProvisioningConfiguration.HostName != null)
                    {
                        XElement hostNameElement = new XElement(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                        hostNameElement.Value = parameters.ProvisioningConfiguration.HostName;
                        provisioningConfigurationElement.Add(hostNameElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.UserName != null)
                    {
                        XElement userNameElement = new XElement(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                        userNameElement.Value = parameters.ProvisioningConfiguration.UserName;
                        provisioningConfigurationElement.Add(userNameElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.UserPassword != null)
                    {
                        XElement userPasswordElement = new XElement(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                        userPasswordElement.Value = parameters.ProvisioningConfiguration.UserPassword;
                        provisioningConfigurationElement.Add(userPasswordElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.DisableSshPasswordAuthentication != null)
                    {
                        XElement disableSshPasswordAuthenticationElement = new XElement(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                        disableSshPasswordAuthenticationElement.Value = parameters.ProvisioningConfiguration.DisableSshPasswordAuthentication.ToString().ToLower();
                        provisioningConfigurationElement.Add(disableSshPasswordAuthenticationElement);
                    }
                    
                    if (parameters.ProvisioningConfiguration.SshSettings != null)
                    {
                        XElement sSHElement = new XElement(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                        provisioningConfigurationElement.Add(sSHElement);
                        
                        if (parameters.ProvisioningConfiguration.SshSettings.PublicKeys != null)
                        {
                            if (parameters.ProvisioningConfiguration.SshSettings.PublicKeys is ILazyCollection == false || ((ILazyCollection)parameters.ProvisioningConfiguration.SshSettings.PublicKeys).IsInitialized)
                            {
                                XElement publicKeysSequenceElement = new XElement(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                foreach (SshSettingPublicKey publicKeysItem in parameters.ProvisioningConfiguration.SshSettings.PublicKeys)
                                {
                                    XElement publicKeyElement = new XElement(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure"));
                                    publicKeysSequenceElement.Add(publicKeyElement);
                                    
                                    XElement fingerprintElement = new XElement(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                    fingerprintElement.Value = publicKeysItem.Fingerprint;
                                    publicKeyElement.Add(fingerprintElement);
                                    
                                    XElement pathElement2 = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                    pathElement2.Value = publicKeysItem.Path;
                                    publicKeyElement.Add(pathElement2);
                                }
                                sSHElement.Add(publicKeysSequenceElement);
                            }
                        }
                        
                        if (parameters.ProvisioningConfiguration.SshSettings.KeyPairs != null)
                        {
                            if (parameters.ProvisioningConfiguration.SshSettings.KeyPairs is ILazyCollection == false || ((ILazyCollection)parameters.ProvisioningConfiguration.SshSettings.KeyPairs).IsInitialized)
                            {
                                XElement keyPairsSequenceElement = new XElement(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                foreach (SshSettingKeyPair keyPairsItem in parameters.ProvisioningConfiguration.SshSettings.KeyPairs)
                                {
                                    XElement keyPairElement = new XElement(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure"));
                                    keyPairsSequenceElement.Add(keyPairElement);
                                    
                                    XElement fingerprintElement2 = new XElement(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                    fingerprintElement2.Value = keyPairsItem.Fingerprint;
                                    keyPairElement.Add(fingerprintElement2);
                                    
                                    XElement pathElement3 = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                    pathElement3.Value = keyPairsItem.Path;
                                    keyPairElement.Add(pathElement3);
                                }
                                sSHElement.Add(keyPairsSequenceElement);
                            }
                        }
                    }
                    
                    if (parameters.ProvisioningConfiguration.CustomData != null)
                    {
                        XElement customDataElement = new XElement(XName.Get("CustomData", "http://schemas.microsoft.com/windowsazure"));
                        customDataElement.Value = parameters.ProvisioningConfiguration.CustomData;
                        provisioningConfigurationElement.Add(customDataElement);
                    }
                }
                
                XElement targetImageLabelElement = new XElement(XName.Get("TargetImageLabel", "http://schemas.microsoft.com/windowsazure"));
                targetImageLabelElement.Value = parameters.TargetImageLabel;
                captureRoleOperationElement.Add(targetImageLabelElement);
                
                XElement targetImageNameElement = new XElement(XName.Get("TargetImageName", "http://schemas.microsoft.com/windowsazure"));
                targetImageNameElement.Value = parameters.TargetImageName;
                captureRoleOperationElement.Add(targetImageNameElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin capturing role as VM template.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to restart.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginCapturingVMImageAsync(string serviceName, string deploymentName, string virtualMachineName, VirtualMachineCaptureVMImageParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCapturingVMImageAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            url = url + "/Operations";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement captureRoleAsVMImageOperationElement = new XElement(XName.Get("CaptureRoleAsVMImageOperation", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(captureRoleAsVMImageOperationElement);
                
                XElement operationTypeElement = new XElement(XName.Get("OperationType", "http://schemas.microsoft.com/windowsazure"));
                operationTypeElement.Value = "CaptureRoleAsVMImageOperation";
                captureRoleAsVMImageOperationElement.Add(operationTypeElement);
                
                if (parameters.OSState != null)
                {
                    XElement oSStateElement = new XElement(XName.Get("OSState", "http://schemas.microsoft.com/windowsazure"));
                    oSStateElement.Value = parameters.OSState;
                    captureRoleAsVMImageOperationElement.Add(oSStateElement);
                }
                
                if (parameters.VMImageName != null)
                {
                    XElement vMImageNameElement = new XElement(XName.Get("VMImageName", "http://schemas.microsoft.com/windowsazure"));
                    vMImageNameElement.Value = parameters.VMImageName;
                    captureRoleAsVMImageOperationElement.Add(vMImageNameElement);
                }
                
                if (parameters.VMImageLabel != null)
                {
                    XElement vMImageLabelElement = new XElement(XName.Get("VMImageLabel", "http://schemas.microsoft.com/windowsazure"));
                    vMImageLabelElement.Value = parameters.VMImageLabel;
                    captureRoleAsVMImageOperationElement.Add(vMImageLabelElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Creating Role operation adds a virtual machine to an
        /// existing deployment. You can refer to the OSDisk in the Add Role
        /// operation in the following ways: Platform/User Image - Set the
        /// SourceImageName to a platform or user image. You can optionally
        /// specify the DiskName and MediaLink values as part the operation to
        /// control the name and location of target disk. When DiskName and
        /// MediaLink are specified in this mode, they must not already exist
        /// in the system, otherwise a conflict fault is returned; UserDisk -
        /// Set DiskName to a user supplied image in image repository.
        /// SourceImageName must be set to NULL. All other properties are
        /// ignored; or Blob in a Storage Account - Set MediaLink to a blob
        /// containing the image. SourceImageName and DiskName are set to
        /// NULL.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Creating Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginCreatingAsync(string serviceName, string deploymentName, VirtualMachineCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ConfigurationSets != null)
            {
                foreach (ConfigurationSet configurationSetsParameterItem in parameters.ConfigurationSets)
                {
                    if (configurationSetsParameterItem.AdditionalUnattendContent != null)
                    {
                        if (configurationSetsParameterItem.AdditionalUnattendContent.UnattendPasses != null)
                        {
                            foreach (UnattendPassSettings unattendPassesParameterItem in configurationSetsParameterItem.AdditionalUnattendContent.UnattendPasses)
                            {
                                if (unattendPassesParameterItem.PassName == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.AdditionalUnattendContent.UnattendPasses.PassName");
                                }
                                if (unattendPassesParameterItem.UnattendComponents != null)
                                {
                                    foreach (UnattendComponent unattendComponentsParameterItem in unattendPassesParameterItem.UnattendComponents)
                                    {
                                        if (unattendComponentsParameterItem.ComponentName == null)
                                        {
                                            throw new ArgumentNullException("parameters.ConfigurationSets.AdditionalUnattendContent.UnattendPasses.UnattendComponents.ComponentName");
                                        }
                                        if (unattendComponentsParameterItem.UnattendComponentSettings != null)
                                        {
                                            foreach (ComponentSetting unattendComponentSettingsParameterItem in unattendComponentsParameterItem.UnattendComponentSettings)
                                            {
                                                if (unattendComponentSettingsParameterItem.SettingName == null)
                                                {
                                                    throw new ArgumentNullException("parameters.ConfigurationSets.AdditionalUnattendContent.UnattendPasses.UnattendComponents.UnattendComponentSettings.SettingName");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (configurationSetsParameterItem.DomainJoin != null)
                    {
                        if (configurationSetsParameterItem.DomainJoin.Credentials != null)
                        {
                            if (configurationSetsParameterItem.DomainJoin.Credentials.Password == null)
                            {
                                throw new ArgumentNullException("parameters.ConfigurationSets.DomainJoin.Credentials.Password");
                            }
                            if (configurationSetsParameterItem.DomainJoin.Credentials.UserName == null)
                            {
                                throw new ArgumentNullException("parameters.ConfigurationSets.DomainJoin.Credentials.UserName");
                            }
                        }
                    }
                    if (configurationSetsParameterItem.HostName != null && configurationSetsParameterItem.HostName.Length < 1)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.HostName");
                    }
                    if (configurationSetsParameterItem.HostName != null && configurationSetsParameterItem.HostName.Length > 64)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.HostName");
                    }
                    if (configurationSetsParameterItem.SshSettings != null)
                    {
                        if (configurationSetsParameterItem.SshSettings.KeyPairs != null)
                        {
                            foreach (SshSettingKeyPair keyPairsParameterItem in configurationSetsParameterItem.SshSettings.KeyPairs)
                            {
                                if (keyPairsParameterItem.Fingerprint == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.SshSettings.KeyPairs.Fingerprint");
                                }
                                if (keyPairsParameterItem.Path == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.SshSettings.KeyPairs.Path");
                                }
                            }
                        }
                        if (configurationSetsParameterItem.SshSettings.PublicKeys != null)
                        {
                            foreach (SshSettingPublicKey publicKeysParameterItem in configurationSetsParameterItem.SshSettings.PublicKeys)
                            {
                                if (publicKeysParameterItem.Fingerprint == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.SshSettings.PublicKeys.Fingerprint");
                                }
                                if (publicKeysParameterItem.Path == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.SshSettings.PublicKeys.Path");
                                }
                            }
                        }
                    }
                    if (configurationSetsParameterItem.StoredCertificateSettings != null)
                    {
                        foreach (StoredCertificateSettings storedCertificateSettingsParameterItem in configurationSetsParameterItem.StoredCertificateSettings)
                        {
                            if (storedCertificateSettingsParameterItem.StoreName == null)
                            {
                                throw new ArgumentNullException("parameters.ConfigurationSets.StoredCertificateSettings.StoreName");
                            }
                            if (storedCertificateSettingsParameterItem.Thumbprint == null)
                            {
                                throw new ArgumentNullException("parameters.ConfigurationSets.StoredCertificateSettings.Thumbprint");
                            }
                        }
                    }
                    if (configurationSetsParameterItem.UserName != null && configurationSetsParameterItem.UserName.Length < 1)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.UserName");
                    }
                    if (configurationSetsParameterItem.UserName != null && configurationSetsParameterItem.UserName.Length > 32)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.UserName");
                    }
                    if (configurationSetsParameterItem.UserPassword != null && configurationSetsParameterItem.UserPassword.Length < 6)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.UserPassword");
                    }
                    if (configurationSetsParameterItem.UserPassword != null && configurationSetsParameterItem.UserPassword.Length > 72)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.UserPassword");
                    }
                }
            }
            if (parameters.RoleName == null)
            {
                throw new ArgumentNullException("parameters.RoleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roles";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement persistentVMRoleElement = new XElement(XName.Get("PersistentVMRole", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(persistentVMRoleElement);
                
                XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                roleNameElement.Value = parameters.RoleName;
                persistentVMRoleElement.Add(roleNameElement);
                
                XElement roleTypeElement = new XElement(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                roleTypeElement.Value = "PersistentVMRole";
                persistentVMRoleElement.Add(roleTypeElement);
                
                if (parameters.ConfigurationSets != null)
                {
                    if (parameters.ConfigurationSets is ILazyCollection == false || ((ILazyCollection)parameters.ConfigurationSets).IsInitialized)
                    {
                        XElement configurationSetsSequenceElement = new XElement(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ConfigurationSet configurationSetsItem in parameters.ConfigurationSets)
                        {
                            XElement configurationSetElement = new XElement(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure"));
                            configurationSetsSequenceElement.Add(configurationSetElement);
                            
                            if (configurationSetsItem.ConfigurationSetType != null)
                            {
                                XElement configurationSetTypeElement = new XElement(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetTypeElement.Value = configurationSetsItem.ConfigurationSetType;
                                configurationSetElement.Add(configurationSetTypeElement);
                            }
                            
                            if (configurationSetsItem.InputEndpoints != null)
                            {
                                if (configurationSetsItem.InputEndpoints is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.InputEndpoints).IsInitialized)
                                {
                                    XElement inputEndpointsSequenceElement = new XElement(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (InputEndpoint inputEndpointsItem in configurationSetsItem.InputEndpoints)
                                    {
                                        XElement inputEndpointElement = new XElement(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                        inputEndpointsSequenceElement.Add(inputEndpointElement);
                                        
                                        if (inputEndpointsItem.LoadBalancedEndpointSetName != null)
                                        {
                                            XElement loadBalancedEndpointSetNameElement = new XElement(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                            loadBalancedEndpointSetNameElement.Value = inputEndpointsItem.LoadBalancedEndpointSetName;
                                            inputEndpointElement.Add(loadBalancedEndpointSetNameElement);
                                        }
                                        
                                        if (inputEndpointsItem.LocalPort != null)
                                        {
                                            XElement localPortElement = new XElement(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            localPortElement.Value = inputEndpointsItem.LocalPort.ToString();
                                            inputEndpointElement.Add(localPortElement);
                                        }
                                        
                                        if (inputEndpointsItem.Name != null)
                                        {
                                            XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            nameElement.Value = inputEndpointsItem.Name;
                                            inputEndpointElement.Add(nameElement);
                                        }
                                        
                                        if (inputEndpointsItem.Port != null)
                                        {
                                            XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            portElement.Value = inputEndpointsItem.Port.ToString();
                                            inputEndpointElement.Add(portElement);
                                        }
                                        
                                        if (inputEndpointsItem.LoadBalancerProbe != null)
                                        {
                                            XElement loadBalancerProbeElement = new XElement(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                            inputEndpointElement.Add(loadBalancerProbeElement);
                                            
                                            if (inputEndpointsItem.LoadBalancerProbe.Path != null)
                                            {
                                                XElement pathElement = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                pathElement.Value = inputEndpointsItem.LoadBalancerProbe.Path;
                                                loadBalancerProbeElement.Add(pathElement);
                                            }
                                            
                                            XElement portElement2 = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            portElement2.Value = inputEndpointsItem.LoadBalancerProbe.Port.ToString();
                                            loadBalancerProbeElement.Add(portElement2);
                                            
                                            XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            protocolElement.Value = ComputeManagementClient.LoadBalancerProbeTransportProtocolToString(inputEndpointsItem.LoadBalancerProbe.Protocol);
                                            loadBalancerProbeElement.Add(protocolElement);
                                            
                                            if (inputEndpointsItem.LoadBalancerProbe.IntervalInSeconds != null)
                                            {
                                                XElement intervalInSecondsElement = new XElement(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                intervalInSecondsElement.Value = inputEndpointsItem.LoadBalancerProbe.IntervalInSeconds.ToString();
                                                loadBalancerProbeElement.Add(intervalInSecondsElement);
                                            }
                                            
                                            if (inputEndpointsItem.LoadBalancerProbe.TimeoutInSeconds != null)
                                            {
                                                XElement timeoutInSecondsElement = new XElement(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                timeoutInSecondsElement.Value = inputEndpointsItem.LoadBalancerProbe.TimeoutInSeconds.ToString();
                                                loadBalancerProbeElement.Add(timeoutInSecondsElement);
                                            }
                                        }
                                        
                                        if (inputEndpointsItem.Protocol != null)
                                        {
                                            XElement protocolElement2 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            protocolElement2.Value = inputEndpointsItem.Protocol;
                                            inputEndpointElement.Add(protocolElement2);
                                        }
                                        
                                        if (inputEndpointsItem.VirtualIPAddress != null)
                                        {
                                            XElement vipElement = new XElement(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                            vipElement.Value = inputEndpointsItem.VirtualIPAddress;
                                            inputEndpointElement.Add(vipElement);
                                        }
                                        
                                        if (inputEndpointsItem.EnableDirectServerReturn != null)
                                        {
                                            XElement enableDirectServerReturnElement = new XElement(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                            enableDirectServerReturnElement.Value = inputEndpointsItem.EnableDirectServerReturn.ToString().ToLower();
                                            inputEndpointElement.Add(enableDirectServerReturnElement);
                                        }
                                        
                                        if (inputEndpointsItem.LoadBalancerName != null)
                                        {
                                            XElement loadBalancerNameElement = new XElement(XName.Get("LoadBalancerName", "http://schemas.microsoft.com/windowsazure"));
                                            loadBalancerNameElement.Value = inputEndpointsItem.LoadBalancerName;
                                            inputEndpointElement.Add(loadBalancerNameElement);
                                        }
                                        
                                        if (inputEndpointsItem.EndpointAcl != null)
                                        {
                                            XElement endpointAclElement = new XElement(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                            inputEndpointElement.Add(endpointAclElement);
                                            
                                            if (inputEndpointsItem.EndpointAcl.Rules != null)
                                            {
                                                if (inputEndpointsItem.EndpointAcl.Rules is ILazyCollection == false || ((ILazyCollection)inputEndpointsItem.EndpointAcl.Rules).IsInitialized)
                                                {
                                                    XElement rulesSequenceElement = new XElement(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                    foreach (AccessControlListRule rulesItem in inputEndpointsItem.EndpointAcl.Rules)
                                                    {
                                                        XElement ruleElement = new XElement(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure"));
                                                        rulesSequenceElement.Add(ruleElement);
                                                        
                                                        if (rulesItem.Order != null)
                                                        {
                                                            XElement orderElement = new XElement(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                            orderElement.Value = rulesItem.Order.ToString();
                                                            ruleElement.Add(orderElement);
                                                        }
                                                        
                                                        if (rulesItem.Action != null)
                                                        {
                                                            XElement actionElement = new XElement(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                            actionElement.Value = rulesItem.Action;
                                                            ruleElement.Add(actionElement);
                                                        }
                                                        
                                                        if (rulesItem.RemoteSubnet != null)
                                                        {
                                                            XElement remoteSubnetElement = new XElement(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                            remoteSubnetElement.Value = rulesItem.RemoteSubnet;
                                                            ruleElement.Add(remoteSubnetElement);
                                                        }
                                                        
                                                        if (rulesItem.Description != null)
                                                        {
                                                            XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                            descriptionElement.Value = rulesItem.Description;
                                                            ruleElement.Add(descriptionElement);
                                                        }
                                                    }
                                                    endpointAclElement.Add(rulesSequenceElement);
                                                }
                                            }
                                        }
                                        
                                        if (inputEndpointsItem.IdleTimeoutInMinutes != null)
                                        {
                                            XElement idleTimeoutInMinutesElement = new XElement(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            idleTimeoutInMinutesElement.Value = inputEndpointsItem.IdleTimeoutInMinutes.ToString();
                                            inputEndpointElement.Add(idleTimeoutInMinutesElement);
                                        }
                                        
                                        if (inputEndpointsItem.LoadBalancerDistribution != null)
                                        {
                                            XElement loadBalancerDistributionElement = new XElement(XName.Get("LoadBalancerDistribution", "http://schemas.microsoft.com/windowsazure"));
                                            loadBalancerDistributionElement.Value = inputEndpointsItem.LoadBalancerDistribution;
                                            inputEndpointElement.Add(loadBalancerDistributionElement);
                                        }
                                        
                                        if (inputEndpointsItem.VirtualIPName != null)
                                        {
                                            XElement virtualIPNameElement = new XElement(XName.Get("VirtualIPName", "http://schemas.microsoft.com/windowsazure"));
                                            virtualIPNameElement.Value = inputEndpointsItem.VirtualIPName;
                                            inputEndpointElement.Add(virtualIPNameElement);
                                        }
                                    }
                                    configurationSetElement.Add(inputEndpointsSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.SubnetNames != null)
                            {
                                if (configurationSetsItem.SubnetNames is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.SubnetNames).IsInitialized)
                                {
                                    XElement subnetNamesSequenceElement = new XElement(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (string subnetNamesItem in configurationSetsItem.SubnetNames)
                                    {
                                        XElement subnetNamesItemElement = new XElement(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                        subnetNamesItemElement.Value = subnetNamesItem;
                                        subnetNamesSequenceElement.Add(subnetNamesItemElement);
                                    }
                                    configurationSetElement.Add(subnetNamesSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.StaticVirtualNetworkIPAddress != null)
                            {
                                XElement staticVirtualNetworkIPAddressElement = new XElement(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                staticVirtualNetworkIPAddressElement.Value = configurationSetsItem.StaticVirtualNetworkIPAddress;
                                configurationSetElement.Add(staticVirtualNetworkIPAddressElement);
                            }
                            
                            if (configurationSetsItem.PublicIPs != null)
                            {
                                if (configurationSetsItem.PublicIPs is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.PublicIPs).IsInitialized)
                                {
                                    XElement publicIPsSequenceElement = new XElement(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (ConfigurationSet.PublicIP publicIPsItem in configurationSetsItem.PublicIPs)
                                    {
                                        XElement publicIPElement = new XElement(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure"));
                                        publicIPsSequenceElement.Add(publicIPElement);
                                        
                                        if (publicIPsItem.Name != null)
                                        {
                                            XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            nameElement2.Value = publicIPsItem.Name;
                                            publicIPElement.Add(nameElement2);
                                        }
                                        
                                        if (publicIPsItem.IdleTimeoutInMinutes != null)
                                        {
                                            XElement idleTimeoutInMinutesElement2 = new XElement(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            idleTimeoutInMinutesElement2.Value = publicIPsItem.IdleTimeoutInMinutes.ToString();
                                            publicIPElement.Add(idleTimeoutInMinutesElement2);
                                        }
                                        
                                        if (publicIPsItem.DomainNameLabel != null)
                                        {
                                            XElement domainNameLabelElement = new XElement(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                            domainNameLabelElement.Value = publicIPsItem.DomainNameLabel;
                                            publicIPElement.Add(domainNameLabelElement);
                                        }
                                    }
                                    configurationSetElement.Add(publicIPsSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.NetworkInterfaces != null)
                            {
                                if (configurationSetsItem.NetworkInterfaces is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.NetworkInterfaces).IsInitialized)
                                {
                                    XElement networkInterfacesSequenceElement = new XElement(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (NetworkInterface networkInterfacesItem in configurationSetsItem.NetworkInterfaces)
                                    {
                                        XElement networkInterfaceElement = new XElement(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure"));
                                        networkInterfacesSequenceElement.Add(networkInterfaceElement);
                                        
                                        if (networkInterfacesItem.Name != null)
                                        {
                                            XElement nameElement3 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            nameElement3.Value = networkInterfacesItem.Name;
                                            networkInterfaceElement.Add(nameElement3);
                                        }
                                        
                                        if (networkInterfacesItem.IPConfigurations != null)
                                        {
                                            if (networkInterfacesItem.IPConfigurations is ILazyCollection == false || ((ILazyCollection)networkInterfacesItem.IPConfigurations).IsInitialized)
                                            {
                                                XElement iPConfigurationsSequenceElement = new XElement(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                                foreach (IPConfiguration iPConfigurationsItem in networkInterfacesItem.IPConfigurations)
                                                {
                                                    XElement iPConfigurationElement = new XElement(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                                    iPConfigurationsSequenceElement.Add(iPConfigurationElement);
                                                    
                                                    if (iPConfigurationsItem.SubnetName != null)
                                                    {
                                                        XElement subnetNameElement = new XElement(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                        subnetNameElement.Value = iPConfigurationsItem.SubnetName;
                                                        iPConfigurationElement.Add(subnetNameElement);
                                                    }
                                                    
                                                    if (iPConfigurationsItem.StaticVirtualNetworkIPAddress != null)
                                                    {
                                                        XElement staticVirtualNetworkIPAddressElement2 = new XElement(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                        staticVirtualNetworkIPAddressElement2.Value = iPConfigurationsItem.StaticVirtualNetworkIPAddress;
                                                        iPConfigurationElement.Add(staticVirtualNetworkIPAddressElement2);
                                                    }
                                                }
                                                networkInterfaceElement.Add(iPConfigurationsSequenceElement);
                                            }
                                        }
                                        
                                        if (networkInterfacesItem.NetworkSecurityGroup != null)
                                        {
                                            XElement networkSecurityGroupElement = new XElement(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                            networkSecurityGroupElement.Value = networkInterfacesItem.NetworkSecurityGroup;
                                            networkInterfaceElement.Add(networkSecurityGroupElement);
                                        }
                                        
                                        if (networkInterfacesItem.IPForwarding != null)
                                        {
                                            XElement iPForwardingElement = new XElement(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                            iPForwardingElement.Value = networkInterfacesItem.IPForwarding;
                                            networkInterfaceElement.Add(iPForwardingElement);
                                        }
                                    }
                                    configurationSetElement.Add(networkInterfacesSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.NetworkSecurityGroup != null)
                            {
                                XElement networkSecurityGroupElement2 = new XElement(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                networkSecurityGroupElement2.Value = configurationSetsItem.NetworkSecurityGroup;
                                configurationSetElement.Add(networkSecurityGroupElement2);
                            }
                            
                            if (configurationSetsItem.IPForwarding != null)
                            {
                                XElement iPForwardingElement2 = new XElement(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                iPForwardingElement2.Value = configurationSetsItem.IPForwarding;
                                configurationSetElement.Add(iPForwardingElement2);
                            }
                            
                            if (configurationSetsItem.ComputerName != null)
                            {
                                XElement computerNameElement = new XElement(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                computerNameElement.Value = configurationSetsItem.ComputerName;
                                configurationSetElement.Add(computerNameElement);
                            }
                            
                            if (configurationSetsItem.AdminPassword != null)
                            {
                                XElement adminPasswordElement = new XElement(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                adminPasswordElement.Value = configurationSetsItem.AdminPassword;
                                configurationSetElement.Add(adminPasswordElement);
                            }
                            
                            if (configurationSetsItem.ResetPasswordOnFirstLogon != null)
                            {
                                XElement resetPasswordOnFirstLogonElement = new XElement(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                resetPasswordOnFirstLogonElement.Value = configurationSetsItem.ResetPasswordOnFirstLogon.ToString().ToLower();
                                configurationSetElement.Add(resetPasswordOnFirstLogonElement);
                            }
                            
                            if (configurationSetsItem.EnableAutomaticUpdates != null)
                            {
                                XElement enableAutomaticUpdatesElement = new XElement(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                enableAutomaticUpdatesElement.Value = configurationSetsItem.EnableAutomaticUpdates.ToString().ToLower();
                                configurationSetElement.Add(enableAutomaticUpdatesElement);
                            }
                            
                            if (configurationSetsItem.TimeZone != null)
                            {
                                XElement timeZoneElement = new XElement(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                timeZoneElement.Value = configurationSetsItem.TimeZone;
                                configurationSetElement.Add(timeZoneElement);
                            }
                            
                            if (configurationSetsItem.DomainJoin != null)
                            {
                                XElement domainJoinElement = new XElement(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetElement.Add(domainJoinElement);
                                
                                if (configurationSetsItem.DomainJoin.Credentials != null)
                                {
                                    XElement credentialsElement = new XElement(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                    domainJoinElement.Add(credentialsElement);
                                    
                                    if (configurationSetsItem.DomainJoin.Credentials.Domain != null)
                                    {
                                        XElement domainElement = new XElement(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                        domainElement.Value = configurationSetsItem.DomainJoin.Credentials.Domain;
                                        credentialsElement.Add(domainElement);
                                    }
                                    
                                    XElement usernameElement = new XElement(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                    usernameElement.Value = configurationSetsItem.DomainJoin.Credentials.UserName;
                                    credentialsElement.Add(usernameElement);
                                    
                                    XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                    passwordElement.Value = configurationSetsItem.DomainJoin.Credentials.Password;
                                    credentialsElement.Add(passwordElement);
                                }
                                
                                if (configurationSetsItem.DomainJoin.DomainToJoin != null)
                                {
                                    XElement joinDomainElement = new XElement(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                    joinDomainElement.Value = configurationSetsItem.DomainJoin.DomainToJoin;
                                    domainJoinElement.Add(joinDomainElement);
                                }
                                
                                if (configurationSetsItem.DomainJoin.LdapMachineObjectOU != null)
                                {
                                    XElement machineObjectOUElement = new XElement(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                    machineObjectOUElement.Value = configurationSetsItem.DomainJoin.LdapMachineObjectOU;
                                    domainJoinElement.Add(machineObjectOUElement);
                                }
                                
                                if (configurationSetsItem.DomainJoin.Provisioning != null)
                                {
                                    XElement provisioningElement = new XElement(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                    domainJoinElement.Add(provisioningElement);
                                    
                                    if (configurationSetsItem.DomainJoin.Provisioning.AccountData != null)
                                    {
                                        XElement accountDataElement = new XElement(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                        accountDataElement.Value = configurationSetsItem.DomainJoin.Provisioning.AccountData;
                                        provisioningElement.Add(accountDataElement);
                                    }
                                }
                            }
                            
                            if (configurationSetsItem.StoredCertificateSettings != null)
                            {
                                if (configurationSetsItem.StoredCertificateSettings is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.StoredCertificateSettings).IsInitialized)
                                {
                                    XElement storedCertificateSettingsSequenceElement = new XElement(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (StoredCertificateSettings storedCertificateSettingsItem in configurationSetsItem.StoredCertificateSettings)
                                    {
                                        XElement certificateSettingElement = new XElement(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure"));
                                        storedCertificateSettingsSequenceElement.Add(certificateSettingElement);
                                        
                                        XElement storeLocationElement = new XElement(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                        storeLocationElement.Value = "LocalMachine";
                                        certificateSettingElement.Add(storeLocationElement);
                                        
                                        XElement storeNameElement = new XElement(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                        storeNameElement.Value = storedCertificateSettingsItem.StoreName;
                                        certificateSettingElement.Add(storeNameElement);
                                        
                                        XElement thumbprintElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                        thumbprintElement.Value = storedCertificateSettingsItem.Thumbprint;
                                        certificateSettingElement.Add(thumbprintElement);
                                    }
                                    configurationSetElement.Add(storedCertificateSettingsSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.WindowsRemoteManagement != null)
                            {
                                XElement winRMElement = new XElement(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetElement.Add(winRMElement);
                                
                                if (configurationSetsItem.WindowsRemoteManagement.Listeners != null)
                                {
                                    if (configurationSetsItem.WindowsRemoteManagement.Listeners is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.WindowsRemoteManagement.Listeners).IsInitialized)
                                    {
                                        XElement listenersSequenceElement = new XElement(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                        foreach (WindowsRemoteManagementListener listenersItem in configurationSetsItem.WindowsRemoteManagement.Listeners)
                                        {
                                            XElement listenerElement = new XElement(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure"));
                                            listenersSequenceElement.Add(listenerElement);
                                            
                                            if (listenersItem.CertificateThumbprint != null)
                                            {
                                                XElement certificateThumbprintElement = new XElement(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                certificateThumbprintElement.Value = listenersItem.CertificateThumbprint;
                                                listenerElement.Add(certificateThumbprintElement);
                                            }
                                            
                                            XElement protocolElement3 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            protocolElement3.Value = listenersItem.ListenerType.ToString();
                                            listenerElement.Add(protocolElement3);
                                        }
                                        winRMElement.Add(listenersSequenceElement);
                                    }
                                }
                            }
                            
                            if (configurationSetsItem.AdminUserName != null)
                            {
                                XElement adminUsernameElement = new XElement(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                adminUsernameElement.Value = configurationSetsItem.AdminUserName;
                                configurationSetElement.Add(adminUsernameElement);
                            }
                            
                            if (configurationSetsItem.AdditionalUnattendContent != null)
                            {
                                XElement additionalUnattendContentElement = new XElement(XName.Get("AdditionalUnattendContent", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetElement.Add(additionalUnattendContentElement);
                                
                                if (configurationSetsItem.AdditionalUnattendContent.UnattendPasses != null)
                                {
                                    if (configurationSetsItem.AdditionalUnattendContent.UnattendPasses is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.AdditionalUnattendContent.UnattendPasses).IsInitialized)
                                    {
                                        XElement passesSequenceElement = new XElement(XName.Get("Passes", "http://schemas.microsoft.com/windowsazure"));
                                        foreach (UnattendPassSettings passesItem in configurationSetsItem.AdditionalUnattendContent.UnattendPasses)
                                        {
                                            XElement unattendPassElement = new XElement(XName.Get("UnattendPass", "http://schemas.microsoft.com/windowsazure"));
                                            passesSequenceElement.Add(unattendPassElement);
                                            
                                            XElement passNameElement = new XElement(XName.Get("PassName", "http://schemas.microsoft.com/windowsazure"));
                                            passNameElement.Value = passesItem.PassName;
                                            unattendPassElement.Add(passNameElement);
                                            
                                            if (passesItem.UnattendComponents != null)
                                            {
                                                if (passesItem.UnattendComponents is ILazyCollection == false || ((ILazyCollection)passesItem.UnattendComponents).IsInitialized)
                                                {
                                                    XElement componentsSequenceElement = new XElement(XName.Get("Components", "http://schemas.microsoft.com/windowsazure"));
                                                    foreach (UnattendComponent componentsItem in passesItem.UnattendComponents)
                                                    {
                                                        XElement unattendComponentElement = new XElement(XName.Get("UnattendComponent", "http://schemas.microsoft.com/windowsazure"));
                                                        componentsSequenceElement.Add(unattendComponentElement);
                                                        
                                                        XElement componentNameElement = new XElement(XName.Get("ComponentName", "http://schemas.microsoft.com/windowsazure"));
                                                        componentNameElement.Value = componentsItem.ComponentName;
                                                        unattendComponentElement.Add(componentNameElement);
                                                        
                                                        if (componentsItem.UnattendComponentSettings != null)
                                                        {
                                                            if (componentsItem.UnattendComponentSettings is ILazyCollection == false || ((ILazyCollection)componentsItem.UnattendComponentSettings).IsInitialized)
                                                            {
                                                                XElement componentSettingsSequenceElement = new XElement(XName.Get("ComponentSettings", "http://schemas.microsoft.com/windowsazure"));
                                                                foreach (ComponentSetting componentSettingsItem in componentsItem.UnattendComponentSettings)
                                                                {
                                                                    XElement componentSettingElement = new XElement(XName.Get("ComponentSetting", "http://schemas.microsoft.com/windowsazure"));
                                                                    componentSettingsSequenceElement.Add(componentSettingElement);
                                                                    
                                                                    XElement settingNameElement = new XElement(XName.Get("SettingName", "http://schemas.microsoft.com/windowsazure"));
                                                                    settingNameElement.Value = componentSettingsItem.SettingName;
                                                                    componentSettingElement.Add(settingNameElement);
                                                                    
                                                                    if (componentSettingsItem.Content != null)
                                                                    {
                                                                        XElement contentElement = new XElement(XName.Get("Content", "http://schemas.microsoft.com/windowsazure"));
                                                                        contentElement.Value = TypeConversion.ToBase64String(componentSettingsItem.Content);
                                                                        componentSettingElement.Add(contentElement);
                                                                    }
                                                                }
                                                                unattendComponentElement.Add(componentSettingsSequenceElement);
                                                            }
                                                        }
                                                    }
                                                    unattendPassElement.Add(componentsSequenceElement);
                                                }
                                            }
                                        }
                                        additionalUnattendContentElement.Add(passesSequenceElement);
                                    }
                                }
                            }
                            
                            if (configurationSetsItem.HostName != null)
                            {
                                XElement hostNameElement = new XElement(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                hostNameElement.Value = configurationSetsItem.HostName;
                                configurationSetElement.Add(hostNameElement);
                            }
                            
                            if (configurationSetsItem.UserName != null)
                            {
                                XElement userNameElement = new XElement(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                userNameElement.Value = configurationSetsItem.UserName;
                                configurationSetElement.Add(userNameElement);
                            }
                            
                            if (configurationSetsItem.UserPassword != null)
                            {
                                XElement userPasswordElement = new XElement(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                userPasswordElement.Value = configurationSetsItem.UserPassword;
                                configurationSetElement.Add(userPasswordElement);
                            }
                            
                            if (configurationSetsItem.DisableSshPasswordAuthentication != null)
                            {
                                XElement disableSshPasswordAuthenticationElement = new XElement(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                disableSshPasswordAuthenticationElement.Value = configurationSetsItem.DisableSshPasswordAuthentication.ToString().ToLower();
                                configurationSetElement.Add(disableSshPasswordAuthenticationElement);
                            }
                            
                            if (configurationSetsItem.SshSettings != null)
                            {
                                XElement sSHElement = new XElement(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetElement.Add(sSHElement);
                                
                                if (configurationSetsItem.SshSettings.PublicKeys != null)
                                {
                                    if (configurationSetsItem.SshSettings.PublicKeys is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.SshSettings.PublicKeys).IsInitialized)
                                    {
                                        XElement publicKeysSequenceElement = new XElement(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                        foreach (SshSettingPublicKey publicKeysItem in configurationSetsItem.SshSettings.PublicKeys)
                                        {
                                            XElement publicKeyElement = new XElement(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure"));
                                            publicKeysSequenceElement.Add(publicKeyElement);
                                            
                                            XElement fingerprintElement = new XElement(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                            fingerprintElement.Value = publicKeysItem.Fingerprint;
                                            publicKeyElement.Add(fingerprintElement);
                                            
                                            XElement pathElement2 = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                            pathElement2.Value = publicKeysItem.Path;
                                            publicKeyElement.Add(pathElement2);
                                        }
                                        sSHElement.Add(publicKeysSequenceElement);
                                    }
                                }
                                
                                if (configurationSetsItem.SshSettings.KeyPairs != null)
                                {
                                    if (configurationSetsItem.SshSettings.KeyPairs is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.SshSettings.KeyPairs).IsInitialized)
                                    {
                                        XElement keyPairsSequenceElement = new XElement(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                        foreach (SshSettingKeyPair keyPairsItem in configurationSetsItem.SshSettings.KeyPairs)
                                        {
                                            XElement keyPairElement = new XElement(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure"));
                                            keyPairsSequenceElement.Add(keyPairElement);
                                            
                                            XElement fingerprintElement2 = new XElement(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                            fingerprintElement2.Value = keyPairsItem.Fingerprint;
                                            keyPairElement.Add(fingerprintElement2);
                                            
                                            XElement pathElement3 = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                            pathElement3.Value = keyPairsItem.Path;
                                            keyPairElement.Add(pathElement3);
                                        }
                                        sSHElement.Add(keyPairsSequenceElement);
                                    }
                                }
                            }
                            
                            if (configurationSetsItem.CustomData != null)
                            {
                                XElement customDataElement = new XElement(XName.Get("CustomData", "http://schemas.microsoft.com/windowsazure"));
                                customDataElement.Value = configurationSetsItem.CustomData;
                                configurationSetElement.Add(customDataElement);
                            }
                        }
                        persistentVMRoleElement.Add(configurationSetsSequenceElement);
                    }
                }
                
                if (parameters.ResourceExtensionReferences != null)
                {
                    if (parameters.ResourceExtensionReferences is ILazyCollection == false || ((ILazyCollection)parameters.ResourceExtensionReferences).IsInitialized)
                    {
                        XElement resourceExtensionReferencesSequenceElement = new XElement(XName.Get("ResourceExtensionReferences", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ResourceExtensionReference resourceExtensionReferencesItem in parameters.ResourceExtensionReferences)
                        {
                            XElement resourceExtensionReferenceElement = new XElement(XName.Get("ResourceExtensionReference", "http://schemas.microsoft.com/windowsazure"));
                            resourceExtensionReferencesSequenceElement.Add(resourceExtensionReferenceElement);
                            
                            if (resourceExtensionReferencesItem.ReferenceName != null)
                            {
                                XElement referenceNameElement = new XElement(XName.Get("ReferenceName", "http://schemas.microsoft.com/windowsazure"));
                                referenceNameElement.Value = resourceExtensionReferencesItem.ReferenceName;
                                resourceExtensionReferenceElement.Add(referenceNameElement);
                            }
                            
                            if (resourceExtensionReferencesItem.Publisher != null)
                            {
                                XElement publisherElement = new XElement(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                                publisherElement.Value = resourceExtensionReferencesItem.Publisher;
                                resourceExtensionReferenceElement.Add(publisherElement);
                            }
                            
                            if (resourceExtensionReferencesItem.Name != null)
                            {
                                XElement nameElement4 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement4.Value = resourceExtensionReferencesItem.Name;
                                resourceExtensionReferenceElement.Add(nameElement4);
                            }
                            
                            if (resourceExtensionReferencesItem.Version != null)
                            {
                                XElement versionElement = new XElement(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                versionElement.Value = resourceExtensionReferencesItem.Version;
                                resourceExtensionReferenceElement.Add(versionElement);
                            }
                            
                            if (resourceExtensionReferencesItem.ResourceExtensionParameterValues != null)
                            {
                                if (resourceExtensionReferencesItem.ResourceExtensionParameterValues is ILazyCollection == false || ((ILazyCollection)resourceExtensionReferencesItem.ResourceExtensionParameterValues).IsInitialized)
                                {
                                    XElement resourceExtensionParameterValuesSequenceElement = new XElement(XName.Get("ResourceExtensionParameterValues", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (ResourceExtensionParameterValue resourceExtensionParameterValuesItem in resourceExtensionReferencesItem.ResourceExtensionParameterValues)
                                    {
                                        XElement resourceExtensionParameterValueElement = new XElement(XName.Get("ResourceExtensionParameterValue", "http://schemas.microsoft.com/windowsazure"));
                                        resourceExtensionParameterValuesSequenceElement.Add(resourceExtensionParameterValueElement);
                                        
                                        if (resourceExtensionParameterValuesItem.Key != null)
                                        {
                                            XElement keyElement = new XElement(XName.Get("Key", "http://schemas.microsoft.com/windowsazure"));
                                            keyElement.Value = resourceExtensionParameterValuesItem.Key;
                                            resourceExtensionParameterValueElement.Add(keyElement);
                                        }
                                        
                                        if (resourceExtensionParameterValuesItem.Value != null)
                                        {
                                            XElement valueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                                            valueElement.Value = TypeConversion.ToBase64String(resourceExtensionParameterValuesItem.Value);
                                            resourceExtensionParameterValueElement.Add(valueElement);
                                        }
                                        
                                        if (resourceExtensionParameterValuesItem.Type != null)
                                        {
                                            XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                            typeElement.Value = resourceExtensionParameterValuesItem.Type;
                                            resourceExtensionParameterValueElement.Add(typeElement);
                                        }
                                    }
                                    resourceExtensionReferenceElement.Add(resourceExtensionParameterValuesSequenceElement);
                                }
                            }
                            
                            if (resourceExtensionReferencesItem.State != null)
                            {
                                XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                stateElement.Value = resourceExtensionReferencesItem.State;
                                resourceExtensionReferenceElement.Add(stateElement);
                            }
                            
                            if (resourceExtensionReferencesItem.ForceUpdate != null)
                            {
                                XElement forceUpdateElement = new XElement(XName.Get("ForceUpdate", "http://schemas.microsoft.com/windowsazure"));
                                forceUpdateElement.Value = resourceExtensionReferencesItem.ForceUpdate.ToString().ToLower();
                                resourceExtensionReferenceElement.Add(forceUpdateElement);
                            }
                        }
                        persistentVMRoleElement.Add(resourceExtensionReferencesSequenceElement);
                    }
                }
                
                if (parameters.VMImageName != null)
                {
                    XElement vMImageNameElement = new XElement(XName.Get("VMImageName", "http://schemas.microsoft.com/windowsazure"));
                    vMImageNameElement.Value = parameters.VMImageName;
                    persistentVMRoleElement.Add(vMImageNameElement);
                }
                
                if (parameters.MediaLocation != null)
                {
                    XElement mediaLocationElement = new XElement(XName.Get("MediaLocation", "http://schemas.microsoft.com/windowsazure"));
                    mediaLocationElement.Value = parameters.MediaLocation.AbsoluteUri;
                    persistentVMRoleElement.Add(mediaLocationElement);
                }
                
                if (parameters.AvailabilitySetName != null)
                {
                    XElement availabilitySetNameElement = new XElement(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                    availabilitySetNameElement.Value = parameters.AvailabilitySetName;
                    persistentVMRoleElement.Add(availabilitySetNameElement);
                }
                
                if (parameters.DataVirtualHardDisks != null)
                {
                    if (parameters.DataVirtualHardDisks is ILazyCollection == false || ((ILazyCollection)parameters.DataVirtualHardDisks).IsInitialized)
                    {
                        XElement dataVirtualHardDisksSequenceElement = new XElement(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                        foreach (DataVirtualHardDisk dataVirtualHardDisksItem in parameters.DataVirtualHardDisks)
                        {
                            XElement dataVirtualHardDiskElement = new XElement(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                            dataVirtualHardDisksSequenceElement.Add(dataVirtualHardDiskElement);
                            
                            if (dataVirtualHardDisksItem.HostCaching != null)
                            {
                                XElement hostCachingElement = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                hostCachingElement.Value = dataVirtualHardDisksItem.HostCaching;
                                dataVirtualHardDiskElement.Add(hostCachingElement);
                            }
                            
                            if (dataVirtualHardDisksItem.Label != null)
                            {
                                XElement diskLabelElement = new XElement(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                diskLabelElement.Value = dataVirtualHardDisksItem.Label;
                                dataVirtualHardDiskElement.Add(diskLabelElement);
                            }
                            
                            if (dataVirtualHardDisksItem.Name != null)
                            {
                                XElement diskNameElement = new XElement(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                diskNameElement.Value = dataVirtualHardDisksItem.Name;
                                dataVirtualHardDiskElement.Add(diskNameElement);
                            }
                            
                            if (dataVirtualHardDisksItem.LogicalUnitNumber != null)
                            {
                                XElement lunElement = new XElement(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                lunElement.Value = dataVirtualHardDisksItem.LogicalUnitNumber.ToString();
                                dataVirtualHardDiskElement.Add(lunElement);
                            }
                            
                            if (dataVirtualHardDisksItem.LogicalDiskSizeInGB != null)
                            {
                                XElement logicalDiskSizeInGBElement = new XElement(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                logicalDiskSizeInGBElement.Value = dataVirtualHardDisksItem.LogicalDiskSizeInGB.ToString();
                                dataVirtualHardDiskElement.Add(logicalDiskSizeInGBElement);
                            }
                            
                            if (dataVirtualHardDisksItem.MediaLink != null)
                            {
                                XElement mediaLinkElement = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                mediaLinkElement.Value = dataVirtualHardDisksItem.MediaLink.AbsoluteUri;
                                dataVirtualHardDiskElement.Add(mediaLinkElement);
                            }
                            
                            if (dataVirtualHardDisksItem.SourceMediaLink != null)
                            {
                                XElement sourceMediaLinkElement = new XElement(XName.Get("SourceMediaLink", "http://schemas.microsoft.com/windowsazure"));
                                sourceMediaLinkElement.Value = dataVirtualHardDisksItem.SourceMediaLink.AbsoluteUri;
                                dataVirtualHardDiskElement.Add(sourceMediaLinkElement);
                            }
                            
                            if (dataVirtualHardDisksItem.IOType != null)
                            {
                                XElement iOTypeElement = new XElement(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                iOTypeElement.Value = dataVirtualHardDisksItem.IOType;
                                dataVirtualHardDiskElement.Add(iOTypeElement);
                            }
                        }
                        persistentVMRoleElement.Add(dataVirtualHardDisksSequenceElement);
                    }
                }
                
                if (parameters.OSVirtualHardDisk != null)
                {
                    XElement oSVirtualHardDiskElement = new XElement(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                    persistentVMRoleElement.Add(oSVirtualHardDiskElement);
                    
                    if (parameters.OSVirtualHardDisk.HostCaching != null)
                    {
                        XElement hostCachingElement2 = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                        hostCachingElement2.Value = parameters.OSVirtualHardDisk.HostCaching;
                        oSVirtualHardDiskElement.Add(hostCachingElement2);
                    }
                    
                    if (parameters.OSVirtualHardDisk.Label != null)
                    {
                        XElement diskLabelElement2 = new XElement(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                        diskLabelElement2.Value = parameters.OSVirtualHardDisk.Label;
                        oSVirtualHardDiskElement.Add(diskLabelElement2);
                    }
                    
                    if (parameters.OSVirtualHardDisk.Name != null)
                    {
                        XElement diskNameElement2 = new XElement(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                        diskNameElement2.Value = parameters.OSVirtualHardDisk.Name;
                        oSVirtualHardDiskElement.Add(diskNameElement2);
                    }
                    
                    if (parameters.OSVirtualHardDisk.MediaLink != null)
                    {
                        XElement mediaLinkElement2 = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                        mediaLinkElement2.Value = parameters.OSVirtualHardDisk.MediaLink.AbsoluteUri;
                        oSVirtualHardDiskElement.Add(mediaLinkElement2);
                    }
                    
                    if (parameters.OSVirtualHardDisk.SourceImageName != null)
                    {
                        XElement sourceImageNameElement = new XElement(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                        sourceImageNameElement.Value = parameters.OSVirtualHardDisk.SourceImageName;
                        oSVirtualHardDiskElement.Add(sourceImageNameElement);
                    }
                    
                    if (parameters.OSVirtualHardDisk.OperatingSystem != null)
                    {
                        XElement osElement = new XElement(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                        osElement.Value = parameters.OSVirtualHardDisk.OperatingSystem;
                        oSVirtualHardDiskElement.Add(osElement);
                    }
                    
                    if (parameters.OSVirtualHardDisk.RemoteSourceImageLink != null)
                    {
                        XElement remoteSourceImageLinkElement = new XElement(XName.Get("RemoteSourceImageLink", "http://schemas.microsoft.com/windowsazure"));
                        remoteSourceImageLinkElement.Value = parameters.OSVirtualHardDisk.RemoteSourceImageLink.AbsoluteUri;
                        oSVirtualHardDiskElement.Add(remoteSourceImageLinkElement);
                    }
                    
                    if (parameters.OSVirtualHardDisk.IOType != null)
                    {
                        XElement iOTypeElement2 = new XElement(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                        iOTypeElement2.Value = parameters.OSVirtualHardDisk.IOType;
                        oSVirtualHardDiskElement.Add(iOTypeElement2);
                    }
                    
                    if (parameters.OSVirtualHardDisk.ResizedSizeInGB != null)
                    {
                        XElement resizedSizeInGBElement = new XElement(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                        resizedSizeInGBElement.Value = parameters.OSVirtualHardDisk.ResizedSizeInGB.ToString();
                        oSVirtualHardDiskElement.Add(resizedSizeInGBElement);
                    }
                }
                
                if (parameters.RoleSize != null)
                {
                    XElement roleSizeElement = new XElement(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                    roleSizeElement.Value = parameters.RoleSize;
                    persistentVMRoleElement.Add(roleSizeElement);
                }
                
                if (parameters.ProvisionGuestAgent != null)
                {
                    XElement provisionGuestAgentElement = new XElement(XName.Get("ProvisionGuestAgent", "http://schemas.microsoft.com/windowsazure"));
                    provisionGuestAgentElement.Value = parameters.ProvisionGuestAgent.ToString().ToLower();
                    persistentVMRoleElement.Add(provisionGuestAgentElement);
                }
                
                if (parameters.VMImageInput != null)
                {
                    XElement vMImageInputElement = new XElement(XName.Get("VMImageInput", "http://schemas.microsoft.com/windowsazure"));
                    persistentVMRoleElement.Add(vMImageInputElement);
                }
                
                if (parameters.DebugSettings != null)
                {
                    XElement debugSettingsElement = new XElement(XName.Get("DebugSettings", "http://schemas.microsoft.com/windowsazure"));
                    persistentVMRoleElement.Add(debugSettingsElement);
                    
                    XElement bootDiagnosticsEnabledElement = new XElement(XName.Get("BootDiagnosticsEnabled", "http://schemas.microsoft.com/windowsazure"));
                    bootDiagnosticsEnabledElement.Value = parameters.DebugSettings.BootDiagnosticsEnabled.ToString().ToLower();
                    debugSettingsElement.Add(bootDiagnosticsEnabledElement);
                    
                    if (parameters.DebugSettings.ConsoleScreenshotBlobUri != null)
                    {
                        XElement consoleScreenshotBlobUriElement = new XElement(XName.Get("ConsoleScreenshotBlobUri", "http://schemas.microsoft.com/windowsazure"));
                        consoleScreenshotBlobUriElement.Value = parameters.DebugSettings.ConsoleScreenshotBlobUri.AbsoluteUri;
                        debugSettingsElement.Add(consoleScreenshotBlobUriElement);
                    }
                    
                    if (parameters.DebugSettings.SerialOutputBlobUri != null)
                    {
                        XElement serialOutputBlobUriElement = new XElement(XName.Get("SerialOutputBlobUri", "http://schemas.microsoft.com/windowsazure"));
                        serialOutputBlobUriElement.Value = parameters.DebugSettings.SerialOutputBlobUri.AbsoluteUri;
                        debugSettingsElement.Add(serialOutputBlobUriElement);
                    }
                }
                
                if (parameters.LicenseType != null)
                {
                    XElement licenseTypeElement = new XElement(XName.Get("LicenseType", "http://schemas.microsoft.com/windowsazure"));
                    licenseTypeElement.Value = parameters.LicenseType;
                    persistentVMRoleElement.Add(licenseTypeElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Creating Virtual Machine Deployment operation provisions
        /// a virtual machine based on the supplied configuration. When you
        /// create a deployment of a virtual machine, you should make sure
        /// that the cloud service and the disk or image that you use are
        /// located in the same region. For example, if the cloud service was
        /// created in the West US region, the disk or image that you use
        /// should also be located in a storage account in the West US region.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Creating Virtual Machine
        /// Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginCreatingDeploymentAsync(string serviceName, VirtualMachineCreateDeploymentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.Label.Length > 100)
            {
                throw new ArgumentOutOfRangeException("parameters.Label");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.Roles == null)
            {
                throw new ArgumentNullException("parameters.Roles");
            }
            if (parameters.Roles != null)
            {
                foreach (Role rolesParameterItem in parameters.Roles)
                {
                    if (rolesParameterItem.ConfigurationSets != null)
                    {
                        foreach (ConfigurationSet configurationSetsParameterItem in rolesParameterItem.ConfigurationSets)
                        {
                            if (configurationSetsParameterItem.AdditionalUnattendContent != null)
                            {
                                if (configurationSetsParameterItem.AdditionalUnattendContent.UnattendPasses != null)
                                {
                                    foreach (UnattendPassSettings unattendPassesParameterItem in configurationSetsParameterItem.AdditionalUnattendContent.UnattendPasses)
                                    {
                                        if (unattendPassesParameterItem.PassName == null)
                                        {
                                            throw new ArgumentNullException("parameters.Roles.ConfigurationSets.AdditionalUnattendContent.UnattendPasses.PassName");
                                        }
                                        if (unattendPassesParameterItem.UnattendComponents != null)
                                        {
                                            foreach (UnattendComponent unattendComponentsParameterItem in unattendPassesParameterItem.UnattendComponents)
                                            {
                                                if (unattendComponentsParameterItem.ComponentName == null)
                                                {
                                                    throw new ArgumentNullException("parameters.Roles.ConfigurationSets.AdditionalUnattendContent.UnattendPasses.UnattendComponents.ComponentName");
                                                }
                                                if (unattendComponentsParameterItem.UnattendComponentSettings != null)
                                                {
                                                    foreach (ComponentSetting unattendComponentSettingsParameterItem in unattendComponentsParameterItem.UnattendComponentSettings)
                                                    {
                                                        if (unattendComponentSettingsParameterItem.SettingName == null)
                                                        {
                                                            throw new ArgumentNullException("parameters.Roles.ConfigurationSets.AdditionalUnattendContent.UnattendPasses.UnattendComponents.UnattendComponentSettings.SettingName");
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (configurationSetsParameterItem.DomainJoin != null)
                            {
                                if (configurationSetsParameterItem.DomainJoin.Credentials != null)
                                {
                                    if (configurationSetsParameterItem.DomainJoin.Credentials.Password == null)
                                    {
                                        throw new ArgumentNullException("parameters.Roles.ConfigurationSets.DomainJoin.Credentials.Password");
                                    }
                                    if (configurationSetsParameterItem.DomainJoin.Credentials.UserName == null)
                                    {
                                        throw new ArgumentNullException("parameters.Roles.ConfigurationSets.DomainJoin.Credentials.UserName");
                                    }
                                }
                            }
                            if (configurationSetsParameterItem.HostName != null && configurationSetsParameterItem.HostName.Length < 1)
                            {
                                throw new ArgumentOutOfRangeException("parameters.Roles.ConfigurationSets.HostName");
                            }
                            if (configurationSetsParameterItem.HostName != null && configurationSetsParameterItem.HostName.Length > 64)
                            {
                                throw new ArgumentOutOfRangeException("parameters.Roles.ConfigurationSets.HostName");
                            }
                            if (configurationSetsParameterItem.SshSettings != null)
                            {
                                if (configurationSetsParameterItem.SshSettings.KeyPairs != null)
                                {
                                    foreach (SshSettingKeyPair keyPairsParameterItem in configurationSetsParameterItem.SshSettings.KeyPairs)
                                    {
                                        if (keyPairsParameterItem.Fingerprint == null)
                                        {
                                            throw new ArgumentNullException("parameters.Roles.ConfigurationSets.SshSettings.KeyPairs.Fingerprint");
                                        }
                                        if (keyPairsParameterItem.Path == null)
                                        {
                                            throw new ArgumentNullException("parameters.Roles.ConfigurationSets.SshSettings.KeyPairs.Path");
                                        }
                                    }
                                }
                                if (configurationSetsParameterItem.SshSettings.PublicKeys != null)
                                {
                                    foreach (SshSettingPublicKey publicKeysParameterItem in configurationSetsParameterItem.SshSettings.PublicKeys)
                                    {
                                        if (publicKeysParameterItem.Fingerprint == null)
                                        {
                                            throw new ArgumentNullException("parameters.Roles.ConfigurationSets.SshSettings.PublicKeys.Fingerprint");
                                        }
                                        if (publicKeysParameterItem.Path == null)
                                        {
                                            throw new ArgumentNullException("parameters.Roles.ConfigurationSets.SshSettings.PublicKeys.Path");
                                        }
                                    }
                                }
                            }
                            if (configurationSetsParameterItem.StoredCertificateSettings != null)
                            {
                                foreach (StoredCertificateSettings storedCertificateSettingsParameterItem in configurationSetsParameterItem.StoredCertificateSettings)
                                {
                                    if (storedCertificateSettingsParameterItem.StoreName == null)
                                    {
                                        throw new ArgumentNullException("parameters.Roles.ConfigurationSets.StoredCertificateSettings.StoreName");
                                    }
                                    if (storedCertificateSettingsParameterItem.Thumbprint == null)
                                    {
                                        throw new ArgumentNullException("parameters.Roles.ConfigurationSets.StoredCertificateSettings.Thumbprint");
                                    }
                                }
                            }
                            if (configurationSetsParameterItem.UserName != null && configurationSetsParameterItem.UserName.Length < 1)
                            {
                                throw new ArgumentOutOfRangeException("parameters.Roles.ConfigurationSets.UserName");
                            }
                            if (configurationSetsParameterItem.UserName != null && configurationSetsParameterItem.UserName.Length > 32)
                            {
                                throw new ArgumentOutOfRangeException("parameters.Roles.ConfigurationSets.UserName");
                            }
                            if (configurationSetsParameterItem.UserPassword != null && configurationSetsParameterItem.UserPassword.Length < 6)
                            {
                                throw new ArgumentOutOfRangeException("parameters.Roles.ConfigurationSets.UserPassword");
                            }
                            if (configurationSetsParameterItem.UserPassword != null && configurationSetsParameterItem.UserPassword.Length > 72)
                            {
                                throw new ArgumentOutOfRangeException("parameters.Roles.ConfigurationSets.UserPassword");
                            }
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingDeploymentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement deploymentElement = new XElement(XName.Get("Deployment", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(deploymentElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                deploymentElement.Add(nameElement);
                
                XElement deploymentSlotElement = new XElement(XName.Get("DeploymentSlot", "http://schemas.microsoft.com/windowsazure"));
                deploymentSlotElement.Value = parameters.DeploymentSlot.ToString();
                deploymentElement.Add(deploymentSlotElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = parameters.Label;
                deploymentElement.Add(labelElement);
                
                if (parameters.Roles is ILazyCollection == false || ((ILazyCollection)parameters.Roles).IsInitialized)
                {
                    XElement roleListSequenceElement = new XElement(XName.Get("RoleList", "http://schemas.microsoft.com/windowsazure"));
                    foreach (Role roleListItem in parameters.Roles)
                    {
                        XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                        roleListSequenceElement.Add(roleElement);
                        
                        if (roleListItem.RoleName != null)
                        {
                            XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                            roleNameElement.Value = roleListItem.RoleName;
                            roleElement.Add(roleNameElement);
                        }
                        
                        if (roleListItem.OSVersion != null)
                        {
                            XElement osVersionElement = new XElement(XName.Get("OsVersion", "http://schemas.microsoft.com/windowsazure"));
                            osVersionElement.Value = roleListItem.OSVersion;
                            roleElement.Add(osVersionElement);
                        }
                        
                        if (roleListItem.RoleType != null)
                        {
                            XElement roleTypeElement = new XElement(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                            roleTypeElement.Value = roleListItem.RoleType;
                            roleElement.Add(roleTypeElement);
                        }
                        
                        if (roleListItem.ConfigurationSets != null)
                        {
                            if (roleListItem.ConfigurationSets is ILazyCollection == false || ((ILazyCollection)roleListItem.ConfigurationSets).IsInitialized)
                            {
                                XElement configurationSetsSequenceElement = new XElement(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                                foreach (ConfigurationSet configurationSetsItem in roleListItem.ConfigurationSets)
                                {
                                    XElement configurationSetElement = new XElement(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure"));
                                    configurationSetsSequenceElement.Add(configurationSetElement);
                                    
                                    if (configurationSetsItem.ConfigurationSetType != null)
                                    {
                                        XElement configurationSetTypeElement = new XElement(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                        configurationSetTypeElement.Value = configurationSetsItem.ConfigurationSetType;
                                        configurationSetElement.Add(configurationSetTypeElement);
                                    }
                                    
                                    if (configurationSetsItem.InputEndpoints != null)
                                    {
                                        if (configurationSetsItem.InputEndpoints is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.InputEndpoints).IsInitialized)
                                        {
                                            XElement inputEndpointsSequenceElement = new XElement(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                            foreach (InputEndpoint inputEndpointsItem in configurationSetsItem.InputEndpoints)
                                            {
                                                XElement inputEndpointElement = new XElement(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                                inputEndpointsSequenceElement.Add(inputEndpointElement);
                                                
                                                if (inputEndpointsItem.LoadBalancedEndpointSetName != null)
                                                {
                                                    XElement loadBalancedEndpointSetNameElement = new XElement(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                                    loadBalancedEndpointSetNameElement.Value = inputEndpointsItem.LoadBalancedEndpointSetName;
                                                    inputEndpointElement.Add(loadBalancedEndpointSetNameElement);
                                                }
                                                
                                                if (inputEndpointsItem.LocalPort != null)
                                                {
                                                    XElement localPortElement = new XElement(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                                    localPortElement.Value = inputEndpointsItem.LocalPort.ToString();
                                                    inputEndpointElement.Add(localPortElement);
                                                }
                                                
                                                if (inputEndpointsItem.Name != null)
                                                {
                                                    XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    nameElement2.Value = inputEndpointsItem.Name;
                                                    inputEndpointElement.Add(nameElement2);
                                                }
                                                
                                                if (inputEndpointsItem.Port != null)
                                                {
                                                    XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                    portElement.Value = inputEndpointsItem.Port.ToString();
                                                    inputEndpointElement.Add(portElement);
                                                }
                                                
                                                if (inputEndpointsItem.LoadBalancerProbe != null)
                                                {
                                                    XElement loadBalancerProbeElement = new XElement(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                                    inputEndpointElement.Add(loadBalancerProbeElement);
                                                    
                                                    if (inputEndpointsItem.LoadBalancerProbe.Path != null)
                                                    {
                                                        XElement pathElement = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                        pathElement.Value = inputEndpointsItem.LoadBalancerProbe.Path;
                                                        loadBalancerProbeElement.Add(pathElement);
                                                    }
                                                    
                                                    XElement portElement2 = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                    portElement2.Value = inputEndpointsItem.LoadBalancerProbe.Port.ToString();
                                                    loadBalancerProbeElement.Add(portElement2);
                                                    
                                                    XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    protocolElement.Value = ComputeManagementClient.LoadBalancerProbeTransportProtocolToString(inputEndpointsItem.LoadBalancerProbe.Protocol);
                                                    loadBalancerProbeElement.Add(protocolElement);
                                                    
                                                    if (inputEndpointsItem.LoadBalancerProbe.IntervalInSeconds != null)
                                                    {
                                                        XElement intervalInSecondsElement = new XElement(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                        intervalInSecondsElement.Value = inputEndpointsItem.LoadBalancerProbe.IntervalInSeconds.ToString();
                                                        loadBalancerProbeElement.Add(intervalInSecondsElement);
                                                    }
                                                    
                                                    if (inputEndpointsItem.LoadBalancerProbe.TimeoutInSeconds != null)
                                                    {
                                                        XElement timeoutInSecondsElement = new XElement(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                        timeoutInSecondsElement.Value = inputEndpointsItem.LoadBalancerProbe.TimeoutInSeconds.ToString();
                                                        loadBalancerProbeElement.Add(timeoutInSecondsElement);
                                                    }
                                                }
                                                
                                                if (inputEndpointsItem.Protocol != null)
                                                {
                                                    XElement protocolElement2 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    protocolElement2.Value = inputEndpointsItem.Protocol;
                                                    inputEndpointElement.Add(protocolElement2);
                                                }
                                                
                                                if (inputEndpointsItem.VirtualIPAddress != null)
                                                {
                                                    XElement vipElement = new XElement(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                                    vipElement.Value = inputEndpointsItem.VirtualIPAddress;
                                                    inputEndpointElement.Add(vipElement);
                                                }
                                                
                                                if (inputEndpointsItem.EnableDirectServerReturn != null)
                                                {
                                                    XElement enableDirectServerReturnElement = new XElement(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                                    enableDirectServerReturnElement.Value = inputEndpointsItem.EnableDirectServerReturn.ToString().ToLower();
                                                    inputEndpointElement.Add(enableDirectServerReturnElement);
                                                }
                                                
                                                if (inputEndpointsItem.LoadBalancerName != null)
                                                {
                                                    XElement loadBalancerNameElement = new XElement(XName.Get("LoadBalancerName", "http://schemas.microsoft.com/windowsazure"));
                                                    loadBalancerNameElement.Value = inputEndpointsItem.LoadBalancerName;
                                                    inputEndpointElement.Add(loadBalancerNameElement);
                                                }
                                                
                                                if (inputEndpointsItem.EndpointAcl != null)
                                                {
                                                    XElement endpointAclElement = new XElement(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                                    inputEndpointElement.Add(endpointAclElement);
                                                    
                                                    if (inputEndpointsItem.EndpointAcl.Rules != null)
                                                    {
                                                        if (inputEndpointsItem.EndpointAcl.Rules is ILazyCollection == false || ((ILazyCollection)inputEndpointsItem.EndpointAcl.Rules).IsInitialized)
                                                        {
                                                            XElement rulesSequenceElement = new XElement(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                            foreach (AccessControlListRule rulesItem in inputEndpointsItem.EndpointAcl.Rules)
                                                            {
                                                                XElement ruleElement = new XElement(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure"));
                                                                rulesSequenceElement.Add(ruleElement);
                                                                
                                                                if (rulesItem.Order != null)
                                                                {
                                                                    XElement orderElement = new XElement(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                                    orderElement.Value = rulesItem.Order.ToString();
                                                                    ruleElement.Add(orderElement);
                                                                }
                                                                
                                                                if (rulesItem.Action != null)
                                                                {
                                                                    XElement actionElement = new XElement(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                                    actionElement.Value = rulesItem.Action;
                                                                    ruleElement.Add(actionElement);
                                                                }
                                                                
                                                                if (rulesItem.RemoteSubnet != null)
                                                                {
                                                                    XElement remoteSubnetElement = new XElement(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                                    remoteSubnetElement.Value = rulesItem.RemoteSubnet;
                                                                    ruleElement.Add(remoteSubnetElement);
                                                                }
                                                                
                                                                if (rulesItem.Description != null)
                                                                {
                                                                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                                    descriptionElement.Value = rulesItem.Description;
                                                                    ruleElement.Add(descriptionElement);
                                                                }
                                                            }
                                                            endpointAclElement.Add(rulesSequenceElement);
                                                        }
                                                    }
                                                }
                                                
                                                if (inputEndpointsItem.IdleTimeoutInMinutes != null)
                                                {
                                                    XElement idleTimeoutInMinutesElement = new XElement(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                    idleTimeoutInMinutesElement.Value = inputEndpointsItem.IdleTimeoutInMinutes.ToString();
                                                    inputEndpointElement.Add(idleTimeoutInMinutesElement);
                                                }
                                                
                                                if (inputEndpointsItem.LoadBalancerDistribution != null)
                                                {
                                                    XElement loadBalancerDistributionElement = new XElement(XName.Get("LoadBalancerDistribution", "http://schemas.microsoft.com/windowsazure"));
                                                    loadBalancerDistributionElement.Value = inputEndpointsItem.LoadBalancerDistribution;
                                                    inputEndpointElement.Add(loadBalancerDistributionElement);
                                                }
                                                
                                                if (inputEndpointsItem.VirtualIPName != null)
                                                {
                                                    XElement virtualIPNameElement = new XElement(XName.Get("VirtualIPName", "http://schemas.microsoft.com/windowsazure"));
                                                    virtualIPNameElement.Value = inputEndpointsItem.VirtualIPName;
                                                    inputEndpointElement.Add(virtualIPNameElement);
                                                }
                                            }
                                            configurationSetElement.Add(inputEndpointsSequenceElement);
                                        }
                                    }
                                    
                                    if (configurationSetsItem.SubnetNames != null)
                                    {
                                        if (configurationSetsItem.SubnetNames is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.SubnetNames).IsInitialized)
                                        {
                                            XElement subnetNamesSequenceElement = new XElement(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                            foreach (string subnetNamesItem in configurationSetsItem.SubnetNames)
                                            {
                                                XElement subnetNamesItemElement = new XElement(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                subnetNamesItemElement.Value = subnetNamesItem;
                                                subnetNamesSequenceElement.Add(subnetNamesItemElement);
                                            }
                                            configurationSetElement.Add(subnetNamesSequenceElement);
                                        }
                                    }
                                    
                                    if (configurationSetsItem.StaticVirtualNetworkIPAddress != null)
                                    {
                                        XElement staticVirtualNetworkIPAddressElement = new XElement(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                        staticVirtualNetworkIPAddressElement.Value = configurationSetsItem.StaticVirtualNetworkIPAddress;
                                        configurationSetElement.Add(staticVirtualNetworkIPAddressElement);
                                    }
                                    
                                    if (configurationSetsItem.PublicIPs != null)
                                    {
                                        if (configurationSetsItem.PublicIPs is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.PublicIPs).IsInitialized)
                                        {
                                            XElement publicIPsSequenceElement = new XElement(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                            foreach (ConfigurationSet.PublicIP publicIPsItem in configurationSetsItem.PublicIPs)
                                            {
                                                XElement publicIPElement = new XElement(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure"));
                                                publicIPsSequenceElement.Add(publicIPElement);
                                                
                                                if (publicIPsItem.Name != null)
                                                {
                                                    XElement nameElement3 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    nameElement3.Value = publicIPsItem.Name;
                                                    publicIPElement.Add(nameElement3);
                                                }
                                                
                                                if (publicIPsItem.IdleTimeoutInMinutes != null)
                                                {
                                                    XElement idleTimeoutInMinutesElement2 = new XElement(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                                    idleTimeoutInMinutesElement2.Value = publicIPsItem.IdleTimeoutInMinutes.ToString();
                                                    publicIPElement.Add(idleTimeoutInMinutesElement2);
                                                }
                                                
                                                if (publicIPsItem.DomainNameLabel != null)
                                                {
                                                    XElement domainNameLabelElement = new XElement(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                                    domainNameLabelElement.Value = publicIPsItem.DomainNameLabel;
                                                    publicIPElement.Add(domainNameLabelElement);
                                                }
                                            }
                                            configurationSetElement.Add(publicIPsSequenceElement);
                                        }
                                    }
                                    
                                    if (configurationSetsItem.NetworkInterfaces != null)
                                    {
                                        if (configurationSetsItem.NetworkInterfaces is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.NetworkInterfaces).IsInitialized)
                                        {
                                            XElement networkInterfacesSequenceElement = new XElement(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                            foreach (NetworkInterface networkInterfacesItem in configurationSetsItem.NetworkInterfaces)
                                            {
                                                XElement networkInterfaceElement = new XElement(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure"));
                                                networkInterfacesSequenceElement.Add(networkInterfaceElement);
                                                
                                                if (networkInterfacesItem.Name != null)
                                                {
                                                    XElement nameElement4 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                    nameElement4.Value = networkInterfacesItem.Name;
                                                    networkInterfaceElement.Add(nameElement4);
                                                }
                                                
                                                if (networkInterfacesItem.IPConfigurations != null)
                                                {
                                                    if (networkInterfacesItem.IPConfigurations is ILazyCollection == false || ((ILazyCollection)networkInterfacesItem.IPConfigurations).IsInitialized)
                                                    {
                                                        XElement iPConfigurationsSequenceElement = new XElement(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                                        foreach (IPConfiguration iPConfigurationsItem in networkInterfacesItem.IPConfigurations)
                                                        {
                                                            XElement iPConfigurationElement = new XElement(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                                            iPConfigurationsSequenceElement.Add(iPConfigurationElement);
                                                            
                                                            if (iPConfigurationsItem.SubnetName != null)
                                                            {
                                                                XElement subnetNameElement = new XElement(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                                subnetNameElement.Value = iPConfigurationsItem.SubnetName;
                                                                iPConfigurationElement.Add(subnetNameElement);
                                                            }
                                                            
                                                            if (iPConfigurationsItem.StaticVirtualNetworkIPAddress != null)
                                                            {
                                                                XElement staticVirtualNetworkIPAddressElement2 = new XElement(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                                staticVirtualNetworkIPAddressElement2.Value = iPConfigurationsItem.StaticVirtualNetworkIPAddress;
                                                                iPConfigurationElement.Add(staticVirtualNetworkIPAddressElement2);
                                                            }
                                                        }
                                                        networkInterfaceElement.Add(iPConfigurationsSequenceElement);
                                                    }
                                                }
                                                
                                                if (networkInterfacesItem.NetworkSecurityGroup != null)
                                                {
                                                    XElement networkSecurityGroupElement = new XElement(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                                    networkSecurityGroupElement.Value = networkInterfacesItem.NetworkSecurityGroup;
                                                    networkInterfaceElement.Add(networkSecurityGroupElement);
                                                }
                                                
                                                if (networkInterfacesItem.IPForwarding != null)
                                                {
                                                    XElement iPForwardingElement = new XElement(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                                    iPForwardingElement.Value = networkInterfacesItem.IPForwarding;
                                                    networkInterfaceElement.Add(iPForwardingElement);
                                                }
                                            }
                                            configurationSetElement.Add(networkInterfacesSequenceElement);
                                        }
                                    }
                                    
                                    if (configurationSetsItem.NetworkSecurityGroup != null)
                                    {
                                        XElement networkSecurityGroupElement2 = new XElement(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                        networkSecurityGroupElement2.Value = configurationSetsItem.NetworkSecurityGroup;
                                        configurationSetElement.Add(networkSecurityGroupElement2);
                                    }
                                    
                                    if (configurationSetsItem.IPForwarding != null)
                                    {
                                        XElement iPForwardingElement2 = new XElement(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                        iPForwardingElement2.Value = configurationSetsItem.IPForwarding;
                                        configurationSetElement.Add(iPForwardingElement2);
                                    }
                                    
                                    if (configurationSetsItem.ComputerName != null)
                                    {
                                        XElement computerNameElement = new XElement(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                        computerNameElement.Value = configurationSetsItem.ComputerName;
                                        configurationSetElement.Add(computerNameElement);
                                    }
                                    
                                    if (configurationSetsItem.AdminPassword != null)
                                    {
                                        XElement adminPasswordElement = new XElement(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                        adminPasswordElement.Value = configurationSetsItem.AdminPassword;
                                        configurationSetElement.Add(adminPasswordElement);
                                    }
                                    
                                    if (configurationSetsItem.ResetPasswordOnFirstLogon != null)
                                    {
                                        XElement resetPasswordOnFirstLogonElement = new XElement(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                        resetPasswordOnFirstLogonElement.Value = configurationSetsItem.ResetPasswordOnFirstLogon.ToString().ToLower();
                                        configurationSetElement.Add(resetPasswordOnFirstLogonElement);
                                    }
                                    
                                    if (configurationSetsItem.EnableAutomaticUpdates != null)
                                    {
                                        XElement enableAutomaticUpdatesElement = new XElement(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                        enableAutomaticUpdatesElement.Value = configurationSetsItem.EnableAutomaticUpdates.ToString().ToLower();
                                        configurationSetElement.Add(enableAutomaticUpdatesElement);
                                    }
                                    
                                    if (configurationSetsItem.TimeZone != null)
                                    {
                                        XElement timeZoneElement = new XElement(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                        timeZoneElement.Value = configurationSetsItem.TimeZone;
                                        configurationSetElement.Add(timeZoneElement);
                                    }
                                    
                                    if (configurationSetsItem.DomainJoin != null)
                                    {
                                        XElement domainJoinElement = new XElement(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                        configurationSetElement.Add(domainJoinElement);
                                        
                                        if (configurationSetsItem.DomainJoin.Credentials != null)
                                        {
                                            XElement credentialsElement = new XElement(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                            domainJoinElement.Add(credentialsElement);
                                            
                                            if (configurationSetsItem.DomainJoin.Credentials.Domain != null)
                                            {
                                                XElement domainElement = new XElement(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                                domainElement.Value = configurationSetsItem.DomainJoin.Credentials.Domain;
                                                credentialsElement.Add(domainElement);
                                            }
                                            
                                            XElement usernameElement = new XElement(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                            usernameElement.Value = configurationSetsItem.DomainJoin.Credentials.UserName;
                                            credentialsElement.Add(usernameElement);
                                            
                                            XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                            passwordElement.Value = configurationSetsItem.DomainJoin.Credentials.Password;
                                            credentialsElement.Add(passwordElement);
                                        }
                                        
                                        if (configurationSetsItem.DomainJoin.DomainToJoin != null)
                                        {
                                            XElement joinDomainElement = new XElement(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                            joinDomainElement.Value = configurationSetsItem.DomainJoin.DomainToJoin;
                                            domainJoinElement.Add(joinDomainElement);
                                        }
                                        
                                        if (configurationSetsItem.DomainJoin.LdapMachineObjectOU != null)
                                        {
                                            XElement machineObjectOUElement = new XElement(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                            machineObjectOUElement.Value = configurationSetsItem.DomainJoin.LdapMachineObjectOU;
                                            domainJoinElement.Add(machineObjectOUElement);
                                        }
                                        
                                        if (configurationSetsItem.DomainJoin.Provisioning != null)
                                        {
                                            XElement provisioningElement = new XElement(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                            domainJoinElement.Add(provisioningElement);
                                            
                                            if (configurationSetsItem.DomainJoin.Provisioning.AccountData != null)
                                            {
                                                XElement accountDataElement = new XElement(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                                accountDataElement.Value = configurationSetsItem.DomainJoin.Provisioning.AccountData;
                                                provisioningElement.Add(accountDataElement);
                                            }
                                        }
                                    }
                                    
                                    if (configurationSetsItem.StoredCertificateSettings != null)
                                    {
                                        if (configurationSetsItem.StoredCertificateSettings is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.StoredCertificateSettings).IsInitialized)
                                        {
                                            XElement storedCertificateSettingsSequenceElement = new XElement(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                            foreach (StoredCertificateSettings storedCertificateSettingsItem in configurationSetsItem.StoredCertificateSettings)
                                            {
                                                XElement certificateSettingElement = new XElement(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure"));
                                                storedCertificateSettingsSequenceElement.Add(certificateSettingElement);
                                                
                                                XElement storeLocationElement = new XElement(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                                storeLocationElement.Value = "LocalMachine";
                                                certificateSettingElement.Add(storeLocationElement);
                                                
                                                XElement storeNameElement = new XElement(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                                storeNameElement.Value = storedCertificateSettingsItem.StoreName;
                                                certificateSettingElement.Add(storeNameElement);
                                                
                                                XElement thumbprintElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                thumbprintElement.Value = storedCertificateSettingsItem.Thumbprint;
                                                certificateSettingElement.Add(thumbprintElement);
                                            }
                                            configurationSetElement.Add(storedCertificateSettingsSequenceElement);
                                        }
                                    }
                                    
                                    if (configurationSetsItem.WindowsRemoteManagement != null)
                                    {
                                        XElement winRMElement = new XElement(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                        configurationSetElement.Add(winRMElement);
                                        
                                        if (configurationSetsItem.WindowsRemoteManagement.Listeners != null)
                                        {
                                            if (configurationSetsItem.WindowsRemoteManagement.Listeners is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.WindowsRemoteManagement.Listeners).IsInitialized)
                                            {
                                                XElement listenersSequenceElement = new XElement(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                                foreach (WindowsRemoteManagementListener listenersItem in configurationSetsItem.WindowsRemoteManagement.Listeners)
                                                {
                                                    XElement listenerElement = new XElement(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure"));
                                                    listenersSequenceElement.Add(listenerElement);
                                                    
                                                    if (listenersItem.CertificateThumbprint != null)
                                                    {
                                                        XElement certificateThumbprintElement = new XElement(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                        certificateThumbprintElement.Value = listenersItem.CertificateThumbprint;
                                                        listenerElement.Add(certificateThumbprintElement);
                                                    }
                                                    
                                                    XElement protocolElement3 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    protocolElement3.Value = listenersItem.ListenerType.ToString();
                                                    listenerElement.Add(protocolElement3);
                                                }
                                                winRMElement.Add(listenersSequenceElement);
                                            }
                                        }
                                    }
                                    
                                    if (configurationSetsItem.AdminUserName != null)
                                    {
                                        XElement adminUsernameElement = new XElement(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                        adminUsernameElement.Value = configurationSetsItem.AdminUserName;
                                        configurationSetElement.Add(adminUsernameElement);
                                    }
                                    
                                    if (configurationSetsItem.AdditionalUnattendContent != null)
                                    {
                                        XElement additionalUnattendContentElement = new XElement(XName.Get("AdditionalUnattendContent", "http://schemas.microsoft.com/windowsazure"));
                                        configurationSetElement.Add(additionalUnattendContentElement);
                                        
                                        if (configurationSetsItem.AdditionalUnattendContent.UnattendPasses != null)
                                        {
                                            if (configurationSetsItem.AdditionalUnattendContent.UnattendPasses is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.AdditionalUnattendContent.UnattendPasses).IsInitialized)
                                            {
                                                XElement passesSequenceElement = new XElement(XName.Get("Passes", "http://schemas.microsoft.com/windowsazure"));
                                                foreach (UnattendPassSettings passesItem in configurationSetsItem.AdditionalUnattendContent.UnattendPasses)
                                                {
                                                    XElement unattendPassElement = new XElement(XName.Get("UnattendPass", "http://schemas.microsoft.com/windowsazure"));
                                                    passesSequenceElement.Add(unattendPassElement);
                                                    
                                                    XElement passNameElement = new XElement(XName.Get("PassName", "http://schemas.microsoft.com/windowsazure"));
                                                    passNameElement.Value = passesItem.PassName;
                                                    unattendPassElement.Add(passNameElement);
                                                    
                                                    if (passesItem.UnattendComponents != null)
                                                    {
                                                        if (passesItem.UnattendComponents is ILazyCollection == false || ((ILazyCollection)passesItem.UnattendComponents).IsInitialized)
                                                        {
                                                            XElement componentsSequenceElement = new XElement(XName.Get("Components", "http://schemas.microsoft.com/windowsazure"));
                                                            foreach (UnattendComponent componentsItem in passesItem.UnattendComponents)
                                                            {
                                                                XElement unattendComponentElement = new XElement(XName.Get("UnattendComponent", "http://schemas.microsoft.com/windowsazure"));
                                                                componentsSequenceElement.Add(unattendComponentElement);
                                                                
                                                                XElement componentNameElement = new XElement(XName.Get("ComponentName", "http://schemas.microsoft.com/windowsazure"));
                                                                componentNameElement.Value = componentsItem.ComponentName;
                                                                unattendComponentElement.Add(componentNameElement);
                                                                
                                                                if (componentsItem.UnattendComponentSettings != null)
                                                                {
                                                                    if (componentsItem.UnattendComponentSettings is ILazyCollection == false || ((ILazyCollection)componentsItem.UnattendComponentSettings).IsInitialized)
                                                                    {
                                                                        XElement componentSettingsSequenceElement = new XElement(XName.Get("ComponentSettings", "http://schemas.microsoft.com/windowsazure"));
                                                                        foreach (ComponentSetting componentSettingsItem in componentsItem.UnattendComponentSettings)
                                                                        {
                                                                            XElement componentSettingElement = new XElement(XName.Get("ComponentSetting", "http://schemas.microsoft.com/windowsazure"));
                                                                            componentSettingsSequenceElement.Add(componentSettingElement);
                                                                            
                                                                            XElement settingNameElement = new XElement(XName.Get("SettingName", "http://schemas.microsoft.com/windowsazure"));
                                                                            settingNameElement.Value = componentSettingsItem.SettingName;
                                                                            componentSettingElement.Add(settingNameElement);
                                                                            
                                                                            if (componentSettingsItem.Content != null)
                                                                            {
                                                                                XElement contentElement = new XElement(XName.Get("Content", "http://schemas.microsoft.com/windowsazure"));
                                                                                contentElement.Value = TypeConversion.ToBase64String(componentSettingsItem.Content);
                                                                                componentSettingElement.Add(contentElement);
                                                                            }
                                                                        }
                                                                        unattendComponentElement.Add(componentSettingsSequenceElement);
                                                                    }
                                                                }
                                                            }
                                                            unattendPassElement.Add(componentsSequenceElement);
                                                        }
                                                    }
                                                }
                                                additionalUnattendContentElement.Add(passesSequenceElement);
                                            }
                                        }
                                    }
                                    
                                    if (configurationSetsItem.HostName != null)
                                    {
                                        XElement hostNameElement = new XElement(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                        hostNameElement.Value = configurationSetsItem.HostName;
                                        configurationSetElement.Add(hostNameElement);
                                    }
                                    
                                    if (configurationSetsItem.UserName != null)
                                    {
                                        XElement userNameElement = new XElement(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                        userNameElement.Value = configurationSetsItem.UserName;
                                        configurationSetElement.Add(userNameElement);
                                    }
                                    
                                    if (configurationSetsItem.UserPassword != null)
                                    {
                                        XElement userPasswordElement = new XElement(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                        userPasswordElement.Value = configurationSetsItem.UserPassword;
                                        configurationSetElement.Add(userPasswordElement);
                                    }
                                    
                                    if (configurationSetsItem.DisableSshPasswordAuthentication != null)
                                    {
                                        XElement disableSshPasswordAuthenticationElement = new XElement(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                        disableSshPasswordAuthenticationElement.Value = configurationSetsItem.DisableSshPasswordAuthentication.ToString().ToLower();
                                        configurationSetElement.Add(disableSshPasswordAuthenticationElement);
                                    }
                                    
                                    if (configurationSetsItem.SshSettings != null)
                                    {
                                        XElement sSHElement = new XElement(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                        configurationSetElement.Add(sSHElement);
                                        
                                        if (configurationSetsItem.SshSettings.PublicKeys != null)
                                        {
                                            if (configurationSetsItem.SshSettings.PublicKeys is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.SshSettings.PublicKeys).IsInitialized)
                                            {
                                                XElement publicKeysSequenceElement = new XElement(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                                foreach (SshSettingPublicKey publicKeysItem in configurationSetsItem.SshSettings.PublicKeys)
                                                {
                                                    XElement publicKeyElement = new XElement(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure"));
                                                    publicKeysSequenceElement.Add(publicKeyElement);
                                                    
                                                    XElement fingerprintElement = new XElement(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                    fingerprintElement.Value = publicKeysItem.Fingerprint;
                                                    publicKeyElement.Add(fingerprintElement);
                                                    
                                                    XElement pathElement2 = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                    pathElement2.Value = publicKeysItem.Path;
                                                    publicKeyElement.Add(pathElement2);
                                                }
                                                sSHElement.Add(publicKeysSequenceElement);
                                            }
                                        }
                                        
                                        if (configurationSetsItem.SshSettings.KeyPairs != null)
                                        {
                                            if (configurationSetsItem.SshSettings.KeyPairs is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.SshSettings.KeyPairs).IsInitialized)
                                            {
                                                XElement keyPairsSequenceElement = new XElement(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                                foreach (SshSettingKeyPair keyPairsItem in configurationSetsItem.SshSettings.KeyPairs)
                                                {
                                                    XElement keyPairElement = new XElement(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure"));
                                                    keyPairsSequenceElement.Add(keyPairElement);
                                                    
                                                    XElement fingerprintElement2 = new XElement(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                    fingerprintElement2.Value = keyPairsItem.Fingerprint;
                                                    keyPairElement.Add(fingerprintElement2);
                                                    
                                                    XElement pathElement3 = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                    pathElement3.Value = keyPairsItem.Path;
                                                    keyPairElement.Add(pathElement3);
                                                }
                                                sSHElement.Add(keyPairsSequenceElement);
                                            }
                                        }
                                    }
                                    
                                    if (configurationSetsItem.CustomData != null)
                                    {
                                        XElement customDataElement = new XElement(XName.Get("CustomData", "http://schemas.microsoft.com/windowsazure"));
                                        customDataElement.Value = configurationSetsItem.CustomData;
                                        configurationSetElement.Add(customDataElement);
                                    }
                                }
                                roleElement.Add(configurationSetsSequenceElement);
                            }
                        }
                        
                        if (roleListItem.ResourceExtensionReferences != null)
                        {
                            if (roleListItem.ResourceExtensionReferences is ILazyCollection == false || ((ILazyCollection)roleListItem.ResourceExtensionReferences).IsInitialized)
                            {
                                XElement resourceExtensionReferencesSequenceElement = new XElement(XName.Get("ResourceExtensionReferences", "http://schemas.microsoft.com/windowsazure"));
                                foreach (ResourceExtensionReference resourceExtensionReferencesItem in roleListItem.ResourceExtensionReferences)
                                {
                                    XElement resourceExtensionReferenceElement = new XElement(XName.Get("ResourceExtensionReference", "http://schemas.microsoft.com/windowsazure"));
                                    resourceExtensionReferencesSequenceElement.Add(resourceExtensionReferenceElement);
                                    
                                    if (resourceExtensionReferencesItem.ReferenceName != null)
                                    {
                                        XElement referenceNameElement = new XElement(XName.Get("ReferenceName", "http://schemas.microsoft.com/windowsazure"));
                                        referenceNameElement.Value = resourceExtensionReferencesItem.ReferenceName;
                                        resourceExtensionReferenceElement.Add(referenceNameElement);
                                    }
                                    
                                    if (resourceExtensionReferencesItem.Publisher != null)
                                    {
                                        XElement publisherElement = new XElement(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                                        publisherElement.Value = resourceExtensionReferencesItem.Publisher;
                                        resourceExtensionReferenceElement.Add(publisherElement);
                                    }
                                    
                                    if (resourceExtensionReferencesItem.Name != null)
                                    {
                                        XElement nameElement5 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        nameElement5.Value = resourceExtensionReferencesItem.Name;
                                        resourceExtensionReferenceElement.Add(nameElement5);
                                    }
                                    
                                    if (resourceExtensionReferencesItem.Version != null)
                                    {
                                        XElement versionElement = new XElement(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                        versionElement.Value = resourceExtensionReferencesItem.Version;
                                        resourceExtensionReferenceElement.Add(versionElement);
                                    }
                                    
                                    if (resourceExtensionReferencesItem.ResourceExtensionParameterValues != null)
                                    {
                                        if (resourceExtensionReferencesItem.ResourceExtensionParameterValues is ILazyCollection == false || ((ILazyCollection)resourceExtensionReferencesItem.ResourceExtensionParameterValues).IsInitialized)
                                        {
                                            XElement resourceExtensionParameterValuesSequenceElement = new XElement(XName.Get("ResourceExtensionParameterValues", "http://schemas.microsoft.com/windowsazure"));
                                            foreach (ResourceExtensionParameterValue resourceExtensionParameterValuesItem in resourceExtensionReferencesItem.ResourceExtensionParameterValues)
                                            {
                                                XElement resourceExtensionParameterValueElement = new XElement(XName.Get("ResourceExtensionParameterValue", "http://schemas.microsoft.com/windowsazure"));
                                                resourceExtensionParameterValuesSequenceElement.Add(resourceExtensionParameterValueElement);
                                                
                                                if (resourceExtensionParameterValuesItem.Key != null)
                                                {
                                                    XElement keyElement = new XElement(XName.Get("Key", "http://schemas.microsoft.com/windowsazure"));
                                                    keyElement.Value = resourceExtensionParameterValuesItem.Key;
                                                    resourceExtensionParameterValueElement.Add(keyElement);
                                                }
                                                
                                                if (resourceExtensionParameterValuesItem.Value != null)
                                                {
                                                    XElement valueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                                                    valueElement.Value = TypeConversion.ToBase64String(resourceExtensionParameterValuesItem.Value);
                                                    resourceExtensionParameterValueElement.Add(valueElement);
                                                }
                                                
                                                if (resourceExtensionParameterValuesItem.Type != null)
                                                {
                                                    XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                                    typeElement.Value = resourceExtensionParameterValuesItem.Type;
                                                    resourceExtensionParameterValueElement.Add(typeElement);
                                                }
                                            }
                                            resourceExtensionReferenceElement.Add(resourceExtensionParameterValuesSequenceElement);
                                        }
                                    }
                                    
                                    if (resourceExtensionReferencesItem.State != null)
                                    {
                                        XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                        stateElement.Value = resourceExtensionReferencesItem.State;
                                        resourceExtensionReferenceElement.Add(stateElement);
                                    }
                                    
                                    if (resourceExtensionReferencesItem.ForceUpdate != null)
                                    {
                                        XElement forceUpdateElement = new XElement(XName.Get("ForceUpdate", "http://schemas.microsoft.com/windowsazure"));
                                        forceUpdateElement.Value = resourceExtensionReferencesItem.ForceUpdate.ToString().ToLower();
                                        resourceExtensionReferenceElement.Add(forceUpdateElement);
                                    }
                                }
                                roleElement.Add(resourceExtensionReferencesSequenceElement);
                            }
                        }
                        
                        if (roleListItem.VMImageName != null)
                        {
                            XElement vMImageNameElement = new XElement(XName.Get("VMImageName", "http://schemas.microsoft.com/windowsazure"));
                            vMImageNameElement.Value = roleListItem.VMImageName;
                            roleElement.Add(vMImageNameElement);
                        }
                        
                        if (roleListItem.MediaLocation != null)
                        {
                            XElement mediaLocationElement = new XElement(XName.Get("MediaLocation", "http://schemas.microsoft.com/windowsazure"));
                            mediaLocationElement.Value = roleListItem.MediaLocation.AbsoluteUri;
                            roleElement.Add(mediaLocationElement);
                        }
                        
                        if (roleListItem.AvailabilitySetName != null)
                        {
                            XElement availabilitySetNameElement = new XElement(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                            availabilitySetNameElement.Value = roleListItem.AvailabilitySetName;
                            roleElement.Add(availabilitySetNameElement);
                        }
                        
                        if (roleListItem.DataVirtualHardDisks != null)
                        {
                            if (roleListItem.DataVirtualHardDisks is ILazyCollection == false || ((ILazyCollection)roleListItem.DataVirtualHardDisks).IsInitialized)
                            {
                                XElement dataVirtualHardDisksSequenceElement = new XElement(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                                foreach (DataVirtualHardDisk dataVirtualHardDisksItem in roleListItem.DataVirtualHardDisks)
                                {
                                    XElement dataVirtualHardDiskElement = new XElement(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                                    dataVirtualHardDisksSequenceElement.Add(dataVirtualHardDiskElement);
                                    
                                    if (dataVirtualHardDisksItem.HostCaching != null)
                                    {
                                        XElement hostCachingElement = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                        hostCachingElement.Value = dataVirtualHardDisksItem.HostCaching;
                                        dataVirtualHardDiskElement.Add(hostCachingElement);
                                    }
                                    
                                    if (dataVirtualHardDisksItem.Label != null)
                                    {
                                        XElement diskLabelElement = new XElement(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                        diskLabelElement.Value = dataVirtualHardDisksItem.Label;
                                        dataVirtualHardDiskElement.Add(diskLabelElement);
                                    }
                                    
                                    if (dataVirtualHardDisksItem.Name != null)
                                    {
                                        XElement diskNameElement = new XElement(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                        diskNameElement.Value = dataVirtualHardDisksItem.Name;
                                        dataVirtualHardDiskElement.Add(diskNameElement);
                                    }
                                    
                                    if (dataVirtualHardDisksItem.LogicalUnitNumber != null)
                                    {
                                        XElement lunElement = new XElement(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                        lunElement.Value = dataVirtualHardDisksItem.LogicalUnitNumber.ToString();
                                        dataVirtualHardDiskElement.Add(lunElement);
                                    }
                                    
                                    if (dataVirtualHardDisksItem.LogicalDiskSizeInGB != null)
                                    {
                                        XElement logicalDiskSizeInGBElement = new XElement(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                        logicalDiskSizeInGBElement.Value = dataVirtualHardDisksItem.LogicalDiskSizeInGB.ToString();
                                        dataVirtualHardDiskElement.Add(logicalDiskSizeInGBElement);
                                    }
                                    
                                    if (dataVirtualHardDisksItem.MediaLink != null)
                                    {
                                        XElement mediaLinkElement = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                        mediaLinkElement.Value = dataVirtualHardDisksItem.MediaLink.AbsoluteUri;
                                        dataVirtualHardDiskElement.Add(mediaLinkElement);
                                    }
                                    
                                    if (dataVirtualHardDisksItem.SourceMediaLink != null)
                                    {
                                        XElement sourceMediaLinkElement = new XElement(XName.Get("SourceMediaLink", "http://schemas.microsoft.com/windowsazure"));
                                        sourceMediaLinkElement.Value = dataVirtualHardDisksItem.SourceMediaLink.AbsoluteUri;
                                        dataVirtualHardDiskElement.Add(sourceMediaLinkElement);
                                    }
                                    
                                    if (dataVirtualHardDisksItem.IOType != null)
                                    {
                                        XElement iOTypeElement = new XElement(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                        iOTypeElement.Value = dataVirtualHardDisksItem.IOType;
                                        dataVirtualHardDiskElement.Add(iOTypeElement);
                                    }
                                }
                                roleElement.Add(dataVirtualHardDisksSequenceElement);
                            }
                        }
                        
                        if (roleListItem.Label != null)
                        {
                            XElement labelElement2 = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            labelElement2.Value = roleListItem.Label;
                            roleElement.Add(labelElement2);
                        }
                        
                        if (roleListItem.OSVirtualHardDisk != null)
                        {
                            XElement oSVirtualHardDiskElement = new XElement(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                            roleElement.Add(oSVirtualHardDiskElement);
                            
                            if (roleListItem.OSVirtualHardDisk.HostCaching != null)
                            {
                                XElement hostCachingElement2 = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                hostCachingElement2.Value = roleListItem.OSVirtualHardDisk.HostCaching;
                                oSVirtualHardDiskElement.Add(hostCachingElement2);
                            }
                            
                            if (roleListItem.OSVirtualHardDisk.Label != null)
                            {
                                XElement diskLabelElement2 = new XElement(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                diskLabelElement2.Value = roleListItem.OSVirtualHardDisk.Label;
                                oSVirtualHardDiskElement.Add(diskLabelElement2);
                            }
                            
                            if (roleListItem.OSVirtualHardDisk.Name != null)
                            {
                                XElement diskNameElement2 = new XElement(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                diskNameElement2.Value = roleListItem.OSVirtualHardDisk.Name;
                                oSVirtualHardDiskElement.Add(diskNameElement2);
                            }
                            
                            if (roleListItem.OSVirtualHardDisk.MediaLink != null)
                            {
                                XElement mediaLinkElement2 = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                mediaLinkElement2.Value = roleListItem.OSVirtualHardDisk.MediaLink.AbsoluteUri;
                                oSVirtualHardDiskElement.Add(mediaLinkElement2);
                            }
                            
                            if (roleListItem.OSVirtualHardDisk.SourceImageName != null)
                            {
                                XElement sourceImageNameElement = new XElement(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                                sourceImageNameElement.Value = roleListItem.OSVirtualHardDisk.SourceImageName;
                                oSVirtualHardDiskElement.Add(sourceImageNameElement);
                            }
                            
                            if (roleListItem.OSVirtualHardDisk.OperatingSystem != null)
                            {
                                XElement osElement = new XElement(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                osElement.Value = roleListItem.OSVirtualHardDisk.OperatingSystem;
                                oSVirtualHardDiskElement.Add(osElement);
                            }
                            
                            if (roleListItem.OSVirtualHardDisk.RemoteSourceImageLink != null)
                            {
                                XElement remoteSourceImageLinkElement = new XElement(XName.Get("RemoteSourceImageLink", "http://schemas.microsoft.com/windowsazure"));
                                remoteSourceImageLinkElement.Value = roleListItem.OSVirtualHardDisk.RemoteSourceImageLink.AbsoluteUri;
                                oSVirtualHardDiskElement.Add(remoteSourceImageLinkElement);
                            }
                            
                            if (roleListItem.OSVirtualHardDisk.IOType != null)
                            {
                                XElement iOTypeElement2 = new XElement(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                iOTypeElement2.Value = roleListItem.OSVirtualHardDisk.IOType;
                                oSVirtualHardDiskElement.Add(iOTypeElement2);
                            }
                            
                            if (roleListItem.OSVirtualHardDisk.ResizedSizeInGB != null)
                            {
                                XElement resizedSizeInGBElement = new XElement(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                resizedSizeInGBElement.Value = roleListItem.OSVirtualHardDisk.ResizedSizeInGB.ToString();
                                oSVirtualHardDiskElement.Add(resizedSizeInGBElement);
                            }
                        }
                        
                        if (roleListItem.RoleSize != null)
                        {
                            XElement roleSizeElement = new XElement(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                            roleSizeElement.Value = roleListItem.RoleSize;
                            roleElement.Add(roleSizeElement);
                        }
                        
                        if (roleListItem.DefaultWinRmCertificateThumbprint != null)
                        {
                            XElement defaultWinRmCertificateThumbprintElement = new XElement(XName.Get("DefaultWinRmCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                            defaultWinRmCertificateThumbprintElement.Value = roleListItem.DefaultWinRmCertificateThumbprint;
                            roleElement.Add(defaultWinRmCertificateThumbprintElement);
                        }
                        
                        if (roleListItem.ProvisionGuestAgent != null)
                        {
                            XElement provisionGuestAgentElement = new XElement(XName.Get("ProvisionGuestAgent", "http://schemas.microsoft.com/windowsazure"));
                            provisionGuestAgentElement.Value = roleListItem.ProvisionGuestAgent.ToString().ToLower();
                            roleElement.Add(provisionGuestAgentElement);
                        }
                        
                        if (roleListItem.VMImageInput != null)
                        {
                            XElement vMImageInputElement = new XElement(XName.Get("VMImageInput", "http://schemas.microsoft.com/windowsazure"));
                            roleElement.Add(vMImageInputElement);
                            
                            if (roleListItem.VMImageInput.OSDiskConfiguration != null)
                            {
                                XElement oSDiskConfigurationElement = new XElement(XName.Get("OSDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                vMImageInputElement.Add(oSDiskConfigurationElement);
                                
                                if (roleListItem.VMImageInput.OSDiskConfiguration.ResizedSizeInGB != null)
                                {
                                    XElement resizedSizeInGBElement2 = new XElement(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                    resizedSizeInGBElement2.Value = roleListItem.VMImageInput.OSDiskConfiguration.ResizedSizeInGB.ToString();
                                    oSDiskConfigurationElement.Add(resizedSizeInGBElement2);
                                }
                            }
                            
                            if (roleListItem.VMImageInput.DataDiskConfigurations != null)
                            {
                                if (roleListItem.VMImageInput.DataDiskConfigurations is ILazyCollection == false || ((ILazyCollection)roleListItem.VMImageInput.DataDiskConfigurations).IsInitialized)
                                {
                                    XElement dataDiskConfigurationsSequenceElement = new XElement(XName.Get("DataDiskConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (DataDiskConfiguration dataDiskConfigurationsItem in roleListItem.VMImageInput.DataDiskConfigurations)
                                    {
                                        XElement dataDiskConfigurationElement = new XElement(XName.Get("DataDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                        dataDiskConfigurationsSequenceElement.Add(dataDiskConfigurationElement);
                                        
                                        if (dataDiskConfigurationsItem.DiskName != null)
                                        {
                                            XElement nameElement6 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            nameElement6.Value = dataDiskConfigurationsItem.DiskName;
                                            dataDiskConfigurationElement.Add(nameElement6);
                                        }
                                        
                                        if (dataDiskConfigurationsItem.ResizedSizeInGB != null)
                                        {
                                            XElement resizedSizeInGBElement3 = new XElement(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                            resizedSizeInGBElement3.Value = dataDiskConfigurationsItem.ResizedSizeInGB.ToString();
                                            dataDiskConfigurationElement.Add(resizedSizeInGBElement3);
                                        }
                                    }
                                    vMImageInputElement.Add(dataDiskConfigurationsSequenceElement);
                                }
                            }
                        }
                        
                        if (roleListItem.DebugSettings != null)
                        {
                            XElement debugSettingsElement = new XElement(XName.Get("DebugSettings", "http://schemas.microsoft.com/windowsazure"));
                            roleElement.Add(debugSettingsElement);
                            
                            XElement bootDiagnosticsEnabledElement = new XElement(XName.Get("BootDiagnosticsEnabled", "http://schemas.microsoft.com/windowsazure"));
                            bootDiagnosticsEnabledElement.Value = roleListItem.DebugSettings.BootDiagnosticsEnabled.ToString().ToLower();
                            debugSettingsElement.Add(bootDiagnosticsEnabledElement);
                            
                            if (roleListItem.DebugSettings.ConsoleScreenshotBlobUri != null)
                            {
                                XElement consoleScreenshotBlobUriElement = new XElement(XName.Get("ConsoleScreenshotBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                consoleScreenshotBlobUriElement.Value = roleListItem.DebugSettings.ConsoleScreenshotBlobUri.AbsoluteUri;
                                debugSettingsElement.Add(consoleScreenshotBlobUriElement);
                            }
                            
                            if (roleListItem.DebugSettings.SerialOutputBlobUri != null)
                            {
                                XElement serialOutputBlobUriElement = new XElement(XName.Get("SerialOutputBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                serialOutputBlobUriElement.Value = roleListItem.DebugSettings.SerialOutputBlobUri.AbsoluteUri;
                                debugSettingsElement.Add(serialOutputBlobUriElement);
                            }
                        }
                        
                        if (roleListItem.LicenseType != null)
                        {
                            XElement licenseTypeElement = new XElement(XName.Get("LicenseType", "http://schemas.microsoft.com/windowsazure"));
                            licenseTypeElement.Value = roleListItem.LicenseType;
                            roleElement.Add(licenseTypeElement);
                        }
                        
                        if (roleListItem.MigrationState != null)
                        {
                            XElement migrationStateElement = new XElement(XName.Get("MigrationState", "http://schemas.microsoft.com/windowsazure"));
                            migrationStateElement.Value = roleListItem.MigrationState;
                            roleElement.Add(migrationStateElement);
                        }
                    }
                    deploymentElement.Add(roleListSequenceElement);
                }
                
                if (parameters.VirtualNetworkName != null)
                {
                    XElement virtualNetworkNameElement = new XElement(XName.Get("VirtualNetworkName", "http://schemas.microsoft.com/windowsazure"));
                    virtualNetworkNameElement.Value = parameters.VirtualNetworkName;
                    deploymentElement.Add(virtualNetworkNameElement);
                }
                
                if (parameters.DnsSettings != null)
                {
                    XElement dnsElement = new XElement(XName.Get("Dns", "http://schemas.microsoft.com/windowsazure"));
                    deploymentElement.Add(dnsElement);
                    
                    if (parameters.DnsSettings.DnsServers != null)
                    {
                        if (parameters.DnsSettings.DnsServers is ILazyCollection == false || ((ILazyCollection)parameters.DnsSettings.DnsServers).IsInitialized)
                        {
                            XElement dnsServersSequenceElement = new XElement(XName.Get("DnsServers", "http://schemas.microsoft.com/windowsazure"));
                            foreach (DnsServer dnsServersItem in parameters.DnsSettings.DnsServers)
                            {
                                XElement dnsServerElement = new XElement(XName.Get("DnsServer", "http://schemas.microsoft.com/windowsazure"));
                                dnsServersSequenceElement.Add(dnsServerElement);
                                
                                if (dnsServersItem.Name != null)
                                {
                                    XElement nameElement7 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    nameElement7.Value = dnsServersItem.Name;
                                    dnsServerElement.Add(nameElement7);
                                }
                                
                                if (dnsServersItem.Address != null)
                                {
                                    XElement addressElement = new XElement(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                    addressElement.Value = dnsServersItem.Address;
                                    dnsServerElement.Add(addressElement);
                                }
                            }
                            dnsElement.Add(dnsServersSequenceElement);
                        }
                    }
                }
                
                if (parameters.ReservedIPName != null)
                {
                    XElement reservedIPNameElement = new XElement(XName.Get("ReservedIPName", "http://schemas.microsoft.com/windowsazure"));
                    reservedIPNameElement.Value = parameters.ReservedIPName;
                    deploymentElement.Add(reservedIPNameElement);
                }
                
                if (parameters.LoadBalancers != null)
                {
                    if (parameters.LoadBalancers is ILazyCollection == false || ((ILazyCollection)parameters.LoadBalancers).IsInitialized)
                    {
                        XElement loadBalancersSequenceElement = new XElement(XName.Get("LoadBalancers", "http://schemas.microsoft.com/windowsazure"));
                        foreach (LoadBalancer loadBalancersItem in parameters.LoadBalancers)
                        {
                            XElement loadBalancerElement = new XElement(XName.Get("LoadBalancer", "http://schemas.microsoft.com/windowsazure"));
                            loadBalancersSequenceElement.Add(loadBalancerElement);
                            
                            if (loadBalancersItem.Name != null)
                            {
                                XElement nameElement8 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement8.Value = loadBalancersItem.Name;
                                loadBalancerElement.Add(nameElement8);
                            }
                            
                            if (loadBalancersItem.FrontendIPConfiguration != null)
                            {
                                XElement frontendIpConfigurationElement = new XElement(XName.Get("FrontendIpConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                loadBalancerElement.Add(frontendIpConfigurationElement);
                                
                                if (loadBalancersItem.FrontendIPConfiguration.Type != null)
                                {
                                    XElement typeElement2 = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                    typeElement2.Value = loadBalancersItem.FrontendIPConfiguration.Type;
                                    frontendIpConfigurationElement.Add(typeElement2);
                                }
                                
                                if (loadBalancersItem.FrontendIPConfiguration.SubnetName != null)
                                {
                                    XElement subnetNameElement2 = new XElement(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                    subnetNameElement2.Value = loadBalancersItem.FrontendIPConfiguration.SubnetName;
                                    frontendIpConfigurationElement.Add(subnetNameElement2);
                                }
                                
                                if (loadBalancersItem.FrontendIPConfiguration.StaticVirtualNetworkIPAddress != null)
                                {
                                    XElement staticVirtualNetworkIPAddressElement3 = new XElement(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                    staticVirtualNetworkIPAddressElement3.Value = loadBalancersItem.FrontendIPConfiguration.StaticVirtualNetworkIPAddress;
                                    frontendIpConfigurationElement.Add(staticVirtualNetworkIPAddressElement3);
                                }
                            }
                        }
                        deploymentElement.Add(loadBalancersSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Deleting Role operation deletes the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob(s) for the virtual machine
        /// should also be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDeletingAsync(string serviceName, string deploymentName, string virtualMachineName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roles/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            List<string> queryParameters = new List<string>();
            if (deleteFromStorage == true)
            {
                queryParameters.Add("comp=media");
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Redeploying role operation redeploys the specified
        /// virtual machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to redeploy.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginRedeployingAsync(string serviceName, string deploymentName, string virtualMachineName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                TracingAdapter.Enter(invocationId, this, "BeginRedeployingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            url = url + "/Operations";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = "<RedeployRoleOperation xmlns=\"http://schemas.microsoft.com/windowsazure\"><OperationType>RedeployRoleOperation</OperationType></RedeployRoleOperation>";
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Restarting role operation restarts the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to restart.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginRestartingAsync(string serviceName, string deploymentName, string virtualMachineName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                TracingAdapter.Enter(invocationId, this, "BeginRestartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            url = url + "/Operations";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = "<RestartRoleOperation xmlns=\"http://schemas.microsoft.com/windowsazure\"><OperationType>RestartRoleOperation</OperationType></RestartRoleOperation>";
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Shutdown Role operation shuts down the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to shutdown.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the shutdown vm operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginShutdownAsync(string serviceName, string deploymentName, string virtualMachineName, VirtualMachineShutdownParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginShutdownAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            url = url + "/Operations";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement shutdownRoleOperationElement = new XElement(XName.Get("ShutdownRoleOperation", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(shutdownRoleOperationElement);
                
                XElement operationTypeElement = new XElement(XName.Get("OperationType", "http://schemas.microsoft.com/windowsazure"));
                operationTypeElement.Value = "ShutdownRoleOperation";
                shutdownRoleOperationElement.Add(operationTypeElement);
                
                XElement postShutdownActionElement = new XElement(XName.Get("PostShutdownAction", "http://schemas.microsoft.com/windowsazure"));
                postShutdownActionElement.Value = parameters.PostShutdownAction.ToString();
                shutdownRoleOperationElement.Add(postShutdownActionElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Shutting Down Roles operation stops the specified set of
        /// virtual machines.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469421.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to pass to the Begin Shutting Down Roles
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginShuttingDownRolesAsync(string serviceName, string deploymentName, VirtualMachineShutdownRolesParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginShuttingDownRolesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/Roles/Operations";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement shutdownRolesOperationElement = new XElement(XName.Get("ShutdownRolesOperation", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(shutdownRolesOperationElement);
                
                XElement operationTypeElement = new XElement(XName.Get("OperationType", "http://schemas.microsoft.com/windowsazure"));
                operationTypeElement.Value = "ShutdownRolesOperation";
                shutdownRolesOperationElement.Add(operationTypeElement);
                
                if (parameters.Roles != null)
                {
                    if (parameters.Roles is ILazyCollection == false || ((ILazyCollection)parameters.Roles).IsInitialized)
                    {
                        XElement rolesSequenceElement = new XElement(XName.Get("Roles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (string rolesItem in parameters.Roles)
                        {
                            XElement rolesItemElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            rolesItemElement.Value = rolesItem;
                            rolesSequenceElement.Add(rolesItemElement);
                        }
                        shutdownRolesOperationElement.Add(rolesSequenceElement);
                    }
                }
                
                if (parameters.PostShutdownAction != null)
                {
                    XElement postShutdownActionElement = new XElement(XName.Get("PostShutdownAction", "http://schemas.microsoft.com/windowsazure"));
                    postShutdownActionElement.Value = parameters.PostShutdownAction.ToString();
                    shutdownRolesOperationElement.Add(postShutdownActionElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Starting Role operation starts the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to start.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginStartingAsync(string serviceName, string deploymentName, string virtualMachineName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                TracingAdapter.Enter(invocationId, this, "BeginStartingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            url = url + "/Operations";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = "<StartRoleOperation xmlns=\"http://schemas.microsoft.com/windowsazure\"><OperationType>StartRoleOperation</OperationType></StartRoleOperation>";
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Starting Roles operation starts the specified set of
        /// virtual machines.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469419.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to pass to the Begin Starting Roles operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginStartingRolesAsync(string serviceName, string deploymentName, VirtualMachineStartRolesParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginStartingRolesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/Roles/Operations";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement startRolesOperationElement = new XElement(XName.Get("StartRolesOperation", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(startRolesOperationElement);
                
                XElement operationTypeElement = new XElement(XName.Get("OperationType", "http://schemas.microsoft.com/windowsazure"));
                operationTypeElement.Value = "StartRolesOperation";
                startRolesOperationElement.Add(operationTypeElement);
                
                if (parameters.Roles != null)
                {
                    if (parameters.Roles is ILazyCollection == false || ((ILazyCollection)parameters.Roles).IsInitialized)
                    {
                        XElement rolesSequenceElement = new XElement(XName.Get("Roles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (string rolesItem in parameters.Roles)
                        {
                            XElement rolesItemElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            rolesItemElement.Value = rolesItem;
                            rolesSequenceElement.Add(rolesItemElement);
                        }
                        startRolesOperationElement.Add(rolesSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Updating Role operation adds a virtual machine to an
        /// existing deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of your virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Updating Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUpdatingAsync(string serviceName, string deploymentName, string virtualMachineName, VirtualMachineUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ConfigurationSets != null)
            {
                foreach (ConfigurationSet configurationSetsParameterItem in parameters.ConfigurationSets)
                {
                    if (configurationSetsParameterItem.AdditionalUnattendContent != null)
                    {
                        if (configurationSetsParameterItem.AdditionalUnattendContent.UnattendPasses != null)
                        {
                            foreach (UnattendPassSettings unattendPassesParameterItem in configurationSetsParameterItem.AdditionalUnattendContent.UnattendPasses)
                            {
                                if (unattendPassesParameterItem.PassName == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.AdditionalUnattendContent.UnattendPasses.PassName");
                                }
                                if (unattendPassesParameterItem.UnattendComponents != null)
                                {
                                    foreach (UnattendComponent unattendComponentsParameterItem in unattendPassesParameterItem.UnattendComponents)
                                    {
                                        if (unattendComponentsParameterItem.ComponentName == null)
                                        {
                                            throw new ArgumentNullException("parameters.ConfigurationSets.AdditionalUnattendContent.UnattendPasses.UnattendComponents.ComponentName");
                                        }
                                        if (unattendComponentsParameterItem.UnattendComponentSettings != null)
                                        {
                                            foreach (ComponentSetting unattendComponentSettingsParameterItem in unattendComponentsParameterItem.UnattendComponentSettings)
                                            {
                                                if (unattendComponentSettingsParameterItem.SettingName == null)
                                                {
                                                    throw new ArgumentNullException("parameters.ConfigurationSets.AdditionalUnattendContent.UnattendPasses.UnattendComponents.UnattendComponentSettings.SettingName");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (configurationSetsParameterItem.DomainJoin != null)
                    {
                        if (configurationSetsParameterItem.DomainJoin.Credentials != null)
                        {
                            if (configurationSetsParameterItem.DomainJoin.Credentials.Password == null)
                            {
                                throw new ArgumentNullException("parameters.ConfigurationSets.DomainJoin.Credentials.Password");
                            }
                            if (configurationSetsParameterItem.DomainJoin.Credentials.UserName == null)
                            {
                                throw new ArgumentNullException("parameters.ConfigurationSets.DomainJoin.Credentials.UserName");
                            }
                        }
                    }
                    if (configurationSetsParameterItem.HostName != null && configurationSetsParameterItem.HostName.Length < 1)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.HostName");
                    }
                    if (configurationSetsParameterItem.HostName != null && configurationSetsParameterItem.HostName.Length > 64)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.HostName");
                    }
                    if (configurationSetsParameterItem.SshSettings != null)
                    {
                        if (configurationSetsParameterItem.SshSettings.KeyPairs != null)
                        {
                            foreach (SshSettingKeyPair keyPairsParameterItem in configurationSetsParameterItem.SshSettings.KeyPairs)
                            {
                                if (keyPairsParameterItem.Fingerprint == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.SshSettings.KeyPairs.Fingerprint");
                                }
                                if (keyPairsParameterItem.Path == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.SshSettings.KeyPairs.Path");
                                }
                            }
                        }
                        if (configurationSetsParameterItem.SshSettings.PublicKeys != null)
                        {
                            foreach (SshSettingPublicKey publicKeysParameterItem in configurationSetsParameterItem.SshSettings.PublicKeys)
                            {
                                if (publicKeysParameterItem.Fingerprint == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.SshSettings.PublicKeys.Fingerprint");
                                }
                                if (publicKeysParameterItem.Path == null)
                                {
                                    throw new ArgumentNullException("parameters.ConfigurationSets.SshSettings.PublicKeys.Path");
                                }
                            }
                        }
                    }
                    if (configurationSetsParameterItem.StoredCertificateSettings != null)
                    {
                        foreach (StoredCertificateSettings storedCertificateSettingsParameterItem in configurationSetsParameterItem.StoredCertificateSettings)
                        {
                            if (storedCertificateSettingsParameterItem.StoreName == null)
                            {
                                throw new ArgumentNullException("parameters.ConfigurationSets.StoredCertificateSettings.StoreName");
                            }
                            if (storedCertificateSettingsParameterItem.Thumbprint == null)
                            {
                                throw new ArgumentNullException("parameters.ConfigurationSets.StoredCertificateSettings.Thumbprint");
                            }
                        }
                    }
                    if (configurationSetsParameterItem.UserName != null && configurationSetsParameterItem.UserName.Length < 1)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.UserName");
                    }
                    if (configurationSetsParameterItem.UserName != null && configurationSetsParameterItem.UserName.Length > 32)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.UserName");
                    }
                    if (configurationSetsParameterItem.UserPassword != null && configurationSetsParameterItem.UserPassword.Length < 6)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.UserPassword");
                    }
                    if (configurationSetsParameterItem.UserPassword != null && configurationSetsParameterItem.UserPassword.Length > 72)
                    {
                        throw new ArgumentOutOfRangeException("parameters.ConfigurationSets.UserPassword");
                    }
                }
            }
            if (parameters.OSVirtualHardDisk == null)
            {
                throw new ArgumentNullException("parameters.OSVirtualHardDisk");
            }
            if (parameters.RoleName == null)
            {
                throw new ArgumentNullException("parameters.RoleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roles/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement persistentVMRoleElement = new XElement(XName.Get("PersistentVMRole", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(persistentVMRoleElement);
                
                XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                roleNameElement.Value = parameters.RoleName;
                persistentVMRoleElement.Add(roleNameElement);
                
                XElement roleTypeElement = new XElement(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                roleTypeElement.Value = "PersistentVMRole";
                persistentVMRoleElement.Add(roleTypeElement);
                
                if (parameters.ConfigurationSets != null)
                {
                    if (parameters.ConfigurationSets is ILazyCollection == false || ((ILazyCollection)parameters.ConfigurationSets).IsInitialized)
                    {
                        XElement configurationSetsSequenceElement = new XElement(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ConfigurationSet configurationSetsItem in parameters.ConfigurationSets)
                        {
                            XElement configurationSetElement = new XElement(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure"));
                            configurationSetsSequenceElement.Add(configurationSetElement);
                            
                            if (configurationSetsItem.ConfigurationSetType != null)
                            {
                                XElement configurationSetTypeElement = new XElement(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetTypeElement.Value = configurationSetsItem.ConfigurationSetType;
                                configurationSetElement.Add(configurationSetTypeElement);
                            }
                            
                            if (configurationSetsItem.InputEndpoints != null)
                            {
                                if (configurationSetsItem.InputEndpoints is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.InputEndpoints).IsInitialized)
                                {
                                    XElement inputEndpointsSequenceElement = new XElement(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (InputEndpoint inputEndpointsItem in configurationSetsItem.InputEndpoints)
                                    {
                                        XElement inputEndpointElement = new XElement(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure"));
                                        inputEndpointsSequenceElement.Add(inputEndpointElement);
                                        
                                        if (inputEndpointsItem.LoadBalancedEndpointSetName != null)
                                        {
                                            XElement loadBalancedEndpointSetNameElement = new XElement(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                            loadBalancedEndpointSetNameElement.Value = inputEndpointsItem.LoadBalancedEndpointSetName;
                                            inputEndpointElement.Add(loadBalancedEndpointSetNameElement);
                                        }
                                        
                                        if (inputEndpointsItem.LocalPort != null)
                                        {
                                            XElement localPortElement = new XElement(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            localPortElement.Value = inputEndpointsItem.LocalPort.ToString();
                                            inputEndpointElement.Add(localPortElement);
                                        }
                                        
                                        if (inputEndpointsItem.Name != null)
                                        {
                                            XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            nameElement.Value = inputEndpointsItem.Name;
                                            inputEndpointElement.Add(nameElement);
                                        }
                                        
                                        if (inputEndpointsItem.Port != null)
                                        {
                                            XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            portElement.Value = inputEndpointsItem.Port.ToString();
                                            inputEndpointElement.Add(portElement);
                                        }
                                        
                                        if (inputEndpointsItem.LoadBalancerProbe != null)
                                        {
                                            XElement loadBalancerProbeElement = new XElement(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                            inputEndpointElement.Add(loadBalancerProbeElement);
                                            
                                            if (inputEndpointsItem.LoadBalancerProbe.Path != null)
                                            {
                                                XElement pathElement = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                pathElement.Value = inputEndpointsItem.LoadBalancerProbe.Path;
                                                loadBalancerProbeElement.Add(pathElement);
                                            }
                                            
                                            XElement portElement2 = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            portElement2.Value = inputEndpointsItem.LoadBalancerProbe.Port.ToString();
                                            loadBalancerProbeElement.Add(portElement2);
                                            
                                            XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            protocolElement.Value = ComputeManagementClient.LoadBalancerProbeTransportProtocolToString(inputEndpointsItem.LoadBalancerProbe.Protocol);
                                            loadBalancerProbeElement.Add(protocolElement);
                                            
                                            if (inputEndpointsItem.LoadBalancerProbe.IntervalInSeconds != null)
                                            {
                                                XElement intervalInSecondsElement = new XElement(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                intervalInSecondsElement.Value = inputEndpointsItem.LoadBalancerProbe.IntervalInSeconds.ToString();
                                                loadBalancerProbeElement.Add(intervalInSecondsElement);
                                            }
                                            
                                            if (inputEndpointsItem.LoadBalancerProbe.TimeoutInSeconds != null)
                                            {
                                                XElement timeoutInSecondsElement = new XElement(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                timeoutInSecondsElement.Value = inputEndpointsItem.LoadBalancerProbe.TimeoutInSeconds.ToString();
                                                loadBalancerProbeElement.Add(timeoutInSecondsElement);
                                            }
                                        }
                                        
                                        if (inputEndpointsItem.Protocol != null)
                                        {
                                            XElement protocolElement2 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            protocolElement2.Value = inputEndpointsItem.Protocol;
                                            inputEndpointElement.Add(protocolElement2);
                                        }
                                        
                                        if (inputEndpointsItem.VirtualIPAddress != null)
                                        {
                                            XElement vipElement = new XElement(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                            vipElement.Value = inputEndpointsItem.VirtualIPAddress;
                                            inputEndpointElement.Add(vipElement);
                                        }
                                        
                                        if (inputEndpointsItem.EnableDirectServerReturn != null)
                                        {
                                            XElement enableDirectServerReturnElement = new XElement(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                            enableDirectServerReturnElement.Value = inputEndpointsItem.EnableDirectServerReturn.ToString().ToLower();
                                            inputEndpointElement.Add(enableDirectServerReturnElement);
                                        }
                                        
                                        if (inputEndpointsItem.LoadBalancerName != null)
                                        {
                                            XElement loadBalancerNameElement = new XElement(XName.Get("LoadBalancerName", "http://schemas.microsoft.com/windowsazure"));
                                            loadBalancerNameElement.Value = inputEndpointsItem.LoadBalancerName;
                                            inputEndpointElement.Add(loadBalancerNameElement);
                                        }
                                        
                                        if (inputEndpointsItem.EndpointAcl != null)
                                        {
                                            XElement endpointAclElement = new XElement(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                            inputEndpointElement.Add(endpointAclElement);
                                            
                                            if (inputEndpointsItem.EndpointAcl.Rules != null)
                                            {
                                                if (inputEndpointsItem.EndpointAcl.Rules is ILazyCollection == false || ((ILazyCollection)inputEndpointsItem.EndpointAcl.Rules).IsInitialized)
                                                {
                                                    XElement rulesSequenceElement = new XElement(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                    foreach (AccessControlListRule rulesItem in inputEndpointsItem.EndpointAcl.Rules)
                                                    {
                                                        XElement ruleElement = new XElement(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure"));
                                                        rulesSequenceElement.Add(ruleElement);
                                                        
                                                        if (rulesItem.Order != null)
                                                        {
                                                            XElement orderElement = new XElement(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                            orderElement.Value = rulesItem.Order.ToString();
                                                            ruleElement.Add(orderElement);
                                                        }
                                                        
                                                        if (rulesItem.Action != null)
                                                        {
                                                            XElement actionElement = new XElement(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                            actionElement.Value = rulesItem.Action;
                                                            ruleElement.Add(actionElement);
                                                        }
                                                        
                                                        if (rulesItem.RemoteSubnet != null)
                                                        {
                                                            XElement remoteSubnetElement = new XElement(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                            remoteSubnetElement.Value = rulesItem.RemoteSubnet;
                                                            ruleElement.Add(remoteSubnetElement);
                                                        }
                                                        
                                                        if (rulesItem.Description != null)
                                                        {
                                                            XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                            descriptionElement.Value = rulesItem.Description;
                                                            ruleElement.Add(descriptionElement);
                                                        }
                                                    }
                                                    endpointAclElement.Add(rulesSequenceElement);
                                                }
                                            }
                                        }
                                        
                                        if (inputEndpointsItem.IdleTimeoutInMinutes != null)
                                        {
                                            XElement idleTimeoutInMinutesElement = new XElement(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            idleTimeoutInMinutesElement.Value = inputEndpointsItem.IdleTimeoutInMinutes.ToString();
                                            inputEndpointElement.Add(idleTimeoutInMinutesElement);
                                        }
                                        
                                        if (inputEndpointsItem.LoadBalancerDistribution != null)
                                        {
                                            XElement loadBalancerDistributionElement = new XElement(XName.Get("LoadBalancerDistribution", "http://schemas.microsoft.com/windowsazure"));
                                            loadBalancerDistributionElement.Value = inputEndpointsItem.LoadBalancerDistribution;
                                            inputEndpointElement.Add(loadBalancerDistributionElement);
                                        }
                                        
                                        if (inputEndpointsItem.VirtualIPName != null)
                                        {
                                            XElement virtualIPNameElement = new XElement(XName.Get("VirtualIPName", "http://schemas.microsoft.com/windowsazure"));
                                            virtualIPNameElement.Value = inputEndpointsItem.VirtualIPName;
                                            inputEndpointElement.Add(virtualIPNameElement);
                                        }
                                    }
                                    configurationSetElement.Add(inputEndpointsSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.SubnetNames != null)
                            {
                                if (configurationSetsItem.SubnetNames is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.SubnetNames).IsInitialized)
                                {
                                    XElement subnetNamesSequenceElement = new XElement(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (string subnetNamesItem in configurationSetsItem.SubnetNames)
                                    {
                                        XElement subnetNamesItemElement = new XElement(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                        subnetNamesItemElement.Value = subnetNamesItem;
                                        subnetNamesSequenceElement.Add(subnetNamesItemElement);
                                    }
                                    configurationSetElement.Add(subnetNamesSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.StaticVirtualNetworkIPAddress != null)
                            {
                                XElement staticVirtualNetworkIPAddressElement = new XElement(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                staticVirtualNetworkIPAddressElement.Value = configurationSetsItem.StaticVirtualNetworkIPAddress;
                                configurationSetElement.Add(staticVirtualNetworkIPAddressElement);
                            }
                            
                            if (configurationSetsItem.PublicIPs != null)
                            {
                                if (configurationSetsItem.PublicIPs is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.PublicIPs).IsInitialized)
                                {
                                    XElement publicIPsSequenceElement = new XElement(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (ConfigurationSet.PublicIP publicIPsItem in configurationSetsItem.PublicIPs)
                                    {
                                        XElement publicIPElement = new XElement(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure"));
                                        publicIPsSequenceElement.Add(publicIPElement);
                                        
                                        if (publicIPsItem.Name != null)
                                        {
                                            XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            nameElement2.Value = publicIPsItem.Name;
                                            publicIPElement.Add(nameElement2);
                                        }
                                        
                                        if (publicIPsItem.IdleTimeoutInMinutes != null)
                                        {
                                            XElement idleTimeoutInMinutesElement2 = new XElement(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            idleTimeoutInMinutesElement2.Value = publicIPsItem.IdleTimeoutInMinutes.ToString();
                                            publicIPElement.Add(idleTimeoutInMinutesElement2);
                                        }
                                        
                                        if (publicIPsItem.DomainNameLabel != null)
                                        {
                                            XElement domainNameLabelElement = new XElement(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                            domainNameLabelElement.Value = publicIPsItem.DomainNameLabel;
                                            publicIPElement.Add(domainNameLabelElement);
                                        }
                                    }
                                    configurationSetElement.Add(publicIPsSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.NetworkInterfaces != null)
                            {
                                if (configurationSetsItem.NetworkInterfaces is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.NetworkInterfaces).IsInitialized)
                                {
                                    XElement networkInterfacesSequenceElement = new XElement(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (NetworkInterface networkInterfacesItem in configurationSetsItem.NetworkInterfaces)
                                    {
                                        XElement networkInterfaceElement = new XElement(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure"));
                                        networkInterfacesSequenceElement.Add(networkInterfaceElement);
                                        
                                        if (networkInterfacesItem.Name != null)
                                        {
                                            XElement nameElement3 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            nameElement3.Value = networkInterfacesItem.Name;
                                            networkInterfaceElement.Add(nameElement3);
                                        }
                                        
                                        if (networkInterfacesItem.IPConfigurations != null)
                                        {
                                            if (networkInterfacesItem.IPConfigurations is ILazyCollection == false || ((ILazyCollection)networkInterfacesItem.IPConfigurations).IsInitialized)
                                            {
                                                XElement iPConfigurationsSequenceElement = new XElement(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                                foreach (IPConfiguration iPConfigurationsItem in networkInterfacesItem.IPConfigurations)
                                                {
                                                    XElement iPConfigurationElement = new XElement(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                                    iPConfigurationsSequenceElement.Add(iPConfigurationElement);
                                                    
                                                    if (iPConfigurationsItem.SubnetName != null)
                                                    {
                                                        XElement subnetNameElement = new XElement(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                        subnetNameElement.Value = iPConfigurationsItem.SubnetName;
                                                        iPConfigurationElement.Add(subnetNameElement);
                                                    }
                                                    
                                                    if (iPConfigurationsItem.StaticVirtualNetworkIPAddress != null)
                                                    {
                                                        XElement staticVirtualNetworkIPAddressElement2 = new XElement(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                        staticVirtualNetworkIPAddressElement2.Value = iPConfigurationsItem.StaticVirtualNetworkIPAddress;
                                                        iPConfigurationElement.Add(staticVirtualNetworkIPAddressElement2);
                                                    }
                                                }
                                                networkInterfaceElement.Add(iPConfigurationsSequenceElement);
                                            }
                                        }
                                        
                                        if (networkInterfacesItem.NetworkSecurityGroup != null)
                                        {
                                            XElement networkSecurityGroupElement = new XElement(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                            networkSecurityGroupElement.Value = networkInterfacesItem.NetworkSecurityGroup;
                                            networkInterfaceElement.Add(networkSecurityGroupElement);
                                        }
                                        
                                        if (networkInterfacesItem.IPForwarding != null)
                                        {
                                            XElement iPForwardingElement = new XElement(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                            iPForwardingElement.Value = networkInterfacesItem.IPForwarding;
                                            networkInterfaceElement.Add(iPForwardingElement);
                                        }
                                    }
                                    configurationSetElement.Add(networkInterfacesSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.NetworkSecurityGroup != null)
                            {
                                XElement networkSecurityGroupElement2 = new XElement(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                networkSecurityGroupElement2.Value = configurationSetsItem.NetworkSecurityGroup;
                                configurationSetElement.Add(networkSecurityGroupElement2);
                            }
                            
                            if (configurationSetsItem.IPForwarding != null)
                            {
                                XElement iPForwardingElement2 = new XElement(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                iPForwardingElement2.Value = configurationSetsItem.IPForwarding;
                                configurationSetElement.Add(iPForwardingElement2);
                            }
                            
                            if (configurationSetsItem.ComputerName != null)
                            {
                                XElement computerNameElement = new XElement(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                computerNameElement.Value = configurationSetsItem.ComputerName;
                                configurationSetElement.Add(computerNameElement);
                            }
                            
                            if (configurationSetsItem.AdminPassword != null)
                            {
                                XElement adminPasswordElement = new XElement(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                adminPasswordElement.Value = configurationSetsItem.AdminPassword;
                                configurationSetElement.Add(adminPasswordElement);
                            }
                            
                            if (configurationSetsItem.ResetPasswordOnFirstLogon != null)
                            {
                                XElement resetPasswordOnFirstLogonElement = new XElement(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                resetPasswordOnFirstLogonElement.Value = configurationSetsItem.ResetPasswordOnFirstLogon.ToString().ToLower();
                                configurationSetElement.Add(resetPasswordOnFirstLogonElement);
                            }
                            
                            if (configurationSetsItem.EnableAutomaticUpdates != null)
                            {
                                XElement enableAutomaticUpdatesElement = new XElement(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                enableAutomaticUpdatesElement.Value = configurationSetsItem.EnableAutomaticUpdates.ToString().ToLower();
                                configurationSetElement.Add(enableAutomaticUpdatesElement);
                            }
                            
                            if (configurationSetsItem.TimeZone != null)
                            {
                                XElement timeZoneElement = new XElement(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                timeZoneElement.Value = configurationSetsItem.TimeZone;
                                configurationSetElement.Add(timeZoneElement);
                            }
                            
                            if (configurationSetsItem.DomainJoin != null)
                            {
                                XElement domainJoinElement = new XElement(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetElement.Add(domainJoinElement);
                                
                                if (configurationSetsItem.DomainJoin.Credentials != null)
                                {
                                    XElement credentialsElement = new XElement(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                    domainJoinElement.Add(credentialsElement);
                                    
                                    if (configurationSetsItem.DomainJoin.Credentials.Domain != null)
                                    {
                                        XElement domainElement = new XElement(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                        domainElement.Value = configurationSetsItem.DomainJoin.Credentials.Domain;
                                        credentialsElement.Add(domainElement);
                                    }
                                    
                                    XElement usernameElement = new XElement(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                    usernameElement.Value = configurationSetsItem.DomainJoin.Credentials.UserName;
                                    credentialsElement.Add(usernameElement);
                                    
                                    XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                    passwordElement.Value = configurationSetsItem.DomainJoin.Credentials.Password;
                                    credentialsElement.Add(passwordElement);
                                }
                                
                                if (configurationSetsItem.DomainJoin.DomainToJoin != null)
                                {
                                    XElement joinDomainElement = new XElement(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                    joinDomainElement.Value = configurationSetsItem.DomainJoin.DomainToJoin;
                                    domainJoinElement.Add(joinDomainElement);
                                }
                                
                                if (configurationSetsItem.DomainJoin.LdapMachineObjectOU != null)
                                {
                                    XElement machineObjectOUElement = new XElement(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                    machineObjectOUElement.Value = configurationSetsItem.DomainJoin.LdapMachineObjectOU;
                                    domainJoinElement.Add(machineObjectOUElement);
                                }
                                
                                if (configurationSetsItem.DomainJoin.Provisioning != null)
                                {
                                    XElement provisioningElement = new XElement(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                    domainJoinElement.Add(provisioningElement);
                                    
                                    if (configurationSetsItem.DomainJoin.Provisioning.AccountData != null)
                                    {
                                        XElement accountDataElement = new XElement(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                        accountDataElement.Value = configurationSetsItem.DomainJoin.Provisioning.AccountData;
                                        provisioningElement.Add(accountDataElement);
                                    }
                                }
                            }
                            
                            if (configurationSetsItem.StoredCertificateSettings != null)
                            {
                                if (configurationSetsItem.StoredCertificateSettings is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.StoredCertificateSettings).IsInitialized)
                                {
                                    XElement storedCertificateSettingsSequenceElement = new XElement(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (StoredCertificateSettings storedCertificateSettingsItem in configurationSetsItem.StoredCertificateSettings)
                                    {
                                        XElement certificateSettingElement = new XElement(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure"));
                                        storedCertificateSettingsSequenceElement.Add(certificateSettingElement);
                                        
                                        XElement storeLocationElement = new XElement(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                        storeLocationElement.Value = "LocalMachine";
                                        certificateSettingElement.Add(storeLocationElement);
                                        
                                        XElement storeNameElement = new XElement(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                        storeNameElement.Value = storedCertificateSettingsItem.StoreName;
                                        certificateSettingElement.Add(storeNameElement);
                                        
                                        XElement thumbprintElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                        thumbprintElement.Value = storedCertificateSettingsItem.Thumbprint;
                                        certificateSettingElement.Add(thumbprintElement);
                                    }
                                    configurationSetElement.Add(storedCertificateSettingsSequenceElement);
                                }
                            }
                            
                            if (configurationSetsItem.WindowsRemoteManagement != null)
                            {
                                XElement winRMElement = new XElement(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetElement.Add(winRMElement);
                                
                                if (configurationSetsItem.WindowsRemoteManagement.Listeners != null)
                                {
                                    if (configurationSetsItem.WindowsRemoteManagement.Listeners is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.WindowsRemoteManagement.Listeners).IsInitialized)
                                    {
                                        XElement listenersSequenceElement = new XElement(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                        foreach (WindowsRemoteManagementListener listenersItem in configurationSetsItem.WindowsRemoteManagement.Listeners)
                                        {
                                            XElement listenerElement = new XElement(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure"));
                                            listenersSequenceElement.Add(listenerElement);
                                            
                                            if (listenersItem.CertificateThumbprint != null)
                                            {
                                                XElement certificateThumbprintElement = new XElement(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                certificateThumbprintElement.Value = listenersItem.CertificateThumbprint;
                                                listenerElement.Add(certificateThumbprintElement);
                                            }
                                            
                                            XElement protocolElement3 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            protocolElement3.Value = listenersItem.ListenerType.ToString();
                                            listenerElement.Add(protocolElement3);
                                        }
                                        winRMElement.Add(listenersSequenceElement);
                                    }
                                }
                            }
                            
                            if (configurationSetsItem.AdminUserName != null)
                            {
                                XElement adminUsernameElement = new XElement(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                adminUsernameElement.Value = configurationSetsItem.AdminUserName;
                                configurationSetElement.Add(adminUsernameElement);
                            }
                            
                            if (configurationSetsItem.AdditionalUnattendContent != null)
                            {
                                XElement additionalUnattendContentElement = new XElement(XName.Get("AdditionalUnattendContent", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetElement.Add(additionalUnattendContentElement);
                                
                                if (configurationSetsItem.AdditionalUnattendContent.UnattendPasses != null)
                                {
                                    if (configurationSetsItem.AdditionalUnattendContent.UnattendPasses is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.AdditionalUnattendContent.UnattendPasses).IsInitialized)
                                    {
                                        XElement passesSequenceElement = new XElement(XName.Get("Passes", "http://schemas.microsoft.com/windowsazure"));
                                        foreach (UnattendPassSettings passesItem in configurationSetsItem.AdditionalUnattendContent.UnattendPasses)
                                        {
                                            XElement unattendPassElement = new XElement(XName.Get("UnattendPass", "http://schemas.microsoft.com/windowsazure"));
                                            passesSequenceElement.Add(unattendPassElement);
                                            
                                            XElement passNameElement = new XElement(XName.Get("PassName", "http://schemas.microsoft.com/windowsazure"));
                                            passNameElement.Value = passesItem.PassName;
                                            unattendPassElement.Add(passNameElement);
                                            
                                            if (passesItem.UnattendComponents != null)
                                            {
                                                if (passesItem.UnattendComponents is ILazyCollection == false || ((ILazyCollection)passesItem.UnattendComponents).IsInitialized)
                                                {
                                                    XElement componentsSequenceElement = new XElement(XName.Get("Components", "http://schemas.microsoft.com/windowsazure"));
                                                    foreach (UnattendComponent componentsItem in passesItem.UnattendComponents)
                                                    {
                                                        XElement unattendComponentElement = new XElement(XName.Get("UnattendComponent", "http://schemas.microsoft.com/windowsazure"));
                                                        componentsSequenceElement.Add(unattendComponentElement);
                                                        
                                                        XElement componentNameElement = new XElement(XName.Get("ComponentName", "http://schemas.microsoft.com/windowsazure"));
                                                        componentNameElement.Value = componentsItem.ComponentName;
                                                        unattendComponentElement.Add(componentNameElement);
                                                        
                                                        if (componentsItem.UnattendComponentSettings != null)
                                                        {
                                                            if (componentsItem.UnattendComponentSettings is ILazyCollection == false || ((ILazyCollection)componentsItem.UnattendComponentSettings).IsInitialized)
                                                            {
                                                                XElement componentSettingsSequenceElement = new XElement(XName.Get("ComponentSettings", "http://schemas.microsoft.com/windowsazure"));
                                                                foreach (ComponentSetting componentSettingsItem in componentsItem.UnattendComponentSettings)
                                                                {
                                                                    XElement componentSettingElement = new XElement(XName.Get("ComponentSetting", "http://schemas.microsoft.com/windowsazure"));
                                                                    componentSettingsSequenceElement.Add(componentSettingElement);
                                                                    
                                                                    XElement settingNameElement = new XElement(XName.Get("SettingName", "http://schemas.microsoft.com/windowsazure"));
                                                                    settingNameElement.Value = componentSettingsItem.SettingName;
                                                                    componentSettingElement.Add(settingNameElement);
                                                                    
                                                                    if (componentSettingsItem.Content != null)
                                                                    {
                                                                        XElement contentElement = new XElement(XName.Get("Content", "http://schemas.microsoft.com/windowsazure"));
                                                                        contentElement.Value = TypeConversion.ToBase64String(componentSettingsItem.Content);
                                                                        componentSettingElement.Add(contentElement);
                                                                    }
                                                                }
                                                                unattendComponentElement.Add(componentSettingsSequenceElement);
                                                            }
                                                        }
                                                    }
                                                    unattendPassElement.Add(componentsSequenceElement);
                                                }
                                            }
                                        }
                                        additionalUnattendContentElement.Add(passesSequenceElement);
                                    }
                                }
                            }
                            
                            if (configurationSetsItem.HostName != null)
                            {
                                XElement hostNameElement = new XElement(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                hostNameElement.Value = configurationSetsItem.HostName;
                                configurationSetElement.Add(hostNameElement);
                            }
                            
                            if (configurationSetsItem.UserName != null)
                            {
                                XElement userNameElement = new XElement(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                userNameElement.Value = configurationSetsItem.UserName;
                                configurationSetElement.Add(userNameElement);
                            }
                            
                            if (configurationSetsItem.UserPassword != null)
                            {
                                XElement userPasswordElement = new XElement(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                userPasswordElement.Value = configurationSetsItem.UserPassword;
                                configurationSetElement.Add(userPasswordElement);
                            }
                            
                            if (configurationSetsItem.DisableSshPasswordAuthentication != null)
                            {
                                XElement disableSshPasswordAuthenticationElement = new XElement(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                disableSshPasswordAuthenticationElement.Value = configurationSetsItem.DisableSshPasswordAuthentication.ToString().ToLower();
                                configurationSetElement.Add(disableSshPasswordAuthenticationElement);
                            }
                            
                            if (configurationSetsItem.SshSettings != null)
                            {
                                XElement sSHElement = new XElement(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                configurationSetElement.Add(sSHElement);
                                
                                if (configurationSetsItem.SshSettings.PublicKeys != null)
                                {
                                    if (configurationSetsItem.SshSettings.PublicKeys is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.SshSettings.PublicKeys).IsInitialized)
                                    {
                                        XElement publicKeysSequenceElement = new XElement(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                        foreach (SshSettingPublicKey publicKeysItem in configurationSetsItem.SshSettings.PublicKeys)
                                        {
                                            XElement publicKeyElement = new XElement(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure"));
                                            publicKeysSequenceElement.Add(publicKeyElement);
                                            
                                            XElement fingerprintElement = new XElement(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                            fingerprintElement.Value = publicKeysItem.Fingerprint;
                                            publicKeyElement.Add(fingerprintElement);
                                            
                                            XElement pathElement2 = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                            pathElement2.Value = publicKeysItem.Path;
                                            publicKeyElement.Add(pathElement2);
                                        }
                                        sSHElement.Add(publicKeysSequenceElement);
                                    }
                                }
                                
                                if (configurationSetsItem.SshSettings.KeyPairs != null)
                                {
                                    if (configurationSetsItem.SshSettings.KeyPairs is ILazyCollection == false || ((ILazyCollection)configurationSetsItem.SshSettings.KeyPairs).IsInitialized)
                                    {
                                        XElement keyPairsSequenceElement = new XElement(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                        foreach (SshSettingKeyPair keyPairsItem in configurationSetsItem.SshSettings.KeyPairs)
                                        {
                                            XElement keyPairElement = new XElement(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure"));
                                            keyPairsSequenceElement.Add(keyPairElement);
                                            
                                            XElement fingerprintElement2 = new XElement(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                            fingerprintElement2.Value = keyPairsItem.Fingerprint;
                                            keyPairElement.Add(fingerprintElement2);
                                            
                                            XElement pathElement3 = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                            pathElement3.Value = keyPairsItem.Path;
                                            keyPairElement.Add(pathElement3);
                                        }
                                        sSHElement.Add(keyPairsSequenceElement);
                                    }
                                }
                            }
                            
                            if (configurationSetsItem.CustomData != null)
                            {
                                XElement customDataElement = new XElement(XName.Get("CustomData", "http://schemas.microsoft.com/windowsazure"));
                                customDataElement.Value = configurationSetsItem.CustomData;
                                configurationSetElement.Add(customDataElement);
                            }
                        }
                        persistentVMRoleElement.Add(configurationSetsSequenceElement);
                    }
                }
                
                if (parameters.ResourceExtensionReferences != null)
                {
                    if (parameters.ResourceExtensionReferences is ILazyCollection == false || ((ILazyCollection)parameters.ResourceExtensionReferences).IsInitialized)
                    {
                        XElement resourceExtensionReferencesSequenceElement = new XElement(XName.Get("ResourceExtensionReferences", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ResourceExtensionReference resourceExtensionReferencesItem in parameters.ResourceExtensionReferences)
                        {
                            XElement resourceExtensionReferenceElement = new XElement(XName.Get("ResourceExtensionReference", "http://schemas.microsoft.com/windowsazure"));
                            resourceExtensionReferencesSequenceElement.Add(resourceExtensionReferenceElement);
                            
                            if (resourceExtensionReferencesItem.ReferenceName != null)
                            {
                                XElement referenceNameElement = new XElement(XName.Get("ReferenceName", "http://schemas.microsoft.com/windowsazure"));
                                referenceNameElement.Value = resourceExtensionReferencesItem.ReferenceName;
                                resourceExtensionReferenceElement.Add(referenceNameElement);
                            }
                            
                            if (resourceExtensionReferencesItem.Publisher != null)
                            {
                                XElement publisherElement = new XElement(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                                publisherElement.Value = resourceExtensionReferencesItem.Publisher;
                                resourceExtensionReferenceElement.Add(publisherElement);
                            }
                            
                            if (resourceExtensionReferencesItem.Name != null)
                            {
                                XElement nameElement4 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement4.Value = resourceExtensionReferencesItem.Name;
                                resourceExtensionReferenceElement.Add(nameElement4);
                            }
                            
                            if (resourceExtensionReferencesItem.Version != null)
                            {
                                XElement versionElement = new XElement(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                versionElement.Value = resourceExtensionReferencesItem.Version;
                                resourceExtensionReferenceElement.Add(versionElement);
                            }
                            
                            if (resourceExtensionReferencesItem.ResourceExtensionParameterValues != null)
                            {
                                if (resourceExtensionReferencesItem.ResourceExtensionParameterValues is ILazyCollection == false || ((ILazyCollection)resourceExtensionReferencesItem.ResourceExtensionParameterValues).IsInitialized)
                                {
                                    XElement resourceExtensionParameterValuesSequenceElement = new XElement(XName.Get("ResourceExtensionParameterValues", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (ResourceExtensionParameterValue resourceExtensionParameterValuesItem in resourceExtensionReferencesItem.ResourceExtensionParameterValues)
                                    {
                                        XElement resourceExtensionParameterValueElement = new XElement(XName.Get("ResourceExtensionParameterValue", "http://schemas.microsoft.com/windowsazure"));
                                        resourceExtensionParameterValuesSequenceElement.Add(resourceExtensionParameterValueElement);
                                        
                                        if (resourceExtensionParameterValuesItem.Key != null)
                                        {
                                            XElement keyElement = new XElement(XName.Get("Key", "http://schemas.microsoft.com/windowsazure"));
                                            keyElement.Value = resourceExtensionParameterValuesItem.Key;
                                            resourceExtensionParameterValueElement.Add(keyElement);
                                        }
                                        
                                        if (resourceExtensionParameterValuesItem.Value != null)
                                        {
                                            XElement valueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                                            valueElement.Value = TypeConversion.ToBase64String(resourceExtensionParameterValuesItem.Value);
                                            resourceExtensionParameterValueElement.Add(valueElement);
                                        }
                                        
                                        if (resourceExtensionParameterValuesItem.Type != null)
                                        {
                                            XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                            typeElement.Value = resourceExtensionParameterValuesItem.Type;
                                            resourceExtensionParameterValueElement.Add(typeElement);
                                        }
                                    }
                                    resourceExtensionReferenceElement.Add(resourceExtensionParameterValuesSequenceElement);
                                }
                            }
                            
                            if (resourceExtensionReferencesItem.State != null)
                            {
                                XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                stateElement.Value = resourceExtensionReferencesItem.State;
                                resourceExtensionReferenceElement.Add(stateElement);
                            }
                            
                            if (resourceExtensionReferencesItem.ForceUpdate != null)
                            {
                                XElement forceUpdateElement = new XElement(XName.Get("ForceUpdate", "http://schemas.microsoft.com/windowsazure"));
                                forceUpdateElement.Value = resourceExtensionReferencesItem.ForceUpdate.ToString().ToLower();
                                resourceExtensionReferenceElement.Add(forceUpdateElement);
                            }
                        }
                        persistentVMRoleElement.Add(resourceExtensionReferencesSequenceElement);
                    }
                }
                
                if (parameters.AvailabilitySetName != null)
                {
                    XElement availabilitySetNameElement = new XElement(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                    availabilitySetNameElement.Value = parameters.AvailabilitySetName;
                    persistentVMRoleElement.Add(availabilitySetNameElement);
                }
                
                if (parameters.DataVirtualHardDisks != null)
                {
                    if (parameters.DataVirtualHardDisks is ILazyCollection == false || ((ILazyCollection)parameters.DataVirtualHardDisks).IsInitialized)
                    {
                        XElement dataVirtualHardDisksSequenceElement = new XElement(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                        foreach (DataVirtualHardDisk dataVirtualHardDisksItem in parameters.DataVirtualHardDisks)
                        {
                            XElement dataVirtualHardDiskElement = new XElement(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                            dataVirtualHardDisksSequenceElement.Add(dataVirtualHardDiskElement);
                            
                            if (dataVirtualHardDisksItem.HostCaching != null)
                            {
                                XElement hostCachingElement = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                hostCachingElement.Value = dataVirtualHardDisksItem.HostCaching;
                                dataVirtualHardDiskElement.Add(hostCachingElement);
                            }
                            
                            if (dataVirtualHardDisksItem.Label != null)
                            {
                                XElement diskLabelElement = new XElement(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                diskLabelElement.Value = dataVirtualHardDisksItem.Label;
                                dataVirtualHardDiskElement.Add(diskLabelElement);
                            }
                            
                            if (dataVirtualHardDisksItem.Name != null)
                            {
                                XElement diskNameElement = new XElement(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                diskNameElement.Value = dataVirtualHardDisksItem.Name;
                                dataVirtualHardDiskElement.Add(diskNameElement);
                            }
                            
                            if (dataVirtualHardDisksItem.LogicalUnitNumber != null)
                            {
                                XElement lunElement = new XElement(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                lunElement.Value = dataVirtualHardDisksItem.LogicalUnitNumber.ToString();
                                dataVirtualHardDiskElement.Add(lunElement);
                            }
                            
                            if (dataVirtualHardDisksItem.LogicalDiskSizeInGB != null)
                            {
                                XElement logicalDiskSizeInGBElement = new XElement(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                logicalDiskSizeInGBElement.Value = dataVirtualHardDisksItem.LogicalDiskSizeInGB.ToString();
                                dataVirtualHardDiskElement.Add(logicalDiskSizeInGBElement);
                            }
                            
                            if (dataVirtualHardDisksItem.MediaLink != null)
                            {
                                XElement mediaLinkElement = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                mediaLinkElement.Value = dataVirtualHardDisksItem.MediaLink.AbsoluteUri;
                                dataVirtualHardDiskElement.Add(mediaLinkElement);
                            }
                            
                            if (dataVirtualHardDisksItem.SourceMediaLink != null)
                            {
                                XElement sourceMediaLinkElement = new XElement(XName.Get("SourceMediaLink", "http://schemas.microsoft.com/windowsazure"));
                                sourceMediaLinkElement.Value = dataVirtualHardDisksItem.SourceMediaLink.AbsoluteUri;
                                dataVirtualHardDiskElement.Add(sourceMediaLinkElement);
                            }
                            
                            if (dataVirtualHardDisksItem.IOType != null)
                            {
                                XElement iOTypeElement = new XElement(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                iOTypeElement.Value = dataVirtualHardDisksItem.IOType;
                                dataVirtualHardDiskElement.Add(iOTypeElement);
                            }
                        }
                        persistentVMRoleElement.Add(dataVirtualHardDisksSequenceElement);
                    }
                }
                
                XElement oSVirtualHardDiskElement = new XElement(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                persistentVMRoleElement.Add(oSVirtualHardDiskElement);
                
                if (parameters.OSVirtualHardDisk.HostCaching != null)
                {
                    XElement hostCachingElement2 = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                    hostCachingElement2.Value = parameters.OSVirtualHardDisk.HostCaching;
                    oSVirtualHardDiskElement.Add(hostCachingElement2);
                }
                
                if (parameters.OSVirtualHardDisk.Label != null)
                {
                    XElement diskLabelElement2 = new XElement(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                    diskLabelElement2.Value = parameters.OSVirtualHardDisk.Label;
                    oSVirtualHardDiskElement.Add(diskLabelElement2);
                }
                
                if (parameters.OSVirtualHardDisk.Name != null)
                {
                    XElement diskNameElement2 = new XElement(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                    diskNameElement2.Value = parameters.OSVirtualHardDisk.Name;
                    oSVirtualHardDiskElement.Add(diskNameElement2);
                }
                
                if (parameters.OSVirtualHardDisk.MediaLink != null)
                {
                    XElement mediaLinkElement2 = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                    mediaLinkElement2.Value = parameters.OSVirtualHardDisk.MediaLink.AbsoluteUri;
                    oSVirtualHardDiskElement.Add(mediaLinkElement2);
                }
                
                if (parameters.OSVirtualHardDisk.SourceImageName != null)
                {
                    XElement sourceImageNameElement = new XElement(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                    sourceImageNameElement.Value = parameters.OSVirtualHardDisk.SourceImageName;
                    oSVirtualHardDiskElement.Add(sourceImageNameElement);
                }
                
                if (parameters.OSVirtualHardDisk.OperatingSystem != null)
                {
                    XElement osElement = new XElement(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                    osElement.Value = parameters.OSVirtualHardDisk.OperatingSystem;
                    oSVirtualHardDiskElement.Add(osElement);
                }
                
                if (parameters.OSVirtualHardDisk.RemoteSourceImageLink != null)
                {
                    XElement remoteSourceImageLinkElement = new XElement(XName.Get("RemoteSourceImageLink", "http://schemas.microsoft.com/windowsazure"));
                    remoteSourceImageLinkElement.Value = parameters.OSVirtualHardDisk.RemoteSourceImageLink.AbsoluteUri;
                    oSVirtualHardDiskElement.Add(remoteSourceImageLinkElement);
                }
                
                if (parameters.OSVirtualHardDisk.IOType != null)
                {
                    XElement iOTypeElement2 = new XElement(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                    iOTypeElement2.Value = parameters.OSVirtualHardDisk.IOType;
                    oSVirtualHardDiskElement.Add(iOTypeElement2);
                }
                
                if (parameters.OSVirtualHardDisk.ResizedSizeInGB != null)
                {
                    XElement resizedSizeInGBElement = new XElement(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                    resizedSizeInGBElement.Value = parameters.OSVirtualHardDisk.ResizedSizeInGB.ToString();
                    oSVirtualHardDiskElement.Add(resizedSizeInGBElement);
                }
                
                if (parameters.RoleSize != null)
                {
                    XElement roleSizeElement = new XElement(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                    roleSizeElement.Value = parameters.RoleSize;
                    persistentVMRoleElement.Add(roleSizeElement);
                }
                
                if (parameters.ProvisionGuestAgent != null)
                {
                    XElement provisionGuestAgentElement = new XElement(XName.Get("ProvisionGuestAgent", "http://schemas.microsoft.com/windowsazure"));
                    provisionGuestAgentElement.Value = parameters.ProvisionGuestAgent.ToString().ToLower();
                    persistentVMRoleElement.Add(provisionGuestAgentElement);
                }
                
                if (parameters.DebugSettings != null)
                {
                    XElement debugSettingsElement = new XElement(XName.Get("DebugSettings", "http://schemas.microsoft.com/windowsazure"));
                    persistentVMRoleElement.Add(debugSettingsElement);
                    
                    XElement bootDiagnosticsEnabledElement = new XElement(XName.Get("BootDiagnosticsEnabled", "http://schemas.microsoft.com/windowsazure"));
                    bootDiagnosticsEnabledElement.Value = parameters.DebugSettings.BootDiagnosticsEnabled.ToString().ToLower();
                    debugSettingsElement.Add(bootDiagnosticsEnabledElement);
                    
                    if (parameters.DebugSettings.ConsoleScreenshotBlobUri != null)
                    {
                        XElement consoleScreenshotBlobUriElement = new XElement(XName.Get("ConsoleScreenshotBlobUri", "http://schemas.microsoft.com/windowsazure"));
                        consoleScreenshotBlobUriElement.Value = parameters.DebugSettings.ConsoleScreenshotBlobUri.AbsoluteUri;
                        debugSettingsElement.Add(consoleScreenshotBlobUriElement);
                    }
                    
                    if (parameters.DebugSettings.SerialOutputBlobUri != null)
                    {
                        XElement serialOutputBlobUriElement = new XElement(XName.Get("SerialOutputBlobUri", "http://schemas.microsoft.com/windowsazure"));
                        serialOutputBlobUriElement.Value = parameters.DebugSettings.SerialOutputBlobUri.AbsoluteUri;
                        debugSettingsElement.Add(serialOutputBlobUriElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Updating Load Balanced Endpoint Set operation changes the
        /// specified load-balanced InputEndpoints on all the roles of an
        /// Infrastructure as a Service deployment. Non-load-balanced
        /// endpoints must be changed using UpdateRole.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn469417.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Updating Load Balanced
        /// Endpoint Set operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUpdatingLoadBalancedEndpointSetAsync(string serviceName, string deploymentName, VirtualMachineUpdateLoadBalancedSetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.LoadBalancedEndpoints != null)
            {
                foreach (VirtualMachineUpdateLoadBalancedSetParameters.InputEndpoint loadBalancedEndpointsParameterItem in parameters.LoadBalancedEndpoints)
                {
                    if (loadBalancedEndpointsParameterItem.LoadBalancedEndpointSetName == null)
                    {
                        throw new ArgumentNullException("parameters.LoadBalancedEndpoints.LoadBalancedEndpointSetName");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingLoadBalancedEndpointSetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("comp=UpdateLbSet");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement loadBalancedEndpointListElement = new XElement(XName.Get("LoadBalancedEndpointList", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(loadBalancedEndpointListElement);
                
                if (parameters.LoadBalancedEndpoints != null)
                {
                    if (parameters.LoadBalancedEndpoints is ILazyCollection == false || ((ILazyCollection)parameters.LoadBalancedEndpoints).IsInitialized)
                    {
                        foreach (VirtualMachineUpdateLoadBalancedSetParameters.InputEndpoint loadBalancedEndpointsItem in parameters.LoadBalancedEndpoints)
                        {
                            XElement inputEndpointElement = new XElement(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure"));
                            loadBalancedEndpointListElement.Add(inputEndpointElement);
                            
                            XElement loadBalancedEndpointSetNameElement = new XElement(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                            loadBalancedEndpointSetNameElement.Value = loadBalancedEndpointsItem.LoadBalancedEndpointSetName;
                            inputEndpointElement.Add(loadBalancedEndpointSetNameElement);
                            
                            if (loadBalancedEndpointsItem.LocalPort != null)
                            {
                                XElement localPortElement = new XElement(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                localPortElement.Value = loadBalancedEndpointsItem.LocalPort.ToString();
                                inputEndpointElement.Add(localPortElement);
                            }
                            
                            if (loadBalancedEndpointsItem.Name != null)
                            {
                                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement.Value = loadBalancedEndpointsItem.Name;
                                inputEndpointElement.Add(nameElement);
                            }
                            
                            if (loadBalancedEndpointsItem.Port != null)
                            {
                                XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                portElement.Value = loadBalancedEndpointsItem.Port.ToString();
                                inputEndpointElement.Add(portElement);
                            }
                            
                            if (loadBalancedEndpointsItem.LoadBalancerProbe != null)
                            {
                                XElement loadBalancerProbeElement = new XElement(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                inputEndpointElement.Add(loadBalancerProbeElement);
                                
                                if (loadBalancedEndpointsItem.LoadBalancerProbe.Path != null)
                                {
                                    XElement pathElement = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                    pathElement.Value = loadBalancedEndpointsItem.LoadBalancerProbe.Path;
                                    loadBalancerProbeElement.Add(pathElement);
                                }
                                
                                XElement portElement2 = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                portElement2.Value = loadBalancedEndpointsItem.LoadBalancerProbe.Port.ToString();
                                loadBalancerProbeElement.Add(portElement2);
                                
                                XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                protocolElement.Value = ComputeManagementClient.LoadBalancerProbeTransportProtocolToString(loadBalancedEndpointsItem.LoadBalancerProbe.Protocol);
                                loadBalancerProbeElement.Add(protocolElement);
                                
                                if (loadBalancedEndpointsItem.LoadBalancerProbe.IntervalInSeconds != null)
                                {
                                    XElement intervalInSecondsElement = new XElement(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                    intervalInSecondsElement.Value = loadBalancedEndpointsItem.LoadBalancerProbe.IntervalInSeconds.ToString();
                                    loadBalancerProbeElement.Add(intervalInSecondsElement);
                                }
                                
                                if (loadBalancedEndpointsItem.LoadBalancerProbe.TimeoutInSeconds != null)
                                {
                                    XElement timeoutInSecondsElement = new XElement(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                    timeoutInSecondsElement.Value = loadBalancedEndpointsItem.LoadBalancerProbe.TimeoutInSeconds.ToString();
                                    loadBalancerProbeElement.Add(timeoutInSecondsElement);
                                }
                            }
                            
                            if (loadBalancedEndpointsItem.Protocol != null)
                            {
                                XElement protocolElement2 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                protocolElement2.Value = loadBalancedEndpointsItem.Protocol;
                                inputEndpointElement.Add(protocolElement2);
                            }
                            
                            if (loadBalancedEndpointsItem.VirtualIPAddress != null)
                            {
                                XElement vipElement = new XElement(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                vipElement.Value = loadBalancedEndpointsItem.VirtualIPAddress;
                                inputEndpointElement.Add(vipElement);
                            }
                            
                            if (loadBalancedEndpointsItem.EnableDirectServerReturn != null)
                            {
                                XElement enableDirectServerReturnElement = new XElement(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                enableDirectServerReturnElement.Value = loadBalancedEndpointsItem.EnableDirectServerReturn.ToString().ToLower();
                                inputEndpointElement.Add(enableDirectServerReturnElement);
                            }
                            
                            XElement endpointAclElement = new XElement(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                            inputEndpointElement.Add(endpointAclElement);
                            
                            if (loadBalancedEndpointsItem.Rules != null)
                            {
                                if (loadBalancedEndpointsItem.Rules is ILazyCollection == false || ((ILazyCollection)loadBalancedEndpointsItem.Rules).IsInitialized)
                                {
                                    XElement rulesSequenceElement = new XElement(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (AccessControlListRule rulesItem in loadBalancedEndpointsItem.Rules)
                                    {
                                        XElement ruleElement = new XElement(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure"));
                                        rulesSequenceElement.Add(ruleElement);
                                        
                                        if (rulesItem.Order != null)
                                        {
                                            XElement orderElement = new XElement(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                            orderElement.Value = rulesItem.Order.ToString();
                                            ruleElement.Add(orderElement);
                                        }
                                        
                                        if (rulesItem.Action != null)
                                        {
                                            XElement actionElement = new XElement(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                            actionElement.Value = rulesItem.Action;
                                            ruleElement.Add(actionElement);
                                        }
                                        
                                        if (rulesItem.RemoteSubnet != null)
                                        {
                                            XElement remoteSubnetElement = new XElement(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                            remoteSubnetElement.Value = rulesItem.RemoteSubnet;
                                            ruleElement.Add(remoteSubnetElement);
                                        }
                                        
                                        if (rulesItem.Description != null)
                                        {
                                            XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                            descriptionElement.Value = rulesItem.Description;
                                            ruleElement.Add(descriptionElement);
                                        }
                                    }
                                    endpointAclElement.Add(rulesSequenceElement);
                                }
                            }
                            
                            if (loadBalancedEndpointsItem.LoadBalancerName != null)
                            {
                                XElement loadBalancerNameElement = new XElement(XName.Get("LoadBalancerName", "http://schemas.microsoft.com/windowsazure"));
                                loadBalancerNameElement.Value = loadBalancedEndpointsItem.LoadBalancerName;
                                inputEndpointElement.Add(loadBalancerNameElement);
                            }
                            
                            if (loadBalancedEndpointsItem.IdleTimeoutInMinutes != null)
                            {
                                XElement idleTimeoutInMinutesElement = new XElement(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                idleTimeoutInMinutesElement.Value = loadBalancedEndpointsItem.IdleTimeoutInMinutes.ToString();
                                inputEndpointElement.Add(idleTimeoutInMinutesElement);
                            }
                            
                            if (loadBalancedEndpointsItem.LoadBalancerDistribution != null)
                            {
                                XElement loadBalancerDistributionElement = new XElement(XName.Get("LoadBalancerDistribution", "http://schemas.microsoft.com/windowsazure"));
                                loadBalancerDistributionElement.Value = loadBalancedEndpointsItem.LoadBalancerDistribution;
                                inputEndpointElement.Add(loadBalancerDistributionElement);
                            }
                            
                            if (loadBalancedEndpointsItem.VirtualIPName != null)
                            {
                                XElement virtualIPNameElement = new XElement(XName.Get("VirtualIPName", "http://schemas.microsoft.com/windowsazure"));
                                virtualIPNameElement.Value = loadBalancedEndpointsItem.VirtualIPName;
                                inputEndpointElement.Add(virtualIPNameElement);
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Capture Role operation creates a copy of the operating system
        /// virtual hard disk (VHD) that is deployed in the virtual machine,
        /// saves the VHD copy in the same storage location as the operating
        /// system VHD, and registers the copy as an image in your image
        /// gallery. From the captured image, you can create additional
        /// customized virtual machines. For more information about images and
        /// disks, see Manage Disks and Images at
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj672979.aspx.
        /// For more information about capturing images, see How to Capture an
        /// Image of a Virtual Machine Running Windows Server 2008 R2 at
        /// http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-capture-image-windows-server/
        /// or How to Capture an Image of a Virtual Machine Running Linux at
        /// http://www.windowsazure.com/en-us/documentation/articles/virtual-machines-linux-capture-image/.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to restart.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> CaptureOSImageAsync(string serviceName, string deploymentName, string virtualMachineName, VirtualMachineCaptureOSImageParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CaptureOSImageAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginCapturingOSImageAsync(serviceName, deploymentName, virtualMachineName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Capture role as VM template.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to restart.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Capture Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> CaptureVMImageAsync(string serviceName, string deploymentName, string virtualMachineName, VirtualMachineCaptureVMImageParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CaptureVMImageAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginCapturingVMImageAsync(serviceName, deploymentName, virtualMachineName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Create Role operation adds a virtual machine to an existing
        /// deployment. You can refer to the OSDisk in the Add Role operation
        /// in the following ways: Platform/User Image - Set the
        /// SourceImageName to a platform or user image. You can optionally
        /// specify the DiskName and MediaLink values as part the operation to
        /// control the name and location of target disk. When DiskName and
        /// MediaLink are specified in this mode, they must not already exist
        /// in the system, otherwise a conflict fault is returned; UserDisk -
        /// Set DiskName to a user supplied image in image repository.
        /// SourceImageName must be set to NULL. All other properties are
        /// ignored; or Blob in a Storage Account - Set MediaLink to a blob
        /// containing the image. SourceImageName and DiskName are set to
        /// NULL.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> CreateAsync(string serviceName, string deploymentName, VirtualMachineCreateParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginCreatingAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Create Virtual Machine Deployment operation provisions a
        /// virtual machine based on the supplied configuration. When you
        /// create a deployment of a virtual machine, you should make sure
        /// that the cloud service and the disk or image that you use are
        /// located in the same region. For example, if the cloud service was
        /// created in the West US region, the disk or image that you use
        /// should also be located in a storage account in the West US region.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine
        /// Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> CreateDeploymentAsync(string serviceName, VirtualMachineCreateDeploymentParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateDeploymentAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginCreatingDeploymentAsync(serviceName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete Role operation deletes the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob(s) for the virtual machine
        /// should also be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> DeleteAsync(string serviceName, string deploymentName, string virtualMachineName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginDeletingAsync(serviceName, deploymentName, virtualMachineName, deleteFromStorage, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get Role operation retrieves information about the specified
        /// virtual machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Virtual Machine operation response.
        /// </returns>
        public async Task<VirtualMachineGetResponse> GetAsync(string serviceName, string deploymentName, string virtualMachineName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roles/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement persistentVMRoleElement = responseDoc.Element(XName.Get("PersistentVMRole", "http://schemas.microsoft.com/windowsazure"));
                        if (persistentVMRoleElement != null)
                        {
                            XElement roleNameElement = persistentVMRoleElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                            if (roleNameElement != null)
                            {
                                string roleNameInstance = roleNameElement.Value;
                                result.RoleName = roleNameInstance;
                            }
                            
                            XElement osVersionElement = persistentVMRoleElement.Element(XName.Get("OsVersion", "http://schemas.microsoft.com/windowsazure"));
                            if (osVersionElement != null)
                            {
                                string osVersionInstance = osVersionElement.Value;
                                result.OsVersion = osVersionInstance;
                            }
                            
                            XElement roleTypeElement = persistentVMRoleElement.Element(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                            if (roleTypeElement != null)
                            {
                                VirtualMachineRoleType roleTypeInstance = ((VirtualMachineRoleType)Enum.Parse(typeof(VirtualMachineRoleType), roleTypeElement.Value, true));
                                result.RoleType = roleTypeInstance;
                            }
                            
                            XElement availabilitySetNameElement = persistentVMRoleElement.Element(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                            if (availabilitySetNameElement != null)
                            {
                                string availabilitySetNameInstance = availabilitySetNameElement.Value;
                                result.AvailabilitySetName = availabilitySetNameInstance;
                            }
                            
                            XElement roleSizeElement = persistentVMRoleElement.Element(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                            if (roleSizeElement != null)
                            {
                                string roleSizeInstance = roleSizeElement.Value;
                                result.RoleSize = roleSizeInstance;
                            }
                            
                            XElement defaultWinRmCertificateThumbprintElement = persistentVMRoleElement.Element(XName.Get("DefaultWinRmCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                            if (defaultWinRmCertificateThumbprintElement != null)
                            {
                                string defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement.Value;
                                result.DefaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
                            }
                            
                            XElement configurationSetsSequenceElement = persistentVMRoleElement.Element(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                            if (configurationSetsSequenceElement != null)
                            {
                                foreach (XElement configurationSetsElement in configurationSetsSequenceElement.Elements(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                    result.ConfigurationSets.Add(configurationSetInstance);
                                    
                                    XElement configurationSetTypeElement = configurationSetsElement.Element(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                    if (configurationSetTypeElement != null)
                                    {
                                        string configurationSetTypeInstance = configurationSetTypeElement.Value;
                                        configurationSetInstance.ConfigurationSetType = configurationSetTypeInstance;
                                    }
                                    
                                    XElement inputEndpointsSequenceElement = configurationSetsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                    if (inputEndpointsSequenceElement != null)
                                    {
                                        foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            InputEndpoint inputEndpointInstance = new InputEndpoint();
                                            configurationSetInstance.InputEndpoints.Add(inputEndpointInstance);
                                            
                                            XElement loadBalancedEndpointSetNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                            if (loadBalancedEndpointSetNameElement != null)
                                            {
                                                string loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement.Value;
                                                inputEndpointInstance.LoadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                                            }
                                            
                                            XElement localPortElement = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                            if (localPortElement != null && !string.IsNullOrEmpty(localPortElement.Value))
                                            {
                                                int localPortInstance = int.Parse(localPortElement.Value, CultureInfo.InvariantCulture);
                                                inputEndpointInstance.LocalPort = localPortInstance;
                                            }
                                            
                                            XElement nameElement = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement != null)
                                            {
                                                string nameInstance = nameElement.Value;
                                                inputEndpointInstance.Name = nameInstance;
                                            }
                                            
                                            XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                            if (portElement != null && !string.IsNullOrEmpty(portElement.Value))
                                            {
                                                int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                inputEndpointInstance.Port = portInstance;
                                            }
                                            
                                            XElement loadBalancerProbeElement = inputEndpointsElement.Element(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                            if (loadBalancerProbeElement != null)
                                            {
                                                LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                inputEndpointInstance.LoadBalancerProbe = loadBalancerProbeInstance;
                                                
                                                XElement pathElement = loadBalancerProbeElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                if (pathElement != null)
                                                {
                                                    string pathInstance = pathElement.Value;
                                                    loadBalancerProbeInstance.Path = pathInstance;
                                                }
                                                
                                                XElement portElement2 = loadBalancerProbeElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                if (portElement2 != null)
                                                {
                                                    int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                    loadBalancerProbeInstance.Port = portInstance2;
                                                }
                                                
                                                XElement protocolElement = loadBalancerProbeElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                if (protocolElement != null)
                                                {
                                                    LoadBalancerProbeTransportProtocol protocolInstance = ComputeManagementClient.ParseLoadBalancerProbeTransportProtocol(protocolElement.Value);
                                                    loadBalancerProbeInstance.Protocol = protocolInstance;
                                                }
                                                
                                                XElement intervalInSecondsElement = loadBalancerProbeElement.Element(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                if (intervalInSecondsElement != null && !string.IsNullOrEmpty(intervalInSecondsElement.Value))
                                                {
                                                    int intervalInSecondsInstance = int.Parse(intervalInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                    loadBalancerProbeInstance.IntervalInSeconds = intervalInSecondsInstance;
                                                }
                                                
                                                XElement timeoutInSecondsElement = loadBalancerProbeElement.Element(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                if (timeoutInSecondsElement != null && !string.IsNullOrEmpty(timeoutInSecondsElement.Value))
                                                {
                                                    int timeoutInSecondsInstance = int.Parse(timeoutInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                    loadBalancerProbeInstance.TimeoutInSeconds = timeoutInSecondsInstance;
                                                }
                                            }
                                            
                                            XElement protocolElement2 = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                            if (protocolElement2 != null)
                                            {
                                                string protocolInstance2 = protocolElement2.Value;
                                                inputEndpointInstance.Protocol = protocolInstance2;
                                            }
                                            
                                            XElement vipElement = inputEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                            if (vipElement != null)
                                            {
                                                string vipInstance = vipElement.Value;
                                                inputEndpointInstance.VirtualIPAddress = vipInstance;
                                            }
                                            
                                            XElement enableDirectServerReturnElement = inputEndpointsElement.Element(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                            if (enableDirectServerReturnElement != null && !string.IsNullOrEmpty(enableDirectServerReturnElement.Value))
                                            {
                                                bool enableDirectServerReturnInstance = bool.Parse(enableDirectServerReturnElement.Value);
                                                inputEndpointInstance.EnableDirectServerReturn = enableDirectServerReturnInstance;
                                            }
                                            
                                            XElement loadBalancerNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancerName", "http://schemas.microsoft.com/windowsazure"));
                                            if (loadBalancerNameElement != null)
                                            {
                                                string loadBalancerNameInstance = loadBalancerNameElement.Value;
                                                inputEndpointInstance.LoadBalancerName = loadBalancerNameInstance;
                                            }
                                            
                                            XElement endpointAclElement = inputEndpointsElement.Element(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                            if (endpointAclElement != null)
                                            {
                                                EndpointAcl endpointAclInstance = new EndpointAcl();
                                                inputEndpointInstance.EndpointAcl = endpointAclInstance;
                                                
                                                XElement rulesSequenceElement = endpointAclElement.Element(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                if (rulesSequenceElement != null)
                                                {
                                                    foreach (XElement rulesElement in rulesSequenceElement.Elements(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        AccessControlListRule ruleInstance = new AccessControlListRule();
                                                        endpointAclInstance.Rules.Add(ruleInstance);
                                                        
                                                        XElement orderElement = rulesElement.Element(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                        if (orderElement != null && !string.IsNullOrEmpty(orderElement.Value))
                                                        {
                                                            int orderInstance = int.Parse(orderElement.Value, CultureInfo.InvariantCulture);
                                                            ruleInstance.Order = orderInstance;
                                                        }
                                                        
                                                        XElement actionElement = rulesElement.Element(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                        if (actionElement != null)
                                                        {
                                                            string actionInstance = actionElement.Value;
                                                            ruleInstance.Action = actionInstance;
                                                        }
                                                        
                                                        XElement remoteSubnetElement = rulesElement.Element(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                        if (remoteSubnetElement != null)
                                                        {
                                                            string remoteSubnetInstance = remoteSubnetElement.Value;
                                                            ruleInstance.RemoteSubnet = remoteSubnetInstance;
                                                        }
                                                        
                                                        XElement descriptionElement = rulesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                        if (descriptionElement != null)
                                                        {
                                                            string descriptionInstance = descriptionElement.Value;
                                                            ruleInstance.Description = descriptionInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            XElement idleTimeoutInMinutesElement = inputEndpointsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            if (idleTimeoutInMinutesElement != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement.Value))
                                            {
                                                int idleTimeoutInMinutesInstance = int.Parse(idleTimeoutInMinutesElement.Value, CultureInfo.InvariantCulture);
                                                inputEndpointInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                                            }
                                            
                                            XElement loadBalancerDistributionElement = inputEndpointsElement.Element(XName.Get("LoadBalancerDistribution", "http://schemas.microsoft.com/windowsazure"));
                                            if (loadBalancerDistributionElement != null)
                                            {
                                                string loadBalancerDistributionInstance = loadBalancerDistributionElement.Value;
                                                inputEndpointInstance.LoadBalancerDistribution = loadBalancerDistributionInstance;
                                            }
                                            
                                            XElement virtualIPNameElement = inputEndpointsElement.Element(XName.Get("VirtualIPName", "http://schemas.microsoft.com/windowsazure"));
                                            if (virtualIPNameElement != null)
                                            {
                                                string virtualIPNameInstance = virtualIPNameElement.Value;
                                                inputEndpointInstance.VirtualIPName = virtualIPNameInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement subnetNamesSequenceElement = configurationSetsElement.Element(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                    if (subnetNamesSequenceElement != null)
                                    {
                                        foreach (XElement subnetNamesElement in subnetNamesSequenceElement.Elements(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            configurationSetInstance.SubnetNames.Add(subnetNamesElement.Value);
                                        }
                                    }
                                    
                                    XElement staticVirtualNetworkIPAddressElement = configurationSetsElement.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                    if (staticVirtualNetworkIPAddressElement != null)
                                    {
                                        string staticVirtualNetworkIPAddressInstance = staticVirtualNetworkIPAddressElement.Value;
                                        configurationSetInstance.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance;
                                    }
                                    
                                    XElement publicIPsSequenceElement = configurationSetsElement.Element(XName.Get("PublicIPs", "http://schemas.microsoft.com/windowsazure"));
                                    if (publicIPsSequenceElement != null)
                                    {
                                        foreach (XElement publicIPsElement in publicIPsSequenceElement.Elements(XName.Get("PublicIP", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ConfigurationSet.PublicIP publicIPInstance = new ConfigurationSet.PublicIP();
                                            configurationSetInstance.PublicIPs.Add(publicIPInstance);
                                            
                                            XElement nameElement2 = publicIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement2 != null)
                                            {
                                                string nameInstance2 = nameElement2.Value;
                                                publicIPInstance.Name = nameInstance2;
                                            }
                                            
                                            XElement idleTimeoutInMinutesElement2 = publicIPsElement.Element(XName.Get("IdleTimeoutInMinutes", "http://schemas.microsoft.com/windowsazure"));
                                            if (idleTimeoutInMinutesElement2 != null && !string.IsNullOrEmpty(idleTimeoutInMinutesElement2.Value))
                                            {
                                                int idleTimeoutInMinutesInstance2 = int.Parse(idleTimeoutInMinutesElement2.Value, CultureInfo.InvariantCulture);
                                                publicIPInstance.IdleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                                            }
                                            
                                            XElement domainNameLabelElement = publicIPsElement.Element(XName.Get("DomainNameLabel", "http://schemas.microsoft.com/windowsazure"));
                                            if (domainNameLabelElement != null)
                                            {
                                                string domainNameLabelInstance = domainNameLabelElement.Value;
                                                publicIPInstance.DomainNameLabel = domainNameLabelInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement networkInterfacesSequenceElement = configurationSetsElement.Element(XName.Get("NetworkInterfaces", "http://schemas.microsoft.com/windowsazure"));
                                    if (networkInterfacesSequenceElement != null)
                                    {
                                        foreach (XElement networkInterfacesElement in networkInterfacesSequenceElement.Elements(XName.Get("NetworkInterface", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            NetworkInterface networkInterfaceInstance = new NetworkInterface();
                                            configurationSetInstance.NetworkInterfaces.Add(networkInterfaceInstance);
                                            
                                            XElement nameElement3 = networkInterfacesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement3 != null)
                                            {
                                                string nameInstance3 = nameElement3.Value;
                                                networkInterfaceInstance.Name = nameInstance3;
                                            }
                                            
                                            XElement iPConfigurationsSequenceElement = networkInterfacesElement.Element(XName.Get("IPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                            if (iPConfigurationsSequenceElement != null)
                                            {
                                                foreach (XElement iPConfigurationsElement in iPConfigurationsSequenceElement.Elements(XName.Get("IPConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    IPConfiguration iPConfigurationInstance = new IPConfiguration();
                                                    networkInterfaceInstance.IPConfigurations.Add(iPConfigurationInstance);
                                                    
                                                    XElement subnetNameElement = iPConfigurationsElement.Element(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure"));
                                                    if (subnetNameElement != null)
                                                    {
                                                        string subnetNameInstance = subnetNameElement.Value;
                                                        iPConfigurationInstance.SubnetName = subnetNameInstance;
                                                    }
                                                    
                                                    XElement staticVirtualNetworkIPAddressElement2 = iPConfigurationsElement.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                    if (staticVirtualNetworkIPAddressElement2 != null)
                                                    {
                                                        string staticVirtualNetworkIPAddressInstance2 = staticVirtualNetworkIPAddressElement2.Value;
                                                        iPConfigurationInstance.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance2;
                                                    }
                                                }
                                            }
                                            
                                            XElement networkSecurityGroupElement = networkInterfacesElement.Element(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                            if (networkSecurityGroupElement != null)
                                            {
                                                string networkSecurityGroupInstance = networkSecurityGroupElement.Value;
                                                networkInterfaceInstance.NetworkSecurityGroup = networkSecurityGroupInstance;
                                            }
                                            
                                            XElement iPForwardingElement = networkInterfacesElement.Element(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                            if (iPForwardingElement != null)
                                            {
                                                string iPForwardingInstance = iPForwardingElement.Value;
                                                networkInterfaceInstance.IPForwarding = iPForwardingInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement networkSecurityGroupElement2 = configurationSetsElement.Element(XName.Get("NetworkSecurityGroup", "http://schemas.microsoft.com/windowsazure"));
                                    if (networkSecurityGroupElement2 != null)
                                    {
                                        string networkSecurityGroupInstance2 = networkSecurityGroupElement2.Value;
                                        configurationSetInstance.NetworkSecurityGroup = networkSecurityGroupInstance2;
                                    }
                                    
                                    XElement iPForwardingElement2 = configurationSetsElement.Element(XName.Get("IPForwarding", "http://schemas.microsoft.com/windowsazure"));
                                    if (iPForwardingElement2 != null)
                                    {
                                        string iPForwardingInstance2 = iPForwardingElement2.Value;
                                        configurationSetInstance.IPForwarding = iPForwardingInstance2;
                                    }
                                    
                                    XElement computerNameElement = configurationSetsElement.Element(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                    if (computerNameElement != null)
                                    {
                                        string computerNameInstance = computerNameElement.Value;
                                        configurationSetInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    XElement adminPasswordElement = configurationSetsElement.Element(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                    if (adminPasswordElement != null)
                                    {
                                        string adminPasswordInstance = adminPasswordElement.Value;
                                        configurationSetInstance.AdminPassword = adminPasswordInstance;
                                    }
                                    
                                    XElement resetPasswordOnFirstLogonElement = configurationSetsElement.Element(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                    if (resetPasswordOnFirstLogonElement != null && !string.IsNullOrEmpty(resetPasswordOnFirstLogonElement.Value))
                                    {
                                        bool resetPasswordOnFirstLogonInstance = bool.Parse(resetPasswordOnFirstLogonElement.Value);
                                        configurationSetInstance.ResetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                                    }
                                    
                                    XElement enableAutomaticUpdatesElement = configurationSetsElement.Element(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                    if (enableAutomaticUpdatesElement != null && !string.IsNullOrEmpty(enableAutomaticUpdatesElement.Value))
                                    {
                                        bool enableAutomaticUpdatesInstance = bool.Parse(enableAutomaticUpdatesElement.Value);
                                        configurationSetInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                    }
                                    
                                    XElement timeZoneElement = configurationSetsElement.Element(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                    if (timeZoneElement != null)
                                    {
                                        string timeZoneInstance = timeZoneElement.Value;
                                        configurationSetInstance.TimeZone = timeZoneInstance;
                                    }
                                    
                                    XElement domainJoinElement = configurationSetsElement.Element(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                    if (domainJoinElement != null)
                                    {
                                        DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                        configurationSetInstance.DomainJoin = domainJoinInstance;
                                        
                                        XElement credentialsElement = domainJoinElement.Element(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                        if (credentialsElement != null)
                                        {
                                            DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                            domainJoinInstance.Credentials = credentialsInstance;
                                            
                                            XElement domainElement = credentialsElement.Element(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                            if (domainElement != null)
                                            {
                                                string domainInstance = domainElement.Value;
                                                credentialsInstance.Domain = domainInstance;
                                            }
                                            
                                            XElement usernameElement = credentialsElement.Element(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                            if (usernameElement != null)
                                            {
                                                string usernameInstance = usernameElement.Value;
                                                credentialsInstance.UserName = usernameInstance;
                                            }
                                            
                                            XElement passwordElement = credentialsElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                            if (passwordElement != null)
                                            {
                                                string passwordInstance = passwordElement.Value;
                                                credentialsInstance.Password = passwordInstance;
                                            }
                                        }
                                        
                                        XElement joinDomainElement = domainJoinElement.Element(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                        if (joinDomainElement != null)
                                        {
                                            string joinDomainInstance = joinDomainElement.Value;
                                            domainJoinInstance.DomainToJoin = joinDomainInstance;
                                        }
                                        
                                        XElement machineObjectOUElement = domainJoinElement.Element(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                        if (machineObjectOUElement != null)
                                        {
                                            string machineObjectOUInstance = machineObjectOUElement.Value;
                                            domainJoinInstance.LdapMachineObjectOU = machineObjectOUInstance;
                                        }
                                        
                                        XElement provisioningElement = domainJoinElement.Element(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                        if (provisioningElement != null)
                                        {
                                            DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                            domainJoinInstance.Provisioning = provisioningInstance;
                                            
                                            XElement accountDataElement = provisioningElement.Element(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                            if (accountDataElement != null)
                                            {
                                                string accountDataInstance = accountDataElement.Value;
                                                provisioningInstance.AccountData = accountDataInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement storedCertificateSettingsSequenceElement = configurationSetsElement.Element(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                    if (storedCertificateSettingsSequenceElement != null)
                                    {
                                        foreach (XElement storedCertificateSettingsElement in storedCertificateSettingsSequenceElement.Elements(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                            configurationSetInstance.StoredCertificateSettings.Add(certificateSettingInstance);
                                            
                                            XElement storeLocationElement = storedCertificateSettingsElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                            if (storeLocationElement != null)
                                            {
                                            }
                                            
                                            XElement storeNameElement = storedCertificateSettingsElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                            if (storeNameElement != null)
                                            {
                                                string storeNameInstance = storeNameElement.Value;
                                                certificateSettingInstance.StoreName = storeNameInstance;
                                            }
                                            
                                            XElement thumbprintElement = storedCertificateSettingsElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                            if (thumbprintElement != null)
                                            {
                                                string thumbprintInstance = thumbprintElement.Value;
                                                certificateSettingInstance.Thumbprint = thumbprintInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement winRMElement = configurationSetsElement.Element(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                    if (winRMElement != null)
                                    {
                                        WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                        configurationSetInstance.WindowsRemoteManagement = winRMInstance;
                                        
                                        XElement listenersSequenceElement = winRMElement.Element(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                        if (listenersSequenceElement != null)
                                        {
                                            foreach (XElement listenersElement in listenersSequenceElement.Elements(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                winRMInstance.Listeners.Add(listenerInstance);
                                                
                                                XElement protocolElement3 = listenersElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                if (protocolElement3 != null)
                                                {
                                                    VirtualMachineWindowsRemoteManagementListenerType protocolInstance3 = ((VirtualMachineWindowsRemoteManagementListenerType)Enum.Parse(typeof(VirtualMachineWindowsRemoteManagementListenerType), protocolElement3.Value, true));
                                                    listenerInstance.ListenerType = protocolInstance3;
                                                }
                                                
                                                XElement certificateThumbprintElement = listenersElement.Element(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                if (certificateThumbprintElement != null)
                                                {
                                                    string certificateThumbprintInstance = certificateThumbprintElement.Value;
                                                    listenerInstance.CertificateThumbprint = certificateThumbprintInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement adminUsernameElement = configurationSetsElement.Element(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                    if (adminUsernameElement != null)
                                    {
                                        string adminUsernameInstance = adminUsernameElement.Value;
                                        configurationSetInstance.AdminUserName = adminUsernameInstance;
                                    }
                                    
                                    XElement additionalUnattendContentElement = configurationSetsElement.Element(XName.Get("AdditionalUnattendContent", "http://schemas.microsoft.com/windowsazure"));
                                    if (additionalUnattendContentElement != null)
                                    {
                                        AdditionalUnattendContentSettings additionalUnattendContentInstance = new AdditionalUnattendContentSettings();
                                        configurationSetInstance.AdditionalUnattendContent = additionalUnattendContentInstance;
                                        
                                        XElement passesSequenceElement = additionalUnattendContentElement.Element(XName.Get("Passes", "http://schemas.microsoft.com/windowsazure"));
                                        if (passesSequenceElement != null)
                                        {
                                            foreach (XElement passesElement in passesSequenceElement.Elements(XName.Get("UnattendPass", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                UnattendPassSettings unattendPassInstance = new UnattendPassSettings();
                                                additionalUnattendContentInstance.UnattendPasses.Add(unattendPassInstance);
                                                
                                                XElement passNameElement = passesElement.Element(XName.Get("PassName", "http://schemas.microsoft.com/windowsazure"));
                                                if (passNameElement != null)
                                                {
                                                    string passNameInstance = passNameElement.Value;
                                                    unattendPassInstance.PassName = passNameInstance;
                                                }
                                                
                                                XElement componentsSequenceElement = passesElement.Element(XName.Get("Components", "http://schemas.microsoft.com/windowsazure"));
                                                if (componentsSequenceElement != null)
                                                {
                                                    foreach (XElement componentsElement in componentsSequenceElement.Elements(XName.Get("UnattendComponent", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        UnattendComponent unattendComponentInstance = new UnattendComponent();
                                                        unattendPassInstance.UnattendComponents.Add(unattendComponentInstance);
                                                        
                                                        XElement componentNameElement = componentsElement.Element(XName.Get("ComponentName", "http://schemas.microsoft.com/windowsazure"));
                                                        if (componentNameElement != null)
                                                        {
                                                            string componentNameInstance = componentNameElement.Value;
                                                            unattendComponentInstance.ComponentName = componentNameInstance;
                                                        }
                                                        
                                                        XElement componentSettingsSequenceElement = componentsElement.Element(XName.Get("ComponentSettings", "http://schemas.microsoft.com/windowsazure"));
                                                        if (componentSettingsSequenceElement != null)
                                                        {
                                                            foreach (XElement componentSettingsElement in componentSettingsSequenceElement.Elements(XName.Get("ComponentSetting", "http://schemas.microsoft.com/windowsazure")))
                                                            {
                                                                ComponentSetting componentSettingInstance = new ComponentSetting();
                                                                unattendComponentInstance.UnattendComponentSettings.Add(componentSettingInstance);
                                                                
                                                                XElement settingNameElement = componentSettingsElement.Element(XName.Get("SettingName", "http://schemas.microsoft.com/windowsazure"));
                                                                if (settingNameElement != null)
                                                                {
                                                                    string settingNameInstance = settingNameElement.Value;
                                                                    componentSettingInstance.SettingName = settingNameInstance;
                                                                }
                                                                
                                                                XElement contentElement = componentSettingsElement.Element(XName.Get("Content", "http://schemas.microsoft.com/windowsazure"));
                                                                if (contentElement != null)
                                                                {
                                                                    string contentInstance = TypeConversion.FromBase64String(contentElement.Value);
                                                                    componentSettingInstance.Content = contentInstance;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement hostNameElement = configurationSetsElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostNameElement != null)
                                    {
                                        string hostNameInstance = hostNameElement.Value;
                                        configurationSetInstance.HostName = hostNameInstance;
                                    }
                                    
                                    XElement userNameElement = configurationSetsElement.Element(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                    if (userNameElement != null)
                                    {
                                        string userNameInstance = userNameElement.Value;
                                        configurationSetInstance.UserName = userNameInstance;
                                    }
                                    
                                    XElement userPasswordElement = configurationSetsElement.Element(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                    if (userPasswordElement != null)
                                    {
                                        string userPasswordInstance = userPasswordElement.Value;
                                        configurationSetInstance.UserPassword = userPasswordInstance;
                                    }
                                    
                                    XElement disableSshPasswordAuthenticationElement = configurationSetsElement.Element(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                    if (disableSshPasswordAuthenticationElement != null && !string.IsNullOrEmpty(disableSshPasswordAuthenticationElement.Value))
                                    {
                                        bool disableSshPasswordAuthenticationInstance = bool.Parse(disableSshPasswordAuthenticationElement.Value);
                                        configurationSetInstance.DisableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                                    }
                                    
                                    XElement sSHElement = configurationSetsElement.Element(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                    if (sSHElement != null)
                                    {
                                        SshSettings sSHInstance = new SshSettings();
                                        configurationSetInstance.SshSettings = sSHInstance;
                                        
                                        XElement publicKeysSequenceElement = sSHElement.Element(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                        if (publicKeysSequenceElement != null)
                                        {
                                            foreach (XElement publicKeysElement in publicKeysSequenceElement.Elements(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                sSHInstance.PublicKeys.Add(publicKeyInstance);
                                                
                                                XElement fingerprintElement = publicKeysElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                if (fingerprintElement != null)
                                                {
                                                    string fingerprintInstance = fingerprintElement.Value;
                                                    publicKeyInstance.Fingerprint = fingerprintInstance;
                                                }
                                                
                                                XElement pathElement2 = publicKeysElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                if (pathElement2 != null)
                                                {
                                                    string pathInstance2 = pathElement2.Value;
                                                    publicKeyInstance.Path = pathInstance2;
                                                }
                                            }
                                        }
                                        
                                        XElement keyPairsSequenceElement = sSHElement.Element(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                        if (keyPairsSequenceElement != null)
                                        {
                                            foreach (XElement keyPairsElement in keyPairsSequenceElement.Elements(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                sSHInstance.KeyPairs.Add(keyPairInstance);
                                                
                                                XElement fingerprintElement2 = keyPairsElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                if (fingerprintElement2 != null)
                                                {
                                                    string fingerprintInstance2 = fingerprintElement2.Value;
                                                    keyPairInstance.Fingerprint = fingerprintInstance2;
                                                }
                                                
                                                XElement pathElement3 = keyPairsElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                if (pathElement3 != null)
                                                {
                                                    string pathInstance3 = pathElement3.Value;
                                                    keyPairInstance.Path = pathInstance3;
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement customDataElement = configurationSetsElement.Element(XName.Get("CustomData", "http://schemas.microsoft.com/windowsazure"));
                                    if (customDataElement != null)
                                    {
                                        string customDataInstance = customDataElement.Value;
                                        configurationSetInstance.CustomData = customDataInstance;
                                    }
                                }
                            }
                            
                            XElement dataVirtualHardDisksSequenceElement = persistentVMRoleElement.Element(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                            if (dataVirtualHardDisksSequenceElement != null)
                            {
                                foreach (XElement dataVirtualHardDisksElement in dataVirtualHardDisksSequenceElement.Elements(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                    result.DataVirtualHardDisks.Add(dataVirtualHardDiskInstance);
                                    
                                    XElement hostCachingElement = dataVirtualHardDisksElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostCachingElement != null)
                                    {
                                        string hostCachingInstance = hostCachingElement.Value;
                                        dataVirtualHardDiskInstance.HostCaching = hostCachingInstance;
                                    }
                                    
                                    XElement diskLabelElement = dataVirtualHardDisksElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                    if (diskLabelElement != null)
                                    {
                                        string diskLabelInstance = diskLabelElement.Value;
                                        dataVirtualHardDiskInstance.Label = diskLabelInstance;
                                    }
                                    
                                    XElement diskNameElement = dataVirtualHardDisksElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                    if (diskNameElement != null)
                                    {
                                        string diskNameInstance = diskNameElement.Value;
                                        dataVirtualHardDiskInstance.Name = diskNameInstance;
                                    }
                                    
                                    XElement lunElement = dataVirtualHardDisksElement.Element(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                    if (lunElement != null && !string.IsNullOrEmpty(lunElement.Value))
                                    {
                                        int lunInstance = int.Parse(lunElement.Value, CultureInfo.InvariantCulture);
                                        dataVirtualHardDiskInstance.LogicalUnitNumber = lunInstance;
                                    }
                                    
                                    XElement logicalDiskSizeInGBElement = dataVirtualHardDisksElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                    if (logicalDiskSizeInGBElement != null && !string.IsNullOrEmpty(logicalDiskSizeInGBElement.Value))
                                    {
                                        int logicalDiskSizeInGBInstance = int.Parse(logicalDiskSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                        dataVirtualHardDiskInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                                    }
                                    
                                    XElement mediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                    if (mediaLinkElement != null)
                                    {
                                        Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                        dataVirtualHardDiskInstance.MediaLink = mediaLinkInstance;
                                    }
                                    
                                    XElement sourceMediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("SourceMediaLink", "http://schemas.microsoft.com/windowsazure"));
                                    if (sourceMediaLinkElement != null)
                                    {
                                        Uri sourceMediaLinkInstance = TypeConversion.TryParseUri(sourceMediaLinkElement.Value);
                                        dataVirtualHardDiskInstance.SourceMediaLink = sourceMediaLinkInstance;
                                    }
                                    
                                    XElement iOTypeElement = dataVirtualHardDisksElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                    if (iOTypeElement != null)
                                    {
                                        string iOTypeInstance = iOTypeElement.Value;
                                        dataVirtualHardDiskInstance.IOType = iOTypeInstance;
                                    }
                                }
                            }
                            
                            XElement oSVirtualHardDiskElement = persistentVMRoleElement.Element(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                            if (oSVirtualHardDiskElement != null)
                            {
                                OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                result.OSVirtualHardDisk = oSVirtualHardDiskInstance;
                                
                                XElement hostCachingElement2 = oSVirtualHardDiskElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                if (hostCachingElement2 != null)
                                {
                                    string hostCachingInstance2 = hostCachingElement2.Value;
                                    oSVirtualHardDiskInstance.HostCaching = hostCachingInstance2;
                                }
                                
                                XElement diskLabelElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                if (diskLabelElement2 != null)
                                {
                                    string diskLabelInstance2 = diskLabelElement2.Value;
                                    oSVirtualHardDiskInstance.Label = diskLabelInstance2;
                                }
                                
                                XElement diskNameElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                if (diskNameElement2 != null)
                                {
                                    string diskNameInstance2 = diskNameElement2.Value;
                                    oSVirtualHardDiskInstance.Name = diskNameInstance2;
                                }
                                
                                XElement mediaLinkElement2 = oSVirtualHardDiskElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                if (mediaLinkElement2 != null)
                                {
                                    Uri mediaLinkInstance2 = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                    oSVirtualHardDiskInstance.MediaLink = mediaLinkInstance2;
                                }
                                
                                XElement sourceImageNameElement = oSVirtualHardDiskElement.Element(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                                if (sourceImageNameElement != null)
                                {
                                    string sourceImageNameInstance = sourceImageNameElement.Value;
                                    oSVirtualHardDiskInstance.SourceImageName = sourceImageNameInstance;
                                }
                                
                                XElement osElement = oSVirtualHardDiskElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                if (osElement != null)
                                {
                                    string osInstance = osElement.Value;
                                    oSVirtualHardDiskInstance.OperatingSystem = osInstance;
                                }
                                
                                XElement remoteSourceImageLinkElement = oSVirtualHardDiskElement.Element(XName.Get("RemoteSourceImageLink", "http://schemas.microsoft.com/windowsazure"));
                                if (remoteSourceImageLinkElement != null)
                                {
                                    Uri remoteSourceImageLinkInstance = TypeConversion.TryParseUri(remoteSourceImageLinkElement.Value);
                                    oSVirtualHardDiskInstance.RemoteSourceImageLink = remoteSourceImageLinkInstance;
                                }
                                
                                XElement iOTypeElement2 = oSVirtualHardDiskElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                if (iOTypeElement2 != null)
                                {
                                    string iOTypeInstance2 = iOTypeElement2.Value;
                                    oSVirtualHardDiskInstance.IOType = iOTypeInstance2;
                                }
                                
                                XElement resizedSizeInGBElement = oSVirtualHardDiskElement.Element(XName.Get("ResizedSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                if (resizedSizeInGBElement != null && !string.IsNullOrEmpty(resizedSizeInGBElement.Value))
                                {
                                    int resizedSizeInGBInstance = int.Parse(resizedSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                    oSVirtualHardDiskInstance.ResizedSizeInGB = resizedSizeInGBInstance;
                                }
                            }
                            
                            XElement provisionGuestAgentElement = persistentVMRoleElement.Element(XName.Get("ProvisionGuestAgent", "http://schemas.microsoft.com/windowsazure"));
                            if (provisionGuestAgentElement != null && !string.IsNullOrEmpty(provisionGuestAgentElement.Value))
                            {
                                bool provisionGuestAgentInstance = bool.Parse(provisionGuestAgentElement.Value);
                                result.ProvisionGuestAgent = provisionGuestAgentInstance;
                            }
                            
                            XElement debugSettingsElement = persistentVMRoleElement.Element(XName.Get("DebugSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (debugSettingsElement != null)
                            {
                                DebugSettings debugSettingsInstance = new DebugSettings();
                                result.DebugSettings = debugSettingsInstance;
                                
                                XElement bootDiagnosticsEnabledElement = debugSettingsElement.Element(XName.Get("BootDiagnosticsEnabled", "http://schemas.microsoft.com/windowsazure"));
                                if (bootDiagnosticsEnabledElement != null)
                                {
                                    bool bootDiagnosticsEnabledInstance = bool.Parse(bootDiagnosticsEnabledElement.Value);
                                    debugSettingsInstance.BootDiagnosticsEnabled = bootDiagnosticsEnabledInstance;
                                }
                                
                                XElement consoleScreenshotBlobUriElement = debugSettingsElement.Element(XName.Get("ConsoleScreenshotBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                if (consoleScreenshotBlobUriElement != null)
                                {
                                    Uri consoleScreenshotBlobUriInstance = TypeConversion.TryParseUri(consoleScreenshotBlobUriElement.Value);
                                    debugSettingsInstance.ConsoleScreenshotBlobUri = consoleScreenshotBlobUriInstance;
                                }
                                
                                XElement serialOutputBlobUriElement = debugSettingsElement.Element(XName.Get("SerialOutputBlobUri", "http://schemas.microsoft.com/windowsazure"));
                                if (serialOutputBlobUriElement != null)
                                {
                                    Uri serialOutputBlobUriInstance = TypeConversion.TryParseUri(serialOutputBlobUriElement.Value);
                                    debugSettingsInstance.SerialOutputBlobUri = serialOutputBlobUriInstance;
                                }
                            }
                            
                            XElement licenseTypeElement = persistentVMRoleElement.Element(XName.Get("LicenseType", "http://schemas.microsoft.com/windowsazure"));
                            if (licenseTypeElement != null)
                            {
                                string licenseTypeInstance = licenseTypeElement.Value;
                                result.LicenseType = licenseTypeInstance;
                            }
                            
                            XElement migrationStateElement = persistentVMRoleElement.Element(XName.Get("MigrationState", "http://schemas.microsoft.com/windowsazure"));
                            if (migrationStateElement != null)
                            {
                                string migrationStateInstance = migrationStateElement.Value;
                                result.MigrationState = migrationStateInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Download RDP file operation retrieves the Remote Desktop
        /// Protocol configuration file from the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Download RDP file operation response.
        /// </returns>
        public async Task<VirtualMachineGetRemoteDesktopFileResponse> GetRemoteDesktopFileAsync(string serviceName, string deploymentName, string virtualMachineName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (virtualMachineName == null)
            {
                throw new ArgumentNullException("virtualMachineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                TracingAdapter.Enter(invocationId, this, "GetRemoteDesktopFileAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/hostedservices/";
            url = url + Uri.EscapeDataString(serviceName);
            url = url + "/deployments/";
            url = url + Uri.EscapeDataString(deploymentName);
            url = url + "/roleinstances/";
            url = url + Uri.EscapeDataString(virtualMachineName);
            url = url + "/ModelFile";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("FileType=RDP");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGetRemoteDesktopFileResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineGetRemoteDesktopFileResponse();
                        result.RemoteDesktopFile = Encoding.UTF8.GetBytes(responseContent);
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Redeploy role operation redeploys the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to redeploy.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> RedeployAsync(string serviceName, string deploymentName, string virtualMachineName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                TracingAdapter.Enter(invocationId, this, "RedeployAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginRedeployingAsync(serviceName, deploymentName, virtualMachineName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Restart role operation restarts the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to restart.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> RestartAsync(string serviceName, string deploymentName, string virtualMachineName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                TracingAdapter.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginRestartingAsync(serviceName, deploymentName, virtualMachineName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Shutdown Role operation shuts down the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to shutdown.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters for the shutdown virtual machine operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> ShutdownAsync(string serviceName, string deploymentName, string virtualMachineName, VirtualMachineShutdownParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ShutdownAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginShutdownAsync(serviceName, deploymentName, virtualMachineName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Shutdown Roles operation stops the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to pass to the Shutdown Roles operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> ShutdownRolesAsync(string serviceName, string deploymentName, VirtualMachineShutdownRolesParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ShutdownRolesAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginShuttingDownRolesAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Start Role operation starts the specified virtual machine.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of the virtual machine to start.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> StartAsync(string serviceName, string deploymentName, string virtualMachineName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                TracingAdapter.Enter(invocationId, this, "StartAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginStartingAsync(serviceName, deploymentName, virtualMachineName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Start Roles operation starts the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to pass to the Start Roles operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> StartRolesAsync(string serviceName, string deploymentName, VirtualMachineStartRolesParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "StartRolesAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginStartingRolesAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Update Role operation adds a virtual machine to an existing
        /// deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// Required. The name of your virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Virtual Machine
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UpdateAsync(string serviceName, string deploymentName, string virtualMachineName, VirtualMachineUpdateParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("virtualMachineName", virtualMachineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginUpdatingAsync(serviceName, deploymentName, virtualMachineName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Update Load Balanced Endpoint Set operation changes the
        /// specified load-balanced InputEndpoints on all the roles of an
        /// Infrastructure as a Service deployment. Non-load-balanced
        /// endpoints must be changed using UpdateRole.
        /// </summary>
        /// <param name='serviceName'>
        /// Required. The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Load Balanced Endpoint
        /// Set operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UpdateLoadBalancedEndpointSetAsync(string serviceName, string deploymentName, VirtualMachineUpdateLoadBalancedSetParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateLoadBalancedEndpointSetAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachines.BeginUpdatingLoadBalancedEndpointSetAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
