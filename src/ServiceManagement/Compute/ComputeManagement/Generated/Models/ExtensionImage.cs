// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute.Models
{
    /// <summary>
    /// The Extension Image.
    /// </summary>
    public partial class ExtensionImage
    {
        private bool? _blockRoleUponFailure;
        
        /// <summary>
        /// Optional. Optional. Its value has to be 'true' or 'false'
        /// (case-sensitive) When set to 'true', the role startup will be
        /// blocked till the extension installation completes. This flag
        /// should be set to 'true' when the role cannot start without the
        /// extension being installed. If set to 'false' (default value), the
        /// role will be started without waiting for the extension
        /// installation to complete. Supported on WebRole or WorkerRole, but
        /// ignored on VmRole.
        /// </summary>
        public bool? BlockRoleUponFailure
        {
            get { return this._blockRoleUponFailure; }
            set { this._blockRoleUponFailure = value; }
        }
        
        private ExtensionCertificateConfiguration _certificate;
        
        /// <summary>
        /// Optional. Optional. Parameters of the the certificate for
        /// encrypting the private configuration data. Supported on WebRole or
        /// WorkerRole, but ignored on VmRole.
        /// </summary>
        public ExtensionCertificateConfiguration Certificate
        {
            get { return this._certificate; }
            set { this._certificate = value; }
        }
        
        private string _companyName;
        
        /// <summary>
        /// Optional. String property containing the name of the
        /// company/organization who publishes the extension.
        /// </summary>
        public string CompanyName
        {
            get { return this._companyName; }
            set { this._companyName = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Optional. Required. Detailed description of the extension.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private bool? _disallowMajorVersionUpgrade;
        
        /// <summary>
        /// Optional. Optional. If this is set to 'true' the extension version
        /// cannot be upgraded to from other major versions in active
        /// deployments. If the value is 'false' or nor present, the extension
        /// version can be upgraded to from any other version. Downgrade is
        /// not supported. The value has to be 'true' or 'false'
        /// (case-sensitive) if present.
        /// </summary>
        public bool? DisallowMajorVersionUpgrade
        {
            get { return this._disallowMajorVersionUpgrade; }
            set { this._disallowMajorVersionUpgrade = value; }
        }
        
        private Uri _eula;
        
        /// <summary>
        /// Optional. Optional. URL string pointing to the EULA (End User
        /// License Agreement) of this version of extension. This is
        /// optionally specified by the third-party publishing the extension
        /// instead of Windows Azure. If the software requires any additional
        /// EULAs, a link to the EULA should be provided.
        /// </summary>
        public Uri Eula
        {
            get { return this._eula; }
            set { this._eula = value; }
        }
        
        private ExtensionEndpointConfiguration _extensionEndpoints;
        
        /// <summary>
        /// Optional. Optional. Declared endpoints to automatically add to each
        /// deployment with this extension added.
        /// </summary>
        public ExtensionEndpointConfiguration ExtensionEndpoints
        {
            get { return this._extensionEndpoints; }
            set { this._extensionEndpoints = value; }
        }
        
        private Uri _homepageUri;
        
        /// <summary>
        /// Optional. Optional. URL string pointing to homepage of this version
        /// of extension. This is optionally specified by the third-party
        /// publishing the extension instead of Azure. The homepage should
        /// have usage information and contact information for customer
        /// support.
        /// </summary>
        public Uri HomepageUri
        {
            get { return this._homepageUri; }
            set { this._homepageUri = value; }
        }
        
        private string _hostingResources;
        
        /// <summary>
        /// Optional. Required. The supported hosting resources. It must
        /// contain 'WebRole' and/or 'WorkerRole'. E.g. 'WebRole|WorkerRole'
        /// or 'WebRole|WorkerRole|VmRole'.
        /// </summary>
        public string HostingResources
        {
            get { return this._hostingResources; }
            set { this._hostingResources = value; }
        }
        
        private bool? _isInternalExtension;
        
        /// <summary>
        /// Optional. Optional. If this is set to 'true' the extension is not
        /// visible for public use, i.e. being returned from list API's. It
        /// can be still accessed by referring to the ProviderNamespace, Type
        /// & Version combo. Therefore an internal extension is intended only
        /// for testing purpose. Its value has to be 'true' or 'false'
        /// (case-sensitive) if present.
        /// </summary>
        public bool? IsInternalExtension
        {
            get { return this._isInternalExtension; }
            set { this._isInternalExtension = value; }
        }
        
        private bool? _isJsonExtension;
        
        /// <summary>
        /// Optional. Optional. If this is set to 'true' the extension is
        /// expected to receive JSON based configuration. If this is set to
        /// 'false' the extension is expected to receive XML based
        /// configuration. Its value has to be 'true' or 'false'
        /// (case-sensitive) if present.
        /// </summary>
        public bool? IsJsonExtension
        {
            get { return this._isJsonExtension; }
            set { this._isJsonExtension = value; }
        }
        
        private string _label;
        
        /// <summary>
        /// Optional. Required. A one line label of the extension.
        /// </summary>
        public string Label
        {
            get { return this._label; }
            set { this._label = value; }
        }
        
        private IList<ExtensionLocalResourceConfiguration> _localResources;
        
        /// <summary>
        /// Optional. Declared local resources used inside guest VM by the
        /// extension. Optional.
        /// </summary>
        public IList<ExtensionLocalResourceConfiguration> LocalResources
        {
            get { return this._localResources; }
            set { this._localResources = value; }
        }
        
        private Uri _mediaLink;
        
        /// <summary>
        /// Optional. Required. URI string pointing to the ZIP package of the
        /// extension. The ZIP package has to include the extension executable
        /// and other supporting files, and the PluginManifest.xml manifest.
        /// MediaLink value must point to a URL (either Http or Https) in a
        /// Azure blob storage and is downloadable. Windows Azure will copy
        /// the extension package from this source location and replicate it
        /// to all regions. The typical time for replication to complete is 20
        /// minutes.
        /// </summary>
        public Uri MediaLink
        {
            get { return this._mediaLink; }
            set { this._mediaLink = value; }
        }
        
        private Uri _privacyUri;
        
        /// <summary>
        /// Optional. Optional. URL string pointing to privacy document of this
        /// version of extension. This is optionally specified by the
        /// third-party publishing the extension instead of Azure. If the
        /// software collects any data and transfers out the guest VM, then an
        /// additional privacy document might be needed.
        /// </summary>
        public Uri PrivacyUri
        {
            get { return this._privacyUri; }
            set { this._privacyUri = value; }
        }
        
        private string _privateConfigurationSchema;
        
        /// <summary>
        /// Optional. Optional. The XSD schema of private configuration data.
        /// </summary>
        public string PrivateConfigurationSchema
        {
            get { return this._privateConfigurationSchema; }
            set { this._privateConfigurationSchema = value; }
        }
        
        private string _providerNameSpace;
        
        /// <summary>
        /// Required. Required. The provider namespace of the extension.
        /// </summary>
        public string ProviderNameSpace
        {
            get { return this._providerNameSpace; }
            set { this._providerNameSpace = value; }
        }
        
        private string _publicConfigurationSchema;
        
        /// <summary>
        /// Optional. Optional. The XSD schema of public configuration data.
        /// </summary>
        public string PublicConfigurationSchema
        {
            get { return this._publicConfigurationSchema; }
            set { this._publicConfigurationSchema = value; }
        }
        
        private System.DateTime? _publishedDate;
        
        /// <summary>
        /// Optional. Publisher can set it to any arbitrary date, and this is
        /// only for display purpose. If not specified by publisher, Azure
        /// will automatically assign the UTC time when the extension request
        /// was received.
        /// </summary>
        public System.DateTime? PublishedDate
        {
            get { return this._publishedDate; }
            set { this._publishedDate = value; }
        }
        
        private string _publisherName;
        
        /// <summary>
        /// Optional. Optional. Publisher name text.
        /// </summary>
        public string PublisherName
        {
            get { return this._publisherName; }
            set { this._publisherName = value; }
        }
        
        private string _regions;
        
        /// <summary>
        /// Optional. String property containing the name of the regions
        /// required for the slice.
        /// </summary>
        public string Regions
        {
            get { return this._regions; }
            set { this._regions = value; }
        }
        
        private bool? _replicationCompleted;
        
        /// <summary>
        /// Optional. Indicates whether this version of extension has been
        /// replicated to all regions or not. If true, then the given
        /// extension version can be used in creating or updating deployments.
        /// Otherwise, the given extension version might cause failure in
        /// creating or updating deployments. The typical time is 20 minutes
        /// for a newly-registered or newly-updated extension to replicate
        /// completely by Azure.
        /// </summary>
        public bool? ReplicationCompleted
        {
            get { return this._replicationCompleted; }
            set { this._replicationCompleted = value; }
        }
        
        private string _sampleConfig;
        
        /// <summary>
        /// Optional. Optional. A sample configuration for the extension. It
        /// can be downloaded by users, and the user can replace with
        /// customized input parameters. The sample configuration should be
        /// sufficiently commented. If configuration data are in XML format,
        /// then the XML document-level element must be 'Configuration', and
        /// the optional public configuration data corresponds to a child
        /// element of 'PublicConfig', and the optional private configuration
        /// data corresponds to a child element of 'PrivateConfig'. The sample
        /// configuration data should be validated against public and private
        /// configuration schema by the publisher.
        /// </summary>
        public string SampleConfig
        {
            get { return this._sampleConfig; }
            set { this._sampleConfig = value; }
        }
        
        private string _supportedOS;
        
        /// <summary>
        /// Optional. String property indicating the OS which the extension
        /// supports. Current values are 'Windows' or 'Linux'.
        /// </summary>
        public string SupportedOS
        {
            get { return this._supportedOS; }
            set { this._supportedOS = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Required. Required. The type of the extension.
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        private string _version;
        
        /// <summary>
        /// Required. Required. The version of the extension.
        /// </summary>
        public string Version
        {
            get { return this._version; }
            set { this._version = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ExtensionImage class.
        /// </summary>
        public ExtensionImage()
        {
            this.LocalResources = new LazyList<ExtensionLocalResourceConfiguration>();
        }
        
        /// <summary>
        /// Initializes a new instance of the ExtensionImage class with
        /// required arguments.
        /// </summary>
        public ExtensionImage(string providerNameSpace, string type, string version)
            : this()
        {
            if (providerNameSpace == null)
            {
                throw new ArgumentNullException("providerNameSpace");
            }
            if (type == null)
            {
                throw new ArgumentNullException("type");
            }
            if (version == null)
            {
                throw new ArgumentNullException("version");
            }
            this.ProviderNameSpace = providerNameSpace;
            this.Type = type;
            this.Version = version;
        }
    }
}
