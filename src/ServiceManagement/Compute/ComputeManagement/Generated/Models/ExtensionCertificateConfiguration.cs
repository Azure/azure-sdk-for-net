// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;

namespace Microsoft.WindowsAzure.Management.Compute.Models
{
    /// <summary>
    /// Optional. Parameters of the the certificate for encrypting the private
    /// configuration data. Supported on WebRole or WorkerRole, but ignored on
    /// VmRole.
    /// </summary>
    public partial class ExtensionCertificateConfiguration
    {
        private string _storeLocation;
        
        /// <summary>
        /// Required. Required for certificate declaration. The Windows
        /// certificate store location to install the certificate for
        /// encryption, if required. Its value has to be 'LocalMachine' if
        /// present.
        /// </summary>
        public string StoreLocation
        {
            get { return this._storeLocation; }
            set { this._storeLocation = value; }
        }
        
        private string _storeName;
        
        /// <summary>
        /// Optional. Optional. The Windows certificate store name to install
        /// the certificate for encryption, if required. Its value has to be
        /// 'My' if present.
        /// </summary>
        public string StoreName
        {
            get { return this._storeName; }
            set { this._storeName = value; }
        }
        
        private string _thumbprintAlgorithm;
        
        /// <summary>
        /// Optional. Optional. The thumbprint algorithm of the certificate for
        /// encryption, if required. Its value has to be 'sha1' if present.
        /// </summary>
        public string ThumbprintAlgorithm
        {
            get { return this._thumbprintAlgorithm; }
            set { this._thumbprintAlgorithm = value; }
        }
        
        private bool? _thumbprintRequired;
        
        /// <summary>
        /// Optional. Optional. Whether thumbprint is required for the
        /// certificate for encryption or not. Its value has to be 'true' or
        /// 'false' (case-sensitive) if present.
        /// </summary>
        public bool? ThumbprintRequired
        {
            get { return this._thumbprintRequired; }
            set { this._thumbprintRequired = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ExtensionCertificateConfiguration
        /// class.
        /// </summary>
        public ExtensionCertificateConfiguration()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the ExtensionCertificateConfiguration
        /// class with required arguments.
        /// </summary>
        public ExtensionCertificateConfiguration(string storeLocation)
            : this()
        {
            if (storeLocation == null)
            {
                throw new ArgumentNullException("storeLocation");
            }
            this.StoreLocation = storeLocation;
        }
    }
}
