// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.WebSitesExtensions;
using Microsoft.WindowsAzure.WebSitesExtensions.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.WebSitesExtensions
{
    /// <summary>
    /// Operations for managing Triggered WebJobs.
    /// </summary>
    internal partial class TriggeredWebJobOperations : IServiceOperations<WebSiteExtensionsClient>, ITriggeredWebJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the TriggeredWebJobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TriggeredWebJobOperations(WebSiteExtensionsClient client)
        {
            this._client = client;
        }
        
        private WebSiteExtensionsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.WebSiteExtensionsClient.
        /// </summary>
        public WebSiteExtensionsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Delete a triggered WebJob.
        /// </summary>
        /// <param name='jobName'>
        /// Required. The triggered WebJob name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered/";
            url = url + Uri.EscapeDataString(jobName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a triggered web job.
        /// </summary>
        /// <param name='jobName'>
        /// Required. The triggered WebJob name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get triggered WebJob Operation Response.
        /// </returns>
        public async Task<TriggeredWebJobGetResponse> GetAsync(string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered/";
            url = url + Uri.EscapeDataString(jobName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TriggeredWebJobGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TriggeredWebJobGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TriggeredWebJob triggeredWebJobInstance = new TriggeredWebJob();
                            result.TriggeredWebJob = triggeredWebJobInstance;
                            
                            JToken latestRunValue = responseDoc["latest_run"];
                            if (latestRunValue != null && latestRunValue.Type != JTokenType.Null)
                            {
                                TriggeredWebJobRun latestRunInstance = new TriggeredWebJobRun();
                                triggeredWebJobInstance.LatestRun = latestRunInstance;
                                
                                JToken idValue = latestRunValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    latestRunInstance.Id = idInstance;
                                }
                                
                                JToken statusValue = latestRunValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    string statusInstance = ((string)statusValue);
                                    latestRunInstance.Status = statusInstance;
                                }
                                
                                JToken startTimeValue = latestRunValue["start_time"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                    latestRunInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = latestRunValue["end_time"];
                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                    latestRunInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken durationValue = latestRunValue["duration"];
                                if (durationValue != null && durationValue.Type != JTokenType.Null)
                                {
                                    TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                    latestRunInstance.Duration = durationInstance;
                                }
                                
                                JToken outputUrlValue = latestRunValue["output_url"];
                                if (outputUrlValue != null && outputUrlValue.Type != JTokenType.Null)
                                {
                                    Uri outputUrlInstance = TypeConversion.TryParseUri(((string)outputUrlValue));
                                    latestRunInstance.OutputUrl = outputUrlInstance;
                                }
                                
                                JToken urlValue = latestRunValue["url"];
                                if (urlValue != null && urlValue.Type != JTokenType.Null)
                                {
                                    Uri urlInstance = TypeConversion.TryParseUri(((string)urlValue));
                                    latestRunInstance.Url = urlInstance;
                                }
                                
                                JToken jobNameValue = latestRunValue["job_name"];
                                if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                {
                                    string jobNameInstance = ((string)jobNameValue);
                                    latestRunInstance.JobName = jobNameInstance;
                                }
                            }
                            
                            JToken historyUrlValue = responseDoc["history_url"];
                            if (historyUrlValue != null && historyUrlValue.Type != JTokenType.Null)
                            {
                                string historyUrlInstance = ((string)historyUrlValue);
                                triggeredWebJobInstance.HistoryUrl = historyUrlInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                triggeredWebJobInstance.Name = nameInstance;
                            }
                            
                            JToken runCommandValue = responseDoc["run_command"];
                            if (runCommandValue != null && runCommandValue.Type != JTokenType.Null)
                            {
                                string runCommandInstance = ((string)runCommandValue);
                                triggeredWebJobInstance.RunCommand = runCommandInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                WebJobType typeInstance = WebSiteExtensionsClient.ParseWebJobType(((string)typeValue));
                                triggeredWebJobInstance.Type = typeInstance;
                            }
                            
                            JToken urlValue2 = responseDoc["url"];
                            if (urlValue2 != null && urlValue2.Type != JTokenType.Null)
                            {
                                Uri urlInstance2 = TypeConversion.TryParseUri(((string)urlValue2));
                                triggeredWebJobInstance.Url = urlInstance2;
                            }
                            
                            JToken extraInfoUrlValue = responseDoc["extra_info_url"];
                            if (extraInfoUrlValue != null && extraInfoUrlValue.Type != JTokenType.Null)
                            {
                                string extraInfoUrlInstance = ((string)extraInfoUrlValue);
                                triggeredWebJobInstance.ExtraInfoUrl = extraInfoUrlInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                string errorInstance = ((string)errorValue);
                                triggeredWebJobInstance.Error = errorInstance;
                            }
                            
                            JToken usingSdkValue = responseDoc["using_sdk"];
                            if (usingSdkValue != null && usingSdkValue.Type != JTokenType.Null)
                            {
                                bool usingSdkInstance = ((bool)usingSdkValue);
                                triggeredWebJobInstance.UsingSdk = usingSdkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a web job run.
        /// </summary>
        /// <param name='jobName'>
        /// Required. The triggered WebJob name.
        /// </param>
        /// <param name='jobRunId'>
        /// Required. The triggered WebJob run identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get triggered WebJob Run operation response.
        /// </returns>
        public async Task<TriggeredWebJobGetRunResponse> GetRunAsync(string jobName, string jobRunId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (jobRunId == null)
            {
                throw new ArgumentNullException("jobRunId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("jobRunId", jobRunId);
                TracingAdapter.Enter(invocationId, this, "GetRunAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/history/";
            url = url + Uri.EscapeDataString(jobRunId);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TriggeredWebJobGetRunResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TriggeredWebJobGetRunResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            TriggeredWebJobRun triggeredJobRunInstance = new TriggeredWebJobRun();
                            result.TriggeredJobRun = triggeredJobRunInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                triggeredJobRunInstance.Id = idInstance;
                            }
                            
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                string statusInstance = ((string)statusValue);
                                triggeredJobRunInstance.Status = statusInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["start_time"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                triggeredJobRunInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = responseDoc["end_time"];
                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                            {
                                DateTime endTimeInstance = ((DateTime)endTimeValue);
                                triggeredJobRunInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken durationValue = responseDoc["duration"];
                            if (durationValue != null && durationValue.Type != JTokenType.Null)
                            {
                                TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                triggeredJobRunInstance.Duration = durationInstance;
                            }
                            
                            JToken outputUrlValue = responseDoc["output_url"];
                            if (outputUrlValue != null && outputUrlValue.Type != JTokenType.Null)
                            {
                                Uri outputUrlInstance = TypeConversion.TryParseUri(((string)outputUrlValue));
                                triggeredJobRunInstance.OutputUrl = outputUrlInstance;
                            }
                            
                            JToken urlValue = responseDoc["url"];
                            if (urlValue != null && urlValue.Type != JTokenType.Null)
                            {
                                Uri urlInstance = TypeConversion.TryParseUri(((string)urlValue));
                                triggeredJobRunInstance.Url = urlInstance;
                            }
                            
                            JToken jobNameValue = responseDoc["job_name"];
                            if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                            {
                                string jobNameInstance = ((string)jobNameValue);
                                triggeredJobRunInstance.JobName = jobNameInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the settings of a triggered WebJob.
        /// </summary>
        /// <param name='jobName'>
        /// Required. The triggered WebJob name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The triggered WebJob settings operation response.
        /// </returns>
        public async Task<TriggeredWebJobSettingsResponse> GetSettingsAsync(string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                TracingAdapter.Enter(invocationId, this, "GetSettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/settings";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TriggeredWebJobSettingsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TriggeredWebJobSettingsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken shutdownGraceTimeInSecondsValue = responseDoc["ShutdownGraceTimeInSeconds"];
                            if (shutdownGraceTimeInSecondsValue != null && shutdownGraceTimeInSecondsValue.Type != JTokenType.Null)
                            {
                                int shutdownGraceTimeInSecondsInstance = ((int)shutdownGraceTimeInSecondsValue);
                                result.ShutdownGraceTimeInSeconds = shutdownGraceTimeInSecondsInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the triggered WebJobs.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of triggered WebJobs operation response.
        /// </returns>
        public async Task<TriggeredWebJobListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TriggeredWebJobListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TriggeredWebJobListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken triggeredWebJobsArray = responseDoc;
                            if (triggeredWebJobsArray != null && triggeredWebJobsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken triggeredWebJobsValue in ((JArray)triggeredWebJobsArray))
                                {
                                    TriggeredWebJob triggeredWebJobInstance = new TriggeredWebJob();
                                    result.TriggeredWebJobs.Add(triggeredWebJobInstance);
                                    
                                    JToken latestRunValue = triggeredWebJobsValue["latest_run"];
                                    if (latestRunValue != null && latestRunValue.Type != JTokenType.Null)
                                    {
                                        TriggeredWebJobRun latestRunInstance = new TriggeredWebJobRun();
                                        triggeredWebJobInstance.LatestRun = latestRunInstance;
                                        
                                        JToken idValue = latestRunValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            latestRunInstance.Id = idInstance;
                                        }
                                        
                                        JToken statusValue = latestRunValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            string statusInstance = ((string)statusValue);
                                            latestRunInstance.Status = statusInstance;
                                        }
                                        
                                        JToken startTimeValue = latestRunValue["start_time"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            latestRunInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken endTimeValue = latestRunValue["end_time"];
                                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime endTimeInstance = ((DateTime)endTimeValue);
                                            latestRunInstance.EndTime = endTimeInstance;
                                        }
                                        
                                        JToken durationValue = latestRunValue["duration"];
                                        if (durationValue != null && durationValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                            latestRunInstance.Duration = durationInstance;
                                        }
                                        
                                        JToken outputUrlValue = latestRunValue["output_url"];
                                        if (outputUrlValue != null && outputUrlValue.Type != JTokenType.Null)
                                        {
                                            Uri outputUrlInstance = TypeConversion.TryParseUri(((string)outputUrlValue));
                                            latestRunInstance.OutputUrl = outputUrlInstance;
                                        }
                                        
                                        JToken urlValue = latestRunValue["url"];
                                        if (urlValue != null && urlValue.Type != JTokenType.Null)
                                        {
                                            Uri urlInstance = TypeConversion.TryParseUri(((string)urlValue));
                                            latestRunInstance.Url = urlInstance;
                                        }
                                        
                                        JToken jobNameValue = latestRunValue["job_name"];
                                        if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                        {
                                            string jobNameInstance = ((string)jobNameValue);
                                            latestRunInstance.JobName = jobNameInstance;
                                        }
                                    }
                                    
                                    JToken historyUrlValue = triggeredWebJobsValue["history_url"];
                                    if (historyUrlValue != null && historyUrlValue.Type != JTokenType.Null)
                                    {
                                        string historyUrlInstance = ((string)historyUrlValue);
                                        triggeredWebJobInstance.HistoryUrl = historyUrlInstance;
                                    }
                                    
                                    JToken nameValue = triggeredWebJobsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        triggeredWebJobInstance.Name = nameInstance;
                                    }
                                    
                                    JToken runCommandValue = triggeredWebJobsValue["run_command"];
                                    if (runCommandValue != null && runCommandValue.Type != JTokenType.Null)
                                    {
                                        string runCommandInstance = ((string)runCommandValue);
                                        triggeredWebJobInstance.RunCommand = runCommandInstance;
                                    }
                                    
                                    JToken typeValue = triggeredWebJobsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        WebJobType typeInstance = WebSiteExtensionsClient.ParseWebJobType(((string)typeValue));
                                        triggeredWebJobInstance.Type = typeInstance;
                                    }
                                    
                                    JToken urlValue2 = triggeredWebJobsValue["url"];
                                    if (urlValue2 != null && urlValue2.Type != JTokenType.Null)
                                    {
                                        Uri urlInstance2 = TypeConversion.TryParseUri(((string)urlValue2));
                                        triggeredWebJobInstance.Url = urlInstance2;
                                    }
                                    
                                    JToken extraInfoUrlValue = triggeredWebJobsValue["extra_info_url"];
                                    if (extraInfoUrlValue != null && extraInfoUrlValue.Type != JTokenType.Null)
                                    {
                                        string extraInfoUrlInstance = ((string)extraInfoUrlValue);
                                        triggeredWebJobInstance.ExtraInfoUrl = extraInfoUrlInstance;
                                    }
                                    
                                    JToken errorValue = triggeredWebJobsValue["error"];
                                    if (errorValue != null && errorValue.Type != JTokenType.Null)
                                    {
                                        string errorInstance = ((string)errorValue);
                                        triggeredWebJobInstance.Error = errorInstance;
                                    }
                                    
                                    JToken usingSdkValue = triggeredWebJobsValue["using_sdk"];
                                    if (usingSdkValue != null && usingSdkValue.Type != JTokenType.Null)
                                    {
                                        bool usingSdkInstance = ((bool)usingSdkValue);
                                        triggeredWebJobInstance.UsingSdk = usingSdkInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the triggered WebJob runs.
        /// </summary>
        /// <param name='jobName'>
        /// Required. The triggered WebJob name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The triggered WebJob run list operation response.
        /// </returns>
        public async Task<TriggeredWebJobRunListResponse> ListRunsAsync(string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                TracingAdapter.Enter(invocationId, this, "ListRunsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/history";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TriggeredWebJobRunListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TriggeredWebJobRunListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken runsArray = responseDoc["runs"];
                            if (runsArray != null && runsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken runsValue in ((JArray)runsArray))
                                {
                                    TriggeredWebJobRun triggeredWebJobRunInstance = new TriggeredWebJobRun();
                                    result.TriggeredWebJobRuns.Add(triggeredWebJobRunInstance);
                                    
                                    JToken idValue = runsValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        triggeredWebJobRunInstance.Id = idInstance;
                                    }
                                    
                                    JToken statusValue = runsValue["status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        triggeredWebJobRunInstance.Status = statusInstance;
                                    }
                                    
                                    JToken startTimeValue = runsValue["start_time"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        triggeredWebJobRunInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = runsValue["end_time"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        triggeredWebJobRunInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken durationValue = runsValue["duration"];
                                    if (durationValue != null && durationValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                        triggeredWebJobRunInstance.Duration = durationInstance;
                                    }
                                    
                                    JToken outputUrlValue = runsValue["output_url"];
                                    if (outputUrlValue != null && outputUrlValue.Type != JTokenType.Null)
                                    {
                                        Uri outputUrlInstance = TypeConversion.TryParseUri(((string)outputUrlValue));
                                        triggeredWebJobRunInstance.OutputUrl = outputUrlInstance;
                                    }
                                    
                                    JToken urlValue = runsValue["url"];
                                    if (urlValue != null && urlValue.Type != JTokenType.Null)
                                    {
                                        Uri urlInstance = TypeConversion.TryParseUri(((string)urlValue));
                                        triggeredWebJobRunInstance.Url = urlInstance;
                                    }
                                    
                                    JToken jobNameValue = runsValue["job_name"];
                                    if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                    {
                                        string jobNameInstance = ((string)jobNameValue);
                                        triggeredWebJobRunInstance.JobName = jobNameInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Run a triggered WebJob.
        /// </summary>
        /// <param name='jobName'>
        /// Required. The triggered WebJob name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RunAsync(string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                TracingAdapter.Enter(invocationId, this, "RunAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/run";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Set the settings of a triggered WebJob (will replace the current
        /// settings of the WebJob).
        /// </summary>
        /// <param name='jobName'>
        /// Required. The triggered WebJob name.
        /// </param>
        /// <param name='settings'>
        /// Required. The triggered WebJob settings.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SetSettingsAsync(string jobName, TriggeredWebJobSettingsUpdateParameters settings, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (settings == null)
            {
                throw new ArgumentNullException("settings");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("settings", settings);
                TracingAdapter.Enter(invocationId, this, "SetSettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/settings";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject triggeredWebJobSettingsUpdateParametersValue = new JObject();
                requestDoc = triggeredWebJobSettingsUpdateParametersValue;
                
                if (settings.ShutdownGraceTimeInSeconds != null)
                {
                    triggeredWebJobSettingsUpdateParametersValue["ShutdownGraceTimeInSeconds"] = settings.ShutdownGraceTimeInSeconds.Value;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or replace a triggered WebJob with a script file (.exe,
        /// .bat, .php, .js...).
        /// </summary>
        /// <param name='jobName'>
        /// Required. The triggered WebJob name.
        /// </param>
        /// <param name='fileName'>
        /// Required. The file name.
        /// </param>
        /// <param name='jobContent'>
        /// Required. The file content.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UploadFileAsync(string jobName, string fileName, Stream jobContent, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName");
            }
            if (jobContent == null)
            {
                throw new ArgumentNullException("jobContent");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("fileName", fileName);
                tracingParameters.Add("jobContent", jobContent);
                TracingAdapter.Enter(invocationId, this, "UploadFileAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered/";
            url = url + Uri.EscapeDataString(jobName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = jobContent;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                httpRequest.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment") { FileName = fileName };
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or replace a triggered WebJob with a zip file (containing
        /// the WebJob binaries).
        /// </summary>
        /// <param name='jobName'>
        /// Required. The triggered WebJob name.
        /// </param>
        /// <param name='fileName'>
        /// Required. The zip file name.
        /// </param>
        /// <param name='jobContent'>
        /// Required. The zip file content.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UploadZipAsync(string jobName, string fileName, Stream jobContent, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName");
            }
            if (jobContent == null)
            {
                throw new ArgumentNullException("jobContent");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("fileName", fileName);
                tracingParameters.Add("jobContent", jobContent);
                TracingAdapter.Enter(invocationId, this, "UploadZipAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/api/jobs/triggered/";
            url = url + Uri.EscapeDataString(jobName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = jobContent;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/zip");
                httpRequest.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment") { FileName = fileName };
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
