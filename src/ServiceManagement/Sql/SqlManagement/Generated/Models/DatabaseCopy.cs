// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using Microsoft.WindowsAzure.Management.Sql.Models;

namespace Microsoft.WindowsAzure.Management.Sql.Models
{
    /// <summary>
    /// Represents the Azure SQL Database copy.
    /// </summary>
    public partial class DatabaseCopy : SqlModelCommon
    {
        private string _destinationDatabaseName;
        
        /// <summary>
        /// Optional. Gets the name of the destination database.
        /// </summary>
        public string DestinationDatabaseName
        {
            get { return this._destinationDatabaseName; }
            set { this._destinationDatabaseName = value; }
        }
        
        private string _destinationServerName;
        
        /// <summary>
        /// Optional. Gets the name of the destination server.
        /// </summary>
        public string DestinationServerName
        {
            get { return this._destinationServerName; }
            set { this._destinationServerName = value; }
        }
        
        private bool _isContinuous;
        
        /// <summary>
        /// Optional. Gets a value that indicates whether the copy is continous.
        /// </summary>
        public bool IsContinuous
        {
            get { return this._isContinuous; }
            set { this._isContinuous = value; }
        }
        
        private bool _isInterlinkConnected;
        
        /// <summary>
        /// Optional. Gets a value that indicates whether the database copy is
        /// interlink connected.
        /// </summary>
        public bool IsInterlinkConnected
        {
            get { return this._isInterlinkConnected; }
            set { this._isInterlinkConnected = value; }
        }
        
        private bool _isLocalDatabaseReplicationTarget;
        
        /// <summary>
        /// Optional. Gets a value that indicates whether the local database is
        /// the replication target.
        /// </summary>
        public bool IsLocalDatabaseReplicationTarget
        {
            get { return this._isLocalDatabaseReplicationTarget; }
            set { this._isLocalDatabaseReplicationTarget = value; }
        }
        
        private bool _isOfflineSecondary;
        
        /// <summary>
        /// Optional. Gets a value indicating whether it is an offline
        /// secondary copy.
        /// </summary>
        public bool IsOfflineSecondary
        {
            get { return this._isOfflineSecondary; }
            set { this._isOfflineSecondary = value; }
        }
        
        private bool _isTerminationAllowed;
        
        /// <summary>
        /// Optional. Gets a value indicating whether forced termination of
        /// this continuous copy is allowed.
        /// </summary>
        public bool IsTerminationAllowed
        {
            get { return this._isTerminationAllowed; }
            set { this._isTerminationAllowed = value; }
        }
        
        private int _localDatabaseId;
        
        /// <summary>
        /// Optional. Gets the ID of the local database.
        /// </summary>
        public int LocalDatabaseId
        {
            get { return this._localDatabaseId; }
            set { this._localDatabaseId = value; }
        }
        
        private string _modifyDate;
        
        /// <summary>
        /// Optional. Gets the UTC date when the database copy became
        /// transactionally consistent.
        /// </summary>
        public string ModifyDate
        {
            get { return this._modifyDate; }
            set { this._modifyDate = value; }
        }
        
        private float _percentComplete;
        
        /// <summary>
        /// Optional. Gets the progress towards copy completion.
        /// </summary>
        public float PercentComplete
        {
            get { return this._percentComplete; }
            set { this._percentComplete = value; }
        }
        
        private byte _replicationState;
        
        /// <summary>
        /// Optional. Gets a value indicating the replication state for the
        /// database.
        /// </summary>
        public byte ReplicationState
        {
            get { return this._replicationState; }
            set { this._replicationState = value; }
        }
        
        private string _replicationStateDescription;
        
        /// <summary>
        /// Optional. Gets a description of the replication state for the
        /// database.
        /// </summary>
        public string ReplicationStateDescription
        {
            get { return this._replicationStateDescription; }
            set { this._replicationStateDescription = value; }
        }
        
        private string _sourceDatabaseName;
        
        /// <summary>
        /// Optional. Gets the name of the source database.
        /// </summary>
        public string SourceDatabaseName
        {
            get { return this._sourceDatabaseName; }
            set { this._sourceDatabaseName = value; }
        }
        
        private string _sourceServerName;
        
        /// <summary>
        /// Optional. Gets the name of the source server.
        /// </summary>
        public string SourceServerName
        {
            get { return this._sourceServerName; }
            set { this._sourceServerName = value; }
        }
        
        private string _startDate;
        
        /// <summary>
        /// Optional. Gets the UTC date when the database copy was initiated.
        /// </summary>
        public string StartDate
        {
            get { return this._startDate; }
            set { this._startDate = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseCopy class.
        /// </summary>
        public DatabaseCopy()
        {
        }
    }
}
