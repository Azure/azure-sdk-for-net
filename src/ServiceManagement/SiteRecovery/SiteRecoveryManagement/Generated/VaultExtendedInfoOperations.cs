// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.SiteRecovery;
using Microsoft.WindowsAzure.Management.SiteRecovery.Models;

namespace Microsoft.WindowsAzure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of vault extended info operations for the Site Recovery
    /// extension.
    /// </summary>
    internal partial class VaultExtendedInfoOperations : IServiceOperations<SiteRecoveryManagementClient>, IVaultExtendedInfoOperations
    {
        /// <summary>
        /// Initializes a new instance of the VaultExtendedInfoOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VaultExtendedInfoOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the vault extended info.
        /// </summary>
        /// <param name='extendedInfoArgs'>
        /// Required. Create resource exnteded info input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateExtendedInfoAsync(ResourceExtendedInformationArgs extendedInfoArgs, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (extendedInfoArgs == null)
            {
                throw new ArgumentNullException("extendedInfoArgs");
            }
            if (extendedInfoArgs.ContractVersion == null)
            {
                throw new ArgumentNullException("extendedInfoArgs.ContractVersion");
            }
            if (extendedInfoArgs.ExtendedInfo == null)
            {
                throw new ArgumentNullException("extendedInfoArgs.ExtendedInfo");
            }
            if (extendedInfoArgs.ExtendedInfoETag == null)
            {
                throw new ArgumentNullException("extendedInfoArgs.ExtendedInfoETag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("extendedInfoArgs", extendedInfoArgs);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateExtendedInfoAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ExtendedInfo";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement resourceExtendedInformationArgsElement = new XElement(XName.Get("ResourceExtendedInformationArgs", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(resourceExtendedInformationArgsElement);
                
                XElement contractVersionElement = new XElement(XName.Get("ContractVersion", "http://schemas.microsoft.com/windowsazure"));
                contractVersionElement.Value = extendedInfoArgs.ContractVersion;
                resourceExtendedInformationArgsElement.Add(contractVersionElement);
                
                XElement extendedInfoElement = new XElement(XName.Get("ExtendedInfo", "http://schemas.microsoft.com/windowsazure"));
                extendedInfoElement.Value = extendedInfoArgs.ExtendedInfo;
                resourceExtendedInformationArgsElement.Add(extendedInfoElement);
                
                XElement extendedInfoETagElement = new XElement(XName.Get("ExtendedInfoETag", "http://schemas.microsoft.com/windowsazure"));
                extendedInfoETagElement.Value = extendedInfoArgs.ExtendedInfoETag;
                resourceExtendedInformationArgsElement.Add(extendedInfoETagElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the vault extended info.
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the resource extended information object
        /// </returns>
        public async Task<ResourceExtendedInformationResponse> GetExtendedInfoAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetExtendedInfoAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ExtendedInfo";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceExtendedInformationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ResourceExtendedInformationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement resourceExtendedInformationElement = responseDoc.Element(XName.Get("ResourceExtendedInformation", "http://schemas.microsoft.com/windowsazure"));
                        if (resourceExtendedInformationElement != null)
                        {
                            ResourceExtendedInformation resourceExtendedInformationInstance = new ResourceExtendedInformation();
                            result.ResourceExtendedInformation = resourceExtendedInformationInstance;
                            
                            XElement cloudServiceNameElement = resourceExtendedInformationElement.Element(XName.Get("CloudServiceName", "http://schemas.microsoft.com/windowsazure"));
                            if (cloudServiceNameElement != null)
                            {
                                string cloudServiceNameInstance = cloudServiceNameElement.Value;
                                resourceExtendedInformationInstance.CloudServiceName = cloudServiceNameInstance;
                            }
                            
                            XElement contractVersionElement = resourceExtendedInformationElement.Element(XName.Get("ContractVersion", "http://schemas.microsoft.com/windowsazure"));
                            if (contractVersionElement != null)
                            {
                                string contractVersionInstance = contractVersionElement.Value;
                                resourceExtendedInformationInstance.ContractVersion = contractVersionInstance;
                            }
                            
                            XElement extendedInfoElement = resourceExtendedInformationElement.Element(XName.Get("ExtendedInfo", "http://schemas.microsoft.com/windowsazure"));
                            if (extendedInfoElement != null)
                            {
                                string extendedInfoInstance = extendedInfoElement.Value;
                                resourceExtendedInformationInstance.ExtendedInfo = extendedInfoInstance;
                            }
                            
                            XElement extendedInfoETagElement = resourceExtendedInformationElement.Element(XName.Get("ExtendedInfoETag", "http://schemas.microsoft.com/windowsazure"));
                            if (extendedInfoETagElement != null)
                            {
                                string extendedInfoETagInstance = extendedInfoETagElement.Value;
                                resourceExtendedInformationInstance.ExtendedInfoETag = extendedInfoETagInstance;
                            }
                            
                            XElement resourceIdElement = resourceExtendedInformationElement.Element(XName.Get("ResourceId", "http://schemas.microsoft.com/windowsazure"));
                            if (resourceIdElement != null)
                            {
                                long resourceIdInstance = long.Parse(resourceIdElement.Value, CultureInfo.InvariantCulture);
                                resourceExtendedInformationInstance.ResourceId = resourceIdInstance;
                            }
                            
                            XElement resourceNameElement = resourceExtendedInformationElement.Element(XName.Get("ResourceName", "http://schemas.microsoft.com/windowsazure"));
                            if (resourceNameElement != null)
                            {
                                string resourceNameInstance = resourceNameElement.Value;
                                resourceExtendedInformationInstance.ResourceName = resourceNameInstance;
                            }
                            
                            XElement resourceTypeElement = resourceExtendedInformationElement.Element(XName.Get("ResourceType", "http://schemas.microsoft.com/windowsazure"));
                            if (resourceTypeElement != null)
                            {
                                string resourceTypeInstance = resourceTypeElement.Value;
                                resourceExtendedInformationInstance.ResourceType = resourceTypeInstance;
                            }
                            
                            XElement subscriptionIdElement = resourceExtendedInformationElement.Element(XName.Get("SubscriptionId", "http://schemas.microsoft.com/windowsazure"));
                            if (subscriptionIdElement != null)
                            {
                                Guid subscriptionIdInstance = Guid.Parse(subscriptionIdElement.Value);
                                resourceExtendedInformationInstance.SubscriptionId = subscriptionIdInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the vault extended info.
        /// </summary>
        /// <param name='extendedInfoArgs'>
        /// Required. Update resource exnteded info input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the resource extended information object
        /// </returns>
        public async Task<ResourceExtendedInformationResponse> UpdateExtendedInfoAsync(ResourceExtendedInformationArgs extendedInfoArgs, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (extendedInfoArgs == null)
            {
                throw new ArgumentNullException("extendedInfoArgs");
            }
            if (extendedInfoArgs.ContractVersion == null)
            {
                throw new ArgumentNullException("extendedInfoArgs.ContractVersion");
            }
            if (extendedInfoArgs.ExtendedInfo == null)
            {
                throw new ArgumentNullException("extendedInfoArgs.ExtendedInfo");
            }
            if (extendedInfoArgs.ExtendedInfoETag == null)
            {
                throw new ArgumentNullException("extendedInfoArgs.ExtendedInfoETag");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("extendedInfoArgs", extendedInfoArgs);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateExtendedInfoAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ExtendedInfo";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement resourceExtendedInformationArgsElement = new XElement(XName.Get("ResourceExtendedInformationArgs", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(resourceExtendedInformationArgsElement);
                
                XElement contractVersionElement = new XElement(XName.Get("ContractVersion", "http://schemas.microsoft.com/windowsazure"));
                contractVersionElement.Value = extendedInfoArgs.ContractVersion;
                resourceExtendedInformationArgsElement.Add(contractVersionElement);
                
                XElement extendedInfoElement = new XElement(XName.Get("ExtendedInfo", "http://schemas.microsoft.com/windowsazure"));
                extendedInfoElement.Value = extendedInfoArgs.ExtendedInfo;
                resourceExtendedInformationArgsElement.Add(extendedInfoElement);
                
                XElement extendedInfoETagElement = new XElement(XName.Get("ExtendedInfoETag", "http://schemas.microsoft.com/windowsazure"));
                extendedInfoETagElement.Value = extendedInfoArgs.ExtendedInfoETag;
                resourceExtendedInformationArgsElement.Add(extendedInfoETagElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceExtendedInformationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ResourceExtendedInformationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement resourceExtendedInformationElement = responseDoc.Element(XName.Get("ResourceExtendedInformation", "http://schemas.microsoft.com/windowsazure"));
                        if (resourceExtendedInformationElement != null)
                        {
                            ResourceExtendedInformation resourceExtendedInformationInstance = new ResourceExtendedInformation();
                            result.ResourceExtendedInformation = resourceExtendedInformationInstance;
                            
                            XElement cloudServiceNameElement = resourceExtendedInformationElement.Element(XName.Get("CloudServiceName", "http://schemas.microsoft.com/windowsazure"));
                            if (cloudServiceNameElement != null)
                            {
                                string cloudServiceNameInstance = cloudServiceNameElement.Value;
                                resourceExtendedInformationInstance.CloudServiceName = cloudServiceNameInstance;
                            }
                            
                            XElement contractVersionElement2 = resourceExtendedInformationElement.Element(XName.Get("ContractVersion", "http://schemas.microsoft.com/windowsazure"));
                            if (contractVersionElement2 != null)
                            {
                                string contractVersionInstance = contractVersionElement2.Value;
                                resourceExtendedInformationInstance.ContractVersion = contractVersionInstance;
                            }
                            
                            XElement extendedInfoElement2 = resourceExtendedInformationElement.Element(XName.Get("ExtendedInfo", "http://schemas.microsoft.com/windowsazure"));
                            if (extendedInfoElement2 != null)
                            {
                                string extendedInfoInstance = extendedInfoElement2.Value;
                                resourceExtendedInformationInstance.ExtendedInfo = extendedInfoInstance;
                            }
                            
                            XElement extendedInfoETagElement2 = resourceExtendedInformationElement.Element(XName.Get("ExtendedInfoETag", "http://schemas.microsoft.com/windowsazure"));
                            if (extendedInfoETagElement2 != null)
                            {
                                string extendedInfoETagInstance = extendedInfoETagElement2.Value;
                                resourceExtendedInformationInstance.ExtendedInfoETag = extendedInfoETagInstance;
                            }
                            
                            XElement resourceIdElement = resourceExtendedInformationElement.Element(XName.Get("ResourceId", "http://schemas.microsoft.com/windowsazure"));
                            if (resourceIdElement != null)
                            {
                                long resourceIdInstance = long.Parse(resourceIdElement.Value, CultureInfo.InvariantCulture);
                                resourceExtendedInformationInstance.ResourceId = resourceIdInstance;
                            }
                            
                            XElement resourceNameElement = resourceExtendedInformationElement.Element(XName.Get("ResourceName", "http://schemas.microsoft.com/windowsazure"));
                            if (resourceNameElement != null)
                            {
                                string resourceNameInstance = resourceNameElement.Value;
                                resourceExtendedInformationInstance.ResourceName = resourceNameInstance;
                            }
                            
                            XElement resourceTypeElement = resourceExtendedInformationElement.Element(XName.Get("ResourceType", "http://schemas.microsoft.com/windowsazure"));
                            if (resourceTypeElement != null)
                            {
                                string resourceTypeInstance = resourceTypeElement.Value;
                                resourceExtendedInformationInstance.ResourceType = resourceTypeInstance;
                            }
                            
                            XElement subscriptionIdElement = resourceExtendedInformationElement.Element(XName.Get("SubscriptionId", "http://schemas.microsoft.com/windowsazure"));
                            if (subscriptionIdElement != null)
                            {
                                Guid subscriptionIdInstance = Guid.Parse(subscriptionIdElement.Value);
                                resourceExtendedInformationInstance.SubscriptionId = subscriptionIdInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the vault extended info.
        /// </summary>
        /// <param name='certificateArgs'>
        /// Required. Upload Vault Certificate input parameters.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the upload certificate response
        /// </returns>
        public async Task<UploadCertificateResponse> UploadCertificateAsync(CertificateArgs certificateArgs, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (certificateArgs == null)
            {
                throw new ArgumentNullException("certificateArgs");
            }
            if (certificateArgs.Certificate == null)
            {
                throw new ArgumentNullException("certificateArgs.Certificate");
            }
            if (certificateArgs.ContractVersion == null)
            {
                throw new ArgumentNullException("certificateArgs.ContractVersion");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("certificateArgs", certificateArgs);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UploadCertificateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/management/certificate";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement certificateArgsElement = new XElement(XName.Get("CertificateArgs", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(certificateArgsElement);
                
                XElement contractVersionElement = new XElement(XName.Get("ContractVersion", "http://schemas.microsoft.com/windowsazure"));
                contractVersionElement.Value = certificateArgs.ContractVersion;
                certificateArgsElement.Add(contractVersionElement);
                
                XElement certificateElement = new XElement(XName.Get("certificate", "http://schemas.microsoft.com/windowsazure"));
                certificateElement.Value = certificateArgs.Certificate;
                certificateArgsElement.Add(certificateElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UploadCertificateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UploadCertificateResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement uploadCertificateResponseElement = responseDoc.Element(XName.Get("UploadCertificateResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (uploadCertificateResponseElement != null)
                        {
                            XElement contractVersionElement2 = uploadCertificateResponseElement.Element(XName.Get("ContractVersion", "http://schemas.microsoft.com/windowsazure"));
                            if (contractVersionElement2 != null)
                            {
                                string contractVersionInstance = contractVersionElement2.Value;
                                result.ContractVersion = contractVersionInstance;
                            }
                            
                            XElement globalAcsHostNameElement = uploadCertificateResponseElement.Element(XName.Get("GlobalAcsHostName", "http://schemas.microsoft.com/windowsazure"));
                            if (globalAcsHostNameElement != null)
                            {
                                string globalAcsHostNameInstance = globalAcsHostNameElement.Value;
                                result.GlobalAcsHostName = globalAcsHostNameInstance;
                            }
                            
                            XElement globalAcsNamespaceElement = uploadCertificateResponseElement.Element(XName.Get("GlobalAcsNamespace", "http://schemas.microsoft.com/windowsazure"));
                            if (globalAcsNamespaceElement != null)
                            {
                                string globalAcsNamespaceInstance = globalAcsNamespaceElement.Value;
                                result.GlobalAcsNamespace = globalAcsNamespaceInstance;
                            }
                            
                            XElement globalAcsRPRealmElement = uploadCertificateResponseElement.Element(XName.Get("GlobalAcsRPRealm", "http://schemas.microsoft.com/windowsazure"));
                            if (globalAcsRPRealmElement != null)
                            {
                                string globalAcsRPRealmInstance = globalAcsRPRealmElement.Value;
                                result.GlobalAcsRPRealm = globalAcsRPRealmInstance;
                            }
                            
                            XElement resourceIdElement = uploadCertificateResponseElement.Element(XName.Get("ResourceId", "http://schemas.microsoft.com/windowsazure"));
                            if (resourceIdElement != null)
                            {
                                long resourceIdInstance = long.Parse(resourceIdElement.Value, CultureInfo.InvariantCulture);
                                result.ResourceId = resourceIdInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
