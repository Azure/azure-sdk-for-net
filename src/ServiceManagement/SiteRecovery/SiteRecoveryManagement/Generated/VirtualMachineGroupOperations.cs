// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.SiteRecovery;
using Microsoft.WindowsAzure.Management.SiteRecovery.Models;

namespace Microsoft.WindowsAzure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of virtual machine operations for the Site Recovery
    /// extension.
    /// </summary>
    internal partial class VirtualMachineGroupOperations : IServiceOperations<SiteRecoveryManagementClient>, IVirtualMachineGroupOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineGroupOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineGroupOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the VM Group object by Id.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='virtualMachineGroupId'>
        /// Required. VM group ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Vm group object.
        /// </returns>
        public async Task<VirtualMachineGroupResponse> GetAsync(string protectionContainerId, string virtualMachineGroupId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            if (virtualMachineGroupId == null)
            {
                throw new ArgumentNullException("virtualMachineGroupId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("virtualMachineGroupId", virtualMachineGroupId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/VirtualMachineGroups/";
            url = url + Uri.EscapeDataString(virtualMachineGroupId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGroupResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineGroupResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement virtualMachineGroupElement = responseDoc.Element(XName.Get("VirtualMachineGroup", "http://schemas.microsoft.com/windowsazure"));
                        if (virtualMachineGroupElement != null)
                        {
                            VirtualMachineGroup virtualMachineGroupInstance = new VirtualMachineGroup();
                            result.VmGroup = virtualMachineGroupInstance;
                            
                            XElement virtualMachineListSequenceElement = virtualMachineGroupElement.Element(XName.Get("VirtualMachineList", "http://schemas.microsoft.com/windowsazure"));
                            if (virtualMachineListSequenceElement != null)
                            {
                                foreach (XElement virtualMachineListElement in virtualMachineListSequenceElement.Elements(XName.Get("VirtualMachine", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    VirtualMachine virtualMachineInstance = new VirtualMachine();
                                    virtualMachineGroupInstance.VirtualMachineList.Add(virtualMachineInstance);
                                    
                                    XElement replicationProviderSettingsElement = virtualMachineListElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationProviderSettingsElement != null)
                                    {
                                        string replicationProviderSettingsInstance = replicationProviderSettingsElement.Value;
                                        virtualMachineInstance.ReplicationProviderSettings = replicationProviderSettingsInstance;
                                    }
                                    
                                    XElement typeElement = virtualMachineListElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                    if (typeElement != null)
                                    {
                                        string typeInstance = typeElement.Value;
                                        virtualMachineInstance.Type = typeInstance;
                                    }
                                    
                                    XElement fabricObjectIdElement = virtualMachineListElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                                    if (fabricObjectIdElement != null)
                                    {
                                        string fabricObjectIdInstance = fabricObjectIdElement.Value;
                                        virtualMachineInstance.FabricObjectId = fabricObjectIdInstance;
                                    }
                                    
                                    XElement serverIdElement = virtualMachineListElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                                    if (serverIdElement != null)
                                    {
                                        string serverIdInstance = serverIdElement.Value;
                                        virtualMachineInstance.ServerId = serverIdInstance;
                                    }
                                    
                                    XElement protectionContainerIdElement = virtualMachineListElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                    if (protectionContainerIdElement != null)
                                    {
                                        string protectionContainerIdInstance = protectionContainerIdElement.Value;
                                        virtualMachineInstance.ProtectionContainerId = protectionContainerIdInstance;
                                    }
                                    
                                    XElement protectedElement = virtualMachineListElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                                    if (protectedElement != null)
                                    {
                                        bool protectedInstance = bool.Parse(protectedElement.Value);
                                        virtualMachineInstance.Protected = protectedInstance;
                                    }
                                    
                                    XElement protectionStateDescriptionElement = virtualMachineListElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                    if (protectionStateDescriptionElement != null)
                                    {
                                        string protectionStateDescriptionInstance = protectionStateDescriptionElement.Value;
                                        virtualMachineInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                    }
                                    
                                    XElement activeLocationElement = virtualMachineListElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                                    if (activeLocationElement != null)
                                    {
                                        string activeLocationInstance = activeLocationElement.Value;
                                        virtualMachineInstance.ActiveLocation = activeLocationInstance;
                                    }
                                    
                                    XElement testFailoverStateDescriptionElement = virtualMachineListElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                    if (testFailoverStateDescriptionElement != null)
                                    {
                                        string testFailoverStateDescriptionInstance = testFailoverStateDescriptionElement.Value;
                                        virtualMachineInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                    }
                                    
                                    XElement canFailoverElement = virtualMachineListElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                                    if (canFailoverElement != null)
                                    {
                                        bool canFailoverInstance = bool.Parse(canFailoverElement.Value);
                                        virtualMachineInstance.CanFailover = canFailoverInstance;
                                    }
                                    
                                    XElement canReverseReplicateElement = virtualMachineListElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                                    if (canReverseReplicateElement != null)
                                    {
                                        bool canReverseReplicateInstance = bool.Parse(canReverseReplicateElement.Value);
                                        virtualMachineInstance.CanReverseReplicate = canReverseReplicateInstance;
                                    }
                                    
                                    XElement canCommitElement = virtualMachineListElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                                    if (canCommitElement != null)
                                    {
                                        bool canCommitInstance = bool.Parse(canCommitElement.Value);
                                        virtualMachineInstance.CanCommit = canCommitInstance;
                                    }
                                    
                                    XElement replicationHealthElement = virtualMachineListElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationHealthElement != null)
                                    {
                                        string replicationHealthInstance = replicationHealthElement.Value;
                                        virtualMachineInstance.ReplicationHealth = replicationHealthInstance;
                                    }
                                    
                                    XElement replicationProviderElement = virtualMachineListElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationProviderElement != null)
                                    {
                                        string replicationProviderInstance = replicationProviderElement.Value;
                                        virtualMachineInstance.ReplicationProvider = replicationProviderInstance;
                                    }
                                    
                                    XElement protectionProfileElement = virtualMachineListElement.Element(XName.Get("ProtectionProfile", "http://schemas.microsoft.com/windowsazure"));
                                    if (protectionProfileElement != null)
                                    {
                                        ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                                        virtualMachineInstance.ProtectionProfile = protectionProfileInstance;
                                        
                                        XElement protectedEntityCountElement = protectionProfileElement.Element(XName.Get("ProtectedEntityCount", "http://schemas.microsoft.com/windowsazure"));
                                        if (protectedEntityCountElement != null)
                                        {
                                            int protectedEntityCountInstance = int.Parse(protectedEntityCountElement.Value, CultureInfo.InvariantCulture);
                                            protectionProfileInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                        }
                                        
                                        XElement replicationProviderElement2 = protectionProfileElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                        if (replicationProviderElement2 != null)
                                        {
                                            string replicationProviderInstance2 = replicationProviderElement2.Value;
                                            protectionProfileInstance.ReplicationProvider = replicationProviderInstance2;
                                        }
                                        
                                        XElement replicationProviderSettingElement = protectionProfileElement.Element(XName.Get("ReplicationProviderSetting", "http://schemas.microsoft.com/windowsazure"));
                                        if (replicationProviderSettingElement != null)
                                        {
                                            string replicationProviderSettingInstance = replicationProviderSettingElement.Value;
                                            protectionProfileInstance.ReplicationProviderSetting = replicationProviderSettingInstance;
                                        }
                                        
                                        XElement canDissociateElement = protectionProfileElement.Element(XName.Get("CanDissociate", "http://schemas.microsoft.com/windowsazure"));
                                        if (canDissociateElement != null)
                                        {
                                            bool canDissociateInstance = bool.Parse(canDissociateElement.Value);
                                            protectionProfileInstance.CanDissociate = canDissociateInstance;
                                        }
                                        
                                        XElement associationDetailSequenceElement = protectionProfileElement.Element(XName.Get("AssociationDetail", "http://schemas.microsoft.com/windowsazure"));
                                        if (associationDetailSequenceElement != null)
                                        {
                                            foreach (XElement associationDetailElement in associationDetailSequenceElement.Elements(XName.Get("ProtectionProfileAssociationDetails", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                                protectionProfileInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                                
                                                XElement primaryProtectionContainerIdElement = associationDetailElement.Element(XName.Get("PrimaryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                                if (primaryProtectionContainerIdElement != null)
                                                {
                                                    string primaryProtectionContainerIdInstance = primaryProtectionContainerIdElement.Value;
                                                    protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                                }
                                                
                                                XElement recoveryProtectionContainerIdElement = associationDetailElement.Element(XName.Get("RecoveryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                                if (recoveryProtectionContainerIdElement != null)
                                                {
                                                    string recoveryProtectionContainerIdInstance = recoveryProtectionContainerIdElement.Value;
                                                    protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                                }
                                                
                                                XElement associationStatusElement = associationDetailElement.Element(XName.Get("AssociationStatus", "http://schemas.microsoft.com/windowsazure"));
                                                if (associationStatusElement != null)
                                                {
                                                    string associationStatusInstance = associationStatusElement.Value;
                                                    protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement nameElement = protectionProfileElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement != null)
                                        {
                                            string nameInstance = nameElement.Value;
                                            protectionProfileInstance.Name = nameInstance;
                                        }
                                        
                                        XElement idElement = protectionProfileElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                        if (idElement != null)
                                        {
                                            string idInstance = idElement.Value;
                                            protectionProfileInstance.ID = idInstance;
                                        }
                                    }
                                    
                                    XElement nameElement2 = virtualMachineListElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement2 != null)
                                    {
                                        string nameInstance2 = nameElement2.Value;
                                        virtualMachineInstance.Name = nameInstance2;
                                    }
                                    
                                    XElement idElement2 = virtualMachineListElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement2 != null)
                                    {
                                        string idInstance2 = idElement2.Value;
                                        virtualMachineInstance.ID = idInstance2;
                                    }
                                }
                            }
                            
                            XElement replicationProviderSettingsElement2 = virtualMachineGroupElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationProviderSettingsElement2 != null)
                            {
                                string replicationProviderSettingsInstance2 = replicationProviderSettingsElement2.Value;
                                virtualMachineGroupInstance.ReplicationProviderSettings = replicationProviderSettingsInstance2;
                            }
                            
                            XElement typeElement2 = virtualMachineGroupElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement2 != null)
                            {
                                string typeInstance2 = typeElement2.Value;
                                virtualMachineGroupInstance.Type = typeInstance2;
                            }
                            
                            XElement fabricObjectIdElement2 = virtualMachineGroupElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                            if (fabricObjectIdElement2 != null)
                            {
                                string fabricObjectIdInstance2 = fabricObjectIdElement2.Value;
                                virtualMachineGroupInstance.FabricObjectId = fabricObjectIdInstance2;
                            }
                            
                            XElement serverIdElement2 = virtualMachineGroupElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                            if (serverIdElement2 != null)
                            {
                                string serverIdInstance2 = serverIdElement2.Value;
                                virtualMachineGroupInstance.ServerId = serverIdInstance2;
                            }
                            
                            XElement protectionContainerIdElement2 = virtualMachineGroupElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                            if (protectionContainerIdElement2 != null)
                            {
                                string protectionContainerIdInstance2 = protectionContainerIdElement2.Value;
                                virtualMachineGroupInstance.ProtectionContainerId = protectionContainerIdInstance2;
                            }
                            
                            XElement protectedElement2 = virtualMachineGroupElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                            if (protectedElement2 != null)
                            {
                                bool protectedInstance2 = bool.Parse(protectedElement2.Value);
                                virtualMachineGroupInstance.Protected = protectedInstance2;
                            }
                            
                            XElement protectionStateDescriptionElement2 = virtualMachineGroupElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (protectionStateDescriptionElement2 != null)
                            {
                                string protectionStateDescriptionInstance2 = protectionStateDescriptionElement2.Value;
                                virtualMachineGroupInstance.ProtectionStateDescription = protectionStateDescriptionInstance2;
                            }
                            
                            XElement activeLocationElement2 = virtualMachineGroupElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                            if (activeLocationElement2 != null)
                            {
                                string activeLocationInstance2 = activeLocationElement2.Value;
                                virtualMachineGroupInstance.ActiveLocation = activeLocationInstance2;
                            }
                            
                            XElement testFailoverStateDescriptionElement2 = virtualMachineGroupElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (testFailoverStateDescriptionElement2 != null)
                            {
                                string testFailoverStateDescriptionInstance2 = testFailoverStateDescriptionElement2.Value;
                                virtualMachineGroupInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance2;
                            }
                            
                            XElement canFailoverElement2 = virtualMachineGroupElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                            if (canFailoverElement2 != null)
                            {
                                bool canFailoverInstance2 = bool.Parse(canFailoverElement2.Value);
                                virtualMachineGroupInstance.CanFailover = canFailoverInstance2;
                            }
                            
                            XElement canReverseReplicateElement2 = virtualMachineGroupElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                            if (canReverseReplicateElement2 != null)
                            {
                                bool canReverseReplicateInstance2 = bool.Parse(canReverseReplicateElement2.Value);
                                virtualMachineGroupInstance.CanReverseReplicate = canReverseReplicateInstance2;
                            }
                            
                            XElement canCommitElement2 = virtualMachineGroupElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                            if (canCommitElement2 != null)
                            {
                                bool canCommitInstance2 = bool.Parse(canCommitElement2.Value);
                                virtualMachineGroupInstance.CanCommit = canCommitInstance2;
                            }
                            
                            XElement replicationHealthElement2 = virtualMachineGroupElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationHealthElement2 != null)
                            {
                                string replicationHealthInstance2 = replicationHealthElement2.Value;
                                virtualMachineGroupInstance.ReplicationHealth = replicationHealthInstance2;
                            }
                            
                            XElement replicationProviderElement3 = virtualMachineGroupElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationProviderElement3 != null)
                            {
                                string replicationProviderInstance3 = replicationProviderElement3.Value;
                                virtualMachineGroupInstance.ReplicationProvider = replicationProviderInstance3;
                            }
                            
                            XElement protectionProfileElement2 = virtualMachineGroupElement.Element(XName.Get("ProtectionProfile", "http://schemas.microsoft.com/windowsazure"));
                            if (protectionProfileElement2 != null)
                            {
                                ProtectionProfile protectionProfileInstance2 = new ProtectionProfile();
                                virtualMachineGroupInstance.ProtectionProfile = protectionProfileInstance2;
                                
                                XElement protectedEntityCountElement2 = protectionProfileElement2.Element(XName.Get("ProtectedEntityCount", "http://schemas.microsoft.com/windowsazure"));
                                if (protectedEntityCountElement2 != null)
                                {
                                    int protectedEntityCountInstance2 = int.Parse(protectedEntityCountElement2.Value, CultureInfo.InvariantCulture);
                                    protectionProfileInstance2.ProtectedEntityCount = protectedEntityCountInstance2;
                                }
                                
                                XElement replicationProviderElement4 = protectionProfileElement2.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderElement4 != null)
                                {
                                    string replicationProviderInstance4 = replicationProviderElement4.Value;
                                    protectionProfileInstance2.ReplicationProvider = replicationProviderInstance4;
                                }
                                
                                XElement replicationProviderSettingElement2 = protectionProfileElement2.Element(XName.Get("ReplicationProviderSetting", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderSettingElement2 != null)
                                {
                                    string replicationProviderSettingInstance2 = replicationProviderSettingElement2.Value;
                                    protectionProfileInstance2.ReplicationProviderSetting = replicationProviderSettingInstance2;
                                }
                                
                                XElement canDissociateElement2 = protectionProfileElement2.Element(XName.Get("CanDissociate", "http://schemas.microsoft.com/windowsazure"));
                                if (canDissociateElement2 != null)
                                {
                                    bool canDissociateInstance2 = bool.Parse(canDissociateElement2.Value);
                                    protectionProfileInstance2.CanDissociate = canDissociateInstance2;
                                }
                                
                                XElement associationDetailSequenceElement2 = protectionProfileElement2.Element(XName.Get("AssociationDetail", "http://schemas.microsoft.com/windowsazure"));
                                if (associationDetailSequenceElement2 != null)
                                {
                                    foreach (XElement associationDetailElement2 in associationDetailSequenceElement2.Elements(XName.Get("ProtectionProfileAssociationDetails", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance2 = new ProtectionProfileAssociationDetails();
                                        protectionProfileInstance2.AssociationDetail.Add(protectionProfileAssociationDetailsInstance2);
                                        
                                        XElement primaryProtectionContainerIdElement2 = associationDetailElement2.Element(XName.Get("PrimaryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                        if (primaryProtectionContainerIdElement2 != null)
                                        {
                                            string primaryProtectionContainerIdInstance2 = primaryProtectionContainerIdElement2.Value;
                                            protectionProfileAssociationDetailsInstance2.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance2;
                                        }
                                        
                                        XElement recoveryProtectionContainerIdElement2 = associationDetailElement2.Element(XName.Get("RecoveryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                        if (recoveryProtectionContainerIdElement2 != null)
                                        {
                                            string recoveryProtectionContainerIdInstance2 = recoveryProtectionContainerIdElement2.Value;
                                            protectionProfileAssociationDetailsInstance2.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance2;
                                        }
                                        
                                        XElement associationStatusElement2 = associationDetailElement2.Element(XName.Get("AssociationStatus", "http://schemas.microsoft.com/windowsazure"));
                                        if (associationStatusElement2 != null)
                                        {
                                            string associationStatusInstance2 = associationStatusElement2.Value;
                                            protectionProfileAssociationDetailsInstance2.AssociationStatus = associationStatusInstance2;
                                        }
                                    }
                                }
                                
                                XElement nameElement3 = protectionProfileElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement3 != null)
                                {
                                    string nameInstance3 = nameElement3.Value;
                                    protectionProfileInstance2.Name = nameInstance3;
                                }
                                
                                XElement idElement3 = protectionProfileElement2.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                if (idElement3 != null)
                                {
                                    string idInstance3 = idElement3.Value;
                                    protectionProfileInstance2.ID = idInstance3;
                                }
                            }
                            
                            XElement nameElement4 = virtualMachineGroupElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement4 != null)
                            {
                                string nameInstance4 = nameElement4.Value;
                                virtualMachineGroupInstance.Name = nameInstance4;
                            }
                            
                            XElement idElement4 = virtualMachineGroupElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement4 != null)
                            {
                                string idInstance4 = idElement4.Value;
                                virtualMachineGroupInstance.ID = idInstance4;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all Vm groups.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list Vm Group operation.
        /// </returns>
        public async Task<VirtualMachineGroupListResponse> ListAsync(string protectionContainerId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/VirtualMachineGroups";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineGroupListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineGroupListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement arrayOfVirtualMachineGroupSequenceElement = responseDoc.Element(XName.Get("ArrayOfVirtualMachineGroup", "http://schemas.microsoft.com/windowsazure"));
                        if (arrayOfVirtualMachineGroupSequenceElement != null)
                        {
                            foreach (XElement arrayOfVirtualMachineGroupElement in arrayOfVirtualMachineGroupSequenceElement.Elements(XName.Get("VirtualMachineGroup", "http://schemas.microsoft.com/windowsazure")))
                            {
                                VirtualMachineGroup virtualMachineGroupInstance = new VirtualMachineGroup();
                                result.VmGroups.Add(virtualMachineGroupInstance);
                                
                                XElement virtualMachineListSequenceElement = arrayOfVirtualMachineGroupElement.Element(XName.Get("VirtualMachineList", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualMachineListSequenceElement != null)
                                {
                                    foreach (XElement virtualMachineListElement in virtualMachineListSequenceElement.Elements(XName.Get("VirtualMachine", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        VirtualMachine virtualMachineInstance = new VirtualMachine();
                                        virtualMachineGroupInstance.VirtualMachineList.Add(virtualMachineInstance);
                                        
                                        XElement replicationProviderSettingsElement = virtualMachineListElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                                        if (replicationProviderSettingsElement != null)
                                        {
                                            string replicationProviderSettingsInstance = replicationProviderSettingsElement.Value;
                                            virtualMachineInstance.ReplicationProviderSettings = replicationProviderSettingsInstance;
                                        }
                                        
                                        XElement typeElement = virtualMachineListElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                        if (typeElement != null)
                                        {
                                            string typeInstance = typeElement.Value;
                                            virtualMachineInstance.Type = typeInstance;
                                        }
                                        
                                        XElement fabricObjectIdElement = virtualMachineListElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                                        if (fabricObjectIdElement != null)
                                        {
                                            string fabricObjectIdInstance = fabricObjectIdElement.Value;
                                            virtualMachineInstance.FabricObjectId = fabricObjectIdInstance;
                                        }
                                        
                                        XElement serverIdElement = virtualMachineListElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                                        if (serverIdElement != null)
                                        {
                                            string serverIdInstance = serverIdElement.Value;
                                            virtualMachineInstance.ServerId = serverIdInstance;
                                        }
                                        
                                        XElement protectionContainerIdElement = virtualMachineListElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                        if (protectionContainerIdElement != null)
                                        {
                                            string protectionContainerIdInstance = protectionContainerIdElement.Value;
                                            virtualMachineInstance.ProtectionContainerId = protectionContainerIdInstance;
                                        }
                                        
                                        XElement protectedElement = virtualMachineListElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                                        if (protectedElement != null)
                                        {
                                            bool protectedInstance = bool.Parse(protectedElement.Value);
                                            virtualMachineInstance.Protected = protectedInstance;
                                        }
                                        
                                        XElement protectionStateDescriptionElement = virtualMachineListElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                        if (protectionStateDescriptionElement != null)
                                        {
                                            string protectionStateDescriptionInstance = protectionStateDescriptionElement.Value;
                                            virtualMachineInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                        }
                                        
                                        XElement activeLocationElement = virtualMachineListElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                                        if (activeLocationElement != null)
                                        {
                                            string activeLocationInstance = activeLocationElement.Value;
                                            virtualMachineInstance.ActiveLocation = activeLocationInstance;
                                        }
                                        
                                        XElement testFailoverStateDescriptionElement = virtualMachineListElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                        if (testFailoverStateDescriptionElement != null)
                                        {
                                            string testFailoverStateDescriptionInstance = testFailoverStateDescriptionElement.Value;
                                            virtualMachineInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                        }
                                        
                                        XElement canFailoverElement = virtualMachineListElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                                        if (canFailoverElement != null)
                                        {
                                            bool canFailoverInstance = bool.Parse(canFailoverElement.Value);
                                            virtualMachineInstance.CanFailover = canFailoverInstance;
                                        }
                                        
                                        XElement canReverseReplicateElement = virtualMachineListElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                                        if (canReverseReplicateElement != null)
                                        {
                                            bool canReverseReplicateInstance = bool.Parse(canReverseReplicateElement.Value);
                                            virtualMachineInstance.CanReverseReplicate = canReverseReplicateInstance;
                                        }
                                        
                                        XElement canCommitElement = virtualMachineListElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                                        if (canCommitElement != null)
                                        {
                                            bool canCommitInstance = bool.Parse(canCommitElement.Value);
                                            virtualMachineInstance.CanCommit = canCommitInstance;
                                        }
                                        
                                        XElement replicationHealthElement = virtualMachineListElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                                        if (replicationHealthElement != null)
                                        {
                                            string replicationHealthInstance = replicationHealthElement.Value;
                                            virtualMachineInstance.ReplicationHealth = replicationHealthInstance;
                                        }
                                        
                                        XElement replicationProviderElement = virtualMachineListElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                        if (replicationProviderElement != null)
                                        {
                                            string replicationProviderInstance = replicationProviderElement.Value;
                                            virtualMachineInstance.ReplicationProvider = replicationProviderInstance;
                                        }
                                        
                                        XElement protectionProfileElement = virtualMachineListElement.Element(XName.Get("ProtectionProfile", "http://schemas.microsoft.com/windowsazure"));
                                        if (protectionProfileElement != null)
                                        {
                                            ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                                            virtualMachineInstance.ProtectionProfile = protectionProfileInstance;
                                            
                                            XElement protectedEntityCountElement = protectionProfileElement.Element(XName.Get("ProtectedEntityCount", "http://schemas.microsoft.com/windowsazure"));
                                            if (protectedEntityCountElement != null)
                                            {
                                                int protectedEntityCountInstance = int.Parse(protectedEntityCountElement.Value, CultureInfo.InvariantCulture);
                                                protectionProfileInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                            }
                                            
                                            XElement replicationProviderElement2 = protectionProfileElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                            if (replicationProviderElement2 != null)
                                            {
                                                string replicationProviderInstance2 = replicationProviderElement2.Value;
                                                protectionProfileInstance.ReplicationProvider = replicationProviderInstance2;
                                            }
                                            
                                            XElement replicationProviderSettingElement = protectionProfileElement.Element(XName.Get("ReplicationProviderSetting", "http://schemas.microsoft.com/windowsazure"));
                                            if (replicationProviderSettingElement != null)
                                            {
                                                string replicationProviderSettingInstance = replicationProviderSettingElement.Value;
                                                protectionProfileInstance.ReplicationProviderSetting = replicationProviderSettingInstance;
                                            }
                                            
                                            XElement canDissociateElement = protectionProfileElement.Element(XName.Get("CanDissociate", "http://schemas.microsoft.com/windowsazure"));
                                            if (canDissociateElement != null)
                                            {
                                                bool canDissociateInstance = bool.Parse(canDissociateElement.Value);
                                                protectionProfileInstance.CanDissociate = canDissociateInstance;
                                            }
                                            
                                            XElement associationDetailSequenceElement = protectionProfileElement.Element(XName.Get("AssociationDetail", "http://schemas.microsoft.com/windowsazure"));
                                            if (associationDetailSequenceElement != null)
                                            {
                                                foreach (XElement associationDetailElement in associationDetailSequenceElement.Elements(XName.Get("ProtectionProfileAssociationDetails", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                                    protectionProfileInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                                    
                                                    XElement primaryProtectionContainerIdElement = associationDetailElement.Element(XName.Get("PrimaryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                                    if (primaryProtectionContainerIdElement != null)
                                                    {
                                                        string primaryProtectionContainerIdInstance = primaryProtectionContainerIdElement.Value;
                                                        protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                                    }
                                                    
                                                    XElement recoveryProtectionContainerIdElement = associationDetailElement.Element(XName.Get("RecoveryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                                    if (recoveryProtectionContainerIdElement != null)
                                                    {
                                                        string recoveryProtectionContainerIdInstance = recoveryProtectionContainerIdElement.Value;
                                                        protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                                    }
                                                    
                                                    XElement associationStatusElement = associationDetailElement.Element(XName.Get("AssociationStatus", "http://schemas.microsoft.com/windowsazure"));
                                                    if (associationStatusElement != null)
                                                    {
                                                        string associationStatusInstance = associationStatusElement.Value;
                                                        protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement nameElement = protectionProfileElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement != null)
                                            {
                                                string nameInstance = nameElement.Value;
                                                protectionProfileInstance.Name = nameInstance;
                                            }
                                            
                                            XElement idElement = protectionProfileElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                            if (idElement != null)
                                            {
                                                string idInstance = idElement.Value;
                                                protectionProfileInstance.ID = idInstance;
                                            }
                                        }
                                        
                                        XElement nameElement2 = virtualMachineListElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement2 != null)
                                        {
                                            string nameInstance2 = nameElement2.Value;
                                            virtualMachineInstance.Name = nameInstance2;
                                        }
                                        
                                        XElement idElement2 = virtualMachineListElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                        if (idElement2 != null)
                                        {
                                            string idInstance2 = idElement2.Value;
                                            virtualMachineInstance.ID = idInstance2;
                                        }
                                    }
                                }
                                
                                XElement replicationProviderSettingsElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderSettingsElement2 != null)
                                {
                                    string replicationProviderSettingsInstance2 = replicationProviderSettingsElement2.Value;
                                    virtualMachineGroupInstance.ReplicationProviderSettings = replicationProviderSettingsInstance2;
                                }
                                
                                XElement typeElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement2 != null)
                                {
                                    string typeInstance2 = typeElement2.Value;
                                    virtualMachineGroupInstance.Type = typeInstance2;
                                }
                                
                                XElement fabricObjectIdElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                                if (fabricObjectIdElement2 != null)
                                {
                                    string fabricObjectIdInstance2 = fabricObjectIdElement2.Value;
                                    virtualMachineGroupInstance.FabricObjectId = fabricObjectIdInstance2;
                                }
                                
                                XElement serverIdElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                                if (serverIdElement2 != null)
                                {
                                    string serverIdInstance2 = serverIdElement2.Value;
                                    virtualMachineGroupInstance.ServerId = serverIdInstance2;
                                }
                                
                                XElement protectionContainerIdElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                if (protectionContainerIdElement2 != null)
                                {
                                    string protectionContainerIdInstance2 = protectionContainerIdElement2.Value;
                                    virtualMachineGroupInstance.ProtectionContainerId = protectionContainerIdInstance2;
                                }
                                
                                XElement protectedElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                                if (protectedElement2 != null)
                                {
                                    bool protectedInstance2 = bool.Parse(protectedElement2.Value);
                                    virtualMachineGroupInstance.Protected = protectedInstance2;
                                }
                                
                                XElement protectionStateDescriptionElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                if (protectionStateDescriptionElement2 != null)
                                {
                                    string protectionStateDescriptionInstance2 = protectionStateDescriptionElement2.Value;
                                    virtualMachineGroupInstance.ProtectionStateDescription = protectionStateDescriptionInstance2;
                                }
                                
                                XElement activeLocationElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                                if (activeLocationElement2 != null)
                                {
                                    string activeLocationInstance2 = activeLocationElement2.Value;
                                    virtualMachineGroupInstance.ActiveLocation = activeLocationInstance2;
                                }
                                
                                XElement testFailoverStateDescriptionElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                if (testFailoverStateDescriptionElement2 != null)
                                {
                                    string testFailoverStateDescriptionInstance2 = testFailoverStateDescriptionElement2.Value;
                                    virtualMachineGroupInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance2;
                                }
                                
                                XElement canFailoverElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                                if (canFailoverElement2 != null)
                                {
                                    bool canFailoverInstance2 = bool.Parse(canFailoverElement2.Value);
                                    virtualMachineGroupInstance.CanFailover = canFailoverInstance2;
                                }
                                
                                XElement canReverseReplicateElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                                if (canReverseReplicateElement2 != null)
                                {
                                    bool canReverseReplicateInstance2 = bool.Parse(canReverseReplicateElement2.Value);
                                    virtualMachineGroupInstance.CanReverseReplicate = canReverseReplicateInstance2;
                                }
                                
                                XElement canCommitElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                                if (canCommitElement2 != null)
                                {
                                    bool canCommitInstance2 = bool.Parse(canCommitElement2.Value);
                                    virtualMachineGroupInstance.CanCommit = canCommitInstance2;
                                }
                                
                                XElement replicationHealthElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationHealthElement2 != null)
                                {
                                    string replicationHealthInstance2 = replicationHealthElement2.Value;
                                    virtualMachineGroupInstance.ReplicationHealth = replicationHealthInstance2;
                                }
                                
                                XElement replicationProviderElement3 = arrayOfVirtualMachineGroupElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderElement3 != null)
                                {
                                    string replicationProviderInstance3 = replicationProviderElement3.Value;
                                    virtualMachineGroupInstance.ReplicationProvider = replicationProviderInstance3;
                                }
                                
                                XElement protectionProfileElement2 = arrayOfVirtualMachineGroupElement.Element(XName.Get("ProtectionProfile", "http://schemas.microsoft.com/windowsazure"));
                                if (protectionProfileElement2 != null)
                                {
                                    ProtectionProfile protectionProfileInstance2 = new ProtectionProfile();
                                    virtualMachineGroupInstance.ProtectionProfile = protectionProfileInstance2;
                                    
                                    XElement protectedEntityCountElement2 = protectionProfileElement2.Element(XName.Get("ProtectedEntityCount", "http://schemas.microsoft.com/windowsazure"));
                                    if (protectedEntityCountElement2 != null)
                                    {
                                        int protectedEntityCountInstance2 = int.Parse(protectedEntityCountElement2.Value, CultureInfo.InvariantCulture);
                                        protectionProfileInstance2.ProtectedEntityCount = protectedEntityCountInstance2;
                                    }
                                    
                                    XElement replicationProviderElement4 = protectionProfileElement2.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationProviderElement4 != null)
                                    {
                                        string replicationProviderInstance4 = replicationProviderElement4.Value;
                                        protectionProfileInstance2.ReplicationProvider = replicationProviderInstance4;
                                    }
                                    
                                    XElement replicationProviderSettingElement2 = protectionProfileElement2.Element(XName.Get("ReplicationProviderSetting", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationProviderSettingElement2 != null)
                                    {
                                        string replicationProviderSettingInstance2 = replicationProviderSettingElement2.Value;
                                        protectionProfileInstance2.ReplicationProviderSetting = replicationProviderSettingInstance2;
                                    }
                                    
                                    XElement canDissociateElement2 = protectionProfileElement2.Element(XName.Get("CanDissociate", "http://schemas.microsoft.com/windowsazure"));
                                    if (canDissociateElement2 != null)
                                    {
                                        bool canDissociateInstance2 = bool.Parse(canDissociateElement2.Value);
                                        protectionProfileInstance2.CanDissociate = canDissociateInstance2;
                                    }
                                    
                                    XElement associationDetailSequenceElement2 = protectionProfileElement2.Element(XName.Get("AssociationDetail", "http://schemas.microsoft.com/windowsazure"));
                                    if (associationDetailSequenceElement2 != null)
                                    {
                                        foreach (XElement associationDetailElement2 in associationDetailSequenceElement2.Elements(XName.Get("ProtectionProfileAssociationDetails", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance2 = new ProtectionProfileAssociationDetails();
                                            protectionProfileInstance2.AssociationDetail.Add(protectionProfileAssociationDetailsInstance2);
                                            
                                            XElement primaryProtectionContainerIdElement2 = associationDetailElement2.Element(XName.Get("PrimaryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                            if (primaryProtectionContainerIdElement2 != null)
                                            {
                                                string primaryProtectionContainerIdInstance2 = primaryProtectionContainerIdElement2.Value;
                                                protectionProfileAssociationDetailsInstance2.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance2;
                                            }
                                            
                                            XElement recoveryProtectionContainerIdElement2 = associationDetailElement2.Element(XName.Get("RecoveryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                            if (recoveryProtectionContainerIdElement2 != null)
                                            {
                                                string recoveryProtectionContainerIdInstance2 = recoveryProtectionContainerIdElement2.Value;
                                                protectionProfileAssociationDetailsInstance2.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance2;
                                            }
                                            
                                            XElement associationStatusElement2 = associationDetailElement2.Element(XName.Get("AssociationStatus", "http://schemas.microsoft.com/windowsazure"));
                                            if (associationStatusElement2 != null)
                                            {
                                                string associationStatusInstance2 = associationStatusElement2.Value;
                                                protectionProfileAssociationDetailsInstance2.AssociationStatus = associationStatusInstance2;
                                            }
                                        }
                                    }
                                    
                                    XElement nameElement3 = protectionProfileElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement3 != null)
                                    {
                                        string nameInstance3 = nameElement3.Value;
                                        protectionProfileInstance2.Name = nameInstance3;
                                    }
                                    
                                    XElement idElement3 = protectionProfileElement2.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement3 != null)
                                    {
                                        string idInstance3 = idElement3.Value;
                                        protectionProfileInstance2.ID = idInstance3;
                                    }
                                }
                                
                                XElement nameElement4 = arrayOfVirtualMachineGroupElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement4 != null)
                                {
                                    string nameInstance4 = nameElement4.Value;
                                    virtualMachineGroupInstance.Name = nameInstance4;
                                }
                                
                                XElement idElement4 = arrayOfVirtualMachineGroupElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                if (idElement4 != null)
                                {
                                    string idInstance4 = idElement4.Value;
                                    virtualMachineGroupInstance.ID = idInstance4;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
