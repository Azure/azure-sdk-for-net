// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.WindowsAzure.Management.SiteRecovery;
using Microsoft.WindowsAzure.Management.SiteRecovery.Models;

namespace Microsoft.WindowsAzure.Management.SiteRecovery
{
    /// <summary>
    /// Definition of virtual machine operations for the Site Recovery
    /// extension.
    /// </summary>
    internal partial class VirtualMachineOperations : IServiceOperations<SiteRecoveryManagementClient>, IVirtualMachineOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineOperations(SiteRecoveryManagementClient client)
        {
            this._client = client;
        }
        
        private SiteRecoveryManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.SiteRecovery.SiteRecoveryManagementClient.
        /// </summary>
        public SiteRecoveryManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the VM object by Id.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='virtualMachineId'>
        /// Required. VM ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Vm object.
        /// </returns>
        public async Task<VirtualMachineResponse> GetAsync(string protectionContainerId, string virtualMachineId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            if (virtualMachineId == null)
            {
                throw new ArgumentNullException("virtualMachineId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("virtualMachineId", virtualMachineId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/VirtualMachines/";
            url = url + Uri.EscapeDataString(virtualMachineId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement virtualMachineElement = responseDoc.Element(XName.Get("VirtualMachine", "http://schemas.microsoft.com/windowsazure"));
                        if (virtualMachineElement != null)
                        {
                            VirtualMachine virtualMachineInstance = new VirtualMachine();
                            result.Vm = virtualMachineInstance;
                            
                            XElement replicationProviderSettingsElement = virtualMachineElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationProviderSettingsElement != null)
                            {
                                string replicationProviderSettingsInstance = replicationProviderSettingsElement.Value;
                                virtualMachineInstance.ReplicationProviderSettings = replicationProviderSettingsInstance;
                            }
                            
                            XElement typeElement = virtualMachineElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null)
                            {
                                string typeInstance = typeElement.Value;
                                virtualMachineInstance.Type = typeInstance;
                            }
                            
                            XElement fabricObjectIdElement = virtualMachineElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                            if (fabricObjectIdElement != null)
                            {
                                string fabricObjectIdInstance = fabricObjectIdElement.Value;
                                virtualMachineInstance.FabricObjectId = fabricObjectIdInstance;
                            }
                            
                            XElement serverIdElement = virtualMachineElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                            if (serverIdElement != null)
                            {
                                string serverIdInstance = serverIdElement.Value;
                                virtualMachineInstance.ServerId = serverIdInstance;
                            }
                            
                            XElement protectionContainerIdElement = virtualMachineElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                            if (protectionContainerIdElement != null)
                            {
                                string protectionContainerIdInstance = protectionContainerIdElement.Value;
                                virtualMachineInstance.ProtectionContainerId = protectionContainerIdInstance;
                            }
                            
                            XElement protectedElement = virtualMachineElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                            if (protectedElement != null)
                            {
                                bool protectedInstance = bool.Parse(protectedElement.Value);
                                virtualMachineInstance.Protected = protectedInstance;
                            }
                            
                            XElement protectionStateDescriptionElement = virtualMachineElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (protectionStateDescriptionElement != null)
                            {
                                string protectionStateDescriptionInstance = protectionStateDescriptionElement.Value;
                                virtualMachineInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                            }
                            
                            XElement activeLocationElement = virtualMachineElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                            if (activeLocationElement != null)
                            {
                                string activeLocationInstance = activeLocationElement.Value;
                                virtualMachineInstance.ActiveLocation = activeLocationInstance;
                            }
                            
                            XElement testFailoverStateDescriptionElement = virtualMachineElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (testFailoverStateDescriptionElement != null)
                            {
                                string testFailoverStateDescriptionInstance = testFailoverStateDescriptionElement.Value;
                                virtualMachineInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                            }
                            
                            XElement canFailoverElement = virtualMachineElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                            if (canFailoverElement != null)
                            {
                                bool canFailoverInstance = bool.Parse(canFailoverElement.Value);
                                virtualMachineInstance.CanFailover = canFailoverInstance;
                            }
                            
                            XElement canReverseReplicateElement = virtualMachineElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                            if (canReverseReplicateElement != null)
                            {
                                bool canReverseReplicateInstance = bool.Parse(canReverseReplicateElement.Value);
                                virtualMachineInstance.CanReverseReplicate = canReverseReplicateInstance;
                            }
                            
                            XElement canCommitElement = virtualMachineElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                            if (canCommitElement != null)
                            {
                                bool canCommitInstance = bool.Parse(canCommitElement.Value);
                                virtualMachineInstance.CanCommit = canCommitInstance;
                            }
                            
                            XElement replicationHealthElement = virtualMachineElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationHealthElement != null)
                            {
                                string replicationHealthInstance = replicationHealthElement.Value;
                                virtualMachineInstance.ReplicationHealth = replicationHealthInstance;
                            }
                            
                            XElement replicationProviderElement = virtualMachineElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationProviderElement != null)
                            {
                                string replicationProviderInstance = replicationProviderElement.Value;
                                virtualMachineInstance.ReplicationProvider = replicationProviderInstance;
                            }
                            
                            XElement protectionProfileElement = virtualMachineElement.Element(XName.Get("ProtectionProfile", "http://schemas.microsoft.com/windowsazure"));
                            if (protectionProfileElement != null)
                            {
                                ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                                virtualMachineInstance.ProtectionProfile = protectionProfileInstance;
                                
                                XElement protectedEntityCountElement = protectionProfileElement.Element(XName.Get("ProtectedEntityCount", "http://schemas.microsoft.com/windowsazure"));
                                if (protectedEntityCountElement != null)
                                {
                                    int protectedEntityCountInstance = int.Parse(protectedEntityCountElement.Value, CultureInfo.InvariantCulture);
                                    protectionProfileInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                }
                                
                                XElement replicationProviderElement2 = protectionProfileElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderElement2 != null)
                                {
                                    string replicationProviderInstance2 = replicationProviderElement2.Value;
                                    protectionProfileInstance.ReplicationProvider = replicationProviderInstance2;
                                }
                                
                                XElement replicationProviderSettingElement = protectionProfileElement.Element(XName.Get("ReplicationProviderSetting", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderSettingElement != null)
                                {
                                    string replicationProviderSettingInstance = replicationProviderSettingElement.Value;
                                    protectionProfileInstance.ReplicationProviderSetting = replicationProviderSettingInstance;
                                }
                                
                                XElement canDissociateElement = protectionProfileElement.Element(XName.Get("CanDissociate", "http://schemas.microsoft.com/windowsazure"));
                                if (canDissociateElement != null)
                                {
                                    bool canDissociateInstance = bool.Parse(canDissociateElement.Value);
                                    protectionProfileInstance.CanDissociate = canDissociateInstance;
                                }
                                
                                XElement associationDetailSequenceElement = protectionProfileElement.Element(XName.Get("AssociationDetail", "http://schemas.microsoft.com/windowsazure"));
                                if (associationDetailSequenceElement != null)
                                {
                                    foreach (XElement associationDetailElement in associationDetailSequenceElement.Elements(XName.Get("ProtectionProfileAssociationDetails", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                        protectionProfileInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                        
                                        XElement primaryProtectionContainerIdElement = associationDetailElement.Element(XName.Get("PrimaryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                        if (primaryProtectionContainerIdElement != null)
                                        {
                                            string primaryProtectionContainerIdInstance = primaryProtectionContainerIdElement.Value;
                                            protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                        }
                                        
                                        XElement recoveryProtectionContainerIdElement = associationDetailElement.Element(XName.Get("RecoveryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                        if (recoveryProtectionContainerIdElement != null)
                                        {
                                            string recoveryProtectionContainerIdInstance = recoveryProtectionContainerIdElement.Value;
                                            protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                        }
                                        
                                        XElement associationStatusElement = associationDetailElement.Element(XName.Get("AssociationStatus", "http://schemas.microsoft.com/windowsazure"));
                                        if (associationStatusElement != null)
                                        {
                                            string associationStatusInstance = associationStatusElement.Value;
                                            protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance;
                                        }
                                    }
                                }
                                
                                XElement nameElement = protectionProfileElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    protectionProfileInstance.Name = nameInstance;
                                }
                                
                                XElement idElement = protectionProfileElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                if (idElement != null)
                                {
                                    string idInstance = idElement.Value;
                                    protectionProfileInstance.ID = idInstance;
                                }
                            }
                            
                            XElement nameElement2 = virtualMachineElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null)
                            {
                                string nameInstance2 = nameElement2.Value;
                                virtualMachineInstance.Name = nameInstance2;
                            }
                            
                            XElement idElement2 = virtualMachineElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement2 != null)
                            {
                                string idInstance2 = idElement2.Value;
                                virtualMachineInstance.ID = idInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of all Vms.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list Vm operation.
        /// </returns>
        public async Task<VirtualMachineListResponse> ListAsync(string protectionContainerId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/VirtualMachines";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement arrayOfVirtualMachineSequenceElement = responseDoc.Element(XName.Get("ArrayOfVirtualMachine", "http://schemas.microsoft.com/windowsazure"));
                        if (arrayOfVirtualMachineSequenceElement != null)
                        {
                            foreach (XElement arrayOfVirtualMachineElement in arrayOfVirtualMachineSequenceElement.Elements(XName.Get("VirtualMachine", "http://schemas.microsoft.com/windowsazure")))
                            {
                                VirtualMachine virtualMachineInstance = new VirtualMachine();
                                result.Vms.Add(virtualMachineInstance);
                                
                                XElement replicationProviderSettingsElement = arrayOfVirtualMachineElement.Element(XName.Get("ReplicationProviderSettings", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderSettingsElement != null)
                                {
                                    string replicationProviderSettingsInstance = replicationProviderSettingsElement.Value;
                                    virtualMachineInstance.ReplicationProviderSettings = replicationProviderSettingsInstance;
                                }
                                
                                XElement typeElement = arrayOfVirtualMachineElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement != null)
                                {
                                    string typeInstance = typeElement.Value;
                                    virtualMachineInstance.Type = typeInstance;
                                }
                                
                                XElement fabricObjectIdElement = arrayOfVirtualMachineElement.Element(XName.Get("FabricObjectId", "http://schemas.microsoft.com/windowsazure"));
                                if (fabricObjectIdElement != null)
                                {
                                    string fabricObjectIdInstance = fabricObjectIdElement.Value;
                                    virtualMachineInstance.FabricObjectId = fabricObjectIdInstance;
                                }
                                
                                XElement serverIdElement = arrayOfVirtualMachineElement.Element(XName.Get("ServerId", "http://schemas.microsoft.com/windowsazure"));
                                if (serverIdElement != null)
                                {
                                    string serverIdInstance = serverIdElement.Value;
                                    virtualMachineInstance.ServerId = serverIdInstance;
                                }
                                
                                XElement protectionContainerIdElement = arrayOfVirtualMachineElement.Element(XName.Get("ProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                if (protectionContainerIdElement != null)
                                {
                                    string protectionContainerIdInstance = protectionContainerIdElement.Value;
                                    virtualMachineInstance.ProtectionContainerId = protectionContainerIdInstance;
                                }
                                
                                XElement protectedElement = arrayOfVirtualMachineElement.Element(XName.Get("Protected", "http://schemas.microsoft.com/windowsazure"));
                                if (protectedElement != null)
                                {
                                    bool protectedInstance = bool.Parse(protectedElement.Value);
                                    virtualMachineInstance.Protected = protectedInstance;
                                }
                                
                                XElement protectionStateDescriptionElement = arrayOfVirtualMachineElement.Element(XName.Get("ProtectionStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                if (protectionStateDescriptionElement != null)
                                {
                                    string protectionStateDescriptionInstance = protectionStateDescriptionElement.Value;
                                    virtualMachineInstance.ProtectionStateDescription = protectionStateDescriptionInstance;
                                }
                                
                                XElement activeLocationElement = arrayOfVirtualMachineElement.Element(XName.Get("ActiveLocation", "http://schemas.microsoft.com/windowsazure"));
                                if (activeLocationElement != null)
                                {
                                    string activeLocationInstance = activeLocationElement.Value;
                                    virtualMachineInstance.ActiveLocation = activeLocationInstance;
                                }
                                
                                XElement testFailoverStateDescriptionElement = arrayOfVirtualMachineElement.Element(XName.Get("TestFailoverStateDescription", "http://schemas.microsoft.com/windowsazure"));
                                if (testFailoverStateDescriptionElement != null)
                                {
                                    string testFailoverStateDescriptionInstance = testFailoverStateDescriptionElement.Value;
                                    virtualMachineInstance.TestFailoverStateDescription = testFailoverStateDescriptionInstance;
                                }
                                
                                XElement canFailoverElement = arrayOfVirtualMachineElement.Element(XName.Get("CanFailover", "http://schemas.microsoft.com/windowsazure"));
                                if (canFailoverElement != null)
                                {
                                    bool canFailoverInstance = bool.Parse(canFailoverElement.Value);
                                    virtualMachineInstance.CanFailover = canFailoverInstance;
                                }
                                
                                XElement canReverseReplicateElement = arrayOfVirtualMachineElement.Element(XName.Get("CanReverseReplicate", "http://schemas.microsoft.com/windowsazure"));
                                if (canReverseReplicateElement != null)
                                {
                                    bool canReverseReplicateInstance = bool.Parse(canReverseReplicateElement.Value);
                                    virtualMachineInstance.CanReverseReplicate = canReverseReplicateInstance;
                                }
                                
                                XElement canCommitElement = arrayOfVirtualMachineElement.Element(XName.Get("CanCommit", "http://schemas.microsoft.com/windowsazure"));
                                if (canCommitElement != null)
                                {
                                    bool canCommitInstance = bool.Parse(canCommitElement.Value);
                                    virtualMachineInstance.CanCommit = canCommitInstance;
                                }
                                
                                XElement replicationHealthElement = arrayOfVirtualMachineElement.Element(XName.Get("ReplicationHealth", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationHealthElement != null)
                                {
                                    string replicationHealthInstance = replicationHealthElement.Value;
                                    virtualMachineInstance.ReplicationHealth = replicationHealthInstance;
                                }
                                
                                XElement replicationProviderElement = arrayOfVirtualMachineElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                if (replicationProviderElement != null)
                                {
                                    string replicationProviderInstance = replicationProviderElement.Value;
                                    virtualMachineInstance.ReplicationProvider = replicationProviderInstance;
                                }
                                
                                XElement protectionProfileElement = arrayOfVirtualMachineElement.Element(XName.Get("ProtectionProfile", "http://schemas.microsoft.com/windowsazure"));
                                if (protectionProfileElement != null)
                                {
                                    ProtectionProfile protectionProfileInstance = new ProtectionProfile();
                                    virtualMachineInstance.ProtectionProfile = protectionProfileInstance;
                                    
                                    XElement protectedEntityCountElement = protectionProfileElement.Element(XName.Get("ProtectedEntityCount", "http://schemas.microsoft.com/windowsazure"));
                                    if (protectedEntityCountElement != null)
                                    {
                                        int protectedEntityCountInstance = int.Parse(protectedEntityCountElement.Value, CultureInfo.InvariantCulture);
                                        protectionProfileInstance.ProtectedEntityCount = protectedEntityCountInstance;
                                    }
                                    
                                    XElement replicationProviderElement2 = protectionProfileElement.Element(XName.Get("ReplicationProvider", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationProviderElement2 != null)
                                    {
                                        string replicationProviderInstance2 = replicationProviderElement2.Value;
                                        protectionProfileInstance.ReplicationProvider = replicationProviderInstance2;
                                    }
                                    
                                    XElement replicationProviderSettingElement = protectionProfileElement.Element(XName.Get("ReplicationProviderSetting", "http://schemas.microsoft.com/windowsazure"));
                                    if (replicationProviderSettingElement != null)
                                    {
                                        string replicationProviderSettingInstance = replicationProviderSettingElement.Value;
                                        protectionProfileInstance.ReplicationProviderSetting = replicationProviderSettingInstance;
                                    }
                                    
                                    XElement canDissociateElement = protectionProfileElement.Element(XName.Get("CanDissociate", "http://schemas.microsoft.com/windowsazure"));
                                    if (canDissociateElement != null)
                                    {
                                        bool canDissociateInstance = bool.Parse(canDissociateElement.Value);
                                        protectionProfileInstance.CanDissociate = canDissociateInstance;
                                    }
                                    
                                    XElement associationDetailSequenceElement = protectionProfileElement.Element(XName.Get("AssociationDetail", "http://schemas.microsoft.com/windowsazure"));
                                    if (associationDetailSequenceElement != null)
                                    {
                                        foreach (XElement associationDetailElement in associationDetailSequenceElement.Elements(XName.Get("ProtectionProfileAssociationDetails", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ProtectionProfileAssociationDetails protectionProfileAssociationDetailsInstance = new ProtectionProfileAssociationDetails();
                                            protectionProfileInstance.AssociationDetail.Add(protectionProfileAssociationDetailsInstance);
                                            
                                            XElement primaryProtectionContainerIdElement = associationDetailElement.Element(XName.Get("PrimaryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                            if (primaryProtectionContainerIdElement != null)
                                            {
                                                string primaryProtectionContainerIdInstance = primaryProtectionContainerIdElement.Value;
                                                protectionProfileAssociationDetailsInstance.PrimaryProtectionContainerId = primaryProtectionContainerIdInstance;
                                            }
                                            
                                            XElement recoveryProtectionContainerIdElement = associationDetailElement.Element(XName.Get("RecoveryProtectionContainerId", "http://schemas.microsoft.com/windowsazure"));
                                            if (recoveryProtectionContainerIdElement != null)
                                            {
                                                string recoveryProtectionContainerIdInstance = recoveryProtectionContainerIdElement.Value;
                                                protectionProfileAssociationDetailsInstance.RecoveryProtectionContainerId = recoveryProtectionContainerIdInstance;
                                            }
                                            
                                            XElement associationStatusElement = associationDetailElement.Element(XName.Get("AssociationStatus", "http://schemas.microsoft.com/windowsazure"));
                                            if (associationStatusElement != null)
                                            {
                                                string associationStatusInstance = associationStatusElement.Value;
                                                protectionProfileAssociationDetailsInstance.AssociationStatus = associationStatusInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement nameElement = protectionProfileElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        protectionProfileInstance.Name = nameInstance;
                                    }
                                    
                                    XElement idElement = protectionProfileElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement != null)
                                    {
                                        string idInstance = idElement.Value;
                                        protectionProfileInstance.ID = idInstance;
                                    }
                                }
                                
                                XElement nameElement2 = arrayOfVirtualMachineElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement2 != null)
                                {
                                    string nameInstance2 = nameElement2.Value;
                                    virtualMachineInstance.Name = nameInstance2;
                                }
                                
                                XElement idElement2 = arrayOfVirtualMachineElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                if (idElement2 != null)
                                {
                                    string idInstance2 = idElement2.Value;
                                    virtualMachineInstance.ID = idInstance2;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates VM properties.
        /// </summary>
        /// <param name='protectionContainerId'>
        /// Required. Parent Protection Container ID.
        /// </param>
        /// <param name='virtualMachineId'>
        /// Required. VM ID.
        /// </param>
        /// <param name='parameters'>
        /// Required. Update VM properties input.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Job details object.
        /// </returns>
        public async Task<JobResponse> UpdateVmPropertiesAsync(string protectionContainerId, string virtualMachineId, VMProperties parameters, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (protectionContainerId == null)
            {
                throw new ArgumentNullException("protectionContainerId");
            }
            if (virtualMachineId == null)
            {
                throw new ArgumentNullException("virtualMachineId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("protectionContainerId", protectionContainerId);
                tracingParameters.Add("virtualMachineId", virtualMachineId);
                tracingParameters.Add("parameters", parameters);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateVmPropertiesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + "WAHyperVRecoveryManager";
            url = url + "/~/";
            url = url + "HyperVRecoveryManagerVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/ProtectionContainers/";
            url = url + Uri.EscapeDataString(protectionContainerId);
            url = url + "/VirtualMachines/";
            url = url + Uri.EscapeDataString(virtualMachineId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-04-10");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement vMPropertiesElement = new XElement(XName.Get("VMProperties", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(vMPropertiesElement);
                
                if (parameters.RecoveryAzureVMName != null)
                {
                    XElement recoveryAzureVMNameElement = new XElement(XName.Get("RecoveryAzureVMName", "http://schemas.microsoft.com/windowsazure"));
                    recoveryAzureVMNameElement.Value = parameters.RecoveryAzureVMName;
                    vMPropertiesElement.Add(recoveryAzureVMNameElement);
                }
                
                if (parameters.RecoveryAzureVMSize != null)
                {
                    XElement recoveryAzureVMSizeElement = new XElement(XName.Get("RecoveryAzureVMSize", "http://schemas.microsoft.com/windowsazure"));
                    recoveryAzureVMSizeElement.Value = parameters.RecoveryAzureVMSize;
                    vMPropertiesElement.Add(recoveryAzureVMSizeElement);
                }
                
                if (parameters.SelectedRecoveryAzureNetworkId != null)
                {
                    XElement selectedRecoveryAzureNetworkIdElement = new XElement(XName.Get("SelectedRecoveryAzureNetworkId", "http://schemas.microsoft.com/windowsazure"));
                    selectedRecoveryAzureNetworkIdElement.Value = parameters.SelectedRecoveryAzureNetworkId;
                    vMPropertiesElement.Add(selectedRecoveryAzureNetworkIdElement);
                }
                
                if (parameters.VMNics != null)
                {
                    if (parameters.VMNics is ILazyCollection == false || ((ILazyCollection)parameters.VMNics).IsInitialized)
                    {
                        XElement vMNicsSequenceElement = new XElement(XName.Get("VMNics", "http://schemas.microsoft.com/windowsazure"));
                        foreach (VMNicDetails vMNicsItem in parameters.VMNics)
                        {
                            XElement vMNicDetailsElement = new XElement(XName.Get("VMNicDetails", "http://schemas.microsoft.com/windowsazure"));
                            vMNicsSequenceElement.Add(vMNicDetailsElement);
                            
                            if (vMNicsItem.NicId != null)
                            {
                                XElement nicIdElement = new XElement(XName.Get("NicId", "http://schemas.microsoft.com/windowsazure"));
                                nicIdElement.Value = vMNicsItem.NicId;
                                vMNicDetailsElement.Add(nicIdElement);
                            }
                            
                            if (vMNicsItem.VMSubnetName != null)
                            {
                                XElement vMSubnetNameElement = new XElement(XName.Get("VMSubnetName", "http://schemas.microsoft.com/windowsazure"));
                                vMSubnetNameElement.Value = vMNicsItem.VMSubnetName;
                                vMNicDetailsElement.Add(vMSubnetNameElement);
                            }
                            
                            if (vMNicsItem.VMNetworkName != null)
                            {
                                XElement vMNetworkNameElement = new XElement(XName.Get("VMNetworkName", "http://schemas.microsoft.com/windowsazure"));
                                vMNetworkNameElement.Value = vMNicsItem.VMNetworkName;
                                vMNicDetailsElement.Add(vMNetworkNameElement);
                            }
                            
                            if (vMNicsItem.RecoveryVMNetworkId != null)
                            {
                                XElement recoveryVMNetworkIdElement = new XElement(XName.Get("RecoveryVMNetworkId", "http://schemas.microsoft.com/windowsazure"));
                                recoveryVMNetworkIdElement.Value = vMNicsItem.RecoveryVMNetworkId;
                                vMNicDetailsElement.Add(recoveryVMNetworkIdElement);
                            }
                            
                            if (vMNicsItem.RecoveryVMSubnetName != null)
                            {
                                XElement recoveryVMSubnetNameElement = new XElement(XName.Get("RecoveryVMSubnetName", "http://schemas.microsoft.com/windowsazure"));
                                recoveryVMSubnetNameElement.Value = vMNicsItem.RecoveryVMSubnetName;
                                vMNicDetailsElement.Add(recoveryVMSubnetNameElement);
                            }
                            
                            if (vMNicsItem.ReplicaNicStaticIPAddress != null)
                            {
                                XElement replicaNicStaticIPAddressElement = new XElement(XName.Get("ReplicaNicStaticIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                replicaNicStaticIPAddressElement.Value = vMNicsItem.ReplicaNicStaticIPAddress;
                                vMNicDetailsElement.Add(replicaNicStaticIPAddressElement);
                            }
                        }
                        vMPropertiesElement.Add(vMNicsSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement jobElement = responseDoc.Element(XName.Get("Job", "http://schemas.microsoft.com/windowsazure"));
                        if (jobElement != null)
                        {
                            Job jobInstance = new Job();
                            result.Job = jobInstance;
                            
                            XElement activityIdElement = jobElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                            if (activityIdElement != null)
                            {
                                string activityIdInstance = activityIdElement.Value;
                                jobInstance.ActivityId = activityIdInstance;
                            }
                            
                            XElement startTimeElement = jobElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                            if (startTimeElement != null && !string.IsNullOrEmpty(startTimeElement.Value))
                            {
                                DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                jobInstance.StartTime = startTimeInstance;
                            }
                            
                            XElement endTimeElement = jobElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                            if (endTimeElement != null && !string.IsNullOrEmpty(endTimeElement.Value))
                            {
                                DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                jobInstance.EndTime = endTimeInstance;
                            }
                            
                            XElement displayNameElement = jobElement.Element(XName.Get("DisplayName", "http://schemas.microsoft.com/windowsazure"));
                            if (displayNameElement != null)
                            {
                                string displayNameInstance = displayNameElement.Value;
                                jobInstance.DisplayName = displayNameInstance;
                            }
                            
                            XElement targetObjectIdElement = jobElement.Element(XName.Get("TargetObjectId", "http://schemas.microsoft.com/windowsazure"));
                            if (targetObjectIdElement != null)
                            {
                                string targetObjectIdInstance = targetObjectIdElement.Value;
                                jobInstance.TargetObjectId = targetObjectIdInstance;
                            }
                            
                            XElement targetObjectTypeElement = jobElement.Element(XName.Get("TargetObjectType", "http://schemas.microsoft.com/windowsazure"));
                            if (targetObjectTypeElement != null)
                            {
                                string targetObjectTypeInstance = targetObjectTypeElement.Value;
                                jobInstance.TargetObjectType = targetObjectTypeInstance;
                            }
                            
                            XElement targetObjectNameElement = jobElement.Element(XName.Get("TargetObjectName", "http://schemas.microsoft.com/windowsazure"));
                            if (targetObjectNameElement != null)
                            {
                                string targetObjectNameInstance = targetObjectNameElement.Value;
                                jobInstance.TargetObjectName = targetObjectNameInstance;
                            }
                            
                            XElement allowedActionsSequenceElement = jobElement.Element(XName.Get("AllowedActions", "http://schemas.microsoft.com/windowsazure"));
                            if (allowedActionsSequenceElement != null)
                            {
                                foreach (XElement allowedActionsElement in allowedActionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                {
                                    jobInstance.AllowedActions.Add(allowedActionsElement.Value);
                                }
                            }
                            
                            XElement stateElement = jobElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                jobInstance.State = stateInstance;
                            }
                            
                            XElement stateDescriptionElement = jobElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                            if (stateDescriptionElement != null)
                            {
                                string stateDescriptionInstance = stateDescriptionElement.Value;
                                jobInstance.StateDescription = stateDescriptionInstance;
                            }
                            
                            XElement tasksSequenceElement = jobElement.Element(XName.Get("Tasks", "http://schemas.microsoft.com/windowsazure"));
                            if (tasksSequenceElement != null)
                            {
                                foreach (XElement tasksElement in tasksSequenceElement.Elements(XName.Get("Task", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    AsrTask taskInstance = new AsrTask();
                                    jobInstance.Tasks.Add(taskInstance);
                                    
                                    XElement startTimeElement2 = tasksElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (startTimeElement2 != null)
                                    {
                                        DateTime startTimeInstance2 = DateTime.Parse(startTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        taskInstance.StartTime = startTimeInstance2;
                                    }
                                    
                                    XElement endTimeElement2 = tasksElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (endTimeElement2 != null)
                                    {
                                        DateTime endTimeInstance2 = DateTime.Parse(endTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        taskInstance.EndTime = endTimeInstance2;
                                    }
                                    
                                    XElement actionsSequenceElement = tasksElement.Element(XName.Get("Actions", "http://schemas.microsoft.com/windowsazure"));
                                    if (actionsSequenceElement != null)
                                    {
                                        foreach (XElement actionsElement in actionsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                        {
                                            taskInstance.Actions.Add(actionsElement.Value);
                                        }
                                    }
                                    
                                    XElement taskTypeElement = tasksElement.Element(XName.Get("TaskType", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskTypeElement != null)
                                    {
                                        string taskTypeInstance = taskTypeElement.Value;
                                        taskInstance.TaskType = taskTypeInstance;
                                    }
                                    
                                    XElement taskNameElement = tasksElement.Element(XName.Get("TaskName", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskNameElement != null)
                                    {
                                        string taskNameInstance = taskNameElement.Value;
                                        taskInstance.TaskName = taskNameInstance;
                                    }
                                    
                                    XElement stateElement2 = tasksElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateElement2 != null)
                                    {
                                        string stateInstance2 = stateElement2.Value;
                                        taskInstance.State = stateInstance2;
                                    }
                                    
                                    XElement stateDescriptionElement2 = tasksElement.Element(XName.Get("StateDescription", "http://schemas.microsoft.com/windowsazure"));
                                    if (stateDescriptionElement2 != null)
                                    {
                                        string stateDescriptionInstance2 = stateDescriptionElement2.Value;
                                        taskInstance.StateDescription = stateDescriptionInstance2;
                                    }
                                    
                                    XElement extendedDetailsElement = tasksElement.Element(XName.Get("ExtendedDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (extendedDetailsElement != null)
                                    {
                                        string extendedDetailsInstance = extendedDetailsElement.Value;
                                        taskInstance.ExtendedDetails = extendedDetailsInstance;
                                    }
                                    
                                    XElement nameElement = tasksElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        taskInstance.Name = nameInstance;
                                    }
                                    
                                    XElement idElement = tasksElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement != null)
                                    {
                                        string idInstance = idElement.Value;
                                        taskInstance.ID = idInstance;
                                    }
                                }
                            }
                            
                            XElement errorsSequenceElement = jobElement.Element(XName.Get("Errors", "http://schemas.microsoft.com/windowsazure"));
                            if (errorsSequenceElement != null)
                            {
                                foreach (XElement errorsElement in errorsSequenceElement.Elements(XName.Get("ErrorDetails", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ErrorDetails errorDetailsInstance = new ErrorDetails();
                                    jobInstance.Errors.Add(errorDetailsInstance);
                                    
                                    XElement serviceErrorDetailsElement = errorsElement.Element(XName.Get("ServiceErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (serviceErrorDetailsElement != null)
                                    {
                                        ServiceError serviceErrorDetailsInstance = new ServiceError();
                                        errorDetailsInstance.ServiceErrorDetails = serviceErrorDetailsInstance;
                                        
                                        XElement codeElement = serviceErrorDetailsElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                        if (codeElement != null)
                                        {
                                            string codeInstance = codeElement.Value;
                                            serviceErrorDetailsInstance.Code = codeInstance;
                                        }
                                        
                                        XElement messageElement = serviceErrorDetailsElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                        if (messageElement != null)
                                        {
                                            string messageInstance = messageElement.Value;
                                            serviceErrorDetailsInstance.Message = messageInstance;
                                        }
                                        
                                        XElement possibleCausesElement = serviceErrorDetailsElement.Element(XName.Get("PossibleCauses", "http://schemas.microsoft.com/windowsazure"));
                                        if (possibleCausesElement != null)
                                        {
                                            string possibleCausesInstance = possibleCausesElement.Value;
                                            serviceErrorDetailsInstance.PossibleCauses = possibleCausesInstance;
                                        }
                                        
                                        XElement recommendedActionElement = serviceErrorDetailsElement.Element(XName.Get("RecommendedAction", "http://schemas.microsoft.com/windowsazure"));
                                        if (recommendedActionElement != null)
                                        {
                                            string recommendedActionInstance = recommendedActionElement.Value;
                                            serviceErrorDetailsInstance.RecommendedAction = recommendedActionInstance;
                                        }
                                        
                                        XElement activityIdElement2 = serviceErrorDetailsElement.Element(XName.Get("ActivityId", "http://schemas.microsoft.com/windowsazure"));
                                        if (activityIdElement2 != null)
                                        {
                                            string activityIdInstance2 = activityIdElement2.Value;
                                            serviceErrorDetailsInstance.ActivityId = activityIdInstance2;
                                        }
                                    }
                                    
                                    XElement providerErrorDetailsElement = errorsElement.Element(XName.Get("ProviderErrorDetails", "http://schemas.microsoft.com/windowsazure"));
                                    if (providerErrorDetailsElement != null)
                                    {
                                        ProviderError providerErrorDetailsInstance = new ProviderError();
                                        errorDetailsInstance.ProviderErrorDetails = providerErrorDetailsInstance;
                                        
                                        XElement errorCodeElement = providerErrorDetailsElement.Element(XName.Get("ErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorCodeElement != null)
                                        {
                                            int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                            providerErrorDetailsInstance.ErrorCode = errorCodeInstance;
                                        }
                                        
                                        XElement errorMessageElement = providerErrorDetailsElement.Element(XName.Get("ErrorMessage", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorMessageElement != null)
                                        {
                                            string errorMessageInstance = errorMessageElement.Value;
                                            providerErrorDetailsInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        XElement errorIdElement = providerErrorDetailsElement.Element(XName.Get("ErrorId", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorIdElement != null)
                                        {
                                            string errorIdInstance = errorIdElement.Value;
                                            providerErrorDetailsInstance.ErrorId = errorIdInstance;
                                        }
                                        
                                        XElement workflowIdElement = providerErrorDetailsElement.Element(XName.Get("WorkflowId", "http://schemas.microsoft.com/windowsazure"));
                                        if (workflowIdElement != null)
                                        {
                                            string workflowIdInstance = workflowIdElement.Value;
                                            providerErrorDetailsInstance.WorkflowId = workflowIdInstance;
                                        }
                                        
                                        XElement creationTimeUtcElement = providerErrorDetailsElement.Element(XName.Get("CreationTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                                        if (creationTimeUtcElement != null)
                                        {
                                            DateTime creationTimeUtcInstance = DateTime.Parse(creationTimeUtcElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                            providerErrorDetailsInstance.CreationTimeUtc = creationTimeUtcInstance;
                                        }
                                        
                                        XElement errorLevelElement = providerErrorDetailsElement.Element(XName.Get("ErrorLevel", "http://schemas.microsoft.com/windowsazure"));
                                        if (errorLevelElement != null)
                                        {
                                            string errorLevelInstance = errorLevelElement.Value;
                                            providerErrorDetailsInstance.ErrorLevel = errorLevelInstance;
                                        }
                                        
                                        XElement affectedObjectsSequenceElement = providerErrorDetailsElement.Element(XName.Get("AffectedObjects", "http://schemas.microsoft.com/windowsazure"));
                                        if (affectedObjectsSequenceElement != null)
                                        {
                                            foreach (XElement affectedObjectsElement in affectedObjectsSequenceElement.Elements(XName.Get("KeyValueOfstringstring", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                            {
                                                string affectedObjectsKey = affectedObjectsElement.Element(XName.Get("Key", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                string affectedObjectsValue = affectedObjectsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")).Value;
                                                providerErrorDetailsInstance.AffectedObjects.Add(affectedObjectsKey, affectedObjectsValue);
                                            }
                                        }
                                    }
                                    
                                    XElement taskIdElement = errorsElement.Element(XName.Get("TaskId", "http://schemas.microsoft.com/windowsazure"));
                                    if (taskIdElement != null)
                                    {
                                        string taskIdInstance = taskIdElement.Value;
                                        errorDetailsInstance.TaskId = taskIdInstance;
                                    }
                                }
                            }
                            
                            XElement nameElement2 = jobElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null)
                            {
                                string nameInstance2 = nameElement2.Value;
                                jobInstance.Name = nameInstance2;
                            }
                            
                            XElement idElement2 = jobElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement2 != null)
                            {
                                string idInstance2 = idElement2.Value;
                                jobInstance.ID = idInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
