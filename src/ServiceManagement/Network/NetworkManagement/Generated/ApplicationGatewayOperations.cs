// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.WindowsAzure.Management.Network;
using Microsoft.WindowsAzure.Management.Network.Models;

namespace Microsoft.WindowsAzure.Management.Network
{
    /// <summary>
    /// The Application Gateway Management API includes operations for managing
    /// application gateways in your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154113.aspx for
    /// more information)
    /// </summary>
    internal partial class ApplicationGatewayOperations : IServiceOperations<NetworkManagementClient>, IApplicationGatewayOperations
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ApplicationGatewayOperations(NetworkManagementClient client)
        {
            this._client = client;
        }
        
        private NetworkManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Network.NetworkManagementClient.
        /// </summary>
        public NetworkManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Add certificate operation adds the ssl certificate to the
        /// application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='certificateName'>
        /// Required. Certificate name
        /// </param>
        /// <param name='certificate'>
        /// Required. The application gateway ssl certificate
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ApplicationGatewayOperationResponse> AddCertificateAsync(string gatewayName, string certificateName, ApplicationGatewayCertificate certificate, CancellationToken cancellationToken)
        {
            NetworkManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("certificateName", certificateName);
                tracingParameters.Add("certificate", certificate);
                TracingAdapter.Enter(invocationId, this, "AddCertificateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GatewayOperationResponse response = await client.ApplicationGateways.BeginAddCertificateAsync(gatewayName, certificateName, certificate, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ApplicationGatewayOperationResponse result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == AsyncOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != AsyncOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Begin Add certificate operation adds the ssl certificate to the
        /// application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='certificateName'>
        /// Required. Certificate name
        /// </param>
        /// <param name='certificate'>
        /// Required. The application gateway ssl certificate
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginAddCertificateAsync(string gatewayName, string certificateName, ApplicationGatewayCertificate certificate, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            if (certificateName == null)
            {
                throw new ArgumentNullException("certificateName");
            }
            if (certificate == null)
            {
                throw new ArgumentNullException("certificate");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("certificateName", certificateName);
                tracingParameters.Add("certificate", certificate);
                TracingAdapter.Enter(invocationId, this, "BeginAddCertificateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            url = url + "/sslcertificates/";
            url = url + Uri.EscapeDataString(certificateName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement certificateFileElement = new XElement(XName.Get("CertificateFile", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(certificateFileElement);
                
                if (certificate.Data != null)
                {
                    XElement dataElement = new XElement(XName.Get("Data", "http://schemas.microsoft.com/windowsazure"));
                    dataElement.Value = certificate.Data;
                    certificateFileElement.Add(dataElement);
                }
                
                if (certificate.CertificateFormat != null)
                {
                    XElement certificateFormatElement = new XElement(XName.Get("CertificateFormat", "http://schemas.microsoft.com/windowsazure"));
                    certificateFormatElement.Value = certificate.CertificateFormat;
                    certificateFileElement.Add(certificateFormatElement);
                }
                
                if (certificate.Password != null)
                {
                    XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                    passwordElement.Value = certificate.Password;
                    certificateFileElement.Add(passwordElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GatewayOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Create Application Gateway operation  creates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin CreateApplication
        /// Gateway request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginCreateApplicationGatewayAsync(CreateApplicationGatewayParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateApplicationGatewayAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement createApplicationGatewayParametersElement = new XElement(XName.Get("CreateApplicationGatewayParameters", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(createApplicationGatewayParametersElement);
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    createApplicationGatewayParametersElement.Add(descriptionElement);
                }
                
                if (parameters.GatewaySize != null)
                {
                    XElement gatewaySizeElement = new XElement(XName.Get("GatewaySize", "http://schemas.microsoft.com/windowsazure"));
                    gatewaySizeElement.Value = parameters.GatewaySize;
                    createApplicationGatewayParametersElement.Add(gatewaySizeElement);
                }
                
                XElement instanceCountElement = new XElement(XName.Get("InstanceCount", "http://schemas.microsoft.com/windowsazure"));
                instanceCountElement.Value = parameters.InstanceCount.ToString();
                createApplicationGatewayParametersElement.Add(instanceCountElement);
                
                if (parameters.Name != null)
                {
                    XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                    nameElement.Value = parameters.Name;
                    createApplicationGatewayParametersElement.Add(nameElement);
                }
                
                if (parameters.Subnets != null)
                {
                    if (parameters.Subnets is ILazyCollection == false || ((ILazyCollection)parameters.Subnets).IsInitialized)
                    {
                        XElement subnetsSequenceElement = new XElement(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                        foreach (string subnetsItem in parameters.Subnets)
                        {
                            XElement subnetsItemElement = new XElement(XName.Get("Subnet", "http://schemas.microsoft.com/windowsazure"));
                            subnetsItemElement.Value = subnetsItem;
                            subnetsSequenceElement.Add(subnetsItemElement);
                        }
                        createApplicationGatewayParametersElement.Add(subnetsSequenceElement);
                    }
                }
                
                if (parameters.VnetName != null)
                {
                    XElement vnetNameElement = new XElement(XName.Get("VnetName", "http://schemas.microsoft.com/windowsazure"));
                    vnetNameElement.Value = parameters.VnetName;
                    createApplicationGatewayParametersElement.Add(vnetNameElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GatewayOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginDeleteApplicationGatewayAsync(string gatewayName, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteApplicationGatewayAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GatewayOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Delete Application Gateway certificate.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of the certificate.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginDeleteApplicationGatewayCertificateAsync(string gatewayName, string certificateName, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            if (certificateName == null)
            {
                throw new ArgumentNullException("certificateName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("certificateName", certificateName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteApplicationGatewayCertificateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            url = url + "/sslcertificates/";
            url = url + Uri.EscapeDataString(certificateName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GatewayOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specified
        /// operation on Application Gateway .  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Execute Operation
        /// request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginExecuteOperationAsync(string gatewayName, ApplicationGatewayOperation parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginExecuteOperationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            url = url + "/Operations";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement applicationGatewayOperationElement = new XElement(XName.Get("ApplicationGatewayOperation", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(applicationGatewayOperationElement);
                
                if (parameters.OperationType != null)
                {
                    XElement operationTypeElement = new XElement(XName.Get("OperationType", "http://schemas.microsoft.com/windowsazure"));
                    operationTypeElement.Value = parameters.OperationType;
                    applicationGatewayOperationElement.Add(operationTypeElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GatewayOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Set Application Gateway config operation  sets the
        /// specified config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. The Begin Set Application Gateway Config operation  sets
        /// the specified config on the application gateway
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginSetConfigAsync(string gatewayName, ApplicationGatewaySetConfiguration config, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            if (config == null)
            {
                throw new ArgumentNullException("config");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("config", config);
                TracingAdapter.Enter(invocationId, this, "BeginSetConfigAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            url = url + "/configuration";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement applicationGatewayConfigurationElement = new XElement(XName.Get("ApplicationGatewayConfiguration", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(applicationGatewayConfigurationElement);
                
                if (config.FrontendIPConfigurations != null)
                {
                    if (config.FrontendIPConfigurations is ILazyCollection == false || ((ILazyCollection)config.FrontendIPConfigurations).IsInitialized)
                    {
                        XElement frontendIPConfigurationsSequenceElement = new XElement(XName.Get("FrontendIPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                        foreach (FrontendIPConfiguration frontendIPConfigurationsItem in config.FrontendIPConfigurations)
                        {
                            XElement frontendIPConfigurationElement = new XElement(XName.Get("FrontendIPConfiguration", "http://schemas.microsoft.com/windowsazure"));
                            frontendIPConfigurationsSequenceElement.Add(frontendIPConfigurationElement);
                            
                            if (frontendIPConfigurationsItem.Name != null)
                            {
                                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement.Value = frontendIPConfigurationsItem.Name;
                                frontendIPConfigurationElement.Add(nameElement);
                            }
                            
                            if (frontendIPConfigurationsItem.Type != null)
                            {
                                XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                typeElement.Value = frontendIPConfigurationsItem.Type;
                                frontendIPConfigurationElement.Add(typeElement);
                            }
                            
                            if (frontendIPConfigurationsItem.StaticIPAddress != null)
                            {
                                XElement staticIPAddressElement = new XElement(XName.Get("StaticIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                staticIPAddressElement.Value = frontendIPConfigurationsItem.StaticIPAddress;
                                frontendIPConfigurationElement.Add(staticIPAddressElement);
                            }
                        }
                        applicationGatewayConfigurationElement.Add(frontendIPConfigurationsSequenceElement);
                    }
                }
                
                if (config.FrontendPorts != null)
                {
                    if (config.FrontendPorts is ILazyCollection == false || ((ILazyCollection)config.FrontendPorts).IsInitialized)
                    {
                        XElement frontendPortsSequenceElement = new XElement(XName.Get("FrontendPorts", "http://schemas.microsoft.com/windowsazure"));
                        foreach (FrontendPort frontendPortsItem in config.FrontendPorts)
                        {
                            XElement frontendPortElement = new XElement(XName.Get("FrontendPort", "http://schemas.microsoft.com/windowsazure"));
                            frontendPortsSequenceElement.Add(frontendPortElement);
                            
                            if (frontendPortsItem.Name != null)
                            {
                                XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement2.Value = frontendPortsItem.Name;
                                frontendPortElement.Add(nameElement2);
                            }
                            
                            XElement portElement = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                            portElement.Value = frontendPortsItem.Port.ToString();
                            frontendPortElement.Add(portElement);
                        }
                        applicationGatewayConfigurationElement.Add(frontendPortsSequenceElement);
                    }
                }
                
                if (config.Probes != null)
                {
                    if (config.Probes is ILazyCollection == false || ((ILazyCollection)config.Probes).IsInitialized)
                    {
                        XElement probesSequenceElement = new XElement(XName.Get("Probes", "http://schemas.microsoft.com/windowsazure"));
                        foreach (Probe probesItem in config.Probes)
                        {
                            XElement probeElement = new XElement(XName.Get("Probe", "http://schemas.microsoft.com/windowsazure"));
                            probesSequenceElement.Add(probeElement);
                            
                            if (probesItem.Name != null)
                            {
                                XElement nameElement3 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement3.Value = probesItem.Name;
                                probeElement.Add(nameElement3);
                            }
                            
                            if (probesItem.Protocol != null)
                            {
                                XElement protocolElement = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                protocolElement.Value = probesItem.Protocol;
                                probeElement.Add(protocolElement);
                            }
                            
                            if (probesItem.Host != null)
                            {
                                XElement hostElement = new XElement(XName.Get("Host", "http://schemas.microsoft.com/windowsazure"));
                                hostElement.Value = probesItem.Host;
                                probeElement.Add(hostElement);
                            }
                            
                            if (probesItem.Path != null)
                            {
                                XElement pathElement = new XElement(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                pathElement.Value = probesItem.Path;
                                probeElement.Add(pathElement);
                            }
                            
                            XElement intervalElement = new XElement(XName.Get("Interval", "http://schemas.microsoft.com/windowsazure"));
                            intervalElement.Value = probesItem.Interval.ToString();
                            probeElement.Add(intervalElement);
                            
                            XElement timeoutElement = new XElement(XName.Get("Timeout", "http://schemas.microsoft.com/windowsazure"));
                            timeoutElement.Value = probesItem.Timeout.ToString();
                            probeElement.Add(timeoutElement);
                            
                            XElement unhealthyThresholdElement = new XElement(XName.Get("UnhealthyThreshold", "http://schemas.microsoft.com/windowsazure"));
                            unhealthyThresholdElement.Value = probesItem.UnhealthyThreshold.ToString();
                            probeElement.Add(unhealthyThresholdElement);
                        }
                        applicationGatewayConfigurationElement.Add(probesSequenceElement);
                    }
                }
                
                if (config.BackendAddressPools != null)
                {
                    if (config.BackendAddressPools is ILazyCollection == false || ((ILazyCollection)config.BackendAddressPools).IsInitialized)
                    {
                        XElement backendAddressPoolsSequenceElement = new XElement(XName.Get("BackendAddressPools", "http://schemas.microsoft.com/windowsazure"));
                        foreach (BackendAddressPool backendAddressPoolsItem in config.BackendAddressPools)
                        {
                            XElement backendAddressPoolElement = new XElement(XName.Get("BackendAddressPool", "http://schemas.microsoft.com/windowsazure"));
                            backendAddressPoolsSequenceElement.Add(backendAddressPoolElement);
                            
                            if (backendAddressPoolsItem.Name != null)
                            {
                                XElement nameElement4 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement4.Value = backendAddressPoolsItem.Name;
                                backendAddressPoolElement.Add(nameElement4);
                            }
                            
                            if (backendAddressPoolsItem.BackendServers != null)
                            {
                                if (backendAddressPoolsItem.BackendServers is ILazyCollection == false || ((ILazyCollection)backendAddressPoolsItem.BackendServers).IsInitialized)
                                {
                                    XElement iPAddressesSequenceElement = new XElement(XName.Get("IPAddresses", "http://schemas.microsoft.com/windowsazure"));
                                    foreach (BackendServer iPAddressesItem in backendAddressPoolsItem.BackendServers)
                                    {
                                        XElement iPAddressElement = new XElement(XName.Get("IPAddress", "http://schemas.microsoft.com/windowsazure"));
                                        iPAddressesSequenceElement.Add(iPAddressElement);
                                        
                                        if (iPAddressesItem.IPAddress != null)
                                        {
                                            iPAddressElement.Value = iPAddressesItem.IPAddress;
                                        }
                                    }
                                    backendAddressPoolElement.Add(iPAddressesSequenceElement);
                                }
                            }
                        }
                        applicationGatewayConfigurationElement.Add(backendAddressPoolsSequenceElement);
                    }
                }
                
                if (config.BackendHttpSettingsList != null)
                {
                    if (config.BackendHttpSettingsList is ILazyCollection == false || ((ILazyCollection)config.BackendHttpSettingsList).IsInitialized)
                    {
                        XElement backendHttpSettingsListSequenceElement = new XElement(XName.Get("BackendHttpSettingsList", "http://schemas.microsoft.com/windowsazure"));
                        foreach (BackendHttpSettings backendHttpSettingsListItem in config.BackendHttpSettingsList)
                        {
                            XElement backendHttpSettingsElement = new XElement(XName.Get("BackendHttpSettings", "http://schemas.microsoft.com/windowsazure"));
                            backendHttpSettingsListSequenceElement.Add(backendHttpSettingsElement);
                            
                            if (backendHttpSettingsListItem.Name != null)
                            {
                                XElement nameElement5 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement5.Value = backendHttpSettingsListItem.Name;
                                backendHttpSettingsElement.Add(nameElement5);
                            }
                            
                            XElement portElement2 = new XElement(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                            portElement2.Value = backendHttpSettingsListItem.Port.ToString();
                            backendHttpSettingsElement.Add(portElement2);
                            
                            XElement protocolElement2 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                            protocolElement2.Value = backendHttpSettingsListItem.Protocol.ToString();
                            backendHttpSettingsElement.Add(protocolElement2);
                            
                            if (backendHttpSettingsListItem.CookieBasedAffinity != null)
                            {
                                XElement cookieBasedAffinityElement = new XElement(XName.Get("CookieBasedAffinity", "http://schemas.microsoft.com/windowsazure"));
                                cookieBasedAffinityElement.Value = backendHttpSettingsListItem.CookieBasedAffinity;
                                backendHttpSettingsElement.Add(cookieBasedAffinityElement);
                            }
                            
                            XElement requestTimeoutElement = new XElement(XName.Get("RequestTimeout", "http://schemas.microsoft.com/windowsazure"));
                            requestTimeoutElement.Value = backendHttpSettingsListItem.RequestTimeout.ToString();
                            backendHttpSettingsElement.Add(requestTimeoutElement);
                            
                            if (backendHttpSettingsListItem.Probe != null)
                            {
                                XElement probeElement2 = new XElement(XName.Get("Probe", "http://schemas.microsoft.com/windowsazure"));
                                probeElement2.Value = backendHttpSettingsListItem.Probe;
                                backendHttpSettingsElement.Add(probeElement2);
                            }
                        }
                        applicationGatewayConfigurationElement.Add(backendHttpSettingsListSequenceElement);
                    }
                }
                
                if (config.HttpListeners != null)
                {
                    if (config.HttpListeners is ILazyCollection == false || ((ILazyCollection)config.HttpListeners).IsInitialized)
                    {
                        XElement httpListenersSequenceElement = new XElement(XName.Get("HttpListeners", "http://schemas.microsoft.com/windowsazure"));
                        foreach (AGHttpListener httpListenersItem in config.HttpListeners)
                        {
                            XElement httpListenerElement = new XElement(XName.Get("HttpListener", "http://schemas.microsoft.com/windowsazure"));
                            httpListenersSequenceElement.Add(httpListenerElement);
                            
                            if (httpListenersItem.Name != null)
                            {
                                XElement nameElement6 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement6.Value = httpListenersItem.Name;
                                httpListenerElement.Add(nameElement6);
                            }
                            
                            if (httpListenersItem.FrontendIP != null)
                            {
                                XElement frontendIPElement = new XElement(XName.Get("FrontendIP", "http://schemas.microsoft.com/windowsazure"));
                                frontendIPElement.Value = httpListenersItem.FrontendIP;
                                httpListenerElement.Add(frontendIPElement);
                            }
                            
                            if (httpListenersItem.FrontendPort != null)
                            {
                                XElement frontendPortElement2 = new XElement(XName.Get("FrontendPort", "http://schemas.microsoft.com/windowsazure"));
                                frontendPortElement2.Value = httpListenersItem.FrontendPort;
                                httpListenerElement.Add(frontendPortElement2);
                            }
                            
                            XElement protocolElement3 = new XElement(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                            protocolElement3.Value = httpListenersItem.Protocol.ToString();
                            httpListenerElement.Add(protocolElement3);
                            
                            if (httpListenersItem.SslCert != null)
                            {
                                XElement sslCertElement = new XElement(XName.Get("SslCert", "http://schemas.microsoft.com/windowsazure"));
                                sslCertElement.Value = httpListenersItem.SslCert;
                                httpListenerElement.Add(sslCertElement);
                            }
                        }
                        applicationGatewayConfigurationElement.Add(httpListenersSequenceElement);
                    }
                }
                
                if (config.HttpLoadBalancingRules != null)
                {
                    if (config.HttpLoadBalancingRules is ILazyCollection == false || ((ILazyCollection)config.HttpLoadBalancingRules).IsInitialized)
                    {
                        XElement httpLoadBalancingRulesSequenceElement = new XElement(XName.Get("HttpLoadBalancingRules", "http://schemas.microsoft.com/windowsazure"));
                        foreach (HttpLoadBalancingRule httpLoadBalancingRulesItem in config.HttpLoadBalancingRules)
                        {
                            XElement httpLoadBalancingRuleElement = new XElement(XName.Get("HttpLoadBalancingRule", "http://schemas.microsoft.com/windowsazure"));
                            httpLoadBalancingRulesSequenceElement.Add(httpLoadBalancingRuleElement);
                            
                            if (httpLoadBalancingRulesItem.Name != null)
                            {
                                XElement nameElement7 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement7.Value = httpLoadBalancingRulesItem.Name;
                                httpLoadBalancingRuleElement.Add(nameElement7);
                            }
                            
                            if (httpLoadBalancingRulesItem.Type != null)
                            {
                                XElement typeElement2 = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                typeElement2.Value = httpLoadBalancingRulesItem.Type;
                                httpLoadBalancingRuleElement.Add(typeElement2);
                            }
                            
                            if (httpLoadBalancingRulesItem.BackendHttpSettings != null)
                            {
                                XElement backendHttpSettingsElement2 = new XElement(XName.Get("BackendHttpSettings", "http://schemas.microsoft.com/windowsazure"));
                                backendHttpSettingsElement2.Value = httpLoadBalancingRulesItem.BackendHttpSettings;
                                httpLoadBalancingRuleElement.Add(backendHttpSettingsElement2);
                            }
                            
                            if (httpLoadBalancingRulesItem.Listener != null)
                            {
                                XElement listenerElement = new XElement(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure"));
                                listenerElement.Value = httpLoadBalancingRulesItem.Listener;
                                httpLoadBalancingRuleElement.Add(listenerElement);
                            }
                            
                            if (httpLoadBalancingRulesItem.BackendAddressPool != null)
                            {
                                XElement backendAddressPoolElement2 = new XElement(XName.Get("BackendAddressPool", "http://schemas.microsoft.com/windowsazure"));
                                backendAddressPoolElement2.Value = httpLoadBalancingRulesItem.BackendAddressPool;
                                httpLoadBalancingRuleElement.Add(backendAddressPoolElement2);
                            }
                        }
                        applicationGatewayConfigurationElement.Add(httpLoadBalancingRulesSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GatewayOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Update Application Gateway operation  updates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='updateParameters'>
        /// Required. Parameters supplied to the Begin UpdateApplication
        /// Gateway request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<GatewayOperationResponse> BeginUpdateApplicationGatewayAsync(string gatewayName, UpdateApplicationGatewayParameters updateParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            if (updateParameters == null)
            {
                throw new ArgumentNullException("updateParameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("updateParameters", updateParameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateApplicationGatewayAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateApplicationGatewayParametersElement = new XElement(XName.Get("UpdateApplicationGatewayParameters", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(updateApplicationGatewayParametersElement);
                
                if (updateParameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = updateParameters.Description;
                    updateApplicationGatewayParametersElement.Add(descriptionElement);
                }
                
                if (updateParameters.GatewaySize != null)
                {
                    XElement gatewaySizeElement = new XElement(XName.Get("GatewaySize", "http://schemas.microsoft.com/windowsazure"));
                    gatewaySizeElement.Value = updateParameters.GatewaySize;
                    updateApplicationGatewayParametersElement.Add(gatewaySizeElement);
                }
                
                XElement instanceCountElement = new XElement(XName.Get("InstanceCount", "http://schemas.microsoft.com/windowsazure"));
                instanceCountElement.Value = updateParameters.InstanceCount.ToString();
                updateApplicationGatewayParametersElement.Add(instanceCountElement);
                
                if (updateParameters.Subnets != null)
                {
                    if (updateParameters.Subnets is ILazyCollection == false || ((ILazyCollection)updateParameters.Subnets).IsInitialized)
                    {
                        XElement subnetsSequenceElement = new XElement(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                        foreach (string subnetsItem in updateParameters.Subnets)
                        {
                            XElement subnetsItemElement = new XElement(XName.Get("Subnet", "http://schemas.microsoft.com/windowsazure"));
                            subnetsItemElement.Value = subnetsItem;
                            subnetsSequenceElement.Add(subnetsItemElement);
                        }
                        updateApplicationGatewayParametersElement.Add(subnetsSequenceElement);
                    }
                }
                
                if (updateParameters.VnetName != null)
                {
                    XElement vnetNameElement = new XElement(XName.Get("VnetName", "http://schemas.microsoft.com/windowsazure"));
                    vnetNameElement.Value = updateParameters.VnetName;
                    updateApplicationGatewayParametersElement.Add(vnetNameElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GatewayOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GatewayOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationAsyncResponseElement = responseDoc.Element(XName.Get("GatewayOperationAsyncResponse", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationAsyncResponseElement != null)
                        {
                            XElement idElement = gatewayOperationAsyncResponseElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.OperationId = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create Application Gateway operation  creates Application
        /// Gateway with the specified parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to CreateApplication Gateway request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ApplicationGatewayOperationResponse> CreateAsync(CreateApplicationGatewayParameters parameters, CancellationToken cancellationToken)
        {
            NetworkManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GatewayOperationResponse response = await client.ApplicationGateways.BeginCreateApplicationGatewayAsync(parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ApplicationGatewayOperationResponse result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == AsyncOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != AsyncOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete Application Gateway operation  deletes Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ApplicationGatewayOperationResponse> DeleteAsync(string gatewayName, CancellationToken cancellationToken)
        {
            NetworkManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GatewayOperationResponse response = await client.ApplicationGateways.BeginDeleteApplicationGatewayAsync(gatewayName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ApplicationGatewayOperationResponse result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == AsyncOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != AsyncOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete Application Gateway certificate operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of the certificate.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ApplicationGatewayOperationResponse> DeleteCertificateAsync(string gatewayName, string certificateName, CancellationToken cancellationToken)
        {
            NetworkManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("certificateName", certificateName);
                TracingAdapter.Enter(invocationId, this, "DeleteCertificateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GatewayOperationResponse response = await client.ApplicationGateways.BeginDeleteApplicationGatewayCertificateAsync(gatewayName, certificateName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ApplicationGatewayOperationResponse result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == AsyncOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != AsyncOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Execute Application Gateway Operation executes specofoed
        /// operation in the Application Gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Name of the gateway
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to Execute Operation request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ApplicationGatewayOperationResponse> ExecuteOperationAsync(string gatewayName, ApplicationGatewayOperation parameters, CancellationToken cancellationToken)
        {
            NetworkManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ExecuteOperationAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GatewayOperationResponse response = await client.ApplicationGateways.BeginExecuteOperationAsync(gatewayName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ApplicationGatewayOperationResponse result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == AsyncOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != AsyncOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get Application Gateway operation retrieves the application
        /// gateway provisioned for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains details of the application gateway.
        /// </returns>
        public async Task<ApplicationGatewayGetResponse> GetAsync(string gatewayName, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement applicationGatewayElement = responseDoc.Element(XName.Get("ApplicationGateway", "http://schemas.microsoft.com/windowsazure"));
                        if (applicationGatewayElement != null)
                        {
                            XElement descriptionElement = applicationGatewayElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                result.Description = descriptionInstance;
                            }
                            
                            XElement dnsNameElement = applicationGatewayElement.Element(XName.Get("DnsName", "http://schemas.microsoft.com/windowsazure"));
                            if (dnsNameElement != null)
                            {
                                string dnsNameInstance = dnsNameElement.Value;
                                result.DnsName = dnsNameInstance;
                            }
                            
                            XElement gatewaySizeElement = applicationGatewayElement.Element(XName.Get("GatewaySize", "http://schemas.microsoft.com/windowsazure"));
                            if (gatewaySizeElement != null)
                            {
                                string gatewaySizeInstance = gatewaySizeElement.Value;
                                result.GatewaySize = gatewaySizeInstance;
                            }
                            
                            XElement instanceCountElement = applicationGatewayElement.Element(XName.Get("InstanceCount", "http://schemas.microsoft.com/windowsazure"));
                            if (instanceCountElement != null)
                            {
                                uint instanceCountInstance = uint.Parse(instanceCountElement.Value, CultureInfo.InvariantCulture);
                                result.InstanceCount = instanceCountInstance;
                            }
                            
                            XElement nameElement = applicationGatewayElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                result.Name = nameInstance;
                            }
                            
                            XElement stateElement = applicationGatewayElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                result.State = stateInstance;
                            }
                            
                            XElement subnetsSequenceElement = applicationGatewayElement.Element(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                            if (subnetsSequenceElement != null)
                            {
                                foreach (XElement subnetsElement in subnetsSequenceElement.Elements(XName.Get("Subnet", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    result.Subnets.Add(subnetsElement.Value);
                                }
                            }
                            
                            XElement vnetNameElement = applicationGatewayElement.Element(XName.Get("VnetName", "http://schemas.microsoft.com/windowsazure"));
                            if (vnetNameElement != null)
                            {
                                string vnetNameInstance = vnetNameElement.Value;
                                result.VnetName = vnetNameInstance;
                            }
                            
                            XElement virtualIPsSequenceElement = applicationGatewayElement.Element(XName.Get("VirtualIPs", "http://schemas.microsoft.com/windowsazure"));
                            if (virtualIPsSequenceElement != null)
                            {
                                foreach (XElement virtualIPsElement in virtualIPsSequenceElement.Elements(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    result.VirtualIPs.Add(virtualIPsElement.Value);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Application Gateway certificate operation retrieves the ssl
        /// certificate provisioned for the given gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The name of the gateway.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of the certificate.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of GetApplicationGatewayCertificate request.
        /// </returns>
        public async Task<ApplicationGatewayGetCertificate> GetCertificateAsync(string gatewayName, string certificateName, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            if (certificateName == null)
            {
                throw new ArgumentNullException("certificateName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("certificateName", certificateName);
                TracingAdapter.Enter(invocationId, this, "GetCertificateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            url = url + "/sslcertificates/";
            url = url + Uri.EscapeDataString(certificateName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayGetCertificate result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayGetCertificate();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement applicationGatewayCertificateElement = responseDoc.Element(XName.Get("ApplicationGatewayCertificate", "http://schemas.microsoft.com/windowsazure"));
                        if (applicationGatewayCertificateElement != null)
                        {
                            XElement nameElement = applicationGatewayCertificateElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                result.Name = nameInstance;
                            }
                            
                            XElement dataElement = applicationGatewayCertificateElement.Element(XName.Get("Data", "http://schemas.microsoft.com/windowsazure"));
                            if (dataElement != null)
                            {
                                string dataInstance = dataElement.Value;
                                result.Data = dataInstance;
                            }
                            
                            XElement stateElement = applicationGatewayCertificateElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                string stateInstance = stateElement.Value;
                                result.State = stateInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Application Gateway Configuration operation retrieves the
        /// configuration of the gateway.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. The id  of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a GetApplicationGatewayConfiguation  request.
        /// </returns>
        public async Task<ApplicationGatewayGetConfiguration> GetConfigAsync(string gatewayName, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                TracingAdapter.Enter(invocationId, this, "GetConfigAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            url = url + "/configuration";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayGetConfiguration result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayGetConfiguration();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement applicationGatewayConfigurationElement = responseDoc.Element(XName.Get("ApplicationGatewayConfiguration", "http://schemas.microsoft.com/windowsazure"));
                        if (applicationGatewayConfigurationElement != null)
                        {
                            XElement frontendIPConfigurationsSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("FrontendIPConfigurations", "http://schemas.microsoft.com/windowsazure"));
                            if (frontendIPConfigurationsSequenceElement != null)
                            {
                                foreach (XElement frontendIPConfigurationsElement in frontendIPConfigurationsSequenceElement.Elements(XName.Get("FrontendIPConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    FrontendIPConfiguration frontendIPConfigurationInstance = new FrontendIPConfiguration();
                                    result.FrontendIPConfigurations.Add(frontendIPConfigurationInstance);
                                    
                                    XElement nameElement = frontendIPConfigurationsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        frontendIPConfigurationInstance.Name = nameInstance;
                                    }
                                    
                                    XElement typeElement = frontendIPConfigurationsElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                    if (typeElement != null)
                                    {
                                        string typeInstance = typeElement.Value;
                                        frontendIPConfigurationInstance.Type = typeInstance;
                                    }
                                    
                                    XElement staticIPAddressElement = frontendIPConfigurationsElement.Element(XName.Get("StaticIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                    if (staticIPAddressElement != null)
                                    {
                                        string staticIPAddressInstance = staticIPAddressElement.Value;
                                        frontendIPConfigurationInstance.StaticIPAddress = staticIPAddressInstance;
                                    }
                                }
                            }
                            
                            XElement frontendPortsSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("FrontendPorts", "http://schemas.microsoft.com/windowsazure"));
                            if (frontendPortsSequenceElement != null)
                            {
                                foreach (XElement frontendPortsElement in frontendPortsSequenceElement.Elements(XName.Get("FrontendPort", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    FrontendPort frontendPortInstance = new FrontendPort();
                                    result.FrontendPorts.Add(frontendPortInstance);
                                    
                                    XElement nameElement2 = frontendPortsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement2 != null)
                                    {
                                        string nameInstance2 = nameElement2.Value;
                                        frontendPortInstance.Name = nameInstance2;
                                    }
                                    
                                    XElement portElement = frontendPortsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                    if (portElement != null)
                                    {
                                        ushort portInstance = ushort.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                        frontendPortInstance.Port = portInstance;
                                    }
                                }
                            }
                            
                            XElement probesSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("Probes", "http://schemas.microsoft.com/windowsazure"));
                            if (probesSequenceElement != null)
                            {
                                foreach (XElement probesElement in probesSequenceElement.Elements(XName.Get("Probe", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    Probe probeInstance = new Probe();
                                    result.Probes.Add(probeInstance);
                                    
                                    XElement nameElement3 = probesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement3 != null)
                                    {
                                        string nameInstance3 = nameElement3.Value;
                                        probeInstance.Name = nameInstance3;
                                    }
                                    
                                    XElement protocolElement = probesElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                    if (protocolElement != null)
                                    {
                                        string protocolInstance = protocolElement.Value;
                                        probeInstance.Protocol = protocolInstance;
                                    }
                                    
                                    XElement hostElement = probesElement.Element(XName.Get("Host", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostElement != null)
                                    {
                                        string hostInstance = hostElement.Value;
                                        probeInstance.Host = hostInstance;
                                    }
                                    
                                    XElement pathElement = probesElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                    if (pathElement != null)
                                    {
                                        string pathInstance = pathElement.Value;
                                        probeInstance.Path = pathInstance;
                                    }
                                    
                                    XElement intervalElement = probesElement.Element(XName.Get("Interval", "http://schemas.microsoft.com/windowsazure"));
                                    if (intervalElement != null)
                                    {
                                        uint intervalInstance = uint.Parse(intervalElement.Value, CultureInfo.InvariantCulture);
                                        probeInstance.Interval = intervalInstance;
                                    }
                                    
                                    XElement timeoutElement = probesElement.Element(XName.Get("Timeout", "http://schemas.microsoft.com/windowsazure"));
                                    if (timeoutElement != null)
                                    {
                                        uint timeoutInstance = uint.Parse(timeoutElement.Value, CultureInfo.InvariantCulture);
                                        probeInstance.Timeout = timeoutInstance;
                                    }
                                    
                                    XElement unhealthyThresholdElement = probesElement.Element(XName.Get("UnhealthyThreshold", "http://schemas.microsoft.com/windowsazure"));
                                    if (unhealthyThresholdElement != null)
                                    {
                                        uint unhealthyThresholdInstance = uint.Parse(unhealthyThresholdElement.Value, CultureInfo.InvariantCulture);
                                        probeInstance.UnhealthyThreshold = unhealthyThresholdInstance;
                                    }
                                }
                            }
                            
                            XElement backendAddressPoolsSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("BackendAddressPools", "http://schemas.microsoft.com/windowsazure"));
                            if (backendAddressPoolsSequenceElement != null)
                            {
                                foreach (XElement backendAddressPoolsElement in backendAddressPoolsSequenceElement.Elements(XName.Get("BackendAddressPool", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    BackendAddressPool backendAddressPoolInstance = new BackendAddressPool();
                                    result.BackendAddressPools.Add(backendAddressPoolInstance);
                                    
                                    XElement nameElement4 = backendAddressPoolsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement4 != null)
                                    {
                                        string nameInstance4 = nameElement4.Value;
                                        backendAddressPoolInstance.Name = nameInstance4;
                                    }
                                    
                                    XElement iPAddressesSequenceElement = backendAddressPoolsElement.Element(XName.Get("IPAddresses", "http://schemas.microsoft.com/windowsazure"));
                                    if (iPAddressesSequenceElement != null)
                                    {
                                        foreach (XElement iPAddressesElement in iPAddressesSequenceElement.Elements(XName.Get("IPAddress", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            BackendServer iPAddressInstance = new BackendServer();
                                            backendAddressPoolInstance.BackendServers.Add(iPAddressInstance);
                                            
                                            string iPAddressInstance2 = iPAddressesElement.Value;
                                            iPAddressInstance.IPAddress = iPAddressInstance2;
                                        }
                                    }
                                }
                            }
                            
                            XElement backendHttpSettingsListSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("BackendHttpSettingsList", "http://schemas.microsoft.com/windowsazure"));
                            if (backendHttpSettingsListSequenceElement != null)
                            {
                                foreach (XElement backendHttpSettingsListElement in backendHttpSettingsListSequenceElement.Elements(XName.Get("BackendHttpSettings", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    BackendHttpSettings backendHttpSettingsInstance = new BackendHttpSettings();
                                    result.BackendHttpSettingsList.Add(backendHttpSettingsInstance);
                                    
                                    XElement nameElement5 = backendHttpSettingsListElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement5 != null)
                                    {
                                        string nameInstance5 = nameElement5.Value;
                                        backendHttpSettingsInstance.Name = nameInstance5;
                                    }
                                    
                                    XElement portElement2 = backendHttpSettingsListElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                    if (portElement2 != null)
                                    {
                                        ushort portInstance2 = ushort.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                        backendHttpSettingsInstance.Port = portInstance2;
                                    }
                                    
                                    XElement protocolElement2 = backendHttpSettingsListElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                    if (protocolElement2 != null)
                                    {
                                        Protocol protocolInstance2 = ((Protocol)Enum.Parse(typeof(Protocol), protocolElement2.Value, true));
                                        backendHttpSettingsInstance.Protocol = protocolInstance2;
                                    }
                                    
                                    XElement cookieBasedAffinityElement = backendHttpSettingsListElement.Element(XName.Get("CookieBasedAffinity", "http://schemas.microsoft.com/windowsazure"));
                                    if (cookieBasedAffinityElement != null)
                                    {
                                        string cookieBasedAffinityInstance = cookieBasedAffinityElement.Value;
                                        backendHttpSettingsInstance.CookieBasedAffinity = cookieBasedAffinityInstance;
                                    }
                                    
                                    XElement requestTimeoutElement = backendHttpSettingsListElement.Element(XName.Get("RequestTimeout", "http://schemas.microsoft.com/windowsazure"));
                                    if (requestTimeoutElement != null)
                                    {
                                        uint requestTimeoutInstance = uint.Parse(requestTimeoutElement.Value, CultureInfo.InvariantCulture);
                                        backendHttpSettingsInstance.RequestTimeout = requestTimeoutInstance;
                                    }
                                    
                                    XElement probeElement = backendHttpSettingsListElement.Element(XName.Get("Probe", "http://schemas.microsoft.com/windowsazure"));
                                    if (probeElement != null)
                                    {
                                        string probeInstance2 = probeElement.Value;
                                        backendHttpSettingsInstance.Probe = probeInstance2;
                                    }
                                }
                            }
                            
                            XElement httpListenersSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("HttpListeners", "http://schemas.microsoft.com/windowsazure"));
                            if (httpListenersSequenceElement != null)
                            {
                                foreach (XElement httpListenersElement in httpListenersSequenceElement.Elements(XName.Get("HttpListener", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    AGHttpListener httpListenerInstance = new AGHttpListener();
                                    result.HttpListeners.Add(httpListenerInstance);
                                    
                                    XElement nameElement6 = httpListenersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement6 != null)
                                    {
                                        string nameInstance6 = nameElement6.Value;
                                        httpListenerInstance.Name = nameInstance6;
                                    }
                                    
                                    XElement frontendIPElement = httpListenersElement.Element(XName.Get("FrontendIP", "http://schemas.microsoft.com/windowsazure"));
                                    if (frontendIPElement != null)
                                    {
                                        string frontendIPInstance = frontendIPElement.Value;
                                        httpListenerInstance.FrontendIP = frontendIPInstance;
                                    }
                                    
                                    XElement frontendPortElement = httpListenersElement.Element(XName.Get("FrontendPort", "http://schemas.microsoft.com/windowsazure"));
                                    if (frontendPortElement != null)
                                    {
                                        string frontendPortInstance2 = frontendPortElement.Value;
                                        httpListenerInstance.FrontendPort = frontendPortInstance2;
                                    }
                                    
                                    XElement protocolElement3 = httpListenersElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                    if (protocolElement3 != null)
                                    {
                                        Protocol protocolInstance3 = ((Protocol)Enum.Parse(typeof(Protocol), protocolElement3.Value, true));
                                        httpListenerInstance.Protocol = protocolInstance3;
                                    }
                                    
                                    XElement sslCertElement = httpListenersElement.Element(XName.Get("SslCert", "http://schemas.microsoft.com/windowsazure"));
                                    if (sslCertElement != null)
                                    {
                                        string sslCertInstance = sslCertElement.Value;
                                        httpListenerInstance.SslCert = sslCertInstance;
                                    }
                                }
                            }
                            
                            XElement httpLoadBalancingRulesSequenceElement = applicationGatewayConfigurationElement.Element(XName.Get("HttpLoadBalancingRules", "http://schemas.microsoft.com/windowsazure"));
                            if (httpLoadBalancingRulesSequenceElement != null)
                            {
                                foreach (XElement httpLoadBalancingRulesElement in httpLoadBalancingRulesSequenceElement.Elements(XName.Get("HttpLoadBalancingRule", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    HttpLoadBalancingRule httpLoadBalancingRuleInstance = new HttpLoadBalancingRule();
                                    result.HttpLoadBalancingRules.Add(httpLoadBalancingRuleInstance);
                                    
                                    XElement nameElement7 = httpLoadBalancingRulesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement7 != null)
                                    {
                                        string nameInstance7 = nameElement7.Value;
                                        httpLoadBalancingRuleInstance.Name = nameInstance7;
                                    }
                                    
                                    XElement typeElement2 = httpLoadBalancingRulesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                    if (typeElement2 != null)
                                    {
                                        string typeInstance2 = typeElement2.Value;
                                        httpLoadBalancingRuleInstance.Type = typeInstance2;
                                    }
                                    
                                    XElement backendHttpSettingsElement = httpLoadBalancingRulesElement.Element(XName.Get("BackendHttpSettings", "http://schemas.microsoft.com/windowsazure"));
                                    if (backendHttpSettingsElement != null)
                                    {
                                        string backendHttpSettingsInstance2 = backendHttpSettingsElement.Value;
                                        httpLoadBalancingRuleInstance.BackendHttpSettings = backendHttpSettingsInstance2;
                                    }
                                    
                                    XElement listenerElement = httpLoadBalancingRulesElement.Element(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure"));
                                    if (listenerElement != null)
                                    {
                                        string listenerInstance = listenerElement.Value;
                                        httpLoadBalancingRuleInstance.Listener = listenerInstance;
                                    }
                                    
                                    XElement backendAddressPoolElement = httpLoadBalancingRulesElement.Element(XName.Get("BackendAddressPool", "http://schemas.microsoft.com/windowsazure"));
                                    if (backendAddressPoolElement != null)
                                    {
                                        string backendAddressPoolInstance2 = backendAddressPoolElement.Value;
                                        httpLoadBalancingRuleInstance.BackendAddressPool = backendAddressPoolInstance2;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='requestId'>
        /// Required. The request ID for the request you wish to track. The
        /// request ID is returned in the x-ms-request-id response header for
        /// every request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ApplicationGatewayOperationResponse> GetOperationStatusAsync(string requestId, CancellationToken cancellationToken)
        {
            // Validate
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("requestId", requestId);
                TracingAdapter.Enter(invocationId, this, "GetOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/operation/";
            url = url + Uri.EscapeDataString(requestId);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayOperationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement gatewayOperationElement = responseDoc.Element(XName.Get("GatewayOperation", "http://schemas.microsoft.com/windowsazure"));
                        if (gatewayOperationElement != null)
                        {
                            XElement idElement = gatewayOperationElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null)
                            {
                                string idInstance = idElement.Value;
                                result.Id = idInstance;
                            }
                            
                            XElement statusElement = gatewayOperationElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null)
                            {
                                AsyncOperationStatus statusInstance = ((AsyncOperationStatus)Enum.Parse(typeof(AsyncOperationStatus), statusElement.Value, true));
                                result.Status = statusInstance;
                            }
                            
                            XElement httpStatusCodeElement = gatewayOperationElement.Element(XName.Get("HttpStatusCode", "http://schemas.microsoft.com/windowsazure"));
                            if (httpStatusCodeElement != null)
                            {
                                HttpStatusCode httpStatusCodeInstance = ((HttpStatusCode)Enum.Parse(typeof(HttpStatusCode), httpStatusCodeElement.Value, true));
                                result.HttpStatusCode = httpStatusCodeInstance;
                            }
                            
                            XElement dataElement = gatewayOperationElement.Element(XName.Get("Data", "http://schemas.microsoft.com/windowsazure"));
                            if (dataElement != null)
                            {
                                string dataInstance = dataElement.Value;
                                result.Data = dataInstance;
                            }
                            
                            XElement errorElement = gatewayOperationElement.Element(XName.Get("Error", "http://schemas.microsoft.com/windowsazure"));
                            if (errorElement != null)
                            {
                                ApplicationGatewayOperationResponse.ErrorDetails errorInstance = new ApplicationGatewayOperationResponse.ErrorDetails();
                                result.Error = errorInstance;
                                
                                XElement codeElement = errorElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                if (codeElement != null)
                                {
                                    string codeInstance = codeElement.Value;
                                    errorInstance.Code = codeInstance;
                                }
                                
                                XElement messageElement = errorElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                if (messageElement != null)
                                {
                                    string messageInstance = messageElement.Value;
                                    errorInstance.Message = messageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Application Gateway operation retrieves all application
        /// gateays for the given subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of ListApplicationGateways request.
        /// </returns>
        public async Task<ApplicationGatewayListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement applicationGatewaysSequenceElement = responseDoc.Element(XName.Get("ApplicationGateways", "http://schemas.microsoft.com/windowsazure"));
                        if (applicationGatewaysSequenceElement != null)
                        {
                            foreach (XElement applicationGatewaysElement in applicationGatewaysSequenceElement.Elements(XName.Get("ApplicationGateway", "http://schemas.microsoft.com/windowsazure")))
                            {
                                ApplicationGatewayGetResponse applicationGatewayInstance = new ApplicationGatewayGetResponse();
                                result.ApplicationGateways.Add(applicationGatewayInstance);
                                
                                XElement descriptionElement = applicationGatewaysElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    applicationGatewayInstance.Description = descriptionInstance;
                                }
                                
                                XElement dnsNameElement = applicationGatewaysElement.Element(XName.Get("DnsName", "http://schemas.microsoft.com/windowsazure"));
                                if (dnsNameElement != null)
                                {
                                    string dnsNameInstance = dnsNameElement.Value;
                                    applicationGatewayInstance.DnsName = dnsNameInstance;
                                }
                                
                                XElement gatewaySizeElement = applicationGatewaysElement.Element(XName.Get("GatewaySize", "http://schemas.microsoft.com/windowsazure"));
                                if (gatewaySizeElement != null)
                                {
                                    string gatewaySizeInstance = gatewaySizeElement.Value;
                                    applicationGatewayInstance.GatewaySize = gatewaySizeInstance;
                                }
                                
                                XElement instanceCountElement = applicationGatewaysElement.Element(XName.Get("InstanceCount", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceCountElement != null)
                                {
                                    uint instanceCountInstance = uint.Parse(instanceCountElement.Value, CultureInfo.InvariantCulture);
                                    applicationGatewayInstance.InstanceCount = instanceCountInstance;
                                }
                                
                                XElement nameElement = applicationGatewaysElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    applicationGatewayInstance.Name = nameInstance;
                                }
                                
                                XElement stateElement = applicationGatewaysElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                if (stateElement != null)
                                {
                                    string stateInstance = stateElement.Value;
                                    applicationGatewayInstance.State = stateInstance;
                                }
                                
                                XElement subnetsSequenceElement = applicationGatewaysElement.Element(XName.Get("Subnets", "http://schemas.microsoft.com/windowsazure"));
                                if (subnetsSequenceElement != null)
                                {
                                    foreach (XElement subnetsElement in subnetsSequenceElement.Elements(XName.Get("Subnet", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        applicationGatewayInstance.Subnets.Add(subnetsElement.Value);
                                    }
                                }
                                
                                XElement vnetNameElement = applicationGatewaysElement.Element(XName.Get("VnetName", "http://schemas.microsoft.com/windowsazure"));
                                if (vnetNameElement != null)
                                {
                                    string vnetNameInstance = vnetNameElement.Value;
                                    applicationGatewayInstance.VnetName = vnetNameInstance;
                                }
                                
                                XElement virtualIPsSequenceElement = applicationGatewaysElement.Element(XName.Get("VirtualIPs", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualIPsSequenceElement != null)
                                {
                                    foreach (XElement virtualIPsElement in virtualIPsSequenceElement.Elements(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        applicationGatewayInstance.VirtualIPs.Add(virtualIPsElement.Value);
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Application Gateway certificates.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157196.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a ListApplicationGatewayCertificate request.
        /// </returns>
        public async Task<ApplicationGatewayListCertificate> ListCertificateAsync(string gatewayName, CancellationToken cancellationToken)
        {
            // Validate
            if (gatewayName == null)
            {
                throw new ArgumentNullException("gatewayName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                TracingAdapter.Enter(invocationId, this, "ListCertificateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/networking/ApplicationGateways/";
            url = url + Uri.EscapeDataString(gatewayName);
            url = url + "/sslcertificates";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2016-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ApplicationGatewayListCertificate result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ApplicationGatewayListCertificate();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement applicationGatewayCertificatesSequenceElement = responseDoc.Element(XName.Get("ApplicationGatewayCertificates", "http://schemas.microsoft.com/windowsazure"));
                        if (applicationGatewayCertificatesSequenceElement != null)
                        {
                            foreach (XElement applicationGatewayCertificatesElement in applicationGatewayCertificatesSequenceElement.Elements(XName.Get("ApplicationGatewayCertificate", "http://schemas.microsoft.com/windowsazure")))
                            {
                                ApplicationGatewayGetCertificate applicationGatewayCertificateInstance = new ApplicationGatewayGetCertificate();
                                result.ApplicationGatewayCertificates.Add(applicationGatewayCertificateInstance);
                                
                                XElement nameElement = applicationGatewayCertificatesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    applicationGatewayCertificateInstance.Name = nameInstance;
                                }
                                
                                XElement dataElement = applicationGatewayCertificatesElement.Element(XName.Get("Data", "http://schemas.microsoft.com/windowsazure"));
                                if (dataElement != null)
                                {
                                    string dataInstance = dataElement.Value;
                                    applicationGatewayCertificateInstance.Data = dataInstance;
                                }
                                
                                XElement stateElement = applicationGatewayCertificatesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                if (stateElement != null)
                                {
                                    string stateInstance = stateElement.Value;
                                    applicationGatewayCertificateInstance.State = stateInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Set Application Gateway Config operation  sets the specified
        /// config on the application gateway  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='config'>
        /// Required. Parameters supplied to Set Application Gateway config
        /// request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ApplicationGatewayOperationResponse> SetConfigAsync(string gatewayName, ApplicationGatewaySetConfiguration config, CancellationToken cancellationToken)
        {
            NetworkManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("config", config);
                TracingAdapter.Enter(invocationId, this, "SetConfigAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GatewayOperationResponse response = await client.ApplicationGateways.BeginSetConfigAsync(gatewayName, config, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ApplicationGatewayOperationResponse result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == AsyncOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != AsyncOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Update Application Gateway operation  updates Application
        /// Gateway with the specified  parameters.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154114.aspx
        /// for more information)
        /// </summary>
        /// <param name='gatewayName'>
        /// Required. Gateway name
        /// </param>
        /// <param name='updateParameters'>
        /// Required. Parameters supplied to UpdateApplication Gateway request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ApplicationGatewayOperationResponse> UpdateAsync(string gatewayName, UpdateApplicationGatewayParameters updateParameters, CancellationToken cancellationToken)
        {
            NetworkManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("gatewayName", gatewayName);
                tracingParameters.Add("updateParameters", updateParameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GatewayOperationResponse response = await client.ApplicationGateways.BeginUpdateApplicationGatewayAsync(gatewayName, updateParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            ApplicationGatewayOperationResponse result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == AsyncOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.ApplicationGateways.GetOperationStatusAsync(response.OperationId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != AsyncOperationStatus.Successful)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
