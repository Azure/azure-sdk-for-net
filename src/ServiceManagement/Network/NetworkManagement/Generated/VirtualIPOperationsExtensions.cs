// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Network;

namespace Microsoft.WindowsAzure.Management.Network
{
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// networks for your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
    /// more information)
    /// </summary>
    public static partial class VirtualIPOperationsExtensions
    {
        /// <summary>
        /// The Add Virtual IP operation adds a logical Virtual IP to the
        /// deployment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IVirtualIPOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the hosted service that contains the given
        /// deployment.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment where the logical Virtual IP
        /// is to be added.
        /// </param>
        /// <param name='virtualIPName'>
        /// Required. The name of the logical Virtual IP to be added.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Add(this IVirtualIPOperations operations, string serviceName, string deploymentName, string virtualIPName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualIPOperations)s).AddAsync(serviceName, deploymentName, virtualIPName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Add Virtual IP operation adds a logical Virtual IP to the
        /// deployment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IVirtualIPOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the hosted service that contains the given
        /// deployment.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment where the logical Virtual IP
        /// is to be added.
        /// </param>
        /// <param name='virtualIPName'>
        /// Required. The name of the logical Virtual IP to be added.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> AddAsync(this IVirtualIPOperations operations, string serviceName, string deploymentName, string virtualIPName)
        {
            return operations.AddAsync(serviceName, deploymentName, virtualIPName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Adding Virtual IP operation adds a logical Virtual IP to
        /// the deployment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IVirtualIPOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the hosted service that contains the given
        /// deployment.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment where the logical Virtual IP
        /// is to be added.
        /// </param>
        /// <param name='virtualIPName'>
        /// Required. The name of the logical Virtual IP to be added.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginAdding(this IVirtualIPOperations operations, string serviceName, string deploymentName, string virtualIPName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualIPOperations)s).BeginAddingAsync(serviceName, deploymentName, virtualIPName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Adding Virtual IP operation adds a logical Virtual IP to
        /// the deployment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IVirtualIPOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the hosted service that contains the given
        /// deployment.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment where the logical Virtual IP
        /// is to be added.
        /// </param>
        /// <param name='virtualIPName'>
        /// Required. The name of the logical Virtual IP to be added.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginAddingAsync(this IVirtualIPOperations operations, string serviceName, string deploymentName, string virtualIPName)
        {
            return operations.BeginAddingAsync(serviceName, deploymentName, virtualIPName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Removing Virtual IP operation removes a logical Virtual
        /// IP from the deployment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IVirtualIPOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the hosted service that contains the given
        /// deployment.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment whose logical Virtual IP is to
        /// be removed.
        /// </param>
        /// <param name='virtualIPName'>
        /// Required. The name of the logical Virtual IP to be added.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginRemoving(this IVirtualIPOperations operations, string serviceName, string deploymentName, string virtualIPName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualIPOperations)s).BeginRemovingAsync(serviceName, deploymentName, virtualIPName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Removing Virtual IP operation removes a logical Virtual
        /// IP from the deployment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IVirtualIPOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the hosted service that contains the given
        /// deployment.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment whose logical Virtual IP is to
        /// be removed.
        /// </param>
        /// <param name='virtualIPName'>
        /// Required. The name of the logical Virtual IP to be added.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginRemovingAsync(this IVirtualIPOperations operations, string serviceName, string deploymentName, string virtualIPName)
        {
            return operations.BeginRemovingAsync(serviceName, deploymentName, virtualIPName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Remove Virtual IP operation removes a logical Virtual IP from
        /// the deployment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IVirtualIPOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the hosted service that contains the given
        /// deployment.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment whose logical Virtual IP is to
        /// be removed.
        /// </param>
        /// <param name='virtualIPName'>
        /// Required. The name of the logical Virtual IP to be removed.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Remove(this IVirtualIPOperations operations, string serviceName, string deploymentName, string virtualIPName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IVirtualIPOperations)s).RemoveAsync(serviceName, deploymentName, virtualIPName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Remove Virtual IP operation removes a logical Virtual IP from
        /// the deployment.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IVirtualIPOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the hosted service that contains the given
        /// deployment.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment whose logical Virtual IP is to
        /// be removed.
        /// </param>
        /// <param name='virtualIPName'>
        /// Required. The name of the logical Virtual IP to be removed.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RemoveAsync(this IVirtualIPOperations operations, string serviceName, string deploymentName, string virtualIPName)
        {
            return operations.RemoveAsync(serviceName, deploymentName, virtualIPName, CancellationToken.None);
        }
    }
}
