// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Network;
using Microsoft.WindowsAzure.Management.Network.Models;

namespace Microsoft.WindowsAzure.Management.Network
{
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// networks for your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
    /// more information)
    /// </summary>
    public static partial class IPForwardingOperationsExtensions
    {
        /// <summary>
        /// Sets IP Forwarding on a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set IP Forwarding on network
        /// interface operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginSettingIPForwardingOnNetworkInterface(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, IPForwardingSetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIPForwardingOperations)s).BeginSettingIPForwardingOnNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets IP Forwarding on a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set IP Forwarding on network
        /// interface operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginSettingIPForwardingOnNetworkInterfaceAsync(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, IPForwardingSetParameters parameters)
        {
            return operations.BeginSettingIPForwardingOnNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets IP Forwarding on a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set IP Forwarding on role
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginSettingIPForwardingOnRole(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, IPForwardingSetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIPForwardingOperations)s).BeginSettingIPForwardingOnRoleAsync(serviceName, deploymentName, roleName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets IP Forwarding on a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set IP Forwarding on role
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginSettingIPForwardingOnRoleAsync(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, IPForwardingSetParameters parameters)
        {
            return operations.BeginSettingIPForwardingOnRoleAsync(serviceName, deploymentName, roleName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the IP Forwarding applied to a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The IP Forwarding state associated with a role or network interface.
        /// </returns>
        public static IPForwardingGetResponse GetForNetworkInterface(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIPForwardingOperations)s).GetForNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the IP Forwarding applied to a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The IP Forwarding state associated with a role or network interface.
        /// </returns>
        public static Task<IPForwardingGetResponse> GetForNetworkInterfaceAsync(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName)
        {
            return operations.GetForNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the IP Forwarding applied to a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The IP Forwarding state associated with a role or network interface.
        /// </returns>
        public static IPForwardingGetResponse GetForRole(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIPForwardingOperations)s).GetForRoleAsync(serviceName, deploymentName, roleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the IP Forwarding applied to a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The IP Forwarding state associated with a role or network interface.
        /// </returns>
        public static Task<IPForwardingGetResponse> GetForRoleAsync(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName)
        {
            return operations.GetForRoleAsync(serviceName, deploymentName, roleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets IP Forwarding on a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set IP Forwarding on network
        /// interface operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse SetOnNetworkInterface(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, IPForwardingSetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIPForwardingOperations)s).SetOnNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets IP Forwarding on a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set IP Forwarding on network
        /// interface operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> SetOnNetworkInterfaceAsync(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, IPForwardingSetParameters parameters)
        {
            return operations.SetOnNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets IP Forwarding on a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set IP Forwarding on role
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse SetOnRole(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, IPForwardingSetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIPForwardingOperations)s).SetOnRoleAsync(serviceName, deploymentName, roleName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets IP Forwarding on a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IIPForwardingOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set IP Forwarding on role
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> SetOnRoleAsync(this IIPForwardingOperations operations, string serviceName, string deploymentName, string roleName, IPForwardingSetParameters parameters)
        {
            return operations.SetOnRoleAsync(serviceName, deploymentName, roleName, parameters, CancellationToken.None);
        }
    }
}
