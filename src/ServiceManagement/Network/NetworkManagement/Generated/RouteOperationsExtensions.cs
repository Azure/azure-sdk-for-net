// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Network;
using Microsoft.WindowsAzure.Management.Network.Models;

namespace Microsoft.WindowsAzure.Management.Network
{
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// networks for your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
    /// more information)
    /// </summary>
    public static partial class RouteOperationsExtensions
    {
        /// <summary>
        /// Abort routetable migration api validates and aborts the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse AbortMigration(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).AbortMigrationAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Abort routetable migration api validates and aborts the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> AbortMigrationAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.AbortMigrationAsync(routeTableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Set the specified route table for the provided subnet in the
        /// provided virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet that the route table will be added
        /// to.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to add a route table to the
        /// provided subnet.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse AddRouteTableToSubnet(this IRouteOperations operations, string vnetName, string subnetName, AddRouteTableToSubnetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).AddRouteTableToSubnetAsync(vnetName, subnetName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Set the specified route table for the provided subnet in the
        /// provided virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet that the route table will be added
        /// to.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to add a route table to the
        /// provided subnet.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> AddRouteTableToSubnetAsync(this IRouteOperations operations, string vnetName, string subnetName, AddRouteTableToSubnetParameters parameters)
        {
            return operations.AddRouteTableToSubnetAsync(vnetName, subnetName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Abort routetable migration api validates and aborts the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginAbortMigration(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).BeginAbortMigrationAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Abort routetable migration api validates and aborts the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginAbortMigrationAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.BeginAbortMigrationAsync(routeTableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Set the specified route table for the provided subnet in the
        /// provided virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet that the route table will be added
        /// to.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to add a route table to the
        /// provided subnet.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginAddRouteTableToSubnet(this IRouteOperations operations, string vnetName, string subnetName, AddRouteTableToSubnetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).BeginAddRouteTableToSubnetAsync(vnetName, subnetName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Set the specified route table for the provided subnet in the
        /// provided virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet that the route table will be added
        /// to.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to add a route table to the
        /// provided subnet.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginAddRouteTableToSubnetAsync(this IRouteOperations operations, string vnetName, string subnetName, AddRouteTableToSubnetParameters parameters)
        {
            return operations.BeginAddRouteTableToSubnetAsync(vnetName, subnetName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Commit routetable migration api validates and commits the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginCommitMigration(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).BeginCommitMigrationAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Commit routetable migration api validates and commits the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginCommitMigrationAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.BeginCommitMigrationAsync(routeTableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Create the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to create a new route table.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginCreateRouteTable(this IRouteOperations operations, CreateRouteTableParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).BeginCreateRouteTableAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to create a new route table.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginCreateRouteTableAsync(this IRouteOperations operations, CreateRouteTableParameters parameters)
        {
            return operations.BeginCreateRouteTableAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Set the specified route for the provided table in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table where the provided route will
        /// be set.
        /// </param>
        /// <param name='routeName'>
        /// Required. The name of the route that will be set on the provided
        /// route table.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginDeleteRoute(this IRouteOperations operations, string routeTableName, string routeName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).BeginDeleteRouteAsync(routeTableName, routeName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Set the specified route for the provided table in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table where the provided route will
        /// be set.
        /// </param>
        /// <param name='routeName'>
        /// Required. The name of the route that will be set on the provided
        /// route table.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginDeleteRouteAsync(this IRouteOperations operations, string routeTableName, string routeName)
        {
            return operations.BeginDeleteRouteAsync(routeTableName, routeName, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginDeleteRouteTable(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).BeginDeleteRouteTableAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginDeleteRouteTableAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.BeginDeleteRouteTableAsync(routeTableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Prepare routetable migration api validates and prepares the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginPrepareMigration(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).BeginPrepareMigrationAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Prepare routetable migration api validates and prepares the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginPrepareMigrationAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.BeginPrepareMigrationAsync(routeTableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Remove the route table from the provided subnet in the provided
        /// virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet that the route table will be
        /// removed from.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginRemoveRouteTableFromSubnet(this IRouteOperations operations, string vnetName, string subnetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).BeginRemoveRouteTableFromSubnetAsync(vnetName, subnetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Remove the route table from the provided subnet in the provided
        /// virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet that the route table will be
        /// removed from.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginRemoveRouteTableFromSubnetAsync(this IRouteOperations operations, string vnetName, string subnetName)
        {
            return operations.BeginRemoveRouteTableFromSubnetAsync(vnetName, subnetName, CancellationToken.None);
        }
        
        /// <summary>
        /// Set the specified route for the provided table in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table where the provided route will
        /// be set.
        /// </param>
        /// <param name='routeName'>
        /// Required. The name of the route that will be set on the provided
        /// route table.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to create a new route table.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginSetRoute(this IRouteOperations operations, string routeTableName, string routeName, SetRouteParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).BeginSetRouteAsync(routeTableName, routeName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Set the specified route for the provided table in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table where the provided route will
        /// be set.
        /// </param>
        /// <param name='routeName'>
        /// Required. The name of the route that will be set on the provided
        /// route table.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to create a new route table.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginSetRouteAsync(this IRouteOperations operations, string routeTableName, string routeName, SetRouteParameters parameters)
        {
            return operations.BeginSetRouteAsync(routeTableName, routeName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Commit routetable migration api validates and commits the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse CommitMigration(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).CommitMigrationAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Commit routetable migration api validates and commits the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CommitMigrationAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.CommitMigrationAsync(routeTableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Create the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to create a new route table.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse CreateRouteTable(this IRouteOperations operations, CreateRouteTableParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).CreateRouteTableAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to create a new route table.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CreateRouteTableAsync(this IRouteOperations operations, CreateRouteTableParameters parameters)
        {
            return operations.CreateRouteTableAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Set the specified route for the provided table in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table where the provided route will
        /// be set.
        /// </param>
        /// <param name='routeName'>
        /// Required. The name of the route that will be set on the provided
        /// route table.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse DeleteRoute(this IRouteOperations operations, string routeTableName, string routeName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).DeleteRouteAsync(routeTableName, routeName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Set the specified route for the provided table in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table where the provided route will
        /// be set.
        /// </param>
        /// <param name='routeName'>
        /// Required. The name of the route that will be set on the provided
        /// route table.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> DeleteRouteAsync(this IRouteOperations operations, string routeTableName, string routeName)
        {
            return operations.DeleteRouteAsync(routeTableName, routeName, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse DeleteRouteTable(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).DeleteRouteTableAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> DeleteRouteTableAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.DeleteRouteTableAsync(routeTableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the effective route table for the provided network interface in
        /// this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='roleinstanceName'>
        /// Required. The name of the role instance.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required. The name of the network interface.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GetEffectiveRouteTableResponse GetEffectiveRouteTableForNetworkInterface(this IRouteOperations operations, string serviceName, string deploymentName, string roleinstanceName, string networkInterfaceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).GetEffectiveRouteTableForNetworkInterfaceAsync(serviceName, deploymentName, roleinstanceName, networkInterfaceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the effective route table for the provided network interface in
        /// this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='roleinstanceName'>
        /// Required. The name of the role instance.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required. The name of the network interface.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GetEffectiveRouteTableResponse> GetEffectiveRouteTableForNetworkInterfaceAsync(this IRouteOperations operations, string serviceName, string deploymentName, string roleinstanceName, string networkInterfaceName)
        {
            return operations.GetEffectiveRouteTableForNetworkInterfaceAsync(serviceName, deploymentName, roleinstanceName, networkInterfaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the effective route table for the provided role instance in
        /// this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='roleinstanceName'>
        /// Required. The name of the role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GetEffectiveRouteTableResponse GetEffectiveRouteTableForRoleInstance(this IRouteOperations operations, string serviceName, string deploymentName, string roleinstanceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).GetEffectiveRouteTableForRoleInstanceAsync(serviceName, deploymentName, roleinstanceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the effective route table for the provided role instance in
        /// this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// Required. The name of the deployment.
        /// </param>
        /// <param name='roleinstanceName'>
        /// Required. The name of the role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GetEffectiveRouteTableResponse> GetEffectiveRouteTableForRoleInstanceAsync(this IRouteOperations operations, string serviceName, string deploymentName, string roleinstanceName)
        {
            return operations.GetEffectiveRouteTableForRoleInstanceAsync(serviceName, deploymentName, roleinstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table in this subscription to
        /// retrieve.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GetRouteTableResponse GetRouteTable(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).GetRouteTableAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table in this subscription to
        /// retrieve.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GetRouteTableResponse> GetRouteTableAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.GetRouteTableAsync(routeTableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the specified route table for the provided subnet in the
        /// provided virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GetRouteTableForSubnetResponse GetRouteTableForSubnet(this IRouteOperations operations, string vnetName, string subnetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).GetRouteTableForSubnetAsync(vnetName, subnetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the specified route table for the provided subnet in the
        /// provided virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GetRouteTableForSubnetResponse> GetRouteTableForSubnetAsync(this IRouteOperations operations, string vnetName, string subnetName)
        {
            return operations.GetRouteTableForSubnetAsync(vnetName, subnetName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table in this subscription to
        /// retrieve.
        /// </param>
        /// <param name='detailLevel'>
        /// Required. The amount of detail about the requested route table that
        /// will be returned.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static GetRouteTableResponse GetRouteTableWithDetails(this IRouteOperations operations, string routeTableName, string detailLevel)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).GetRouteTableWithDetailsAsync(routeTableName, detailLevel);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the specified route table for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table in this subscription to
        /// retrieve.
        /// </param>
        /// <param name='detailLevel'>
        /// Required. The amount of detail about the requested route table that
        /// will be returned.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<GetRouteTableResponse> GetRouteTableWithDetailsAsync(this IRouteOperations operations, string routeTableName, string detailLevel)
        {
            return operations.GetRouteTableWithDetailsAsync(routeTableName, detailLevel, CancellationToken.None);
        }
        
        /// <summary>
        /// List the existing route tables for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static ListRouteTablesResponse ListRouteTables(this IRouteOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).ListRouteTablesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List the existing route tables for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<ListRouteTablesResponse> ListRouteTablesAsync(this IRouteOperations operations)
        {
            return operations.ListRouteTablesAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Prepare routetable migration api validates and prepares the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse PrepareMigration(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).PrepareMigrationAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Prepare routetable migration api validates and prepares the given
        /// routetable for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> PrepareMigrationAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.PrepareMigrationAsync(routeTableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Remove the route table from the provided subnet in the provided
        /// virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet that the route table will be
        /// removed from.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse RemoveRouteTableFromSubnet(this IRouteOperations operations, string vnetName, string subnetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).RemoveRouteTableFromSubnetAsync(vnetName, subnetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Remove the route table from the provided subnet in the provided
        /// virtual network in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='vnetName'>
        /// Required. The name of the virtual network that contains the
        /// provided subnet.
        /// </param>
        /// <param name='subnetName'>
        /// Required. The name of the subnet that the route table will be
        /// removed from.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RemoveRouteTableFromSubnetAsync(this IRouteOperations operations, string vnetName, string subnetName)
        {
            return operations.RemoveRouteTableFromSubnetAsync(vnetName, subnetName, CancellationToken.None);
        }
        
        /// <summary>
        /// Set the specified route for the provided table in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table where the provided route will
        /// be set.
        /// </param>
        /// <param name='routeName'>
        /// Required. The name of the route that will be set on the provided
        /// route table.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to create a new route table.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse SetRoute(this IRouteOperations operations, string routeTableName, string routeName, SetRouteParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).SetRouteAsync(routeTableName, routeName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Set the specified route for the provided table in this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. The name of the route table where the provided route will
        /// be set.
        /// </param>
        /// <param name='routeName'>
        /// Required. The name of the route that will be set on the provided
        /// route table.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters necessary to create a new route table.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> SetRouteAsync(this IRouteOperations operations, string routeTableName, string routeName, SetRouteParameters parameters)
        {
            return operations.SetRouteAsync(routeTableName, routeName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Validate routetable migration api validates the given routetable
        /// for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// The Validate Network Migration operation response.
        /// </returns>
        public static NetworkMigrationValidationResponse ValidateMigration(this IRouteOperations operations, string routeTableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRouteOperations)s).ValidateMigrationAsync(routeTableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Validate routetable migration api validates the given routetable
        /// for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.IRouteOperations.
        /// </param>
        /// <param name='routeTableName'>
        /// Required. Name of the routetable to be migrated.
        /// </param>
        /// <returns>
        /// The Validate Network Migration operation response.
        /// </returns>
        public static Task<NetworkMigrationValidationResponse> ValidateMigrationAsync(this IRouteOperations operations, string routeTableName)
        {
            return operations.ValidateMigrationAsync(routeTableName, CancellationToken.None);
        }
    }
}
