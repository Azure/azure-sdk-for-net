// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Network;
using Microsoft.WindowsAzure.Management.Network.Models;

namespace Microsoft.WindowsAzure.Management.Network
{
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// networks for your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157182.aspx for
    /// more information)
    /// </summary>
    public static partial class NetworkSecurityGroupOperationsExtensions
    {
        /// <summary>
        /// Adds a Network Security Group to a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// a network interface operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse AddToNetworkInterface(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).AddToNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Adds a Network Security Group to a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// a network interface operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> AddToNetworkInterfaceAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return operations.AddToNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Adds a Network Security Group to a Role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// Role operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse AddToRole(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).AddToRoleAsync(serviceName, deploymentName, roleName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Adds a Network Security Group to a Role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// Role operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> AddToRoleAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return operations.AddToRoleAsync(serviceName, deploymentName, roleName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Adds a Network Security Group to a subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// subnet operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse AddToSubnet(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).AddToSubnetAsync(virtualNetworkName, subnetName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Adds a Network Security Group to a subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// subnet operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> AddToSubnetAsync(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return operations.AddToSubnetAsync(virtualNetworkName, subnetName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Adds a Network Security Group to a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// a network interface operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginAddingToNetworkInterface(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginAddingToNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Adds a Network Security Group to a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// a network interface operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginAddingToNetworkInterfaceAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return operations.BeginAddingToNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Adds a Network Security Group to a Role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// Role operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginAddingToRole(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginAddingToRoleAsync(serviceName, deploymentName, roleName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Adds a Network Security Group to a Role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// Role operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginAddingToRoleAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return operations.BeginAddingToRoleAsync(serviceName, deploymentName, roleName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Adds a Network Security Group to a subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// subnet operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginAddingToSubnet(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginAddingToSubnetAsync(virtualNetworkName, subnetName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Adds a Network Security Group to a subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Add Network Security Group to
        /// subnet operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginAddingToSubnetAsync(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName, NetworkSecurityGroupAddAssociationParameters parameters)
        {
            return operations.BeginAddingToSubnetAsync(virtualNetworkName, subnetName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates a new Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Network Security Group
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginCreating(this INetworkSecurityGroupOperations operations, NetworkSecurityGroupCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginCreatingAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Network Security Group
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginCreatingAsync(this INetworkSecurityGroupOperations operations, NetworkSecurityGroupCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the pecified Network Security Group from your
        /// subscription.If the Network Security group is still associated
        /// with some VM/Role/Subnet, the deletion will fail. In order to
        /// successfully delete the Network Security, it needs to be not used.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginDeleting(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginDeletingAsync(networkSecurityGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the pecified Network Security Group from your
        /// subscription.If the Network Security group is still associated
        /// with some VM/Role/Subnet, the deletion will fail. In order to
        /// successfully delete the Network Security, it needs to be not used.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginDeletingAsync(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName)
        {
            return operations.BeginDeletingAsync(networkSecurityGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a rule from the specified Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginDeletingRule(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string ruleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginDeletingRuleAsync(networkSecurityGroupName, ruleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes a rule from the specified Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginDeletingRuleAsync(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string ruleName)
        {
            return operations.BeginDeletingRuleAsync(networkSecurityGroupName, ruleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Removes a Network Security Group from a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginRemovingFromNetworkInterface(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, string networkSecurityGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginRemovingFromNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, networkSecurityGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes a Network Security Group from a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginRemovingFromNetworkInterfaceAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, string networkSecurityGroupName)
        {
            return operations.BeginRemovingFromNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, networkSecurityGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Removes a Network Security Group from a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginRemovingFromRole(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkSecurityGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginRemovingFromRoleAsync(serviceName, deploymentName, roleName, networkSecurityGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes a Network Security Group from a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginRemovingFromRoleAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkSecurityGroupName)
        {
            return operations.BeginRemovingFromRoleAsync(serviceName, deploymentName, roleName, networkSecurityGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Removes a Network Security Group from a subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginRemovingFromSubnet(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName, string networkSecurityGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginRemovingFromSubnetAsync(virtualNetworkName, subnetName, networkSecurityGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes a Network Security Group from a subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginRemovingFromSubnetAsync(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName, string networkSecurityGroupName)
        {
            return operations.BeginRemovingFromSubnetAsync(virtualNetworkName, subnetName, networkSecurityGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets a new Network Security Rule to existing Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Optional.
        /// </param>
        /// <param name='ruleName'>
        /// Optional.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set Network Security Rule
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse BeginSettingRule(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string ruleName, NetworkSecuritySetRuleParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).BeginSettingRuleAsync(networkSecurityGroupName, ruleName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets a new Network Security Rule to existing Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Optional.
        /// </param>
        /// <param name='ruleName'>
        /// Optional.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set Network Security Rule
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> BeginSettingRuleAsync(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string ruleName, NetworkSecuritySetRuleParameters parameters)
        {
            return operations.BeginSettingRuleAsync(networkSecurityGroupName, ruleName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates a new Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Network Security Group
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Create(this INetworkSecurityGroupOperations operations, NetworkSecurityGroupCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).CreateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Network Security Group
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CreateAsync(this INetworkSecurityGroupOperations operations, NetworkSecurityGroupCreateParameters parameters)
        {
            return operations.CreateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Network Security Group operation removes thespecified
        /// Network Security Group from your subscription.If the Network
        /// Security group is still associated with some VM/Role/Subnet, the
        /// deletion will fail. In order to successfully delete the Network
        /// Security, it needs to be not used.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Delete(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).DeleteAsync(networkSecurityGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Network Security Group operation removes thespecified
        /// Network Security Group from your subscription.If the Network
        /// Security group is still associated with some VM/Role/Subnet, the
        /// deletion will fail. In order to successfully delete the Network
        /// Security, it needs to be not used.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> DeleteAsync(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName)
        {
            return operations.DeleteAsync(networkSecurityGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Network Security Rule operation removes a rule from the
        /// specified Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse DeleteRule(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string ruleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).DeleteRuleAsync(networkSecurityGroupName, ruleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Network Security Rule operation removes a rule from the
        /// specified Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> DeleteRuleAsync(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string ruleName)
        {
            return operations.DeleteRuleAsync(networkSecurityGroupName, ruleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the details for the specified Network Security Group in the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group to retrieve.
        /// </param>
        /// <param name='detailLevel'>
        /// Optional. Use 'Full' to list rules.
        /// </param>
        /// <returns>
        /// A Network Security Group associated with your subscription.
        /// </returns>
        public static NetworkSecurityGroupGetResponse Get(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string detailLevel)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).GetAsync(networkSecurityGroupName, detailLevel);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the details for the specified Network Security Group in the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the Network Security Group to retrieve.
        /// </param>
        /// <param name='detailLevel'>
        /// Optional. Use 'Full' to list rules.
        /// </param>
        /// <returns>
        /// A Network Security Group associated with your subscription.
        /// </returns>
        public static Task<NetworkSecurityGroupGetResponse> GetAsync(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string detailLevel)
        {
            return operations.GetAsync(networkSecurityGroupName, detailLevel, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the Network Security Group applied to a specific network
        /// interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The Network Security Group associated with an entity: subnet,
        /// network interface or role.
        /// </returns>
        public static NetworkSecurityGroupGetAssociationResponse GetForNetworkInterface(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).GetForNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the Network Security Group applied to a specific network
        /// interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The Network Security Group associated with an entity: subnet,
        /// network interface or role.
        /// </returns>
        public static Task<NetworkSecurityGroupGetAssociationResponse> GetForNetworkInterfaceAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName)
        {
            return operations.GetForNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the Network Security Group applied to a specific role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The Network Security Group associated with an entity: subnet,
        /// network interface or role.
        /// </returns>
        public static NetworkSecurityGroupGetAssociationResponse GetForRole(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).GetForRoleAsync(serviceName, deploymentName, roleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the Network Security Group applied to a specific role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The Network Security Group associated with an entity: subnet,
        /// network interface or role.
        /// </returns>
        public static Task<NetworkSecurityGroupGetAssociationResponse> GetForRoleAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName)
        {
            return operations.GetForRoleAsync(serviceName, deploymentName, roleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the Network Security Group applied to a specific subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The Network Security Group associated with an entity: subnet,
        /// network interface or role.
        /// </returns>
        public static NetworkSecurityGroupGetAssociationResponse GetForSubnet(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).GetForSubnetAsync(virtualNetworkName, subnetName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the Network Security Group applied to a specific subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The Network Security Group associated with an entity: subnet,
        /// network interface or role.
        /// </returns>
        public static Task<NetworkSecurityGroupGetAssociationResponse> GetForSubnetAsync(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName)
        {
            return operations.GetForSubnetAsync(virtualNetworkName, subnetName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists all of the Network Security Groups for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <returns>
        /// The List Definitions operation response.
        /// </returns>
        public static NetworkSecurityGroupListResponse List(this INetworkSecurityGroupOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists all of the Network Security Groups for the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <returns>
        /// The List Definitions operation response.
        /// </returns>
        public static Task<NetworkSecurityGroupListResponse> ListAsync(this INetworkSecurityGroupOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Removes a Network Security Group from a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse RemoveFromNetworkInterface(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, string networkSecurityGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).RemoveFromNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, networkSecurityGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes a Network Security Group from a network interface.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RemoveFromNetworkInterfaceAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkInterfaceName, string networkSecurityGroupName)
        {
            return operations.RemoveFromNetworkInterfaceAsync(serviceName, deploymentName, roleName, networkInterfaceName, networkSecurityGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Removes a Network Security Group from a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse RemoveFromRole(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkSecurityGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).RemoveFromRoleAsync(serviceName, deploymentName, roleName, networkSecurityGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes a Network Security Group from a role.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='serviceName'>
        /// Required.
        /// </param>
        /// <param name='deploymentName'>
        /// Required.
        /// </param>
        /// <param name='roleName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RemoveFromRoleAsync(this INetworkSecurityGroupOperations operations, string serviceName, string deploymentName, string roleName, string networkSecurityGroupName)
        {
            return operations.RemoveFromRoleAsync(serviceName, deploymentName, roleName, networkSecurityGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Removes a Network Security Group from a subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse RemoveFromSubnet(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName, string networkSecurityGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).RemoveFromSubnetAsync(virtualNetworkName, subnetName, networkSecurityGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes a Network Security Group from a subnet.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// Required.
        /// </param>
        /// <param name='subnetName'>
        /// Required.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RemoveFromSubnetAsync(this INetworkSecurityGroupOperations operations, string virtualNetworkName, string subnetName, string networkSecurityGroupName)
        {
            return operations.RemoveFromSubnetAsync(virtualNetworkName, subnetName, networkSecurityGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Add new Network Security Rule to existing Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Optional.
        /// </param>
        /// <param name='ruleName'>
        /// Optional.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set Network Security Rule
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse SetRule(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string ruleName, NetworkSecuritySetRuleParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INetworkSecurityGroupOperations)s).SetRuleAsync(networkSecurityGroupName, ruleName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Add new Network Security Rule to existing Network Security Group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Network.INetworkSecurityGroupOperations.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Optional.
        /// </param>
        /// <param name='ruleName'>
        /// Optional.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Set Network Security Rule
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> SetRuleAsync(this INetworkSecurityGroupOperations operations, string networkSecurityGroupName, string ruleName, NetworkSecuritySetRuleParameters parameters)
        {
            return operations.SetRuleAsync(networkSecurityGroupName, ruleName, parameters, CancellationToken.None);
        }
    }
}
