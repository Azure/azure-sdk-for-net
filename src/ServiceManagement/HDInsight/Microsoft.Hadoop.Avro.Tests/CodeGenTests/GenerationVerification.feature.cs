// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Microsoft.Hadoop.Avro.Tests.CodeGenTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CodeGenerationVerificationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GenerationVerification.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CodeGenerationVerification", "Code generator should be able to generate correct CSharp code\r\nThere should prope" +
                    "r mapping between Avro type and CSharp types\r\nThe generated code should be hande" +
                    "led correctly by Avro serializer", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "CodeGenerationVerification")))
            {
                Microsoft.Hadoop.Avro.Tests.CodeGenTests.CodeGenerationVerificationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace(string avroType, string cSharpType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CheckIn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can generate a proper CSharp type from Avro type having a default namespace", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given(string.Format("I have a record schema with Parent.Namespace namespace containing only \"{0}\" fiel" +
                        "d", avroType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
  testRunner.When("I generate CSharp code from the schema using a default namespace \"Default.Namespa" +
                    "ce\" and compile the generated code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
  testRunner.Then(string.Format("the generated code is a class containing one field of the corresponding \"{0}\"", cSharpType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
   testRunner.And("I can perform roundtrip serialization of a randomly created object of the generat" +
                    "ed class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
   testRunner.And("The serialized object should match the deserialized object and namespace of origi" +
                    "nal schema should match namespace of serialized schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"boolean\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"boolean\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Boolean")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_Boolean()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"\"boolean\"\"", "Boolean", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"int\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"int\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Int32")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_Int()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"\"int\"\"", "Int32", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"long\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"long\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Int64")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_Long()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"\"long\"\"", "Int64", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"float\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"float\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Single")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_Float()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"\"float\"\"", "Single", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"double\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"double\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Double")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_Double()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"\"double\"\"", "Double", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"string\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"string\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "String")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_String()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"\"string\"\"", "String", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"bytes\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"bytes\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Byte[]")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_Bytes()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"\"bytes\"\"", "Byte[]", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "N.E")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeEnumNameENamespaceNSymbolsAB()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"", "N.E", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Parent.Namespace.E")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeEnumNameESymbolsAB()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"", "Parent.Namespace.E", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "N.R")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"", "N.R", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Parent.Namespace.R")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeRecordNameR()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"record\", \"name\":\"R\"}\"", "Parent.Namespace.R", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"boolean\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"boolean\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<Boolean>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeArrayItemsBoolean()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"array\", \"items\": \"boolean\"}\"", "IList<Boolean>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"int\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"int\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<Int32>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeArrayItemsInt()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"array\", \"items\": \"int\"}\"", "IList<Int32>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"long\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"long\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<Int64>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeArrayItemsLong()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"array\", \"items\": \"long\"}\"", "IList<Int64>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"float\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"float\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<Single>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeArrayItemsFloat()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"array\", \"items\": \"float\"}\"", "IList<Single>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"double\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"double\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<Double>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeArrayItemsDouble()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"array\", \"items\": \"double\"}\"", "IList<Double>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"string\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"string\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<String>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeArrayItemsString()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"array\", \"items\": \"string\"}\"", "IList<String>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"bytes\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"bytes\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<Byte[]>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeArrayItemsBytes()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"array\", \"items\": \"bytes\"}\"", "IList<Byte[]>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<N.R>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "IList<N.R>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"boolean\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"boolean\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, Boolean>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeMapValuesBoolean()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"map\", \"values\": \"boolean\"}\"", "IDictionary<String, Boolean>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"int\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"int\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, Int32>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeMapValuesInt()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"map\", \"values\": \"int\"}\"", "IDictionary<String, Int32>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"long\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"long\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, Int64>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeMapValuesLong()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"map\", \"values\": \"long\"}\"", "IDictionary<String, Int64>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"float\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"float\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, Single>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeMapValuesFloat()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"map\", \"values\": \"float\"}\"", "IDictionary<String, Single>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"double\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"double\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, Double>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeMapValuesDouble()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"map\", \"values\": \"double\"}\"", "IDictionary<String, Double>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"string\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"string\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, String>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeMapValuesString()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"map\", \"values\": \"string\"}\"", "IDictionary<String, String>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"bytes\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"bytes\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, Byte[]>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeMapValuesBytes()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"map\", \"values\": \"bytes\"}\"", "IDictionary<String, Byte[]>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, N.R>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeMapValuesTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "IDictionary<String, N.R>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"fixed\", \"size\": 10, \"name\":\"F\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"fixed\", \"size\": 10, \"name\":\"F\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Byte[]")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeFixedSize10NameFNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"fixed\", \"size\": 10, \"name\":\"F\", \"namespace\":\"N\"}\"", "Byte[]", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"fixed\", \"size\": 10, \"name\":\"F\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"fixed\", \"size\": 10, \"name\":\"F\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Byte[]")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeFixedSize10NameF()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"fixed\", \"size\": 10, \"name\":\"F\"}\"", "Byte[]", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"boolean\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"boolean\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Nullable<Boolean>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_NullBoolean()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"[\"null\", \"boolean\"]\"", "Nullable<Boolean>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"int\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"int\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Nullable<Int32>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_NullInt()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"[\"null\", \"int\"]\"", "Nullable<Int32>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"long\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"long\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Nullable<Int64>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_NullLong()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"[\"null\", \"long\"]\"", "Nullable<Int64>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"float\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"float\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Nullable<Single>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_NullFloat()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"[\"null\", \"float\"]\"", "Nullable<Single>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"double\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"double\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Nullable<Double>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_NullDouble()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"[\"null\", \"double\"]\"", "Nullable<Double>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"string\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"string\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "String")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_NullString()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"[\"null\", \"string\"]\"", "String", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"bytes\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"bytes\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Byte[]")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_NullBytes()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"[\"null\", \"bytes\"]\"", "Byte[]", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"int\", \"null\", \"string\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"int\", \"null\", \"string\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Object")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_IntNullString()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"[\"int\", \"null\", \"string\"]\"", "Object", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
            "R\", \"namespace\":\"N\"}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
            "R\", \"namespace\":\"N\"}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, IList<N.R>>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeMapValuesTypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
                    "R\", \"namespace\":\"N\"}}}\"", "IDictionary<String, IList<N.R>>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
            "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
            "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<IDictionary<String, IList<N.R>>>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace_TypeArrayItemsTypeMapValuesTypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingADefaultNamespace("\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
                    "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"", "IList<IDictionary<String, IList<N.R>>>", ((string[])(null)));
        }
        
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace(string avroType, string cSharpType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CheckIn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can generate a proper CSharp type from Avro type having a forced namespace", @__tags);
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given(string.Format("I have a record schema with Parent.Namespace namespace containing only \"{0}\" fiel" +
                        "d", avroType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
  testRunner.When("I generate CSharp code from the schema using a forced namespace \"Forced.Namespace" +
                    "\" and compile the generated code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
  testRunner.Then(string.Format("the generated code is a class containing one field of the corresponding \"{0}\"", cSharpType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
   testRunner.And("I can perform roundtrip serialization of a randomly created object of the generat" +
                    "ed class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
   testRunner.And("The serialized object should match the deserialized object and namespace of origi" +
                    "nal schema should match namespace of serialized schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Forced.Namespace.E")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace_TypeEnumNameENamespaceNSymbolsAB()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace("\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"", "Forced.Namespace.E", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Forced.Namespace.E")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace_TypeEnumNameESymbolsAB()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace("\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"", "Forced.Namespace.E", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Forced.Namespace.R")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace_TypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace("\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"", "Forced.Namespace.R", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Forced.Namespace.R")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace_TypeRecordNameR()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace("\"{\"type\": \"record\", \"name\":\"R\"}\"", "Forced.Namespace.R", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<Forced.Namespace.R>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace_TypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace("\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "IList<Forced.Namespace.R>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, Forced.Namespace.R>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace_TypeMapValuesTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "IDictionary<String, Forced.Namespace.R>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
            "R\", \"namespace\":\"N\"}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
            "R\", \"namespace\":\"N\"}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, IList<Forced.Namespace.R>>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace_TypeMapValuesTypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
                    "R\", \"namespace\":\"N\"}}}\"", "IDictionary<String, IList<Forced.Namespace.R>>", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type having a forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
            "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
            "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IList<IDictionary<String, IList<Forced.Namespace.R>>>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace_TypeArrayItemsTypeMapValuesTypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeHavingAForcedNamespace("\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
                    "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"", "IList<IDictionary<String, IList<Forced.Namespace.R>>>", ((string[])(null)));
        }
        
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace(string avroType, string cSharpType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CheckIn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can generate a proper CSharp type from Avro type without having a namespace and" +
                    " using default namespace", @__tags);
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
 testRunner.Given(string.Format("I have a record schema without namespace containing only \"{0}\" field", avroType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 80
  testRunner.When("I generate CSharp code from the schema using a default namespace \"Default.Namespa" +
                    "ce\" and compile the generated code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
  testRunner.Then(string.Format("the generated code is a class containing one field of the corresponding \"{0}\"", cSharpType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "N.E")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace_TypeEnumNameENamespaceNSymbolsAB()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace("\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"", "N.E", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Default.Namespace.E")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace_TypeEnumNameESymbolsAB()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace("\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"", "Default.Namespace.E", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "N.R")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace_TypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace("\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"", "N.R", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Default.Namespace.R")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace_TypeRecordNameR()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace("\"{\"type\": \"record\", \"name\":\"R\"}\"", "Default.Namespace.R", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, N.R>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace_TypeMapValuesTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingDefaultNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "IDictionary<String, N.R>", ((string[])(null)));
        }
        
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace(string avroType, string cSharpType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CheckIn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can generate a proper CSharp type from Avro type without having a namespace and" +
                    " using forced namespace", @__tags);
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given(string.Format("I have a record schema without namespace containing only \"{0}\" field", avroType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
  testRunner.When("I generate CSharp code from the schema using a forced namespace \"Forced.Namespace" +
                    "\" and compile the generated code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
  testRunner.Then(string.Format("the generated code is a class containing one field of the corresponding \"{0}\"", cSharpType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Forced.Namespace.E")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace_TypeEnumNameENamespaceNSymbolsAB()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace("\"{\"type\": \"enum\", \"name\": \"E\", \"namespace\":\"N\", \"symbols\" : [\"A\", \"B\"]}\"", "Forced.Namespace.E", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Forced.Namespace.E")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace_TypeEnumNameESymbolsAB()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace("\"{\"type\": \"enum\", \"name\": \"E\", \"symbols\" : [\"A\", \"B\"]}\"", "Forced.Namespace.E", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Forced.Namespace.R")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace_TypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace("\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"", "Forced.Namespace.R", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "Forced.Namespace.R")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace_TypeRecordNameR()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace("\"{\"type\": \"record\", \"name\":\"R\"}\"", "Forced.Namespace.R", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can generate a proper CSharp type from Avro type without having a namespace and" +
            " using forced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:CSharp Type", "IDictionary<String, Forced.Namespace.R>")]
        public virtual void ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace_TypeMapValuesTypeRecordNameRNamespaceN()
        {
            this.ICanGenerateAProperCSharpTypeFromAvroTypeWithoutHavingANamespaceAndUsingForcedNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "IDictionary<String, Forced.Namespace.R>", ((string[])(null)));
        }
        
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace(string avroType, string defaultValue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CheckIn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can serialize generated types with default values with default namespace", @__tags);
#line 104
this.ScenarioSetup(scenarioInfo);
#line 105
 testRunner.Given(string.Format("I have a record schema with Parent.Namespace namespace containing only \"{0}\" fiel" +
                        "d", avroType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 106
  testRunner.And(string.Format("the field has a default value \"{0}\"", defaultValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
  testRunner.When("I generate CSharp code from the schema using a default namespace \"Default.Namespa" +
                    "ce\" and compile the generated code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
  testRunner.Then("I can perform roundtrip serialization of an object of the generated class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
   testRunner.And("The serialized object should match the deserialized object and namespace of origi" +
                    "nal schema should match namespace of serialized schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"boolean\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"boolean\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"true\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_Boolean()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"\"boolean\"\"", "\"true\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"int\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"int\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"10\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_Int()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"\"int\"\"", "\"10\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"long\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"long\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"11\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_Long()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"\"long\"\"", "\"11\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"float\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"float\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"12.1\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_Float()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"\"float\"\"", "\"12.1\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"double\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"double\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"13.2\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_Double()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"\"double\"\"", "\"13.2\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"string\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"string\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"\"value1\"\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_String()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"\"string\"\"", "\"\"value1\"\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"\"bytes\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"\"bytes\"\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"\"\\u00FF\"\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_Bytes()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"\"bytes\"\"", "\"\"\\u00FF\"\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"", "\"{}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"boolean\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"boolean\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[true, false, false]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeArrayItemsBoolean()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"array\", \"items\": \"boolean\"}\"", "\"[true, false, false]\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"int\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"int\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[1,2,3]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeArrayItemsInt()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"array\", \"items\": \"int\"}\"", "\"[1,2,3]\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"long\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"long\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[1,2,3]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeArrayItemsLong()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"array\", \"items\": \"long\"}\"", "\"[1,2,3]\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"float\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"float\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[1.1, 2.2, 3.2]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeArrayItemsFloat()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"array\", \"items\": \"float\"}\"", "\"[1.1, 2.2, 3.2]\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"double\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"double\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[1.1, 2.2, 3.2]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeArrayItemsDouble()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"array\", \"items\": \"double\"}\"", "\"[1.1, 2.2, 3.2]\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"string\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"string\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[\"value1\", \"value2\", \"value3\"]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeArrayItemsString()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"array\", \"items\": \"string\"}\"", "\"[\"value1\", \"value2\", \"value3\"]\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": \"bytes\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": \"bytes\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[\"\\u00FF\", \"\\u00FF\", \"\\u00FF\"]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeArrayItemsBytes()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"array\", \"items\": \"bytes\"}\"", "\"[\"\\u00FF\", \"\\u00FF\", \"\\u00FF\"]\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[{}, {}, {}]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "\"[{}, {}, {}]\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"boolean\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"boolean\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": true}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeMapValuesBoolean()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"map\", \"values\": \"boolean\"}\"", "\"{\"value1\": true}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"int\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"int\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": 10}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeMapValuesInt()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"map\", \"values\": \"int\"}\"", "\"{\"value1\": 10}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"long\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"long\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": 11}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeMapValuesLong()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"map\", \"values\": \"long\"}\"", "\"{\"value1\": 11}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"float\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"float\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": 12.1}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeMapValuesFloat()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"map\", \"values\": \"float\"}\"", "\"{\"value1\": 12.1}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"double\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"double\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": 13.1}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeMapValuesDouble()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"map\", \"values\": \"double\"}\"", "\"{\"value1\": 13.1}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"string\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"string\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": \"value2\"}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeMapValuesString()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"map\", \"values\": \"string\"}\"", "\"{\"value1\": \"value2\"}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": \"bytes\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": \"bytes\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": \"\\u00FF\"}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeMapValuesBytes()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"map\", \"values\": \"bytes\"}\"", "\"{\"value1\": \"\\u00FF\"}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": {}}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeMapValuesTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "\"{\"value1\": {}}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"fixed\", \"size\": 1, \"name\":\"F\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"fixed\", \"size\": 1, \"name\":\"F\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"\"\\u00FF\"\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeFixedSize1NameFNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"fixed\", \"size\": 1, \"name\":\"F\", \"namespace\":\"N\"}\"", "\"\"\\u00FF\"\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"boolean\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"boolean\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_NullBoolean()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"null\", \"boolean\"]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"int\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"int\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_NullInt()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"null\", \"int\"]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"long\", \"null\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"long\", \"null\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"10\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_LongNull()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"long\", \"null\"]\"", "\"10\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"float\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"float\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_NullFloat()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"null\", \"float\"]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"double\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"double\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_NullDouble()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"null\", \"double\"]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"string\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"string\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_NullString()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"null\", \"string\"]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"bytes\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"bytes\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_NullBytes()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"null\", \"bytes\"]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_NullTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"null\", {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"int\", \"long\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"int\", \"long\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_NullIntLong()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"null\", \"int\", \"long\"]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"int\", \"null\", \"long\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"int\", \"null\", \"long\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"10\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_IntNullLong()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"int\", \"null\", \"long\"]\"", "\"10\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", \"string\", \"bytes\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", \"string\", \"bytes\"]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_NullStringBytes()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"[\"null\", \"string\", \"bytes\"]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
            "R\", \"namespace\":\"N\"}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
            "R\", \"namespace\":\"N\"}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": [{}, {}]}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeMapValuesTypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
                    "R\", \"namespace\":\"N\"}}}\"", "\"{\"value1\": [{}, {}]}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with default namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
            "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
            "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[{\"value1\": [{}, {}]}]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace_TypeArrayItemsTypeMapValuesTypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithDefaultNamespace("\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
                    "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"", "\"[{\"value1\": [{}, {}]}]\"", ((string[])(null)));
        }
        
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace(string avroType, string defaultValue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CheckIn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can serialize generated types with default values with enforced namespace", @__tags);
#line 153
this.ScenarioSetup(scenarioInfo);
#line 154
 testRunner.Given(string.Format("I have a record schema with Parent.Namespace namespace containing only \"{0}\" fiel" +
                        "d", avroType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
  testRunner.And(string.Format("the field has a default value \"{0}\"", defaultValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
  testRunner.When("I generate CSharp code from the schema using a forced namespace \"Forced.Namespace" +
                    "\" and compile the generated code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
  testRunner.Then("I can perform roundtrip serialization of an object of the generated class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 158
   testRunner.And("The serialized object should match the deserialized object and namespace of origi" +
                    "nal schema should match namespace of serialized schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with enforced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace_TypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace("\"{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}\"", "\"{}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with enforced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[{}, {}, {}]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace_TypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace("\"{\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "\"[{}, {}, {}]\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with enforced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": {}}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace_TypeMapValuesTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}\"", "\"{\"value1\": {}}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with enforced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"[\"null\", {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"[\"null\", {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}]\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"null\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace_NullTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace("\"[\"null\", {\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}]\"", "\"null\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with enforced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
            "R\", \"namespace\":\"N\"}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
            "R\", \"namespace\":\"N\"}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"{\"value1\": [{}, {}]}\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace_TypeMapValuesTypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace("\"{\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": {\"type\": \"record\", \"name\":\"" +
                    "R\", \"namespace\":\"N\"}}}\"", "\"{\"value1\": [{}, {}]}\"", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("I can serialize generated types with default values with enforced namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CodeGenerationVerification")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CheckIn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
            "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Avro Type", "\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
            "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Default Value", "\"[{\"value1\": [{}, {}]}]\"")]
        public virtual void ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace_TypeArrayItemsTypeMapValuesTypeArrayItemsTypeRecordNameRNamespaceN()
        {
            this.ICanSerializeGeneratedTypesWithDefaultValuesWithEnforcedNamespace("\"{\"type\": \"array\", \"items\": {\"type\": \"map\", \"values\": {\"type\": \"array\", \"items\": " +
                    "{\"type\": \"record\", \"name\":\"R\", \"namespace\":\"N\"}}}}\"", "\"[{\"value1\": [{}, {}]}]\"", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
