// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Microsoft.WindowsAzure.Management.HDInsight.Tests.Gherkin.DynaXml
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DynaXmlNamespaceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DynaXmlNamespace.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DynaXmlNamespace", "In order to easily use XPath expressions\nAs a developer\nI want to be able to mani" +
                    "pulate prefixes and namespaces easily", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "DynaXmlNamespace")))
            {
                Microsoft.WindowsAzure.Management.HDInsight.Tests.Gherkin.DynaXml.DynaXmlNamespaceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("It should accept documents with no namespaces.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DynaXmlNamespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void ItShouldAcceptDocumentsWithNoNamespaces_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It should accept documents with no namespaces.", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 8
 testRunner.Given("I have the xml content with:", "\t<Root /> ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.When("I generate the namespace table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("the namespace table should have 1 prefix matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
  testRunner.And("the namespace table should match the prefix \"empty\" to the namespace \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
  testRunner.And("the namespace table should have 1 namespace matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
  testRunner.And("the namespace table should match the uri \"\" to the prefixes \"empty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("It should map the defualt namespace when there is only one namespace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DynaXmlNamespace")]
        public virtual void ItShouldMapTheDefualtNamespaceWhenThereIsOnlyOneNamespace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It should map the defualt namespace when there is only one namespace", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 19
 testRunner.Given("I have the xml content with:", "\t<Root xmlns=\"default\" />", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I generate the namespace table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("the namespace table should have 2 prefix matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
  testRunner.And("the namespace table should match the prefix \"empty\" to the namespace \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
  testRunner.And("the namespace table should match the prefix \"def\" to the namespace \"default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.And("the namespace table should have 2 namespace matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
  testRunner.And("the namespace table should match the uri \"\" to the prefixes \"empty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
  testRunner.And("the namespace table should match the uri \"default\" to the prefixes \"def\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("It should allow the default namespace to be overriden")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DynaXmlNamespace")]
        public virtual void ItShouldAllowTheDefaultNamespaceToBeOverriden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It should allow the default namespace to be overriden", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 32
 testRunner.Given("I have the xml content with:", "\t<Root xmlns=\"default\" >\n\t\t<Child xmlns=\"default1\" />\n\t</Root>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.When("I generate the namespace table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("the namespace table should have 3 prefix matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
  testRunner.And("the namespace table should match the prefix \"empty\" to the namespace \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
  testRunner.And("the namespace table should match the prefix \"def\" to the namespace \"default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
  testRunner.And("the namespace table should match the prefix \"def.1\" to the namespace \"default1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
  testRunner.And("the namespace table should have 3 namespace matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
  testRunner.And("the namespace table should match the uri \"\" to the prefixes \"empty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
  testRunner.And("the namespace table should match the uri \"default\" to the prefixes \"def\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
  testRunner.And("the namespace table should match the uri \"default1\" to the prefixes \"def.1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Overriding a prefix with the same uri should not cause a conflict")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DynaXmlNamespace")]
        public virtual void OverridingAPrefixWithTheSameUriShouldNotCauseAConflict()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Overriding a prefix with the same uri should not cause a conflict", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 49
 testRunner.Given("I have the xml content with:", "\t<Root xmlns=\"default\" >\n\t\t<Child xmlns=\"default\" />\n\t</Root>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.When("I generate the namespace table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("the namespace table should have 2 prefix matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
  testRunner.And("the namespace table should match the prefix \"empty\" to the namespace \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
  testRunner.And("the namespace table should match the prefix \"def\" to the namespace \"default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
  testRunner.And("the namespace table should have 2 namespace matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
  testRunner.And("the namespace table should match the uri \"\" to the prefixes \"empty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
  testRunner.And("the namespace table should match the uri \"default\" to the prefixes \"def\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Two prefixes with the same uri should still exist")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DynaXmlNamespace")]
        public virtual void TwoPrefixesWithTheSameUriShouldStillExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two prefixes with the same uri should still exist", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 64
 testRunner.Given("I have the xml content with:", "\t<Root xmlns=\"default\" >\n\t\t<Child xmlns:a=\"default\" />\n\t</Root>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
 testRunner.When("I generate the namespace table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("the namespace table should have 3 prefix matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
  testRunner.And("the namespace table should match the prefix \"empty\" to the namespace \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
  testRunner.And("the namespace table should match the prefix \"def\" to the namespace \"default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
  testRunner.And("the namespace table should match the prefix \"a\" to the namespace \"default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
  testRunner.And("the namespace table should have 2 namespace matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
  testRunner.And("the namespace table should match the uri \"\" to the prefixes \"empty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
  testRunner.And("the namespace table should match the uri \"default\" to the prefixes \"def,a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Complex remapping situations should be handled")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DynaXmlNamespace")]
        public virtual void ComplexRemappingSituationsShouldBeHandled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complex remapping situations should be handled", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 80
 testRunner.Given("I have the xml content with:", "\t<root xmlns=\"default\" >\n\t  <a xmlns=\"default\" />\n\t  <b xmlns:a=\"1\" />\n\t  <c xmln" +
                    "s:a=\"2\" >\n\t\t<c1 xmlns =\"default3\" />\n\t\t<c2 xmlns = \"default2\" />\n\t\t<c3 xmlns:c =" +
                    " \"default\" />\n\t  </c>\n\t  <d xmlns:a=\"3\" />\n\t</root>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.When("I generate the namespace table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.Then("the namespace table should have 8 prefix matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
  testRunner.And("the namespace table should match the prefix \"empty\" to the namespace \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
  testRunner.And("the namespace table should match the prefix \"def\" to the namespace \"default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
  testRunner.And("the namespace table should match the prefix \"a\" to the namespace \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
  testRunner.And("the namespace table should match the prefix \"a.1\" to the namespace \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
  testRunner.And("the namespace table should match the prefix \"def.1\" to the namespace \"default3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
  testRunner.And("the namespace table should match the prefix \"def.2\" to the namespace \"default2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
  testRunner.And("the namespace table should match the prefix \"c\" to the namespace \"default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
  testRunner.And("the namespace table should match the prefix \"a.2\" to the namespace \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
  testRunner.And("the namespace table should have 7 namespace matches defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
  testRunner.And("the namespace table should match the uri \"\" to the prefixes \"empty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.And("the namespace table should match the uri \"default\" to the prefixes \"def,c\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
  testRunner.And("the namespace table should match the uri \"1\" to the prefixes \"a\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
  testRunner.And("the namespace table should match the uri \"2\" to the prefixes \"a.1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
  testRunner.And("the namespace table should match the uri \"default3\" to the prefixes \"def.1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
  testRunner.And("the namespace table should match the uri \"default2\" to the prefixes \"def.2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
  testRunner.And("the namespace table should match the uri \"3\" to the prefixes \"a.2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
