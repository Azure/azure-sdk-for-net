<#@ template language="C#" linePragmas="false" visibility="internal"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.Hadoop.Avro.Schema" #>
//<auto-generated />
namespace <#= Utilities.GetNamespace(this, this.Schema.Namespace) #>
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using Microsoft.Hadoop.Avro;

    /// <summary>
    /// Used to serialize and deserialize Avro record <#= Utilities.Validate(this.Schema.FullName) #>.
    /// </summary>
    [DataContract(Namespace = "<#= this.Schema.Namespace #>")]<# GenerateKnownTypesAttributes(((RecordSchema)this.Schema).Fields); #>

    public partial class <#= Utilities.Validate(this.Schema.Name) #>
    {
        private const string JsonSchema = @"<#= this.Schema.ToString().Replace("\"", "\"\"") #>";

        /// <summary>
        /// Gets the schema.
        /// </summary>
        public static string Schema
        {
            get
            {
                return JsonSchema;
            }
        }
<# foreach (var field in ((RecordSchema)this.Schema).Fields)
    {
#>      
        /// <summary>
        /// Gets or sets the <#= field.Name #> field.
        /// </summary>
        [DataMember]<# GenerateTypeAttributes(field.TypeSchema); #>

        public <# GenerateType(field.TypeSchema, true, false, false); #> <#= field.Name #> { get; set; }
        <#  
    }
#>
        
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= Utilities.Validate(this.Schema.Name) #>"/> class.
        /// </summary>
        public <#= this.Schema.Name #>()
        {
<#  foreach (var field in ((RecordSchema)this.Schema).Fields)
    {
        if(field.HasDefaultValue)
        {
            #>            this.<#=field.Name#> = <# GenerateDefaultValue(field.TypeSchema, field.DefaultValue); #>;
<#      }
    } #>
        }
<# if(((RecordSchema)this.Schema).Fields.Any()) { #>

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= Utilities.Validate(this.Schema.Name) #>"/> class.
        /// </summary>
<#  foreach (var field in ((RecordSchema)this.Schema).Fields)
    {
        #>        /// <param name="<#=field.Name.FirstLetterToLower()#>">The <#=field.Name.FirstLetterToLower()#>.</param>
<#
}#>        public <#= this.Schema.Name #>(<# var count = ((RecordSchema)this.Schema).Fields.Count; foreach (var field in ((RecordSchema)this.Schema).Fields) { GenerateType(field.TypeSchema, true, false, false);#> <#=field.Name.FirstLetterToLower()#><#if(--count > 0) #>, <#; }#>)
        {
<#  foreach (var field in ((RecordSchema)this.Schema).Fields)
    {
            #>            this.<#=field.Name#> = <#=field.Name.FirstLetterToLower()#>;
<#  }   #>
        }
<#}#>
    }
}
<#@ include file="Utilities/TypeTemplate.ttinclude" #>
<#@ include file="Utilities/DefaultValueTemplate.ttinclude" #>