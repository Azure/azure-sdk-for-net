// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.ServiceBus.Models;

namespace Microsoft.WindowsAzure.Management.ServiceBus
{
    /// <summary>
    /// The Service Bus Management API includes operations for managing Service
    /// Bus topics for a namespace.
    /// </summary>
    public partial interface ITopicOperations
    {
        /// <summary>
        /// Creates a new topic. Once created, this topic resource manifest is
        /// immutable. This operation is not idempotent. Repeating the create
        /// call, after a topic with same name has been created successfully,
        /// will result in a 409 Conflict error message.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh780728.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='topic'>
        /// The Service Bus topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a particular topic.
        /// </returns>
        Task<ServiceBusTopicResponse> CreateAsync(string namespaceName, ServiceBusTopic topic, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes an existing topic. This operation will also remove all
        /// associated state including associated subscriptions.  (see
        /// http://msdn.microsoft.com/en-us/library/hh780721.aspx for more
        /// information)
        /// </summary>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='topicName'>
        /// The topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> DeleteAsync(string namespaceName, string topicName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The topic description is an XML AtomPub document that defines the
        /// desired semantics for a topic. The topic description contains the
        /// following properties. For more information, see the
        /// TopicDescription Properties topic.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh780749.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='topicName'>
        /// The topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a particular topic.
        /// </returns>
        Task<ServiceBusTopicResponse> GetAsync(string namespaceName, string topicName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the set of connection strings for a topic.
        /// </summary>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='topicName'>
        /// The topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The set of connection details for a service bus entity.
        /// </returns>
        Task<ServiceBusConnectionDetailsResponse> GetConnectionDetailsAsync(string namespaceName, string topicName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Enumerates the topics in the service namespace. An empty feed is
        /// returned if no topic exists in the service namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh780744.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a list of topics.
        /// </returns>
        Task<ServiceBusTopicsResponse> ListAsync(string namespaceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Updates a topic.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj839740.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='topic'>
        /// The Service Bus topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a particular topic.
        /// </returns>
        Task<ServiceBusTopicResponse> UpdateAsync(string namespaceName, ServiceBusTopic topic, CancellationToken cancellationToken);
    }
}
