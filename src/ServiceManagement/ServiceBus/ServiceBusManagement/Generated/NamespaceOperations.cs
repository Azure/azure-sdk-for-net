// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.ServiceBus;
using Microsoft.WindowsAzure.Management.ServiceBus.Models;

namespace Microsoft.WindowsAzure.Management.ServiceBus
{
    /// <summary>
    /// The Service Bus Management API includes operations for managing Service
    /// Bus namespaces.
    /// </summary>
    internal partial class NamespaceOperations : IServiceOperations<ServiceBusManagementClient>, INamespaceOperations
    {
        /// <summary>
        /// Initializes a new instance of the NamespaceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal NamespaceOperations(ServiceBusManagementClient client)
        {
            this._client = client;
        }
        
        private ServiceBusManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.ServiceBusManagementClient.
        /// </summary>
        public ServiceBusManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Checks the availability of the given service namespace across all
        /// Windows Azure subscriptions. This is useful because the domain
        /// name is created based on the service namespace name.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a query for the availability status of a namespace
        /// name.
        /// </returns>
        public async Task<CheckNamespaceAvailabilityResponse> CheckAvailabilityAsync(string namespaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                TracingAdapter.Enter(invocationId, this, "CheckAvailabilityAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/ServiceBus/CheckNamespaceAvailability";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("namespace=" + Uri.EscapeDataString(namespaceName));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("x-ms-version", "2013-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CheckNamespaceAvailabilityResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CheckNamespaceAvailabilityResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement != null)
                        {
                            XElement contentElement = entryElement.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement != null)
                            {
                                XElement namespaceAvailabilityElement = contentElement.Element(XName.Get("NamespaceAvailability", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (namespaceAvailabilityElement != null)
                                {
                                    XElement resultElement = namespaceAvailabilityElement.Element(XName.Get("Result", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (resultElement != null)
                                    {
                                        bool resultInstance = bool.Parse(resultElement.Value);
                                        result.IsAvailable = resultInstance;
                                    }
                                    
                                    XElement reasonDetailElement = namespaceAvailabilityElement.Element(XName.Get("ReasonDetail", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (reasonDetailElement != null)
                                    {
                                        string reasonDetailInstance = reasonDetailElement.Value;
                                        result.ReasonDetails = reasonDetailInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a new service namespace. Once created, this namespace's
        /// resource manifest is immutable. This operation is idempotent.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='region'>
        /// Optional. The namespace region.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a request for a particular namespace.
        /// </returns>
        public async Task<ServiceBusNamespaceResponse> CreateAsync(string namespaceName, string region, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("region", region);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("type", "entry");
                httpRequest.Headers.Add("x-ms-version", "2013-07-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement entryElement = new XElement(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                requestDoc.Add(entryElement);
                
                XElement contentElement = new XElement(XName.Get("content", "http://www.w3.org/2005/Atom"));
                entryElement.Add(contentElement);
                
                XAttribute typeAttribute = new XAttribute(XName.Get("type", ""), "");
                typeAttribute.Value = "application/xml";
                contentElement.Add(typeAttribute);
                
                XElement namespaceDescriptionElement = new XElement(XName.Get("NamespaceDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                contentElement.Add(namespaceDescriptionElement);
                
                if (region != null)
                {
                    XElement regionElement = new XElement(XName.Get("Region", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    regionElement.Value = region;
                    namespaceDescriptionElement.Add(regionElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/atom+xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusNamespaceResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusNamespaceResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement2 = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement2 != null)
                        {
                            XElement contentElement2 = entryElement2.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement2 != null)
                            {
                                XElement namespaceDescriptionElement2 = contentElement2.Element(XName.Get("NamespaceDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (namespaceDescriptionElement2 != null)
                                {
                                    ServiceBusNamespace namespaceDescriptionInstance = new ServiceBusNamespace();
                                    result.Namespace = namespaceDescriptionInstance;
                                    
                                    XElement nameElement = namespaceDescriptionElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        namespaceDescriptionInstance.Name = nameInstance;
                                    }
                                    
                                    XElement regionElement2 = namespaceDescriptionElement2.Element(XName.Get("Region", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (regionElement2 != null)
                                    {
                                        string regionInstance = regionElement2.Value;
                                        namespaceDescriptionInstance.Region = regionInstance;
                                    }
                                    
                                    XElement statusElement = namespaceDescriptionElement2.Element(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (statusElement != null)
                                    {
                                        string statusInstance = statusElement.Value;
                                        namespaceDescriptionInstance.Status = statusInstance;
                                    }
                                    
                                    XElement createdAtElement = namespaceDescriptionElement2.Element(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createdAtElement != null)
                                    {
                                        DateTime createdAtInstance = DateTime.Parse(createdAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        namespaceDescriptionInstance.CreatedAt = createdAtInstance;
                                    }
                                    
                                    XElement acsManagementEndpointElement = namespaceDescriptionElement2.Element(XName.Get("AcsManagementEndpoint", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (acsManagementEndpointElement != null)
                                    {
                                        Uri acsManagementEndpointInstance = TypeConversion.TryParseUri(acsManagementEndpointElement.Value);
                                        namespaceDescriptionInstance.AcsManagementEndpoint = acsManagementEndpointInstance;
                                    }
                                    
                                    XElement serviceBusEndpointElement = namespaceDescriptionElement2.Element(XName.Get("ServiceBusEndpoint", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (serviceBusEndpointElement != null)
                                    {
                                        Uri serviceBusEndpointInstance = TypeConversion.TryParseUri(serviceBusEndpointElement.Value);
                                        namespaceDescriptionInstance.ServiceBusEndpoint = serviceBusEndpointInstance;
                                    }
                                    
                                    XElement subscriptionIdElement = namespaceDescriptionElement2.Element(XName.Get("SubscriptionId", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (subscriptionIdElement != null)
                                    {
                                        string subscriptionIdInstance = subscriptionIdElement.Value;
                                        namespaceDescriptionInstance.SubscriptionId = subscriptionIdInstance;
                                    }
                                    
                                    XElement enabledElement = namespaceDescriptionElement2.Element(XName.Get("Enabled", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (enabledElement != null)
                                    {
                                        bool enabledInstance = bool.Parse(enabledElement.Value);
                                        namespaceDescriptionInstance.Enabled = enabledInstance;
                                    }
                                    
                                    XElement createACSNamespaceElement = namespaceDescriptionElement2.Element(XName.Get("CreateACSNamespace", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createACSNamespaceElement != null)
                                    {
                                        bool createACSNamespaceInstance = bool.Parse(createACSNamespaceElement.Value);
                                        namespaceDescriptionInstance.CreateACSNamespace = createACSNamespaceInstance;
                                    }
                                    
                                    XElement namespaceTypeElement = namespaceDescriptionElement2.Element(XName.Get("NamespaceType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (namespaceTypeElement != null)
                                    {
                                        NamespaceType namespaceTypeInstance = ((NamespaceType)Enum.Parse(typeof(NamespaceType), namespaceTypeElement.Value, true));
                                        namespaceDescriptionInstance.NamespaceType = namespaceTypeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The create namespace authorization rule operation creates an
        /// authorization rule for a namespace
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='rule'>
        /// Required. The shared access authorization rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a particular authorization rule.
        /// </returns>
        public async Task<ServiceBusAuthorizationRuleResponse> CreateAuthorizationRuleAsync(string namespaceName, ServiceBusSharedAccessAuthorizationRule rule, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            if (rule == null)
            {
                throw new ArgumentNullException("rule");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("rule", rule);
                TracingAdapter.Enter(invocationId, this, "CreateAuthorizationRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/AuthorizationRules";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("type", "entry");
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement entryElement = new XElement(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                requestDoc.Add(entryElement);
                
                XElement contentElement = new XElement(XName.Get("content", "http://www.w3.org/2005/Atom"));
                entryElement.Add(contentElement);
                
                XAttribute typeAttribute = new XAttribute(XName.Get("type", ""), "");
                typeAttribute.Value = "application/atom+xml";
                contentElement.Add(typeAttribute);
                
                XElement sharedAccessAuthorizationRuleElement = new XElement(XName.Get("SharedAccessAuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                contentElement.Add(sharedAccessAuthorizationRuleElement);
                
                if (rule.ClaimType != null)
                {
                    XElement claimTypeElement = new XElement(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    claimTypeElement.Value = rule.ClaimType;
                    sharedAccessAuthorizationRuleElement.Add(claimTypeElement);
                }
                
                if (rule.ClaimValue != null)
                {
                    XElement claimValueElement = new XElement(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    claimValueElement.Value = rule.ClaimValue;
                    sharedAccessAuthorizationRuleElement.Add(claimValueElement);
                }
                
                if (rule.Rights != null)
                {
                    if (rule.Rights is ILazyCollection == false || ((ILazyCollection)rule.Rights).IsInitialized)
                    {
                        XElement rightsSequenceElement = new XElement(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                        foreach (AccessRight rightsItem in rule.Rights)
                        {
                            XElement rightsItemElement = new XElement(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                            rightsItemElement.Value = rightsItem.ToString();
                            rightsSequenceElement.Add(rightsItemElement);
                        }
                        sharedAccessAuthorizationRuleElement.Add(rightsSequenceElement);
                    }
                }
                
                XElement createdTimeElement = new XElement(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                createdTimeElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", rule.CreatedTime.ToUniversalTime());
                sharedAccessAuthorizationRuleElement.Add(createdTimeElement);
                
                XElement modifiedTimeElement = new XElement(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                modifiedTimeElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", rule.ModifiedTime.ToUniversalTime());
                sharedAccessAuthorizationRuleElement.Add(modifiedTimeElement);
                
                XElement revisionElement = new XElement(XName.Get("Revision", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                revisionElement.Value = rule.Revision.ToString();
                sharedAccessAuthorizationRuleElement.Add(revisionElement);
                
                if (rule.KeyName != null)
                {
                    XElement keyNameElement = new XElement(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    keyNameElement.Value = rule.KeyName;
                    sharedAccessAuthorizationRuleElement.Add(keyNameElement);
                }
                
                if (rule.PrimaryKey != null)
                {
                    XElement primaryKeyElement = new XElement(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    primaryKeyElement.Value = rule.PrimaryKey;
                    sharedAccessAuthorizationRuleElement.Add(primaryKeyElement);
                }
                
                if (rule.SecondaryKey != null)
                {
                    XElement secondaryKeyElement = new XElement(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    secondaryKeyElement.Value = rule.SecondaryKey;
                    sharedAccessAuthorizationRuleElement.Add(secondaryKeyElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/atom+xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusAuthorizationRuleResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusAuthorizationRuleResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement2 = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement2 != null)
                        {
                            XElement contentElement2 = entryElement2.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement2 != null)
                            {
                                XElement sharedAccessAuthorizationRuleElement2 = contentElement2.Element(XName.Get("SharedAccessAuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (sharedAccessAuthorizationRuleElement2 != null)
                                {
                                    ServiceBusSharedAccessAuthorizationRule sharedAccessAuthorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                    result.AuthorizationRule = sharedAccessAuthorizationRuleInstance;
                                    
                                    XElement claimTypeElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (claimTypeElement2 != null)
                                    {
                                        string claimTypeInstance = claimTypeElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.ClaimType = claimTypeInstance;
                                    }
                                    
                                    XElement claimValueElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (claimValueElement2 != null)
                                    {
                                        string claimValueInstance = claimValueElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.ClaimValue = claimValueInstance;
                                    }
                                    
                                    XElement rightsSequenceElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (rightsSequenceElement2 != null)
                                    {
                                        foreach (XElement rightsElement in rightsSequenceElement2.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                        {
                                            sharedAccessAuthorizationRuleInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                        }
                                    }
                                    
                                    XElement createdTimeElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createdTimeElement2 != null)
                                    {
                                        DateTime createdTimeInstance = DateTime.Parse(createdTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        sharedAccessAuthorizationRuleInstance.CreatedTime = createdTimeInstance;
                                    }
                                    
                                    XElement modifiedTimeElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (modifiedTimeElement2 != null)
                                    {
                                        DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        sharedAccessAuthorizationRuleInstance.ModifiedTime = modifiedTimeInstance;
                                    }
                                    
                                    XElement keyNameElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (keyNameElement2 != null)
                                    {
                                        string keyNameInstance = keyNameElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.KeyName = keyNameInstance;
                                    }
                                    
                                    XElement primaryKeyElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (primaryKeyElement2 != null)
                                    {
                                        string primaryKeyInstance = primaryKeyElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.PrimaryKey = primaryKeyInstance;
                                    }
                                    
                                    XElement secondaryKeyElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (secondaryKeyElement2 != null)
                                    {
                                        string secondaryKeyInstance = secondaryKeyElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.SecondaryKey = secondaryKeyInstance;
                                    }
                                    
                                    XElement revisionElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("Revision", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (revisionElement2 != null)
                                    {
                                        int revisionInstance = int.Parse(revisionElement2.Value, CultureInfo.InvariantCulture);
                                        sharedAccessAuthorizationRuleInstance.Revision = revisionInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a new service namespace. Once created, this namespace's
        /// resource manifest is immutable. This operation is idempotent.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='namespaceEntity'>
        /// Required. The service bus namespace.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a request for a particular namespace.
        /// </returns>
        public async Task<ServiceBusNamespaceResponse> CreateNamespaceAsync(string namespaceName, ServiceBusNamespaceCreateParameters namespaceEntity, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            if (namespaceEntity == null)
            {
                throw new ArgumentNullException("namespaceEntity");
            }
            if (namespaceEntity.Region == null)
            {
                throw new ArgumentNullException("namespaceEntity.Region");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("namespaceEntity", namespaceEntity);
                TracingAdapter.Enter(invocationId, this, "CreateNamespaceAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("type", "entry");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement entryElement = new XElement(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                requestDoc.Add(entryElement);
                
                XElement contentElement = new XElement(XName.Get("content", "http://www.w3.org/2005/Atom"));
                entryElement.Add(contentElement);
                
                XAttribute typeAttribute = new XAttribute(XName.Get("type", ""), "");
                typeAttribute.Value = "application/atom+xml;type=entry;charset=utf-8";
                contentElement.Add(typeAttribute);
                
                XElement namespaceDescriptionElement = new XElement(XName.Get("NamespaceDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                contentElement.Add(namespaceDescriptionElement);
                
                if (namespaceEntity.Region != null)
                {
                    XElement regionElement = new XElement(XName.Get("Region", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    regionElement.Value = namespaceEntity.Region;
                    namespaceDescriptionElement.Add(regionElement);
                }
                
                XElement createACSNamespaceElement = new XElement(XName.Get("CreateACSNamespace", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                createACSNamespaceElement.Value = namespaceEntity.CreateACSNamespace.ToString().ToLower();
                namespaceDescriptionElement.Add(createACSNamespaceElement);
                
                XElement namespaceTypeElement = new XElement(XName.Get("NamespaceType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                namespaceTypeElement.Value = namespaceEntity.NamespaceType.ToString();
                namespaceDescriptionElement.Add(namespaceTypeElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/atom+xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusNamespaceResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusNamespaceResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement2 = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement2 != null)
                        {
                            XElement contentElement2 = entryElement2.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement2 != null)
                            {
                                XElement namespaceDescriptionElement2 = contentElement2.Element(XName.Get("NamespaceDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (namespaceDescriptionElement2 != null)
                                {
                                    ServiceBusNamespace namespaceDescriptionInstance = new ServiceBusNamespace();
                                    result.Namespace = namespaceDescriptionInstance;
                                    
                                    XElement nameElement = namespaceDescriptionElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        namespaceDescriptionInstance.Name = nameInstance;
                                    }
                                    
                                    XElement regionElement2 = namespaceDescriptionElement2.Element(XName.Get("Region", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (regionElement2 != null)
                                    {
                                        string regionInstance = regionElement2.Value;
                                        namespaceDescriptionInstance.Region = regionInstance;
                                    }
                                    
                                    XElement statusElement = namespaceDescriptionElement2.Element(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (statusElement != null)
                                    {
                                        string statusInstance = statusElement.Value;
                                        namespaceDescriptionInstance.Status = statusInstance;
                                    }
                                    
                                    XElement createdAtElement = namespaceDescriptionElement2.Element(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createdAtElement != null)
                                    {
                                        DateTime createdAtInstance = DateTime.Parse(createdAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        namespaceDescriptionInstance.CreatedAt = createdAtInstance;
                                    }
                                    
                                    XElement acsManagementEndpointElement = namespaceDescriptionElement2.Element(XName.Get("AcsManagementEndpoint", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (acsManagementEndpointElement != null)
                                    {
                                        Uri acsManagementEndpointInstance = TypeConversion.TryParseUri(acsManagementEndpointElement.Value);
                                        namespaceDescriptionInstance.AcsManagementEndpoint = acsManagementEndpointInstance;
                                    }
                                    
                                    XElement serviceBusEndpointElement = namespaceDescriptionElement2.Element(XName.Get("ServiceBusEndpoint", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (serviceBusEndpointElement != null)
                                    {
                                        Uri serviceBusEndpointInstance = TypeConversion.TryParseUri(serviceBusEndpointElement.Value);
                                        namespaceDescriptionInstance.ServiceBusEndpoint = serviceBusEndpointInstance;
                                    }
                                    
                                    XElement subscriptionIdElement = namespaceDescriptionElement2.Element(XName.Get("SubscriptionId", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (subscriptionIdElement != null)
                                    {
                                        string subscriptionIdInstance = subscriptionIdElement.Value;
                                        namespaceDescriptionInstance.SubscriptionId = subscriptionIdInstance;
                                    }
                                    
                                    XElement enabledElement = namespaceDescriptionElement2.Element(XName.Get("Enabled", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (enabledElement != null)
                                    {
                                        bool enabledInstance = bool.Parse(enabledElement.Value);
                                        namespaceDescriptionInstance.Enabled = enabledInstance;
                                    }
                                    
                                    XElement createACSNamespaceElement2 = namespaceDescriptionElement2.Element(XName.Get("CreateACSNamespace", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createACSNamespaceElement2 != null)
                                    {
                                        bool createACSNamespaceInstance = bool.Parse(createACSNamespaceElement2.Value);
                                        namespaceDescriptionInstance.CreateACSNamespace = createACSNamespaceInstance;
                                    }
                                    
                                    XElement namespaceTypeElement2 = namespaceDescriptionElement2.Element(XName.Get("NamespaceType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (namespaceTypeElement2 != null)
                                    {
                                        NamespaceType namespaceTypeInstance = ((NamespaceType)Enum.Parse(typeof(NamespaceType), namespaceTypeElement2.Value, true));
                                        namespaceDescriptionInstance.NamespaceType = namespaceTypeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes an existing namespace. This operation also removes all
        /// associated entities including queues, topics, relay points, and
        /// messages stored under the namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj856296.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string namespaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The delete namespace authorization rule operation deletes an
        /// authorization rule for a namespace
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The rule name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAuthorizationRuleAsync(string namespaceName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("ruleName", ruleName);
                TracingAdapter.Enter(invocationId, this, "DeleteAuthorizationRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/AuthorizationRules/";
            url = url + Uri.EscapeDataString(ruleName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the description for the specified namespace.  (see
        /// http://msdn.microsoft.com/library/azure/dn140232.aspx for more
        /// information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a request for a particular namespace.
        /// </returns>
        public async Task<ServiceBusNamespaceResponse> GetAsync(string namespaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusNamespaceResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusNamespaceResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement != null)
                        {
                            XElement contentElement = entryElement.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement != null)
                            {
                                XElement namespaceDescriptionElement = contentElement.Element(XName.Get("NamespaceDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (namespaceDescriptionElement != null)
                                {
                                    ServiceBusNamespace namespaceDescriptionInstance = new ServiceBusNamespace();
                                    result.Namespace = namespaceDescriptionInstance;
                                    
                                    XElement nameElement = namespaceDescriptionElement.Element(XName.Get("Name", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        namespaceDescriptionInstance.Name = nameInstance;
                                    }
                                    
                                    XElement regionElement = namespaceDescriptionElement.Element(XName.Get("Region", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (regionElement != null)
                                    {
                                        string regionInstance = regionElement.Value;
                                        namespaceDescriptionInstance.Region = regionInstance;
                                    }
                                    
                                    XElement statusElement = namespaceDescriptionElement.Element(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (statusElement != null)
                                    {
                                        string statusInstance = statusElement.Value;
                                        namespaceDescriptionInstance.Status = statusInstance;
                                    }
                                    
                                    XElement createdAtElement = namespaceDescriptionElement.Element(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createdAtElement != null)
                                    {
                                        DateTime createdAtInstance = DateTime.Parse(createdAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        namespaceDescriptionInstance.CreatedAt = createdAtInstance;
                                    }
                                    
                                    XElement acsManagementEndpointElement = namespaceDescriptionElement.Element(XName.Get("AcsManagementEndpoint", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (acsManagementEndpointElement != null)
                                    {
                                        Uri acsManagementEndpointInstance = TypeConversion.TryParseUri(acsManagementEndpointElement.Value);
                                        namespaceDescriptionInstance.AcsManagementEndpoint = acsManagementEndpointInstance;
                                    }
                                    
                                    XElement serviceBusEndpointElement = namespaceDescriptionElement.Element(XName.Get("ServiceBusEndpoint", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (serviceBusEndpointElement != null)
                                    {
                                        Uri serviceBusEndpointInstance = TypeConversion.TryParseUri(serviceBusEndpointElement.Value);
                                        namespaceDescriptionInstance.ServiceBusEndpoint = serviceBusEndpointInstance;
                                    }
                                    
                                    XElement subscriptionIdElement = namespaceDescriptionElement.Element(XName.Get("SubscriptionId", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (subscriptionIdElement != null)
                                    {
                                        string subscriptionIdInstance = subscriptionIdElement.Value;
                                        namespaceDescriptionInstance.SubscriptionId = subscriptionIdInstance;
                                    }
                                    
                                    XElement enabledElement = namespaceDescriptionElement.Element(XName.Get("Enabled", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (enabledElement != null)
                                    {
                                        bool enabledInstance = bool.Parse(enabledElement.Value);
                                        namespaceDescriptionInstance.Enabled = enabledInstance;
                                    }
                                    
                                    XElement createACSNamespaceElement = namespaceDescriptionElement.Element(XName.Get("CreateACSNamespace", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createACSNamespaceElement != null)
                                    {
                                        bool createACSNamespaceInstance = bool.Parse(createACSNamespaceElement.Value);
                                        namespaceDescriptionInstance.CreateACSNamespace = createACSNamespaceInstance;
                                    }
                                    
                                    XElement namespaceTypeElement = namespaceDescriptionElement.Element(XName.Get("NamespaceType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (namespaceTypeElement != null)
                                    {
                                        NamespaceType namespaceTypeInstance = ((NamespaceType)Enum.Parse(typeof(NamespaceType), namespaceTypeElement.Value, true));
                                        namespaceDescriptionInstance.NamespaceType = namespaceTypeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The get authorization rule operation gets an authorization rule for
        /// a namespace by name.
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace to get the authorization rule for.
        /// </param>
        /// <param name='entityName'>
        /// Required. The entity name to get the authorization rule for.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a particular authorization rule.
        /// </returns>
        public async Task<ServiceBusAuthorizationRuleResponse> GetAuthorizationRuleAsync(string namespaceName, string entityName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            if (entityName == null)
            {
                throw new ArgumentNullException("entityName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("entityName", entityName);
                TracingAdapter.Enter(invocationId, this, "GetAuthorizationRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/AuthorizationRules/";
            url = url + Uri.EscapeDataString(entityName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusAuthorizationRuleResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusAuthorizationRuleResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement != null)
                        {
                            XElement contentElement = entryElement.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement != null)
                            {
                                XElement sharedAccessAuthorizationRuleElement = contentElement.Element(XName.Get("SharedAccessAuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (sharedAccessAuthorizationRuleElement != null)
                                {
                                    ServiceBusSharedAccessAuthorizationRule sharedAccessAuthorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                    result.AuthorizationRule = sharedAccessAuthorizationRuleInstance;
                                    
                                    XElement claimTypeElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (claimTypeElement != null)
                                    {
                                        string claimTypeInstance = claimTypeElement.Value;
                                        sharedAccessAuthorizationRuleInstance.ClaimType = claimTypeInstance;
                                    }
                                    
                                    XElement claimValueElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (claimValueElement != null)
                                    {
                                        string claimValueInstance = claimValueElement.Value;
                                        sharedAccessAuthorizationRuleInstance.ClaimValue = claimValueInstance;
                                    }
                                    
                                    XElement rightsSequenceElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (rightsSequenceElement != null)
                                    {
                                        foreach (XElement rightsElement in rightsSequenceElement.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                        {
                                            sharedAccessAuthorizationRuleInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                        }
                                    }
                                    
                                    XElement createdTimeElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createdTimeElement != null)
                                    {
                                        DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        sharedAccessAuthorizationRuleInstance.CreatedTime = createdTimeInstance;
                                    }
                                    
                                    XElement modifiedTimeElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (modifiedTimeElement != null)
                                    {
                                        DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        sharedAccessAuthorizationRuleInstance.ModifiedTime = modifiedTimeInstance;
                                    }
                                    
                                    XElement keyNameElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (keyNameElement != null)
                                    {
                                        string keyNameInstance = keyNameElement.Value;
                                        sharedAccessAuthorizationRuleInstance.KeyName = keyNameInstance;
                                    }
                                    
                                    XElement primaryKeyElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (primaryKeyElement != null)
                                    {
                                        string primaryKeyInstance = primaryKeyElement.Value;
                                        sharedAccessAuthorizationRuleInstance.PrimaryKey = primaryKeyInstance;
                                    }
                                    
                                    XElement secondaryKeyElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (secondaryKeyElement != null)
                                    {
                                        string secondaryKeyInstance = secondaryKeyElement.Value;
                                        sharedAccessAuthorizationRuleInstance.SecondaryKey = secondaryKeyInstance;
                                    }
                                    
                                    XElement revisionElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("Revision", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (revisionElement != null)
                                    {
                                        int revisionInstance = int.Parse(revisionElement.Value, CultureInfo.InvariantCulture);
                                        sharedAccessAuthorizationRuleInstance.Revision = revisionInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The namespace description is an XML AtomPub document that defines
        /// the desired semantics for a service namespace. The namespace
        /// description contains the following properties.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a list of namespaces.
        /// </returns>
        public async Task<ServiceBusNamespaceDescriptionResponse> GetNamespaceDescriptionAsync(string namespaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                TracingAdapter.Enter(invocationId, this, "GetNamespaceDescriptionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/ConnectionDetails";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusNamespaceDescriptionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusNamespaceDescriptionResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement feedElement = responseDoc.Element(XName.Get("feed", "http://www.w3.org/2005/Atom"));
                        if (feedElement != null)
                        {
                            if (feedElement != null)
                            {
                                foreach (XElement entriesElement in feedElement.Elements(XName.Get("entry", "http://www.w3.org/2005/Atom")))
                                {
                                    NamespaceDescription entryInstance = new NamespaceDescription();
                                    result.NamespaceDescriptions.Add(entryInstance);
                                    
                                    XElement contentElement = entriesElement.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                                    if (contentElement != null)
                                    {
                                        XElement connectionDetailElement = contentElement.Element(XName.Get("ConnectionDetail", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                        if (connectionDetailElement != null)
                                        {
                                            XElement keyNameElement = connectionDetailElement.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (keyNameElement != null)
                                            {
                                                string keyNameInstance = keyNameElement.Value;
                                                entryInstance.KeyName = keyNameInstance;
                                            }
                                            
                                            XElement connectionStringElement = connectionDetailElement.Element(XName.Get("ConnectionString", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (connectionStringElement != null)
                                            {
                                                string connectionStringInstance = connectionStringElement.Value;
                                                entryInstance.ConnectionString = connectionStringInstance;
                                            }
                                            
                                            XElement authorizationTypeElement = connectionDetailElement.Element(XName.Get("AuthorizationType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (authorizationTypeElement != null)
                                            {
                                                string authorizationTypeInstance = authorizationTypeElement.Value;
                                                entryInstance.AuthorizationType = authorizationTypeInstance;
                                            }
                                            
                                            XElement rightsSequenceElement = connectionDetailElement.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (rightsSequenceElement != null)
                                            {
                                                foreach (XElement rightsElement in rightsSequenceElement.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                                {
                                                    entryInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                                }
                                            }
                                            
                                            XElement secondaryConnectionStringElement = connectionDetailElement.Element(XName.Get("SecondaryConnectionString", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (secondaryConnectionStringElement != null)
                                            {
                                                string secondaryConnectionStringInstance = secondaryConnectionStringElement.Value;
                                                entryInstance.SecondaryConnectionString = secondaryConnectionStringInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists the available namespaces.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/hh780759.aspx for
        /// more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to the request for a listing of namespaces.
        /// </returns>
        public async Task<ServiceBusNamespacesResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusNamespacesResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusNamespacesResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement feedElement = responseDoc.Element(XName.Get("feed", "http://www.w3.org/2005/Atom"));
                        if (feedElement != null)
                        {
                            if (feedElement != null)
                            {
                                foreach (XElement entriesElement in feedElement.Elements(XName.Get("entry", "http://www.w3.org/2005/Atom")))
                                {
                                    ServiceBusNamespace entryInstance = new ServiceBusNamespace();
                                    result.Namespaces.Add(entryInstance);
                                    
                                    XElement contentElement = entriesElement.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                                    if (contentElement != null)
                                    {
                                        XElement namespaceDescriptionElement = contentElement.Element(XName.Get("NamespaceDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                        if (namespaceDescriptionElement != null)
                                        {
                                            XElement nameElement = namespaceDescriptionElement.Element(XName.Get("Name", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (nameElement != null)
                                            {
                                                string nameInstance = nameElement.Value;
                                                entryInstance.Name = nameInstance;
                                            }
                                            
                                            XElement regionElement = namespaceDescriptionElement.Element(XName.Get("Region", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (regionElement != null)
                                            {
                                                string regionInstance = regionElement.Value;
                                                entryInstance.Region = regionInstance;
                                            }
                                            
                                            XElement statusElement = namespaceDescriptionElement.Element(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (statusElement != null)
                                            {
                                                string statusInstance = statusElement.Value;
                                                entryInstance.Status = statusInstance;
                                            }
                                            
                                            XElement createdAtElement = namespaceDescriptionElement.Element(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (createdAtElement != null)
                                            {
                                                DateTime createdAtInstance = DateTime.Parse(createdAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                entryInstance.CreatedAt = createdAtInstance;
                                            }
                                            
                                            XElement acsManagementEndpointElement = namespaceDescriptionElement.Element(XName.Get("AcsManagementEndpoint", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (acsManagementEndpointElement != null)
                                            {
                                                Uri acsManagementEndpointInstance = TypeConversion.TryParseUri(acsManagementEndpointElement.Value);
                                                entryInstance.AcsManagementEndpoint = acsManagementEndpointInstance;
                                            }
                                            
                                            XElement serviceBusEndpointElement = namespaceDescriptionElement.Element(XName.Get("ServiceBusEndpoint", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (serviceBusEndpointElement != null)
                                            {
                                                Uri serviceBusEndpointInstance = TypeConversion.TryParseUri(serviceBusEndpointElement.Value);
                                                entryInstance.ServiceBusEndpoint = serviceBusEndpointInstance;
                                            }
                                            
                                            XElement subscriptionIdElement = namespaceDescriptionElement.Element(XName.Get("SubscriptionId", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (subscriptionIdElement != null)
                                            {
                                                string subscriptionIdInstance = subscriptionIdElement.Value;
                                                entryInstance.SubscriptionId = subscriptionIdInstance;
                                            }
                                            
                                            XElement enabledElement = namespaceDescriptionElement.Element(XName.Get("Enabled", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (enabledElement != null)
                                            {
                                                bool enabledInstance = bool.Parse(enabledElement.Value);
                                                entryInstance.Enabled = enabledInstance;
                                            }
                                            
                                            XElement createACSNamespaceElement = namespaceDescriptionElement.Element(XName.Get("CreateACSNamespace", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (createACSNamespaceElement != null)
                                            {
                                                bool createACSNamespaceInstance = bool.Parse(createACSNamespaceElement.Value);
                                                entryInstance.CreateACSNamespace = createACSNamespaceInstance;
                                            }
                                            
                                            XElement namespaceTypeElement = namespaceDescriptionElement.Element(XName.Get("NamespaceType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (namespaceTypeElement != null)
                                            {
                                                NamespaceType namespaceTypeInstance = ((NamespaceType)Enum.Parse(typeof(NamespaceType), namespaceTypeElement.Value, true));
                                                entryInstance.NamespaceType = namespaceTypeInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The get authorization rules operation gets the authorization rules
        /// for a namespace.
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace to get the authorization rule for.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a list of authorization rules.
        /// </returns>
        public async Task<ServiceBusAuthorizationRulesResponse> ListAuthorizationRulesAsync(string namespaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                TracingAdapter.Enter(invocationId, this, "ListAuthorizationRulesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/AuthorizationRules";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusAuthorizationRulesResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusAuthorizationRulesResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement feedElement = responseDoc.Element(XName.Get("feed", "http://www.w3.org/2005/Atom"));
                        if (feedElement != null)
                        {
                            if (feedElement != null)
                            {
                                foreach (XElement entriesElement in feedElement.Elements(XName.Get("entry", "http://www.w3.org/2005/Atom")))
                                {
                                    ServiceBusSharedAccessAuthorizationRule entryInstance = new ServiceBusSharedAccessAuthorizationRule();
                                    result.AuthorizationRules.Add(entryInstance);
                                    
                                    XElement contentElement = entriesElement.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                                    if (contentElement != null)
                                    {
                                        XElement sharedAccessAuthorizationRuleElement = contentElement.Element(XName.Get("SharedAccessAuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                        if (sharedAccessAuthorizationRuleElement != null)
                                        {
                                            XElement claimTypeElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (claimTypeElement != null)
                                            {
                                                string claimTypeInstance = claimTypeElement.Value;
                                                entryInstance.ClaimType = claimTypeInstance;
                                            }
                                            
                                            XElement claimValueElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (claimValueElement != null)
                                            {
                                                string claimValueInstance = claimValueElement.Value;
                                                entryInstance.ClaimValue = claimValueInstance;
                                            }
                                            
                                            XElement rightsSequenceElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (rightsSequenceElement != null)
                                            {
                                                foreach (XElement rightsElement in rightsSequenceElement.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                                {
                                                    entryInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                                }
                                            }
                                            
                                            XElement createdTimeElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (createdTimeElement != null)
                                            {
                                                DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                entryInstance.CreatedTime = createdTimeInstance;
                                            }
                                            
                                            XElement modifiedTimeElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (modifiedTimeElement != null)
                                            {
                                                DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                entryInstance.ModifiedTime = modifiedTimeInstance;
                                            }
                                            
                                            XElement keyNameElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (keyNameElement != null)
                                            {
                                                string keyNameInstance = keyNameElement.Value;
                                                entryInstance.KeyName = keyNameInstance;
                                            }
                                            
                                            XElement primaryKeyElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (primaryKeyElement != null)
                                            {
                                                string primaryKeyInstance = primaryKeyElement.Value;
                                                entryInstance.PrimaryKey = primaryKeyInstance;
                                            }
                                            
                                            XElement secondaryKeyElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (secondaryKeyElement != null)
                                            {
                                                string secondaryKeyInstance = secondaryKeyElement.Value;
                                                entryInstance.SecondaryKey = secondaryKeyInstance;
                                            }
                                            
                                            XElement revisionElement = sharedAccessAuthorizationRuleElement.Element(XName.Get("Revision", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (revisionElement != null)
                                            {
                                                int revisionInstance = int.Parse(revisionElement.Value, CultureInfo.InvariantCulture);
                                                entryInstance.Revision = revisionInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The update authorization rule operation updates an authorization
        /// rule for a namespace.
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='rule'>
        /// Optional. Updated access authorization rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a particular authorization rule.
        /// </returns>
        public async Task<ServiceBusAuthorizationRuleResponse> UpdateAuthorizationRuleAsync(string namespaceName, ServiceBusSharedAccessAuthorizationRule rule, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("rule", rule);
                TracingAdapter.Enter(invocationId, this, "UpdateAuthorizationRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/AuthorizationRules/";
            if (rule != null && rule.KeyName != null)
            {
                url = url + Uri.EscapeDataString(rule.KeyName);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/atom+xml");
                httpRequest.Headers.Add("if-match", "*");
                httpRequest.Headers.Add("type", "entry");
                httpRequest.Headers.Add("x-ms-version", "2012-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (rule != null)
                {
                    XElement entryElement = new XElement(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                    requestDoc.Add(entryElement);
                    
                    XElement contentElement = new XElement(XName.Get("content", "http://www.w3.org/2005/Atom"));
                    entryElement.Add(contentElement);
                    
                    XAttribute typeAttribute = new XAttribute(XName.Get("type", ""), "");
                    typeAttribute.Value = "application/atom+xml";
                    contentElement.Add(typeAttribute);
                    
                    XElement sharedAccessAuthorizationRuleElement = new XElement(XName.Get("SharedAccessAuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    contentElement.Add(sharedAccessAuthorizationRuleElement);
                    
                    if (rule.ClaimType != null)
                    {
                        XElement claimTypeElement = new XElement(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                        claimTypeElement.Value = rule.ClaimType;
                        sharedAccessAuthorizationRuleElement.Add(claimTypeElement);
                    }
                    
                    if (rule.ClaimValue != null)
                    {
                        XElement claimValueElement = new XElement(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                        claimValueElement.Value = rule.ClaimValue;
                        sharedAccessAuthorizationRuleElement.Add(claimValueElement);
                    }
                    
                    if (rule.Rights != null)
                    {
                        if (rule.Rights is ILazyCollection == false || ((ILazyCollection)rule.Rights).IsInitialized)
                        {
                            XElement rightsSequenceElement = new XElement(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                            foreach (AccessRight rightsItem in rule.Rights)
                            {
                                XElement rightsItemElement = new XElement(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                rightsItemElement.Value = rightsItem.ToString();
                                rightsSequenceElement.Add(rightsItemElement);
                            }
                            sharedAccessAuthorizationRuleElement.Add(rightsSequenceElement);
                        }
                    }
                    
                    XElement createdTimeElement = new XElement(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    createdTimeElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", rule.CreatedTime.ToUniversalTime());
                    sharedAccessAuthorizationRuleElement.Add(createdTimeElement);
                    
                    XElement modifiedTimeElement = new XElement(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    modifiedTimeElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", rule.ModifiedTime.ToUniversalTime());
                    sharedAccessAuthorizationRuleElement.Add(modifiedTimeElement);
                    
                    XElement revisionElement = new XElement(XName.Get("Revision", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    revisionElement.Value = rule.Revision.ToString();
                    sharedAccessAuthorizationRuleElement.Add(revisionElement);
                    
                    if (rule.KeyName != null)
                    {
                        XElement keyNameElement = new XElement(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                        keyNameElement.Value = rule.KeyName;
                        sharedAccessAuthorizationRuleElement.Add(keyNameElement);
                    }
                    
                    if (rule.PrimaryKey != null)
                    {
                        XElement primaryKeyElement = new XElement(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                        primaryKeyElement.Value = rule.PrimaryKey;
                        sharedAccessAuthorizationRuleElement.Add(primaryKeyElement);
                    }
                    
                    if (rule.SecondaryKey != null)
                    {
                        XElement secondaryKeyElement = new XElement(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                        secondaryKeyElement.Value = rule.SecondaryKey;
                        sharedAccessAuthorizationRuleElement.Add(secondaryKeyElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/atom+xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusAuthorizationRuleResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusAuthorizationRuleResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement2 = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement2 != null)
                        {
                            XElement contentElement2 = entryElement2.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement2 != null)
                            {
                                XElement sharedAccessAuthorizationRuleElement2 = contentElement2.Element(XName.Get("SharedAccessAuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (sharedAccessAuthorizationRuleElement2 != null)
                                {
                                    ServiceBusSharedAccessAuthorizationRule sharedAccessAuthorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                    result.AuthorizationRule = sharedAccessAuthorizationRuleInstance;
                                    
                                    XElement claimTypeElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (claimTypeElement2 != null)
                                    {
                                        string claimTypeInstance = claimTypeElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.ClaimType = claimTypeInstance;
                                    }
                                    
                                    XElement claimValueElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (claimValueElement2 != null)
                                    {
                                        string claimValueInstance = claimValueElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.ClaimValue = claimValueInstance;
                                    }
                                    
                                    XElement rightsSequenceElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (rightsSequenceElement2 != null)
                                    {
                                        foreach (XElement rightsElement in rightsSequenceElement2.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                        {
                                            sharedAccessAuthorizationRuleInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                        }
                                    }
                                    
                                    XElement createdTimeElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createdTimeElement2 != null)
                                    {
                                        DateTime createdTimeInstance = DateTime.Parse(createdTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        sharedAccessAuthorizationRuleInstance.CreatedTime = createdTimeInstance;
                                    }
                                    
                                    XElement modifiedTimeElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (modifiedTimeElement2 != null)
                                    {
                                        DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        sharedAccessAuthorizationRuleInstance.ModifiedTime = modifiedTimeInstance;
                                    }
                                    
                                    XElement keyNameElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (keyNameElement2 != null)
                                    {
                                        string keyNameInstance = keyNameElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.KeyName = keyNameInstance;
                                    }
                                    
                                    XElement primaryKeyElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (primaryKeyElement2 != null)
                                    {
                                        string primaryKeyInstance = primaryKeyElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.PrimaryKey = primaryKeyInstance;
                                    }
                                    
                                    XElement secondaryKeyElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (secondaryKeyElement2 != null)
                                    {
                                        string secondaryKeyInstance = secondaryKeyElement2.Value;
                                        sharedAccessAuthorizationRuleInstance.SecondaryKey = secondaryKeyInstance;
                                    }
                                    
                                    XElement revisionElement2 = sharedAccessAuthorizationRuleElement2.Element(XName.Get("Revision", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (revisionElement2 != null)
                                    {
                                        int revisionInstance = int.Parse(revisionElement2.Value, CultureInfo.InvariantCulture);
                                        sharedAccessAuthorizationRuleInstance.Revision = revisionInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
