// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.ServiceBus;
using Microsoft.WindowsAzure.Management.ServiceBus.Models;

namespace Microsoft.WindowsAzure.Management.ServiceBus
{
    /// <summary>
    /// The Service Bus Management API includes operations for managing Service
    /// Bus topics for a namespace.
    /// </summary>
    internal partial class TopicOperations : IServiceOperations<ServiceBusManagementClient>, ITopicOperations
    {
        /// <summary>
        /// Initializes a new instance of the TopicOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TopicOperations(ServiceBusManagementClient client)
        {
            this._client = client;
        }
        
        private ServiceBusManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.ServiceBus.ServiceBusManagementClient.
        /// </summary>
        public ServiceBusManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a new topic. Once created, this topic resource manifest is
        /// immutable. This operation is not idempotent. Repeating the create
        /// call, after a topic with same name has been created successfully,
        /// will result in a 409 Conflict error message.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh780728.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='topic'>
        /// Required. The Service Bus topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a particular topic.
        /// </returns>
        public async Task<ServiceBusTopicResponse> CreateAsync(string namespaceName, ServiceBusTopic topic, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            if (topic == null)
            {
                throw new ArgumentNullException("topic");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("topic", topic);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/topics/";
            if (topic.Name != null)
            {
                url = url + Uri.EscapeDataString(topic.Name);
            }
            url = url + "/";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("type", "entry");
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                httpRequest.Headers.Add("x-process-at", "ServiceBus");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement entryElement = new XElement(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                requestDoc.Add(entryElement);
                
                XElement contentElement = new XElement(XName.Get("content", "http://www.w3.org/2005/Atom"));
                entryElement.Add(contentElement);
                
                XAttribute typeAttribute = new XAttribute(XName.Get("type", ""), "");
                typeAttribute.Value = "application/atom+xml;type=entry;charset=utf-8";
                contentElement.Add(typeAttribute);
                
                XElement topicDescriptionElement = new XElement(XName.Get("TopicDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                contentElement.Add(topicDescriptionElement);
                
                if (topic.DefaultMessageTimeToLive != null)
                {
                    XElement defaultMessageTimeToLiveElement = new XElement(XName.Get("DefaultMessageTimeToLive", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    defaultMessageTimeToLiveElement.Value = topic.DefaultMessageTimeToLive;
                    topicDescriptionElement.Add(defaultMessageTimeToLiveElement);
                }
                
                XElement maxSizeInMegabytesElement = new XElement(XName.Get("MaxSizeInMegabytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                maxSizeInMegabytesElement.Value = topic.MaxSizeInMegabytes.ToString();
                topicDescriptionElement.Add(maxSizeInMegabytesElement);
                
                XElement requiresDuplicateDetectionElement = new XElement(XName.Get("RequiresDuplicateDetection", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                requiresDuplicateDetectionElement.Value = topic.RequiresDuplicateDetection.ToString().ToLower();
                topicDescriptionElement.Add(requiresDuplicateDetectionElement);
                
                if (topic.DuplicateDetectionHistoryTimeWindow != null)
                {
                    XElement duplicateDetectionHistoryTimeWindowElement = new XElement(XName.Get("DuplicateDetectionHistoryTimeWindow", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    duplicateDetectionHistoryTimeWindowElement.Value = topic.DuplicateDetectionHistoryTimeWindow;
                    topicDescriptionElement.Add(duplicateDetectionHistoryTimeWindowElement);
                }
                
                XElement enableBatchedOperationsElement = new XElement(XName.Get("EnableBatchedOperations", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                enableBatchedOperationsElement.Value = topic.EnableBatchedOperations.ToString().ToLower();
                topicDescriptionElement.Add(enableBatchedOperationsElement);
                
                XElement sizeInBytesElement = new XElement(XName.Get("SizeInBytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                sizeInBytesElement.Value = topic.SizeInBytes.ToString();
                topicDescriptionElement.Add(sizeInBytesElement);
                
                XElement filteringMessagesBeforePublishingElement = new XElement(XName.Get("FilteringMessagesBeforePublishing", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                filteringMessagesBeforePublishingElement.Value = topic.FilteringMessagesBeforePublishing.ToString().ToLower();
                topicDescriptionElement.Add(filteringMessagesBeforePublishingElement);
                
                XElement isAnonymousAccessibleElement = new XElement(XName.Get("IsAnonymousAccessible", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                isAnonymousAccessibleElement.Value = topic.IsAnonymousAccessible.ToString().ToLower();
                topicDescriptionElement.Add(isAnonymousAccessibleElement);
                
                if (topic.AuthorizationRules != null)
                {
                    if (topic.AuthorizationRules is ILazyCollection == false || ((ILazyCollection)topic.AuthorizationRules).IsInitialized)
                    {
                        XElement authorizationRulesSequenceElement = new XElement(XName.Get("AuthorizationRules", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                        foreach (ServiceBusSharedAccessAuthorizationRule authorizationRulesItem in topic.AuthorizationRules)
                        {
                            XElement authorizationRuleElement = new XElement(XName.Get("AuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                            authorizationRulesSequenceElement.Add(authorizationRuleElement);
                            
                            XAttribute typeAttribute2 = new XAttribute(XName.Get("type", "http://www.w3.org/2001/XMLSchema-instance"), "");
                            typeAttribute2.Value = "SharedAccessAuthorizationRule";
                            authorizationRuleElement.Add(typeAttribute2);
                            
                            if (authorizationRulesItem.ClaimType != null)
                            {
                                XElement claimTypeElement = new XElement(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                claimTypeElement.Value = authorizationRulesItem.ClaimType;
                                authorizationRuleElement.Add(claimTypeElement);
                            }
                            
                            if (authorizationRulesItem.ClaimValue != null)
                            {
                                XElement claimValueElement = new XElement(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                claimValueElement.Value = authorizationRulesItem.ClaimValue;
                                authorizationRuleElement.Add(claimValueElement);
                            }
                            
                            if (authorizationRulesItem.Rights != null)
                            {
                                if (authorizationRulesItem.Rights is ILazyCollection == false || ((ILazyCollection)authorizationRulesItem.Rights).IsInitialized)
                                {
                                    XElement rightsSequenceElement = new XElement(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    foreach (AccessRight rightsItem in authorizationRulesItem.Rights)
                                    {
                                        XElement rightsItemElement = new XElement(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                        rightsItemElement.Value = rightsItem.ToString();
                                        rightsSequenceElement.Add(rightsItemElement);
                                    }
                                    authorizationRuleElement.Add(rightsSequenceElement);
                                }
                            }
                            
                            XElement createdTimeElement = new XElement(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                            createdTimeElement.Value = authorizationRulesItem.CreatedTime.ToString();
                            authorizationRuleElement.Add(createdTimeElement);
                            
                            if (authorizationRulesItem.KeyName != null)
                            {
                                XElement keyNameElement = new XElement(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                keyNameElement.Value = authorizationRulesItem.KeyName;
                                authorizationRuleElement.Add(keyNameElement);
                            }
                            
                            XElement modifiedTimeElement = new XElement(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                            modifiedTimeElement.Value = authorizationRulesItem.ModifiedTime.ToString();
                            authorizationRuleElement.Add(modifiedTimeElement);
                            
                            if (authorizationRulesItem.PrimaryKey != null)
                            {
                                XElement primaryKeyElement = new XElement(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                primaryKeyElement.Value = authorizationRulesItem.PrimaryKey;
                                authorizationRuleElement.Add(primaryKeyElement);
                            }
                            
                            if (authorizationRulesItem.SecondaryKey != null)
                            {
                                XElement secondaryKeyElement = new XElement(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                secondaryKeyElement.Value = authorizationRulesItem.SecondaryKey;
                                authorizationRuleElement.Add(secondaryKeyElement);
                            }
                        }
                        topicDescriptionElement.Add(authorizationRulesSequenceElement);
                    }
                }
                
                if (topic.Status != null)
                {
                    XElement statusElement = new XElement(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    statusElement.Value = topic.Status;
                    topicDescriptionElement.Add(statusElement);
                }
                
                XElement createdAtElement = new XElement(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                createdAtElement.Value = topic.CreatedAt.ToString();
                topicDescriptionElement.Add(createdAtElement);
                
                XElement updatedAtElement = new XElement(XName.Get("UpdatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                updatedAtElement.Value = topic.UpdatedAt.ToString();
                topicDescriptionElement.Add(updatedAtElement);
                
                XElement accessedAtElement = new XElement(XName.Get("AccessedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                accessedAtElement.Value = topic.AccessedAt.ToString();
                topicDescriptionElement.Add(accessedAtElement);
                
                XElement supportOrderingElement = new XElement(XName.Get("SupportOrdering", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                supportOrderingElement.Value = topic.SupportOrdering.ToString().ToLower();
                topicDescriptionElement.Add(supportOrderingElement);
                
                if (topic.CountDetails != null)
                {
                    XElement countDetailsElement = new XElement(XName.Get("CountDetails", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    topicDescriptionElement.Add(countDetailsElement);
                    
                    XElement activeMessageCountElement = new XElement(XName.Get("ActiveMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    activeMessageCountElement.Value = topic.CountDetails.ActiveMessageCount.ToString();
                    countDetailsElement.Add(activeMessageCountElement);
                    
                    XElement deadLetterMessageCountElement = new XElement(XName.Get("DeadLetterMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    deadLetterMessageCountElement.Value = topic.CountDetails.DeadLetterMessageCount.ToString();
                    countDetailsElement.Add(deadLetterMessageCountElement);
                    
                    XElement scheduledMessageCountElement = new XElement(XName.Get("ScheduledMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    scheduledMessageCountElement.Value = topic.CountDetails.ScheduledMessageCount.ToString();
                    countDetailsElement.Add(scheduledMessageCountElement);
                    
                    XElement transferDeadLetterMessageCountElement = new XElement(XName.Get("TransferDeadLetterMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    transferDeadLetterMessageCountElement.Value = topic.CountDetails.TransferDeadLetterMessageCount.ToString();
                    countDetailsElement.Add(transferDeadLetterMessageCountElement);
                    
                    XElement transferMessageCountElement = new XElement(XName.Get("TransferMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    transferMessageCountElement.Value = topic.CountDetails.TransferMessageCount.ToString();
                    countDetailsElement.Add(transferMessageCountElement);
                }
                
                XElement subscriptionCountElement = new XElement(XName.Get("SubscriptionCount", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                subscriptionCountElement.Value = topic.SubscriptionCount.ToString();
                topicDescriptionElement.Add(subscriptionCountElement);
                
                if (topic.AutoDeleteOnIdle != null)
                {
                    XElement autoDeleteOnIdleElement = new XElement(XName.Get("AutoDeleteOnIdle", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    autoDeleteOnIdleElement.Value = topic.AutoDeleteOnIdle;
                    topicDescriptionElement.Add(autoDeleteOnIdleElement);
                }
                
                if (topic.EntityAvailabilityStatus != null)
                {
                    XElement entityAvailabilityStatusElement = new XElement(XName.Get("EntityAvailabilityStatus", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    entityAvailabilityStatusElement.Value = topic.EntityAvailabilityStatus;
                    topicDescriptionElement.Add(entityAvailabilityStatusElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/atom+xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusTopicResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusTopicResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement2 = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement2 != null)
                        {
                            XElement titleElement = entryElement2.Element(XName.Get("title", "http://www.w3.org/2005/Atom"));
                            if (titleElement != null)
                            {
                            }
                            
                            XElement contentElement2 = entryElement2.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement2 != null)
                            {
                                XElement topicDescriptionElement2 = contentElement2.Element(XName.Get("TopicDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (topicDescriptionElement2 != null)
                                {
                                    ServiceBusTopic topicDescriptionInstance = new ServiceBusTopic();
                                    result.Topic = topicDescriptionInstance;
                                    
                                    XElement defaultMessageTimeToLiveElement2 = topicDescriptionElement2.Element(XName.Get("DefaultMessageTimeToLive", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (defaultMessageTimeToLiveElement2 != null)
                                    {
                                        string defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement2.Value;
                                        topicDescriptionInstance.DefaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
                                    }
                                    
                                    XElement maxSizeInMegabytesElement2 = topicDescriptionElement2.Element(XName.Get("MaxSizeInMegabytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (maxSizeInMegabytesElement2 != null)
                                    {
                                        int maxSizeInMegabytesInstance = int.Parse(maxSizeInMegabytesElement2.Value, CultureInfo.InvariantCulture);
                                        topicDescriptionInstance.MaxSizeInMegabytes = maxSizeInMegabytesInstance;
                                    }
                                    
                                    XElement requiresDuplicateDetectionElement2 = topicDescriptionElement2.Element(XName.Get("RequiresDuplicateDetection", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (requiresDuplicateDetectionElement2 != null)
                                    {
                                        bool requiresDuplicateDetectionInstance = bool.Parse(requiresDuplicateDetectionElement2.Value);
                                        topicDescriptionInstance.RequiresDuplicateDetection = requiresDuplicateDetectionInstance;
                                    }
                                    
                                    XElement duplicateDetectionHistoryTimeWindowElement2 = topicDescriptionElement2.Element(XName.Get("DuplicateDetectionHistoryTimeWindow", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (duplicateDetectionHistoryTimeWindowElement2 != null)
                                    {
                                        string duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement2.Value;
                                        topicDescriptionInstance.DuplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
                                    }
                                    
                                    XElement enableBatchedOperationsElement2 = topicDescriptionElement2.Element(XName.Get("EnableBatchedOperations", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (enableBatchedOperationsElement2 != null)
                                    {
                                        bool enableBatchedOperationsInstance = bool.Parse(enableBatchedOperationsElement2.Value);
                                        topicDescriptionInstance.EnableBatchedOperations = enableBatchedOperationsInstance;
                                    }
                                    
                                    XElement sizeInBytesElement2 = topicDescriptionElement2.Element(XName.Get("SizeInBytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (sizeInBytesElement2 != null)
                                    {
                                        int sizeInBytesInstance = int.Parse(sizeInBytesElement2.Value, CultureInfo.InvariantCulture);
                                        topicDescriptionInstance.SizeInBytes = sizeInBytesInstance;
                                    }
                                    
                                    XElement filteringMessagesBeforePublishingElement2 = topicDescriptionElement2.Element(XName.Get("FilteringMessagesBeforePublishing", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (filteringMessagesBeforePublishingElement2 != null)
                                    {
                                        bool filteringMessagesBeforePublishingInstance = bool.Parse(filteringMessagesBeforePublishingElement2.Value);
                                        topicDescriptionInstance.FilteringMessagesBeforePublishing = filteringMessagesBeforePublishingInstance;
                                    }
                                    
                                    XElement isAnonymousAccessibleElement2 = topicDescriptionElement2.Element(XName.Get("IsAnonymousAccessible", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (isAnonymousAccessibleElement2 != null)
                                    {
                                        bool isAnonymousAccessibleInstance = bool.Parse(isAnonymousAccessibleElement2.Value);
                                        topicDescriptionInstance.IsAnonymousAccessible = isAnonymousAccessibleInstance;
                                    }
                                    
                                    XElement authorizationRulesSequenceElement2 = topicDescriptionElement2.Element(XName.Get("AuthorizationRules", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (authorizationRulesSequenceElement2 != null)
                                    {
                                        foreach (XElement authorizationRulesElement in authorizationRulesSequenceElement2.Elements(XName.Get("AuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                        {
                                            ServiceBusSharedAccessAuthorizationRule authorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                            topicDescriptionInstance.AuthorizationRules.Add(authorizationRuleInstance);
                                            
                                            XElement claimTypeElement2 = authorizationRulesElement.Element(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (claimTypeElement2 != null)
                                            {
                                                string claimTypeInstance = claimTypeElement2.Value;
                                                authorizationRuleInstance.ClaimType = claimTypeInstance;
                                            }
                                            
                                            XElement claimValueElement2 = authorizationRulesElement.Element(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (claimValueElement2 != null)
                                            {
                                                string claimValueInstance = claimValueElement2.Value;
                                                authorizationRuleInstance.ClaimValue = claimValueInstance;
                                            }
                                            
                                            XElement rightsSequenceElement2 = authorizationRulesElement.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (rightsSequenceElement2 != null)
                                            {
                                                foreach (XElement rightsElement in rightsSequenceElement2.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                                {
                                                    authorizationRuleInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                                }
                                            }
                                            
                                            XElement createdTimeElement2 = authorizationRulesElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (createdTimeElement2 != null)
                                            {
                                                DateTime createdTimeInstance = DateTime.Parse(createdTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                authorizationRuleInstance.CreatedTime = createdTimeInstance;
                                            }
                                            
                                            XElement keyNameElement2 = authorizationRulesElement.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (keyNameElement2 != null)
                                            {
                                                string keyNameInstance = keyNameElement2.Value;
                                                authorizationRuleInstance.KeyName = keyNameInstance;
                                            }
                                            
                                            XElement modifiedTimeElement2 = authorizationRulesElement.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (modifiedTimeElement2 != null)
                                            {
                                                DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                authorizationRuleInstance.ModifiedTime = modifiedTimeInstance;
                                            }
                                            
                                            XElement primaryKeyElement2 = authorizationRulesElement.Element(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (primaryKeyElement2 != null)
                                            {
                                                string primaryKeyInstance = primaryKeyElement2.Value;
                                                authorizationRuleInstance.PrimaryKey = primaryKeyInstance;
                                            }
                                            
                                            XElement secondaryKeyElement2 = authorizationRulesElement.Element(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (secondaryKeyElement2 != null)
                                            {
                                                string secondaryKeyInstance = secondaryKeyElement2.Value;
                                                authorizationRuleInstance.SecondaryKey = secondaryKeyInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement statusElement2 = topicDescriptionElement2.Element(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (statusElement2 != null)
                                    {
                                        string statusInstance = statusElement2.Value;
                                        topicDescriptionInstance.Status = statusInstance;
                                    }
                                    
                                    XElement createdAtElement2 = topicDescriptionElement2.Element(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createdAtElement2 != null)
                                    {
                                        DateTime createdAtInstance = DateTime.Parse(createdAtElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        topicDescriptionInstance.CreatedAt = createdAtInstance;
                                    }
                                    
                                    XElement updatedAtElement2 = topicDescriptionElement2.Element(XName.Get("UpdatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (updatedAtElement2 != null)
                                    {
                                        DateTime updatedAtInstance = DateTime.Parse(updatedAtElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        topicDescriptionInstance.UpdatedAt = updatedAtInstance;
                                    }
                                    
                                    XElement accessedAtElement2 = topicDescriptionElement2.Element(XName.Get("AccessedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (accessedAtElement2 != null)
                                    {
                                        DateTime accessedAtInstance = DateTime.Parse(accessedAtElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        topicDescriptionInstance.AccessedAt = accessedAtInstance;
                                    }
                                    
                                    XElement supportOrderingElement2 = topicDescriptionElement2.Element(XName.Get("SupportOrdering", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (supportOrderingElement2 != null)
                                    {
                                        bool supportOrderingInstance = bool.Parse(supportOrderingElement2.Value);
                                        topicDescriptionInstance.SupportOrdering = supportOrderingInstance;
                                    }
                                    
                                    XElement countDetailsElement2 = topicDescriptionElement2.Element(XName.Get("CountDetails", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (countDetailsElement2 != null)
                                    {
                                        CountDetails countDetailsInstance = new CountDetails();
                                        topicDescriptionInstance.CountDetails = countDetailsInstance;
                                    }
                                    
                                    XElement subscriptionCountElement2 = topicDescriptionElement2.Element(XName.Get("SubscriptionCount", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (subscriptionCountElement2 != null)
                                    {
                                        int subscriptionCountInstance = int.Parse(subscriptionCountElement2.Value, CultureInfo.InvariantCulture);
                                        topicDescriptionInstance.SubscriptionCount = subscriptionCountInstance;
                                    }
                                    
                                    XElement autoDeleteOnIdleElement2 = topicDescriptionElement2.Element(XName.Get("AutoDeleteOnIdle", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (autoDeleteOnIdleElement2 != null)
                                    {
                                        string autoDeleteOnIdleInstance = autoDeleteOnIdleElement2.Value;
                                        topicDescriptionInstance.AutoDeleteOnIdle = autoDeleteOnIdleInstance;
                                    }
                                    
                                    XElement entityAvailabilityStatusElement2 = topicDescriptionElement2.Element(XName.Get("EntityAvailabilityStatus", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (entityAvailabilityStatusElement2 != null)
                                    {
                                        string entityAvailabilityStatusInstance = entityAvailabilityStatusElement2.Value;
                                        topicDescriptionInstance.EntityAvailabilityStatus = entityAvailabilityStatusInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes an existing topic. This operation will also remove all
        /// associated state including associated subscriptions.  (see
        /// http://msdn.microsoft.com/en-us/library/hh780721.aspx for more
        /// information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='topicName'>
        /// Required. The topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string namespaceName, string topicName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            if (topicName == null)
            {
                throw new ArgumentNullException("topicName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("topicName", topicName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/topics/";
            url = url + Uri.EscapeDataString(topicName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The topic description is an XML AtomPub document that defines the
        /// desired semantics for a topic. The topic description contains the
        /// following properties. For more information, see the
        /// TopicDescription Properties topic.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh780749.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='topicName'>
        /// Required. The topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a particular topic.
        /// </returns>
        public async Task<ServiceBusTopicResponse> GetAsync(string namespaceName, string topicName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            if (topicName == null)
            {
                throw new ArgumentNullException("topicName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("topicName", topicName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/topics/";
            url = url + Uri.EscapeDataString(topicName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusTopicResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusTopicResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement != null)
                        {
                            XElement titleElement = entryElement.Element(XName.Get("title", "http://www.w3.org/2005/Atom"));
                            if (titleElement != null)
                            {
                            }
                            
                            XElement contentElement = entryElement.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement != null)
                            {
                                XElement topicDescriptionElement = contentElement.Element(XName.Get("TopicDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (topicDescriptionElement != null)
                                {
                                    ServiceBusTopic topicDescriptionInstance = new ServiceBusTopic();
                                    result.Topic = topicDescriptionInstance;
                                    
                                    XElement defaultMessageTimeToLiveElement = topicDescriptionElement.Element(XName.Get("DefaultMessageTimeToLive", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (defaultMessageTimeToLiveElement != null)
                                    {
                                        string defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement.Value;
                                        topicDescriptionInstance.DefaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
                                    }
                                    
                                    XElement maxSizeInMegabytesElement = topicDescriptionElement.Element(XName.Get("MaxSizeInMegabytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (maxSizeInMegabytesElement != null)
                                    {
                                        int maxSizeInMegabytesInstance = int.Parse(maxSizeInMegabytesElement.Value, CultureInfo.InvariantCulture);
                                        topicDescriptionInstance.MaxSizeInMegabytes = maxSizeInMegabytesInstance;
                                    }
                                    
                                    XElement requiresDuplicateDetectionElement = topicDescriptionElement.Element(XName.Get("RequiresDuplicateDetection", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (requiresDuplicateDetectionElement != null)
                                    {
                                        bool requiresDuplicateDetectionInstance = bool.Parse(requiresDuplicateDetectionElement.Value);
                                        topicDescriptionInstance.RequiresDuplicateDetection = requiresDuplicateDetectionInstance;
                                    }
                                    
                                    XElement duplicateDetectionHistoryTimeWindowElement = topicDescriptionElement.Element(XName.Get("DuplicateDetectionHistoryTimeWindow", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (duplicateDetectionHistoryTimeWindowElement != null)
                                    {
                                        string duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement.Value;
                                        topicDescriptionInstance.DuplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
                                    }
                                    
                                    XElement enableBatchedOperationsElement = topicDescriptionElement.Element(XName.Get("EnableBatchedOperations", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (enableBatchedOperationsElement != null)
                                    {
                                        bool enableBatchedOperationsInstance = bool.Parse(enableBatchedOperationsElement.Value);
                                        topicDescriptionInstance.EnableBatchedOperations = enableBatchedOperationsInstance;
                                    }
                                    
                                    XElement sizeInBytesElement = topicDescriptionElement.Element(XName.Get("SizeInBytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (sizeInBytesElement != null)
                                    {
                                        int sizeInBytesInstance = int.Parse(sizeInBytesElement.Value, CultureInfo.InvariantCulture);
                                        topicDescriptionInstance.SizeInBytes = sizeInBytesInstance;
                                    }
                                    
                                    XElement filteringMessagesBeforePublishingElement = topicDescriptionElement.Element(XName.Get("FilteringMessagesBeforePublishing", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (filteringMessagesBeforePublishingElement != null)
                                    {
                                        bool filteringMessagesBeforePublishingInstance = bool.Parse(filteringMessagesBeforePublishingElement.Value);
                                        topicDescriptionInstance.FilteringMessagesBeforePublishing = filteringMessagesBeforePublishingInstance;
                                    }
                                    
                                    XElement isAnonymousAccessibleElement = topicDescriptionElement.Element(XName.Get("IsAnonymousAccessible", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (isAnonymousAccessibleElement != null)
                                    {
                                        bool isAnonymousAccessibleInstance = bool.Parse(isAnonymousAccessibleElement.Value);
                                        topicDescriptionInstance.IsAnonymousAccessible = isAnonymousAccessibleInstance;
                                    }
                                    
                                    XElement authorizationRulesSequenceElement = topicDescriptionElement.Element(XName.Get("AuthorizationRules", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (authorizationRulesSequenceElement != null)
                                    {
                                        foreach (XElement authorizationRulesElement in authorizationRulesSequenceElement.Elements(XName.Get("AuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                        {
                                            ServiceBusSharedAccessAuthorizationRule authorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                            topicDescriptionInstance.AuthorizationRules.Add(authorizationRuleInstance);
                                            
                                            XElement claimTypeElement = authorizationRulesElement.Element(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (claimTypeElement != null)
                                            {
                                                string claimTypeInstance = claimTypeElement.Value;
                                                authorizationRuleInstance.ClaimType = claimTypeInstance;
                                            }
                                            
                                            XElement claimValueElement = authorizationRulesElement.Element(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (claimValueElement != null)
                                            {
                                                string claimValueInstance = claimValueElement.Value;
                                                authorizationRuleInstance.ClaimValue = claimValueInstance;
                                            }
                                            
                                            XElement rightsSequenceElement = authorizationRulesElement.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (rightsSequenceElement != null)
                                            {
                                                foreach (XElement rightsElement in rightsSequenceElement.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                                {
                                                    authorizationRuleInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                                }
                                            }
                                            
                                            XElement createdTimeElement = authorizationRulesElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (createdTimeElement != null)
                                            {
                                                DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                authorizationRuleInstance.CreatedTime = createdTimeInstance;
                                            }
                                            
                                            XElement keyNameElement = authorizationRulesElement.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (keyNameElement != null)
                                            {
                                                string keyNameInstance = keyNameElement.Value;
                                                authorizationRuleInstance.KeyName = keyNameInstance;
                                            }
                                            
                                            XElement modifiedTimeElement = authorizationRulesElement.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (modifiedTimeElement != null)
                                            {
                                                DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                authorizationRuleInstance.ModifiedTime = modifiedTimeInstance;
                                            }
                                            
                                            XElement primaryKeyElement = authorizationRulesElement.Element(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (primaryKeyElement != null)
                                            {
                                                string primaryKeyInstance = primaryKeyElement.Value;
                                                authorizationRuleInstance.PrimaryKey = primaryKeyInstance;
                                            }
                                            
                                            XElement secondaryKeyElement = authorizationRulesElement.Element(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (secondaryKeyElement != null)
                                            {
                                                string secondaryKeyInstance = secondaryKeyElement.Value;
                                                authorizationRuleInstance.SecondaryKey = secondaryKeyInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement statusElement = topicDescriptionElement.Element(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (statusElement != null)
                                    {
                                        string statusInstance = statusElement.Value;
                                        topicDescriptionInstance.Status = statusInstance;
                                    }
                                    
                                    XElement createdAtElement = topicDescriptionElement.Element(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createdAtElement != null)
                                    {
                                        DateTime createdAtInstance = DateTime.Parse(createdAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        topicDescriptionInstance.CreatedAt = createdAtInstance;
                                    }
                                    
                                    XElement updatedAtElement = topicDescriptionElement.Element(XName.Get("UpdatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (updatedAtElement != null)
                                    {
                                        DateTime updatedAtInstance = DateTime.Parse(updatedAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        topicDescriptionInstance.UpdatedAt = updatedAtInstance;
                                    }
                                    
                                    XElement accessedAtElement = topicDescriptionElement.Element(XName.Get("AccessedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (accessedAtElement != null)
                                    {
                                        DateTime accessedAtInstance = DateTime.Parse(accessedAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        topicDescriptionInstance.AccessedAt = accessedAtInstance;
                                    }
                                    
                                    XElement supportOrderingElement = topicDescriptionElement.Element(XName.Get("SupportOrdering", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (supportOrderingElement != null)
                                    {
                                        bool supportOrderingInstance = bool.Parse(supportOrderingElement.Value);
                                        topicDescriptionInstance.SupportOrdering = supportOrderingInstance;
                                    }
                                    
                                    XElement countDetailsElement = topicDescriptionElement.Element(XName.Get("CountDetails", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (countDetailsElement != null)
                                    {
                                        CountDetails countDetailsInstance = new CountDetails();
                                        topicDescriptionInstance.CountDetails = countDetailsInstance;
                                    }
                                    
                                    XElement subscriptionCountElement = topicDescriptionElement.Element(XName.Get("SubscriptionCount", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (subscriptionCountElement != null)
                                    {
                                        int subscriptionCountInstance = int.Parse(subscriptionCountElement.Value, CultureInfo.InvariantCulture);
                                        topicDescriptionInstance.SubscriptionCount = subscriptionCountInstance;
                                    }
                                    
                                    XElement autoDeleteOnIdleElement = topicDescriptionElement.Element(XName.Get("AutoDeleteOnIdle", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (autoDeleteOnIdleElement != null)
                                    {
                                        string autoDeleteOnIdleInstance = autoDeleteOnIdleElement.Value;
                                        topicDescriptionInstance.AutoDeleteOnIdle = autoDeleteOnIdleInstance;
                                    }
                                    
                                    XElement entityAvailabilityStatusElement = topicDescriptionElement.Element(XName.Get("EntityAvailabilityStatus", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (entityAvailabilityStatusElement != null)
                                    {
                                        string entityAvailabilityStatusInstance = entityAvailabilityStatusElement.Value;
                                        topicDescriptionInstance.EntityAvailabilityStatus = entityAvailabilityStatusInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the set of connection strings for a topic.
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='topicName'>
        /// Required. The topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The set of connection details for a service bus entity.
        /// </returns>
        public async Task<ServiceBusConnectionDetailsResponse> GetConnectionDetailsAsync(string namespaceName, string topicName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            if (topicName == null)
            {
                throw new ArgumentNullException("topicName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("topicName", topicName);
                TracingAdapter.Enter(invocationId, this, "GetConnectionDetailsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/Topics/";
            url = url + Uri.EscapeDataString(topicName);
            url = url + "/ConnectionDetails";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusConnectionDetailsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusConnectionDetailsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement feedElement = responseDoc.Element(XName.Get("feed", "http://www.w3.org/2005/Atom"));
                        if (feedElement != null)
                        {
                            if (feedElement != null)
                            {
                                foreach (XElement entriesElement in feedElement.Elements(XName.Get("entry", "http://www.w3.org/2005/Atom")))
                                {
                                    ServiceBusConnectionDetail entryInstance = new ServiceBusConnectionDetail();
                                    result.ConnectionDetails.Add(entryInstance);
                                    
                                    XElement contentElement = entriesElement.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                                    if (contentElement != null)
                                    {
                                        XElement connectionDetailElement = contentElement.Element(XName.Get("ConnectionDetail", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                        if (connectionDetailElement != null)
                                        {
                                            XElement keyNameElement = connectionDetailElement.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (keyNameElement != null)
                                            {
                                                string keyNameInstance = keyNameElement.Value;
                                                entryInstance.KeyName = keyNameInstance;
                                            }
                                            
                                            XElement connectionStringElement = connectionDetailElement.Element(XName.Get("ConnectionString", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (connectionStringElement != null)
                                            {
                                                string connectionStringInstance = connectionStringElement.Value;
                                                entryInstance.ConnectionString = connectionStringInstance;
                                            }
                                            
                                            XElement authorizationTypeElement = connectionDetailElement.Element(XName.Get("AuthorizationType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (authorizationTypeElement != null)
                                            {
                                                string authorizationTypeInstance = authorizationTypeElement.Value;
                                                entryInstance.AuthorizationType = authorizationTypeInstance;
                                            }
                                            
                                            XElement rightsSequenceElement = connectionDetailElement.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (rightsSequenceElement != null)
                                            {
                                                foreach (XElement rightsElement in rightsSequenceElement.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                                {
                                                    entryInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Enumerates the topics in the service namespace. An empty feed is
        /// returned if no topic exists in the service namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh780744.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a list of topics.
        /// </returns>
        public async Task<ServiceBusTopicsResponse> ListAsync(string namespaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/topics/";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusTopicsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusTopicsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement feedElement = responseDoc.Element(XName.Get("feed", "http://www.w3.org/2005/Atom"));
                        if (feedElement != null)
                        {
                            if (feedElement != null)
                            {
                                foreach (XElement entriesElement in feedElement.Elements(XName.Get("entry", "http://www.w3.org/2005/Atom")))
                                {
                                    ServiceBusTopic entryInstance = new ServiceBusTopic();
                                    result.Topics.Add(entryInstance);
                                    
                                    XElement titleElement = entriesElement.Element(XName.Get("title", "http://www.w3.org/2005/Atom"));
                                    if (titleElement != null)
                                    {
                                        string titleInstance = titleElement.Value;
                                        entryInstance.Name = titleInstance;
                                    }
                                    
                                    XElement contentElement = entriesElement.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                                    if (contentElement != null)
                                    {
                                        XElement topicDescriptionElement = contentElement.Element(XName.Get("TopicDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                        if (topicDescriptionElement != null)
                                        {
                                            XElement defaultMessageTimeToLiveElement = topicDescriptionElement.Element(XName.Get("DefaultMessageTimeToLive", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (defaultMessageTimeToLiveElement != null)
                                            {
                                                string defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement.Value;
                                                entryInstance.DefaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
                                            }
                                            
                                            XElement maxSizeInMegabytesElement = topicDescriptionElement.Element(XName.Get("MaxSizeInMegabytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (maxSizeInMegabytesElement != null)
                                            {
                                                int maxSizeInMegabytesInstance = int.Parse(maxSizeInMegabytesElement.Value, CultureInfo.InvariantCulture);
                                                entryInstance.MaxSizeInMegabytes = maxSizeInMegabytesInstance;
                                            }
                                            
                                            XElement requiresDuplicateDetectionElement = topicDescriptionElement.Element(XName.Get("RequiresDuplicateDetection", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (requiresDuplicateDetectionElement != null)
                                            {
                                                bool requiresDuplicateDetectionInstance = bool.Parse(requiresDuplicateDetectionElement.Value);
                                                entryInstance.RequiresDuplicateDetection = requiresDuplicateDetectionInstance;
                                            }
                                            
                                            XElement duplicateDetectionHistoryTimeWindowElement = topicDescriptionElement.Element(XName.Get("DuplicateDetectionHistoryTimeWindow", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (duplicateDetectionHistoryTimeWindowElement != null)
                                            {
                                                string duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement.Value;
                                                entryInstance.DuplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
                                            }
                                            
                                            XElement enableBatchedOperationsElement = topicDescriptionElement.Element(XName.Get("EnableBatchedOperations", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (enableBatchedOperationsElement != null)
                                            {
                                                bool enableBatchedOperationsInstance = bool.Parse(enableBatchedOperationsElement.Value);
                                                entryInstance.EnableBatchedOperations = enableBatchedOperationsInstance;
                                            }
                                            
                                            XElement sizeInBytesElement = topicDescriptionElement.Element(XName.Get("SizeInBytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (sizeInBytesElement != null)
                                            {
                                                int sizeInBytesInstance = int.Parse(sizeInBytesElement.Value, CultureInfo.InvariantCulture);
                                                entryInstance.SizeInBytes = sizeInBytesInstance;
                                            }
                                            
                                            XElement filteringMessagesBeforePublishingElement = topicDescriptionElement.Element(XName.Get("FilteringMessagesBeforePublishing", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (filteringMessagesBeforePublishingElement != null)
                                            {
                                                bool filteringMessagesBeforePublishingInstance = bool.Parse(filteringMessagesBeforePublishingElement.Value);
                                                entryInstance.FilteringMessagesBeforePublishing = filteringMessagesBeforePublishingInstance;
                                            }
                                            
                                            XElement isAnonymousAccessibleElement = topicDescriptionElement.Element(XName.Get("IsAnonymousAccessible", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (isAnonymousAccessibleElement != null)
                                            {
                                                bool isAnonymousAccessibleInstance = bool.Parse(isAnonymousAccessibleElement.Value);
                                                entryInstance.IsAnonymousAccessible = isAnonymousAccessibleInstance;
                                            }
                                            
                                            XElement authorizationRulesSequenceElement = topicDescriptionElement.Element(XName.Get("AuthorizationRules", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (authorizationRulesSequenceElement != null)
                                            {
                                                foreach (XElement authorizationRulesElement in authorizationRulesSequenceElement.Elements(XName.Get("AuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                                {
                                                    ServiceBusSharedAccessAuthorizationRule authorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                                    entryInstance.AuthorizationRules.Add(authorizationRuleInstance);
                                                    
                                                    XElement claimTypeElement = authorizationRulesElement.Element(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                                    if (claimTypeElement != null)
                                                    {
                                                        string claimTypeInstance = claimTypeElement.Value;
                                                        authorizationRuleInstance.ClaimType = claimTypeInstance;
                                                    }
                                                    
                                                    XElement claimValueElement = authorizationRulesElement.Element(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                                    if (claimValueElement != null)
                                                    {
                                                        string claimValueInstance = claimValueElement.Value;
                                                        authorizationRuleInstance.ClaimValue = claimValueInstance;
                                                    }
                                                    
                                                    XElement rightsSequenceElement = authorizationRulesElement.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                                    if (rightsSequenceElement != null)
                                                    {
                                                        foreach (XElement rightsElement in rightsSequenceElement.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                                        {
                                                            authorizationRuleInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                                        }
                                                    }
                                                    
                                                    XElement createdTimeElement = authorizationRulesElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                                    if (createdTimeElement != null)
                                                    {
                                                        DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                        authorizationRuleInstance.CreatedTime = createdTimeInstance;
                                                    }
                                                    
                                                    XElement keyNameElement = authorizationRulesElement.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                                    if (keyNameElement != null)
                                                    {
                                                        string keyNameInstance = keyNameElement.Value;
                                                        authorizationRuleInstance.KeyName = keyNameInstance;
                                                    }
                                                    
                                                    XElement modifiedTimeElement = authorizationRulesElement.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                                    if (modifiedTimeElement != null)
                                                    {
                                                        DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                        authorizationRuleInstance.ModifiedTime = modifiedTimeInstance;
                                                    }
                                                    
                                                    XElement primaryKeyElement = authorizationRulesElement.Element(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                                    if (primaryKeyElement != null)
                                                    {
                                                        string primaryKeyInstance = primaryKeyElement.Value;
                                                        authorizationRuleInstance.PrimaryKey = primaryKeyInstance;
                                                    }
                                                    
                                                    XElement secondaryKeyElement = authorizationRulesElement.Element(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                                    if (secondaryKeyElement != null)
                                                    {
                                                        string secondaryKeyInstance = secondaryKeyElement.Value;
                                                        authorizationRuleInstance.SecondaryKey = secondaryKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            XElement statusElement = topicDescriptionElement.Element(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (statusElement != null)
                                            {
                                                string statusInstance = statusElement.Value;
                                                entryInstance.Status = statusInstance;
                                            }
                                            
                                            XElement createdAtElement = topicDescriptionElement.Element(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (createdAtElement != null)
                                            {
                                                DateTime createdAtInstance = DateTime.Parse(createdAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                entryInstance.CreatedAt = createdAtInstance;
                                            }
                                            
                                            XElement updatedAtElement = topicDescriptionElement.Element(XName.Get("UpdatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (updatedAtElement != null)
                                            {
                                                DateTime updatedAtInstance = DateTime.Parse(updatedAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                entryInstance.UpdatedAt = updatedAtInstance;
                                            }
                                            
                                            XElement accessedAtElement = topicDescriptionElement.Element(XName.Get("AccessedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (accessedAtElement != null)
                                            {
                                                DateTime accessedAtInstance = DateTime.Parse(accessedAtElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                entryInstance.AccessedAt = accessedAtInstance;
                                            }
                                            
                                            XElement supportOrderingElement = topicDescriptionElement.Element(XName.Get("SupportOrdering", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (supportOrderingElement != null)
                                            {
                                                bool supportOrderingInstance = bool.Parse(supportOrderingElement.Value);
                                                entryInstance.SupportOrdering = supportOrderingInstance;
                                            }
                                            
                                            XElement countDetailsElement = topicDescriptionElement.Element(XName.Get("CountDetails", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (countDetailsElement != null)
                                            {
                                                CountDetails countDetailsInstance = new CountDetails();
                                                entryInstance.CountDetails = countDetailsInstance;
                                            }
                                            
                                            XElement subscriptionCountElement = topicDescriptionElement.Element(XName.Get("SubscriptionCount", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (subscriptionCountElement != null)
                                            {
                                                int subscriptionCountInstance = int.Parse(subscriptionCountElement.Value, CultureInfo.InvariantCulture);
                                                entryInstance.SubscriptionCount = subscriptionCountInstance;
                                            }
                                            
                                            XElement autoDeleteOnIdleElement = topicDescriptionElement.Element(XName.Get("AutoDeleteOnIdle", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (autoDeleteOnIdleElement != null)
                                            {
                                                string autoDeleteOnIdleInstance = autoDeleteOnIdleElement.Value;
                                                entryInstance.AutoDeleteOnIdle = autoDeleteOnIdleInstance;
                                            }
                                            
                                            XElement entityAvailabilityStatusElement = topicDescriptionElement.Element(XName.Get("EntityAvailabilityStatus", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (entityAvailabilityStatusElement != null)
                                            {
                                                string entityAvailabilityStatusInstance = entityAvailabilityStatusElement.Value;
                                                entryInstance.EntityAvailabilityStatus = entityAvailabilityStatusInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates a topic.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj839740.aspx
        /// for more information)
        /// </summary>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='topic'>
        /// Required. The Service Bus topic.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A response to a request for a particular topic.
        /// </returns>
        public async Task<ServiceBusTopicResponse> UpdateAsync(string namespaceName, ServiceBusTopic topic, CancellationToken cancellationToken)
        {
            // Validate
            if (namespaceName == null)
            {
                throw new ArgumentNullException("namespaceName");
            }
            if (topic == null)
            {
                throw new ArgumentNullException("topic");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("namespaceName", namespaceName);
                tracingParameters.Add("topic", topic);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/servicebus/namespaces/";
            url = url + Uri.EscapeDataString(namespaceName);
            url = url + "/topics/";
            if (topic.Name != null)
            {
                url = url + Uri.EscapeDataString(topic.Name);
            }
            url = url + "/";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("if-match", "*");
                httpRequest.Headers.Add("type", "entry");
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                httpRequest.Headers.Add("x-process-at", "ServiceBus");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement entryElement = new XElement(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                requestDoc.Add(entryElement);
                
                XElement contentElement = new XElement(XName.Get("content", "http://www.w3.org/2005/Atom"));
                entryElement.Add(contentElement);
                
                XAttribute typeAttribute = new XAttribute(XName.Get("type", ""), "");
                typeAttribute.Value = "application/atom+xml;type=entry;charset=utf-8";
                contentElement.Add(typeAttribute);
                
                XElement topicDescriptionElement = new XElement(XName.Get("TopicDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                contentElement.Add(topicDescriptionElement);
                
                if (topic.DefaultMessageTimeToLive != null)
                {
                    XElement defaultMessageTimeToLiveElement = new XElement(XName.Get("DefaultMessageTimeToLive", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    defaultMessageTimeToLiveElement.Value = topic.DefaultMessageTimeToLive;
                    topicDescriptionElement.Add(defaultMessageTimeToLiveElement);
                }
                
                XElement maxSizeInMegabytesElement = new XElement(XName.Get("MaxSizeInMegabytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                maxSizeInMegabytesElement.Value = topic.MaxSizeInMegabytes.ToString();
                topicDescriptionElement.Add(maxSizeInMegabytesElement);
                
                XElement requiresDuplicateDetectionElement = new XElement(XName.Get("RequiresDuplicateDetection", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                requiresDuplicateDetectionElement.Value = topic.RequiresDuplicateDetection.ToString().ToLower();
                topicDescriptionElement.Add(requiresDuplicateDetectionElement);
                
                if (topic.DuplicateDetectionHistoryTimeWindow != null)
                {
                    XElement duplicateDetectionHistoryTimeWindowElement = new XElement(XName.Get("DuplicateDetectionHistoryTimeWindow", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    duplicateDetectionHistoryTimeWindowElement.Value = topic.DuplicateDetectionHistoryTimeWindow;
                    topicDescriptionElement.Add(duplicateDetectionHistoryTimeWindowElement);
                }
                
                XElement enableBatchedOperationsElement = new XElement(XName.Get("EnableBatchedOperations", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                enableBatchedOperationsElement.Value = topic.EnableBatchedOperations.ToString().ToLower();
                topicDescriptionElement.Add(enableBatchedOperationsElement);
                
                XElement sizeInBytesElement = new XElement(XName.Get("SizeInBytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                sizeInBytesElement.Value = topic.SizeInBytes.ToString();
                topicDescriptionElement.Add(sizeInBytesElement);
                
                XElement filteringMessagesBeforePublishingElement = new XElement(XName.Get("FilteringMessagesBeforePublishing", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                filteringMessagesBeforePublishingElement.Value = topic.FilteringMessagesBeforePublishing.ToString().ToLower();
                topicDescriptionElement.Add(filteringMessagesBeforePublishingElement);
                
                XElement isAnonymousAccessibleElement = new XElement(XName.Get("IsAnonymousAccessible", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                isAnonymousAccessibleElement.Value = topic.IsAnonymousAccessible.ToString().ToLower();
                topicDescriptionElement.Add(isAnonymousAccessibleElement);
                
                if (topic.AuthorizationRules != null)
                {
                    if (topic.AuthorizationRules is ILazyCollection == false || ((ILazyCollection)topic.AuthorizationRules).IsInitialized)
                    {
                        XElement authorizationRulesSequenceElement = new XElement(XName.Get("AuthorizationRules", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                        foreach (ServiceBusSharedAccessAuthorizationRule authorizationRulesItem in topic.AuthorizationRules)
                        {
                            XElement authorizationRuleElement = new XElement(XName.Get("AuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                            authorizationRulesSequenceElement.Add(authorizationRuleElement);
                            
                            XAttribute typeAttribute2 = new XAttribute(XName.Get("type", "http://www.w3.org/2001/XMLSchema-instance"), "");
                            typeAttribute2.Value = "SharedAccessAuthorizationRule";
                            authorizationRuleElement.Add(typeAttribute2);
                            
                            if (authorizationRulesItem.ClaimType != null)
                            {
                                XElement claimTypeElement = new XElement(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                claimTypeElement.Value = authorizationRulesItem.ClaimType;
                                authorizationRuleElement.Add(claimTypeElement);
                            }
                            
                            if (authorizationRulesItem.ClaimValue != null)
                            {
                                XElement claimValueElement = new XElement(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                claimValueElement.Value = authorizationRulesItem.ClaimValue;
                                authorizationRuleElement.Add(claimValueElement);
                            }
                            
                            if (authorizationRulesItem.Rights != null)
                            {
                                if (authorizationRulesItem.Rights is ILazyCollection == false || ((ILazyCollection)authorizationRulesItem.Rights).IsInitialized)
                                {
                                    XElement rightsSequenceElement = new XElement(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    foreach (AccessRight rightsItem in authorizationRulesItem.Rights)
                                    {
                                        XElement rightsItemElement = new XElement(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                        rightsItemElement.Value = rightsItem.ToString();
                                        rightsSequenceElement.Add(rightsItemElement);
                                    }
                                    authorizationRuleElement.Add(rightsSequenceElement);
                                }
                            }
                            
                            XElement createdTimeElement = new XElement(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                            createdTimeElement.Value = authorizationRulesItem.CreatedTime.ToString();
                            authorizationRuleElement.Add(createdTimeElement);
                            
                            if (authorizationRulesItem.KeyName != null)
                            {
                                XElement keyNameElement = new XElement(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                keyNameElement.Value = authorizationRulesItem.KeyName;
                                authorizationRuleElement.Add(keyNameElement);
                            }
                            
                            XElement modifiedTimeElement = new XElement(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                            modifiedTimeElement.Value = authorizationRulesItem.ModifiedTime.ToString();
                            authorizationRuleElement.Add(modifiedTimeElement);
                            
                            if (authorizationRulesItem.PrimaryKey != null)
                            {
                                XElement primaryKeyElement = new XElement(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                primaryKeyElement.Value = authorizationRulesItem.PrimaryKey;
                                authorizationRuleElement.Add(primaryKeyElement);
                            }
                            
                            if (authorizationRulesItem.SecondaryKey != null)
                            {
                                XElement secondaryKeyElement = new XElement(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                secondaryKeyElement.Value = authorizationRulesItem.SecondaryKey;
                                authorizationRuleElement.Add(secondaryKeyElement);
                            }
                        }
                        topicDescriptionElement.Add(authorizationRulesSequenceElement);
                    }
                }
                
                if (topic.Status != null)
                {
                    XElement statusElement = new XElement(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    statusElement.Value = topic.Status;
                    topicDescriptionElement.Add(statusElement);
                }
                
                XElement createdAtElement = new XElement(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                createdAtElement.Value = topic.CreatedAt.ToString();
                topicDescriptionElement.Add(createdAtElement);
                
                XElement updatedAtElement = new XElement(XName.Get("UpdatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                updatedAtElement.Value = topic.UpdatedAt.ToString();
                topicDescriptionElement.Add(updatedAtElement);
                
                XElement accessedAtElement = new XElement(XName.Get("AccessedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                accessedAtElement.Value = topic.AccessedAt.ToString();
                topicDescriptionElement.Add(accessedAtElement);
                
                XElement supportOrderingElement = new XElement(XName.Get("SupportOrdering", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                supportOrderingElement.Value = topic.SupportOrdering.ToString().ToLower();
                topicDescriptionElement.Add(supportOrderingElement);
                
                if (topic.CountDetails != null)
                {
                    XElement countDetailsElement = new XElement(XName.Get("CountDetails", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    topicDescriptionElement.Add(countDetailsElement);
                    
                    XElement activeMessageCountElement = new XElement(XName.Get("ActiveMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    activeMessageCountElement.Value = topic.CountDetails.ActiveMessageCount.ToString();
                    countDetailsElement.Add(activeMessageCountElement);
                    
                    XElement deadLetterMessageCountElement = new XElement(XName.Get("DeadLetterMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    deadLetterMessageCountElement.Value = topic.CountDetails.DeadLetterMessageCount.ToString();
                    countDetailsElement.Add(deadLetterMessageCountElement);
                    
                    XElement scheduledMessageCountElement = new XElement(XName.Get("ScheduledMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    scheduledMessageCountElement.Value = topic.CountDetails.ScheduledMessageCount.ToString();
                    countDetailsElement.Add(scheduledMessageCountElement);
                    
                    XElement transferDeadLetterMessageCountElement = new XElement(XName.Get("TransferDeadLetterMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    transferDeadLetterMessageCountElement.Value = topic.CountDetails.TransferDeadLetterMessageCount.ToString();
                    countDetailsElement.Add(transferDeadLetterMessageCountElement);
                    
                    XElement transferMessageCountElement = new XElement(XName.Get("TransferMessageCount", "http://schemas.microsoft.com/netservices/2011/06/servicebus"));
                    transferMessageCountElement.Value = topic.CountDetails.TransferMessageCount.ToString();
                    countDetailsElement.Add(transferMessageCountElement);
                }
                
                XElement subscriptionCountElement = new XElement(XName.Get("SubscriptionCount", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                subscriptionCountElement.Value = topic.SubscriptionCount.ToString();
                topicDescriptionElement.Add(subscriptionCountElement);
                
                if (topic.AutoDeleteOnIdle != null)
                {
                    XElement autoDeleteOnIdleElement = new XElement(XName.Get("AutoDeleteOnIdle", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    autoDeleteOnIdleElement.Value = topic.AutoDeleteOnIdle;
                    topicDescriptionElement.Add(autoDeleteOnIdleElement);
                }
                
                if (topic.EntityAvailabilityStatus != null)
                {
                    XElement entityAvailabilityStatusElement = new XElement(XName.Get("EntityAvailabilityStatus", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                    entityAvailabilityStatusElement.Value = topic.EntityAvailabilityStatus;
                    topicDescriptionElement.Add(entityAvailabilityStatusElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/atom+xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceBusTopicResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceBusTopicResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement entryElement2 = responseDoc.Element(XName.Get("entry", "http://www.w3.org/2005/Atom"));
                        if (entryElement2 != null)
                        {
                            XElement titleElement = entryElement2.Element(XName.Get("title", "http://www.w3.org/2005/Atom"));
                            if (titleElement != null)
                            {
                            }
                            
                            XElement contentElement2 = entryElement2.Element(XName.Get("content", "http://www.w3.org/2005/Atom"));
                            if (contentElement2 != null)
                            {
                                XElement topicDescriptionElement2 = contentElement2.Element(XName.Get("TopicDescription", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                if (topicDescriptionElement2 != null)
                                {
                                    ServiceBusTopic topicDescriptionInstance = new ServiceBusTopic();
                                    result.Topic = topicDescriptionInstance;
                                    
                                    XElement defaultMessageTimeToLiveElement2 = topicDescriptionElement2.Element(XName.Get("DefaultMessageTimeToLive", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (defaultMessageTimeToLiveElement2 != null)
                                    {
                                        string defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement2.Value;
                                        topicDescriptionInstance.DefaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
                                    }
                                    
                                    XElement maxSizeInMegabytesElement2 = topicDescriptionElement2.Element(XName.Get("MaxSizeInMegabytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (maxSizeInMegabytesElement2 != null)
                                    {
                                        int maxSizeInMegabytesInstance = int.Parse(maxSizeInMegabytesElement2.Value, CultureInfo.InvariantCulture);
                                        topicDescriptionInstance.MaxSizeInMegabytes = maxSizeInMegabytesInstance;
                                    }
                                    
                                    XElement requiresDuplicateDetectionElement2 = topicDescriptionElement2.Element(XName.Get("RequiresDuplicateDetection", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (requiresDuplicateDetectionElement2 != null)
                                    {
                                        bool requiresDuplicateDetectionInstance = bool.Parse(requiresDuplicateDetectionElement2.Value);
                                        topicDescriptionInstance.RequiresDuplicateDetection = requiresDuplicateDetectionInstance;
                                    }
                                    
                                    XElement duplicateDetectionHistoryTimeWindowElement2 = topicDescriptionElement2.Element(XName.Get("DuplicateDetectionHistoryTimeWindow", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (duplicateDetectionHistoryTimeWindowElement2 != null)
                                    {
                                        string duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement2.Value;
                                        topicDescriptionInstance.DuplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
                                    }
                                    
                                    XElement enableBatchedOperationsElement2 = topicDescriptionElement2.Element(XName.Get("EnableBatchedOperations", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (enableBatchedOperationsElement2 != null)
                                    {
                                        bool enableBatchedOperationsInstance = bool.Parse(enableBatchedOperationsElement2.Value);
                                        topicDescriptionInstance.EnableBatchedOperations = enableBatchedOperationsInstance;
                                    }
                                    
                                    XElement sizeInBytesElement2 = topicDescriptionElement2.Element(XName.Get("SizeInBytes", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (sizeInBytesElement2 != null)
                                    {
                                        int sizeInBytesInstance = int.Parse(sizeInBytesElement2.Value, CultureInfo.InvariantCulture);
                                        topicDescriptionInstance.SizeInBytes = sizeInBytesInstance;
                                    }
                                    
                                    XElement filteringMessagesBeforePublishingElement2 = topicDescriptionElement2.Element(XName.Get("FilteringMessagesBeforePublishing", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (filteringMessagesBeforePublishingElement2 != null)
                                    {
                                        bool filteringMessagesBeforePublishingInstance = bool.Parse(filteringMessagesBeforePublishingElement2.Value);
                                        topicDescriptionInstance.FilteringMessagesBeforePublishing = filteringMessagesBeforePublishingInstance;
                                    }
                                    
                                    XElement isAnonymousAccessibleElement2 = topicDescriptionElement2.Element(XName.Get("IsAnonymousAccessible", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (isAnonymousAccessibleElement2 != null)
                                    {
                                        bool isAnonymousAccessibleInstance = bool.Parse(isAnonymousAccessibleElement2.Value);
                                        topicDescriptionInstance.IsAnonymousAccessible = isAnonymousAccessibleInstance;
                                    }
                                    
                                    XElement authorizationRulesSequenceElement2 = topicDescriptionElement2.Element(XName.Get("AuthorizationRules", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (authorizationRulesSequenceElement2 != null)
                                    {
                                        foreach (XElement authorizationRulesElement in authorizationRulesSequenceElement2.Elements(XName.Get("AuthorizationRule", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                        {
                                            ServiceBusSharedAccessAuthorizationRule authorizationRuleInstance = new ServiceBusSharedAccessAuthorizationRule();
                                            topicDescriptionInstance.AuthorizationRules.Add(authorizationRuleInstance);
                                            
                                            XElement claimTypeElement2 = authorizationRulesElement.Element(XName.Get("ClaimType", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (claimTypeElement2 != null)
                                            {
                                                string claimTypeInstance = claimTypeElement2.Value;
                                                authorizationRuleInstance.ClaimType = claimTypeInstance;
                                            }
                                            
                                            XElement claimValueElement2 = authorizationRulesElement.Element(XName.Get("ClaimValue", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (claimValueElement2 != null)
                                            {
                                                string claimValueInstance = claimValueElement2.Value;
                                                authorizationRuleInstance.ClaimValue = claimValueInstance;
                                            }
                                            
                                            XElement rightsSequenceElement2 = authorizationRulesElement.Element(XName.Get("Rights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (rightsSequenceElement2 != null)
                                            {
                                                foreach (XElement rightsElement in rightsSequenceElement2.Elements(XName.Get("AccessRights", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect")))
                                                {
                                                    authorizationRuleInstance.Rights.Add(((AccessRight)Enum.Parse(typeof(AccessRight), rightsElement.Value, true)));
                                                }
                                            }
                                            
                                            XElement createdTimeElement2 = authorizationRulesElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (createdTimeElement2 != null)
                                            {
                                                DateTime createdTimeInstance = DateTime.Parse(createdTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                authorizationRuleInstance.CreatedTime = createdTimeInstance;
                                            }
                                            
                                            XElement keyNameElement2 = authorizationRulesElement.Element(XName.Get("KeyName", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (keyNameElement2 != null)
                                            {
                                                string keyNameInstance = keyNameElement2.Value;
                                                authorizationRuleInstance.KeyName = keyNameInstance;
                                            }
                                            
                                            XElement modifiedTimeElement2 = authorizationRulesElement.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (modifiedTimeElement2 != null)
                                            {
                                                DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                                authorizationRuleInstance.ModifiedTime = modifiedTimeInstance;
                                            }
                                            
                                            XElement primaryKeyElement2 = authorizationRulesElement.Element(XName.Get("PrimaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (primaryKeyElement2 != null)
                                            {
                                                string primaryKeyInstance = primaryKeyElement2.Value;
                                                authorizationRuleInstance.PrimaryKey = primaryKeyInstance;
                                            }
                                            
                                            XElement secondaryKeyElement2 = authorizationRulesElement.Element(XName.Get("SecondaryKey", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                            if (secondaryKeyElement2 != null)
                                            {
                                                string secondaryKeyInstance = secondaryKeyElement2.Value;
                                                authorizationRuleInstance.SecondaryKey = secondaryKeyInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement statusElement2 = topicDescriptionElement2.Element(XName.Get("Status", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (statusElement2 != null)
                                    {
                                        string statusInstance = statusElement2.Value;
                                        topicDescriptionInstance.Status = statusInstance;
                                    }
                                    
                                    XElement createdAtElement2 = topicDescriptionElement2.Element(XName.Get("CreatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (createdAtElement2 != null)
                                    {
                                        DateTime createdAtInstance = DateTime.Parse(createdAtElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        topicDescriptionInstance.CreatedAt = createdAtInstance;
                                    }
                                    
                                    XElement updatedAtElement2 = topicDescriptionElement2.Element(XName.Get("UpdatedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (updatedAtElement2 != null)
                                    {
                                        DateTime updatedAtInstance = DateTime.Parse(updatedAtElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        topicDescriptionInstance.UpdatedAt = updatedAtInstance;
                                    }
                                    
                                    XElement accessedAtElement2 = topicDescriptionElement2.Element(XName.Get("AccessedAt", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (accessedAtElement2 != null)
                                    {
                                        DateTime accessedAtInstance = DateTime.Parse(accessedAtElement2.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        topicDescriptionInstance.AccessedAt = accessedAtInstance;
                                    }
                                    
                                    XElement supportOrderingElement2 = topicDescriptionElement2.Element(XName.Get("SupportOrdering", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (supportOrderingElement2 != null)
                                    {
                                        bool supportOrderingInstance = bool.Parse(supportOrderingElement2.Value);
                                        topicDescriptionInstance.SupportOrdering = supportOrderingInstance;
                                    }
                                    
                                    XElement countDetailsElement2 = topicDescriptionElement2.Element(XName.Get("CountDetails", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (countDetailsElement2 != null)
                                    {
                                        CountDetails countDetailsInstance = new CountDetails();
                                        topicDescriptionInstance.CountDetails = countDetailsInstance;
                                    }
                                    
                                    XElement subscriptionCountElement2 = topicDescriptionElement2.Element(XName.Get("SubscriptionCount", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (subscriptionCountElement2 != null)
                                    {
                                        int subscriptionCountInstance = int.Parse(subscriptionCountElement2.Value, CultureInfo.InvariantCulture);
                                        topicDescriptionInstance.SubscriptionCount = subscriptionCountInstance;
                                    }
                                    
                                    XElement autoDeleteOnIdleElement2 = topicDescriptionElement2.Element(XName.Get("AutoDeleteOnIdle", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (autoDeleteOnIdleElement2 != null)
                                    {
                                        string autoDeleteOnIdleInstance = autoDeleteOnIdleElement2.Value;
                                        topicDescriptionInstance.AutoDeleteOnIdle = autoDeleteOnIdleInstance;
                                    }
                                    
                                    XElement entityAvailabilityStatusElement2 = topicDescriptionElement2.Element(XName.Get("EntityAvailabilityStatus", "http://schemas.microsoft.com/netservices/2010/10/servicebus/connect"));
                                    if (entityAvailabilityStatusElement2 != null)
                                    {
                                        string entityAvailabilityStatusInstance = entityAvailabilityStatusElement2.Value;
                                        topicDescriptionInstance.EntityAvailabilityStatus = entityAvailabilityStatusInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
