// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models;

namespace Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models
{
    /// <summary>
    /// Metric definition class specifies the metadata for a metric.
    /// </summary>
    public partial class MetricDefinition
    {
        private string _displayName;
        
        /// <summary>
        /// Optional. Metric display name.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private bool _isAlertable;
        
        /// <summary>
        /// Optional. Specifies if the metric is alertable. Alerts can be
        /// defined on a metric only if this property is true.
        /// </summary>
        public bool IsAlertable
        {
            get { return this._isAlertable; }
            set { this._isAlertable = value; }
        }
        
        private IList<MetricAvailability> _metricAvailabilities;
        
        /// <summary>
        /// Optional. Metric availability specifies the time grain (aggregation
        /// interval) and the retention period for the metric in a timegrain.
        /// </summary>
        public IList<MetricAvailability> MetricAvailabilities
        {
            get { return this._metricAvailabilities; }
            set { this._metricAvailabilities = value; }
        }
        
        private TimeSpan _minimumAlertableTimeWindow;
        
        /// <summary>
        /// Optional. Specifies the minimum alertable time window for the
        /// metric.
        /// </summary>
        public TimeSpan MinimumAlertableTimeWindow
        {
            get { return this._minimumAlertableTimeWindow; }
            set { this._minimumAlertableTimeWindow = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Get the metric name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _namespace;
        
        /// <summary>
        /// Optional. Get the metric namespace.
        /// </summary>
        public string Namespace
        {
            get { return this._namespace; }
            set { this._namespace = value; }
        }
        
        private string _primaryAggregation;
        
        /// <summary>
        /// Optional. Metric primary aggregation specifies the default type for
        /// the metrics. This indicates if the metric is of type average,
        /// total, minimum or maximum.
        /// </summary>
        public string PrimaryAggregation
        {
            get { return this._primaryAggregation; }
            set { this._primaryAggregation = value; }
        }
        
        private string _resourceIdSuffix;
        
        /// <summary>
        /// Optional. Metric resource id suffix specfies the sub-resource path
        /// within the the resource for the metric.
        /// </summary>
        public string ResourceIdSuffix
        {
            get { return this._resourceIdSuffix; }
            set { this._resourceIdSuffix = value; }
        }
        
        private string _unit;
        
        /// <summary>
        /// Optional. The unit for the metric.
        /// </summary>
        public string Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>
        public MetricDefinition()
        {
            this.MetricAvailabilities = new LazyList<MetricAvailability>();
        }
    }
}
