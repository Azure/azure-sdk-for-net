// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Storage;
using Microsoft.WindowsAzure.Management.Storage.Models;

namespace Microsoft.WindowsAzure.Management.Storage
{
    /// <summary>
    /// The Service Management API provides programmatic access to much of the
    /// functionality available through the Management Portal. The Service
    /// Management API is a REST API. All API operations are performed over
    /// SSL and are mutually authenticated using X.509 v3 certificates.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460799.aspx for
    /// more information)
    /// </summary>
    public static partial class StorageAccountOperationsExtensions
    {
        /// <summary>
        /// Abort storage account migration api validates and aborts the given
        /// storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse AbortMigration(this IStorageAccountOperations operations, string storageAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).AbortMigrationAsync(storageAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Abort storage account migration api validates and aborts the given
        /// storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> AbortMigrationAsync(this IStorageAccountOperations operations, string storageAccountName)
        {
            return operations.AbortMigrationAsync(storageAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Abort storage account migration api validates and aborts the given
        /// storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginAbortMigration(this IStorageAccountOperations operations, string storageAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).BeginAbortMigrationAsync(storageAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Abort storage account migration api validates and aborts the given
        /// storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginAbortMigrationAsync(this IStorageAccountOperations operations, string storageAccountName)
        {
            return operations.BeginAbortMigrationAsync(storageAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Commit storage account migration api validates and commits the
        /// given storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginCommitMigration(this IStorageAccountOperations operations, string storageAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).BeginCommitMigrationAsync(storageAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Commit storage account migration api validates and commits the
        /// given storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginCommitMigrationAsync(this IStorageAccountOperations operations, string storageAccountName)
        {
            return operations.BeginCommitMigrationAsync(storageAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Begin Creating Storage Account operation creates a new storage
        /// account in Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Creating Storage Account
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginCreating(this IStorageAccountOperations operations, StorageAccountCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).BeginCreatingAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Begin Creating Storage Account operation creates a new storage
        /// account in Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Creating Storage Account
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginCreatingAsync(this IStorageAccountOperations operations, StorageAccountCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Prepare storage account migration api validates and prepares the
        /// given storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse BeginPrepareMigration(this IStorageAccountOperations operations, string storageAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).BeginPrepareMigrationAsync(storageAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Prepare storage account migration api validates and prepares the
        /// given storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> BeginPrepareMigrationAsync(this IStorageAccountOperations operations, string storageAccountName)
        {
            return operations.BeginPrepareMigrationAsync(storageAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Check Name Availability operation checks if a storage account
        /// name is available for use in Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154125.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The desired storage account name to check for
        /// availability.
        /// </param>
        /// <returns>
        /// The response to a storage account check name availability request.
        /// </returns>
        public static CheckNameAvailabilityResponse CheckNameAvailability(this IStorageAccountOperations operations, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).CheckNameAvailabilityAsync(accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Check Name Availability operation checks if a storage account
        /// name is available for use in Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154125.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The desired storage account name to check for
        /// availability.
        /// </param>
        /// <returns>
        /// The response to a storage account check name availability request.
        /// </returns>
        public static Task<CheckNameAvailabilityResponse> CheckNameAvailabilityAsync(this IStorageAccountOperations operations, string accountName)
        {
            return operations.CheckNameAvailabilityAsync(accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Commit storage account migration api validates and commits the
        /// given storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse CommitMigration(this IStorageAccountOperations operations, string storageAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).CommitMigrationAsync(storageAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Commit storage account migration api validates and commits the
        /// given storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CommitMigrationAsync(this IStorageAccountOperations operations, string storageAccountName)
        {
            return operations.CommitMigrationAsync(storageAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Storage Account operation creates a new storage account
        /// in Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Storage Account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse Create(this IStorageAccountOperations operations, StorageAccountCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).CreateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Create Storage Account operation creates a new storage account
        /// in Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh264518.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Storage Account
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CreateAsync(this IStorageAccountOperations operations, StorageAccountCreateParameters parameters)
        {
            return operations.CreateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Storage Account operation deletes the specified storage
        /// account from Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh264517.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account to be deleted.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IStorageAccountOperations operations, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).DeleteAsync(accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Delete Storage Account operation deletes the specified storage
        /// account from Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh264517.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the storage account to be deleted.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IStorageAccountOperations operations, string accountName)
        {
            return operations.DeleteAsync(accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Storage Account Properties operation returns system
        /// properties for the specified storage account.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460802.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. Name of the storage account to get properties for.
        /// </param>
        /// <returns>
        /// The Get Storage Account Properties operation response.
        /// </returns>
        public static StorageAccountGetResponse Get(this IStorageAccountOperations operations, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).GetAsync(accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Storage Account Properties operation returns system
        /// properties for the specified storage account.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460802.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. Name of the storage account to get properties for.
        /// </param>
        /// <returns>
        /// The Get Storage Account Properties operation response.
        /// </returns>
        public static Task<StorageAccountGetResponse> GetAsync(this IStorageAccountOperations operations, string accountName)
        {
            return operations.GetAsync(accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Storage Keys operation returns the primary and secondary
        /// access keys for the specified storage account.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460785.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the desired storage account.
        /// </param>
        /// <returns>
        /// The primary and secondary access keys for a storage account.
        /// </returns>
        public static StorageAccountGetKeysResponse GetKeys(this IStorageAccountOperations operations, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).GetKeysAsync(accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Get Storage Keys operation returns the primary and secondary
        /// access keys for the specified storage account.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460785.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the desired storage account.
        /// </param>
        /// <returns>
        /// The primary and secondary access keys for a storage account.
        /// </returns>
        public static Task<StorageAccountGetKeysResponse> GetKeysAsync(this IStorageAccountOperations operations, string accountName)
        {
            return operations.GetKeysAsync(accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Storage Accounts operation lists the storage accounts
        /// available under the current subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460787.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <returns>
        /// The List Storage Accounts operation response.
        /// </returns>
        public static StorageAccountListResponse List(this IStorageAccountOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Storage Accounts operation lists the storage accounts
        /// available under the current subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460787.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <returns>
        /// The List Storage Accounts operation response.
        /// </returns>
        public static Task<StorageAccountListResponse> ListAsync(this IStorageAccountOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Prepare storage account migration api validates and prepares the
        /// given storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static OperationStatusResponse PrepareMigration(this IStorageAccountOperations operations, string storageAccountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).PrepareMigrationAsync(storageAccountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Prepare storage account migration api validates and prepares the
        /// given storage account for IaaS Classic to ARM migration.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='storageAccountName'>
        /// Required. Name of storage account to be migrated.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public static Task<OperationStatusResponse> PrepareMigrationAsync(this IStorageAccountOperations operations, string storageAccountName)
        {
            return operations.PrepareMigrationAsync(storageAccountName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Regenerate Keys operation regenerates the primary or secondary
        /// access key for the specified storage account.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460795.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Regenerate Keys operation.
        /// </param>
        /// <returns>
        /// The primary and secondary access keys for a storage account.
        /// </returns>
        public static StorageAccountRegenerateKeysResponse RegenerateKeys(this IStorageAccountOperations operations, StorageAccountRegenerateKeysParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).RegenerateKeysAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Regenerate Keys operation regenerates the primary or secondary
        /// access key for the specified storage account.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460795.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Regenerate Keys operation.
        /// </param>
        /// <returns>
        /// The primary and secondary access keys for a storage account.
        /// </returns>
        public static Task<StorageAccountRegenerateKeysResponse> RegenerateKeysAsync(this IStorageAccountOperations operations, StorageAccountRegenerateKeysParameters parameters)
        {
            return operations.RegenerateKeysAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Storage Account operation updates the label and the
        /// description, and enables or disables the geo-replication status
        /// for a storage account in Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh264516.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. Name of the storage account to update.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Storage Account
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Update(this IStorageAccountOperations operations, string accountName, StorageAccountUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStorageAccountOperations)s).UpdateAsync(accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Update Storage Account operation updates the label and the
        /// description, and enables or disables the geo-replication status
        /// for a storage account in Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh264516.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Storage.IStorageAccountOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. Name of the storage account to update.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Storage Account
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UpdateAsync(this IStorageAccountOperations operations, string accountName, StorageAccountUpdateParameters parameters)
        {
            return operations.UpdateAsync(accountName, parameters, CancellationToken.None);
        }
    }
}
