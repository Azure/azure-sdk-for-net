// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.RecoveryServicesVaultUpgrade;
using Microsoft.WindowsAzure.Management.RecoveryServicesVaultUpgrade.Models;

namespace Microsoft.WindowsAzure.Management.RecoveryServicesVaultUpgrade
{
    /// <summary>
    /// Definition of vault upgrade operations for the
    /// RecoveryServicesVaultUpgrade extension.
    /// </summary>
    internal partial class RecoveryServicesVaultUpgradeOperations : IServiceOperations<RecoveryServicesVaultUpgradeManagementClient>, IRecoveryServicesVaultUpgradeOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// RecoveryServicesVaultUpgradeOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RecoveryServicesVaultUpgradeOperations(RecoveryServicesVaultUpgradeManagementClient client)
        {
            this._client = client;
        }
        
        private RecoveryServicesVaultUpgradeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.RecoveryServicesVaultUpgrade.RecoveryServicesVaultUpgradeManagementClient.
        /// </summary>
        public RecoveryServicesVaultUpgradeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Check Prerequisites for Vault Upgrade.
        /// </summary>
        /// <param name='resourceUpgradeInput'>
        /// Required. Input required for the resource to be upgraded.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the Azure operations.
        /// </returns>
        public async Task<AzureResponse> CheckPrerequisitesForRecoveryServicesVaultUpgradeAsync(ResourceUpgradeInput resourceUpgradeInput, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUpgradeInput == null)
            {
                throw new ArgumentNullException("resourceUpgradeInput");
            }
            if (resourceUpgradeInput.NewResourcePath == null)
            {
                throw new ArgumentNullException("resourceUpgradeInput.NewResourcePath");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUpgradeInput", resourceUpgradeInput);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CheckPrerequisitesForRecoveryServicesVaultUpgradeAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/checkPrereqsForUpgrade";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement resourceUpgradeInputElement = new XElement(XName.Get("ResourceUpgradeInput", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(resourceUpgradeInputElement);
                
                XElement newResourcePathElement = new XElement(XName.Get("NewResourcePath", "http://schemas.microsoft.com/windowsazure"));
                newResourcePathElement.Value = resourceUpgradeInput.NewResourcePath;
                resourceUpgradeInputElement.Add(newResourcePathElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AzureResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Track Resource Upgrade.
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of an output object stating the status of resource
        /// upgrade.
        /// </returns>
        public async Task<TrackResourceUpgradeResponse> TrackResourceUpgradeAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "TrackResourceUpgradeAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/upgradeOperationResult";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TrackResourceUpgradeResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TrackResourceUpgradeResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement operationInfoElement = responseDoc.Element(XName.Get("OperationInfo", "http://schemas.microsoft.com/windowsazure"));
                        if (operationInfoElement != null)
                        {
                            XElement operationStatusElement = operationInfoElement.Element(XName.Get("OperationStatus", "http://schemas.microsoft.com/windowsazure"));
                            if (operationStatusElement != null)
                            {
                                string operationStatusInstance = operationStatusElement.Value;
                                result.OperationStatus = operationStatusInstance;
                            }
                            
                            XElement operationResultElement = operationInfoElement.Element(XName.Get("OperationResult", "http://schemas.microsoft.com/windowsazure"));
                            if (operationResultElement != null)
                            {
                                string operationResultInstance = operationResultElement.Value;
                                result.OperationResult = operationResultInstance;
                            }
                            
                            XElement messageElement = operationInfoElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                            if (messageElement != null)
                            {
                                string messageInstance = messageElement.Value;
                                result.Message = messageInstance;
                            }
                            
                            XElement jobStepsSequenceElement = operationInfoElement.Element(XName.Get("JobSteps", "http://schemas.microsoft.com/windowsazure"));
                            if (jobStepsSequenceElement != null)
                            {
                                foreach (XElement jobStepsElement in jobStepsSequenceElement.Elements(XName.Get("JobStep", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    JobStep jobStepInstance = new JobStep();
                                    result.JobSteps.Add(jobStepInstance);
                                    
                                    XElement operationStatusElement2 = jobStepsElement.Element(XName.Get("OperationStatus", "http://schemas.microsoft.com/windowsazure"));
                                    if (operationStatusElement2 != null)
                                    {
                                        string operationStatusInstance2 = operationStatusElement2.Value;
                                        jobStepInstance.OperationStatus = operationStatusInstance2;
                                    }
                                    
                                    XElement operationResultElement2 = jobStepsElement.Element(XName.Get("OperationResult", "http://schemas.microsoft.com/windowsazure"));
                                    if (operationResultElement2 != null)
                                    {
                                        string operationResultInstance2 = operationResultElement2.Value;
                                        jobStepInstance.OperationResult = operationResultInstance2;
                                    }
                                    
                                    XElement messageElement2 = jobStepsElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                    if (messageElement2 != null)
                                    {
                                        string messageInstance2 = messageElement2.Value;
                                        jobStepInstance.Message = messageInstance2;
                                    }
                                    
                                    XElement detailElement = jobStepsElement.Element(XName.Get("Detail", "http://schemas.microsoft.com/windowsazure"));
                                    if (detailElement != null)
                                    {
                                        string detailInstance = detailElement.Value;
                                        jobStepInstance.Detail = detailInstance;
                                    }
                                }
                            }
                            
                            XElement jobsSequenceElement = operationInfoElement.Element(XName.Get("Jobs", "http://schemas.microsoft.com/windowsazure"));
                            if (jobsSequenceElement != null)
                            {
                                foreach (XElement jobsElement in jobsSequenceElement.Elements(XName.Get("Job", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                {
                                    result.Jobs.Add(jobsElement.Value);
                                }
                            }
                            
                            XElement errorCodeElement = operationInfoElement.Element(XName.Get("ErrorCode", "http://schemas.microsoft.com/windowsazure"));
                            if (errorCodeElement != null)
                            {
                                string errorCodeInstance = errorCodeElement.Value;
                                result.ErrorCode = errorCodeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Start Resource Upgrade.
        /// </summary>
        /// <param name='resourceUpgradeInput'>
        /// Required. Input required for resource upgradation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a resource upgrade output object.
        /// </returns>
        public async Task<ResourceUpgradeDetails> UpgradeResourceAsync(ResourceUpgradeInput resourceUpgradeInput, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceUpgradeInput == null)
            {
                throw new ArgumentNullException("resourceUpgradeInput");
            }
            if (resourceUpgradeInput.NewResourcePath == null)
            {
                throw new ArgumentNullException("resourceUpgradeInput.NewResourcePath");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceUpgradeInput", resourceUpgradeInput);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpgradeResourceAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + Uri.EscapeDataString(this.Client.ResourceType);
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/upgrade";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Agent-Authentication", customRequestHeaders.AgentAuthenticationHeader);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement resourceUpgradeInputElement = new XElement(XName.Get("ResourceUpgradeInput", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(resourceUpgradeInputElement);
                
                XElement newResourcePathElement = new XElement(XName.Get("NewResourcePath", "http://schemas.microsoft.com/windowsazure"));
                newResourcePathElement.Value = resourceUpgradeInput.NewResourcePath;
                resourceUpgradeInputElement.Add(newResourcePathElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceUpgradeDetails result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ResourceUpgradeDetails();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement resourceUpgradeDetailsElement = responseDoc.Element(XName.Get("ResourceUpgradeDetails", "http://schemas.microsoft.com/windowsazure"));
                        if (resourceUpgradeDetailsElement != null)
                        {
                            XElement operationIdElement = resourceUpgradeDetailsElement.Element(XName.Get("OperationId", "http://schemas.microsoft.com/windowsazure"));
                            if (operationIdElement != null)
                            {
                                string operationIdInstance = operationIdElement.Value;
                                result.OperationId = operationIdInstance;
                            }
                            
                            XElement startTimeUtcElement = resourceUpgradeDetailsElement.Element(XName.Get("StartTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                            if (startTimeUtcElement != null)
                            {
                                DateTime startTimeUtcInstance = DateTime.Parse(startTimeUtcElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.StartTimeUtc = startTimeUtcInstance;
                            }
                            
                            XElement lastUpdatedTimeUtcElement = resourceUpgradeDetailsElement.Element(XName.Get("LastUpdatedTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                            if (lastUpdatedTimeUtcElement != null)
                            {
                                DateTime lastUpdatedTimeUtcInstance = DateTime.Parse(lastUpdatedTimeUtcElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.LastUpdatedTimeUtc = lastUpdatedTimeUtcInstance;
                            }
                            
                            XElement endTimeUtcElement = resourceUpgradeDetailsElement.Element(XName.Get("EndTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                            if (endTimeUtcElement != null)
                            {
                                DateTime endTimeUtcInstance = DateTime.Parse(endTimeUtcElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.EndTimeUtc = endTimeUtcInstance;
                            }
                            
                            XElement statusElement = resourceUpgradeDetailsElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null)
                            {
                                string statusInstance = statusElement.Value;
                                result.Status = statusInstance;
                            }
                            
                            XElement messageElement = resourceUpgradeDetailsElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                            if (messageElement != null)
                            {
                                string messageInstance = messageElement.Value;
                                result.Message = messageInstance;
                            }
                            
                            XElement triggerTypeElement = resourceUpgradeDetailsElement.Element(XName.Get("TriggerType", "http://schemas.microsoft.com/windowsazure"));
                            if (triggerTypeElement != null)
                            {
                                string triggerTypeInstance = triggerTypeElement.Value;
                                result.TriggerType = triggerTypeInstance;
                            }
                            
                            XElement upgradedResourceIdElement = resourceUpgradeDetailsElement.Element(XName.Get("UpgradedResourceId", "http://schemas.microsoft.com/windowsazure"));
                            if (upgradedResourceIdElement != null)
                            {
                                string upgradedResourceIdInstance = upgradedResourceIdElement.Value;
                                result.UpgradedResourceId = upgradedResourceIdInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
