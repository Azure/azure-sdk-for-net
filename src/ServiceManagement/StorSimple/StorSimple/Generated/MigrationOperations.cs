// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// Migration of Legacy Appliance
    /// </summary>
    internal partial class MigrationOperations : IServiceOperations<StorSimpleManagementClient>, IMigrationOperations
    {
        /// <summary>
        /// Initializes a new instance of the MigrationOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MigrationOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Hydra spec for update data container statusThe rest api updates the
        /// status of volume container migration from target device to service
        /// for all volume container in the specified config
        /// </summary>
        /// <param name='configId'>
        /// Required. Unique identifier for config specified while importing
        /// the config to service
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<TaskResponse> BeginUpdateDataContainerMigrationStatusAsync(string configId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (configId == null)
            {
                throw new ArgumentNullException("configId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateDataContainerMigrationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/configs/";
            url = url + Uri.EscapeDataString(configId);
            url = url + "/datacontainerstatus";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.TaskId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec for update confirm migration statusThe rest api updates
        /// the confirm (commit/rollback) status from target appliance to
        /// service for all data container in the specified config
        /// </summary>
        /// <param name='configId'>
        /// Required. Unique identifier for config specified while importing
        /// the config to service
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<TaskResponse> BeginUpdateMigrationConfirmStatusAsync(string configId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (configId == null)
            {
                throw new ArgumentNullException("configId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateMigrationConfirmStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/configs/";
            url = url + Uri.EscapeDataString(configId);
            url = url + "/confirmationstatus";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.TaskId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec update migration plan rest apiThe rest api updates the
        /// migration plan from target appliance to service for all volume
        /// container(s) in the specified config
        /// </summary>
        /// <param name='configId'>
        /// Required. Unique identifier for config specified while importing
        /// the config to service
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<TaskResponse> BeginUpdateMigrationPlanAsync(string configId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (configId == null)
            {
                throw new ArgumentNullException("configId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateMigrationPlanAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/plan/status";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("configId=" + Uri.EscapeDataString(configId));
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.TaskId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec for confirm migration rest apiThe rest api confirms the
        /// commit or rollback of the migrated data containers for all data
        /// container in the specified config
        /// </summary>
        /// <param name='configId'>
        /// Required. Unique identifier for config specified while importing
        /// the config to service
        /// </param>
        /// <param name='confirmMigrationRequest'>
        /// Required. The confirm migration request specifies the list of
        /// volume containers and rollback/commit operation to be performed
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for migration job status.
        /// </returns>
        public async Task<MigrationJobStatus> ConfirmMigrationAsync(string configId, MigrationConfirmStatusRequest confirmMigrationRequest, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (configId == null)
            {
                throw new ArgumentNullException("configId");
            }
            if (confirmMigrationRequest == null)
            {
                throw new ArgumentNullException("confirmMigrationRequest");
            }
            if (confirmMigrationRequest.DataContainerNameList == null)
            {
                throw new ArgumentNullException("confirmMigrationRequest.DataContainerNameList");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("confirmMigrationRequest", confirmMigrationRequest);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ConfirmMigrationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/configs/";
            url = url + Uri.EscapeDataString(configId);
            url = url + "/confirmation";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement migrationConfirmStatusRequestElement = new XElement(XName.Get("MigrationConfirmStatusRequest", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(migrationConfirmStatusRequestElement);
                
                XElement dataContainerNamesSequenceElement = new XElement(XName.Get("DataContainerNames", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (string dataContainerNamesItem in confirmMigrationRequest.DataContainerNameList)
                {
                    XElement dataContainerNamesItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                    dataContainerNamesItemElement.Value = dataContainerNamesItem;
                    dataContainerNamesSequenceElement.Add(dataContainerNamesItemElement);
                }
                migrationConfirmStatusRequestElement.Add(dataContainerNamesSequenceElement);
                
                XElement operationElement = new XElement(XName.Get("Operation", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationElement.Value = confirmMigrationRequest.Operation.ToString();
                migrationConfirmStatusRequestElement.Add(operationElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationJobStatus result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationJobStatus();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement migrationJobStatusElement = responseDoc.Element(XName.Get("MigrationJobStatus", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (migrationJobStatusElement != null)
                        {
                            XElement jobIdElement = migrationJobStatusElement.Element(XName.Get("JobId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (jobIdElement != null)
                            {
                                string jobIdInstance = jobIdElement.Value;
                                result.JobId = jobIdInstance;
                            }
                            
                            XElement messageInfoSequenceElement = migrationJobStatusElement.Element(XName.Get("MessageInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (messageInfoSequenceElement != null)
                            {
                                foreach (XElement messageInfoElement in messageInfoSequenceElement.Elements(XName.Get("HcsMessageInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    HcsMessageInfo hcsMessageInfoInstance = new HcsMessageInfo();
                                    result.MessageInfoList.Add(hcsMessageInfoInstance);
                                    
                                    XElement errorCodeElement = messageInfoElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (errorCodeElement != null)
                                    {
                                        int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                        hcsMessageInfoInstance.ErrorCode = errorCodeInstance;
                                    }
                                    
                                    XElement messageElement = messageInfoElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (messageElement != null)
                                    {
                                        string messageInstance = messageElement.Value;
                                        hcsMessageInfoInstance.Message = messageInstance;
                                    }
                                    
                                    XElement recommendationElement = messageInfoElement.Element(XName.Get("Recommendation", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (recommendationElement != null)
                                    {
                                        string recommendationInstance = recommendationElement.Value;
                                        hcsMessageInfoInstance.Recommendation = recommendationInstance;
                                    }
                                    
                                    XElement severityElement = messageInfoElement.Element(XName.Get("Severity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (severityElement != null)
                                    {
                                        int severityInstance = int.Parse(severityElement.Value, CultureInfo.InvariantCulture);
                                        hcsMessageInfoInstance.Severity = severityInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec for Get all migration rest apiThe rest api returns the
        /// config ids for all configs imported against the selected
        /// storsimple resource
        /// </summary>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body for get migration plan rest api.
        /// </returns>
        public async Task<MigrationPlanList> GetAllMigrationPlanAsync(CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAllMigrationPlanAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/plan";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationPlanList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationPlanList();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement arrayOfMigrationPlanSequenceElement = responseDoc.Element(XName.Get("ArrayOfMigrationPlan", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (arrayOfMigrationPlanSequenceElement != null)
                        {
                            foreach (XElement arrayOfMigrationPlanElement in arrayOfMigrationPlanSequenceElement.Elements(XName.Get("MigrationPlan", "http://windowscloudbackup.com/CiS/V2013_03")))
                            {
                                MigrationPlan migrationPlanInstance = new MigrationPlan();
                                result.MigrationPlans.Add(migrationPlanInstance);
                                
                                XElement configIdElement = arrayOfMigrationPlanElement.Element(XName.Get("ConfigId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (configIdElement != null)
                                {
                                    string configIdInstance = configIdElement.Value;
                                    migrationPlanInstance.ConfigId = configIdInstance;
                                }
                                
                                XElement deviceNameElement = arrayOfMigrationPlanElement.Element(XName.Get("DeviceName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (deviceNameElement != null)
                                {
                                    string deviceNameInstance = deviceNameElement.Value;
                                    migrationPlanInstance.DeviceName = deviceNameInstance;
                                }
                                
                                XElement migrationPlanInfoSequenceElement = arrayOfMigrationPlanElement.Element(XName.Get("MigrationPlanInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (migrationPlanInfoSequenceElement != null)
                                {
                                    foreach (XElement migrationPlanInfoElement in migrationPlanInfoSequenceElement.Elements(XName.Get("MigrationPlanInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                    {
                                        MigrationPlanInfo migrationPlanInfoInstance = new MigrationPlanInfo();
                                        migrationPlanInstance.MigrationPlanInfo.Add(migrationPlanInfoInstance);
                                        
                                        XElement dataContainerNameElement = migrationPlanInfoElement.Element(XName.Get("DataContainerName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (dataContainerNameElement != null)
                                        {
                                            string dataContainerNameInstance = dataContainerNameElement.Value;
                                            migrationPlanInfoInstance.DataContainerName = dataContainerNameInstance;
                                        }
                                        
                                        XElement planStatusElement = migrationPlanInfoElement.Element(XName.Get("PlanStatus", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (planStatusElement != null)
                                        {
                                            MigrationPlanStatus planStatusInstance = ((MigrationPlanStatus)Enum.Parse(typeof(MigrationPlanStatus), planStatusElement.Value, true));
                                            migrationPlanInfoInstance.PlanStatus = planStatusInstance;
                                        }
                                        
                                        XElement planMessageInfoListSequenceElement = migrationPlanInfoElement.Element(XName.Get("PlanMessageInfoList", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (planMessageInfoListSequenceElement != null)
                                        {
                                            foreach (XElement planMessageInfoListElement in planMessageInfoListSequenceElement.Elements(XName.Get("HcsMessageInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                            {
                                                HcsMessageInfo hcsMessageInfoInstance = new HcsMessageInfo();
                                                migrationPlanInfoInstance.PlanMessageInfoList.Add(hcsMessageInfoInstance);
                                                
                                                XElement errorCodeElement = planMessageInfoListElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (errorCodeElement != null)
                                                {
                                                    int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                                    hcsMessageInfoInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                XElement messageElement = planMessageInfoListElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (messageElement != null)
                                                {
                                                    string messageInstance = messageElement.Value;
                                                    hcsMessageInfoInstance.Message = messageInstance;
                                                }
                                                
                                                XElement recommendationElement = planMessageInfoListElement.Element(XName.Get("Recommendation", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (recommendationElement != null)
                                                {
                                                    string recommendationInstance = recommendationElement.Value;
                                                    hcsMessageInfoInstance.Recommendation = recommendationInstance;
                                                }
                                                
                                                XElement severityElement = planMessageInfoListElement.Element(XName.Get("Severity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (severityElement != null)
                                                {
                                                    int severityInstance = int.Parse(severityElement.Value, CultureInfo.InvariantCulture);
                                                    hcsMessageInfoInstance.Severity = severityInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement estimatedTimeInMinutesElement = migrationPlanInfoElement.Element(XName.Get("EstimatedTimeInMinutes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (estimatedTimeInMinutesElement != null)
                                        {
                                            int estimatedTimeInMinutesInstance = int.Parse(estimatedTimeInMinutesElement.Value, CultureInfo.InvariantCulture);
                                            migrationPlanInfoInstance.EstimatedTimeInMinutes = estimatedTimeInMinutesInstance;
                                        }
                                        
                                        XElement estimatedTimeInMinutesForLargestBackupElement = migrationPlanInfoElement.Element(XName.Get("EstimatedTimeInMinutesForLargestBackup", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (estimatedTimeInMinutesForLargestBackupElement != null)
                                        {
                                            int estimatedTimeInMinutesForLargestBackupInstance = int.Parse(estimatedTimeInMinutesForLargestBackupElement.Value, CultureInfo.InvariantCulture);
                                            migrationPlanInfoInstance.EstimatedTimeInMinutesForLargestBackup = estimatedTimeInMinutesForLargestBackupInstance;
                                        }
                                        
                                        XElement assumedBandwidthInMbpsElement = migrationPlanInfoElement.Element(XName.Get("AssumedBandwidthInMbps", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (assumedBandwidthInMbpsElement != null)
                                        {
                                            int assumedBandwidthInMbpsInstance = int.Parse(assumedBandwidthInMbpsElement.Value, CultureInfo.InvariantCulture);
                                            migrationPlanInfoInstance.AssumedBandwidthInMbps = assumedBandwidthInMbpsInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec for Get data container migration statusThe rest api
        /// returns the status of volume container migration status from
        /// service for all volume container in the specified config
        /// </summary>
        /// <param name='configId'>
        /// Required. Unique identifier for config specified while importing
        /// the config to service
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body for get data container migration status.
        /// </returns>
        public async Task<MigrationDataContainerStatusList> GetDataContainerMigrationStatusAsync(string configId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (configId == null)
            {
                throw new ArgumentNullException("configId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetDataContainerMigrationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/configs/";
            url = url + Uri.EscapeDataString(configId);
            url = url + "/datacontainerstatus";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationDataContainerStatusList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationDataContainerStatusList();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement arrayOfMigrationDataContainerStatusSequenceElement = responseDoc.Element(XName.Get("ArrayOfMigrationDataContainerStatus", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (arrayOfMigrationDataContainerStatusSequenceElement != null)
                        {
                            foreach (XElement arrayOfMigrationDataContainerStatusElement in arrayOfMigrationDataContainerStatusSequenceElement.Elements(XName.Get("MigrationDataContainerStatus", "http://windowscloudbackup.com/CiS/V2013_03")))
                            {
                                MigrationDataContainerStatus migrationDataContainerStatusInstance = new MigrationDataContainerStatus();
                                result.MigrationDataContainerStatuses.Add(migrationDataContainerStatusInstance);
                                
                                XElement backupSetsSequenceElement = arrayOfMigrationDataContainerStatusElement.Element(XName.Get("BackupSets", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (backupSetsSequenceElement != null)
                                {
                                    foreach (XElement backupSetsElement in backupSetsSequenceElement.Elements(XName.Get("MigrationBackupSet", "http://windowscloudbackup.com/CiS/V2013_03")))
                                    {
                                        MigrationBackupSet migrationBackupSetInstance = new MigrationBackupSet();
                                        migrationDataContainerStatusInstance.BackupSets.Add(migrationBackupSetInstance);
                                        
                                        XElement backupPolicyNameElement = backupSetsElement.Element(XName.Get("BackupPolicyName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (backupPolicyNameElement != null)
                                        {
                                            string backupPolicyNameInstance = backupPolicyNameElement.Value;
                                            migrationBackupSetInstance.BackupPolicyName = backupPolicyNameInstance;
                                        }
                                        
                                        XElement creationTimeElement = backupSetsElement.Element(XName.Get("CreationTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (creationTimeElement != null)
                                        {
                                            DateTime creationTimeInstance = DateTime.Parse(creationTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                            migrationBackupSetInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        XElement statusElement = backupSetsElement.Element(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (statusElement != null)
                                        {
                                            BackupStatus statusInstance = ((BackupStatus)Enum.Parse(typeof(BackupStatus), statusElement.Value, true));
                                            migrationBackupSetInstance.Status = statusInstance;
                                        }
                                        
                                        XElement messageElement = backupSetsElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (messageElement != null)
                                        {
                                            HcsMessageInfo messageInstance = new HcsMessageInfo();
                                            migrationBackupSetInstance.Message = messageInstance;
                                            
                                            XElement errorCodeElement = messageElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (errorCodeElement != null)
                                            {
                                                int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                                messageInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            XElement messageElement2 = messageElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (messageElement2 != null)
                                            {
                                                string messageInstance2 = messageElement2.Value;
                                                messageInstance.Message = messageInstance2;
                                            }
                                            
                                            XElement recommendationElement = messageElement.Element(XName.Get("Recommendation", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (recommendationElement != null)
                                            {
                                                string recommendationInstance = recommendationElement.Value;
                                                messageInstance.Recommendation = recommendationInstance;
                                            }
                                            
                                            XElement severityElement = messageElement.Element(XName.Get("Severity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (severityElement != null)
                                            {
                                                int severityInstance = int.Parse(severityElement.Value, CultureInfo.InvariantCulture);
                                                messageInstance.Severity = severityInstance;
                                            }
                                        }
                                        
                                        XElement elementsSequenceElement = backupSetsElement.Element(XName.Get("Elements", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (elementsSequenceElement != null)
                                        {
                                            foreach (XElement elementsElement in elementsSequenceElement.Elements(XName.Get("MigrationBackupElement", "http://windowscloudbackup.com/CiS/V2013_03")))
                                            {
                                                MigrationBackupElement migrationBackupElementInstance = new MigrationBackupElement();
                                                migrationBackupSetInstance.Elements.Add(migrationBackupElementInstance);
                                                
                                                XElement sourceVolumeIdElement = elementsElement.Element(XName.Get("SourceVolumeId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (sourceVolumeIdElement != null)
                                                {
                                                    string sourceVolumeIdInstance = sourceVolumeIdElement.Value;
                                                    migrationBackupElementInstance.SourceVolumeId = sourceVolumeIdInstance;
                                                }
                                                
                                                XElement sourceVolumeNameElement = elementsElement.Element(XName.Get("SourceVolumeName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (sourceVolumeNameElement != null)
                                                {
                                                    string sourceVolumeNameInstance = sourceVolumeNameElement.Value;
                                                    migrationBackupElementInstance.SourceVolumeName = sourceVolumeNameInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                XElement dataContainerNameElement = arrayOfMigrationDataContainerStatusElement.Element(XName.Get("DataContainerName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (dataContainerNameElement != null)
                                {
                                    string dataContainerNameInstance = dataContainerNameElement.Value;
                                    migrationDataContainerStatusInstance.CloudConfigurationName = dataContainerNameInstance;
                                }
                                
                                XElement messageInfoElement = arrayOfMigrationDataContainerStatusElement.Element(XName.Get("MessageInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (messageInfoElement != null)
                                {
                                    HcsMessageInfo messageInfoInstance = new HcsMessageInfo();
                                    migrationDataContainerStatusInstance.MessageInfo = messageInfoInstance;
                                    
                                    XElement errorCodeElement2 = messageInfoElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (errorCodeElement2 != null)
                                    {
                                        int errorCodeInstance2 = int.Parse(errorCodeElement2.Value, CultureInfo.InvariantCulture);
                                        messageInfoInstance.ErrorCode = errorCodeInstance2;
                                    }
                                    
                                    XElement messageElement3 = messageInfoElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (messageElement3 != null)
                                    {
                                        string messageInstance3 = messageElement3.Value;
                                        messageInfoInstance.Message = messageInstance3;
                                    }
                                    
                                    XElement recommendationElement2 = messageInfoElement.Element(XName.Get("Recommendation", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (recommendationElement2 != null)
                                    {
                                        string recommendationInstance2 = recommendationElement2.Value;
                                        messageInfoInstance.Recommendation = recommendationInstance2;
                                    }
                                    
                                    XElement severityElement2 = messageInfoElement.Element(XName.Get("Severity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (severityElement2 != null)
                                    {
                                        int severityInstance2 = int.Parse(severityElement2.Value, CultureInfo.InvariantCulture);
                                        messageInfoInstance.Severity = severityInstance2;
                                    }
                                }
                                
                                XElement percentageCompletedElement = arrayOfMigrationDataContainerStatusElement.Element(XName.Get("PercentageCompleted", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (percentageCompletedElement != null)
                                {
                                    int percentageCompletedInstance = int.Parse(percentageCompletedElement.Value, CultureInfo.InvariantCulture);
                                    migrationDataContainerStatusInstance.PercentageCompleted = percentageCompletedInstance;
                                }
                                
                                XElement statusElement2 = arrayOfMigrationDataContainerStatusElement.Element(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (statusElement2 != null)
                                {
                                    MigrationStatus statusInstance2 = ((MigrationStatus)Enum.Parse(typeof(MigrationStatus), statusElement2.Value, true));
                                    migrationDataContainerStatusInstance.Status = statusInstance2;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec for get confirm migration status rest apiThe rest api
        /// gets the confirm (commit/rollback) status from service for all
        /// volume container in the specified config
        /// </summary>
        /// <param name='configId'>
        /// Required. Unique identifier for config specified while importing
        /// the config to service
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body of migration confirm status rest api.
        /// </returns>
        public async Task<MigrationConfirmStatus> GetMigrationConfirmStatusAsync(string configId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (configId == null)
            {
                throw new ArgumentNullException("configId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetMigrationConfirmStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/configs/";
            url = url + Uri.EscapeDataString(configId);
            url = url + "/confirmationstatus";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationConfirmStatus result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationConfirmStatus();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement confirmStatusElement = responseDoc.Element(XName.Get("ConfirmStatus", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (confirmStatusElement != null)
                        {
                            XElement containerConfirmStatusSequenceElement = confirmStatusElement.Element(XName.Get("ContainerConfirmStatus", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (containerConfirmStatusSequenceElement != null)
                            {
                                foreach (XElement containerConfirmStatusElement in containerConfirmStatusSequenceElement.Elements(XName.Get("ContainerConfirmStatus", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    MigrationContainerConfirmStatus containerConfirmStatusInstance = new MigrationContainerConfirmStatus();
                                    result.ContainerConfirmStatus.Add(containerConfirmStatusInstance);
                                    
                                    XElement containerNameElement = containerConfirmStatusElement.Element(XName.Get("ContainerName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (containerNameElement != null)
                                    {
                                        string containerNameInstance = containerNameElement.Value;
                                        containerConfirmStatusInstance.CloudConfigurationName = containerNameInstance;
                                    }
                                    
                                    XElement percentageCompleteElement = containerConfirmStatusElement.Element(XName.Get("PercentageComplete", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (percentageCompleteElement != null)
                                    {
                                        int percentageCompleteInstance = int.Parse(percentageCompleteElement.Value, CultureInfo.InvariantCulture);
                                        containerConfirmStatusInstance.PercentageCompleted = percentageCompleteInstance;
                                    }
                                    
                                    XElement statusElement = containerConfirmStatusElement.Element(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (statusElement != null)
                                    {
                                        MigrationDataContainerConfirmStatus statusInstance = ((MigrationDataContainerConfirmStatus)Enum.Parse(typeof(MigrationDataContainerConfirmStatus), statusElement.Value, true));
                                        containerConfirmStatusInstance.Status = statusInstance;
                                    }
                                    
                                    XElement operationElement = containerConfirmStatusElement.Element(XName.Get("Operation", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (operationElement != null)
                                    {
                                        MigrationOperation operationInstance = ((MigrationOperation)Enum.Parse(typeof(MigrationOperation), operationElement.Value, true));
                                        containerConfirmStatusInstance.Operation = operationInstance;
                                    }
                                    
                                    XElement statusMessageSequenceElement = containerConfirmStatusElement.Element(XName.Get("StatusMessage", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (statusMessageSequenceElement != null)
                                    {
                                        foreach (XElement statusMessageElement in statusMessageSequenceElement.Elements(XName.Get("HcsMessageInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                        {
                                            HcsMessageInfo hcsMessageInfoInstance = new HcsMessageInfo();
                                            containerConfirmStatusInstance.StatusMessage.Add(hcsMessageInfoInstance);
                                            
                                            XElement errorCodeElement = statusMessageElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (errorCodeElement != null)
                                            {
                                                int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                                hcsMessageInfoInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            XElement messageElement = statusMessageElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (messageElement != null)
                                            {
                                                string messageInstance = messageElement.Value;
                                                hcsMessageInfoInstance.Message = messageInstance;
                                            }
                                            
                                            XElement recommendationElement = statusMessageElement.Element(XName.Get("Recommendation", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (recommendationElement != null)
                                            {
                                                string recommendationInstance = recommendationElement.Value;
                                                hcsMessageInfoInstance.Recommendation = recommendationInstance;
                                            }
                                            
                                            XElement severityElement = statusMessageElement.Element(XName.Get("Severity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (severityElement != null)
                                            {
                                                int severityInstance = int.Parse(severityElement.Value, CultureInfo.InvariantCulture);
                                                hcsMessageInfoInstance.Severity = severityInstance;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec for get migration planThe rest api get the migration
        /// plan from service for all volume container(s) in the specified
        /// config
        /// </summary>
        /// <param name='configId'>
        /// Required. Unique identifier for config specified while importing
        /// the config to service
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body for get migration plan rest api.
        /// </returns>
        public async Task<MigrationPlanList> GetMigrationPlanAsync(string configId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (configId == null)
            {
                throw new ArgumentNullException("configId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetMigrationPlanAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/plan";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("configId=" + Uri.EscapeDataString(configId));
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationPlanList result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationPlanList();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement arrayOfMigrationPlanSequenceElement = responseDoc.Element(XName.Get("ArrayOfMigrationPlan", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (arrayOfMigrationPlanSequenceElement != null)
                        {
                            foreach (XElement arrayOfMigrationPlanElement in arrayOfMigrationPlanSequenceElement.Elements(XName.Get("MigrationPlan", "http://windowscloudbackup.com/CiS/V2013_03")))
                            {
                                MigrationPlan migrationPlanInstance = new MigrationPlan();
                                result.MigrationPlans.Add(migrationPlanInstance);
                                
                                XElement configIdElement = arrayOfMigrationPlanElement.Element(XName.Get("ConfigId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (configIdElement != null)
                                {
                                    string configIdInstance = configIdElement.Value;
                                    migrationPlanInstance.ConfigId = configIdInstance;
                                }
                                
                                XElement deviceNameElement = arrayOfMigrationPlanElement.Element(XName.Get("DeviceName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (deviceNameElement != null)
                                {
                                    string deviceNameInstance = deviceNameElement.Value;
                                    migrationPlanInstance.DeviceName = deviceNameInstance;
                                }
                                
                                XElement migrationPlanInfoSequenceElement = arrayOfMigrationPlanElement.Element(XName.Get("MigrationPlanInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (migrationPlanInfoSequenceElement != null)
                                {
                                    foreach (XElement migrationPlanInfoElement in migrationPlanInfoSequenceElement.Elements(XName.Get("MigrationPlanInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                    {
                                        MigrationPlanInfo migrationPlanInfoInstance = new MigrationPlanInfo();
                                        migrationPlanInstance.MigrationPlanInfo.Add(migrationPlanInfoInstance);
                                        
                                        XElement dataContainerNameElement = migrationPlanInfoElement.Element(XName.Get("DataContainerName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (dataContainerNameElement != null)
                                        {
                                            string dataContainerNameInstance = dataContainerNameElement.Value;
                                            migrationPlanInfoInstance.DataContainerName = dataContainerNameInstance;
                                        }
                                        
                                        XElement planStatusElement = migrationPlanInfoElement.Element(XName.Get("PlanStatus", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (planStatusElement != null)
                                        {
                                            MigrationPlanStatus planStatusInstance = ((MigrationPlanStatus)Enum.Parse(typeof(MigrationPlanStatus), planStatusElement.Value, true));
                                            migrationPlanInfoInstance.PlanStatus = planStatusInstance;
                                        }
                                        
                                        XElement planMessageInfoListSequenceElement = migrationPlanInfoElement.Element(XName.Get("PlanMessageInfoList", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (planMessageInfoListSequenceElement != null)
                                        {
                                            foreach (XElement planMessageInfoListElement in planMessageInfoListSequenceElement.Elements(XName.Get("HcsMessageInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                            {
                                                HcsMessageInfo hcsMessageInfoInstance = new HcsMessageInfo();
                                                migrationPlanInfoInstance.PlanMessageInfoList.Add(hcsMessageInfoInstance);
                                                
                                                XElement errorCodeElement = planMessageInfoListElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (errorCodeElement != null)
                                                {
                                                    int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                                    hcsMessageInfoInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                XElement messageElement = planMessageInfoListElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (messageElement != null)
                                                {
                                                    string messageInstance = messageElement.Value;
                                                    hcsMessageInfoInstance.Message = messageInstance;
                                                }
                                                
                                                XElement recommendationElement = planMessageInfoListElement.Element(XName.Get("Recommendation", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (recommendationElement != null)
                                                {
                                                    string recommendationInstance = recommendationElement.Value;
                                                    hcsMessageInfoInstance.Recommendation = recommendationInstance;
                                                }
                                                
                                                XElement severityElement = planMessageInfoListElement.Element(XName.Get("Severity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (severityElement != null)
                                                {
                                                    int severityInstance = int.Parse(severityElement.Value, CultureInfo.InvariantCulture);
                                                    hcsMessageInfoInstance.Severity = severityInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement estimatedTimeInMinutesElement = migrationPlanInfoElement.Element(XName.Get("EstimatedTimeInMinutes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (estimatedTimeInMinutesElement != null)
                                        {
                                            int estimatedTimeInMinutesInstance = int.Parse(estimatedTimeInMinutesElement.Value, CultureInfo.InvariantCulture);
                                            migrationPlanInfoInstance.EstimatedTimeInMinutes = estimatedTimeInMinutesInstance;
                                        }
                                        
                                        XElement estimatedTimeInMinutesForLargestBackupElement = migrationPlanInfoElement.Element(XName.Get("EstimatedTimeInMinutesForLargestBackup", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (estimatedTimeInMinutesForLargestBackupElement != null)
                                        {
                                            int estimatedTimeInMinutesForLargestBackupInstance = int.Parse(estimatedTimeInMinutesForLargestBackupElement.Value, CultureInfo.InvariantCulture);
                                            migrationPlanInfoInstance.EstimatedTimeInMinutesForLargestBackup = estimatedTimeInMinutesForLargestBackupInstance;
                                        }
                                        
                                        XElement assumedBandwidthInMbpsElement = migrationPlanInfoElement.Element(XName.Get("AssumedBandwidthInMbps", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (assumedBandwidthInMbpsElement != null)
                                        {
                                            int assumedBandwidthInMbpsInstance = int.Parse(assumedBandwidthInMbpsElement.Value, CultureInfo.InvariantCulture);
                                            migrationPlanInfoInstance.AssumedBandwidthInMbps = assumedBandwidthInMbpsInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec for import legacy appliance config rest api.The rest api
        /// imports the legacy config to the service
        /// </summary>
        /// <param name='configId'>
        /// Required. Unique id for config being imported
        /// </param>
        /// <param name='request'>
        /// Required. Legacy appliance config to be imported
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> ImportLegacyApplianceConfigAsync(string configId, LegacyApplianceConfig request, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (configId == null)
            {
                throw new ArgumentNullException("configId");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }
            if (request.AccessControlRecords == null)
            {
                throw new ArgumentNullException("request.AccessControlRecords");
            }
            if (request.AccessControlRecords != null)
            {
                foreach (AccessControlRecord accessControlRecordsParameterItem in request.AccessControlRecords)
                {
                    if (accessControlRecordsParameterItem.InitiatorName == null)
                    {
                        throw new ArgumentNullException("request.AccessControlRecords.InitiatorName");
                    }
                    if (accessControlRecordsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("request.AccessControlRecords.Name");
                    }
                }
            }
            if (request.BackupPolicies == null)
            {
                throw new ArgumentNullException("request.BackupPolicies");
            }
            if (request.BackupPolicies != null)
            {
                foreach (MigrationBackupPolicy backupPoliciesParameterItem in request.BackupPolicies)
                {
                    if (backupPoliciesParameterItem.BackupSchedules == null)
                    {
                        throw new ArgumentNullException("request.BackupPolicies.BackupSchedules");
                    }
                    if (backupPoliciesParameterItem.BackupSchedules != null)
                    {
                        foreach (BackupScheduleBase backupSchedulesParameterItem in backupPoliciesParameterItem.BackupSchedules)
                        {
                            if (backupSchedulesParameterItem.Recurrence == null)
                            {
                                throw new ArgumentNullException("request.BackupPolicies.BackupSchedules.Recurrence");
                            }
                            if (backupSchedulesParameterItem.StartTime == null)
                            {
                                throw new ArgumentNullException("request.BackupPolicies.BackupSchedules.StartTime");
                            }
                        }
                    }
                    if (backupPoliciesParameterItem.CreatedOn == null)
                    {
                        throw new ArgumentNullException("request.BackupPolicies.CreatedOn");
                    }
                    if (backupPoliciesParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("request.BackupPolicies.Name");
                    }
                    if (backupPoliciesParameterItem.VirtualDiskGroupId == null)
                    {
                        throw new ArgumentNullException("request.BackupPolicies.VirtualDiskGroupId");
                    }
                }
            }
            if (request.BandwidthSettings == null)
            {
                throw new ArgumentNullException("request.BandwidthSettings");
            }
            if (request.BandwidthSettings != null)
            {
                foreach (BandwidthSetting bandwidthSettingsParameterItem in request.BandwidthSettings)
                {
                    if (bandwidthSettingsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("request.BandwidthSettings.Name");
                    }
                    if (bandwidthSettingsParameterItem.Schedules == null)
                    {
                        throw new ArgumentNullException("request.BandwidthSettings.Schedules");
                    }
                    if (bandwidthSettingsParameterItem.Schedules != null)
                    {
                        foreach (BandwidthSchedule schedulesParameterItem in bandwidthSettingsParameterItem.Schedules)
                        {
                            if (schedulesParameterItem.Days == null)
                            {
                                throw new ArgumentNullException("request.BandwidthSettings.Schedules.Days");
                            }
                            if (schedulesParameterItem.Start == null)
                            {
                                throw new ArgumentNullException("request.BandwidthSettings.Schedules.Start");
                            }
                            if (schedulesParameterItem.Stop == null)
                            {
                                throw new ArgumentNullException("request.BandwidthSettings.Schedules.Stop");
                            }
                        }
                    }
                }
            }
            if (request.CloudConfigurations == null)
            {
                throw new ArgumentNullException("request.CloudConfigurations");
            }
            if (request.CloudConfigurations != null)
            {
                foreach (MigrationDataContainer cloudConfigurationsParameterItem in request.CloudConfigurations)
                {
                    if (cloudConfigurationsParameterItem.BackupBucket == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.BackupBucket");
                    }
                    if (cloudConfigurationsParameterItem.BackupStorageAccountCredential == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.BackupStorageAccountCredential");
                    }
                    if (cloudConfigurationsParameterItem.BackupStorageAccountCredential.Hostname == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.BackupStorageAccountCredential.Hostname");
                    }
                    if (cloudConfigurationsParameterItem.BackupStorageAccountCredential.Login == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.BackupStorageAccountCredential.Login");
                    }
                    if (cloudConfigurationsParameterItem.BackupStorageAccountCredential.Password == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.BackupStorageAccountCredential.Password");
                    }
                    if (cloudConfigurationsParameterItem.BandwidthSetting == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.BandwidthSetting");
                    }
                    if (cloudConfigurationsParameterItem.BandwidthSetting.Name == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.BandwidthSetting.Name");
                    }
                    if (cloudConfigurationsParameterItem.BandwidthSetting.Schedules == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.BandwidthSetting.Schedules");
                    }
                    if (cloudConfigurationsParameterItem.BandwidthSetting.Schedules != null)
                    {
                        foreach (BandwidthSchedule schedulesParameterItem2 in cloudConfigurationsParameterItem.BandwidthSetting.Schedules)
                        {
                            if (schedulesParameterItem2.Days == null)
                            {
                                throw new ArgumentNullException("request.CloudConfigurations.BandwidthSetting.Schedules.Days");
                            }
                            if (schedulesParameterItem2.Start == null)
                            {
                                throw new ArgumentNullException("request.CloudConfigurations.BandwidthSetting.Schedules.Start");
                            }
                            if (schedulesParameterItem2.Stop == null)
                            {
                                throw new ArgumentNullException("request.CloudConfigurations.BandwidthSetting.Schedules.Stop");
                            }
                        }
                    }
                    if (cloudConfigurationsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.Name");
                    }
                    if (cloudConfigurationsParameterItem.PrimaryBucket == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.PrimaryBucket");
                    }
                    if (cloudConfigurationsParameterItem.PrimaryStorageAccountCredential == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.PrimaryStorageAccountCredential");
                    }
                    if (cloudConfigurationsParameterItem.PrimaryStorageAccountCredential.Hostname == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.PrimaryStorageAccountCredential.Hostname");
                    }
                    if (cloudConfigurationsParameterItem.PrimaryStorageAccountCredential.Login == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.PrimaryStorageAccountCredential.Login");
                    }
                    if (cloudConfigurationsParameterItem.PrimaryStorageAccountCredential.Password == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.PrimaryStorageAccountCredential.Password");
                    }
                    if (cloudConfigurationsParameterItem.SecretsEncryptionThumbprint == null)
                    {
                        throw new ArgumentNullException("request.CloudConfigurations.SecretsEncryptionThumbprint");
                    }
                }
            }
            if (request.DeviceId == null)
            {
                throw new ArgumentNullException("request.DeviceId");
            }
            if (request.InboundChapSettings != null)
            {
                foreach (MigrationChapSetting inboundChapSettingsParameterItem in request.InboundChapSettings)
                {
                    if (inboundChapSettingsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("request.InboundChapSettings.Name");
                    }
                    if (inboundChapSettingsParameterItem.Password == null)
                    {
                        throw new ArgumentNullException("request.InboundChapSettings.Password");
                    }
                    if (inboundChapSettingsParameterItem.SecretsEncryptionThumbprint == null)
                    {
                        throw new ArgumentNullException("request.InboundChapSettings.SecretsEncryptionThumbprint");
                    }
                }
            }
            if (request.Name == null)
            {
                throw new ArgumentNullException("request.Name");
            }
            if (request.StorageAccountCredentials == null)
            {
                throw new ArgumentNullException("request.StorageAccountCredentials");
            }
            if (request.StorageAccountCredentials != null)
            {
                foreach (StorageAccountCredential storageAccountCredentialsParameterItem in request.StorageAccountCredentials)
                {
                    if (storageAccountCredentialsParameterItem.Hostname == null)
                    {
                        throw new ArgumentNullException("request.StorageAccountCredentials.Hostname");
                    }
                    if (storageAccountCredentialsParameterItem.Login == null)
                    {
                        throw new ArgumentNullException("request.StorageAccountCredentials.Login");
                    }
                    if (storageAccountCredentialsParameterItem.Password == null)
                    {
                        throw new ArgumentNullException("request.StorageAccountCredentials.Password");
                    }
                }
            }
            if (request.TargetChapSettings != null)
            {
                foreach (MigrationChapSetting targetChapSettingsParameterItem in request.TargetChapSettings)
                {
                    if (targetChapSettingsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("request.TargetChapSettings.Name");
                    }
                    if (targetChapSettingsParameterItem.Password == null)
                    {
                        throw new ArgumentNullException("request.TargetChapSettings.Password");
                    }
                    if (targetChapSettingsParameterItem.SecretsEncryptionThumbprint == null)
                    {
                        throw new ArgumentNullException("request.TargetChapSettings.SecretsEncryptionThumbprint");
                    }
                }
            }
            if (request.VolumeGroups == null)
            {
                throw new ArgumentNullException("request.VolumeGroups");
            }
            if (request.VolumeGroups != null)
            {
                foreach (VirtualDiskGroup volumeGroupsParameterItem in request.VolumeGroups)
                {
                    if (volumeGroupsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("request.VolumeGroups.Name");
                    }
                    if (volumeGroupsParameterItem.VirtualDiskList == null)
                    {
                        throw new ArgumentNullException("request.VolumeGroups.VirtualDiskList");
                    }
                }
            }
            if (request.Volumes == null)
            {
                throw new ArgumentNullException("request.Volumes");
            }
            if (request.Volumes != null)
            {
                foreach (VirtualDisk volumesParameterItem in request.Volumes)
                {
                    if (volumesParameterItem.AcrList == null)
                    {
                        throw new ArgumentNullException("request.Volumes.AcrList");
                    }
                    if (volumesParameterItem.AcrList != null)
                    {
                        foreach (AccessControlRecord acrListParameterItem in volumesParameterItem.AcrList)
                        {
                            if (acrListParameterItem.InitiatorName == null)
                            {
                                throw new ArgumentNullException("request.Volumes.AcrList.InitiatorName");
                            }
                            if (acrListParameterItem.Name == null)
                            {
                                throw new ArgumentNullException("request.Volumes.AcrList.Name");
                            }
                        }
                    }
                    if (volumesParameterItem.DataContainer == null)
                    {
                        throw new ArgumentNullException("request.Volumes.DataContainer");
                    }
                    if (volumesParameterItem.DataContainer.Name == null)
                    {
                        throw new ArgumentNullException("request.Volumes.DataContainer.Name");
                    }
                    if (volumesParameterItem.DataContainer.PrimaryStorageAccountCredential == null)
                    {
                        throw new ArgumentNullException("request.Volumes.DataContainer.PrimaryStorageAccountCredential");
                    }
                    if (volumesParameterItem.DataContainer.PrimaryStorageAccountCredential.Hostname == null)
                    {
                        throw new ArgumentNullException("request.Volumes.DataContainer.PrimaryStorageAccountCredential.Hostname");
                    }
                    if (volumesParameterItem.DataContainer.PrimaryStorageAccountCredential.Login == null)
                    {
                        throw new ArgumentNullException("request.Volumes.DataContainer.PrimaryStorageAccountCredential.Login");
                    }
                    if (volumesParameterItem.DataContainer.PrimaryStorageAccountCredential.Password == null)
                    {
                        throw new ArgumentNullException("request.Volumes.DataContainer.PrimaryStorageAccountCredential.Password");
                    }
                    if (volumesParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("request.Volumes.Name");
                    }
                }
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("request", request);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ImportLegacyApplianceConfigAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/configs/";
            url = url + Uri.EscapeDataString(configId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement legacyApplianceConfigElement = new XElement(XName.Get("LegacyApplianceConfig", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(legacyApplianceConfigElement);
                
                if (request.InstanceId != null)
                {
                    XElement instanceIdElement = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement.Value = request.InstanceId;
                    legacyApplianceConfigElement.Add(instanceIdElement);
                }
                
                XElement nameElement = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement.Value = request.Name;
                legacyApplianceConfigElement.Add(nameElement);
                
                XElement operationInProgressElement = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement.Value = request.OperationInProgress.ToString();
                legacyApplianceConfigElement.Add(operationInProgressElement);
                
                XElement accessControlRecordsSequenceElement = new XElement(XName.Get("AccessControlRecords", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (AccessControlRecord accessControlRecordsItem in request.AccessControlRecords)
                {
                    XElement accessControlRecordElement = new XElement(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03"));
                    accessControlRecordsSequenceElement.Add(accessControlRecordElement);
                    
                    if (accessControlRecordsItem.InstanceId != null)
                    {
                        XElement instanceIdElement2 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement2.Value = accessControlRecordsItem.InstanceId;
                        accessControlRecordElement.Add(instanceIdElement2);
                    }
                    
                    XElement nameElement2 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement2.Value = accessControlRecordsItem.Name;
                    accessControlRecordElement.Add(nameElement2);
                    
                    if (accessControlRecordsItem.GlobalId != null)
                    {
                        XElement globalIdElement = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                        globalIdElement.Value = accessControlRecordsItem.GlobalId;
                        accessControlRecordElement.Add(globalIdElement);
                    }
                    else
                    {
                        XElement emptyElement = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                        XAttribute nilAttribute = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        nilAttribute.Value = "true";
                        emptyElement.Add(nilAttribute);
                        accessControlRecordElement.Add(emptyElement);
                    }
                    
                    XElement operationInProgressElement2 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement2.Value = accessControlRecordsItem.OperationInProgress.ToString();
                    accessControlRecordElement.Add(operationInProgressElement2);
                    
                    XElement initiatorNameElement = new XElement(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                    initiatorNameElement.Value = accessControlRecordsItem.InitiatorName;
                    accessControlRecordElement.Add(initiatorNameElement);
                    
                    XElement volumeCountElement = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement.Value = accessControlRecordsItem.VolumeCount.ToString();
                    accessControlRecordElement.Add(volumeCountElement);
                }
                legacyApplianceConfigElement.Add(accessControlRecordsSequenceElement);
                
                XElement backupPoliciesSequenceElement = new XElement(XName.Get("BackupPolicies", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (MigrationBackupPolicy backupPoliciesItem in request.BackupPolicies)
                {
                    XElement migrationBackupPolicyElement = new XElement(XName.Get("MigrationBackupPolicy", "http://windowscloudbackup.com/CiS/V2013_03"));
                    backupPoliciesSequenceElement.Add(migrationBackupPolicyElement);
                    
                    if (backupPoliciesItem.InstanceId != null)
                    {
                        XElement instanceIdElement3 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement3.Value = backupPoliciesItem.InstanceId;
                        migrationBackupPolicyElement.Add(instanceIdElement3);
                    }
                    
                    XElement nameElement3 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement3.Value = backupPoliciesItem.Name;
                    migrationBackupPolicyElement.Add(nameElement3);
                    
                    XElement operationInProgressElement3 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement3.Value = backupPoliciesItem.OperationInProgress.ToString();
                    migrationBackupPolicyElement.Add(operationInProgressElement3);
                    
                    XElement backupSchedulesSequenceElement = new XElement(XName.Get("BackupSchedules", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (BackupScheduleBase backupSchedulesItem in backupPoliciesItem.BackupSchedules)
                    {
                        XElement backupScheduleBaseElement = new XElement(XName.Get("BackupScheduleBase", "http://windowscloudbackup.com/CiS/V2013_03"));
                        backupSchedulesSequenceElement.Add(backupScheduleBaseElement);
                        
                        XElement backupTypeElement = new XElement(XName.Get("BackupType", "http://windowscloudbackup.com/CiS/V2013_03"));
                        backupTypeElement.Value = backupSchedulesItem.BackupType.ToString();
                        backupScheduleBaseElement.Add(backupTypeElement);
                        
                        XElement recurrenceElement = new XElement(XName.Get("Recurrence", "http://windowscloudbackup.com/CiS/V2013_03"));
                        backupScheduleBaseElement.Add(recurrenceElement);
                        
                        XElement recurrenceTypeElement = new XElement(XName.Get("RecurrenceType", "http://windowscloudbackup.com/CiS/V2013_03"));
                        recurrenceTypeElement.Value = backupSchedulesItem.Recurrence.RecurrenceType.ToString();
                        recurrenceElement.Add(recurrenceTypeElement);
                        
                        XElement recurrenceValueElement = new XElement(XName.Get("RecurrenceValue", "http://windowscloudbackup.com/CiS/V2013_03"));
                        recurrenceValueElement.Value = backupSchedulesItem.Recurrence.RecurrenceValue.ToString();
                        recurrenceElement.Add(recurrenceValueElement);
                        
                        XElement retentionCountElement = new XElement(XName.Get("RetentionCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                        retentionCountElement.Value = backupSchedulesItem.RetentionCount.ToString();
                        backupScheduleBaseElement.Add(retentionCountElement);
                        
                        XElement startTimeElement = new XElement(XName.Get("StartTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                        startTimeElement.Value = backupSchedulesItem.StartTime;
                        backupScheduleBaseElement.Add(startTimeElement);
                        
                        XElement statusElement = new XElement(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                        statusElement.Value = backupSchedulesItem.Status.ToString();
                        backupScheduleBaseElement.Add(statusElement);
                    }
                    migrationBackupPolicyElement.Add(backupSchedulesSequenceElement);
                    
                    XElement createdOnElement = new XElement(XName.Get("CreatedOn", "http://windowscloudbackup.com/CiS/V2013_03"));
                    createdOnElement.Value = backupPoliciesItem.CreatedOn;
                    migrationBackupPolicyElement.Add(createdOnElement);
                    
                    XElement disabledElement = new XElement(XName.Get("Disabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                    disabledElement.Value = backupPoliciesItem.Disabled.ToString().ToLower();
                    migrationBackupPolicyElement.Add(disabledElement);
                    
                    if (backupPoliciesItem.LastRunTime != null)
                    {
                        XElement lastRunTimeElement = new XElement(XName.Get("LastRunTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                        lastRunTimeElement.Value = backupPoliciesItem.LastRunTime;
                        migrationBackupPolicyElement.Add(lastRunTimeElement);
                    }
                    
                    XElement maxRetentionCountElement = new XElement(XName.Get("MaxRetentionCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    maxRetentionCountElement.Value = backupPoliciesItem.MaxRetentionCount.ToString();
                    migrationBackupPolicyElement.Add(maxRetentionCountElement);
                    
                    XElement typeElement = new XElement(XName.Get("Type", "http://windowscloudbackup.com/CiS/V2013_03"));
                    typeElement.Value = backupPoliciesItem.Type.ToString();
                    migrationBackupPolicyElement.Add(typeElement);
                    
                    XElement virtualDiskGroupIdElement = new XElement(XName.Get("VirtualDiskGroupId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    virtualDiskGroupIdElement.Value = backupPoliciesItem.VirtualDiskGroupId;
                    migrationBackupPolicyElement.Add(virtualDiskGroupIdElement);
                }
                legacyApplianceConfigElement.Add(backupPoliciesSequenceElement);
                
                XElement bandwidthSettingsSequenceElement = new XElement(XName.Get("BandwidthSettings", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (BandwidthSetting bandwidthSettingsItem in request.BandwidthSettings)
                {
                    XElement bandwidthSettingElement = new XElement(XName.Get("BandwidthSetting", "http://windowscloudbackup.com/CiS/V2013_03"));
                    bandwidthSettingsSequenceElement.Add(bandwidthSettingElement);
                    
                    if (bandwidthSettingsItem.InstanceId != null)
                    {
                        XElement instanceIdElement4 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement4.Value = bandwidthSettingsItem.InstanceId;
                        bandwidthSettingElement.Add(instanceIdElement4);
                    }
                    
                    XElement nameElement4 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement4.Value = bandwidthSettingsItem.Name;
                    bandwidthSettingElement.Add(nameElement4);
                    
                    XElement operationInProgressElement4 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement4.Value = bandwidthSettingsItem.OperationInProgress.ToString();
                    bandwidthSettingElement.Add(operationInProgressElement4);
                    
                    XElement bandwidthSchedulesListSequenceElement = new XElement(XName.Get("BandwidthSchedulesList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (BandwidthSchedule bandwidthSchedulesListItem in bandwidthSettingsItem.Schedules)
                    {
                        XElement bandwidthScheduleElement = new XElement(XName.Get("BandwidthSchedule", "http://windowscloudbackup.com/CiS/V2013_03"));
                        bandwidthSchedulesListSequenceElement.Add(bandwidthScheduleElement);
                        
                        XElement daysSequenceElement = new XElement(XName.Get("Days", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (int daysItem in bandwidthSchedulesListItem.Days)
                        {
                            XElement daysItemElement = new XElement(XName.Get("int", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                            daysItemElement.Value = daysItem.ToString();
                            daysSequenceElement.Add(daysItemElement);
                        }
                        bandwidthScheduleElement.Add(daysSequenceElement);
                        
                        XElement rateElement = new XElement(XName.Get("Rate", "http://windowscloudbackup.com/CiS/V2013_03"));
                        rateElement.Value = bandwidthSchedulesListItem.Rate.ToString();
                        bandwidthScheduleElement.Add(rateElement);
                        
                        XElement startElement = new XElement(XName.Get("Start", "http://windowscloudbackup.com/CiS/V2013_03"));
                        startElement.Value = bandwidthSchedulesListItem.Start;
                        bandwidthScheduleElement.Add(startElement);
                        
                        XElement stopElement = new XElement(XName.Get("Stop", "http://windowscloudbackup.com/CiS/V2013_03"));
                        stopElement.Value = bandwidthSchedulesListItem.Stop;
                        bandwidthScheduleElement.Add(stopElement);
                    }
                    bandwidthSettingElement.Add(bandwidthSchedulesListSequenceElement);
                    
                    XElement createdFromTemplateIdElement = new XElement(XName.Get("CreatedFromTemplateId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    createdFromTemplateIdElement.Value = bandwidthSettingsItem.CreatedFromTemplateId.ToString();
                    bandwidthSettingElement.Add(createdFromTemplateIdElement);
                    
                    XElement volumeCountElement2 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement2.Value = bandwidthSettingsItem.VolumeCount.ToString();
                    bandwidthSettingElement.Add(volumeCountElement2);
                }
                legacyApplianceConfigElement.Add(bandwidthSettingsSequenceElement);
                
                XElement dataContainersSequenceElement = new XElement(XName.Get("DataContainers", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (MigrationDataContainer dataContainersItem in request.CloudConfigurations)
                {
                    XElement migrationDataContainerElement = new XElement(XName.Get("MigrationDataContainer", "http://windowscloudbackup.com/CiS/V2013_03"));
                    dataContainersSequenceElement.Add(migrationDataContainerElement);
                    
                    if (dataContainersItem.InstanceId != null)
                    {
                        XElement instanceIdElement5 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement5.Value = dataContainersItem.InstanceId;
                        migrationDataContainerElement.Add(instanceIdElement5);
                    }
                    
                    XElement nameElement5 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement5.Value = dataContainersItem.Name;
                    migrationDataContainerElement.Add(nameElement5);
                    
                    XElement operationInProgressElement5 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement5.Value = dataContainersItem.OperationInProgress.ToString();
                    migrationDataContainerElement.Add(operationInProgressElement5);
                    
                    XElement backupBucketElement = new XElement(XName.Get("BackupBucket", "http://windowscloudbackup.com/CiS/V2013_03"));
                    backupBucketElement.Value = dataContainersItem.BackupBucket;
                    migrationDataContainerElement.Add(backupBucketElement);
                    
                    XElement backupStorageAccountCredentialElement = new XElement(XName.Get("BackupStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                    migrationDataContainerElement.Add(backupStorageAccountCredentialElement);
                    
                    if (dataContainersItem.BackupStorageAccountCredential.InstanceId != null)
                    {
                        XElement instanceIdElement6 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement6.Value = dataContainersItem.BackupStorageAccountCredential.InstanceId;
                        backupStorageAccountCredentialElement.Add(instanceIdElement6);
                    }
                    
                    if (dataContainersItem.BackupStorageAccountCredential.Name != null)
                    {
                        XElement nameElement6 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                        nameElement6.Value = dataContainersItem.BackupStorageAccountCredential.Name;
                        backupStorageAccountCredentialElement.Add(nameElement6);
                    }
                    
                    XElement operationInProgressElement6 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement6.Value = dataContainersItem.BackupStorageAccountCredential.OperationInProgress.ToString();
                    backupStorageAccountCredentialElement.Add(operationInProgressElement6);
                    
                    XElement cloudTypeElement = new XElement(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                    cloudTypeElement.Value = StorSimpleManagementClient.CloudTypeToString(dataContainersItem.BackupStorageAccountCredential.CloudType);
                    backupStorageAccountCredentialElement.Add(cloudTypeElement);
                    
                    XElement hostnameElement = new XElement(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                    hostnameElement.Value = dataContainersItem.BackupStorageAccountCredential.Hostname;
                    backupStorageAccountCredentialElement.Add(hostnameElement);
                    
                    XElement isDefaultElement = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isDefaultElement.Value = dataContainersItem.BackupStorageAccountCredential.IsDefault.ToString().ToLower();
                    backupStorageAccountCredentialElement.Add(isDefaultElement);
                    
                    if (dataContainersItem.BackupStorageAccountCredential.Location != null)
                    {
                        XElement locationElement = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                        locationElement.Value = dataContainersItem.BackupStorageAccountCredential.Location;
                        backupStorageAccountCredentialElement.Add(locationElement);
                    }
                    
                    XElement loginElement = new XElement(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                    loginElement.Value = dataContainersItem.BackupStorageAccountCredential.Login;
                    backupStorageAccountCredentialElement.Add(loginElement);
                    
                    XElement passwordElement = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                    passwordElement.Value = dataContainersItem.BackupStorageAccountCredential.Password;
                    backupStorageAccountCredentialElement.Add(passwordElement);
                    
                    XElement useSSLElement = new XElement(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                    useSSLElement.Value = dataContainersItem.BackupStorageAccountCredential.UseSSL.ToString().ToLower();
                    backupStorageAccountCredentialElement.Add(useSSLElement);
                    
                    XElement volumeCountElement3 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement3.Value = dataContainersItem.BackupStorageAccountCredential.VolumeCount.ToString();
                    backupStorageAccountCredentialElement.Add(volumeCountElement3);
                    
                    if (dataContainersItem.BackupStorageAccountCredential.PasswordEncryptionCertThumbprint != null)
                    {
                        XElement passwordEncryptionCertThumbprintElement = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                        passwordEncryptionCertThumbprintElement.Value = dataContainersItem.BackupStorageAccountCredential.PasswordEncryptionCertThumbprint;
                        backupStorageAccountCredentialElement.Add(passwordEncryptionCertThumbprintElement);
                    }
                    else
                    {
                        XElement emptyElement2 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                        XAttribute nilAttribute2 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        nilAttribute2.Value = "true";
                        emptyElement2.Add(nilAttribute2);
                        backupStorageAccountCredentialElement.Add(emptyElement2);
                    }
                    
                    XElement bandwidthSettingElement2 = new XElement(XName.Get("BandwidthSetting", "http://windowscloudbackup.com/CiS/V2013_03"));
                    migrationDataContainerElement.Add(bandwidthSettingElement2);
                    
                    if (dataContainersItem.BandwidthSetting.InstanceId != null)
                    {
                        XElement instanceIdElement7 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement7.Value = dataContainersItem.BandwidthSetting.InstanceId;
                        bandwidthSettingElement2.Add(instanceIdElement7);
                    }
                    
                    XElement nameElement7 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement7.Value = dataContainersItem.BandwidthSetting.Name;
                    bandwidthSettingElement2.Add(nameElement7);
                    
                    XElement operationInProgressElement7 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement7.Value = dataContainersItem.BandwidthSetting.OperationInProgress.ToString();
                    bandwidthSettingElement2.Add(operationInProgressElement7);
                    
                    XElement bandwidthSchedulesListSequenceElement2 = new XElement(XName.Get("BandwidthSchedulesList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (BandwidthSchedule bandwidthSchedulesListItem2 in dataContainersItem.BandwidthSetting.Schedules)
                    {
                        XElement bandwidthScheduleElement2 = new XElement(XName.Get("BandwidthSchedule", "http://windowscloudbackup.com/CiS/V2013_03"));
                        bandwidthSchedulesListSequenceElement2.Add(bandwidthScheduleElement2);
                        
                        XElement daysSequenceElement2 = new XElement(XName.Get("Days", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (int daysItem2 in bandwidthSchedulesListItem2.Days)
                        {
                            XElement daysItemElement2 = new XElement(XName.Get("int", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                            daysItemElement2.Value = daysItem2.ToString();
                            daysSequenceElement2.Add(daysItemElement2);
                        }
                        bandwidthScheduleElement2.Add(daysSequenceElement2);
                        
                        XElement rateElement2 = new XElement(XName.Get("Rate", "http://windowscloudbackup.com/CiS/V2013_03"));
                        rateElement2.Value = bandwidthSchedulesListItem2.Rate.ToString();
                        bandwidthScheduleElement2.Add(rateElement2);
                        
                        XElement startElement2 = new XElement(XName.Get("Start", "http://windowscloudbackup.com/CiS/V2013_03"));
                        startElement2.Value = bandwidthSchedulesListItem2.Start;
                        bandwidthScheduleElement2.Add(startElement2);
                        
                        XElement stopElement2 = new XElement(XName.Get("Stop", "http://windowscloudbackup.com/CiS/V2013_03"));
                        stopElement2.Value = bandwidthSchedulesListItem2.Stop;
                        bandwidthScheduleElement2.Add(stopElement2);
                    }
                    bandwidthSettingElement2.Add(bandwidthSchedulesListSequenceElement2);
                    
                    XElement createdFromTemplateIdElement2 = new XElement(XName.Get("CreatedFromTemplateId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    createdFromTemplateIdElement2.Value = dataContainersItem.BandwidthSetting.CreatedFromTemplateId.ToString();
                    bandwidthSettingElement2.Add(createdFromTemplateIdElement2);
                    
                    XElement volumeCountElement4 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement4.Value = dataContainersItem.BandwidthSetting.VolumeCount.ToString();
                    bandwidthSettingElement2.Add(volumeCountElement4);
                    
                    if (dataContainersItem.EncryptionKey != null)
                    {
                        XElement encryptionKeyElement = new XElement(XName.Get("EncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                        encryptionKeyElement.Value = dataContainersItem.EncryptionKey;
                        migrationDataContainerElement.Add(encryptionKeyElement);
                    }
                    
                    XElement isDefaultElement2 = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isDefaultElement2.Value = dataContainersItem.IsDefault.ToString().ToLower();
                    migrationDataContainerElement.Add(isDefaultElement2);
                    
                    XElement ownedElement = new XElement(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                    ownedElement.Value = dataContainersItem.Owned.ToString().ToLower();
                    migrationDataContainerElement.Add(ownedElement);
                    
                    XElement primaryBucketElement = new XElement(XName.Get("PrimaryBucket", "http://windowscloudbackup.com/CiS/V2013_03"));
                    primaryBucketElement.Value = dataContainersItem.PrimaryBucket;
                    migrationDataContainerElement.Add(primaryBucketElement);
                    
                    XElement primaryStorageAccountCredentialElement = new XElement(XName.Get("PrimaryStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                    migrationDataContainerElement.Add(primaryStorageAccountCredentialElement);
                    
                    if (dataContainersItem.PrimaryStorageAccountCredential.InstanceId != null)
                    {
                        XElement instanceIdElement8 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement8.Value = dataContainersItem.PrimaryStorageAccountCredential.InstanceId;
                        primaryStorageAccountCredentialElement.Add(instanceIdElement8);
                    }
                    
                    if (dataContainersItem.PrimaryStorageAccountCredential.Name != null)
                    {
                        XElement nameElement8 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                        nameElement8.Value = dataContainersItem.PrimaryStorageAccountCredential.Name;
                        primaryStorageAccountCredentialElement.Add(nameElement8);
                    }
                    
                    XElement operationInProgressElement8 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement8.Value = dataContainersItem.PrimaryStorageAccountCredential.OperationInProgress.ToString();
                    primaryStorageAccountCredentialElement.Add(operationInProgressElement8);
                    
                    XElement cloudTypeElement2 = new XElement(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                    cloudTypeElement2.Value = StorSimpleManagementClient.CloudTypeToString(dataContainersItem.PrimaryStorageAccountCredential.CloudType);
                    primaryStorageAccountCredentialElement.Add(cloudTypeElement2);
                    
                    XElement hostnameElement2 = new XElement(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                    hostnameElement2.Value = dataContainersItem.PrimaryStorageAccountCredential.Hostname;
                    primaryStorageAccountCredentialElement.Add(hostnameElement2);
                    
                    XElement isDefaultElement3 = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isDefaultElement3.Value = dataContainersItem.PrimaryStorageAccountCredential.IsDefault.ToString().ToLower();
                    primaryStorageAccountCredentialElement.Add(isDefaultElement3);
                    
                    if (dataContainersItem.PrimaryStorageAccountCredential.Location != null)
                    {
                        XElement locationElement2 = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                        locationElement2.Value = dataContainersItem.PrimaryStorageAccountCredential.Location;
                        primaryStorageAccountCredentialElement.Add(locationElement2);
                    }
                    
                    XElement loginElement2 = new XElement(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                    loginElement2.Value = dataContainersItem.PrimaryStorageAccountCredential.Login;
                    primaryStorageAccountCredentialElement.Add(loginElement2);
                    
                    XElement passwordElement2 = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                    passwordElement2.Value = dataContainersItem.PrimaryStorageAccountCredential.Password;
                    primaryStorageAccountCredentialElement.Add(passwordElement2);
                    
                    XElement useSSLElement2 = new XElement(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                    useSSLElement2.Value = dataContainersItem.PrimaryStorageAccountCredential.UseSSL.ToString().ToLower();
                    primaryStorageAccountCredentialElement.Add(useSSLElement2);
                    
                    XElement volumeCountElement5 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement5.Value = dataContainersItem.PrimaryStorageAccountCredential.VolumeCount.ToString();
                    primaryStorageAccountCredentialElement.Add(volumeCountElement5);
                    
                    if (dataContainersItem.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint != null)
                    {
                        XElement passwordEncryptionCertThumbprintElement2 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                        passwordEncryptionCertThumbprintElement2.Value = dataContainersItem.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint;
                        primaryStorageAccountCredentialElement.Add(passwordEncryptionCertThumbprintElement2);
                    }
                    else
                    {
                        XElement emptyElement3 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                        XAttribute nilAttribute3 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        nilAttribute3.Value = "true";
                        emptyElement3.Add(nilAttribute3);
                        primaryStorageAccountCredentialElement.Add(emptyElement3);
                    }
                    
                    XElement secretsEncryptionThumbprintElement = new XElement(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    secretsEncryptionThumbprintElement.Value = dataContainersItem.SecretsEncryptionThumbprint;
                    migrationDataContainerElement.Add(secretsEncryptionThumbprintElement);
                }
                legacyApplianceConfigElement.Add(dataContainersSequenceElement);
                
                XElement deviceIdElement = new XElement(XName.Get("DeviceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                deviceIdElement.Value = request.DeviceId;
                legacyApplianceConfigElement.Add(deviceIdElement);
                
                if (request.InboundChapSettings != null)
                {
                    if (request.InboundChapSettings is ILazyCollection == false || ((ILazyCollection)request.InboundChapSettings).IsInitialized)
                    {
                        XElement inboundChapSettingsSequenceElement = new XElement(XName.Get("InboundChapSettings", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (MigrationChapSetting inboundChapSettingsItem in request.InboundChapSettings)
                        {
                            XElement migrationChapSettingElement = new XElement(XName.Get("MigrationChapSetting", "http://windowscloudbackup.com/CiS/V2013_03"));
                            inboundChapSettingsSequenceElement.Add(migrationChapSettingElement);
                            
                            if (inboundChapSettingsItem.Id != null)
                            {
                                XElement idElement = new XElement(XName.Get("Id", "http://windowscloudbackup.com/CiS/V2013_03"));
                                idElement.Value = inboundChapSettingsItem.Id;
                                migrationChapSettingElement.Add(idElement);
                            }
                            
                            XElement nameElement9 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                            nameElement9.Value = inboundChapSettingsItem.Name;
                            migrationChapSettingElement.Add(nameElement9);
                            
                            XElement passwordElement3 = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                            passwordElement3.Value = inboundChapSettingsItem.Password;
                            migrationChapSettingElement.Add(passwordElement3);
                            
                            XElement secretsEncryptionThumbprintElement2 = new XElement(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                            secretsEncryptionThumbprintElement2.Value = inboundChapSettingsItem.SecretsEncryptionThumbprint;
                            migrationChapSettingElement.Add(secretsEncryptionThumbprintElement2);
                            
                            XElement validElement = new XElement(XName.Get("Valid", "http://windowscloudbackup.com/CiS/V2013_03"));
                            validElement.Value = inboundChapSettingsItem.Valid.ToString().ToLower();
                            migrationChapSettingElement.Add(validElement);
                        }
                        legacyApplianceConfigElement.Add(inboundChapSettingsSequenceElement);
                    }
                }
                
                XElement serialNumberElement = new XElement(XName.Get("SerialNumber", "http://windowscloudbackup.com/CiS/V2013_03"));
                serialNumberElement.Value = request.SerialNumber.ToString();
                legacyApplianceConfigElement.Add(serialNumberElement);
                
                XElement storageAccountCredentialsSequenceElement = new XElement(XName.Get("StorageAccountCredentials", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (StorageAccountCredential storageAccountCredentialsItem in request.StorageAccountCredentials)
                {
                    XElement storageAccountCredentialV2Element = new XElement(XName.Get("StorageAccountCredential_V2", "http://windowscloudbackup.com/CiS/V2013_03"));
                    storageAccountCredentialsSequenceElement.Add(storageAccountCredentialV2Element);
                    
                    if (storageAccountCredentialsItem.InstanceId != null)
                    {
                        XElement instanceIdElement9 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement9.Value = storageAccountCredentialsItem.InstanceId;
                        storageAccountCredentialV2Element.Add(instanceIdElement9);
                    }
                    
                    if (storageAccountCredentialsItem.Name != null)
                    {
                        XElement nameElement10 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                        nameElement10.Value = storageAccountCredentialsItem.Name;
                        storageAccountCredentialV2Element.Add(nameElement10);
                    }
                    
                    XElement operationInProgressElement9 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement9.Value = storageAccountCredentialsItem.OperationInProgress.ToString();
                    storageAccountCredentialV2Element.Add(operationInProgressElement9);
                    
                    XElement cloudTypeElement3 = new XElement(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                    cloudTypeElement3.Value = StorSimpleManagementClient.CloudTypeToString(storageAccountCredentialsItem.CloudType);
                    storageAccountCredentialV2Element.Add(cloudTypeElement3);
                    
                    XElement hostnameElement3 = new XElement(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                    hostnameElement3.Value = storageAccountCredentialsItem.Hostname;
                    storageAccountCredentialV2Element.Add(hostnameElement3);
                    
                    XElement isDefaultElement4 = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isDefaultElement4.Value = storageAccountCredentialsItem.IsDefault.ToString().ToLower();
                    storageAccountCredentialV2Element.Add(isDefaultElement4);
                    
                    if (storageAccountCredentialsItem.Location != null)
                    {
                        XElement locationElement3 = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                        locationElement3.Value = storageAccountCredentialsItem.Location;
                        storageAccountCredentialV2Element.Add(locationElement3);
                    }
                    
                    XElement loginElement3 = new XElement(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                    loginElement3.Value = storageAccountCredentialsItem.Login;
                    storageAccountCredentialV2Element.Add(loginElement3);
                    
                    XElement passwordElement4 = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                    passwordElement4.Value = storageAccountCredentialsItem.Password;
                    storageAccountCredentialV2Element.Add(passwordElement4);
                    
                    XElement useSSLElement3 = new XElement(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                    useSSLElement3.Value = storageAccountCredentialsItem.UseSSL.ToString().ToLower();
                    storageAccountCredentialV2Element.Add(useSSLElement3);
                    
                    XElement volumeCountElement6 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement6.Value = storageAccountCredentialsItem.VolumeCount.ToString();
                    storageAccountCredentialV2Element.Add(volumeCountElement6);
                    
                    if (storageAccountCredentialsItem.PasswordEncryptionCertThumbprint != null)
                    {
                        XElement passwordEncryptionCertThumbprintElement3 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                        passwordEncryptionCertThumbprintElement3.Value = storageAccountCredentialsItem.PasswordEncryptionCertThumbprint;
                        storageAccountCredentialV2Element.Add(passwordEncryptionCertThumbprintElement3);
                    }
                    else
                    {
                        XElement emptyElement4 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                        XAttribute nilAttribute4 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        nilAttribute4.Value = "true";
                        emptyElement4.Add(nilAttribute4);
                        storageAccountCredentialV2Element.Add(emptyElement4);
                    }
                }
                legacyApplianceConfigElement.Add(storageAccountCredentialsSequenceElement);
                
                if (request.TargetChapSettings != null)
                {
                    if (request.TargetChapSettings is ILazyCollection == false || ((ILazyCollection)request.TargetChapSettings).IsInitialized)
                    {
                        XElement targetChapSettingsSequenceElement = new XElement(XName.Get("TargetChapSettings", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (MigrationChapSetting targetChapSettingsItem in request.TargetChapSettings)
                        {
                            XElement migrationChapSettingElement2 = new XElement(XName.Get("MigrationChapSetting", "http://windowscloudbackup.com/CiS/V2013_03"));
                            targetChapSettingsSequenceElement.Add(migrationChapSettingElement2);
                            
                            if (targetChapSettingsItem.Id != null)
                            {
                                XElement idElement2 = new XElement(XName.Get("Id", "http://windowscloudbackup.com/CiS/V2013_03"));
                                idElement2.Value = targetChapSettingsItem.Id;
                                migrationChapSettingElement2.Add(idElement2);
                            }
                            
                            XElement nameElement11 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                            nameElement11.Value = targetChapSettingsItem.Name;
                            migrationChapSettingElement2.Add(nameElement11);
                            
                            XElement passwordElement5 = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                            passwordElement5.Value = targetChapSettingsItem.Password;
                            migrationChapSettingElement2.Add(passwordElement5);
                            
                            XElement secretsEncryptionThumbprintElement3 = new XElement(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                            secretsEncryptionThumbprintElement3.Value = targetChapSettingsItem.SecretsEncryptionThumbprint;
                            migrationChapSettingElement2.Add(secretsEncryptionThumbprintElement3);
                            
                            XElement validElement2 = new XElement(XName.Get("Valid", "http://windowscloudbackup.com/CiS/V2013_03"));
                            validElement2.Value = targetChapSettingsItem.Valid.ToString().ToLower();
                            migrationChapSettingElement2.Add(validElement2);
                        }
                        legacyApplianceConfigElement.Add(targetChapSettingsSequenceElement);
                    }
                }
                
                XElement totalCountElement = new XElement(XName.Get("TotalCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                totalCountElement.Value = request.TotalCount.ToString();
                legacyApplianceConfigElement.Add(totalCountElement);
                
                XElement virtualDiskGroupsSequenceElement = new XElement(XName.Get("VirtualDiskGroups", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (VirtualDiskGroup virtualDiskGroupsItem in request.VolumeGroups)
                {
                    XElement virtualDiskGroupElement = new XElement(XName.Get("VirtualDiskGroup", "http://windowscloudbackup.com/CiS/V2013_03"));
                    virtualDiskGroupsSequenceElement.Add(virtualDiskGroupElement);
                    
                    if (virtualDiskGroupsItem.InstanceId != null)
                    {
                        XElement instanceIdElement10 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement10.Value = virtualDiskGroupsItem.InstanceId;
                        virtualDiskGroupElement.Add(instanceIdElement10);
                    }
                    
                    XElement nameElement12 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement12.Value = virtualDiskGroupsItem.Name;
                    virtualDiskGroupElement.Add(nameElement12);
                    
                    XElement operationInProgressElement10 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement10.Value = virtualDiskGroupsItem.OperationInProgress.ToString();
                    virtualDiskGroupElement.Add(operationInProgressElement10);
                    
                    XElement virtualDiskListSequenceElement = new XElement(XName.Get("VirtualDiskList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (string virtualDiskListItem in virtualDiskGroupsItem.VirtualDiskList)
                    {
                        XElement virtualDiskListItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                        virtualDiskListItemElement.Value = virtualDiskListItem;
                        virtualDiskListSequenceElement.Add(virtualDiskListItemElement);
                    }
                    virtualDiskGroupElement.Add(virtualDiskListSequenceElement);
                }
                legacyApplianceConfigElement.Add(virtualDiskGroupsSequenceElement);
                
                XElement virtualDisksSequenceElement = new XElement(XName.Get("VirtualDisks", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (VirtualDisk virtualDisksItem in request.Volumes)
                {
                    XElement virtualDiskElement = new XElement(XName.Get("VirtualDisk", "http://windowscloudbackup.com/CiS/V2013_03"));
                    virtualDisksSequenceElement.Add(virtualDiskElement);
                    
                    if (virtualDisksItem.InstanceId != null)
                    {
                        XElement instanceIdElement11 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement11.Value = virtualDisksItem.InstanceId;
                        virtualDiskElement.Add(instanceIdElement11);
                    }
                    
                    XElement nameElement13 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement13.Value = virtualDisksItem.Name;
                    virtualDiskElement.Add(nameElement13);
                    
                    XElement operationInProgressElement11 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement11.Value = virtualDisksItem.OperationInProgress.ToString();
                    virtualDiskElement.Add(operationInProgressElement11);
                    
                    XElement accessTypeElement = new XElement(XName.Get("AccessType", "http://windowscloudbackup.com/CiS/V2013_03"));
                    accessTypeElement.Value = virtualDisksItem.AccessType.ToString();
                    virtualDiskElement.Add(accessTypeElement);
                    
                    XElement acrListSequenceElement = new XElement(XName.Get("AcrList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (AccessControlRecord acrListItem in virtualDisksItem.AcrList)
                    {
                        XElement accessControlRecordElement2 = new XElement(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03"));
                        acrListSequenceElement.Add(accessControlRecordElement2);
                        
                        if (acrListItem.InstanceId != null)
                        {
                            XElement instanceIdElement12 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            instanceIdElement12.Value = acrListItem.InstanceId;
                            accessControlRecordElement2.Add(instanceIdElement12);
                        }
                        
                        XElement nameElement14 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                        nameElement14.Value = acrListItem.Name;
                        accessControlRecordElement2.Add(nameElement14);
                        
                        if (acrListItem.GlobalId != null)
                        {
                            XElement globalIdElement2 = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                            globalIdElement2.Value = acrListItem.GlobalId;
                            accessControlRecordElement2.Add(globalIdElement2);
                        }
                        else
                        {
                            XElement emptyElement5 = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                            XAttribute nilAttribute5 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                            nilAttribute5.Value = "true";
                            emptyElement5.Add(nilAttribute5);
                            accessControlRecordElement2.Add(emptyElement5);
                        }
                        
                        XElement operationInProgressElement12 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                        operationInProgressElement12.Value = acrListItem.OperationInProgress.ToString();
                        accessControlRecordElement2.Add(operationInProgressElement12);
                        
                        XElement initiatorNameElement2 = new XElement(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                        initiatorNameElement2.Value = acrListItem.InitiatorName;
                        accessControlRecordElement2.Add(initiatorNameElement2);
                        
                        XElement volumeCountElement7 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                        volumeCountElement7.Value = acrListItem.VolumeCount.ToString();
                        accessControlRecordElement2.Add(volumeCountElement7);
                    }
                    virtualDiskElement.Add(acrListSequenceElement);
                    
                    XElement appTypeElement = new XElement(XName.Get("AppType", "http://windowscloudbackup.com/CiS/V2013_03"));
                    appTypeElement.Value = virtualDisksItem.AppType.ToString();
                    virtualDiskElement.Add(appTypeElement);
                    
                    XElement dataContainerElement = new XElement(XName.Get("DataContainer", "http://windowscloudbackup.com/CiS/V2013_03"));
                    virtualDiskElement.Add(dataContainerElement);
                    
                    if (virtualDisksItem.DataContainer.InstanceId != null)
                    {
                        XElement instanceIdElement13 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement13.Value = virtualDisksItem.DataContainer.InstanceId;
                        dataContainerElement.Add(instanceIdElement13);
                    }
                    
                    XElement nameElement15 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement15.Value = virtualDisksItem.DataContainer.Name;
                    dataContainerElement.Add(nameElement15);
                    
                    XElement operationInProgressElement13 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement13.Value = virtualDisksItem.DataContainer.OperationInProgress.ToString();
                    dataContainerElement.Add(operationInProgressElement13);
                    
                    XElement bandwidthRateElement = new XElement(XName.Get("BandwidthRate", "http://windowscloudbackup.com/CiS/V2013_03"));
                    bandwidthRateElement.Value = virtualDisksItem.DataContainer.BandwidthRate.ToString();
                    dataContainerElement.Add(bandwidthRateElement);
                    
                    if (virtualDisksItem.DataContainer.EncryptionKey != null)
                    {
                        XElement encryptionKeyElement2 = new XElement(XName.Get("EncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                        encryptionKeyElement2.Value = virtualDisksItem.DataContainer.EncryptionKey;
                        dataContainerElement.Add(encryptionKeyElement2);
                    }
                    
                    XElement isDefaultElement5 = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isDefaultElement5.Value = virtualDisksItem.DataContainer.IsDefault.ToString().ToLower();
                    dataContainerElement.Add(isDefaultElement5);
                    
                    XElement isEncryptionEnabledElement = new XElement(XName.Get("IsEncryptionEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isEncryptionEnabledElement.Value = virtualDisksItem.DataContainer.IsEncryptionEnabled.ToString().ToLower();
                    dataContainerElement.Add(isEncryptionEnabledElement);
                    
                    XElement ownedElement2 = new XElement(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                    ownedElement2.Value = virtualDisksItem.DataContainer.Owned.ToString().ToLower();
                    dataContainerElement.Add(ownedElement2);
                    
                    XElement primaryStorageAccountCredentialElement2 = new XElement(XName.Get("PrimaryStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                    dataContainerElement.Add(primaryStorageAccountCredentialElement2);
                    
                    if (virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.InstanceId != null)
                    {
                        XElement instanceIdElement14 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement14.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.InstanceId;
                        primaryStorageAccountCredentialElement2.Add(instanceIdElement14);
                    }
                    
                    if (virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.Name != null)
                    {
                        XElement nameElement16 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                        nameElement16.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.Name;
                        primaryStorageAccountCredentialElement2.Add(nameElement16);
                    }
                    
                    XElement operationInProgressElement14 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement14.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.OperationInProgress.ToString();
                    primaryStorageAccountCredentialElement2.Add(operationInProgressElement14);
                    
                    XElement cloudTypeElement4 = new XElement(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                    cloudTypeElement4.Value = StorSimpleManagementClient.CloudTypeToString(virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.CloudType);
                    primaryStorageAccountCredentialElement2.Add(cloudTypeElement4);
                    
                    XElement hostnameElement4 = new XElement(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                    hostnameElement4.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.Hostname;
                    primaryStorageAccountCredentialElement2.Add(hostnameElement4);
                    
                    XElement isDefaultElement6 = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isDefaultElement6.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.IsDefault.ToString().ToLower();
                    primaryStorageAccountCredentialElement2.Add(isDefaultElement6);
                    
                    if (virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.Location != null)
                    {
                        XElement locationElement4 = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                        locationElement4.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.Location;
                        primaryStorageAccountCredentialElement2.Add(locationElement4);
                    }
                    
                    XElement loginElement4 = new XElement(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                    loginElement4.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.Login;
                    primaryStorageAccountCredentialElement2.Add(loginElement4);
                    
                    XElement passwordElement6 = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                    passwordElement6.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.Password;
                    primaryStorageAccountCredentialElement2.Add(passwordElement6);
                    
                    XElement useSSLElement4 = new XElement(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                    useSSLElement4.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.UseSSL.ToString().ToLower();
                    primaryStorageAccountCredentialElement2.Add(useSSLElement4);
                    
                    XElement volumeCountElement8 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement8.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.VolumeCount.ToString();
                    primaryStorageAccountCredentialElement2.Add(volumeCountElement8);
                    
                    if (virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint != null)
                    {
                        XElement passwordEncryptionCertThumbprintElement4 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                        passwordEncryptionCertThumbprintElement4.Value = virtualDisksItem.DataContainer.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint;
                        primaryStorageAccountCredentialElement2.Add(passwordEncryptionCertThumbprintElement4);
                    }
                    else
                    {
                        XElement emptyElement6 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                        XAttribute nilAttribute6 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        nilAttribute6.Value = "true";
                        emptyElement6.Add(nilAttribute6);
                        primaryStorageAccountCredentialElement2.Add(emptyElement6);
                    }
                    
                    if (virtualDisksItem.DataContainer.SecretsEncryptionThumbprint != null)
                    {
                        XElement secretsEncryptionThumbprintElement4 = new XElement(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                        secretsEncryptionThumbprintElement4.Value = virtualDisksItem.DataContainer.SecretsEncryptionThumbprint;
                        dataContainerElement.Add(secretsEncryptionThumbprintElement4);
                    }
                    
                    XElement volumeCountElement9 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement9.Value = virtualDisksItem.DataContainer.VolumeCount.ToString();
                    dataContainerElement.Add(volumeCountElement9);
                    
                    if (virtualDisksItem.DataContainerId != null)
                    {
                        XElement dataContainerIdElement = new XElement(XName.Get("DataContainerId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        dataContainerIdElement.Value = virtualDisksItem.DataContainerId;
                        virtualDiskElement.Add(dataContainerIdElement);
                    }
                    
                    if (virtualDisksItem.InternalInstanceId != null)
                    {
                        XElement internalInstanceIdElement = new XElement(XName.Get("InternalInstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        internalInstanceIdElement.Value = virtualDisksItem.InternalInstanceId;
                        virtualDiskElement.Add(internalInstanceIdElement);
                    }
                    
                    XElement isBackupEnabledElement = new XElement(XName.Get("IsBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isBackupEnabledElement.Value = virtualDisksItem.IsBackupEnabled.ToString().ToLower();
                    virtualDiskElement.Add(isBackupEnabledElement);
                    
                    XElement isDefaultBackupEnabledElement = new XElement(XName.Get("IsDefaultBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isDefaultBackupEnabledElement.Value = virtualDisksItem.IsDefaultBackupEnabled.ToString().ToLower();
                    virtualDiskElement.Add(isDefaultBackupEnabledElement);
                    
                    XElement isMonitoringEnabledElement = new XElement(XName.Get("IsMonitoringEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isMonitoringEnabledElement.Value = virtualDisksItem.IsMonitoringEnabled.ToString().ToLower();
                    virtualDiskElement.Add(isMonitoringEnabledElement);
                    
                    XElement onlineElement = new XElement(XName.Get("Online", "http://windowscloudbackup.com/CiS/V2013_03"));
                    onlineElement.Value = virtualDisksItem.Online.ToString().ToLower();
                    virtualDiskElement.Add(onlineElement);
                    
                    XElement sizeInBytesElement = new XElement(XName.Get("SizeInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                    sizeInBytesElement.Value = virtualDisksItem.SizeInBytes.ToString();
                    virtualDiskElement.Add(sizeInBytesElement);
                    
                    if (virtualDisksItem.VSN != null)
                    {
                        XElement vSNElement = new XElement(XName.Get("VSN", "http://windowscloudbackup.com/CiS/V2013_03"));
                        vSNElement.Value = virtualDisksItem.VSN;
                        virtualDiskElement.Add(vSNElement);
                    }
                }
                legacyApplianceConfigElement.Add(virtualDisksSequenceElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec for import data container rest apiThe rest api initiates
        /// the migration of volume containers for all/specific data
        /// container(s) in the given config
        /// </summary>
        /// <param name='configId'>
        /// Required. Unique identifier for config specified while importing
        /// the config to service
        /// </param>
        /// <param name='importDCRequest'>
        /// Required. Import data container request which specifies the list of
        /// data containers to be migrated
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for migration job status.
        /// </returns>
        public async Task<MigrationJobStatus> MigrationImportDataContainerAsync(string configId, MigrationImportDataContainerRequest importDCRequest, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (configId == null)
            {
                throw new ArgumentNullException("configId");
            }
            if (importDCRequest == null)
            {
                throw new ArgumentNullException("importDCRequest");
            }
            if (importDCRequest.DataContainerNames == null)
            {
                throw new ArgumentNullException("importDCRequest.DataContainerNames");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("importDCRequest", importDCRequest);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "MigrationImportDataContainerAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/configs/";
            url = url + Uri.EscapeDataString(configId);
            url = url + "/datacontainers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement migrationImportDataContainerRequestElement = new XElement(XName.Get("MigrationImportDataContainerRequest", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(migrationImportDataContainerRequestElement);
                
                XElement dataContainerNamesSequenceElement = new XElement(XName.Get("DataContainerNames", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (string dataContainerNamesItem in importDCRequest.DataContainerNames)
                {
                    XElement dataContainerNamesItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                    dataContainerNamesItemElement.Value = dataContainerNamesItem;
                    dataContainerNamesSequenceElement.Add(dataContainerNamesItemElement);
                }
                migrationImportDataContainerRequestElement.Add(dataContainerNamesSequenceElement);
                
                XElement forceOnOtherDeviceElement = new XElement(XName.Get("ForceOnOtherDevice", "http://windowscloudbackup.com/CiS/V2013_03"));
                forceOnOtherDeviceElement.Value = importDCRequest.ForceOnOtherDevice.ToString().ToLower();
                migrationImportDataContainerRequestElement.Add(forceOnOtherDeviceElement);
                
                XElement skipACRsElement = new XElement(XName.Get("SkipACRs", "http://windowscloudbackup.com/CiS/V2013_03"));
                skipACRsElement.Value = importDCRequest.SkipACRs.ToString().ToLower();
                migrationImportDataContainerRequestElement.Add(skipACRsElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationJobStatus result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationJobStatus();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement migrationJobStatusElement = responseDoc.Element(XName.Get("MigrationJobStatus", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (migrationJobStatusElement != null)
                        {
                            XElement jobIdElement = migrationJobStatusElement.Element(XName.Get("JobId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (jobIdElement != null)
                            {
                                string jobIdInstance = jobIdElement.Value;
                                result.JobId = jobIdInstance;
                            }
                            
                            XElement messageInfoSequenceElement = migrationJobStatusElement.Element(XName.Get("MessageInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (messageInfoSequenceElement != null)
                            {
                                foreach (XElement messageInfoElement in messageInfoSequenceElement.Elements(XName.Get("HcsMessageInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    HcsMessageInfo hcsMessageInfoInstance = new HcsMessageInfo();
                                    result.MessageInfoList.Add(hcsMessageInfoInstance);
                                    
                                    XElement errorCodeElement = messageInfoElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (errorCodeElement != null)
                                    {
                                        int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                        hcsMessageInfoInstance.ErrorCode = errorCodeInstance;
                                    }
                                    
                                    XElement messageElement = messageInfoElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (messageElement != null)
                                    {
                                        string messageInstance = messageElement.Value;
                                        hcsMessageInfoInstance.Message = messageInstance;
                                    }
                                    
                                    XElement recommendationElement = messageInfoElement.Element(XName.Get("Recommendation", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (recommendationElement != null)
                                    {
                                        string recommendationInstance = recommendationElement.Value;
                                        hcsMessageInfoInstance.Recommendation = recommendationInstance;
                                    }
                                    
                                    XElement severityElement = messageInfoElement.Element(XName.Get("Severity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (severityElement != null)
                                    {
                                        int severityInstance = int.Parse(severityElement.Value, CultureInfo.InvariantCulture);
                                        hcsMessageInfoInstance.Severity = severityInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Hydra spec for start migration plan rest APIThe rest api starts the
        /// estimation of time taken by migration for all/specific volume
        /// container(s) in the given config
        /// </summary>
        /// <param name='startPlanRequest'>
        /// Required. Start migration plan request model. The object passes the
        /// list of volume container(s) whose migration ETA needs to calculated
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for migration job status.
        /// </returns>
        public async Task<MigrationJobStatus> StartMigrationPlanAsync(MigrationPlanStartRequest startPlanRequest, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (startPlanRequest == null)
            {
                throw new ArgumentNullException("startPlanRequest");
            }
            if (startPlanRequest.ConfigId == null)
            {
                throw new ArgumentNullException("startPlanRequest.ConfigId");
            }
            if (startPlanRequest.DataContainerNameList == null)
            {
                throw new ArgumentNullException("startPlanRequest.DataContainerNameList");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("startPlanRequest", startPlanRequest);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "StartMigrationPlanAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/migration/plan";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement migrationPlanStartRequestElement = new XElement(XName.Get("MigrationPlanStartRequest", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(migrationPlanStartRequestElement);
                
                XElement configIdElement = new XElement(XName.Get("ConfigId", "http://windowscloudbackup.com/CiS/V2013_03"));
                configIdElement.Value = startPlanRequest.ConfigId;
                migrationPlanStartRequestElement.Add(configIdElement);
                
                XElement dataContainerNamesSequenceElement = new XElement(XName.Get("DataContainerNames", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (string dataContainerNamesItem in startPlanRequest.DataContainerNameList)
                {
                    XElement dataContainerNamesItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                    dataContainerNamesItemElement.Value = dataContainerNamesItem;
                    dataContainerNamesSequenceElement.Add(dataContainerNamesItemElement);
                }
                migrationPlanStartRequestElement.Add(dataContainerNamesSequenceElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MigrationJobStatus result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new MigrationJobStatus();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement migrationJobStatusElement = responseDoc.Element(XName.Get("MigrationJobStatus", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (migrationJobStatusElement != null)
                        {
                            XElement jobIdElement = migrationJobStatusElement.Element(XName.Get("JobId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (jobIdElement != null)
                            {
                                string jobIdInstance = jobIdElement.Value;
                                result.JobId = jobIdInstance;
                            }
                            
                            XElement messageInfoSequenceElement = migrationJobStatusElement.Element(XName.Get("MessageInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (messageInfoSequenceElement != null)
                            {
                                foreach (XElement messageInfoElement in messageInfoSequenceElement.Elements(XName.Get("HcsMessageInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    HcsMessageInfo hcsMessageInfoInstance = new HcsMessageInfo();
                                    result.MessageInfoList.Add(hcsMessageInfoInstance);
                                    
                                    XElement errorCodeElement = messageInfoElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (errorCodeElement != null)
                                    {
                                        int errorCodeInstance = int.Parse(errorCodeElement.Value, CultureInfo.InvariantCulture);
                                        hcsMessageInfoInstance.ErrorCode = errorCodeInstance;
                                    }
                                    
                                    XElement messageElement = messageInfoElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (messageElement != null)
                                    {
                                        string messageInstance = messageElement.Value;
                                        hcsMessageInfoInstance.Message = messageInstance;
                                    }
                                    
                                    XElement recommendationElement = messageInfoElement.Element(XName.Get("Recommendation", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (recommendationElement != null)
                                    {
                                        string recommendationInstance = recommendationElement.Value;
                                        hcsMessageInfoInstance.Recommendation = recommendationInstance;
                                    }
                                    
                                    XElement severityElement = messageInfoElement.Element(XName.Get("Severity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (severityElement != null)
                                    {
                                        int severityInstance = int.Parse(severityElement.Value, CultureInfo.InvariantCulture);
                                        hcsMessageInfoInstance.Severity = severityInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='configId'>
        /// Required. configId
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> UpdateDataContainerMigrationStatusAsync(string configId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateDataContainerMigrationStatusAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TaskResponse response = await client.MigrateLegacyAppliance.BeginUpdateDataContainerMigrationStatusAsync(configId, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <param name='configId'>
        /// Required. The legacy config id for which migration confirm status
        /// needs to be updated
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> UpdateMigrationConfirmStatusAsync(string configId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateMigrationConfirmStatusAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TaskResponse response = await client.MigrateLegacyAppliance.BeginUpdateMigrationConfirmStatusAsync(configId, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <param name='configId'>
        /// Required. configId
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> UpdateMigrationPlanAsync(string configId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("configId", configId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateMigrationPlanAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TaskResponse response = await client.MigrateLegacyAppliance.BeginUpdateMigrationPlanAsync(configId, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
