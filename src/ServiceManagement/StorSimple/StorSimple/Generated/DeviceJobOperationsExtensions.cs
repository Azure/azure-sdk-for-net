// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// This is an RESTFul API to manage you StorSimple Objects
    /// </summary>
    public static partial class DeviceJobOperationsExtensions
    {
        /// <summary>
        /// Begin async task to update a device job.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.IDeviceJobOperations.
        /// </param>
        /// <param name='deviceId'>
        /// Required. id of device
        /// </param>
        /// <param name='jobId'>
        /// Required. id of job to update
        /// </param>
        /// <param name='updateRequest'>
        /// Required. Request data, contains the action to be taken
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public static GuidTaskResponse BeginUpdateDeviceJob(this IDeviceJobOperations operations, string deviceId, string jobId, UpdateDeviceJobRequest updateRequest, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeviceJobOperations)s).BeginUpdateDeviceJobAsync(deviceId, jobId, updateRequest, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin async task to update a device job.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.IDeviceJobOperations.
        /// </param>
        /// <param name='deviceId'>
        /// Required. id of device
        /// </param>
        /// <param name='jobId'>
        /// Required. id of job to update
        /// </param>
        /// <param name='updateRequest'>
        /// Required. Request data, contains the action to be taken
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public static Task<GuidTaskResponse> BeginUpdateDeviceJobAsync(this IDeviceJobOperations operations, string deviceId, string jobId, UpdateDeviceJobRequest updateRequest, CustomRequestHeaders customRequestHeaders)
        {
            return operations.BeginUpdateDeviceJobAsync(deviceId, jobId, updateRequest, customRequestHeaders, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.IDeviceJobOperations.
        /// </param>
        /// <param name='deviceId'>
        /// Optional. Device id of device of jobs
        /// </param>
        /// <param name='jobType'>
        /// Optional. Type of deviceJob
        /// </param>
        /// <param name='jobStatus'>
        /// Optional. Status of job
        /// </param>
        /// <param name='jobId'>
        /// Optional. Id of job
        /// </param>
        /// <param name='startTime'>
        /// Optional. Job start time, in ISO 8601 format
        /// 'yyyy'-'MM'-'dd'T'HH':'mm':'ss'
        /// </param>
        /// <param name='endTime'>
        /// Optional. Job end time, in ISO 8601 format
        /// 'yyyy'-'MM'-'dd'T'HH':'mm':'ss'
        /// </param>
        /// <param name='skip'>
        /// Required. Pagination parameter. The number of entries to skip, i.e.
        /// index of the first entry to be returned
        /// </param>
        /// <param name='top'>
        /// Required. Pagination parameter. The number of entries to return
        /// after skipping the 'skip' number of entries
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <returns>
        /// Response model of Get Query for a Device Job
        /// </returns>
        public static GetDeviceJobResponse Get(this IDeviceJobOperations operations, string deviceId, string jobType, string jobStatus, string jobId, string startTime, string endTime, int skip, int top, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeviceJobOperations)s).GetAsync(deviceId, jobType, jobStatus, jobId, startTime, endTime, skip, top, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.IDeviceJobOperations.
        /// </param>
        /// <param name='deviceId'>
        /// Optional. Device id of device of jobs
        /// </param>
        /// <param name='jobType'>
        /// Optional. Type of deviceJob
        /// </param>
        /// <param name='jobStatus'>
        /// Optional. Status of job
        /// </param>
        /// <param name='jobId'>
        /// Optional. Id of job
        /// </param>
        /// <param name='startTime'>
        /// Optional. Job start time, in ISO 8601 format
        /// 'yyyy'-'MM'-'dd'T'HH':'mm':'ss'
        /// </param>
        /// <param name='endTime'>
        /// Optional. Job end time, in ISO 8601 format
        /// 'yyyy'-'MM'-'dd'T'HH':'mm':'ss'
        /// </param>
        /// <param name='skip'>
        /// Required. Pagination parameter. The number of entries to skip, i.e.
        /// index of the first entry to be returned
        /// </param>
        /// <param name='top'>
        /// Required. Pagination parameter. The number of entries to return
        /// after skipping the 'skip' number of entries
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <returns>
        /// Response model of Get Query for a Device Job
        /// </returns>
        public static Task<GetDeviceJobResponse> GetAsync(this IDeviceJobOperations operations, string deviceId, string jobType, string jobStatus, string jobId, string startTime, string endTime, int skip, int top, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetAsync(deviceId, jobType, jobStatus, jobId, startTime, endTime, skip, top, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a device job
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.IDeviceJobOperations.
        /// </param>
        /// <param name='deviceId'>
        /// Required. id of device
        /// </param>
        /// <param name='jobId'>
        /// Required. id of job to update
        /// </param>
        /// <param name='updateRequest'>
        /// Required. Request data, contains the action to be taken
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public static TaskStatusInfo UpdateDeviceJob(this IDeviceJobOperations operations, string deviceId, string jobId, UpdateDeviceJobRequest updateRequest, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDeviceJobOperations)s).UpdateDeviceJobAsync(deviceId, jobId, updateRequest, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update a device job
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.IDeviceJobOperations.
        /// </param>
        /// <param name='deviceId'>
        /// Required. id of device
        /// </param>
        /// <param name='jobId'>
        /// Required. id of job to update
        /// </param>
        /// <param name='updateRequest'>
        /// Required. Request data, contains the action to be taken
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public static Task<TaskStatusInfo> UpdateDeviceJobAsync(this IDeviceJobOperations operations, string deviceId, string jobId, UpdateDeviceJobRequest updateRequest, CustomRequestHeaders customRequestHeaders)
        {
            return operations.UpdateDeviceJobAsync(deviceId, jobId, updateRequest, customRequestHeaders, CancellationToken.None);
        }
    }
}
