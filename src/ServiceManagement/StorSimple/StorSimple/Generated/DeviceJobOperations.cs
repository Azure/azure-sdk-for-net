// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// All Operations related to Device Jobs
    /// </summary>
    internal partial class DeviceJobOperations : IServiceOperations<StorSimpleManagementClient>, IDeviceJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the DeviceJobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DeviceJobOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Begin async task to update a device job.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. id of device
        /// </param>
        /// <param name='jobId'>
        /// Required. id of job to update
        /// </param>
        /// <param name='updateRequest'>
        /// Required. Request data, contains the action to be taken
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<GuidTaskResponse> BeginUpdateDeviceJobAsync(string deviceId, string jobId, UpdateDeviceJobRequest updateRequest, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            if (updateRequest == null)
            {
                throw new ArgumentNullException("updateRequest");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("updateRequest", updateRequest);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateDeviceJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/devicejobs/";
            url = url + Uri.EscapeDataString(jobId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateDeviceJobRequestElement = new XElement(XName.Get("UpdateDeviceJobRequest", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(updateDeviceJobRequestElement);
                
                XElement actionElement = new XElement(XName.Get("Action", "http://windowscloudbackup.com/CiS/V2013_03"));
                actionElement.Value = updateRequest.DeviceJobAction.ToString();
                updateDeviceJobRequestElement.Add(actionElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GuidTaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GuidTaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement guidElement = responseDoc.Element(XName.Get("guid", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (guidElement != null)
                        {
                            string guidInstance = guidElement.Value;
                            result.TaskId = guidInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Optional. Device id of device of jobs
        /// </param>
        /// <param name='jobType'>
        /// Optional. Type of deviceJob
        /// </param>
        /// <param name='jobStatus'>
        /// Optional. Status of job
        /// </param>
        /// <param name='jobId'>
        /// Optional. Id of job
        /// </param>
        /// <param name='startTime'>
        /// Optional. Job start time, in ISO 8601 format
        /// 'yyyy'-'MM'-'dd'T'HH':'mm':'ss'
        /// </param>
        /// <param name='endTime'>
        /// Optional. Job end time, in ISO 8601 format
        /// 'yyyy'-'MM'-'dd'T'HH':'mm':'ss'
        /// </param>
        /// <param name='skip'>
        /// Required. Pagination parameter. The number of entries to skip, i.e.
        /// index of the first entry to be returned
        /// </param>
        /// <param name='top'>
        /// Required. Pagination parameter. The number of entries to return
        /// after skipping the 'skip' number of entries
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response model of Get Query for a Device Job
        /// </returns>
        public async Task<GetDeviceJobResponse> GetAsync(string deviceId, string jobType, string jobStatus, string jobId, string startTime, string endTime, int skip, int top, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("jobType", jobType);
                tracingParameters.Add("jobStatus", jobStatus);
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("startTime", startTime);
                tracingParameters.Add("endTime", endTime);
                tracingParameters.Add("skip", skip);
                tracingParameters.Add("top", top);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devicejobs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.2.0");
            if (deviceId != null)
            {
                queryParameters.Add("deviceId=" + Uri.EscapeDataString(deviceId));
            }
            if (jobType != null)
            {
                queryParameters.Add("type=" + Uri.EscapeDataString(jobType));
            }
            if (jobStatus != null)
            {
                queryParameters.Add("status=" + Uri.EscapeDataString(jobStatus));
            }
            if (jobId != null)
            {
                queryParameters.Add("jobId=" + Uri.EscapeDataString(jobId));
            }
            if (startTime != null)
            {
                queryParameters.Add("startTime=" + Uri.EscapeDataString(startTime));
            }
            if (endTime != null)
            {
                queryParameters.Add("endTime=" + Uri.EscapeDataString(endTime));
            }
            queryParameters.Add("skip=" + Uri.EscapeDataString(skip.ToString()));
            queryParameters.Add("top=" + Uri.EscapeDataString(top.ToString()));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetDeviceJobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetDeviceJobResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement jobQueryResultV2Element = responseDoc.Element(XName.Get("JobQueryResult_V2", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (jobQueryResultV2Element != null)
                        {
                            XElement nextPageUriElement = jobQueryResultV2Element.Element(XName.Get("NextPageUri", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (nextPageUriElement != null)
                            {
                                string nextPageUriInstance = nextPageUriElement.Value;
                                result.NextPageUri = nextPageUriInstance;
                            }
                            
                            XElement nextPageStartIdentifierElement = jobQueryResultV2Element.Element(XName.Get("NextPageStartIdentifier", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (nextPageStartIdentifierElement != null)
                            {
                                string nextPageStartIdentifierInstance = nextPageStartIdentifierElement.Value;
                                result.NextPageStartIdentifier = nextPageStartIdentifierInstance;
                            }
                            
                            XElement deviceJobListSequenceElement = jobQueryResultV2Element.Element(XName.Get("DeviceJobList", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (deviceJobListSequenceElement != null)
                            {
                                foreach (XElement deviceJobListElement in deviceJobListSequenceElement.Elements(XName.Get("JobDetails", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    DeviceJobDetails jobDetailsInstance = new DeviceJobDetails();
                                    result.DeviceJobList.Add(jobDetailsInstance);
                                    
                                    XElement instanceIdElement = deviceJobListElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (instanceIdElement != null)
                                    {
                                        string instanceIdInstance = instanceIdElement.Value;
                                        jobDetailsInstance.InstanceId = instanceIdInstance;
                                    }
                                    
                                    XElement nameElement = deviceJobListElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        jobDetailsInstance.Name = nameInstance;
                                    }
                                    
                                    XElement typeElement = deviceJobListElement.Element(XName.Get("Type", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (typeElement != null)
                                    {
                                        string typeInstance = typeElement.Value;
                                        jobDetailsInstance.Type = typeInstance;
                                    }
                                    
                                    XElement statusElement = deviceJobListElement.Element(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (statusElement != null)
                                    {
                                        string statusInstance = statusElement.Value;
                                        jobDetailsInstance.Status = statusInstance;
                                    }
                                    
                                    XElement progressElement = deviceJobListElement.Element(XName.Get("Progress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (progressElement != null)
                                    {
                                        int progressInstance = int.Parse(progressElement.Value, CultureInfo.InvariantCulture);
                                        jobDetailsInstance.Progress = progressInstance;
                                    }
                                    
                                    XElement timeStatsElement = deviceJobListElement.Element(XName.Get("TimeStats", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (timeStatsElement != null)
                                    {
                                        TimeStatistics timeStatsInstance = new TimeStatistics();
                                        jobDetailsInstance.TimeStats = timeStatsInstance;
                                        
                                        XElement startTimestampElement = timeStatsElement.Element(XName.Get("StartTimestamp", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (startTimestampElement != null)
                                        {
                                            DateTime startTimestampInstance = DateTime.Parse(startTimestampElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                            timeStatsInstance.StartTimestamp = startTimestampInstance;
                                        }
                                        
                                        XElement endTimestampElement = timeStatsElement.Element(XName.Get("EndTimestamp", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (endTimestampElement != null)
                                        {
                                            DateTime endTimestampInstance = DateTime.Parse(endTimestampElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                            timeStatsInstance.EndTimestamp = endTimestampInstance;
                                        }
                                        
                                        XElement durationElement = timeStatsElement.Element(XName.Get("Duration", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (durationElement != null)
                                        {
                                            string durationInstance = durationElement.Value;
                                            timeStatsInstance.Duration = durationInstance;
                                        }
                                    }
                                    
                                    XElement dataStatsElement = deviceJobListElement.Element(XName.Get("DataStats", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (dataStatsElement != null)
                                    {
                                        DataStatistics dataStatsInstance = new DataStatistics();
                                        jobDetailsInstance.DataStats = dataStatsInstance;
                                        
                                        XElement totalDataElement = dataStatsElement.Element(XName.Get("TotalData", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (totalDataElement != null)
                                        {
                                            long totalDataInstance = long.Parse(totalDataElement.Value, CultureInfo.InvariantCulture);
                                            dataStatsInstance.TotalData = totalDataInstance;
                                        }
                                        
                                        XElement processedDataElement = dataStatsElement.Element(XName.Get("ProcessedData", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (processedDataElement != null)
                                        {
                                            long processedDataInstance = long.Parse(processedDataElement.Value, CultureInfo.InvariantCulture);
                                            dataStatsInstance.ProcessedData = processedDataInstance;
                                        }
                                        
                                        XElement cloudDataElement = dataStatsElement.Element(XName.Get("CloudData", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (cloudDataElement != null)
                                        {
                                            long cloudDataInstance = long.Parse(cloudDataElement.Value, CultureInfo.InvariantCulture);
                                            dataStatsInstance.CloudData = cloudDataInstance;
                                        }
                                        
                                        XElement throughputElement = dataStatsElement.Element(XName.Get("Throughput", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (throughputElement != null)
                                        {
                                            long throughputInstance = long.Parse(throughputElement.Value, CultureInfo.InvariantCulture);
                                            dataStatsInstance.Throughput = throughputInstance;
                                        }
                                    }
                                    
                                    XElement deviceElement = deviceJobListElement.Element(XName.Get("Device", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (deviceElement != null)
                                    {
                                        CisBaseObject deviceInstance = new CisBaseObject();
                                        jobDetailsInstance.Device = deviceInstance;
                                        
                                        XElement nameElement2 = deviceElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement2 != null)
                                        {
                                            string nameInstance2 = nameElement2.Value;
                                            deviceInstance.Name = nameInstance2;
                                        }
                                        
                                        XElement instanceIdElement2 = deviceElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement2 != null)
                                        {
                                            string instanceIdInstance2 = instanceIdElement2.Value;
                                            deviceInstance.InstanceId = instanceIdInstance2;
                                        }
                                        
                                        XElement operationInProgressElement = deviceElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement != null)
                                        {
                                            OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                            deviceInstance.OperationInProgress = operationInProgressInstance;
                                        }
                                    }
                                    
                                    XElement sourceDeviceElement = deviceJobListElement.Element(XName.Get("SourceDevice", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (sourceDeviceElement != null)
                                    {
                                        CisBaseObject sourceDeviceInstance = new CisBaseObject();
                                        jobDetailsInstance.SourceDevice = sourceDeviceInstance;
                                        
                                        XElement nameElement3 = sourceDeviceElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement3 != null)
                                        {
                                            string nameInstance3 = nameElement3.Value;
                                            sourceDeviceInstance.Name = nameInstance3;
                                        }
                                        
                                        XElement instanceIdElement3 = sourceDeviceElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement3 != null)
                                        {
                                            string instanceIdInstance3 = instanceIdElement3.Value;
                                            sourceDeviceInstance.InstanceId = instanceIdInstance3;
                                        }
                                        
                                        XElement operationInProgressElement2 = sourceDeviceElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement2 != null)
                                        {
                                            OperationInProgress operationInProgressInstance2 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement2.Value, true));
                                            sourceDeviceInstance.OperationInProgress = operationInProgressInstance2;
                                        }
                                    }
                                    
                                    XElement entityElement = deviceJobListElement.Element(XName.Get("Entity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (entityElement != null)
                                    {
                                        CisBaseObject entityInstance = new CisBaseObject();
                                        jobDetailsInstance.Entity = entityInstance;
                                        
                                        XElement nameElement4 = entityElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement4 != null)
                                        {
                                            string nameInstance4 = nameElement4.Value;
                                            entityInstance.Name = nameInstance4;
                                        }
                                        
                                        XElement instanceIdElement4 = entityElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement4 != null)
                                        {
                                            string instanceIdInstance4 = instanceIdElement4.Value;
                                            entityInstance.InstanceId = instanceIdInstance4;
                                        }
                                        
                                        XElement operationInProgressElement3 = entityElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement3 != null)
                                        {
                                            OperationInProgress operationInProgressInstance3 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement3.Value, true));
                                            entityInstance.OperationInProgress = operationInProgressInstance3;
                                        }
                                    }
                                    
                                    XElement sourceEntityElement = deviceJobListElement.Element(XName.Get("SourceEntity", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (sourceEntityElement != null)
                                    {
                                        CisBaseObject sourceEntityInstance = new CisBaseObject();
                                        jobDetailsInstance.SourceEntity = sourceEntityInstance;
                                        
                                        XElement nameElement5 = sourceEntityElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement5 != null)
                                        {
                                            string nameInstance5 = nameElement5.Value;
                                            sourceEntityInstance.Name = nameInstance5;
                                        }
                                        
                                        XElement instanceIdElement5 = sourceEntityElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement5 != null)
                                        {
                                            string instanceIdInstance5 = instanceIdElement5.Value;
                                            sourceEntityInstance.InstanceId = instanceIdInstance5;
                                        }
                                        
                                        XElement operationInProgressElement4 = sourceEntityElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement4 != null)
                                        {
                                            OperationInProgress operationInProgressInstance4 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement4.Value, true));
                                            sourceEntityInstance.OperationInProgress = operationInProgressInstance4;
                                        }
                                    }
                                    
                                    XElement volumeElement = deviceJobListElement.Element(XName.Get("Volume", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (volumeElement != null)
                                    {
                                        CisBaseObject volumeInstance = new CisBaseObject();
                                        jobDetailsInstance.Volume = volumeInstance;
                                        
                                        XElement nameElement6 = volumeElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement6 != null)
                                        {
                                            string nameInstance6 = nameElement6.Value;
                                            volumeInstance.Name = nameInstance6;
                                        }
                                        
                                        XElement instanceIdElement6 = volumeElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement6 != null)
                                        {
                                            string instanceIdInstance6 = instanceIdElement6.Value;
                                            volumeInstance.InstanceId = instanceIdInstance6;
                                        }
                                        
                                        XElement operationInProgressElement5 = volumeElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement5 != null)
                                        {
                                            OperationInProgress operationInProgressInstance5 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement5.Value, true));
                                            volumeInstance.OperationInProgress = operationInProgressInstance5;
                                        }
                                    }
                                    
                                    XElement sourceVolumeElement = deviceJobListElement.Element(XName.Get("SourceVolume", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (sourceVolumeElement != null)
                                    {
                                        CisBaseObject sourceVolumeInstance = new CisBaseObject();
                                        jobDetailsInstance.SourceVolume = sourceVolumeInstance;
                                        
                                        XElement nameElement7 = sourceVolumeElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement7 != null)
                                        {
                                            string nameInstance7 = nameElement7.Value;
                                            sourceVolumeInstance.Name = nameInstance7;
                                        }
                                        
                                        XElement instanceIdElement7 = sourceVolumeElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement7 != null)
                                        {
                                            string instanceIdInstance7 = instanceIdElement7.Value;
                                            sourceVolumeInstance.InstanceId = instanceIdInstance7;
                                        }
                                        
                                        XElement operationInProgressElement6 = sourceVolumeElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement6 != null)
                                        {
                                            OperationInProgress operationInProgressInstance6 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement6.Value, true));
                                            sourceVolumeInstance.OperationInProgress = operationInProgressInstance6;
                                        }
                                    }
                                    
                                    XElement backupTimeStampElement = deviceJobListElement.Element(XName.Get("BackupTimeStamp", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (backupTimeStampElement != null)
                                    {
                                        DateTime backupTimeStampInstance = DateTime.Parse(backupTimeStampElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        jobDetailsInstance.BackupTimeStamp = backupTimeStampInstance;
                                    }
                                    
                                    XElement backupPolicyElement = deviceJobListElement.Element(XName.Get("BackupPolicy", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (backupPolicyElement != null)
                                    {
                                        string backupPolicyInstance = backupPolicyElement.Value;
                                        jobDetailsInstance.BackupPolicy = backupPolicyInstance;
                                    }
                                    
                                    XElement backupTypeElement = deviceJobListElement.Element(XName.Get("BackupType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (backupTypeElement != null)
                                    {
                                        BackupType backupTypeInstance = ((BackupType)Enum.Parse(typeof(BackupType), backupTypeElement.Value, true));
                                        jobDetailsInstance.BackupType = backupTypeInstance;
                                    }
                                    
                                    XElement jobDetailsElement = deviceJobListElement.Element(XName.Get("JobDetails", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (jobDetailsElement != null)
                                    {
                                        JobStatusInfo jobDetailsInstance2 = new JobStatusInfo();
                                        jobDetailsInstance.JobDetails = jobDetailsInstance2;
                                        
                                        XElement jobIdElement = jobDetailsElement.Element(XName.Get("JobId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (jobIdElement != null)
                                        {
                                            string jobIdInstance = jobIdElement.Value;
                                            jobDetailsInstance2.JobId = jobIdInstance;
                                        }
                                        
                                        XElement statusElement2 = jobDetailsElement.Element(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (statusElement2 != null)
                                        {
                                            JobStatus statusInstance2 = ((JobStatus)Enum.Parse(typeof(JobStatus), statusElement2.Value, true));
                                            jobDetailsInstance2.Status = statusInstance2;
                                        }
                                        
                                        XElement resultElement = jobDetailsElement.Element(XName.Get("Result", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (resultElement != null)
                                        {
                                            JobResult resultInstance = ((JobResult)Enum.Parse(typeof(JobResult), resultElement.Value, true));
                                            jobDetailsInstance2.Result = resultInstance;
                                        }
                                        
                                        XElement errorElement = jobDetailsElement.Element(XName.Get("Error", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (errorElement != null)
                                        {
                                            CisApiError errorInstance = new CisApiError();
                                            jobDetailsInstance2.Error = errorInstance;
                                            
                                            XElement codeElement = errorElement.Element(XName.Get("Code", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (codeElement != null)
                                            {
                                                string codeInstance = codeElement.Value;
                                                errorInstance.Code = codeInstance;
                                            }
                                            
                                            XElement errorCodeElement = errorElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (errorCodeElement != null)
                                            {
                                                string errorCodeInstance = errorCodeElement.Value;
                                                errorInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            XElement languageElement = errorElement.Element(XName.Get("Language", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (languageElement != null)
                                            {
                                                string languageInstance = languageElement.Value;
                                                errorInstance.Language = languageInstance;
                                            }
                                            
                                            XElement messageElement = errorElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (messageElement != null)
                                            {
                                                string messageInstance = messageElement.Value;
                                                errorInstance.Message = messageInstance;
                                            }
                                            
                                            XElement itemsSequenceElement = errorElement.Element(XName.Get("Items", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (itemsSequenceElement != null)
                                            {
                                                foreach (XElement itemsElement in itemsSequenceElement.Elements(XName.Get("Item", "http://windowscloudbackup.com/CiS/V2013_03")))
                                                {
                                                    Item itemInstance = new Item();
                                                    errorInstance.Values.Add(itemInstance);
                                                    
                                                    XElement keyElement = itemsElement.Element(XName.Get("Key", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                    if (keyElement != null)
                                                    {
                                                        string keyInstance = keyElement.Value;
                                                        itemInstance.Key = keyInstance;
                                                    }
                                                    
                                                    XElement valueElement = itemsElement.Element(XName.Get("Value", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                    if (valueElement != null)
                                                    {
                                                        string valueInstance = valueElement.Value;
                                                        itemInstance.Value = valueInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        XElement taskResultElement = jobDetailsElement.Element(XName.Get("TaskResult", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (taskResultElement != null)
                                        {
                                            TaskResult taskResultInstance = ((TaskResult)Enum.Parse(typeof(TaskResult), taskResultElement.Value, true));
                                            jobDetailsInstance2.TaskResult = taskResultInstance;
                                        }
                                        
                                        XElement jobStepsSequenceElement = jobDetailsElement.Element(XName.Get("JobSteps", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (jobStepsSequenceElement != null)
                                        {
                                            foreach (XElement jobStepsElement in jobStepsSequenceElement.Elements(XName.Get("JobStep", "http://windowscloudbackup.com/CiS/V2013_03")))
                                            {
                                                JobStep jobStepInstance = new JobStep();
                                                jobDetailsInstance2.JobSteps.Add(jobStepInstance);
                                                
                                                XElement messageElement2 = jobStepsElement.Element(XName.Get("Message", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (messageElement2 != null)
                                                {
                                                    string messageInstance2 = messageElement2.Value;
                                                    jobStepInstance.Message = messageInstance2;
                                                }
                                                
                                                XElement statusElement3 = jobStepsElement.Element(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (statusElement3 != null)
                                                {
                                                    JobStatus statusInstance3 = ((JobStatus)Enum.Parse(typeof(JobStatus), statusElement3.Value, true));
                                                    jobStepInstance.Status = statusInstance3;
                                                }
                                                
                                                XElement resultElement2 = jobStepsElement.Element(XName.Get("Result", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (resultElement2 != null)
                                                {
                                                    JobResult resultInstance2 = ((JobResult)Enum.Parse(typeof(JobResult), resultElement2.Value, true));
                                                    jobStepInstance.Result = resultInstance2;
                                                }
                                                
                                                XElement detailElement = jobStepsElement.Element(XName.Get("Detail", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (detailElement != null)
                                                {
                                                    string detailInstance = detailElement.Value;
                                                    jobStepInstance.Detail = detailInstance;
                                                }
                                                
                                                XElement errorCodeElement2 = jobStepsElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                if (errorCodeElement2 != null)
                                                {
                                                    string errorCodeInstance2 = errorCodeElement2.Value;
                                                    jobStepInstance.ErrorCode = errorCodeInstance2;
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement isJobCancellableElement = deviceJobListElement.Element(XName.Get("IsJobCancellable", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isJobCancellableElement != null)
                                    {
                                        bool isJobCancellableInstance = bool.Parse(isJobCancellableElement.Value);
                                        jobDetailsInstance.IsJobCancellable = isJobCancellableInstance;
                                    }
                                    
                                    XElement errorDetailsSequenceElement = deviceJobListElement.Element(XName.Get("ErrorDetails", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (errorDetailsSequenceElement != null)
                                    {
                                        foreach (XElement errorDetailsElement in errorDetailsSequenceElement.Elements(XName.Get("ErrorInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                        {
                                            ErrorInfo errorInfoInstance = new ErrorInfo();
                                            jobDetailsInstance.ErrorDetails.Add(errorInfoInstance);
                                            
                                            XElement errorCodeElement3 = errorDetailsElement.Element(XName.Get("ErrorCode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (errorCodeElement3 != null)
                                            {
                                                int errorCodeInstance3 = int.Parse(errorCodeElement3.Value, CultureInfo.InvariantCulture);
                                                errorInfoInstance.ErrorCode = errorCodeInstance3;
                                            }
                                            
                                            XElement errorTitleElement = errorDetailsElement.Element(XName.Get("ErrorTitle", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (errorTitleElement != null)
                                            {
                                                string errorTitleInstance = errorTitleElement.Value;
                                                errorInfoInstance.ErrorTitle = errorTitleInstance;
                                            }
                                            
                                            XElement errorStringElement = errorDetailsElement.Element(XName.Get("ErrorString", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (errorStringElement != null)
                                            {
                                                string errorStringInstance = errorStringElement.Value;
                                                errorInfoInstance.ErrorString = errorStringInstance;
                                            }
                                            
                                            XElement recommendationsSequenceElement = errorDetailsElement.Element(XName.Get("Recommendations", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (recommendationsSequenceElement != null)
                                            {
                                                foreach (XElement recommendationsElement in recommendationsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                                {
                                                    errorInfoInstance.Recommendations.Add(recommendationsElement.Value);
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement hideProgressDetailsElement = deviceJobListElement.Element(XName.Get("HideProgressDetails", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (hideProgressDetailsElement != null)
                                    {
                                        bool hideProgressDetailsInstance = bool.Parse(hideProgressDetailsElement.Value);
                                        jobDetailsInstance.HideProgressDetails = hideProgressDetailsInstance;
                                    }
                                    
                                    XElement isInstantRestoreCompleteElement = deviceJobListElement.Element(XName.Get("IsInstantRestoreComplete", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isInstantRestoreCompleteElement != null)
                                    {
                                        bool isInstantRestoreCompleteInstance = bool.Parse(isInstantRestoreCompleteElement.Value);
                                        jobDetailsInstance.IsInstantRestoreComplete = isInstantRestoreCompleteInstance;
                                    }
                                }
                            }
                            
                            XElement countElement = jobQueryResultV2Element.Element(XName.Get("Count", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (countElement != null)
                            {
                                int countInstance = int.Parse(countElement.Value, CultureInfo.InvariantCulture);
                                result.Count = countInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update a device job
        /// </summary>
        /// <param name='deviceId'>
        /// Required. id of device
        /// </param>
        /// <param name='jobId'>
        /// Required. id of job to update
        /// </param>
        /// <param name='updateRequest'>
        /// Required. Request data, contains the action to be taken
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> UpdateDeviceJobAsync(string deviceId, string jobId, UpdateDeviceJobRequest updateRequest, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("updateRequest", updateRequest);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateDeviceJobAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GuidTaskResponse response = await client.DeviceJob.BeginUpdateDeviceJobAsync(deviceId, jobId, updateRequest, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
