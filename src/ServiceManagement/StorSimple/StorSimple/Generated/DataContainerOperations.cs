// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// All Operations related to Volume Containers
    /// </summary>
    internal partial class DataContainerOperations : IServiceOperations<StorSimpleManagementClient>, IDataContainerOperations
    {
        /// <summary>
        /// Initializes a new instance of the DataContainerOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DataContainerOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Begin Creating Volume Container operation creates a new volume
        /// container.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='containerDetails'>
        /// Required. Parameters supplied to the Begin Creating Volume
        /// Container operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<TaskResponse> BeginCreatingAsync(string deviceId, DataContainerRequest containerDetails, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (containerDetails == null)
            {
                throw new ArgumentNullException("containerDetails");
            }
            if (containerDetails.Name == null)
            {
                throw new ArgumentNullException("containerDetails.Name");
            }
            if (containerDetails.PrimaryStorageAccountCredential == null)
            {
                throw new ArgumentNullException("containerDetails.PrimaryStorageAccountCredential");
            }
            if (containerDetails.PrimaryStorageAccountCredential.Hostname == null)
            {
                throw new ArgumentNullException("containerDetails.PrimaryStorageAccountCredential.Hostname");
            }
            if (containerDetails.PrimaryStorageAccountCredential.Login == null)
            {
                throw new ArgumentNullException("containerDetails.PrimaryStorageAccountCredential.Login");
            }
            if (containerDetails.PrimaryStorageAccountCredential.Password == null)
            {
                throw new ArgumentNullException("containerDetails.PrimaryStorageAccountCredential.Password");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("containerDetails", containerDetails);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/datacontainers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.2.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement dataContainerV2Element = new XElement(XName.Get("DataContainer_V2", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(dataContainerV2Element);
                
                if (containerDetails.InstanceId != null)
                {
                    XElement instanceIdElement = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement.Value = containerDetails.InstanceId;
                    dataContainerV2Element.Add(instanceIdElement);
                }
                
                XElement nameElement = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement.Value = containerDetails.Name;
                dataContainerV2Element.Add(nameElement);
                
                XElement operationInProgressElement = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement.Value = containerDetails.OperationInProgress.ToString();
                dataContainerV2Element.Add(operationInProgressElement);
                
                XElement bandwidthRateElement = new XElement(XName.Get("BandwidthRate", "http://windowscloudbackup.com/CiS/V2013_03"));
                bandwidthRateElement.Value = containerDetails.BandwidthRate.ToString();
                dataContainerV2Element.Add(bandwidthRateElement);
                
                if (containerDetails.EncryptionKey != null)
                {
                    XElement encryptionKeyElement = new XElement(XName.Get("EncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                    encryptionKeyElement.Value = containerDetails.EncryptionKey;
                    dataContainerV2Element.Add(encryptionKeyElement);
                }
                
                XElement isDefaultElement = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                isDefaultElement.Value = containerDetails.IsDefault.ToString().ToLower();
                dataContainerV2Element.Add(isDefaultElement);
                
                XElement isEncryptionEnabledElement = new XElement(XName.Get("IsEncryptionEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                isEncryptionEnabledElement.Value = containerDetails.IsEncryptionEnabled.ToString().ToLower();
                dataContainerV2Element.Add(isEncryptionEnabledElement);
                
                XElement ownedElement = new XElement(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                ownedElement.Value = containerDetails.Owned.ToString().ToLower();
                dataContainerV2Element.Add(ownedElement);
                
                XElement primaryStorageAccountCredentialElement = new XElement(XName.Get("PrimaryStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                dataContainerV2Element.Add(primaryStorageAccountCredentialElement);
                
                if (containerDetails.PrimaryStorageAccountCredential.InstanceId != null)
                {
                    XElement instanceIdElement2 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement2.Value = containerDetails.PrimaryStorageAccountCredential.InstanceId;
                    primaryStorageAccountCredentialElement.Add(instanceIdElement2);
                }
                
                if (containerDetails.PrimaryStorageAccountCredential.Name != null)
                {
                    XElement nameElement2 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement2.Value = containerDetails.PrimaryStorageAccountCredential.Name;
                    primaryStorageAccountCredentialElement.Add(nameElement2);
                }
                
                XElement operationInProgressElement2 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement2.Value = containerDetails.PrimaryStorageAccountCredential.OperationInProgress.ToString();
                primaryStorageAccountCredentialElement.Add(operationInProgressElement2);
                
                XElement cloudTypeElement = new XElement(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                cloudTypeElement.Value = StorSimpleManagementClient.CloudTypeToString(containerDetails.PrimaryStorageAccountCredential.CloudType);
                primaryStorageAccountCredentialElement.Add(cloudTypeElement);
                
                XElement hostnameElement = new XElement(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                hostnameElement.Value = containerDetails.PrimaryStorageAccountCredential.Hostname;
                primaryStorageAccountCredentialElement.Add(hostnameElement);
                
                XElement isDefaultElement2 = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                isDefaultElement2.Value = containerDetails.PrimaryStorageAccountCredential.IsDefault.ToString().ToLower();
                primaryStorageAccountCredentialElement.Add(isDefaultElement2);
                
                if (containerDetails.PrimaryStorageAccountCredential.Location != null)
                {
                    XElement locationElement = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                    locationElement.Value = containerDetails.PrimaryStorageAccountCredential.Location;
                    primaryStorageAccountCredentialElement.Add(locationElement);
                }
                
                XElement loginElement = new XElement(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                loginElement.Value = containerDetails.PrimaryStorageAccountCredential.Login;
                primaryStorageAccountCredentialElement.Add(loginElement);
                
                XElement passwordElement = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                passwordElement.Value = containerDetails.PrimaryStorageAccountCredential.Password;
                primaryStorageAccountCredentialElement.Add(passwordElement);
                
                XElement useSSLElement = new XElement(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                useSSLElement.Value = containerDetails.PrimaryStorageAccountCredential.UseSSL.ToString().ToLower();
                primaryStorageAccountCredentialElement.Add(useSSLElement);
                
                XElement volumeCountElement = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                volumeCountElement.Value = containerDetails.PrimaryStorageAccountCredential.VolumeCount.ToString();
                primaryStorageAccountCredentialElement.Add(volumeCountElement);
                
                if (containerDetails.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint != null)
                {
                    XElement passwordEncryptionCertThumbprintElement = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    passwordEncryptionCertThumbprintElement.Value = containerDetails.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint;
                    primaryStorageAccountCredentialElement.Add(passwordEncryptionCertThumbprintElement);
                }
                else
                {
                    XElement emptyElement = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    XAttribute nilAttribute = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                    nilAttribute.Value = "true";
                    emptyElement.Add(nilAttribute);
                    primaryStorageAccountCredentialElement.Add(emptyElement);
                }
                
                if (containerDetails.SecretsEncryptionThumbprint != null)
                {
                    XElement secretsEncryptionThumbprintElement = new XElement(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    secretsEncryptionThumbprintElement.Value = containerDetails.SecretsEncryptionThumbprint;
                    dataContainerV2Element.Add(secretsEncryptionThumbprintElement);
                }
                
                XElement volumeCountElement2 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                volumeCountElement2.Value = containerDetails.VolumeCount.ToString();
                dataContainerV2Element.Add(volumeCountElement2);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.TaskId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Deleting Volume Container operation deletes the specified
        /// volume container.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='dataContainerId'>
        /// Required. id of data container which needs to be deleted
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<TaskResponse> BeginDeletingAsync(string deviceId, string dataContainerId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (dataContainerId == null)
            {
                throw new ArgumentNullException("dataContainerId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("dataContainerId", dataContainerId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/datacontainers/";
            url = url + Uri.EscapeDataString(dataContainerId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.TaskId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='containerDetails'>
        /// Required. Parameters supplied to the Create Volume Container
        /// operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> CreateAsync(string deviceId, DataContainerRequest containerDetails, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("containerDetails", containerDetails);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TaskResponse response = await client.DataContainer.BeginCreatingAsync(deviceId, containerDetails, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='dataContainerId'>
        /// Required. id of data container which needs to be deleted
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> DeleteAsync(string deviceId, string dataContainerId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("dataContainerId", dataContainerId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TaskResponse response = await client.DataContainer.BeginDeletingAsync(deviceId, dataContainerId, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <param name='deviceId'>
        /// Optional.
        /// </param>
        /// <param name='dataContainerName'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get of data containers.
        /// </returns>
        public async Task<DataContainerGetResponse> GetAsync(string deviceId, string dataContainerName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("dataContainerName", dataContainerName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            if (deviceId != null)
            {
                url = url + Uri.EscapeDataString(deviceId);
            }
            url = url + "/datacontainers";
            List<string> queryParameters = new List<string>();
            if (dataContainerName != null)
            {
                queryParameters.Add("dataContainerName=" + Uri.EscapeDataString(dataContainerName));
            }
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataContainerGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataContainerGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement dataContainerBaseElement = responseDoc.Element(XName.Get("DataContainer_Base", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (dataContainerBaseElement != null)
                        {
                            DataContainer dataContainerBaseInstance = new DataContainer();
                            result.DataContainerInfo = dataContainerBaseInstance;
                            
                            XElement instanceIdElement = dataContainerBaseElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (instanceIdElement != null)
                            {
                                string instanceIdInstance = instanceIdElement.Value;
                                dataContainerBaseInstance.InstanceId = instanceIdInstance;
                            }
                            
                            XElement nameElement = dataContainerBaseElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                dataContainerBaseInstance.Name = nameInstance;
                            }
                            
                            XElement operationInProgressElement = dataContainerBaseElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (operationInProgressElement != null)
                            {
                                OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                dataContainerBaseInstance.OperationInProgress = operationInProgressInstance;
                            }
                            
                            XElement bandwidthRateElement = dataContainerBaseElement.Element(XName.Get("BandwidthRate", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (bandwidthRateElement != null)
                            {
                                int bandwidthRateInstance = int.Parse(bandwidthRateElement.Value, CultureInfo.InvariantCulture);
                                dataContainerBaseInstance.BandwidthRate = bandwidthRateInstance;
                            }
                            
                            XElement encryptionKeyElement = dataContainerBaseElement.Element(XName.Get("EncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (encryptionKeyElement != null)
                            {
                                string encryptionKeyInstance = encryptionKeyElement.Value;
                                dataContainerBaseInstance.EncryptionKey = encryptionKeyInstance;
                            }
                            
                            XElement isDefaultElement = dataContainerBaseElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (isDefaultElement != null)
                            {
                                bool isDefaultInstance = bool.Parse(isDefaultElement.Value);
                                dataContainerBaseInstance.IsDefault = isDefaultInstance;
                            }
                            
                            XElement isEncryptionEnabledElement = dataContainerBaseElement.Element(XName.Get("IsEncryptionEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (isEncryptionEnabledElement != null)
                            {
                                bool isEncryptionEnabledInstance = bool.Parse(isEncryptionEnabledElement.Value);
                                dataContainerBaseInstance.IsEncryptionEnabled = isEncryptionEnabledInstance;
                            }
                            
                            XElement ownedElement = dataContainerBaseElement.Element(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (ownedElement != null)
                            {
                                bool ownedInstance = bool.Parse(ownedElement.Value);
                                dataContainerBaseInstance.Owned = ownedInstance;
                            }
                            
                            XElement primaryStorageAccountCredentialElement = dataContainerBaseElement.Element(XName.Get("PrimaryStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (primaryStorageAccountCredentialElement != null)
                            {
                                StorageAccountCredentialResponse primaryStorageAccountCredentialInstance = new StorageAccountCredentialResponse();
                                dataContainerBaseInstance.PrimaryStorageAccountCredential = primaryStorageAccountCredentialInstance;
                                
                                XElement instanceIdElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (instanceIdElement2 != null)
                                {
                                    string instanceIdInstance2 = instanceIdElement2.Value;
                                    primaryStorageAccountCredentialInstance.InstanceId = instanceIdInstance2;
                                }
                                
                                XElement nameElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (nameElement2 != null)
                                {
                                    string nameInstance2 = nameElement2.Value;
                                    primaryStorageAccountCredentialInstance.Name = nameInstance2;
                                }
                                
                                XElement operationInProgressElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (operationInProgressElement2 != null)
                                {
                                    OperationInProgress operationInProgressInstance2 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement2.Value, true));
                                    primaryStorageAccountCredentialInstance.OperationInProgress = operationInProgressInstance2;
                                }
                                
                                XElement cloudTypeElement = primaryStorageAccountCredentialElement.Element(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (cloudTypeElement != null)
                                {
                                    CloudType cloudTypeInstance = StorSimpleManagementClient.ParseCloudType(cloudTypeElement.Value);
                                    primaryStorageAccountCredentialInstance.CloudType = cloudTypeInstance;
                                }
                                
                                XElement hostnameElement = primaryStorageAccountCredentialElement.Element(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (hostnameElement != null)
                                {
                                    string hostnameInstance = hostnameElement.Value;
                                    primaryStorageAccountCredentialInstance.Hostname = hostnameInstance;
                                }
                                
                                XElement isDefaultElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isDefaultElement2 != null)
                                {
                                    bool isDefaultInstance2 = bool.Parse(isDefaultElement2.Value);
                                    primaryStorageAccountCredentialInstance.IsDefault = isDefaultInstance2;
                                }
                                
                                XElement locationElement = primaryStorageAccountCredentialElement.Element(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (locationElement != null)
                                {
                                    string locationInstance = locationElement.Value;
                                    primaryStorageAccountCredentialInstance.Location = locationInstance;
                                }
                                
                                XElement loginElement = primaryStorageAccountCredentialElement.Element(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (loginElement != null)
                                {
                                    string loginInstance = loginElement.Value;
                                    primaryStorageAccountCredentialInstance.Login = loginInstance;
                                }
                                
                                XElement passwordElement = primaryStorageAccountCredentialElement.Element(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (passwordElement != null)
                                {
                                    string passwordInstance = passwordElement.Value;
                                    primaryStorageAccountCredentialInstance.Password = passwordInstance;
                                }
                                
                                XElement useSSLElement = primaryStorageAccountCredentialElement.Element(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (useSSLElement != null)
                                {
                                    bool useSSLInstance = bool.Parse(useSSLElement.Value);
                                    primaryStorageAccountCredentialInstance.UseSSL = useSSLInstance;
                                }
                                
                                XElement volumeCountElement = primaryStorageAccountCredentialElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (volumeCountElement != null)
                                {
                                    int volumeCountInstance = int.Parse(volumeCountElement.Value, CultureInfo.InvariantCulture);
                                    primaryStorageAccountCredentialInstance.VolumeCount = volumeCountInstance;
                                }
                                
                                XElement passwordEncryptionCertThumbprintElement = primaryStorageAccountCredentialElement.Element(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (passwordEncryptionCertThumbprintElement != null)
                                {
                                    bool isNil = false;
                                    XAttribute nilAttribute = passwordEncryptionCertThumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute != null)
                                    {
                                        isNil = nilAttribute.Value == "true";
                                    }
                                    if (isNil == false)
                                    {
                                        string passwordEncryptionCertThumbprintInstance = passwordEncryptionCertThumbprintElement.Value;
                                        primaryStorageAccountCredentialInstance.PasswordEncryptionCertThumbprint = passwordEncryptionCertThumbprintInstance;
                                    }
                                }
                            }
                            
                            XElement secretsEncryptionThumbprintElement = dataContainerBaseElement.Element(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (secretsEncryptionThumbprintElement != null)
                            {
                                string secretsEncryptionThumbprintInstance = secretsEncryptionThumbprintElement.Value;
                                dataContainerBaseInstance.SecretsEncryptionThumbprint = secretsEncryptionThumbprintInstance;
                            }
                            
                            XElement volumeCountElement2 = dataContainerBaseElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (volumeCountElement2 != null)
                            {
                                int volumeCountInstance2 = int.Parse(volumeCountElement2.Value, CultureInfo.InvariantCulture);
                                dataContainerBaseInstance.VolumeCount = volumeCountInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list of data containers.
        /// </returns>
        public async Task<DataContainerListResponse> ListAsync(string deviceId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            if (deviceId != null)
            {
                url = url + Uri.EscapeDataString(deviceId);
            }
            url = url + "/datacontainers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataContainerListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataContainerListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement arrayOfDataContainerSequenceElement = responseDoc.Element(XName.Get("ArrayOfDataContainer", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (arrayOfDataContainerSequenceElement != null)
                        {
                            foreach (XElement arrayOfDataContainerElement in arrayOfDataContainerSequenceElement.Elements(XName.Get("DataContainer", "http://windowscloudbackup.com/CiS/V2013_03")))
                            {
                                DataContainer dataContainerInstance = new DataContainer();
                                result.DataContainers.Add(dataContainerInstance);
                                
                                XElement instanceIdElement = arrayOfDataContainerElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (instanceIdElement != null)
                                {
                                    string instanceIdInstance = instanceIdElement.Value;
                                    dataContainerInstance.InstanceId = instanceIdInstance;
                                }
                                
                                XElement nameElement = arrayOfDataContainerElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    dataContainerInstance.Name = nameInstance;
                                }
                                
                                XElement operationInProgressElement = arrayOfDataContainerElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (operationInProgressElement != null)
                                {
                                    OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                    dataContainerInstance.OperationInProgress = operationInProgressInstance;
                                }
                                
                                XElement bandwidthRateElement = arrayOfDataContainerElement.Element(XName.Get("BandwidthRate", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (bandwidthRateElement != null)
                                {
                                    int bandwidthRateInstance = int.Parse(bandwidthRateElement.Value, CultureInfo.InvariantCulture);
                                    dataContainerInstance.BandwidthRate = bandwidthRateInstance;
                                }
                                
                                XElement encryptionKeyElement = arrayOfDataContainerElement.Element(XName.Get("EncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (encryptionKeyElement != null)
                                {
                                    string encryptionKeyInstance = encryptionKeyElement.Value;
                                    dataContainerInstance.EncryptionKey = encryptionKeyInstance;
                                }
                                
                                XElement isDefaultElement = arrayOfDataContainerElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isDefaultElement != null)
                                {
                                    bool isDefaultInstance = bool.Parse(isDefaultElement.Value);
                                    dataContainerInstance.IsDefault = isDefaultInstance;
                                }
                                
                                XElement isEncryptionEnabledElement = arrayOfDataContainerElement.Element(XName.Get("IsEncryptionEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isEncryptionEnabledElement != null)
                                {
                                    bool isEncryptionEnabledInstance = bool.Parse(isEncryptionEnabledElement.Value);
                                    dataContainerInstance.IsEncryptionEnabled = isEncryptionEnabledInstance;
                                }
                                
                                XElement ownedElement = arrayOfDataContainerElement.Element(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (ownedElement != null)
                                {
                                    bool ownedInstance = bool.Parse(ownedElement.Value);
                                    dataContainerInstance.Owned = ownedInstance;
                                }
                                
                                XElement primaryStorageAccountCredentialElement = arrayOfDataContainerElement.Element(XName.Get("PrimaryStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (primaryStorageAccountCredentialElement != null)
                                {
                                    StorageAccountCredentialResponse primaryStorageAccountCredentialInstance = new StorageAccountCredentialResponse();
                                    dataContainerInstance.PrimaryStorageAccountCredential = primaryStorageAccountCredentialInstance;
                                    
                                    XElement instanceIdElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (instanceIdElement2 != null)
                                    {
                                        string instanceIdInstance2 = instanceIdElement2.Value;
                                        primaryStorageAccountCredentialInstance.InstanceId = instanceIdInstance2;
                                    }
                                    
                                    XElement nameElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nameElement2 != null)
                                    {
                                        string nameInstance2 = nameElement2.Value;
                                        primaryStorageAccountCredentialInstance.Name = nameInstance2;
                                    }
                                    
                                    XElement operationInProgressElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (operationInProgressElement2 != null)
                                    {
                                        OperationInProgress operationInProgressInstance2 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement2.Value, true));
                                        primaryStorageAccountCredentialInstance.OperationInProgress = operationInProgressInstance2;
                                    }
                                    
                                    XElement cloudTypeElement = primaryStorageAccountCredentialElement.Element(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (cloudTypeElement != null)
                                    {
                                        CloudType cloudTypeInstance = StorSimpleManagementClient.ParseCloudType(cloudTypeElement.Value);
                                        primaryStorageAccountCredentialInstance.CloudType = cloudTypeInstance;
                                    }
                                    
                                    XElement hostnameElement = primaryStorageAccountCredentialElement.Element(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (hostnameElement != null)
                                    {
                                        string hostnameInstance = hostnameElement.Value;
                                        primaryStorageAccountCredentialInstance.Hostname = hostnameInstance;
                                    }
                                    
                                    XElement isDefaultElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isDefaultElement2 != null)
                                    {
                                        bool isDefaultInstance2 = bool.Parse(isDefaultElement2.Value);
                                        primaryStorageAccountCredentialInstance.IsDefault = isDefaultInstance2;
                                    }
                                    
                                    XElement locationElement = primaryStorageAccountCredentialElement.Element(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (locationElement != null)
                                    {
                                        string locationInstance = locationElement.Value;
                                        primaryStorageAccountCredentialInstance.Location = locationInstance;
                                    }
                                    
                                    XElement loginElement = primaryStorageAccountCredentialElement.Element(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (loginElement != null)
                                    {
                                        string loginInstance = loginElement.Value;
                                        primaryStorageAccountCredentialInstance.Login = loginInstance;
                                    }
                                    
                                    XElement passwordElement = primaryStorageAccountCredentialElement.Element(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (passwordElement != null)
                                    {
                                        string passwordInstance = passwordElement.Value;
                                        primaryStorageAccountCredentialInstance.Password = passwordInstance;
                                    }
                                    
                                    XElement useSSLElement = primaryStorageAccountCredentialElement.Element(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (useSSLElement != null)
                                    {
                                        bool useSSLInstance = bool.Parse(useSSLElement.Value);
                                        primaryStorageAccountCredentialInstance.UseSSL = useSSLInstance;
                                    }
                                    
                                    XElement volumeCountElement = primaryStorageAccountCredentialElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (volumeCountElement != null)
                                    {
                                        int volumeCountInstance = int.Parse(volumeCountElement.Value, CultureInfo.InvariantCulture);
                                        primaryStorageAccountCredentialInstance.VolumeCount = volumeCountInstance;
                                    }
                                    
                                    XElement passwordEncryptionCertThumbprintElement = primaryStorageAccountCredentialElement.Element(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (passwordEncryptionCertThumbprintElement != null)
                                    {
                                        bool isNil = false;
                                        XAttribute nilAttribute = passwordEncryptionCertThumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                        if (nilAttribute != null)
                                        {
                                            isNil = nilAttribute.Value == "true";
                                        }
                                        if (isNil == false)
                                        {
                                            string passwordEncryptionCertThumbprintInstance = passwordEncryptionCertThumbprintElement.Value;
                                            primaryStorageAccountCredentialInstance.PasswordEncryptionCertThumbprint = passwordEncryptionCertThumbprintInstance;
                                        }
                                    }
                                }
                                
                                XElement secretsEncryptionThumbprintElement = arrayOfDataContainerElement.Element(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (secretsEncryptionThumbprintElement != null)
                                {
                                    string secretsEncryptionThumbprintInstance = secretsEncryptionThumbprintElement.Value;
                                    dataContainerInstance.SecretsEncryptionThumbprint = secretsEncryptionThumbprintInstance;
                                }
                                
                                XElement volumeCountElement2 = arrayOfDataContainerElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (volumeCountElement2 != null)
                                {
                                    int volumeCountInstance2 = int.Parse(volumeCountElement2.Value, CultureInfo.InvariantCulture);
                                    dataContainerInstance.VolumeCount = volumeCountInstance2;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
