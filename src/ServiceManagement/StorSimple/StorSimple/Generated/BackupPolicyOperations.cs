// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// All Operations related to Backup policies
    /// </summary>
    internal partial class BackupPolicyOperations : IServiceOperations<StorSimpleManagementClient>, IBackupPolicyOperations
    {
        /// <summary>
        /// Initializes a new instance of the BackupPolicyOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal BackupPolicyOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The BeginCreatingBackupPolicy operation creates a new backup policy
        /// for this given volume with the given schedules.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='backupPolicy'>
        /// Required. Parameters supplied to the Create Backup Policy operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<TaskResponse> BeginCreatingBackupPolicyAsync(string deviceId, NewBackupPolicyConfig backupPolicy, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (backupPolicy == null)
            {
                throw new ArgumentNullException("backupPolicy");
            }
            if (backupPolicy.BackupSchedules == null)
            {
                throw new ArgumentNullException("backupPolicy.BackupSchedules");
            }
            if (backupPolicy.BackupSchedules != null)
            {
                foreach (BackupScheduleBase backupSchedulesParameterItem in backupPolicy.BackupSchedules)
                {
                    if (backupSchedulesParameterItem.Recurrence == null)
                    {
                        throw new ArgumentNullException("backupPolicy.BackupSchedules.Recurrence");
                    }
                    if (backupSchedulesParameterItem.StartTime == null)
                    {
                        throw new ArgumentNullException("backupPolicy.BackupSchedules.StartTime");
                    }
                }
            }
            if (backupPolicy.Name == null)
            {
                throw new ArgumentNullException("backupPolicy.Name");
            }
            if (backupPolicy.VolumeIds == null)
            {
                throw new ArgumentNullException("backupPolicy.VolumeIds");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("backupPolicy", backupPolicy);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingBackupPolicyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/policies";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement addBackupPolicyRequestElement = new XElement(XName.Get("AddBackupPolicyRequest", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(addBackupPolicyRequestElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement.Value = backupPolicy.Name;
                addBackupPolicyRequestElement.Add(nameElement);
                
                XElement schedulesSequenceElement = new XElement(XName.Get("Schedules", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (BackupScheduleBase schedulesItem in backupPolicy.BackupSchedules)
                {
                    XElement backupScheduleBaseElement = new XElement(XName.Get("BackupScheduleBase", "http://windowscloudbackup.com/CiS/V2013_03"));
                    schedulesSequenceElement.Add(backupScheduleBaseElement);
                    
                    XElement backupTypeElement = new XElement(XName.Get("BackupType", "http://windowscloudbackup.com/CiS/V2013_03"));
                    backupTypeElement.Value = schedulesItem.BackupType.ToString();
                    backupScheduleBaseElement.Add(backupTypeElement);
                    
                    XElement recurrenceElement = new XElement(XName.Get("Recurrence", "http://windowscloudbackup.com/CiS/V2013_03"));
                    backupScheduleBaseElement.Add(recurrenceElement);
                    
                    XElement recurrenceTypeElement = new XElement(XName.Get("RecurrenceType", "http://windowscloudbackup.com/CiS/V2013_03"));
                    recurrenceTypeElement.Value = schedulesItem.Recurrence.RecurrenceType.ToString();
                    recurrenceElement.Add(recurrenceTypeElement);
                    
                    XElement recurrenceValueElement = new XElement(XName.Get("RecurrenceValue", "http://windowscloudbackup.com/CiS/V2013_03"));
                    recurrenceValueElement.Value = schedulesItem.Recurrence.RecurrenceValue.ToString();
                    recurrenceElement.Add(recurrenceValueElement);
                    
                    XElement retentionCountElement = new XElement(XName.Get("RetentionCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    retentionCountElement.Value = schedulesItem.RetentionCount.ToString();
                    backupScheduleBaseElement.Add(retentionCountElement);
                    
                    XElement startTimeElement = new XElement(XName.Get("StartTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                    startTimeElement.Value = schedulesItem.StartTime;
                    backupScheduleBaseElement.Add(startTimeElement);
                    
                    XElement statusElement = new XElement(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                    statusElement.Value = schedulesItem.Status.ToString();
                    backupScheduleBaseElement.Add(statusElement);
                }
                addBackupPolicyRequestElement.Add(schedulesSequenceElement);
                
                XElement virtualDiskIdsSequenceElement = new XElement(XName.Get("VirtualDiskIds", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (string virtualDiskIdsItem in backupPolicy.VolumeIds)
                {
                    XElement virtualDiskIdsItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                    virtualDiskIdsItemElement.Value = virtualDiskIdsItem;
                    virtualDiskIdsSequenceElement.Add(virtualDiskIdsItemElement);
                }
                addBackupPolicyRequestElement.Add(virtualDiskIdsSequenceElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.TaskId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin deleting a backup policy represented by the policyId provided.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='policyId'>
        /// Required. The backup policy ID to delete.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<TaskResponse> BeginDeletingAsync(string deviceId, string policyId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (policyId == null)
            {
                throw new ArgumentNullException("policyId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("policyId", policyId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/policies/";
            url = url + Uri.EscapeDataString(policyId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.TaskId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The BeginUpdatingBackupPolicy operation updates a backup policy
        /// represented by policyId for this given volume with the given
        /// schedules.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='policyId'>
        /// Required. The backup policy ID to update.
        /// </param>
        /// <param name='policyInfo'>
        /// Required. Parameters supplied to the Update Backup Policy operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<TaskResponse> BeginUpdatingBackupPolicyAsync(string deviceId, string policyId, UpdateBackupPolicyConfig policyInfo, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (policyId == null)
            {
                throw new ArgumentNullException("policyId");
            }
            if (policyInfo == null)
            {
                throw new ArgumentNullException("policyInfo");
            }
            if (policyInfo.BackupSchedulesToBeAdded != null)
            {
                foreach (BackupScheduleBase backupSchedulesToBeAddedParameterItem in policyInfo.BackupSchedulesToBeAdded)
                {
                    if (backupSchedulesToBeAddedParameterItem.Recurrence == null)
                    {
                        throw new ArgumentNullException("policyInfo.BackupSchedulesToBeAdded.Recurrence");
                    }
                    if (backupSchedulesToBeAddedParameterItem.StartTime == null)
                    {
                        throw new ArgumentNullException("policyInfo.BackupSchedulesToBeAdded.StartTime");
                    }
                }
            }
            if (policyInfo.BackupSchedulesToBeUpdated != null)
            {
                foreach (BackupScheduleUpdateRequest backupSchedulesToBeUpdatedParameterItem in policyInfo.BackupSchedulesToBeUpdated)
                {
                    if (backupSchedulesToBeUpdatedParameterItem.Id == null)
                    {
                        throw new ArgumentNullException("policyInfo.BackupSchedulesToBeUpdated.Id");
                    }
                    if (backupSchedulesToBeUpdatedParameterItem.Recurrence == null)
                    {
                        throw new ArgumentNullException("policyInfo.BackupSchedulesToBeUpdated.Recurrence");
                    }
                    if (backupSchedulesToBeUpdatedParameterItem.StartTime == null)
                    {
                        throw new ArgumentNullException("policyInfo.BackupSchedulesToBeUpdated.StartTime");
                    }
                }
            }
            if (policyInfo.Name == null)
            {
                throw new ArgumentNullException("policyInfo.Name");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("policyId", policyId);
                tracingParameters.Add("policyInfo", policyInfo);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingBackupPolicyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/policies/";
            url = url + Uri.EscapeDataString(policyId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateBackupPolicyRequestElement = new XElement(XName.Get("UpdateBackupPolicyRequest", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(updateBackupPolicyRequestElement);
                
                if (policyInfo.InstanceId != null)
                {
                    XElement instanceIdElement = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement.Value = policyInfo.InstanceId;
                    updateBackupPolicyRequestElement.Add(instanceIdElement);
                }
                
                XElement nameElement = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement.Value = policyInfo.Name;
                updateBackupPolicyRequestElement.Add(nameElement);
                
                XElement operationInProgressElement = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement.Value = policyInfo.OperationInProgress.ToString();
                updateBackupPolicyRequestElement.Add(operationInProgressElement);
                
                if (policyInfo.BackupSchedulesToBeAdded != null)
                {
                    XElement backupSchedulesToBeAddedSequenceElement = new XElement(XName.Get("BackupSchedulesToBeAdded", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (BackupScheduleBase backupSchedulesToBeAddedItem in policyInfo.BackupSchedulesToBeAdded)
                    {
                        XElement backupScheduleBaseElement = new XElement(XName.Get("BackupScheduleBase", "http://windowscloudbackup.com/CiS/V2013_03"));
                        backupSchedulesToBeAddedSequenceElement.Add(backupScheduleBaseElement);
                        
                        XElement backupTypeElement = new XElement(XName.Get("BackupType", "http://windowscloudbackup.com/CiS/V2013_03"));
                        backupTypeElement.Value = backupSchedulesToBeAddedItem.BackupType.ToString();
                        backupScheduleBaseElement.Add(backupTypeElement);
                        
                        XElement recurrenceElement = new XElement(XName.Get("Recurrence", "http://windowscloudbackup.com/CiS/V2013_03"));
                        backupScheduleBaseElement.Add(recurrenceElement);
                        
                        XElement recurrenceTypeElement = new XElement(XName.Get("RecurrenceType", "http://windowscloudbackup.com/CiS/V2013_03"));
                        recurrenceTypeElement.Value = backupSchedulesToBeAddedItem.Recurrence.RecurrenceType.ToString();
                        recurrenceElement.Add(recurrenceTypeElement);
                        
                        XElement recurrenceValueElement = new XElement(XName.Get("RecurrenceValue", "http://windowscloudbackup.com/CiS/V2013_03"));
                        recurrenceValueElement.Value = backupSchedulesToBeAddedItem.Recurrence.RecurrenceValue.ToString();
                        recurrenceElement.Add(recurrenceValueElement);
                        
                        XElement retentionCountElement = new XElement(XName.Get("RetentionCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                        retentionCountElement.Value = backupSchedulesToBeAddedItem.RetentionCount.ToString();
                        backupScheduleBaseElement.Add(retentionCountElement);
                        
                        XElement startTimeElement = new XElement(XName.Get("StartTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                        startTimeElement.Value = backupSchedulesToBeAddedItem.StartTime;
                        backupScheduleBaseElement.Add(startTimeElement);
                        
                        XElement statusElement = new XElement(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                        statusElement.Value = backupSchedulesToBeAddedItem.Status.ToString();
                        backupScheduleBaseElement.Add(statusElement);
                    }
                    updateBackupPolicyRequestElement.Add(backupSchedulesToBeAddedSequenceElement);
                }
                else
                {
                    XElement emptyElement = new XElement(XName.Get("BackupSchedulesToBeAdded", "http://windowscloudbackup.com/CiS/V2013_03"));
                    XAttribute nilAttribute = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                    nilAttribute.Value = "true";
                    emptyElement.Add(nilAttribute);
                    updateBackupPolicyRequestElement.Add(emptyElement);
                }
                
                if (policyInfo.BackupSchedulesToBeDeleted != null)
                {
                    XElement backupSchedulesToBeDeletedSequenceElement = new XElement(XName.Get("BackupSchedulesToBeDeleted", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (string backupSchedulesToBeDeletedItem in policyInfo.BackupSchedulesToBeDeleted)
                    {
                        XElement backupSchedulesToBeDeletedItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                        backupSchedulesToBeDeletedItemElement.Value = backupSchedulesToBeDeletedItem;
                        backupSchedulesToBeDeletedSequenceElement.Add(backupSchedulesToBeDeletedItemElement);
                    }
                    updateBackupPolicyRequestElement.Add(backupSchedulesToBeDeletedSequenceElement);
                }
                else
                {
                    XElement emptyElement2 = new XElement(XName.Get("BackupSchedulesToBeDeleted", "http://windowscloudbackup.com/CiS/V2013_03"));
                    XAttribute nilAttribute2 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                    nilAttribute2.Value = "true";
                    emptyElement2.Add(nilAttribute2);
                    updateBackupPolicyRequestElement.Add(emptyElement2);
                }
                
                if (policyInfo.BackupSchedulesToBeUpdated != null)
                {
                    XElement backupSchedulesToBeUpdatedSequenceElement = new XElement(XName.Get("BackupSchedulesToBeUpdated", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (BackupScheduleUpdateRequest backupSchedulesToBeUpdatedItem in policyInfo.BackupSchedulesToBeUpdated)
                    {
                        XElement backupScheduleUpdateRequestElement = new XElement(XName.Get("BackupScheduleUpdateRequest", "http://windowscloudbackup.com/CiS/V2013_03"));
                        backupSchedulesToBeUpdatedSequenceElement.Add(backupScheduleUpdateRequestElement);
                        
                        XElement backupTypeElement2 = new XElement(XName.Get("BackupType", "http://windowscloudbackup.com/CiS/V2013_03"));
                        backupTypeElement2.Value = backupSchedulesToBeUpdatedItem.BackupType.ToString();
                        backupScheduleUpdateRequestElement.Add(backupTypeElement2);
                        
                        XElement recurrenceElement2 = new XElement(XName.Get("Recurrence", "http://windowscloudbackup.com/CiS/V2013_03"));
                        backupScheduleUpdateRequestElement.Add(recurrenceElement2);
                        
                        XElement recurrenceTypeElement2 = new XElement(XName.Get("RecurrenceType", "http://windowscloudbackup.com/CiS/V2013_03"));
                        recurrenceTypeElement2.Value = backupSchedulesToBeUpdatedItem.Recurrence.RecurrenceType.ToString();
                        recurrenceElement2.Add(recurrenceTypeElement2);
                        
                        XElement recurrenceValueElement2 = new XElement(XName.Get("RecurrenceValue", "http://windowscloudbackup.com/CiS/V2013_03"));
                        recurrenceValueElement2.Value = backupSchedulesToBeUpdatedItem.Recurrence.RecurrenceValue.ToString();
                        recurrenceElement2.Add(recurrenceValueElement2);
                        
                        XElement retentionCountElement2 = new XElement(XName.Get("RetentionCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                        retentionCountElement2.Value = backupSchedulesToBeUpdatedItem.RetentionCount.ToString();
                        backupScheduleUpdateRequestElement.Add(retentionCountElement2);
                        
                        XElement startTimeElement2 = new XElement(XName.Get("StartTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                        startTimeElement2.Value = backupSchedulesToBeUpdatedItem.StartTime;
                        backupScheduleUpdateRequestElement.Add(startTimeElement2);
                        
                        XElement statusElement2 = new XElement(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                        statusElement2.Value = backupSchedulesToBeUpdatedItem.Status.ToString();
                        backupScheduleUpdateRequestElement.Add(statusElement2);
                        
                        XElement idElement = new XElement(XName.Get("Id", "http://windowscloudbackup.com/CiS/V2013_03"));
                        idElement.Value = backupSchedulesToBeUpdatedItem.Id;
                        backupScheduleUpdateRequestElement.Add(idElement);
                    }
                    updateBackupPolicyRequestElement.Add(backupSchedulesToBeUpdatedSequenceElement);
                }
                else
                {
                    XElement emptyElement3 = new XElement(XName.Get("BackupSchedulesToBeUpdated", "http://windowscloudbackup.com/CiS/V2013_03"));
                    XAttribute nilAttribute3 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                    nilAttribute3.Value = "true";
                    emptyElement3.Add(nilAttribute3);
                    updateBackupPolicyRequestElement.Add(emptyElement3);
                }
                
                XElement isPolicyRenamedElement = new XElement(XName.Get("IsPolicyRenamed", "http://windowscloudbackup.com/CiS/V2013_03"));
                isPolicyRenamedElement.Value = policyInfo.IsPolicyRenamed.ToString().ToLower();
                updateBackupPolicyRequestElement.Add(isPolicyRenamedElement);
                
                if (policyInfo.VolumeIds != null)
                {
                    XElement virtualDiskIdsSequenceElement = new XElement(XName.Get("VirtualDiskIds", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (string virtualDiskIdsItem in policyInfo.VolumeIds)
                    {
                        XElement virtualDiskIdsItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                        virtualDiskIdsItemElement.Value = virtualDiskIdsItem;
                        virtualDiskIdsSequenceElement.Add(virtualDiskIdsItemElement);
                    }
                    updateBackupPolicyRequestElement.Add(virtualDiskIdsSequenceElement);
                }
                else
                {
                    XElement emptyElement4 = new XElement(XName.Get("VirtualDiskIds", "http://windowscloudbackup.com/CiS/V2013_03"));
                    XAttribute nilAttribute4 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                    nilAttribute4.Value = "true";
                    emptyElement4.Add(nilAttribute4);
                    updateBackupPolicyRequestElement.Add(emptyElement4);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.TaskId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='backupPolicy'>
        /// Required. Parameters supplied to the Create Backup Policy operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> CreateAsync(string deviceId, NewBackupPolicyConfig backupPolicy, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("backupPolicy", backupPolicy);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TaskResponse response = await client.BackupPolicy.BeginCreatingBackupPolicyAsync(deviceId, backupPolicy, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='policyId'>
        /// Required. The backup policy ID to delete.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> DeleteAsync(string deviceId, string policyId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("policyId", policyId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TaskResponse response = await client.BackupPolicy.BeginDeletingAsync(deviceId, policyId, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='policyName'>
        /// Required. The name of the policy to fetch backup policy details by.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list of backup policies.
        /// </returns>
        public async Task<GetBackupPolicyDetailsResponse> GetBackupPolicyDetailsByNameAsync(string deviceId, string policyName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetBackupPolicyDetailsByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/policies";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("policyName=" + Uri.EscapeDataString(policyName));
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetBackupPolicyDetailsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetBackupPolicyDetailsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement backupPolicyDetailsElement = responseDoc.Element(XName.Get("BackupPolicyDetails", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (backupPolicyDetailsElement != null)
                        {
                            BackupPolicyDetails backupPolicyDetailsInstance = new BackupPolicyDetails();
                            result.BackupPolicyDetails = backupPolicyDetailsInstance;
                            
                            XElement schedulesSequenceElement = backupPolicyDetailsElement.Element(XName.Get("Schedules", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (schedulesSequenceElement != null)
                            {
                                foreach (XElement schedulesElement in schedulesSequenceElement.Elements(XName.Get("BackupScheduleResponse", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    BackupScheduleDetails backupScheduleResponseInstance = new BackupScheduleDetails();
                                    backupPolicyDetailsInstance.BackupSchedules.Add(backupScheduleResponseInstance);
                                    
                                    XElement lastSuccessfulRunElement = schedulesElement.Element(XName.Get("LastSuccessfulRun", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (lastSuccessfulRunElement != null)
                                    {
                                        DateTime lastSuccessfulRunInstance = DateTime.Parse(lastSuccessfulRunElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                        backupScheduleResponseInstance.LastSuccessfulRun = lastSuccessfulRunInstance;
                                    }
                                    
                                    XElement idElement = schedulesElement.Element(XName.Get("Id", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (idElement != null)
                                    {
                                        string idInstance = idElement.Value;
                                        backupScheduleResponseInstance.Id = idInstance;
                                    }
                                    
                                    XElement backupTypeElement = schedulesElement.Element(XName.Get("BackupType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (backupTypeElement != null)
                                    {
                                        BackupType backupTypeInstance = ((BackupType)Enum.Parse(typeof(BackupType), backupTypeElement.Value, true));
                                        backupScheduleResponseInstance.BackupType = backupTypeInstance;
                                    }
                                    
                                    XElement recurrenceElement = schedulesElement.Element(XName.Get("Recurrence", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (recurrenceElement != null)
                                    {
                                        ScheduleRecurrence recurrenceInstance = new ScheduleRecurrence();
                                        backupScheduleResponseInstance.Recurrence = recurrenceInstance;
                                        
                                        XElement recurrenceTypeElement = recurrenceElement.Element(XName.Get("RecurrenceType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (recurrenceTypeElement != null)
                                        {
                                            RecurrenceType recurrenceTypeInstance = ((RecurrenceType)Enum.Parse(typeof(RecurrenceType), recurrenceTypeElement.Value, true));
                                            recurrenceInstance.RecurrenceType = recurrenceTypeInstance;
                                        }
                                        
                                        XElement recurrenceValueElement = recurrenceElement.Element(XName.Get("RecurrenceValue", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (recurrenceValueElement != null)
                                        {
                                            int recurrenceValueInstance = int.Parse(recurrenceValueElement.Value, CultureInfo.InvariantCulture);
                                            recurrenceInstance.RecurrenceValue = recurrenceValueInstance;
                                        }
                                    }
                                    
                                    XElement retentionCountElement = schedulesElement.Element(XName.Get("RetentionCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (retentionCountElement != null)
                                    {
                                        long retentionCountInstance = long.Parse(retentionCountElement.Value, CultureInfo.InvariantCulture);
                                        backupScheduleResponseInstance.RetentionCount = retentionCountInstance;
                                    }
                                    
                                    XElement startTimeElement = schedulesElement.Element(XName.Get("StartTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (startTimeElement != null)
                                    {
                                        string startTimeInstance = startTimeElement.Value;
                                        backupScheduleResponseInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    XElement statusElement = schedulesElement.Element(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (statusElement != null)
                                    {
                                        ScheduleStatus statusInstance = ((ScheduleStatus)Enum.Parse(typeof(ScheduleStatus), statusElement.Value, true));
                                        backupScheduleResponseInstance.Status = statusInstance;
                                    }
                                }
                            }
                            
                            XElement virtualDisksSequenceElement = backupPolicyDetailsElement.Element(XName.Get("VirtualDisks", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (virtualDisksSequenceElement != null)
                            {
                                foreach (XElement virtualDisksElement in virtualDisksSequenceElement.Elements(XName.Get("VirtualDiskPolicyInfo", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    VolumePolicyInfo virtualDiskPolicyInfoInstance = new VolumePolicyInfo();
                                    backupPolicyDetailsInstance.Volumes.Add(virtualDiskPolicyInfoInstance);
                                    
                                    XElement associatedBackupPoliciesSequenceElement = virtualDisksElement.Element(XName.Get("AssociatedBackupPolicies", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (associatedBackupPoliciesSequenceElement != null)
                                    {
                                        foreach (XElement associatedBackupPoliciesElement in associatedBackupPoliciesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                        {
                                            virtualDiskPolicyInfoInstance.AssociatedBackupPolicies.Add(associatedBackupPoliciesElement.Value);
                                        }
                                    }
                                    
                                    XElement dataContainerIdElement = virtualDisksElement.Element(XName.Get("DataContainerId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (dataContainerIdElement != null)
                                    {
                                        string dataContainerIdInstance = dataContainerIdElement.Value;
                                        virtualDiskPolicyInfoInstance.DataContainerId = dataContainerIdInstance;
                                    }
                                    
                                    XElement dataContainerNameElement = virtualDisksElement.Element(XName.Get("DataContainerName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (dataContainerNameElement != null)
                                    {
                                        string dataContainerNameInstance = dataContainerNameElement.Value;
                                        virtualDiskPolicyInfoInstance.DataContainerName = dataContainerNameInstance;
                                    }
                                    
                                    XElement nameElement = virtualDisksElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        virtualDiskPolicyInfoInstance.Name = nameInstance;
                                    }
                                    
                                    XElement instanceIdElement = virtualDisksElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (instanceIdElement != null)
                                    {
                                        string instanceIdInstance = instanceIdElement.Value;
                                        virtualDiskPolicyInfoInstance.InstanceId = instanceIdInstance;
                                    }
                                    
                                    XElement operationInProgressElement = virtualDisksElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (operationInProgressElement != null)
                                    {
                                        OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                        virtualDiskPolicyInfoInstance.OperationInProgress = operationInProgressInstance;
                                    }
                                }
                            }
                            
                            XElement volumesCountElement = backupPolicyDetailsElement.Element(XName.Get("VolumesCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (volumesCountElement != null)
                            {
                                long volumesCountInstance = long.Parse(volumesCountElement.Value, CultureInfo.InvariantCulture);
                                backupPolicyDetailsInstance.VolumesCount = volumesCountInstance;
                            }
                            
                            XElement schedulesCountElement = backupPolicyDetailsElement.Element(XName.Get("SchedulesCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (schedulesCountElement != null)
                            {
                                long schedulesCountInstance = long.Parse(schedulesCountElement.Value, CultureInfo.InvariantCulture);
                                backupPolicyDetailsInstance.SchedulesCount = schedulesCountInstance;
                            }
                            
                            XElement nextBackupElement = backupPolicyDetailsElement.Element(XName.Get("NextBackup", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (nextBackupElement != null)
                            {
                                DateTime nextBackupInstance = DateTime.Parse(nextBackupElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                backupPolicyDetailsInstance.NextBackup = nextBackupInstance;
                            }
                            
                            XElement lastBackupElement = backupPolicyDetailsElement.Element(XName.Get("LastBackup", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (lastBackupElement != null && !string.IsNullOrEmpty(lastBackupElement.Value))
                            {
                                DateTime lastBackupInstance = DateTime.Parse(lastBackupElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                backupPolicyDetailsInstance.LastBackup = lastBackupInstance;
                            }
                            
                            XElement backupPolicyCreationTypeElement = backupPolicyDetailsElement.Element(XName.Get("BackupPolicyCreationType", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (backupPolicyCreationTypeElement != null)
                            {
                                BackupPolicyCreationType backupPolicyCreationTypeInstance = ((BackupPolicyCreationType)Enum.Parse(typeof(BackupPolicyCreationType), backupPolicyCreationTypeElement.Value, true));
                                backupPolicyDetailsInstance.BackupPolicyCreationType = backupPolicyCreationTypeInstance;
                            }
                            
                            XElement sSMHostNameElement = backupPolicyDetailsElement.Element(XName.Get("SSMHostName", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (sSMHostNameElement != null)
                            {
                                string sSMHostNameInstance = sSMHostNameElement.Value;
                                backupPolicyDetailsInstance.SSMHostName = sSMHostNameInstance;
                            }
                            
                            XElement nameElement2 = backupPolicyDetailsElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (nameElement2 != null)
                            {
                                string nameInstance2 = nameElement2.Value;
                                backupPolicyDetailsInstance.Name = nameInstance2;
                            }
                            
                            XElement instanceIdElement2 = backupPolicyDetailsElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (instanceIdElement2 != null)
                            {
                                string instanceIdInstance2 = instanceIdElement2.Value;
                                backupPolicyDetailsInstance.InstanceId = instanceIdInstance2;
                            }
                            
                            XElement operationInProgressElement2 = backupPolicyDetailsElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (operationInProgressElement2 != null)
                            {
                                OperationInProgress operationInProgressInstance2 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement2.Value, true));
                                backupPolicyDetailsInstance.OperationInProgress = operationInProgressInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list of backup policies.
        /// </returns>
        public async Task<BackupPolicyListResponse> ListAsync(string deviceId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/policies";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BackupPolicyListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BackupPolicyListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement arrayOfBackupPolicySequenceElement = responseDoc.Element(XName.Get("ArrayOfBackupPolicy", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (arrayOfBackupPolicySequenceElement != null)
                        {
                            foreach (XElement arrayOfBackupPolicyElement in arrayOfBackupPolicySequenceElement.Elements(XName.Get("BackupPolicy", "http://windowscloudbackup.com/CiS/V2013_03")))
                            {
                                BackupPolicy backupPolicyInstance = new BackupPolicy();
                                result.BackupPolicies.Add(backupPolicyInstance);
                                
                                XElement volumesCountElement = arrayOfBackupPolicyElement.Element(XName.Get("VolumesCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (volumesCountElement != null)
                                {
                                    long volumesCountInstance = long.Parse(volumesCountElement.Value, CultureInfo.InvariantCulture);
                                    backupPolicyInstance.VolumesCount = volumesCountInstance;
                                }
                                
                                XElement schedulesCountElement = arrayOfBackupPolicyElement.Element(XName.Get("SchedulesCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (schedulesCountElement != null)
                                {
                                    long schedulesCountInstance = long.Parse(schedulesCountElement.Value, CultureInfo.InvariantCulture);
                                    backupPolicyInstance.SchedulesCount = schedulesCountInstance;
                                }
                                
                                XElement nextBackupElement = arrayOfBackupPolicyElement.Element(XName.Get("NextBackup", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (nextBackupElement != null)
                                {
                                    DateTime nextBackupInstance = DateTime.Parse(nextBackupElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    backupPolicyInstance.NextBackup = nextBackupInstance;
                                }
                                
                                XElement lastBackupElement = arrayOfBackupPolicyElement.Element(XName.Get("LastBackup", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (lastBackupElement != null && !string.IsNullOrEmpty(lastBackupElement.Value))
                                {
                                    DateTime lastBackupInstance = DateTime.Parse(lastBackupElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    backupPolicyInstance.LastBackup = lastBackupInstance;
                                }
                                
                                XElement backupPolicyCreationTypeElement = arrayOfBackupPolicyElement.Element(XName.Get("BackupPolicyCreationType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (backupPolicyCreationTypeElement != null)
                                {
                                    BackupPolicyCreationType backupPolicyCreationTypeInstance = ((BackupPolicyCreationType)Enum.Parse(typeof(BackupPolicyCreationType), backupPolicyCreationTypeElement.Value, true));
                                    backupPolicyInstance.BackupPolicyCreationType = backupPolicyCreationTypeInstance;
                                }
                                
                                XElement sSMHostNameElement = arrayOfBackupPolicyElement.Element(XName.Get("SSMHostName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (sSMHostNameElement != null)
                                {
                                    string sSMHostNameInstance = sSMHostNameElement.Value;
                                    backupPolicyInstance.SSMHostName = sSMHostNameInstance;
                                }
                                
                                XElement nameElement = arrayOfBackupPolicyElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    backupPolicyInstance.Name = nameInstance;
                                }
                                
                                XElement instanceIdElement = arrayOfBackupPolicyElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (instanceIdElement != null)
                                {
                                    string instanceIdInstance = instanceIdElement.Value;
                                    backupPolicyInstance.InstanceId = instanceIdInstance;
                                }
                                
                                XElement operationInProgressElement = arrayOfBackupPolicyElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (operationInProgressElement != null)
                                {
                                    OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                    backupPolicyInstance.OperationInProgress = operationInProgressInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='policyId'>
        /// Required. The backup policy ID to update.
        /// </param>
        /// <param name='policyInfo'>
        /// Required. Parameters supplied to the Create Backup Policy operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> UpdateAsync(string deviceId, string policyId, UpdateBackupPolicyConfig policyInfo, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("policyId", policyId);
                tracingParameters.Add("policyInfo", policyInfo);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TaskResponse response = await client.BackupPolicy.BeginUpdatingBackupPolicyAsync(deviceId, policyId, policyInfo, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
