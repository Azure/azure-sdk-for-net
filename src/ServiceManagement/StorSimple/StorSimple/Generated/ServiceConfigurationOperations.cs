// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// All Operations related to Service configurations
    /// </summary>
    internal partial class ServiceConfigurationOperations : IServiceOperations<StorSimpleManagementClient>, IServiceConfigurationOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServiceConfigurationOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ServiceConfigurationOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Begin Creating Storage Account operation creates a new storage
        /// account in Azure.
        /// </summary>
        /// <param name='serviceConfiguration'>
        /// Required. Parameters supplied to the Begin Creating Storage Account
        /// operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<TaskResponse> BeginCreatingAsync(ServiceConfiguration serviceConfiguration, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceConfiguration == null)
            {
                throw new ArgumentNullException("serviceConfiguration");
            }
            if (serviceConfiguration.AcrChangeList != null)
            {
                if (serviceConfiguration.AcrChangeList.Added != null)
                {
                    foreach (AccessControlRecord addedParameterItem in serviceConfiguration.AcrChangeList.Added)
                    {
                        if (addedParameterItem.InitiatorName == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.AcrChangeList.Added.InitiatorName");
                        }
                        if (addedParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.AcrChangeList.Added.Name");
                        }
                    }
                }
                if (serviceConfiguration.AcrChangeList.Updated != null)
                {
                    foreach (AccessControlRecord updatedParameterItem in serviceConfiguration.AcrChangeList.Updated)
                    {
                        if (updatedParameterItem.InitiatorName == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.AcrChangeList.Updated.InitiatorName");
                        }
                        if (updatedParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.AcrChangeList.Updated.Name");
                        }
                    }
                }
            }
            if (serviceConfiguration.CredentialChangeList != null)
            {
                if (serviceConfiguration.CredentialChangeList.Added != null)
                {
                    foreach (StorageAccountCredential addedParameterItem2 in serviceConfiguration.CredentialChangeList.Added)
                    {
                        if (addedParameterItem2.Hostname == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.CredentialChangeList.Added.Hostname");
                        }
                        if (addedParameterItem2.Login == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.CredentialChangeList.Added.Login");
                        }
                        if (addedParameterItem2.Password == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.CredentialChangeList.Added.Password");
                        }
                    }
                }
                if (serviceConfiguration.CredentialChangeList.Updated != null)
                {
                    foreach (StorageAccountCredential updatedParameterItem2 in serviceConfiguration.CredentialChangeList.Updated)
                    {
                        if (updatedParameterItem2.Hostname == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.CredentialChangeList.Updated.Hostname");
                        }
                        if (updatedParameterItem2.Login == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.CredentialChangeList.Updated.Login");
                        }
                        if (updatedParameterItem2.Password == null)
                        {
                            throw new ArgumentNullException("serviceConfiguration.CredentialChangeList.Updated.Password");
                        }
                    }
                }
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceConfiguration", serviceConfiguration);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.2.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serviceConfigurationV2Element = new XElement(XName.Get("ServiceConfiguration_V2", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(serviceConfigurationV2Element);
                
                if (serviceConfiguration.AcrChangeList != null)
                {
                    XElement acrChangeListElement = new XElement(XName.Get("AcrChangeList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    serviceConfigurationV2Element.Add(acrChangeListElement);
                    
                    if (serviceConfiguration.AcrChangeList.Added != null)
                    {
                        XElement addedSequenceElement = new XElement(XName.Get("Added", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (AccessControlRecord addedItem in serviceConfiguration.AcrChangeList.Added)
                        {
                            XElement accessControlRecordElement = new XElement(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03"));
                            addedSequenceElement.Add(accessControlRecordElement);
                            
                            if (addedItem.InstanceId != null)
                            {
                                XElement instanceIdElement = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                instanceIdElement.Value = addedItem.InstanceId;
                                accessControlRecordElement.Add(instanceIdElement);
                            }
                            
                            XElement nameElement = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                            nameElement.Value = addedItem.Name;
                            accessControlRecordElement.Add(nameElement);
                            
                            if (addedItem.GlobalId != null)
                            {
                                XElement globalIdElement = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                                globalIdElement.Value = addedItem.GlobalId;
                                accessControlRecordElement.Add(globalIdElement);
                            }
                            else
                            {
                                XElement emptyElement = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                                XAttribute nilAttribute = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                                nilAttribute.Value = "true";
                                emptyElement.Add(nilAttribute);
                                accessControlRecordElement.Add(emptyElement);
                            }
                            
                            XElement operationInProgressElement = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            operationInProgressElement.Value = addedItem.OperationInProgress.ToString();
                            accessControlRecordElement.Add(operationInProgressElement);
                            
                            XElement initiatorNameElement = new XElement(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                            initiatorNameElement.Value = addedItem.InitiatorName;
                            accessControlRecordElement.Add(initiatorNameElement);
                            
                            XElement volumeCountElement = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                            volumeCountElement.Value = addedItem.VolumeCount.ToString();
                            accessControlRecordElement.Add(volumeCountElement);
                        }
                        acrChangeListElement.Add(addedSequenceElement);
                    }
                    
                    if (serviceConfiguration.AcrChangeList.Deleted != null)
                    {
                        XElement deletedSequenceElement = new XElement(XName.Get("Deleted", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (string deletedItem in serviceConfiguration.AcrChangeList.Deleted)
                        {
                            XElement deletedItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                            deletedItemElement.Value = deletedItem;
                            deletedSequenceElement.Add(deletedItemElement);
                        }
                        acrChangeListElement.Add(deletedSequenceElement);
                    }
                    
                    if (serviceConfiguration.AcrChangeList.Updated != null)
                    {
                        XElement updatedSequenceElement = new XElement(XName.Get("Updated", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (AccessControlRecord updatedItem in serviceConfiguration.AcrChangeList.Updated)
                        {
                            XElement accessControlRecordElement2 = new XElement(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03"));
                            updatedSequenceElement.Add(accessControlRecordElement2);
                            
                            if (updatedItem.InstanceId != null)
                            {
                                XElement instanceIdElement2 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                instanceIdElement2.Value = updatedItem.InstanceId;
                                accessControlRecordElement2.Add(instanceIdElement2);
                            }
                            
                            XElement nameElement2 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                            nameElement2.Value = updatedItem.Name;
                            accessControlRecordElement2.Add(nameElement2);
                            
                            if (updatedItem.GlobalId != null)
                            {
                                XElement globalIdElement2 = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                                globalIdElement2.Value = updatedItem.GlobalId;
                                accessControlRecordElement2.Add(globalIdElement2);
                            }
                            else
                            {
                                XElement emptyElement2 = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                                XAttribute nilAttribute2 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                                nilAttribute2.Value = "true";
                                emptyElement2.Add(nilAttribute2);
                                accessControlRecordElement2.Add(emptyElement2);
                            }
                            
                            XElement operationInProgressElement2 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            operationInProgressElement2.Value = updatedItem.OperationInProgress.ToString();
                            accessControlRecordElement2.Add(operationInProgressElement2);
                            
                            XElement initiatorNameElement2 = new XElement(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                            initiatorNameElement2.Value = updatedItem.InitiatorName;
                            accessControlRecordElement2.Add(initiatorNameElement2);
                            
                            XElement volumeCountElement2 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                            volumeCountElement2.Value = updatedItem.VolumeCount.ToString();
                            accessControlRecordElement2.Add(volumeCountElement2);
                        }
                        acrChangeListElement.Add(updatedSequenceElement);
                    }
                }
                
                if (serviceConfiguration.CredentialChangeList != null)
                {
                    XElement credentialChangeListElement = new XElement(XName.Get("CredentialChangeList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    serviceConfigurationV2Element.Add(credentialChangeListElement);
                    
                    if (serviceConfiguration.CredentialChangeList.Added != null)
                    {
                        XElement addedSequenceElement2 = new XElement(XName.Get("Added", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (StorageAccountCredential addedItem2 in serviceConfiguration.CredentialChangeList.Added)
                        {
                            XElement storageAccountCredentialV2Element = new XElement(XName.Get("StorageAccountCredential_V2", "http://windowscloudbackup.com/CiS/V2013_03"));
                            addedSequenceElement2.Add(storageAccountCredentialV2Element);
                            
                            if (addedItem2.InstanceId != null)
                            {
                                XElement instanceIdElement3 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                instanceIdElement3.Value = addedItem2.InstanceId;
                                storageAccountCredentialV2Element.Add(instanceIdElement3);
                            }
                            
                            if (addedItem2.Name != null)
                            {
                                XElement nameElement3 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                nameElement3.Value = addedItem2.Name;
                                storageAccountCredentialV2Element.Add(nameElement3);
                            }
                            
                            XElement operationInProgressElement3 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            operationInProgressElement3.Value = addedItem2.OperationInProgress.ToString();
                            storageAccountCredentialV2Element.Add(operationInProgressElement3);
                            
                            XElement cloudTypeElement = new XElement(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                            cloudTypeElement.Value = StorSimpleManagementClient.CloudTypeToString(addedItem2.CloudType);
                            storageAccountCredentialV2Element.Add(cloudTypeElement);
                            
                            XElement hostnameElement = new XElement(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                            hostnameElement.Value = addedItem2.Hostname;
                            storageAccountCredentialV2Element.Add(hostnameElement);
                            
                            XElement isDefaultElement = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                            isDefaultElement.Value = addedItem2.IsDefault.ToString().ToLower();
                            storageAccountCredentialV2Element.Add(isDefaultElement);
                            
                            if (addedItem2.Location != null)
                            {
                                XElement locationElement = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                locationElement.Value = addedItem2.Location;
                                storageAccountCredentialV2Element.Add(locationElement);
                            }
                            
                            XElement loginElement = new XElement(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                            loginElement.Value = addedItem2.Login;
                            storageAccountCredentialV2Element.Add(loginElement);
                            
                            XElement passwordElement = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                            passwordElement.Value = addedItem2.Password;
                            storageAccountCredentialV2Element.Add(passwordElement);
                            
                            XElement useSSLElement = new XElement(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                            useSSLElement.Value = addedItem2.UseSSL.ToString().ToLower();
                            storageAccountCredentialV2Element.Add(useSSLElement);
                            
                            XElement volumeCountElement3 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                            volumeCountElement3.Value = addedItem2.VolumeCount.ToString();
                            storageAccountCredentialV2Element.Add(volumeCountElement3);
                            
                            if (addedItem2.PasswordEncryptionCertThumbprint != null)
                            {
                                XElement passwordEncryptionCertThumbprintElement = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                passwordEncryptionCertThumbprintElement.Value = addedItem2.PasswordEncryptionCertThumbprint;
                                storageAccountCredentialV2Element.Add(passwordEncryptionCertThumbprintElement);
                            }
                            else
                            {
                                XElement emptyElement3 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                XAttribute nilAttribute3 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                                nilAttribute3.Value = "true";
                                emptyElement3.Add(nilAttribute3);
                                storageAccountCredentialV2Element.Add(emptyElement3);
                            }
                        }
                        credentialChangeListElement.Add(addedSequenceElement2);
                    }
                    
                    if (serviceConfiguration.CredentialChangeList.Deleted != null)
                    {
                        XElement deletedSequenceElement2 = new XElement(XName.Get("Deleted", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (string deletedItem2 in serviceConfiguration.CredentialChangeList.Deleted)
                        {
                            XElement deletedItemElement2 = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                            deletedItemElement2.Value = deletedItem2;
                            deletedSequenceElement2.Add(deletedItemElement2);
                        }
                        credentialChangeListElement.Add(deletedSequenceElement2);
                    }
                    
                    if (serviceConfiguration.CredentialChangeList.Updated != null)
                    {
                        XElement updatedSequenceElement2 = new XElement(XName.Get("Updated", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (StorageAccountCredential updatedItem2 in serviceConfiguration.CredentialChangeList.Updated)
                        {
                            XElement storageAccountCredentialV2Element2 = new XElement(XName.Get("StorageAccountCredential_V2", "http://windowscloudbackup.com/CiS/V2013_03"));
                            updatedSequenceElement2.Add(storageAccountCredentialV2Element2);
                            
                            if (updatedItem2.InstanceId != null)
                            {
                                XElement instanceIdElement4 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                instanceIdElement4.Value = updatedItem2.InstanceId;
                                storageAccountCredentialV2Element2.Add(instanceIdElement4);
                            }
                            
                            if (updatedItem2.Name != null)
                            {
                                XElement nameElement4 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                nameElement4.Value = updatedItem2.Name;
                                storageAccountCredentialV2Element2.Add(nameElement4);
                            }
                            
                            XElement operationInProgressElement4 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            operationInProgressElement4.Value = updatedItem2.OperationInProgress.ToString();
                            storageAccountCredentialV2Element2.Add(operationInProgressElement4);
                            
                            XElement cloudTypeElement2 = new XElement(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                            cloudTypeElement2.Value = StorSimpleManagementClient.CloudTypeToString(updatedItem2.CloudType);
                            storageAccountCredentialV2Element2.Add(cloudTypeElement2);
                            
                            XElement hostnameElement2 = new XElement(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                            hostnameElement2.Value = updatedItem2.Hostname;
                            storageAccountCredentialV2Element2.Add(hostnameElement2);
                            
                            XElement isDefaultElement2 = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                            isDefaultElement2.Value = updatedItem2.IsDefault.ToString().ToLower();
                            storageAccountCredentialV2Element2.Add(isDefaultElement2);
                            
                            if (updatedItem2.Location != null)
                            {
                                XElement locationElement2 = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                locationElement2.Value = updatedItem2.Location;
                                storageAccountCredentialV2Element2.Add(locationElement2);
                            }
                            
                            XElement loginElement2 = new XElement(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                            loginElement2.Value = updatedItem2.Login;
                            storageAccountCredentialV2Element2.Add(loginElement2);
                            
                            XElement passwordElement2 = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                            passwordElement2.Value = updatedItem2.Password;
                            storageAccountCredentialV2Element2.Add(passwordElement2);
                            
                            XElement useSSLElement2 = new XElement(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                            useSSLElement2.Value = updatedItem2.UseSSL.ToString().ToLower();
                            storageAccountCredentialV2Element2.Add(useSSLElement2);
                            
                            XElement volumeCountElement4 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                            volumeCountElement4.Value = updatedItem2.VolumeCount.ToString();
                            storageAccountCredentialV2Element2.Add(volumeCountElement4);
                            
                            if (updatedItem2.PasswordEncryptionCertThumbprint != null)
                            {
                                XElement passwordEncryptionCertThumbprintElement2 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                passwordEncryptionCertThumbprintElement2.Value = updatedItem2.PasswordEncryptionCertThumbprint;
                                storageAccountCredentialV2Element2.Add(passwordEncryptionCertThumbprintElement2);
                            }
                            else
                            {
                                XElement emptyElement4 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                XAttribute nilAttribute4 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                                nilAttribute4.Value = "true";
                                emptyElement4.Add(nilAttribute4);
                                storageAccountCredentialV2Element2.Add(emptyElement4);
                            }
                        }
                        credentialChangeListElement.Add(updatedSequenceElement2);
                    }
                }
                
                XElement operationInProgressElement5 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement5.Value = serviceConfiguration.OperationInProgress.ToString().ToLower();
                serviceConfigurationV2Element.Add(operationInProgressElement5);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.TaskId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='serviceConfiguration'>
        /// Required. Parameters supplied to the Create Storage Account
        /// operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> CreateAsync(ServiceConfiguration serviceConfiguration, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceConfiguration", serviceConfiguration);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TaskResponse response = await client.ServiceConfig.BeginCreatingAsync(serviceConfiguration, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <param name='customeRequestHeaders'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the service configuration regarding the resource
        /// </returns>
        public async Task<ServiceConfigurationResponse> GetAsync(CustomRequestHeaders customeRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("customeRequestHeaders", customeRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("x-ms-client-request-id", customeRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServiceConfigurationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServiceConfigurationResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement serviceConfigurationBaseElement = responseDoc.Element(XName.Get("ServiceConfiguration_Base", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (serviceConfigurationBaseElement != null)
                        {
                            XElement acrChangeListElement = serviceConfigurationBaseElement.Element(XName.Get("AcrChangeList", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (acrChangeListElement != null)
                            {
                                AcrChangeList acrChangeListInstance = new AcrChangeList();
                                result.AcrChangeList = acrChangeListInstance;
                                
                                XElement addedSequenceElement = acrChangeListElement.Element(XName.Get("Added", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (addedSequenceElement != null)
                                {
                                    foreach (XElement addedElement in addedSequenceElement.Elements(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03")))
                                    {
                                        AccessControlRecord accessControlRecordInstance = new AccessControlRecord();
                                        acrChangeListInstance.Added.Add(accessControlRecordInstance);
                                        
                                        XElement instanceIdElement = addedElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement != null)
                                        {
                                            string instanceIdInstance = instanceIdElement.Value;
                                            accessControlRecordInstance.InstanceId = instanceIdInstance;
                                        }
                                        
                                        XElement nameElement = addedElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement != null)
                                        {
                                            string nameInstance = nameElement.Value;
                                            accessControlRecordInstance.Name = nameInstance;
                                        }
                                        
                                        XElement globalIdElement = addedElement.Element(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                                        if (globalIdElement != null)
                                        {
                                            bool isNil = false;
                                            XAttribute nilAttribute = globalIdElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute != null)
                                            {
                                                isNil = nilAttribute.Value == "true";
                                            }
                                            if (isNil == false)
                                            {
                                                string globalIdInstance = globalIdElement.Value;
                                                accessControlRecordInstance.GlobalId = globalIdInstance;
                                            }
                                        }
                                        
                                        XElement operationInProgressElement = addedElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement != null)
                                        {
                                            OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                            accessControlRecordInstance.OperationInProgress = operationInProgressInstance;
                                        }
                                        
                                        XElement initiatorNameElement = addedElement.Element(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (initiatorNameElement != null)
                                        {
                                            string initiatorNameInstance = initiatorNameElement.Value;
                                            accessControlRecordInstance.InitiatorName = initiatorNameInstance;
                                        }
                                        
                                        XElement volumeCountElement = addedElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (volumeCountElement != null)
                                        {
                                            int volumeCountInstance = int.Parse(volumeCountElement.Value, CultureInfo.InvariantCulture);
                                            accessControlRecordInstance.VolumeCount = volumeCountInstance;
                                        }
                                    }
                                }
                                
                                XElement deletedSequenceElement = acrChangeListElement.Element(XName.Get("Deleted", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (deletedSequenceElement != null)
                                {
                                    foreach (XElement deletedElement in deletedSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        acrChangeListInstance.Deleted.Add(deletedElement.Value);
                                    }
                                }
                                
                                XElement updatedSequenceElement = acrChangeListElement.Element(XName.Get("Updated", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (updatedSequenceElement != null)
                                {
                                    foreach (XElement updatedElement in updatedSequenceElement.Elements(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03")))
                                    {
                                        AccessControlRecord accessControlRecordInstance2 = new AccessControlRecord();
                                        acrChangeListInstance.Updated.Add(accessControlRecordInstance2);
                                        
                                        XElement instanceIdElement2 = updatedElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement2 != null)
                                        {
                                            string instanceIdInstance2 = instanceIdElement2.Value;
                                            accessControlRecordInstance2.InstanceId = instanceIdInstance2;
                                        }
                                        
                                        XElement nameElement2 = updatedElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement2 != null)
                                        {
                                            string nameInstance2 = nameElement2.Value;
                                            accessControlRecordInstance2.Name = nameInstance2;
                                        }
                                        
                                        XElement globalIdElement2 = updatedElement.Element(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                                        if (globalIdElement2 != null)
                                        {
                                            bool isNil2 = false;
                                            XAttribute nilAttribute2 = globalIdElement2.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute2 != null)
                                            {
                                                isNil2 = nilAttribute2.Value == "true";
                                            }
                                            if (isNil2 == false)
                                            {
                                                string globalIdInstance2 = globalIdElement2.Value;
                                                accessControlRecordInstance2.GlobalId = globalIdInstance2;
                                            }
                                        }
                                        
                                        XElement operationInProgressElement2 = updatedElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement2 != null)
                                        {
                                            OperationInProgress operationInProgressInstance2 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement2.Value, true));
                                            accessControlRecordInstance2.OperationInProgress = operationInProgressInstance2;
                                        }
                                        
                                        XElement initiatorNameElement2 = updatedElement.Element(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (initiatorNameElement2 != null)
                                        {
                                            string initiatorNameInstance2 = initiatorNameElement2.Value;
                                            accessControlRecordInstance2.InitiatorName = initiatorNameInstance2;
                                        }
                                        
                                        XElement volumeCountElement2 = updatedElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (volumeCountElement2 != null)
                                        {
                                            int volumeCountInstance2 = int.Parse(volumeCountElement2.Value, CultureInfo.InvariantCulture);
                                            accessControlRecordInstance2.VolumeCount = volumeCountInstance2;
                                        }
                                    }
                                }
                            }
                            
                            XElement credentialChangeListElement = serviceConfigurationBaseElement.Element(XName.Get("CredentialChangeList", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (credentialChangeListElement != null)
                            {
                                SacChangeListResponse credentialChangeListInstance = new SacChangeListResponse();
                                result.CredentialChangeList = credentialChangeListInstance;
                                
                                XElement addedSequenceElement2 = credentialChangeListElement.Element(XName.Get("Added", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (addedSequenceElement2 != null)
                                {
                                    foreach (XElement addedElement2 in addedSequenceElement2.Elements(XName.Get("StorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03")))
                                    {
                                        StorageAccountCredentialResponse storageAccountCredentialInstance = new StorageAccountCredentialResponse();
                                        credentialChangeListInstance.Added.Add(storageAccountCredentialInstance);
                                        
                                        XElement instanceIdElement3 = addedElement2.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement3 != null)
                                        {
                                            string instanceIdInstance3 = instanceIdElement3.Value;
                                            storageAccountCredentialInstance.InstanceId = instanceIdInstance3;
                                        }
                                        
                                        XElement nameElement3 = addedElement2.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement3 != null)
                                        {
                                            string nameInstance3 = nameElement3.Value;
                                            storageAccountCredentialInstance.Name = nameInstance3;
                                        }
                                        
                                        XElement operationInProgressElement3 = addedElement2.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement3 != null)
                                        {
                                            OperationInProgress operationInProgressInstance3 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement3.Value, true));
                                            storageAccountCredentialInstance.OperationInProgress = operationInProgressInstance3;
                                        }
                                        
                                        XElement cloudTypeElement = addedElement2.Element(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (cloudTypeElement != null)
                                        {
                                            CloudType cloudTypeInstance = StorSimpleManagementClient.ParseCloudType(cloudTypeElement.Value);
                                            storageAccountCredentialInstance.CloudType = cloudTypeInstance;
                                        }
                                        
                                        XElement hostnameElement = addedElement2.Element(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (hostnameElement != null)
                                        {
                                            string hostnameInstance = hostnameElement.Value;
                                            storageAccountCredentialInstance.Hostname = hostnameInstance;
                                        }
                                        
                                        XElement isDefaultElement = addedElement2.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (isDefaultElement != null)
                                        {
                                            bool isDefaultInstance = bool.Parse(isDefaultElement.Value);
                                            storageAccountCredentialInstance.IsDefault = isDefaultInstance;
                                        }
                                        
                                        XElement locationElement = addedElement2.Element(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (locationElement != null)
                                        {
                                            string locationInstance = locationElement.Value;
                                            storageAccountCredentialInstance.Location = locationInstance;
                                        }
                                        
                                        XElement loginElement = addedElement2.Element(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (loginElement != null)
                                        {
                                            string loginInstance = loginElement.Value;
                                            storageAccountCredentialInstance.Login = loginInstance;
                                        }
                                        
                                        XElement passwordElement = addedElement2.Element(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (passwordElement != null)
                                        {
                                            string passwordInstance = passwordElement.Value;
                                            storageAccountCredentialInstance.Password = passwordInstance;
                                        }
                                        
                                        XElement useSSLElement = addedElement2.Element(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (useSSLElement != null)
                                        {
                                            bool useSSLInstance = bool.Parse(useSSLElement.Value);
                                            storageAccountCredentialInstance.UseSSL = useSSLInstance;
                                        }
                                        
                                        XElement volumeCountElement3 = addedElement2.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (volumeCountElement3 != null)
                                        {
                                            int volumeCountInstance3 = int.Parse(volumeCountElement3.Value, CultureInfo.InvariantCulture);
                                            storageAccountCredentialInstance.VolumeCount = volumeCountInstance3;
                                        }
                                        
                                        XElement passwordEncryptionCertThumbprintElement = addedElement2.Element(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (passwordEncryptionCertThumbprintElement != null)
                                        {
                                            bool isNil3 = false;
                                            XAttribute nilAttribute3 = passwordEncryptionCertThumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute3 != null)
                                            {
                                                isNil3 = nilAttribute3.Value == "true";
                                            }
                                            if (isNil3 == false)
                                            {
                                                string passwordEncryptionCertThumbprintInstance = passwordEncryptionCertThumbprintElement.Value;
                                                storageAccountCredentialInstance.PasswordEncryptionCertThumbprint = passwordEncryptionCertThumbprintInstance;
                                            }
                                        }
                                    }
                                }
                                
                                XElement deletedSequenceElement2 = credentialChangeListElement.Element(XName.Get("Deleted", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (deletedSequenceElement2 != null)
                                {
                                    foreach (XElement deletedElement2 in deletedSequenceElement2.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        credentialChangeListInstance.Deleted.Add(deletedElement2.Value);
                                    }
                                }
                                
                                XElement updatedSequenceElement2 = credentialChangeListElement.Element(XName.Get("Updated", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (updatedSequenceElement2 != null)
                                {
                                    foreach (XElement updatedElement2 in updatedSequenceElement2.Elements(XName.Get("StorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03")))
                                    {
                                        StorageAccountCredentialResponse storageAccountCredentialInstance2 = new StorageAccountCredentialResponse();
                                        credentialChangeListInstance.Updated.Add(storageAccountCredentialInstance2);
                                        
                                        XElement instanceIdElement4 = updatedElement2.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement4 != null)
                                        {
                                            string instanceIdInstance4 = instanceIdElement4.Value;
                                            storageAccountCredentialInstance2.InstanceId = instanceIdInstance4;
                                        }
                                        
                                        XElement nameElement4 = updatedElement2.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement4 != null)
                                        {
                                            string nameInstance4 = nameElement4.Value;
                                            storageAccountCredentialInstance2.Name = nameInstance4;
                                        }
                                        
                                        XElement operationInProgressElement4 = updatedElement2.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement4 != null)
                                        {
                                            OperationInProgress operationInProgressInstance4 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement4.Value, true));
                                            storageAccountCredentialInstance2.OperationInProgress = operationInProgressInstance4;
                                        }
                                        
                                        XElement cloudTypeElement2 = updatedElement2.Element(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (cloudTypeElement2 != null)
                                        {
                                            CloudType cloudTypeInstance2 = StorSimpleManagementClient.ParseCloudType(cloudTypeElement2.Value);
                                            storageAccountCredentialInstance2.CloudType = cloudTypeInstance2;
                                        }
                                        
                                        XElement hostnameElement2 = updatedElement2.Element(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (hostnameElement2 != null)
                                        {
                                            string hostnameInstance2 = hostnameElement2.Value;
                                            storageAccountCredentialInstance2.Hostname = hostnameInstance2;
                                        }
                                        
                                        XElement isDefaultElement2 = updatedElement2.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (isDefaultElement2 != null)
                                        {
                                            bool isDefaultInstance2 = bool.Parse(isDefaultElement2.Value);
                                            storageAccountCredentialInstance2.IsDefault = isDefaultInstance2;
                                        }
                                        
                                        XElement locationElement2 = updatedElement2.Element(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (locationElement2 != null)
                                        {
                                            string locationInstance2 = locationElement2.Value;
                                            storageAccountCredentialInstance2.Location = locationInstance2;
                                        }
                                        
                                        XElement loginElement2 = updatedElement2.Element(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (loginElement2 != null)
                                        {
                                            string loginInstance2 = loginElement2.Value;
                                            storageAccountCredentialInstance2.Login = loginInstance2;
                                        }
                                        
                                        XElement passwordElement2 = updatedElement2.Element(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (passwordElement2 != null)
                                        {
                                            string passwordInstance2 = passwordElement2.Value;
                                            storageAccountCredentialInstance2.Password = passwordInstance2;
                                        }
                                        
                                        XElement useSSLElement2 = updatedElement2.Element(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (useSSLElement2 != null)
                                        {
                                            bool useSSLInstance2 = bool.Parse(useSSLElement2.Value);
                                            storageAccountCredentialInstance2.UseSSL = useSSLInstance2;
                                        }
                                        
                                        XElement volumeCountElement4 = updatedElement2.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (volumeCountElement4 != null)
                                        {
                                            int volumeCountInstance4 = int.Parse(volumeCountElement4.Value, CultureInfo.InvariantCulture);
                                            storageAccountCredentialInstance2.VolumeCount = volumeCountInstance4;
                                        }
                                        
                                        XElement passwordEncryptionCertThumbprintElement2 = updatedElement2.Element(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (passwordEncryptionCertThumbprintElement2 != null)
                                        {
                                            bool isNil4 = false;
                                            XAttribute nilAttribute4 = passwordEncryptionCertThumbprintElement2.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute4 != null)
                                            {
                                                isNil4 = nilAttribute4.Value == "true";
                                            }
                                            if (isNil4 == false)
                                            {
                                                string passwordEncryptionCertThumbprintInstance2 = passwordEncryptionCertThumbprintElement2.Value;
                                                storageAccountCredentialInstance2.PasswordEncryptionCertThumbprint = passwordEncryptionCertThumbprintInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            XElement operationInProgressElement5 = serviceConfigurationBaseElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (operationInProgressElement5 != null)
                            {
                                bool operationInProgressInstance5 = bool.Parse(operationInProgressElement5.Value);
                                result.OperationInProgress = operationInProgressInstance5;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
