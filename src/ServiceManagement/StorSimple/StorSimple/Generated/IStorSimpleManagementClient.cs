// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// This is an RESTFul API to manage you StorSimple Objects
    /// </summary>
    public partial interface IStorSimpleManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        string CloudServiceName
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        string ResourceId
        {
            get; set; 
        }
        
        string ResourceName
        {
            get; set; 
        }
        
        string ResourceNamespace
        {
            get; set; 
        }
        
        /// <summary>
        /// All Operations related to Backup
        /// </summary>
        IBackupOperations Backup
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Backup policies
        /// </summary>
        IBackupPolicyOperations BackupPolicy
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to CloneVolume  (see
        /// http://msdn.microsoft.com/en-us/library/azure/FILLTHISPART.aspx
        /// for more information)
        /// </summary>
        ICloneVolumeOperations CloneVolume
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Volume Containers
        /// </summary>
        IDataContainerOperations DataContainer
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Device Details
        /// </summary>
        IDeviceDetailsOperations DeviceDetails
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Device Failover
        /// </summary>
        IDeviceFailoverOperations DeviceFailover
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Device Jobs
        /// </summary>
        IDeviceJobOperations DeviceJob
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Devices
        /// </summary>
        IDeviceOperations Devices
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Device Public keys
        /// </summary>
        IDevicePublicKeyOperations DevicePublicKey
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to iscsi connection
        /// </summary>
        IIscsiConnectionDetailsOperations IscsiConnection
        {
            get; 
        }
        
        /// <summary>
        /// Migration of Legacy Appliance
        /// </summary>
        IMigrationOperations MigrateLegacyAppliance
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Crypto keys
        /// </summary>
        IResourceEncryptionKeyOperations ResourceEncryptionKeys
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Service configurations
        /// </summary>
        IServiceConfigurationOperations ServiceConfig
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to Virtual Device
        /// </summary>
        IVirtualDeviceOperations VirtualDevice
        {
            get; 
        }
        
        /// <summary>
        /// All Operations related to virtual disk
        /// </summary>
        IVirtualDiskOperations VirtualDisk
        {
            get; 
        }
        
        /// <summary>
        /// The Get Task Status returns the status of the specified task id.
        /// After calling an asynchronous task, you can call Get Task Status
        /// to determine whether the task has succeeded, failed, or is still
        /// in progress.
        /// </summary>
        /// <param name='taskId'>
        /// The task Id for the request you wish to track.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        Task<TaskStatusInfo> GetOperationStatusAsync(string taskId, CancellationToken cancellationToken);
    }
}
