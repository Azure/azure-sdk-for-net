// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// All Operations related to virtual disk
    /// </summary>
    internal partial class VirtualDiskOperations : IServiceOperations<StorSimpleManagementClient>, IVirtualDiskOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualDiskOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualDiskOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Begin Creating Volume operation creates a new volume.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='diskDetails'>
        /// Required. Parameters supplied to the Create virtual disk operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<GuidTaskResponse> BeginCreatingAsync(string deviceId, VirtualDiskRequest diskDetails, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (diskDetails == null)
            {
                throw new ArgumentNullException("diskDetails");
            }
            if (diskDetails.AcrList == null)
            {
                throw new ArgumentNullException("diskDetails.AcrList");
            }
            if (diskDetails.AcrList != null)
            {
                foreach (AccessControlRecord acrListParameterItem in diskDetails.AcrList)
                {
                    if (acrListParameterItem.InitiatorName == null)
                    {
                        throw new ArgumentNullException("diskDetails.AcrList.InitiatorName");
                    }
                    if (acrListParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("diskDetails.AcrList.Name");
                    }
                }
            }
            if (diskDetails.DataContainer == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer");
            }
            if (diskDetails.DataContainer.Name == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.Name");
            }
            if (diskDetails.DataContainer.PrimaryStorageAccountCredential == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.PrimaryStorageAccountCredential");
            }
            if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Hostname == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.PrimaryStorageAccountCredential.Hostname");
            }
            if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Login == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.PrimaryStorageAccountCredential.Login");
            }
            if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Password == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.PrimaryStorageAccountCredential.Password");
            }
            if (diskDetails.Name == null)
            {
                throw new ArgumentNullException("diskDetails.Name");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("diskDetails", diskDetails);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/virtualdisks";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement virtualDiskElement = new XElement(XName.Get("VirtualDisk", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(virtualDiskElement);
                
                if (diskDetails.InstanceId != null)
                {
                    XElement instanceIdElement = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement.Value = diskDetails.InstanceId;
                    virtualDiskElement.Add(instanceIdElement);
                }
                
                XElement nameElement = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement.Value = diskDetails.Name;
                virtualDiskElement.Add(nameElement);
                
                XElement operationInProgressElement = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement.Value = diskDetails.OperationInProgress.ToString();
                virtualDiskElement.Add(operationInProgressElement);
                
                XElement accessTypeElement = new XElement(XName.Get("AccessType", "http://windowscloudbackup.com/CiS/V2013_03"));
                accessTypeElement.Value = diskDetails.AccessType.ToString();
                virtualDiskElement.Add(accessTypeElement);
                
                if (diskDetails.AcrIdList != null)
                {
                    XElement acrIdListSequenceElement = new XElement(XName.Get("AcrIdList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (string acrIdListItem in diskDetails.AcrIdList)
                    {
                        XElement acrIdListItemElement = new XElement(XName.Get(null, "http://windowscloudbackup.com/CiS/V2013_03"));
                        acrIdListItemElement.Value = acrIdListItem;
                        acrIdListSequenceElement.Add(acrIdListItemElement);
                    }
                    virtualDiskElement.Add(acrIdListSequenceElement);
                }
                
                XElement acrListSequenceElement = new XElement(XName.Get("AcrList", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (AccessControlRecord acrListItem in diskDetails.AcrList)
                {
                    XElement accessControlRecordElement = new XElement(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03"));
                    acrListSequenceElement.Add(accessControlRecordElement);
                    
                    if (acrListItem.InstanceId != null)
                    {
                        XElement instanceIdElement2 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement2.Value = acrListItem.InstanceId;
                        accessControlRecordElement.Add(instanceIdElement2);
                    }
                    
                    XElement nameElement2 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement2.Value = acrListItem.Name;
                    accessControlRecordElement.Add(nameElement2);
                    
                    if (acrListItem.GlobalId != null)
                    {
                        XElement globalIdElement = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                        globalIdElement.Value = acrListItem.GlobalId;
                        accessControlRecordElement.Add(globalIdElement);
                    }
                    else
                    {
                        XElement emptyElement = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                        XAttribute nilAttribute = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        nilAttribute.Value = "true";
                        emptyElement.Add(nilAttribute);
                        accessControlRecordElement.Add(emptyElement);
                    }
                    
                    XElement operationInProgressElement2 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement2.Value = acrListItem.OperationInProgress.ToString();
                    accessControlRecordElement.Add(operationInProgressElement2);
                    
                    XElement initiatorNameElement = new XElement(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                    initiatorNameElement.Value = acrListItem.InitiatorName;
                    accessControlRecordElement.Add(initiatorNameElement);
                    
                    XElement volumeCountElement = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement.Value = acrListItem.VolumeCount.ToString();
                    accessControlRecordElement.Add(volumeCountElement);
                }
                virtualDiskElement.Add(acrListSequenceElement);
                
                XElement appTypeElement = new XElement(XName.Get("AppType", "http://windowscloudbackup.com/CiS/V2013_03"));
                appTypeElement.Value = diskDetails.AppType.ToString();
                virtualDiskElement.Add(appTypeElement);
                
                XElement dataContainerElement = new XElement(XName.Get("DataContainer", "http://windowscloudbackup.com/CiS/V2013_03"));
                virtualDiskElement.Add(dataContainerElement);
                
                if (diskDetails.DataContainer.InstanceId != null)
                {
                    XElement instanceIdElement3 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement3.Value = diskDetails.DataContainer.InstanceId;
                    dataContainerElement.Add(instanceIdElement3);
                }
                
                XElement nameElement3 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement3.Value = diskDetails.DataContainer.Name;
                dataContainerElement.Add(nameElement3);
                
                XElement operationInProgressElement3 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement3.Value = diskDetails.DataContainer.OperationInProgress.ToString();
                dataContainerElement.Add(operationInProgressElement3);
                
                XElement bandwidthRateElement = new XElement(XName.Get("BandwidthRate", "http://windowscloudbackup.com/CiS/V2013_03"));
                bandwidthRateElement.Value = diskDetails.DataContainer.BandwidthRate.ToString();
                dataContainerElement.Add(bandwidthRateElement);
                
                if (diskDetails.DataContainer.EncryptionKey != null)
                {
                    XElement encryptionKeyElement = new XElement(XName.Get("EncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                    encryptionKeyElement.Value = diskDetails.DataContainer.EncryptionKey;
                    dataContainerElement.Add(encryptionKeyElement);
                }
                
                XElement isDefaultElement = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                isDefaultElement.Value = diskDetails.DataContainer.IsDefault.ToString().ToLower();
                dataContainerElement.Add(isDefaultElement);
                
                XElement isEncryptionEnabledElement = new XElement(XName.Get("IsEncryptionEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                isEncryptionEnabledElement.Value = diskDetails.DataContainer.IsEncryptionEnabled.ToString().ToLower();
                dataContainerElement.Add(isEncryptionEnabledElement);
                
                XElement ownedElement = new XElement(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                ownedElement.Value = diskDetails.DataContainer.Owned.ToString().ToLower();
                dataContainerElement.Add(ownedElement);
                
                XElement primaryStorageAccountCredentialElement = new XElement(XName.Get("PrimaryStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                dataContainerElement.Add(primaryStorageAccountCredentialElement);
                
                if (diskDetails.DataContainer.PrimaryStorageAccountCredential.InstanceId != null)
                {
                    XElement instanceIdElement4 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement4.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.InstanceId;
                    primaryStorageAccountCredentialElement.Add(instanceIdElement4);
                }
                
                if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Name != null)
                {
                    XElement nameElement4 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement4.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Name;
                    primaryStorageAccountCredentialElement.Add(nameElement4);
                }
                
                XElement operationInProgressElement4 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement4.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.OperationInProgress.ToString();
                primaryStorageAccountCredentialElement.Add(operationInProgressElement4);
                
                XElement cloudTypeElement = new XElement(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                cloudTypeElement.Value = StorSimpleManagementClient.CloudTypeToString(diskDetails.DataContainer.PrimaryStorageAccountCredential.CloudType);
                primaryStorageAccountCredentialElement.Add(cloudTypeElement);
                
                XElement hostnameElement = new XElement(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                hostnameElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Hostname;
                primaryStorageAccountCredentialElement.Add(hostnameElement);
                
                XElement isDefaultElement2 = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                isDefaultElement2.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.IsDefault.ToString().ToLower();
                primaryStorageAccountCredentialElement.Add(isDefaultElement2);
                
                if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Location != null)
                {
                    XElement locationElement = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                    locationElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Location;
                    primaryStorageAccountCredentialElement.Add(locationElement);
                }
                
                XElement loginElement = new XElement(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                loginElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Login;
                primaryStorageAccountCredentialElement.Add(loginElement);
                
                XElement passwordElement = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                passwordElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Password;
                primaryStorageAccountCredentialElement.Add(passwordElement);
                
                XElement useSSLElement = new XElement(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                useSSLElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.UseSSL.ToString().ToLower();
                primaryStorageAccountCredentialElement.Add(useSSLElement);
                
                XElement volumeCountElement2 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                volumeCountElement2.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.VolumeCount.ToString();
                primaryStorageAccountCredentialElement.Add(volumeCountElement2);
                
                if (diskDetails.DataContainer.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint != null)
                {
                    XElement passwordEncryptionCertThumbprintElement = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    passwordEncryptionCertThumbprintElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint;
                    primaryStorageAccountCredentialElement.Add(passwordEncryptionCertThumbprintElement);
                }
                else
                {
                    XElement emptyElement2 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    XAttribute nilAttribute2 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                    nilAttribute2.Value = "true";
                    emptyElement2.Add(nilAttribute2);
                    primaryStorageAccountCredentialElement.Add(emptyElement2);
                }
                
                if (diskDetails.DataContainer.SecretsEncryptionThumbprint != null)
                {
                    XElement secretsEncryptionThumbprintElement = new XElement(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    secretsEncryptionThumbprintElement.Value = diskDetails.DataContainer.SecretsEncryptionThumbprint;
                    dataContainerElement.Add(secretsEncryptionThumbprintElement);
                }
                
                XElement volumeCountElement3 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                volumeCountElement3.Value = diskDetails.DataContainer.VolumeCount.ToString();
                dataContainerElement.Add(volumeCountElement3);
                
                if (diskDetails.DataContainerId != null)
                {
                    XElement dataContainerIdElement = new XElement(XName.Get("DataContainerId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    dataContainerIdElement.Value = diskDetails.DataContainerId;
                    virtualDiskElement.Add(dataContainerIdElement);
                }
                
                if (diskDetails.InternalInstanceId != null)
                {
                    XElement internalInstanceIdElement = new XElement(XName.Get("InternalInstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    internalInstanceIdElement.Value = diskDetails.InternalInstanceId;
                    virtualDiskElement.Add(internalInstanceIdElement);
                }
                
                XElement isBackupEnabledElement = new XElement(XName.Get("IsBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                isBackupEnabledElement.Value = diskDetails.IsBackupEnabled.ToString().ToLower();
                virtualDiskElement.Add(isBackupEnabledElement);
                
                XElement isDefaultBackupEnabledElement = new XElement(XName.Get("IsDefaultBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                isDefaultBackupEnabledElement.Value = diskDetails.IsDefaultBackupEnabled.ToString().ToLower();
                virtualDiskElement.Add(isDefaultBackupEnabledElement);
                
                XElement isMonitoringEnabledElement = new XElement(XName.Get("IsMonitoringEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                isMonitoringEnabledElement.Value = diskDetails.IsMonitoringEnabled.ToString().ToLower();
                virtualDiskElement.Add(isMonitoringEnabledElement);
                
                XElement onlineElement = new XElement(XName.Get("Online", "http://windowscloudbackup.com/CiS/V2013_03"));
                onlineElement.Value = diskDetails.Online.ToString().ToLower();
                virtualDiskElement.Add(onlineElement);
                
                XElement sizeInBytesElement = new XElement(XName.Get("SizeInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                sizeInBytesElement.Value = diskDetails.SizeInBytes.ToString();
                virtualDiskElement.Add(sizeInBytesElement);
                
                if (diskDetails.VSN != null)
                {
                    XElement vSNElement = new XElement(XName.Get("VSN", "http://windowscloudbackup.com/CiS/V2013_03"));
                    vSNElement.Value = diskDetails.VSN;
                    virtualDiskElement.Add(vSNElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GuidTaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GuidTaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement guidElement = responseDoc.Element(XName.Get("guid", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (guidElement != null)
                        {
                            string guidInstance = guidElement.Value;
                            result.TaskId = guidInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Deleteing Volume operation deletes the specified volume.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='diskId'>
        /// Required. Instance id of the virtual disk to be deleted.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<GuidTaskResponse> BeginDeletingAsync(string deviceId, string diskId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (diskId == null)
            {
                throw new ArgumentNullException("diskId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("diskId", diskId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/virtualdisks/";
            url = url + Uri.EscapeDataString(diskId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GuidTaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GuidTaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement guidElement = responseDoc.Element(XName.Get("guid", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (guidElement != null)
                        {
                            string guidInstance = guidElement.Value;
                            result.TaskId = guidInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin updating Volume operation updates an existing volume.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='diskId'>
        /// Required. disk id
        /// </param>
        /// <param name='diskDetails'>
        /// Required. Parameters supplied to the update virtual disk operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<GuidTaskResponse> BeginUpdatingAsync(string deviceId, string diskId, VirtualDisk diskDetails, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (diskId == null)
            {
                throw new ArgumentNullException("diskId");
            }
            if (diskDetails == null)
            {
                throw new ArgumentNullException("diskDetails");
            }
            if (diskDetails.AcrList == null)
            {
                throw new ArgumentNullException("diskDetails.AcrList");
            }
            if (diskDetails.AcrList != null)
            {
                foreach (AccessControlRecord acrListParameterItem in diskDetails.AcrList)
                {
                    if (acrListParameterItem.InitiatorName == null)
                    {
                        throw new ArgumentNullException("diskDetails.AcrList.InitiatorName");
                    }
                    if (acrListParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("diskDetails.AcrList.Name");
                    }
                }
            }
            if (diskDetails.DataContainer == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer");
            }
            if (diskDetails.DataContainer.Name == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.Name");
            }
            if (diskDetails.DataContainer.PrimaryStorageAccountCredential == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.PrimaryStorageAccountCredential");
            }
            if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Hostname == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.PrimaryStorageAccountCredential.Hostname");
            }
            if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Login == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.PrimaryStorageAccountCredential.Login");
            }
            if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Password == null)
            {
                throw new ArgumentNullException("diskDetails.DataContainer.PrimaryStorageAccountCredential.Password");
            }
            if (diskDetails.Name == null)
            {
                throw new ArgumentNullException("diskDetails.Name");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("diskId", diskId);
                tracingParameters.Add("diskDetails", diskDetails);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/virtualdisks/";
            url = url + Uri.EscapeDataString(diskId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement virtualDiskElement = new XElement(XName.Get("VirtualDisk", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(virtualDiskElement);
                
                if (diskDetails.InstanceId != null)
                {
                    XElement instanceIdElement = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement.Value = diskDetails.InstanceId;
                    virtualDiskElement.Add(instanceIdElement);
                }
                
                XElement nameElement = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement.Value = diskDetails.Name;
                virtualDiskElement.Add(nameElement);
                
                XElement operationInProgressElement = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement.Value = diskDetails.OperationInProgress.ToString();
                virtualDiskElement.Add(operationInProgressElement);
                
                XElement accessTypeElement = new XElement(XName.Get("AccessType", "http://windowscloudbackup.com/CiS/V2013_03"));
                accessTypeElement.Value = diskDetails.AccessType.ToString();
                virtualDiskElement.Add(accessTypeElement);
                
                if (diskDetails.AcrIdList != null)
                {
                    XElement acrIdListSequenceElement = new XElement(XName.Get("AcrIdList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (string acrIdListItem in diskDetails.AcrIdList)
                    {
                        XElement acrIdListItemElement = new XElement(XName.Get(null, "http://windowscloudbackup.com/CiS/V2013_03"));
                        acrIdListItemElement.Value = acrIdListItem;
                        acrIdListSequenceElement.Add(acrIdListItemElement);
                    }
                    virtualDiskElement.Add(acrIdListSequenceElement);
                }
                
                XElement acrListSequenceElement = new XElement(XName.Get("AcrList", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (AccessControlRecord acrListItem in diskDetails.AcrList)
                {
                    XElement accessControlRecordElement = new XElement(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03"));
                    acrListSequenceElement.Add(accessControlRecordElement);
                    
                    if (acrListItem.InstanceId != null)
                    {
                        XElement instanceIdElement2 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        instanceIdElement2.Value = acrListItem.InstanceId;
                        accessControlRecordElement.Add(instanceIdElement2);
                    }
                    
                    XElement nameElement2 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement2.Value = acrListItem.Name;
                    accessControlRecordElement.Add(nameElement2);
                    
                    if (acrListItem.GlobalId != null)
                    {
                        XElement globalIdElement = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                        globalIdElement.Value = acrListItem.GlobalId;
                        accessControlRecordElement.Add(globalIdElement);
                    }
                    else
                    {
                        XElement emptyElement = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                        XAttribute nilAttribute = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                        nilAttribute.Value = "true";
                        emptyElement.Add(nilAttribute);
                        accessControlRecordElement.Add(emptyElement);
                    }
                    
                    XElement operationInProgressElement2 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                    operationInProgressElement2.Value = acrListItem.OperationInProgress.ToString();
                    accessControlRecordElement.Add(operationInProgressElement2);
                    
                    XElement initiatorNameElement = new XElement(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                    initiatorNameElement.Value = acrListItem.InitiatorName;
                    accessControlRecordElement.Add(initiatorNameElement);
                    
                    XElement volumeCountElement = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement.Value = acrListItem.VolumeCount.ToString();
                    accessControlRecordElement.Add(volumeCountElement);
                }
                virtualDiskElement.Add(acrListSequenceElement);
                
                XElement appTypeElement = new XElement(XName.Get("AppType", "http://windowscloudbackup.com/CiS/V2013_03"));
                appTypeElement.Value = diskDetails.AppType.ToString();
                virtualDiskElement.Add(appTypeElement);
                
                XElement dataContainerElement = new XElement(XName.Get("DataContainer", "http://windowscloudbackup.com/CiS/V2013_03"));
                virtualDiskElement.Add(dataContainerElement);
                
                if (diskDetails.DataContainer.InstanceId != null)
                {
                    XElement instanceIdElement3 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement3.Value = diskDetails.DataContainer.InstanceId;
                    dataContainerElement.Add(instanceIdElement3);
                }
                
                XElement nameElement3 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement3.Value = diskDetails.DataContainer.Name;
                dataContainerElement.Add(nameElement3);
                
                XElement operationInProgressElement3 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement3.Value = diskDetails.DataContainer.OperationInProgress.ToString();
                dataContainerElement.Add(operationInProgressElement3);
                
                XElement bandwidthRateElement = new XElement(XName.Get("BandwidthRate", "http://windowscloudbackup.com/CiS/V2013_03"));
                bandwidthRateElement.Value = diskDetails.DataContainer.BandwidthRate.ToString();
                dataContainerElement.Add(bandwidthRateElement);
                
                if (diskDetails.DataContainer.EncryptionKey != null)
                {
                    XElement encryptionKeyElement = new XElement(XName.Get("EncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                    encryptionKeyElement.Value = diskDetails.DataContainer.EncryptionKey;
                    dataContainerElement.Add(encryptionKeyElement);
                }
                
                XElement isDefaultElement = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                isDefaultElement.Value = diskDetails.DataContainer.IsDefault.ToString().ToLower();
                dataContainerElement.Add(isDefaultElement);
                
                XElement isEncryptionEnabledElement = new XElement(XName.Get("IsEncryptionEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                isEncryptionEnabledElement.Value = diskDetails.DataContainer.IsEncryptionEnabled.ToString().ToLower();
                dataContainerElement.Add(isEncryptionEnabledElement);
                
                XElement ownedElement = new XElement(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                ownedElement.Value = diskDetails.DataContainer.Owned.ToString().ToLower();
                dataContainerElement.Add(ownedElement);
                
                XElement primaryStorageAccountCredentialElement = new XElement(XName.Get("PrimaryStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                dataContainerElement.Add(primaryStorageAccountCredentialElement);
                
                if (diskDetails.DataContainer.PrimaryStorageAccountCredential.InstanceId != null)
                {
                    XElement instanceIdElement4 = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement4.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.InstanceId;
                    primaryStorageAccountCredentialElement.Add(instanceIdElement4);
                }
                
                if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Name != null)
                {
                    XElement nameElement4 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nameElement4.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Name;
                    primaryStorageAccountCredentialElement.Add(nameElement4);
                }
                
                XElement operationInProgressElement4 = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement4.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.OperationInProgress.ToString();
                primaryStorageAccountCredentialElement.Add(operationInProgressElement4);
                
                XElement cloudTypeElement = new XElement(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                cloudTypeElement.Value = StorSimpleManagementClient.CloudTypeToString(diskDetails.DataContainer.PrimaryStorageAccountCredential.CloudType);
                primaryStorageAccountCredentialElement.Add(cloudTypeElement);
                
                XElement hostnameElement = new XElement(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                hostnameElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Hostname;
                primaryStorageAccountCredentialElement.Add(hostnameElement);
                
                XElement isDefaultElement2 = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                isDefaultElement2.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.IsDefault.ToString().ToLower();
                primaryStorageAccountCredentialElement.Add(isDefaultElement2);
                
                if (diskDetails.DataContainer.PrimaryStorageAccountCredential.Location != null)
                {
                    XElement locationElement = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                    locationElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Location;
                    primaryStorageAccountCredentialElement.Add(locationElement);
                }
                
                XElement loginElement = new XElement(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                loginElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Login;
                primaryStorageAccountCredentialElement.Add(loginElement);
                
                XElement passwordElement = new XElement(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                passwordElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.Password;
                primaryStorageAccountCredentialElement.Add(passwordElement);
                
                XElement useSSLElement = new XElement(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                useSSLElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.UseSSL.ToString().ToLower();
                primaryStorageAccountCredentialElement.Add(useSSLElement);
                
                XElement volumeCountElement2 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                volumeCountElement2.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.VolumeCount.ToString();
                primaryStorageAccountCredentialElement.Add(volumeCountElement2);
                
                if (diskDetails.DataContainer.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint != null)
                {
                    XElement passwordEncryptionCertThumbprintElement = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    passwordEncryptionCertThumbprintElement.Value = diskDetails.DataContainer.PrimaryStorageAccountCredential.PasswordEncryptionCertThumbprint;
                    primaryStorageAccountCredentialElement.Add(passwordEncryptionCertThumbprintElement);
                }
                else
                {
                    XElement emptyElement2 = new XElement(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    XAttribute nilAttribute2 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                    nilAttribute2.Value = "true";
                    emptyElement2.Add(nilAttribute2);
                    primaryStorageAccountCredentialElement.Add(emptyElement2);
                }
                
                if (diskDetails.DataContainer.SecretsEncryptionThumbprint != null)
                {
                    XElement secretsEncryptionThumbprintElement = new XElement(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    secretsEncryptionThumbprintElement.Value = diskDetails.DataContainer.SecretsEncryptionThumbprint;
                    dataContainerElement.Add(secretsEncryptionThumbprintElement);
                }
                
                XElement volumeCountElement3 = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                volumeCountElement3.Value = diskDetails.DataContainer.VolumeCount.ToString();
                dataContainerElement.Add(volumeCountElement3);
                
                if (diskDetails.DataContainerId != null)
                {
                    XElement dataContainerIdElement = new XElement(XName.Get("DataContainerId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    dataContainerIdElement.Value = diskDetails.DataContainerId;
                    virtualDiskElement.Add(dataContainerIdElement);
                }
                
                if (diskDetails.InternalInstanceId != null)
                {
                    XElement internalInstanceIdElement = new XElement(XName.Get("InternalInstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    internalInstanceIdElement.Value = diskDetails.InternalInstanceId;
                    virtualDiskElement.Add(internalInstanceIdElement);
                }
                
                XElement isBackupEnabledElement = new XElement(XName.Get("IsBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                isBackupEnabledElement.Value = diskDetails.IsBackupEnabled.ToString().ToLower();
                virtualDiskElement.Add(isBackupEnabledElement);
                
                XElement isDefaultBackupEnabledElement = new XElement(XName.Get("IsDefaultBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                isDefaultBackupEnabledElement.Value = diskDetails.IsDefaultBackupEnabled.ToString().ToLower();
                virtualDiskElement.Add(isDefaultBackupEnabledElement);
                
                XElement isMonitoringEnabledElement = new XElement(XName.Get("IsMonitoringEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                isMonitoringEnabledElement.Value = diskDetails.IsMonitoringEnabled.ToString().ToLower();
                virtualDiskElement.Add(isMonitoringEnabledElement);
                
                XElement onlineElement = new XElement(XName.Get("Online", "http://windowscloudbackup.com/CiS/V2013_03"));
                onlineElement.Value = diskDetails.Online.ToString().ToLower();
                virtualDiskElement.Add(onlineElement);
                
                XElement sizeInBytesElement = new XElement(XName.Get("SizeInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                sizeInBytesElement.Value = diskDetails.SizeInBytes.ToString();
                virtualDiskElement.Add(sizeInBytesElement);
                
                if (diskDetails.VSN != null)
                {
                    XElement vSNElement = new XElement(XName.Get("VSN", "http://windowscloudbackup.com/CiS/V2013_03"));
                    vSNElement.Value = diskDetails.VSN;
                    virtualDiskElement.Add(vSNElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GuidTaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GuidTaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement guidElement = responseDoc.Element(XName.Get("guid", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (guidElement != null)
                        {
                            string guidInstance = guidElement.Value;
                            result.TaskId = guidInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='diskDetails'>
        /// Required. Parameters supplied to the Create virtual disk operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> CreateAsync(string deviceId, VirtualDiskRequest diskDetails, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("diskDetails", diskDetails);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GuidTaskResponse response = await client.VirtualDisk.BeginCreatingAsync(deviceId, diskDetails, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='diskId'>
        /// Required. disk id
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> DeleteAsync(string deviceId, string diskId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("diskId", diskId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GuidTaskResponse response = await client.VirtualDisk.BeginDeletingAsync(deviceId, diskId, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <param name='deviceId'>
        /// Optional.
        /// </param>
        /// <param name='diskName'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get of virtual disk.
        /// </returns>
        public async Task<VirtualDiskGetResponse> GetByNameAsync(string deviceId, string diskName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("diskName", diskName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            if (deviceId != null)
            {
                url = url + Uri.EscapeDataString(deviceId);
            }
            url = url + "/virtualdisks";
            List<string> queryParameters = new List<string>();
            if (diskName != null)
            {
                queryParameters.Add("diskName=" + Uri.EscapeDataString(diskName));
            }
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualDiskGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualDiskGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement virtualDiskElement = responseDoc.Element(XName.Get("VirtualDisk", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (virtualDiskElement != null)
                        {
                            VirtualDisk virtualDiskInstance = new VirtualDisk();
                            result.VirtualDiskInfo = virtualDiskInstance;
                            
                            XElement instanceIdElement = virtualDiskElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (instanceIdElement != null)
                            {
                                string instanceIdInstance = instanceIdElement.Value;
                                virtualDiskInstance.InstanceId = instanceIdInstance;
                            }
                            
                            XElement nameElement = virtualDiskElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                virtualDiskInstance.Name = nameInstance;
                            }
                            
                            XElement operationInProgressElement = virtualDiskElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (operationInProgressElement != null)
                            {
                                OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                virtualDiskInstance.OperationInProgress = operationInProgressInstance;
                            }
                            
                            XElement accessTypeElement = virtualDiskElement.Element(XName.Get("AccessType", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (accessTypeElement != null)
                            {
                                AccessType accessTypeInstance = ((AccessType)Enum.Parse(typeof(AccessType), accessTypeElement.Value, true));
                                virtualDiskInstance.AccessType = accessTypeInstance;
                            }
                            
                            XElement acrListSequenceElement = virtualDiskElement.Element(XName.Get("AcrList", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (acrListSequenceElement != null)
                            {
                                foreach (XElement acrListElement in acrListSequenceElement.Elements(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    AccessControlRecord accessControlRecordInstance = new AccessControlRecord();
                                    virtualDiskInstance.AcrList.Add(accessControlRecordInstance);
                                    
                                    XElement instanceIdElement2 = acrListElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (instanceIdElement2 != null)
                                    {
                                        string instanceIdInstance2 = instanceIdElement2.Value;
                                        accessControlRecordInstance.InstanceId = instanceIdInstance2;
                                    }
                                    
                                    XElement nameElement2 = acrListElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nameElement2 != null)
                                    {
                                        string nameInstance2 = nameElement2.Value;
                                        accessControlRecordInstance.Name = nameInstance2;
                                    }
                                    
                                    XElement globalIdElement = acrListElement.Element(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                                    if (globalIdElement != null)
                                    {
                                        bool isNil = false;
                                        XAttribute nilAttribute = globalIdElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                        if (nilAttribute != null)
                                        {
                                            isNil = nilAttribute.Value == "true";
                                        }
                                        if (isNil == false)
                                        {
                                            string globalIdInstance = globalIdElement.Value;
                                            accessControlRecordInstance.GlobalId = globalIdInstance;
                                        }
                                    }
                                    
                                    XElement operationInProgressElement2 = acrListElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (operationInProgressElement2 != null)
                                    {
                                        OperationInProgress operationInProgressInstance2 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement2.Value, true));
                                        accessControlRecordInstance.OperationInProgress = operationInProgressInstance2;
                                    }
                                    
                                    XElement initiatorNameElement = acrListElement.Element(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (initiatorNameElement != null)
                                    {
                                        string initiatorNameInstance = initiatorNameElement.Value;
                                        accessControlRecordInstance.InitiatorName = initiatorNameInstance;
                                    }
                                    
                                    XElement volumeCountElement = acrListElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (volumeCountElement != null)
                                    {
                                        int volumeCountInstance = int.Parse(volumeCountElement.Value, CultureInfo.InvariantCulture);
                                        accessControlRecordInstance.VolumeCount = volumeCountInstance;
                                    }
                                }
                            }
                            
                            XElement appTypeElement = virtualDiskElement.Element(XName.Get("AppType", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (appTypeElement != null)
                            {
                                AppType appTypeInstance = ((AppType)Enum.Parse(typeof(AppType), appTypeElement.Value, true));
                                virtualDiskInstance.AppType = appTypeInstance;
                            }
                            
                            XElement dataContainerElement = virtualDiskElement.Element(XName.Get("DataContainer", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (dataContainerElement != null)
                            {
                                DataContainer dataContainerInstance = new DataContainer();
                                virtualDiskInstance.DataContainer = dataContainerInstance;
                                
                                XElement instanceIdElement3 = dataContainerElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (instanceIdElement3 != null)
                                {
                                    string instanceIdInstance3 = instanceIdElement3.Value;
                                    dataContainerInstance.InstanceId = instanceIdInstance3;
                                }
                                
                                XElement nameElement3 = dataContainerElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (nameElement3 != null)
                                {
                                    string nameInstance3 = nameElement3.Value;
                                    dataContainerInstance.Name = nameInstance3;
                                }
                                
                                XElement operationInProgressElement3 = dataContainerElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (operationInProgressElement3 != null)
                                {
                                    OperationInProgress operationInProgressInstance3 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement3.Value, true));
                                    dataContainerInstance.OperationInProgress = operationInProgressInstance3;
                                }
                                
                                XElement bandwidthRateElement = dataContainerElement.Element(XName.Get("BandwidthRate", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (bandwidthRateElement != null)
                                {
                                    int bandwidthRateInstance = int.Parse(bandwidthRateElement.Value, CultureInfo.InvariantCulture);
                                    dataContainerInstance.BandwidthRate = bandwidthRateInstance;
                                }
                                
                                XElement encryptionKeyElement = dataContainerElement.Element(XName.Get("EncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (encryptionKeyElement != null)
                                {
                                    string encryptionKeyInstance = encryptionKeyElement.Value;
                                    dataContainerInstance.EncryptionKey = encryptionKeyInstance;
                                }
                                
                                XElement isDefaultElement = dataContainerElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isDefaultElement != null)
                                {
                                    bool isDefaultInstance = bool.Parse(isDefaultElement.Value);
                                    dataContainerInstance.IsDefault = isDefaultInstance;
                                }
                                
                                XElement isEncryptionEnabledElement = dataContainerElement.Element(XName.Get("IsEncryptionEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isEncryptionEnabledElement != null)
                                {
                                    bool isEncryptionEnabledInstance = bool.Parse(isEncryptionEnabledElement.Value);
                                    dataContainerInstance.IsEncryptionEnabled = isEncryptionEnabledInstance;
                                }
                                
                                XElement ownedElement = dataContainerElement.Element(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (ownedElement != null)
                                {
                                    bool ownedInstance = bool.Parse(ownedElement.Value);
                                    dataContainerInstance.Owned = ownedInstance;
                                }
                                
                                XElement primaryStorageAccountCredentialElement = dataContainerElement.Element(XName.Get("PrimaryStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (primaryStorageAccountCredentialElement != null)
                                {
                                    StorageAccountCredentialResponse primaryStorageAccountCredentialInstance = new StorageAccountCredentialResponse();
                                    dataContainerInstance.PrimaryStorageAccountCredential = primaryStorageAccountCredentialInstance;
                                    
                                    XElement instanceIdElement4 = primaryStorageAccountCredentialElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (instanceIdElement4 != null)
                                    {
                                        string instanceIdInstance4 = instanceIdElement4.Value;
                                        primaryStorageAccountCredentialInstance.InstanceId = instanceIdInstance4;
                                    }
                                    
                                    XElement nameElement4 = primaryStorageAccountCredentialElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nameElement4 != null)
                                    {
                                        string nameInstance4 = nameElement4.Value;
                                        primaryStorageAccountCredentialInstance.Name = nameInstance4;
                                    }
                                    
                                    XElement operationInProgressElement4 = primaryStorageAccountCredentialElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (operationInProgressElement4 != null)
                                    {
                                        OperationInProgress operationInProgressInstance4 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement4.Value, true));
                                        primaryStorageAccountCredentialInstance.OperationInProgress = operationInProgressInstance4;
                                    }
                                    
                                    XElement cloudTypeElement = primaryStorageAccountCredentialElement.Element(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (cloudTypeElement != null)
                                    {
                                        CloudType cloudTypeInstance = StorSimpleManagementClient.ParseCloudType(cloudTypeElement.Value);
                                        primaryStorageAccountCredentialInstance.CloudType = cloudTypeInstance;
                                    }
                                    
                                    XElement hostnameElement = primaryStorageAccountCredentialElement.Element(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (hostnameElement != null)
                                    {
                                        string hostnameInstance = hostnameElement.Value;
                                        primaryStorageAccountCredentialInstance.Hostname = hostnameInstance;
                                    }
                                    
                                    XElement isDefaultElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isDefaultElement2 != null)
                                    {
                                        bool isDefaultInstance2 = bool.Parse(isDefaultElement2.Value);
                                        primaryStorageAccountCredentialInstance.IsDefault = isDefaultInstance2;
                                    }
                                    
                                    XElement locationElement = primaryStorageAccountCredentialElement.Element(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (locationElement != null)
                                    {
                                        string locationInstance = locationElement.Value;
                                        primaryStorageAccountCredentialInstance.Location = locationInstance;
                                    }
                                    
                                    XElement loginElement = primaryStorageAccountCredentialElement.Element(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (loginElement != null)
                                    {
                                        string loginInstance = loginElement.Value;
                                        primaryStorageAccountCredentialInstance.Login = loginInstance;
                                    }
                                    
                                    XElement passwordElement = primaryStorageAccountCredentialElement.Element(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (passwordElement != null)
                                    {
                                        string passwordInstance = passwordElement.Value;
                                        primaryStorageAccountCredentialInstance.Password = passwordInstance;
                                    }
                                    
                                    XElement useSSLElement = primaryStorageAccountCredentialElement.Element(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (useSSLElement != null)
                                    {
                                        bool useSSLInstance = bool.Parse(useSSLElement.Value);
                                        primaryStorageAccountCredentialInstance.UseSSL = useSSLInstance;
                                    }
                                    
                                    XElement volumeCountElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (volumeCountElement2 != null)
                                    {
                                        int volumeCountInstance2 = int.Parse(volumeCountElement2.Value, CultureInfo.InvariantCulture);
                                        primaryStorageAccountCredentialInstance.VolumeCount = volumeCountInstance2;
                                    }
                                    
                                    XElement passwordEncryptionCertThumbprintElement = primaryStorageAccountCredentialElement.Element(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (passwordEncryptionCertThumbprintElement != null)
                                    {
                                        bool isNil2 = false;
                                        XAttribute nilAttribute2 = passwordEncryptionCertThumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                        if (nilAttribute2 != null)
                                        {
                                            isNil2 = nilAttribute2.Value == "true";
                                        }
                                        if (isNil2 == false)
                                        {
                                            string passwordEncryptionCertThumbprintInstance = passwordEncryptionCertThumbprintElement.Value;
                                            primaryStorageAccountCredentialInstance.PasswordEncryptionCertThumbprint = passwordEncryptionCertThumbprintInstance;
                                        }
                                    }
                                }
                                
                                XElement secretsEncryptionThumbprintElement = dataContainerElement.Element(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (secretsEncryptionThumbprintElement != null)
                                {
                                    string secretsEncryptionThumbprintInstance = secretsEncryptionThumbprintElement.Value;
                                    dataContainerInstance.SecretsEncryptionThumbprint = secretsEncryptionThumbprintInstance;
                                }
                                
                                XElement volumeCountElement3 = dataContainerElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (volumeCountElement3 != null)
                                {
                                    int volumeCountInstance3 = int.Parse(volumeCountElement3.Value, CultureInfo.InvariantCulture);
                                    dataContainerInstance.VolumeCount = volumeCountInstance3;
                                }
                            }
                            
                            XElement dataContainerIdElement = virtualDiskElement.Element(XName.Get("DataContainerId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (dataContainerIdElement != null)
                            {
                                string dataContainerIdInstance = dataContainerIdElement.Value;
                                virtualDiskInstance.DataContainerId = dataContainerIdInstance;
                            }
                            
                            XElement internalInstanceIdElement = virtualDiskElement.Element(XName.Get("InternalInstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (internalInstanceIdElement != null)
                            {
                                string internalInstanceIdInstance = internalInstanceIdElement.Value;
                                virtualDiskInstance.InternalInstanceId = internalInstanceIdInstance;
                            }
                            
                            XElement isBackupEnabledElement = virtualDiskElement.Element(XName.Get("IsBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (isBackupEnabledElement != null)
                            {
                                bool isBackupEnabledInstance = bool.Parse(isBackupEnabledElement.Value);
                                virtualDiskInstance.IsBackupEnabled = isBackupEnabledInstance;
                            }
                            
                            XElement isDefaultBackupEnabledElement = virtualDiskElement.Element(XName.Get("IsDefaultBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (isDefaultBackupEnabledElement != null)
                            {
                                bool isDefaultBackupEnabledInstance = bool.Parse(isDefaultBackupEnabledElement.Value);
                                virtualDiskInstance.IsDefaultBackupEnabled = isDefaultBackupEnabledInstance;
                            }
                            
                            XElement isMonitoringEnabledElement = virtualDiskElement.Element(XName.Get("IsMonitoringEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (isMonitoringEnabledElement != null)
                            {
                                bool isMonitoringEnabledInstance = bool.Parse(isMonitoringEnabledElement.Value);
                                virtualDiskInstance.IsMonitoringEnabled = isMonitoringEnabledInstance;
                            }
                            
                            XElement onlineElement = virtualDiskElement.Element(XName.Get("Online", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (onlineElement != null)
                            {
                                bool onlineInstance = bool.Parse(onlineElement.Value);
                                virtualDiskInstance.Online = onlineInstance;
                            }
                            
                            XElement sizeInBytesElement = virtualDiskElement.Element(XName.Get("SizeInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (sizeInBytesElement != null)
                            {
                                long sizeInBytesInstance = long.Parse(sizeInBytesElement.Value, CultureInfo.InvariantCulture);
                                virtualDiskInstance.SizeInBytes = sizeInBytesInstance;
                            }
                            
                            XElement vSNElement = virtualDiskElement.Element(XName.Get("VSN", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (vSNElement != null)
                            {
                                string vSNInstance = vSNElement.Value;
                                virtualDiskInstance.VSN = vSNInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Optional.
        /// </param>
        /// <param name='dataContainerId'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list of virtual disks for a given data
        /// container.
        /// </returns>
        public async Task<VirtualDiskListResponse> ListAsync(string deviceId, string dataContainerId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("dataContainerId", dataContainerId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            if (deviceId != null)
            {
                url = url + Uri.EscapeDataString(deviceId);
            }
            url = url + "/virtualdisks";
            List<string> queryParameters = new List<string>();
            if (dataContainerId != null)
            {
                queryParameters.Add("dataContainerId=" + Uri.EscapeDataString(dataContainerId));
            }
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualDiskListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualDiskListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement arrayOfVirtualDiskSequenceElement = responseDoc.Element(XName.Get("ArrayOfVirtualDisk", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (arrayOfVirtualDiskSequenceElement != null)
                        {
                            foreach (XElement arrayOfVirtualDiskElement in arrayOfVirtualDiskSequenceElement.Elements(XName.Get("VirtualDisk", "http://windowscloudbackup.com/CiS/V2013_03")))
                            {
                                VirtualDisk virtualDiskInstance = new VirtualDisk();
                                result.ListofVirtualDisks.Add(virtualDiskInstance);
                                
                                XElement instanceIdElement = arrayOfVirtualDiskElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (instanceIdElement != null)
                                {
                                    string instanceIdInstance = instanceIdElement.Value;
                                    virtualDiskInstance.InstanceId = instanceIdInstance;
                                }
                                
                                XElement nameElement = arrayOfVirtualDiskElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    virtualDiskInstance.Name = nameInstance;
                                }
                                
                                XElement operationInProgressElement = arrayOfVirtualDiskElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (operationInProgressElement != null)
                                {
                                    OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                    virtualDiskInstance.OperationInProgress = operationInProgressInstance;
                                }
                                
                                XElement accessTypeElement = arrayOfVirtualDiskElement.Element(XName.Get("AccessType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (accessTypeElement != null)
                                {
                                    AccessType accessTypeInstance = ((AccessType)Enum.Parse(typeof(AccessType), accessTypeElement.Value, true));
                                    virtualDiskInstance.AccessType = accessTypeInstance;
                                }
                                
                                XElement acrListSequenceElement = arrayOfVirtualDiskElement.Element(XName.Get("AcrList", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (acrListSequenceElement != null)
                                {
                                    foreach (XElement acrListElement in acrListSequenceElement.Elements(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03")))
                                    {
                                        AccessControlRecord accessControlRecordInstance = new AccessControlRecord();
                                        virtualDiskInstance.AcrList.Add(accessControlRecordInstance);
                                        
                                        XElement instanceIdElement2 = acrListElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement2 != null)
                                        {
                                            string instanceIdInstance2 = instanceIdElement2.Value;
                                            accessControlRecordInstance.InstanceId = instanceIdInstance2;
                                        }
                                        
                                        XElement nameElement2 = acrListElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement2 != null)
                                        {
                                            string nameInstance2 = nameElement2.Value;
                                            accessControlRecordInstance.Name = nameInstance2;
                                        }
                                        
                                        XElement globalIdElement = acrListElement.Element(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                                        if (globalIdElement != null)
                                        {
                                            bool isNil = false;
                                            XAttribute nilAttribute = globalIdElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute != null)
                                            {
                                                isNil = nilAttribute.Value == "true";
                                            }
                                            if (isNil == false)
                                            {
                                                string globalIdInstance = globalIdElement.Value;
                                                accessControlRecordInstance.GlobalId = globalIdInstance;
                                            }
                                        }
                                        
                                        XElement operationInProgressElement2 = acrListElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement2 != null)
                                        {
                                            OperationInProgress operationInProgressInstance2 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement2.Value, true));
                                            accessControlRecordInstance.OperationInProgress = operationInProgressInstance2;
                                        }
                                        
                                        XElement initiatorNameElement = acrListElement.Element(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (initiatorNameElement != null)
                                        {
                                            string initiatorNameInstance = initiatorNameElement.Value;
                                            accessControlRecordInstance.InitiatorName = initiatorNameInstance;
                                        }
                                        
                                        XElement volumeCountElement = acrListElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (volumeCountElement != null)
                                        {
                                            int volumeCountInstance = int.Parse(volumeCountElement.Value, CultureInfo.InvariantCulture);
                                            accessControlRecordInstance.VolumeCount = volumeCountInstance;
                                        }
                                    }
                                }
                                
                                XElement appTypeElement = arrayOfVirtualDiskElement.Element(XName.Get("AppType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (appTypeElement != null)
                                {
                                    AppType appTypeInstance = ((AppType)Enum.Parse(typeof(AppType), appTypeElement.Value, true));
                                    virtualDiskInstance.AppType = appTypeInstance;
                                }
                                
                                XElement dataContainerElement = arrayOfVirtualDiskElement.Element(XName.Get("DataContainer", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (dataContainerElement != null)
                                {
                                    DataContainer dataContainerInstance = new DataContainer();
                                    virtualDiskInstance.DataContainer = dataContainerInstance;
                                    
                                    XElement instanceIdElement3 = dataContainerElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (instanceIdElement3 != null)
                                    {
                                        string instanceIdInstance3 = instanceIdElement3.Value;
                                        dataContainerInstance.InstanceId = instanceIdInstance3;
                                    }
                                    
                                    XElement nameElement3 = dataContainerElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nameElement3 != null)
                                    {
                                        string nameInstance3 = nameElement3.Value;
                                        dataContainerInstance.Name = nameInstance3;
                                    }
                                    
                                    XElement operationInProgressElement3 = dataContainerElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (operationInProgressElement3 != null)
                                    {
                                        OperationInProgress operationInProgressInstance3 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement3.Value, true));
                                        dataContainerInstance.OperationInProgress = operationInProgressInstance3;
                                    }
                                    
                                    XElement bandwidthRateElement = dataContainerElement.Element(XName.Get("BandwidthRate", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (bandwidthRateElement != null)
                                    {
                                        int bandwidthRateInstance = int.Parse(bandwidthRateElement.Value, CultureInfo.InvariantCulture);
                                        dataContainerInstance.BandwidthRate = bandwidthRateInstance;
                                    }
                                    
                                    XElement encryptionKeyElement = dataContainerElement.Element(XName.Get("EncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (encryptionKeyElement != null)
                                    {
                                        string encryptionKeyInstance = encryptionKeyElement.Value;
                                        dataContainerInstance.EncryptionKey = encryptionKeyInstance;
                                    }
                                    
                                    XElement isDefaultElement = dataContainerElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isDefaultElement != null)
                                    {
                                        bool isDefaultInstance = bool.Parse(isDefaultElement.Value);
                                        dataContainerInstance.IsDefault = isDefaultInstance;
                                    }
                                    
                                    XElement isEncryptionEnabledElement = dataContainerElement.Element(XName.Get("IsEncryptionEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isEncryptionEnabledElement != null)
                                    {
                                        bool isEncryptionEnabledInstance = bool.Parse(isEncryptionEnabledElement.Value);
                                        dataContainerInstance.IsEncryptionEnabled = isEncryptionEnabledInstance;
                                    }
                                    
                                    XElement ownedElement = dataContainerElement.Element(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (ownedElement != null)
                                    {
                                        bool ownedInstance = bool.Parse(ownedElement.Value);
                                        dataContainerInstance.Owned = ownedInstance;
                                    }
                                    
                                    XElement primaryStorageAccountCredentialElement = dataContainerElement.Element(XName.Get("PrimaryStorageAccountCredential", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (primaryStorageAccountCredentialElement != null)
                                    {
                                        StorageAccountCredentialResponse primaryStorageAccountCredentialInstance = new StorageAccountCredentialResponse();
                                        dataContainerInstance.PrimaryStorageAccountCredential = primaryStorageAccountCredentialInstance;
                                        
                                        XElement instanceIdElement4 = primaryStorageAccountCredentialElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (instanceIdElement4 != null)
                                        {
                                            string instanceIdInstance4 = instanceIdElement4.Value;
                                            primaryStorageAccountCredentialInstance.InstanceId = instanceIdInstance4;
                                        }
                                        
                                        XElement nameElement4 = primaryStorageAccountCredentialElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (nameElement4 != null)
                                        {
                                            string nameInstance4 = nameElement4.Value;
                                            primaryStorageAccountCredentialInstance.Name = nameInstance4;
                                        }
                                        
                                        XElement operationInProgressElement4 = primaryStorageAccountCredentialElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (operationInProgressElement4 != null)
                                        {
                                            OperationInProgress operationInProgressInstance4 = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement4.Value, true));
                                            primaryStorageAccountCredentialInstance.OperationInProgress = operationInProgressInstance4;
                                        }
                                        
                                        XElement cloudTypeElement = primaryStorageAccountCredentialElement.Element(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (cloudTypeElement != null)
                                        {
                                            CloudType cloudTypeInstance = StorSimpleManagementClient.ParseCloudType(cloudTypeElement.Value);
                                            primaryStorageAccountCredentialInstance.CloudType = cloudTypeInstance;
                                        }
                                        
                                        XElement hostnameElement = primaryStorageAccountCredentialElement.Element(XName.Get("Hostname", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (hostnameElement != null)
                                        {
                                            string hostnameInstance = hostnameElement.Value;
                                            primaryStorageAccountCredentialInstance.Hostname = hostnameInstance;
                                        }
                                        
                                        XElement isDefaultElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (isDefaultElement2 != null)
                                        {
                                            bool isDefaultInstance2 = bool.Parse(isDefaultElement2.Value);
                                            primaryStorageAccountCredentialInstance.IsDefault = isDefaultInstance2;
                                        }
                                        
                                        XElement locationElement = primaryStorageAccountCredentialElement.Element(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (locationElement != null)
                                        {
                                            string locationInstance = locationElement.Value;
                                            primaryStorageAccountCredentialInstance.Location = locationInstance;
                                        }
                                        
                                        XElement loginElement = primaryStorageAccountCredentialElement.Element(XName.Get("Login", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (loginElement != null)
                                        {
                                            string loginInstance = loginElement.Value;
                                            primaryStorageAccountCredentialInstance.Login = loginInstance;
                                        }
                                        
                                        XElement passwordElement = primaryStorageAccountCredentialElement.Element(XName.Get("Password", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (passwordElement != null)
                                        {
                                            string passwordInstance = passwordElement.Value;
                                            primaryStorageAccountCredentialInstance.Password = passwordInstance;
                                        }
                                        
                                        XElement useSSLElement = primaryStorageAccountCredentialElement.Element(XName.Get("UseSSL", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (useSSLElement != null)
                                        {
                                            bool useSSLInstance = bool.Parse(useSSLElement.Value);
                                            primaryStorageAccountCredentialInstance.UseSSL = useSSLInstance;
                                        }
                                        
                                        XElement volumeCountElement2 = primaryStorageAccountCredentialElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (volumeCountElement2 != null)
                                        {
                                            int volumeCountInstance2 = int.Parse(volumeCountElement2.Value, CultureInfo.InvariantCulture);
                                            primaryStorageAccountCredentialInstance.VolumeCount = volumeCountInstance2;
                                        }
                                        
                                        XElement passwordEncryptionCertThumbprintElement = primaryStorageAccountCredentialElement.Element(XName.Get("PasswordEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (passwordEncryptionCertThumbprintElement != null)
                                        {
                                            bool isNil2 = false;
                                            XAttribute nilAttribute2 = passwordEncryptionCertThumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute2 != null)
                                            {
                                                isNil2 = nilAttribute2.Value == "true";
                                            }
                                            if (isNil2 == false)
                                            {
                                                string passwordEncryptionCertThumbprintInstance = passwordEncryptionCertThumbprintElement.Value;
                                                primaryStorageAccountCredentialInstance.PasswordEncryptionCertThumbprint = passwordEncryptionCertThumbprintInstance;
                                            }
                                        }
                                    }
                                    
                                    XElement secretsEncryptionThumbprintElement = dataContainerElement.Element(XName.Get("SecretsEncryptionThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (secretsEncryptionThumbprintElement != null)
                                    {
                                        string secretsEncryptionThumbprintInstance = secretsEncryptionThumbprintElement.Value;
                                        dataContainerInstance.SecretsEncryptionThumbprint = secretsEncryptionThumbprintInstance;
                                    }
                                    
                                    XElement volumeCountElement3 = dataContainerElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (volumeCountElement3 != null)
                                    {
                                        int volumeCountInstance3 = int.Parse(volumeCountElement3.Value, CultureInfo.InvariantCulture);
                                        dataContainerInstance.VolumeCount = volumeCountInstance3;
                                    }
                                }
                                
                                XElement dataContainerIdElement = arrayOfVirtualDiskElement.Element(XName.Get("DataContainerId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (dataContainerIdElement != null)
                                {
                                    string dataContainerIdInstance = dataContainerIdElement.Value;
                                    virtualDiskInstance.DataContainerId = dataContainerIdInstance;
                                }
                                
                                XElement internalInstanceIdElement = arrayOfVirtualDiskElement.Element(XName.Get("InternalInstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (internalInstanceIdElement != null)
                                {
                                    string internalInstanceIdInstance = internalInstanceIdElement.Value;
                                    virtualDiskInstance.InternalInstanceId = internalInstanceIdInstance;
                                }
                                
                                XElement isBackupEnabledElement = arrayOfVirtualDiskElement.Element(XName.Get("IsBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isBackupEnabledElement != null)
                                {
                                    bool isBackupEnabledInstance = bool.Parse(isBackupEnabledElement.Value);
                                    virtualDiskInstance.IsBackupEnabled = isBackupEnabledInstance;
                                }
                                
                                XElement isDefaultBackupEnabledElement = arrayOfVirtualDiskElement.Element(XName.Get("IsDefaultBackupEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isDefaultBackupEnabledElement != null)
                                {
                                    bool isDefaultBackupEnabledInstance = bool.Parse(isDefaultBackupEnabledElement.Value);
                                    virtualDiskInstance.IsDefaultBackupEnabled = isDefaultBackupEnabledInstance;
                                }
                                
                                XElement isMonitoringEnabledElement = arrayOfVirtualDiskElement.Element(XName.Get("IsMonitoringEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isMonitoringEnabledElement != null)
                                {
                                    bool isMonitoringEnabledInstance = bool.Parse(isMonitoringEnabledElement.Value);
                                    virtualDiskInstance.IsMonitoringEnabled = isMonitoringEnabledInstance;
                                }
                                
                                XElement onlineElement = arrayOfVirtualDiskElement.Element(XName.Get("Online", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (onlineElement != null)
                                {
                                    bool onlineInstance = bool.Parse(onlineElement.Value);
                                    virtualDiskInstance.Online = onlineInstance;
                                }
                                
                                XElement sizeInBytesElement = arrayOfVirtualDiskElement.Element(XName.Get("SizeInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (sizeInBytesElement != null)
                                {
                                    long sizeInBytesInstance = long.Parse(sizeInBytesElement.Value, CultureInfo.InvariantCulture);
                                    virtualDiskInstance.SizeInBytes = sizeInBytesInstance;
                                }
                                
                                XElement vSNElement = arrayOfVirtualDiskElement.Element(XName.Get("VSN", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (vSNElement != null)
                                {
                                    string vSNInstance = vSNElement.Value;
                                    virtualDiskInstance.VSN = vSNInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Required. device id
        /// </param>
        /// <param name='diskId'>
        /// Required. disk id
        /// </param>
        /// <param name='diskDetails'>
        /// Required. Parameters supplied to the update virtual disk operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> UpdateAsync(string deviceId, string diskId, VirtualDisk diskDetails, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("diskId", diskId);
                tracingParameters.Add("diskDetails", diskDetails);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GuidTaskResponse response = await client.VirtualDisk.BeginUpdatingAsync(deviceId, diskId, diskDetails, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
