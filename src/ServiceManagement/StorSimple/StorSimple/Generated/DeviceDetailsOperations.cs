// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// All Operations related to Device Details
    /// </summary>
    internal partial class DeviceDetailsOperations : IServiceOperations<StorSimpleManagementClient>, IDeviceDetailsOperations
    {
        /// <summary>
        /// Initializes a new instance of the DeviceDetailsOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DeviceDetailsOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Begin task for updating device details as specified by
        /// deviceDetails. The task can then be tracked for completion using
        /// returned task information
        /// </summary>
        /// <param name='deviceDetails'>
        /// Required. Updated DeviceDetails. Contains the corresponding DeviceId
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Task Response for all Async Calls
        /// </returns>
        public async Task<GuidTaskResponse> BeginUpdateDeviceDetailsAsync(DeviceDetailsRequest deviceDetails, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceDetails == null)
            {
                throw new ArgumentNullException("deviceDetails");
            }
            if (deviceDetails.Chap != null)
            {
                if (deviceDetails.Chap.InitiatorSecret == null)
                {
                    throw new ArgumentNullException("deviceDetails.Chap.InitiatorSecret");
                }
                if (deviceDetails.Chap.InitiatorUser == null)
                {
                    throw new ArgumentNullException("deviceDetails.Chap.InitiatorUser");
                }
                if (deviceDetails.Chap.TargetSecret == null)
                {
                    throw new ArgumentNullException("deviceDetails.Chap.TargetSecret");
                }
                if (deviceDetails.Chap.TargetUser == null)
                {
                    throw new ArgumentNullException("deviceDetails.Chap.TargetUser");
                }
            }
            if (deviceDetails.DeviceProperties != null)
            {
                if (deviceDetails.DeviceProperties.ActivationTime == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.ActivationTime");
                }
                if (deviceDetails.DeviceProperties.Culture == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.Culture");
                }
                if (deviceDetails.DeviceProperties.Description == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.Description");
                }
                if (deviceDetails.DeviceProperties.DeviceId == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.DeviceId");
                }
                if (deviceDetails.DeviceProperties.DeviceSoftwareVersion == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.DeviceSoftwareVersion");
                }
                if (deviceDetails.DeviceProperties.FriendlyName == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.FriendlyName");
                }
                if (deviceDetails.DeviceProperties.Location == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.Location");
                }
                if (deviceDetails.DeviceProperties.ModelDescription == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.ModelDescription");
                }
                if (deviceDetails.DeviceProperties.SerialNumber == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.SerialNumber");
                }
                if (deviceDetails.DeviceProperties.TargetIQN == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.TargetIQN");
                }
                if (deviceDetails.DeviceProperties.TimeZone == null)
                {
                    throw new ArgumentNullException("deviceDetails.DeviceProperties.TimeZone");
                }
            }
            if (deviceDetails.DnsServer != null)
            {
                if (deviceDetails.DnsServer.PrimaryIPv4 == null)
                {
                    throw new ArgumentNullException("deviceDetails.DnsServer.PrimaryIPv4");
                }
                if (deviceDetails.DnsServer.PrimaryIPv6 == null)
                {
                    throw new ArgumentNullException("deviceDetails.DnsServer.PrimaryIPv6");
                }
            }
            if (deviceDetails.Name == null)
            {
                throw new ArgumentNullException("deviceDetails.Name");
            }
            if (deviceDetails.NetInterfaceList != null)
            {
                foreach (NetInterface netInterfaceListParameterItem in deviceDetails.NetInterfaceList)
                {
                    if (netInterfaceListParameterItem.NicIPv4Settings != null)
                    {
                        if (netInterfaceListParameterItem.NicIPv4Settings.IPv4Address == null)
                        {
                            throw new ArgumentNullException("deviceDetails.NetInterfaceList.NicIPv4Settings.IPv4Address");
                        }
                        if (netInterfaceListParameterItem.NicIPv4Settings.IPv4Netmask == null)
                        {
                            throw new ArgumentNullException("deviceDetails.NetInterfaceList.NicIPv4Settings.IPv4Netmask");
                        }
                    }
                    if (netInterfaceListParameterItem.NicIPv6Settings != null)
                    {
                        if (netInterfaceListParameterItem.NicIPv6Settings.IPv6Prefix == null)
                        {
                            throw new ArgumentNullException("deviceDetails.NetInterfaceList.NicIPv6Settings.IPv6Prefix");
                        }
                    }
                }
            }
            if (deviceDetails.TimeServer != null)
            {
                if (deviceDetails.TimeServer.Primary == null)
                {
                    throw new ArgumentNullException("deviceDetails.TimeServer.Primary");
                }
                if (deviceDetails.TimeServer.TimeZone == null)
                {
                    throw new ArgumentNullException("deviceDetails.TimeServer.TimeZone");
                }
            }
            if (deviceDetails.WebProxy != null)
            {
                if (deviceDetails.WebProxy.ConnectionURI == null)
                {
                    throw new ArgumentNullException("deviceDetails.WebProxy.ConnectionURI");
                }
                if (deviceDetails.WebProxy.Username == null)
                {
                    throw new ArgumentNullException("deviceDetails.WebProxy.Username");
                }
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceDetails", deviceDetails);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateDeviceDetailsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            if (deviceDetails.DeviceProperties != null && deviceDetails.DeviceProperties.DeviceId != null)
            {
                url = url + Uri.EscapeDataString(deviceDetails.DeviceProperties.DeviceId);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.3.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement deviceDetailsV3Element = new XElement(XName.Get("DeviceDetails_V3", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(deviceDetailsV3Element);
                
                if (deviceDetails.InstanceId != null)
                {
                    XElement instanceIdElement = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    instanceIdElement.Value = deviceDetails.InstanceId;
                    deviceDetailsV3Element.Add(instanceIdElement);
                }
                
                XElement nameElement = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement.Value = deviceDetails.Name;
                deviceDetailsV3Element.Add(nameElement);
                
                XElement operationInProgressElement = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                operationInProgressElement.Value = deviceDetails.OperationInProgress.ToString();
                deviceDetailsV3Element.Add(operationInProgressElement);
                
                if (deviceDetails.AlertNotification != null)
                {
                    XElement alertNotificationElement = new XElement(XName.Get("AlertNotification", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(alertNotificationElement);
                    
                    if (deviceDetails.AlertNotification.AlertNotifcationCulture != null)
                    {
                        XElement alertNotifcationCultureElement = new XElement(XName.Get("AlertNotifcationCulture", "http://windowscloudbackup.com/CiS/V2013_03"));
                        alertNotifcationCultureElement.Value = deviceDetails.AlertNotification.AlertNotifcationCulture;
                        alertNotificationElement.Add(alertNotifcationCultureElement);
                    }
                    
                    XElement alertNotifcationEnabledElement = new XElement(XName.Get("AlertNotifcationEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                    alertNotifcationEnabledElement.Value = deviceDetails.AlertNotification.AlertNotifcationEnabled.ToString().ToLower();
                    alertNotificationElement.Add(alertNotifcationEnabledElement);
                    
                    if (deviceDetails.AlertNotification.AlertNotificationEmailList != null)
                    {
                        XElement alertNotificationEmailListSequenceElement = new XElement(XName.Get("AlertNotificationEmailList", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (string alertNotificationEmailListItem in deviceDetails.AlertNotification.AlertNotificationEmailList)
                        {
                            XElement alertNotificationEmailListItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                            alertNotificationEmailListItemElement.Value = alertNotificationEmailListItem;
                            alertNotificationEmailListSequenceElement.Add(alertNotificationEmailListItemElement);
                        }
                        alertNotificationElement.Add(alertNotificationEmailListSequenceElement);
                    }
                    
                    XElement alertNotificationEnabledForAdminCoAdminsElement = new XElement(XName.Get("AlertNotificationEnabledForAdminCoAdmins", "http://windowscloudbackup.com/CiS/V2013_03"));
                    alertNotificationEnabledForAdminCoAdminsElement.Value = deviceDetails.AlertNotification.AlertNotificationEnabledForAdminCoAdmins.ToString().ToLower();
                    alertNotificationElement.Add(alertNotificationEnabledForAdminCoAdminsElement);
                }
                
                if (deviceDetails.Chap != null)
                {
                    XElement chapElement = new XElement(XName.Get("Chap", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(chapElement);
                    
                    XElement initiatorSecretElement = new XElement(XName.Get("InitiatorSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                    initiatorSecretElement.Value = deviceDetails.Chap.InitiatorSecret;
                    chapElement.Add(initiatorSecretElement);
                    
                    XElement initiatorUserElement = new XElement(XName.Get("InitiatorUser", "http://windowscloudbackup.com/CiS/V2013_03"));
                    initiatorUserElement.Value = deviceDetails.Chap.InitiatorUser;
                    chapElement.Add(initiatorUserElement);
                    
                    XElement targetSecretElement = new XElement(XName.Get("TargetSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                    targetSecretElement.Value = deviceDetails.Chap.TargetSecret;
                    chapElement.Add(targetSecretElement);
                    
                    XElement targetUserElement = new XElement(XName.Get("TargetUser", "http://windowscloudbackup.com/CiS/V2013_03"));
                    targetUserElement.Value = deviceDetails.Chap.TargetUser;
                    chapElement.Add(targetUserElement);
                }
                
                if (deviceDetails.DeviceProperties != null)
                {
                    XElement devicePropertiesElement = new XElement(XName.Get("DeviceProperties", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(devicePropertiesElement);
                    
                    XElement aCRCountElement = new XElement(XName.Get("ACRCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    aCRCountElement.Value = deviceDetails.DeviceProperties.ACRCount.ToString();
                    devicePropertiesElement.Add(aCRCountElement);
                    
                    XElement activationTimeElement = new XElement(XName.Get("ActivationTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                    activationTimeElement.Value = deviceDetails.DeviceProperties.ActivationTime;
                    devicePropertiesElement.Add(activationTimeElement);
                    
                    XElement activeControllerElement = new XElement(XName.Get("ActiveController", "http://windowscloudbackup.com/CiS/V2013_03"));
                    activeControllerElement.Value = deviceDetails.DeviceProperties.ActiveController.ToString();
                    devicePropertiesElement.Add(activeControllerElement);
                    
                    XElement availableStorageInBytesElement = new XElement(XName.Get("AvailableStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                    availableStorageInBytesElement.Value = deviceDetails.DeviceProperties.AvailableStorageInBytes.ToString();
                    devicePropertiesElement.Add(availableStorageInBytesElement);
                    
                    XElement cloudCredCountElement = new XElement(XName.Get("CloudCredCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    cloudCredCountElement.Value = deviceDetails.DeviceProperties.CloudCredCount.ToString();
                    devicePropertiesElement.Add(cloudCredCountElement);
                    
                    XElement cultureElement = new XElement(XName.Get("Culture", "http://windowscloudbackup.com/CiS/V2013_03"));
                    cultureElement.Value = deviceDetails.DeviceProperties.Culture;
                    devicePropertiesElement.Add(cultureElement);
                    
                    XElement currentControllerElement = new XElement(XName.Get("CurrentController", "http://windowscloudbackup.com/CiS/V2013_03"));
                    currentControllerElement.Value = deviceDetails.DeviceProperties.CurrentController.ToString();
                    devicePropertiesElement.Add(currentControllerElement);
                    
                    XElement dataContainerCountElement = new XElement(XName.Get("DataContainerCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    dataContainerCountElement.Value = deviceDetails.DeviceProperties.DataContainerCount.ToString();
                    devicePropertiesElement.Add(dataContainerCountElement);
                    
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://windowscloudbackup.com/CiS/V2013_03"));
                    descriptionElement.Value = deviceDetails.DeviceProperties.Description;
                    devicePropertiesElement.Add(descriptionElement);
                    
                    XElement deviceIdElement = new XElement(XName.Get("DeviceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceIdElement.Value = deviceDetails.DeviceProperties.DeviceId;
                    devicePropertiesElement.Add(deviceIdElement);
                    
                    XElement deviceSoftwareVersionElement = new XElement(XName.Get("DeviceSoftwareVersion", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceSoftwareVersionElement.Value = deviceDetails.DeviceProperties.DeviceSoftwareVersion;
                    devicePropertiesElement.Add(deviceSoftwareVersionElement);
                    
                    XElement friendlyNameElement = new XElement(XName.Get("FriendlyName", "http://windowscloudbackup.com/CiS/V2013_03"));
                    friendlyNameElement.Value = deviceDetails.DeviceProperties.FriendlyName;
                    devicePropertiesElement.Add(friendlyNameElement);
                    
                    XElement isConfigUpdatedElement = new XElement(XName.Get("IsConfigUpdated", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isConfigUpdatedElement.Value = deviceDetails.DeviceProperties.IsConfigUpdated.ToString().ToLower();
                    devicePropertiesElement.Add(isConfigUpdatedElement);
                    
                    XElement isVirtualApplianceInterimEntryElement = new XElement(XName.Get("IsVirtualApplianceInterimEntry", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isVirtualApplianceInterimEntryElement.Value = deviceDetails.DeviceProperties.IsVirtualApplianceInterimEntry.ToString().ToLower();
                    devicePropertiesElement.Add(isVirtualApplianceInterimEntryElement);
                    
                    XElement locationElement = new XElement(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                    locationElement.Value = deviceDetails.DeviceProperties.Location;
                    devicePropertiesElement.Add(locationElement);
                    
                    XElement modelDescriptionElement = new XElement(XName.Get("ModelDescription", "http://windowscloudbackup.com/CiS/V2013_03"));
                    modelDescriptionElement.Value = deviceDetails.DeviceProperties.ModelDescription;
                    devicePropertiesElement.Add(modelDescriptionElement);
                    
                    XElement nNicCardsElement = new XElement(XName.Get("NNicCards", "http://windowscloudbackup.com/CiS/V2013_03"));
                    nNicCardsElement.Value = deviceDetails.DeviceProperties.NNicCards.ToString();
                    devicePropertiesElement.Add(nNicCardsElement);
                    
                    XElement provisionedStorageInBytesElement = new XElement(XName.Get("ProvisionedStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                    provisionedStorageInBytesElement.Value = deviceDetails.DeviceProperties.ProvisionedStorageInBytes.ToString();
                    devicePropertiesElement.Add(provisionedStorageInBytesElement);
                    
                    XElement serialNumberElement = new XElement(XName.Get("SerialNumber", "http://windowscloudbackup.com/CiS/V2013_03"));
                    serialNumberElement.Value = deviceDetails.DeviceProperties.SerialNumber;
                    devicePropertiesElement.Add(serialNumberElement);
                    
                    XElement statusElement = new XElement(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                    statusElement.Value = deviceDetails.DeviceProperties.Status.ToString();
                    devicePropertiesElement.Add(statusElement);
                    
                    XElement targetIQNElement = new XElement(XName.Get("TargetIQN", "http://windowscloudbackup.com/CiS/V2013_03"));
                    targetIQNElement.Value = deviceDetails.DeviceProperties.TargetIQN;
                    devicePropertiesElement.Add(targetIQNElement);
                    
                    XElement timeZoneElement = new XElement(XName.Get("TimeZone", "http://windowscloudbackup.com/CiS/V2013_03"));
                    timeZoneElement.Value = deviceDetails.DeviceProperties.TimeZone;
                    devicePropertiesElement.Add(timeZoneElement);
                    
                    XElement totalStorageInBytesElement = new XElement(XName.Get("TotalStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                    totalStorageInBytesElement.Value = deviceDetails.DeviceProperties.TotalStorageInBytes.ToString();
                    devicePropertiesElement.Add(totalStorageInBytesElement);
                    
                    XElement typeElement = new XElement(XName.Get("Type", "http://windowscloudbackup.com/CiS/V2013_03"));
                    typeElement.Value = deviceDetails.DeviceProperties.Type.ToString();
                    devicePropertiesElement.Add(typeElement);
                    
                    XElement usingStorageInBytesElement = new XElement(XName.Get("UsingStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                    usingStorageInBytesElement.Value = deviceDetails.DeviceProperties.UsingStorageInBytes.ToString();
                    devicePropertiesElement.Add(usingStorageInBytesElement);
                    
                    XElement volumeCountElement = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                    volumeCountElement.Value = deviceDetails.DeviceProperties.VolumeCount.ToString();
                    devicePropertiesElement.Add(volumeCountElement);
                }
                
                if (deviceDetails.DnsServer != null)
                {
                    XElement dnsServerElement = new XElement(XName.Get("DnsServer", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(dnsServerElement);
                    
                    XElement primaryIPv4Element = new XElement(XName.Get("PrimaryIPv4", "http://windowscloudbackup.com/CiS/V2013_03"));
                    primaryIPv4Element.Value = deviceDetails.DnsServer.PrimaryIPv4;
                    dnsServerElement.Add(primaryIPv4Element);
                    
                    XElement primaryIPv6Element = new XElement(XName.Get("PrimaryIPv6", "http://windowscloudbackup.com/CiS/V2013_03"));
                    primaryIPv6Element.Value = deviceDetails.DnsServer.PrimaryIPv6;
                    dnsServerElement.Add(primaryIPv6Element);
                    
                    if (deviceDetails.DnsServer.SecondaryIPv4 != null)
                    {
                        XElement secondaryIPv4SequenceElement = new XElement(XName.Get("SecondaryIPv4", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (string secondaryIPv4Item in deviceDetails.DnsServer.SecondaryIPv4)
                        {
                            XElement secondaryIPv4ItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                            secondaryIPv4ItemElement.Value = secondaryIPv4Item;
                            secondaryIPv4SequenceElement.Add(secondaryIPv4ItemElement);
                        }
                        dnsServerElement.Add(secondaryIPv4SequenceElement);
                    }
                    
                    if (deviceDetails.DnsServer.SecondaryIPv6 != null)
                    {
                        XElement secondaryIPv6SequenceElement = new XElement(XName.Get("SecondaryIPv6", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (string secondaryIPv6Item in deviceDetails.DnsServer.SecondaryIPv6)
                        {
                            XElement secondaryIPv6ItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                            secondaryIPv6ItemElement.Value = secondaryIPv6Item;
                            secondaryIPv6SequenceElement.Add(secondaryIPv6ItemElement);
                        }
                        dnsServerElement.Add(secondaryIPv6SequenceElement);
                    }
                }
                
                if (deviceDetails.NetInterfaceList != null)
                {
                    XElement netInterfaceListSequenceElement = new XElement(XName.Get("NetInterfaceList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (NetInterface netInterfaceListItem in deviceDetails.NetInterfaceList)
                    {
                        XElement netInterfaceElement = new XElement(XName.Get("NetInterface", "http://windowscloudbackup.com/CiS/V2013_03"));
                        netInterfaceListSequenceElement.Add(netInterfaceElement);
                        
                        XElement interfaceIdElement = new XElement(XName.Get("InterfaceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                        interfaceIdElement.Value = netInterfaceListItem.InterfaceId.ToString();
                        netInterfaceElement.Add(interfaceIdElement);
                        
                        XElement isCloudEnabledElement = new XElement(XName.Get("IsCloudEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                        isCloudEnabledElement.Value = netInterfaceListItem.IsCloudEnabled.ToString().ToLower();
                        netInterfaceElement.Add(isCloudEnabledElement);
                        
                        XElement isDefaultElement = new XElement(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                        isDefaultElement.Value = netInterfaceListItem.IsDefault.ToString().ToLower();
                        netInterfaceElement.Add(isDefaultElement);
                        
                        XElement isEnabledElement = new XElement(XName.Get("IsEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                        isEnabledElement.Value = netInterfaceListItem.IsEnabled.ToString().ToLower();
                        netInterfaceElement.Add(isEnabledElement);
                        
                        XElement isIScsiEnabledElement = new XElement(XName.Get("IsIScsiEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                        isIScsiEnabledElement.Value = netInterfaceListItem.IsIScsiEnabled.ToString().ToLower();
                        netInterfaceElement.Add(isIScsiEnabledElement);
                        
                        XElement mediaConnectStateElement = new XElement(XName.Get("MediaConnectState", "http://windowscloudbackup.com/CiS/V2013_03"));
                        mediaConnectStateElement.Value = netInterfaceListItem.MediaConnectState.ToString();
                        netInterfaceElement.Add(mediaConnectStateElement);
                        
                        XElement modeElement = new XElement(XName.Get("Mode", "http://windowscloudbackup.com/CiS/V2013_03"));
                        modeElement.Value = netInterfaceListItem.Mode.ToString();
                        netInterfaceElement.Add(modeElement);
                        
                        if (netInterfaceListItem.NicIPv4Settings != null)
                        {
                            XElement nicIPv4SettingsElement = new XElement(XName.Get("NicIPv4Settings", "http://windowscloudbackup.com/CiS/V2013_03"));
                            netInterfaceElement.Add(nicIPv4SettingsElement);
                            
                            if (netInterfaceListItem.NicIPv4Settings.Controller0IPv4Address != null)
                            {
                                XElement controller0IPv4AddressElement = new XElement(XName.Get("Controller0IPv4Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                controller0IPv4AddressElement.Value = netInterfaceListItem.NicIPv4Settings.Controller0IPv4Address;
                                nicIPv4SettingsElement.Add(controller0IPv4AddressElement);
                            }
                            
                            if (netInterfaceListItem.NicIPv4Settings.Controller1IPv4Address != null)
                            {
                                XElement controller1IPv4AddressElement = new XElement(XName.Get("Controller1IPv4Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                controller1IPv4AddressElement.Value = netInterfaceListItem.NicIPv4Settings.Controller1IPv4Address;
                                nicIPv4SettingsElement.Add(controller1IPv4AddressElement);
                            }
                            
                            XElement iPv4AddressElement = new XElement(XName.Get("IPv4Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                            iPv4AddressElement.Value = netInterfaceListItem.NicIPv4Settings.IPv4Address;
                            nicIPv4SettingsElement.Add(iPv4AddressElement);
                            
                            if (netInterfaceListItem.NicIPv4Settings.IPv4Gateway != null)
                            {
                                XElement iPv4GatewayElement = new XElement(XName.Get("IPv4Gateway", "http://windowscloudbackup.com/CiS/V2013_03"));
                                iPv4GatewayElement.Value = netInterfaceListItem.NicIPv4Settings.IPv4Gateway;
                                nicIPv4SettingsElement.Add(iPv4GatewayElement);
                            }
                            
                            XElement iPv4NetmaskElement = new XElement(XName.Get("IPv4Netmask", "http://windowscloudbackup.com/CiS/V2013_03"));
                            iPv4NetmaskElement.Value = netInterfaceListItem.NicIPv4Settings.IPv4Netmask;
                            nicIPv4SettingsElement.Add(iPv4NetmaskElement);
                        }
                        
                        if (netInterfaceListItem.NicIPv6Settings != null)
                        {
                            XElement nicIPv6SettingsElement = new XElement(XName.Get("NicIPv6Settings", "http://windowscloudbackup.com/CiS/V2013_03"));
                            netInterfaceElement.Add(nicIPv6SettingsElement);
                            
                            if (netInterfaceListItem.NicIPv6Settings.Controller0IPv6Address != null)
                            {
                                XElement controller0IPv6AddressElement = new XElement(XName.Get("Controller0IPv6Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                controller0IPv6AddressElement.Value = netInterfaceListItem.NicIPv6Settings.Controller0IPv6Address;
                                nicIPv6SettingsElement.Add(controller0IPv6AddressElement);
                            }
                            
                            if (netInterfaceListItem.NicIPv6Settings.Controller1IPv6Address != null)
                            {
                                XElement controller1IPv6AddressElement = new XElement(XName.Get("Controller1IPv6Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                controller1IPv6AddressElement.Value = netInterfaceListItem.NicIPv6Settings.Controller1IPv6Address;
                                nicIPv6SettingsElement.Add(controller1IPv6AddressElement);
                            }
                            
                            if (netInterfaceListItem.NicIPv6Settings.IPv6Address != null)
                            {
                                XElement iPv6AddressElement = new XElement(XName.Get("IPv6Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                iPv6AddressElement.Value = netInterfaceListItem.NicIPv6Settings.IPv6Address;
                                nicIPv6SettingsElement.Add(iPv6AddressElement);
                            }
                            
                            if (netInterfaceListItem.NicIPv6Settings.IPv6Gateway != null)
                            {
                                XElement iPv6GatewayElement = new XElement(XName.Get("IPv6Gateway", "http://windowscloudbackup.com/CiS/V2013_03"));
                                iPv6GatewayElement.Value = netInterfaceListItem.NicIPv6Settings.IPv6Gateway;
                                nicIPv6SettingsElement.Add(iPv6GatewayElement);
                            }
                            
                            XElement iPv6PrefixElement = new XElement(XName.Get("IPv6Prefix", "http://windowscloudbackup.com/CiS/V2013_03"));
                            iPv6PrefixElement.Value = netInterfaceListItem.NicIPv6Settings.IPv6Prefix;
                            nicIPv6SettingsElement.Add(iPv6PrefixElement);
                        }
                        
                        XElement speedElement = new XElement(XName.Get("Speed", "http://windowscloudbackup.com/CiS/V2013_03"));
                        speedElement.Value = netInterfaceListItem.Speed.ToString();
                        netInterfaceElement.Add(speedElement);
                    }
                    deviceDetailsV3Element.Add(netInterfaceListSequenceElement);
                }
                
                if (deviceDetails.Snapshot != null)
                {
                    XElement snapshotElement = new XElement(XName.Get("Snapshot", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(snapshotElement);
                    
                    XElement isSnapshotSecretSetElement = new XElement(XName.Get("IsSnapshotSecretSet", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isSnapshotSecretSetElement.Value = deviceDetails.Snapshot.IsSnapshotSecretSet.ToString().ToLower();
                    snapshotElement.Add(isSnapshotSecretSetElement);
                    
                    if (deviceDetails.Snapshot.SnapshotSecret != null)
                    {
                        XElement snapshotSecretElement = new XElement(XName.Get("SnapshotSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                        snapshotSecretElement.Value = deviceDetails.Snapshot.SnapshotSecret;
                        snapshotElement.Add(snapshotSecretElement);
                    }
                }
                
                if (deviceDetails.TimeServer != null)
                {
                    XElement timeServerElement = new XElement(XName.Get("TimeServer", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(timeServerElement);
                    
                    XElement primaryElement = new XElement(XName.Get("Primary", "http://windowscloudbackup.com/CiS/V2013_03"));
                    primaryElement.Value = deviceDetails.TimeServer.Primary;
                    timeServerElement.Add(primaryElement);
                    
                    if (deviceDetails.TimeServer.Secondary != null)
                    {
                        XElement secondarySequenceElement = new XElement(XName.Get("Secondary", "http://windowscloudbackup.com/CiS/V2013_03"));
                        foreach (string secondaryItem in deviceDetails.TimeServer.Secondary)
                        {
                            XElement secondaryItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                            secondaryItemElement.Value = secondaryItem;
                            secondarySequenceElement.Add(secondaryItemElement);
                        }
                        timeServerElement.Add(secondarySequenceElement);
                    }
                    
                    XElement timeZoneElement2 = new XElement(XName.Get("TimeZone", "http://windowscloudbackup.com/CiS/V2013_03"));
                    timeZoneElement2.Value = deviceDetails.TimeServer.TimeZone;
                    timeServerElement.Add(timeZoneElement2);
                }
                
                if (deviceDetails.WebProxy != null)
                {
                    XElement webProxyElement = new XElement(XName.Get("WebProxy", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(webProxyElement);
                    
                    XElement authenticationElement = new XElement(XName.Get("Authentication", "http://windowscloudbackup.com/CiS/V2013_03"));
                    authenticationElement.Value = deviceDetails.WebProxy.Authentication.ToString();
                    webProxyElement.Add(authenticationElement);
                    
                    XElement connectionURIElement = new XElement(XName.Get("ConnectionURI", "http://windowscloudbackup.com/CiS/V2013_03"));
                    connectionURIElement.Value = deviceDetails.WebProxy.ConnectionURI;
                    webProxyElement.Add(connectionURIElement);
                    
                    XElement usernameElement = new XElement(XName.Get("Username", "http://windowscloudbackup.com/CiS/V2013_03"));
                    usernameElement.Value = deviceDetails.WebProxy.Username;
                    webProxyElement.Add(usernameElement);
                }
                
                if (deviceDetails.SecretEncryptionCertThumbprint != null)
                {
                    XElement secretEncryptionCertThumbprintElement = new XElement(XName.Get("SecretEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                    secretEncryptionCertThumbprintElement.Value = deviceDetails.SecretEncryptionCertThumbprint;
                    deviceDetailsV3Element.Add(secretEncryptionCertThumbprintElement);
                }
                
                if (deviceDetails.RemoteMgmtSettingsInfo != null)
                {
                    XElement remoteMgmtSettingsInfoElement = new XElement(XName.Get("RemoteMgmtSettingsInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(remoteMgmtSettingsInfoElement);
                    
                    XElement remoteManagementModeElement = new XElement(XName.Get("RemoteManagementMode", "http://windowscloudbackup.com/CiS/V2013_03"));
                    remoteManagementModeElement.Value = deviceDetails.RemoteMgmtSettingsInfo.RemoteManagementMode.ToString();
                    remoteMgmtSettingsInfoElement.Add(remoteManagementModeElement);
                }
                
                if (deviceDetails.RemoteMinishellSecretInfo != null)
                {
                    XElement remoteMinishellSecretInfoElement = new XElement(XName.Get("RemoteMinishellSecretInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(remoteMinishellSecretInfoElement);
                    
                    XElement isMinishellSecretSetElement = new XElement(XName.Get("IsMinishellSecretSet", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isMinishellSecretSetElement.Value = deviceDetails.RemoteMinishellSecretInfo.IsMinishellSecretSet.ToString().ToLower();
                    remoteMinishellSecretInfoElement.Add(isMinishellSecretSetElement);
                    
                    if (deviceDetails.RemoteMinishellSecretInfo.MinishellSecret != null)
                    {
                        XElement minishellSecretElement = new XElement(XName.Get("MinishellSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                        minishellSecretElement.Value = deviceDetails.RemoteMinishellSecretInfo.MinishellSecret;
                        remoteMinishellSecretInfoElement.Add(minishellSecretElement);
                    }
                }
                
                XElement typeElement2 = new XElement(XName.Get("Type", "http://windowscloudbackup.com/CiS/V2013_03"));
                typeElement2.Value = deviceDetails.Type.ToString();
                deviceDetailsV3Element.Add(typeElement2);
                
                if (deviceDetails.VirtualApplianceProperties != null)
                {
                    XElement virtualAppliancePropertiesElement = new XElement(XName.Get("VirtualApplianceProperties", "http://windowscloudbackup.com/CiS/V2013_03"));
                    deviceDetailsV3Element.Add(virtualAppliancePropertiesElement);
                    
                    if (deviceDetails.VirtualApplianceProperties.DnsName != null)
                    {
                        XElement dnsNameElement = new XElement(XName.Get("DnsName", "http://windowscloudbackup.com/CiS/V2013_03"));
                        dnsNameElement.Value = deviceDetails.VirtualApplianceProperties.DnsName;
                        virtualAppliancePropertiesElement.Add(dnsNameElement);
                    }
                    
                    if (deviceDetails.VirtualApplianceProperties.EncodedChannelIntegrityKey != null)
                    {
                        XElement encodedChannelIntegrityKeyElement = new XElement(XName.Get("EncodedChannelIntegrityKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                        encodedChannelIntegrityKeyElement.Value = deviceDetails.VirtualApplianceProperties.EncodedChannelIntegrityKey;
                        virtualAppliancePropertiesElement.Add(encodedChannelIntegrityKeyElement);
                    }
                    
                    if (deviceDetails.VirtualApplianceProperties.EncodedServiceEncryptionKey != null)
                    {
                        XElement encodedServiceEncryptionKeyElement = new XElement(XName.Get("EncodedServiceEncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                        encodedServiceEncryptionKeyElement.Value = deviceDetails.VirtualApplianceProperties.EncodedServiceEncryptionKey;
                        virtualAppliancePropertiesElement.Add(encodedServiceEncryptionKeyElement);
                    }
                    
                    if (deviceDetails.VirtualApplianceProperties.InternalIpAddress != null)
                    {
                        XElement internalIpAddressElement = new XElement(XName.Get("InternalIpAddress", "http://windowscloudbackup.com/CiS/V2013_03"));
                        internalIpAddressElement.Value = deviceDetails.VirtualApplianceProperties.InternalIpAddress;
                        virtualAppliancePropertiesElement.Add(internalIpAddressElement);
                    }
                    
                    XElement isServiceEncryptionKeySetElement = new XElement(XName.Get("IsServiceEncryptionKeySet", "http://windowscloudbackup.com/CiS/V2013_03"));
                    isServiceEncryptionKeySetElement.Value = deviceDetails.VirtualApplianceProperties.IsServiceEncryptionKeySet.ToString().ToLower();
                    virtualAppliancePropertiesElement.Add(isServiceEncryptionKeySetElement);
                    
                    if (deviceDetails.VirtualApplianceProperties.PublicIpAddress != null)
                    {
                        XElement publicIpAddressElement = new XElement(XName.Get("PublicIpAddress", "http://windowscloudbackup.com/CiS/V2013_03"));
                        publicIpAddressElement.Value = deviceDetails.VirtualApplianceProperties.PublicIpAddress;
                        virtualAppliancePropertiesElement.Add(publicIpAddressElement);
                    }
                    
                    if (deviceDetails.VirtualApplianceProperties.Region != null)
                    {
                        XElement regionElement = new XElement(XName.Get("Region", "http://windowscloudbackup.com/CiS/V2013_03"));
                        regionElement.Value = deviceDetails.VirtualApplianceProperties.Region;
                        virtualAppliancePropertiesElement.Add(regionElement);
                    }
                    
                    if (deviceDetails.VirtualApplianceProperties.SubnetName != null)
                    {
                        XElement subnetNameElement = new XElement(XName.Get("SubnetName", "http://windowscloudbackup.com/CiS/V2013_03"));
                        subnetNameElement.Value = deviceDetails.VirtualApplianceProperties.SubnetName;
                        virtualAppliancePropertiesElement.Add(subnetNameElement);
                    }
                    
                    if (deviceDetails.VirtualApplianceProperties.VirtualNetworkName != null)
                    {
                        XElement virtualNetworkNameElement = new XElement(XName.Get("VirtualNetworkName", "http://windowscloudbackup.com/CiS/V2013_03"));
                        virtualNetworkNameElement.Value = deviceDetails.VirtualApplianceProperties.VirtualNetworkName;
                        virtualAppliancePropertiesElement.Add(virtualNetworkNameElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GuidTaskResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GuidTaskResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement guidElement = responseDoc.Element(XName.Get("guid", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (guidElement != null)
                        {
                            string guidInstance = guidElement.Value;
                            result.TaskId = guidInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='deviceId'>
        /// Required. The device id for which the call will be made.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for device details.
        /// </returns>
        public async Task<DeviceDetailsResponse> GetAsync(string deviceId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.3.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeviceDetailsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DeviceDetailsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement deviceDetailsElement = responseDoc.Element(XName.Get("DeviceDetails", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (deviceDetailsElement != null)
                        {
                            DeviceDetails deviceDetailsInstance = new DeviceDetails();
                            result.DeviceDetails = deviceDetailsInstance;
                            
                            XElement instanceIdElement = deviceDetailsElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (instanceIdElement != null)
                            {
                                string instanceIdInstance = instanceIdElement.Value;
                                deviceDetailsInstance.InstanceId = instanceIdInstance;
                            }
                            
                            XElement nameElement = deviceDetailsElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                deviceDetailsInstance.Name = nameInstance;
                            }
                            
                            XElement operationInProgressElement = deviceDetailsElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (operationInProgressElement != null)
                            {
                                OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                deviceDetailsInstance.OperationInProgress = operationInProgressInstance;
                            }
                            
                            XElement alertNotificationElement = deviceDetailsElement.Element(XName.Get("AlertNotification", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (alertNotificationElement != null)
                            {
                                AlertNotificationSettings alertNotificationInstance = new AlertNotificationSettings();
                                deviceDetailsInstance.AlertNotification = alertNotificationInstance;
                                
                                XElement alertNotifcationCultureElement = alertNotificationElement.Element(XName.Get("AlertNotifcationCulture", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (alertNotifcationCultureElement != null)
                                {
                                    string alertNotifcationCultureInstance = alertNotifcationCultureElement.Value;
                                    alertNotificationInstance.AlertNotifcationCulture = alertNotifcationCultureInstance;
                                }
                                
                                XElement alertNotifcationEnabledElement = alertNotificationElement.Element(XName.Get("AlertNotifcationEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (alertNotifcationEnabledElement != null)
                                {
                                    bool alertNotifcationEnabledInstance = bool.Parse(alertNotifcationEnabledElement.Value);
                                    alertNotificationInstance.AlertNotifcationEnabled = alertNotifcationEnabledInstance;
                                }
                                
                                XElement alertNotificationEmailListSequenceElement = alertNotificationElement.Element(XName.Get("AlertNotificationEmailList", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (alertNotificationEmailListSequenceElement != null)
                                {
                                    foreach (XElement alertNotificationEmailListElement in alertNotificationEmailListSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        alertNotificationInstance.AlertNotificationEmailList.Add(alertNotificationEmailListElement.Value);
                                    }
                                }
                                
                                XElement alertNotificationEnabledForAdminCoAdminsElement = alertNotificationElement.Element(XName.Get("AlertNotificationEnabledForAdminCoAdmins", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (alertNotificationEnabledForAdminCoAdminsElement != null)
                                {
                                    bool alertNotificationEnabledForAdminCoAdminsInstance = bool.Parse(alertNotificationEnabledForAdminCoAdminsElement.Value);
                                    alertNotificationInstance.AlertNotificationEnabledForAdminCoAdmins = alertNotificationEnabledForAdminCoAdminsInstance;
                                }
                            }
                            
                            XElement chapElement = deviceDetailsElement.Element(XName.Get("Chap", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (chapElement != null)
                            {
                                ChapSettings chapInstance = new ChapSettings();
                                deviceDetailsInstance.Chap = chapInstance;
                                
                                XElement initiatorSecretElement = chapElement.Element(XName.Get("InitiatorSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (initiatorSecretElement != null)
                                {
                                    string initiatorSecretInstance = initiatorSecretElement.Value;
                                    chapInstance.InitiatorSecret = initiatorSecretInstance;
                                }
                                
                                XElement initiatorUserElement = chapElement.Element(XName.Get("InitiatorUser", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (initiatorUserElement != null)
                                {
                                    string initiatorUserInstance = initiatorUserElement.Value;
                                    chapInstance.InitiatorUser = initiatorUserInstance;
                                }
                                
                                XElement targetSecretElement = chapElement.Element(XName.Get("TargetSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (targetSecretElement != null)
                                {
                                    string targetSecretInstance = targetSecretElement.Value;
                                    chapInstance.TargetSecret = targetSecretInstance;
                                }
                                
                                XElement targetUserElement = chapElement.Element(XName.Get("TargetUser", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (targetUserElement != null)
                                {
                                    string targetUserInstance = targetUserElement.Value;
                                    chapInstance.TargetUser = targetUserInstance;
                                }
                            }
                            
                            XElement devicePropertiesElement = deviceDetailsElement.Element(XName.Get("DeviceProperties", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (devicePropertiesElement != null)
                            {
                                DeviceInfo devicePropertiesInstance = new DeviceInfo();
                                deviceDetailsInstance.DeviceProperties = devicePropertiesInstance;
                                
                                XElement aCRCountElement = devicePropertiesElement.Element(XName.Get("ACRCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (aCRCountElement != null)
                                {
                                    int aCRCountInstance = int.Parse(aCRCountElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.ACRCount = aCRCountInstance;
                                }
                                
                                XElement activationTimeElement = devicePropertiesElement.Element(XName.Get("ActivationTime", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (activationTimeElement != null)
                                {
                                    string activationTimeInstance = activationTimeElement.Value;
                                    devicePropertiesInstance.ActivationTime = activationTimeInstance;
                                }
                                
                                XElement activeControllerElement = devicePropertiesElement.Element(XName.Get("ActiveController", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (activeControllerElement != null)
                                {
                                    ControllerId activeControllerInstance = ((ControllerId)Enum.Parse(typeof(ControllerId), activeControllerElement.Value, true));
                                    devicePropertiesInstance.ActiveController = activeControllerInstance;
                                }
                                
                                XElement availableStorageInBytesElement = devicePropertiesElement.Element(XName.Get("AvailableStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (availableStorageInBytesElement != null)
                                {
                                    long availableStorageInBytesInstance = long.Parse(availableStorageInBytesElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.AvailableStorageInBytes = availableStorageInBytesInstance;
                                }
                                
                                XElement cloudCredCountElement = devicePropertiesElement.Element(XName.Get("CloudCredCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (cloudCredCountElement != null)
                                {
                                    int cloudCredCountInstance = int.Parse(cloudCredCountElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.CloudCredCount = cloudCredCountInstance;
                                }
                                
                                XElement cultureElement = devicePropertiesElement.Element(XName.Get("Culture", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (cultureElement != null)
                                {
                                    string cultureInstance = cultureElement.Value;
                                    devicePropertiesInstance.Culture = cultureInstance;
                                }
                                
                                XElement currentControllerElement = devicePropertiesElement.Element(XName.Get("CurrentController", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (currentControllerElement != null)
                                {
                                    ControllerId currentControllerInstance = ((ControllerId)Enum.Parse(typeof(ControllerId), currentControllerElement.Value, true));
                                    devicePropertiesInstance.CurrentController = currentControllerInstance;
                                }
                                
                                XElement dataContainerCountElement = devicePropertiesElement.Element(XName.Get("DataContainerCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (dataContainerCountElement != null)
                                {
                                    int dataContainerCountInstance = int.Parse(dataContainerCountElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.DataContainerCount = dataContainerCountInstance;
                                }
                                
                                XElement descriptionElement = devicePropertiesElement.Element(XName.Get("Description", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    devicePropertiesInstance.Description = descriptionInstance;
                                }
                                
                                XElement deviceIdElement = devicePropertiesElement.Element(XName.Get("DeviceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (deviceIdElement != null)
                                {
                                    string deviceIdInstance = deviceIdElement.Value;
                                    devicePropertiesInstance.DeviceId = deviceIdInstance;
                                }
                                
                                XElement deviceSoftwareVersionElement = devicePropertiesElement.Element(XName.Get("DeviceSoftwareVersion", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (deviceSoftwareVersionElement != null)
                                {
                                    string deviceSoftwareVersionInstance = deviceSoftwareVersionElement.Value;
                                    devicePropertiesInstance.DeviceSoftwareVersion = deviceSoftwareVersionInstance;
                                }
                                
                                XElement friendlyNameElement = devicePropertiesElement.Element(XName.Get("FriendlyName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (friendlyNameElement != null)
                                {
                                    string friendlyNameInstance = friendlyNameElement.Value;
                                    devicePropertiesInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                XElement isConfigUpdatedElement = devicePropertiesElement.Element(XName.Get("IsConfigUpdated", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isConfigUpdatedElement != null)
                                {
                                    bool isConfigUpdatedInstance = bool.Parse(isConfigUpdatedElement.Value);
                                    devicePropertiesInstance.IsConfigUpdated = isConfigUpdatedInstance;
                                }
                                
                                XElement isVirtualApplianceInterimEntryElement = devicePropertiesElement.Element(XName.Get("IsVirtualApplianceInterimEntry", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isVirtualApplianceInterimEntryElement != null)
                                {
                                    bool isVirtualApplianceInterimEntryInstance = bool.Parse(isVirtualApplianceInterimEntryElement.Value);
                                    devicePropertiesInstance.IsVirtualApplianceInterimEntry = isVirtualApplianceInterimEntryInstance;
                                }
                                
                                XElement locationElement = devicePropertiesElement.Element(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (locationElement != null)
                                {
                                    string locationInstance = locationElement.Value;
                                    devicePropertiesInstance.Location = locationInstance;
                                }
                                
                                XElement modelDescriptionElement = devicePropertiesElement.Element(XName.Get("ModelDescription", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (modelDescriptionElement != null)
                                {
                                    string modelDescriptionInstance = modelDescriptionElement.Value;
                                    devicePropertiesInstance.ModelDescription = modelDescriptionInstance;
                                }
                                
                                XElement nNicCardsElement = devicePropertiesElement.Element(XName.Get("NNicCards", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (nNicCardsElement != null)
                                {
                                    int nNicCardsInstance = int.Parse(nNicCardsElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.NNicCards = nNicCardsInstance;
                                }
                                
                                XElement provisionedStorageInBytesElement = devicePropertiesElement.Element(XName.Get("ProvisionedStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (provisionedStorageInBytesElement != null)
                                {
                                    long provisionedStorageInBytesInstance = long.Parse(provisionedStorageInBytesElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.ProvisionedStorageInBytes = provisionedStorageInBytesInstance;
                                }
                                
                                XElement serialNumberElement = devicePropertiesElement.Element(XName.Get("SerialNumber", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (serialNumberElement != null)
                                {
                                    string serialNumberInstance = serialNumberElement.Value;
                                    devicePropertiesInstance.SerialNumber = serialNumberInstance;
                                }
                                
                                XElement statusElement = devicePropertiesElement.Element(XName.Get("Status", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (statusElement != null)
                                {
                                    DeviceStatus statusInstance = ((DeviceStatus)Enum.Parse(typeof(DeviceStatus), statusElement.Value, true));
                                    devicePropertiesInstance.Status = statusInstance;
                                }
                                
                                XElement targetIQNElement = devicePropertiesElement.Element(XName.Get("TargetIQN", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (targetIQNElement != null)
                                {
                                    string targetIQNInstance = targetIQNElement.Value;
                                    devicePropertiesInstance.TargetIQN = targetIQNInstance;
                                }
                                
                                XElement timeZoneElement = devicePropertiesElement.Element(XName.Get("TimeZone", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (timeZoneElement != null)
                                {
                                    string timeZoneInstance = timeZoneElement.Value;
                                    devicePropertiesInstance.TimeZone = timeZoneInstance;
                                }
                                
                                XElement totalStorageInBytesElement = devicePropertiesElement.Element(XName.Get("TotalStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (totalStorageInBytesElement != null)
                                {
                                    long totalStorageInBytesInstance = long.Parse(totalStorageInBytesElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.TotalStorageInBytes = totalStorageInBytesInstance;
                                }
                                
                                XElement typeElement = devicePropertiesElement.Element(XName.Get("Type", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (typeElement != null)
                                {
                                    DeviceType typeInstance = ((DeviceType)Enum.Parse(typeof(DeviceType), typeElement.Value, true));
                                    devicePropertiesInstance.Type = typeInstance;
                                }
                                
                                XElement usingStorageInBytesElement = devicePropertiesElement.Element(XName.Get("UsingStorageInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (usingStorageInBytesElement != null)
                                {
                                    long usingStorageInBytesInstance = long.Parse(usingStorageInBytesElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.UsingStorageInBytes = usingStorageInBytesInstance;
                                }
                                
                                XElement volumeCountElement = devicePropertiesElement.Element(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (volumeCountElement != null)
                                {
                                    int volumeCountInstance = int.Parse(volumeCountElement.Value, CultureInfo.InvariantCulture);
                                    devicePropertiesInstance.VolumeCount = volumeCountInstance;
                                }
                            }
                            
                            XElement dnsServerElement = deviceDetailsElement.Element(XName.Get("DnsServer", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (dnsServerElement != null)
                            {
                                DnsServerSettings dnsServerInstance = new DnsServerSettings();
                                deviceDetailsInstance.DnsServer = dnsServerInstance;
                                
                                XElement primaryIPv4Element = dnsServerElement.Element(XName.Get("PrimaryIPv4", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (primaryIPv4Element != null)
                                {
                                    string primaryIPv4Instance = primaryIPv4Element.Value;
                                    dnsServerInstance.PrimaryIPv4 = primaryIPv4Instance;
                                }
                                
                                XElement primaryIPv6Element = dnsServerElement.Element(XName.Get("PrimaryIPv6", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (primaryIPv6Element != null)
                                {
                                    string primaryIPv6Instance = primaryIPv6Element.Value;
                                    dnsServerInstance.PrimaryIPv6 = primaryIPv6Instance;
                                }
                                
                                XElement secondaryIPv4SequenceElement = dnsServerElement.Element(XName.Get("SecondaryIPv4", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (secondaryIPv4SequenceElement != null)
                                {
                                    foreach (XElement secondaryIPv4Element in secondaryIPv4SequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        dnsServerInstance.SecondaryIPv4.Add(secondaryIPv4Element.Value);
                                    }
                                }
                                
                                XElement secondaryIPv6SequenceElement = dnsServerElement.Element(XName.Get("SecondaryIPv6", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (secondaryIPv6SequenceElement != null)
                                {
                                    foreach (XElement secondaryIPv6Element in secondaryIPv6SequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        dnsServerInstance.SecondaryIPv6.Add(secondaryIPv6Element.Value);
                                    }
                                }
                            }
                            
                            XElement netInterfaceListSequenceElement = deviceDetailsElement.Element(XName.Get("NetInterfaceList", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (netInterfaceListSequenceElement != null)
                            {
                                foreach (XElement netInterfaceListElement in netInterfaceListSequenceElement.Elements(XName.Get("NetInterface", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    NetInterface netInterfaceInstance = new NetInterface();
                                    deviceDetailsInstance.NetInterfaceList.Add(netInterfaceInstance);
                                    
                                    XElement interfaceIdElement = netInterfaceListElement.Element(XName.Get("InterfaceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (interfaceIdElement != null)
                                    {
                                        NetInterfaceId interfaceIdInstance = ((NetInterfaceId)Enum.Parse(typeof(NetInterfaceId), interfaceIdElement.Value, true));
                                        netInterfaceInstance.InterfaceId = interfaceIdInstance;
                                    }
                                    
                                    XElement isCloudEnabledElement = netInterfaceListElement.Element(XName.Get("IsCloudEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isCloudEnabledElement != null)
                                    {
                                        bool isCloudEnabledInstance = bool.Parse(isCloudEnabledElement.Value);
                                        netInterfaceInstance.IsCloudEnabled = isCloudEnabledInstance;
                                    }
                                    
                                    XElement isDefaultElement = netInterfaceListElement.Element(XName.Get("IsDefault", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isDefaultElement != null)
                                    {
                                        bool isDefaultInstance = bool.Parse(isDefaultElement.Value);
                                        netInterfaceInstance.IsDefault = isDefaultInstance;
                                    }
                                    
                                    XElement isEnabledElement = netInterfaceListElement.Element(XName.Get("IsEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isEnabledElement != null)
                                    {
                                        bool isEnabledInstance = bool.Parse(isEnabledElement.Value);
                                        netInterfaceInstance.IsEnabled = isEnabledInstance;
                                    }
                                    
                                    XElement isIScsiEnabledElement = netInterfaceListElement.Element(XName.Get("IsIScsiEnabled", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isIScsiEnabledElement != null)
                                    {
                                        bool isIScsiEnabledInstance = bool.Parse(isIScsiEnabledElement.Value);
                                        netInterfaceInstance.IsIScsiEnabled = isIScsiEnabledInstance;
                                    }
                                    
                                    XElement mediaConnectStateElement = netInterfaceListElement.Element(XName.Get("MediaConnectState", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (mediaConnectStateElement != null)
                                    {
                                        int mediaConnectStateInstance = int.Parse(mediaConnectStateElement.Value, CultureInfo.InvariantCulture);
                                        netInterfaceInstance.MediaConnectState = mediaConnectStateInstance;
                                    }
                                    
                                    XElement modeElement = netInterfaceListElement.Element(XName.Get("Mode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (modeElement != null)
                                    {
                                        NetworkMode modeInstance = ((NetworkMode)Enum.Parse(typeof(NetworkMode), modeElement.Value, true));
                                        netInterfaceInstance.Mode = modeInstance;
                                    }
                                    
                                    XElement nicIPv4SettingsElement = netInterfaceListElement.Element(XName.Get("NicIPv4Settings", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nicIPv4SettingsElement != null)
                                    {
                                        NicIPv4 nicIPv4SettingsInstance = new NicIPv4();
                                        netInterfaceInstance.NicIPv4Settings = nicIPv4SettingsInstance;
                                        
                                        XElement controller0IPv4AddressElement = nicIPv4SettingsElement.Element(XName.Get("Controller0IPv4Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (controller0IPv4AddressElement != null)
                                        {
                                            string controller0IPv4AddressInstance = controller0IPv4AddressElement.Value;
                                            nicIPv4SettingsInstance.Controller0IPv4Address = controller0IPv4AddressInstance;
                                        }
                                        
                                        XElement controller1IPv4AddressElement = nicIPv4SettingsElement.Element(XName.Get("Controller1IPv4Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (controller1IPv4AddressElement != null)
                                        {
                                            string controller1IPv4AddressInstance = controller1IPv4AddressElement.Value;
                                            nicIPv4SettingsInstance.Controller1IPv4Address = controller1IPv4AddressInstance;
                                        }
                                        
                                        XElement iPv4AddressElement = nicIPv4SettingsElement.Element(XName.Get("IPv4Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv4AddressElement != null)
                                        {
                                            string iPv4AddressInstance = iPv4AddressElement.Value;
                                            nicIPv4SettingsInstance.IPv4Address = iPv4AddressInstance;
                                        }
                                        
                                        XElement iPv4GatewayElement = nicIPv4SettingsElement.Element(XName.Get("IPv4Gateway", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv4GatewayElement != null)
                                        {
                                            string iPv4GatewayInstance = iPv4GatewayElement.Value;
                                            nicIPv4SettingsInstance.IPv4Gateway = iPv4GatewayInstance;
                                        }
                                        
                                        XElement iPv4NetmaskElement = nicIPv4SettingsElement.Element(XName.Get("IPv4Netmask", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv4NetmaskElement != null)
                                        {
                                            string iPv4NetmaskInstance = iPv4NetmaskElement.Value;
                                            nicIPv4SettingsInstance.IPv4Netmask = iPv4NetmaskInstance;
                                        }
                                    }
                                    
                                    XElement nicIPv6SettingsElement = netInterfaceListElement.Element(XName.Get("NicIPv6Settings", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (nicIPv6SettingsElement != null)
                                    {
                                        NicIPv6 nicIPv6SettingsInstance = new NicIPv6();
                                        netInterfaceInstance.NicIPv6Settings = nicIPv6SettingsInstance;
                                        
                                        XElement controller0IPv6AddressElement = nicIPv6SettingsElement.Element(XName.Get("Controller0IPv6Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (controller0IPv6AddressElement != null)
                                        {
                                            string controller0IPv6AddressInstance = controller0IPv6AddressElement.Value;
                                            nicIPv6SettingsInstance.Controller0IPv6Address = controller0IPv6AddressInstance;
                                        }
                                        
                                        XElement controller1IPv6AddressElement = nicIPv6SettingsElement.Element(XName.Get("Controller1IPv6Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (controller1IPv6AddressElement != null)
                                        {
                                            string controller1IPv6AddressInstance = controller1IPv6AddressElement.Value;
                                            nicIPv6SettingsInstance.Controller1IPv6Address = controller1IPv6AddressInstance;
                                        }
                                        
                                        XElement iPv6AddressElement = nicIPv6SettingsElement.Element(XName.Get("IPv6Address", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv6AddressElement != null)
                                        {
                                            string iPv6AddressInstance = iPv6AddressElement.Value;
                                            nicIPv6SettingsInstance.IPv6Address = iPv6AddressInstance;
                                        }
                                        
                                        XElement iPv6GatewayElement = nicIPv6SettingsElement.Element(XName.Get("IPv6Gateway", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv6GatewayElement != null)
                                        {
                                            string iPv6GatewayInstance = iPv6GatewayElement.Value;
                                            nicIPv6SettingsInstance.IPv6Gateway = iPv6GatewayInstance;
                                        }
                                        
                                        XElement iPv6PrefixElement = nicIPv6SettingsElement.Element(XName.Get("IPv6Prefix", "http://windowscloudbackup.com/CiS/V2013_03"));
                                        if (iPv6PrefixElement != null)
                                        {
                                            string iPv6PrefixInstance = iPv6PrefixElement.Value;
                                            nicIPv6SettingsInstance.IPv6Prefix = iPv6PrefixInstance;
                                        }
                                    }
                                    
                                    XElement speedElement = netInterfaceListElement.Element(XName.Get("Speed", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (speedElement != null)
                                    {
                                        long speedInstance = long.Parse(speedElement.Value, CultureInfo.InvariantCulture);
                                        netInterfaceInstance.Speed = speedInstance;
                                    }
                                }
                            }
                            
                            XElement snapshotElement = deviceDetailsElement.Element(XName.Get("Snapshot", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (snapshotElement != null)
                            {
                                SnapshotSettings snapshotInstance = new SnapshotSettings();
                                deviceDetailsInstance.Snapshot = snapshotInstance;
                                
                                XElement isSnapshotSecretSetElement = snapshotElement.Element(XName.Get("IsSnapshotSecretSet", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isSnapshotSecretSetElement != null)
                                {
                                    bool isSnapshotSecretSetInstance = bool.Parse(isSnapshotSecretSetElement.Value);
                                    snapshotInstance.IsSnapshotSecretSet = isSnapshotSecretSetInstance;
                                }
                                
                                XElement snapshotSecretElement = snapshotElement.Element(XName.Get("SnapshotSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (snapshotSecretElement != null)
                                {
                                    string snapshotSecretInstance = snapshotSecretElement.Value;
                                    snapshotInstance.SnapshotSecret = snapshotSecretInstance;
                                }
                            }
                            
                            XElement timeServerElement = deviceDetailsElement.Element(XName.Get("TimeServer", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (timeServerElement != null)
                            {
                                TimeSettings timeServerInstance = new TimeSettings();
                                deviceDetailsInstance.TimeServer = timeServerInstance;
                                
                                XElement primaryElement = timeServerElement.Element(XName.Get("Primary", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (primaryElement != null)
                                {
                                    string primaryInstance = primaryElement.Value;
                                    timeServerInstance.Primary = primaryInstance;
                                }
                                
                                XElement secondarySequenceElement = timeServerElement.Element(XName.Get("Secondary", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (secondarySequenceElement != null)
                                {
                                    foreach (XElement secondaryElement in secondarySequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        timeServerInstance.Secondary.Add(secondaryElement.Value);
                                    }
                                }
                                
                                XElement timeZoneElement2 = timeServerElement.Element(XName.Get("TimeZone", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (timeZoneElement2 != null)
                                {
                                    string timeZoneInstance2 = timeZoneElement2.Value;
                                    timeServerInstance.TimeZone = timeZoneInstance2;
                                }
                            }
                            
                            XElement webProxyElement = deviceDetailsElement.Element(XName.Get("WebProxy", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (webProxyElement != null)
                            {
                                WebProxySettings webProxyInstance = new WebProxySettings();
                                deviceDetailsInstance.WebProxy = webProxyInstance;
                                
                                XElement authenticationElement = webProxyElement.Element(XName.Get("Authentication", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (authenticationElement != null)
                                {
                                    AuthenticationType authenticationInstance = ((AuthenticationType)Enum.Parse(typeof(AuthenticationType), authenticationElement.Value, true));
                                    webProxyInstance.Authentication = authenticationInstance;
                                }
                                
                                XElement connectionURIElement = webProxyElement.Element(XName.Get("ConnectionURI", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (connectionURIElement != null)
                                {
                                    string connectionURIInstance = connectionURIElement.Value;
                                    webProxyInstance.ConnectionURI = connectionURIInstance;
                                }
                                
                                XElement usernameElement = webProxyElement.Element(XName.Get("Username", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (usernameElement != null)
                                {
                                    string usernameInstance = usernameElement.Value;
                                    webProxyInstance.Username = usernameInstance;
                                }
                            }
                            
                            XElement secretEncryptionCertThumbprintElement = deviceDetailsElement.Element(XName.Get("SecretEncryptionCertThumbprint", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (secretEncryptionCertThumbprintElement != null)
                            {
                                string secretEncryptionCertThumbprintInstance = secretEncryptionCertThumbprintElement.Value;
                                deviceDetailsInstance.SecretEncryptionCertThumbprint = secretEncryptionCertThumbprintInstance;
                            }
                            
                            XElement remoteMgmtSettingsInfoElement = deviceDetailsElement.Element(XName.Get("RemoteMgmtSettingsInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (remoteMgmtSettingsInfoElement != null)
                            {
                                RemoteManagementSettings remoteMgmtSettingsInfoInstance = new RemoteManagementSettings();
                                deviceDetailsInstance.RemoteMgmtSettingsInfo = remoteMgmtSettingsInfoInstance;
                                
                                XElement remoteManagementModeElement = remoteMgmtSettingsInfoElement.Element(XName.Get("RemoteManagementMode", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (remoteManagementModeElement != null)
                                {
                                    RemoteManagementModeConfiguration remoteManagementModeInstance = ((RemoteManagementModeConfiguration)Enum.Parse(typeof(RemoteManagementModeConfiguration), remoteManagementModeElement.Value, true));
                                    remoteMgmtSettingsInfoInstance.RemoteManagementMode = remoteManagementModeInstance;
                                }
                            }
                            
                            XElement remoteMinishellSecretInfoElement = deviceDetailsElement.Element(XName.Get("RemoteMinishellSecretInfo", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (remoteMinishellSecretInfoElement != null)
                            {
                                RemoteMinishellSettings remoteMinishellSecretInfoInstance = new RemoteMinishellSettings();
                                deviceDetailsInstance.RemoteMinishellSecretInfo = remoteMinishellSecretInfoInstance;
                                
                                XElement isMinishellSecretSetElement = remoteMinishellSecretInfoElement.Element(XName.Get("IsMinishellSecretSet", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isMinishellSecretSetElement != null)
                                {
                                    bool isMinishellSecretSetInstance = bool.Parse(isMinishellSecretSetElement.Value);
                                    remoteMinishellSecretInfoInstance.IsMinishellSecretSet = isMinishellSecretSetInstance;
                                }
                                
                                XElement minishellSecretElement = remoteMinishellSecretInfoElement.Element(XName.Get("MinishellSecret", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (minishellSecretElement != null)
                                {
                                    string minishellSecretInstance = minishellSecretElement.Value;
                                    remoteMinishellSecretInfoInstance.MinishellSecret = minishellSecretInstance;
                                }
                            }
                            
                            XElement typeElement2 = deviceDetailsElement.Element(XName.Get("Type", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (typeElement2 != null)
                            {
                                DeviceType typeInstance2 = ((DeviceType)Enum.Parse(typeof(DeviceType), typeElement2.Value, true));
                                deviceDetailsInstance.Type = typeInstance2;
                            }
                            
                            XElement virtualAppliancePropertiesElement = deviceDetailsElement.Element(XName.Get("VirtualApplianceProperties", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (virtualAppliancePropertiesElement != null)
                            {
                                VirtualApplianceInfo virtualAppliancePropertiesInstance = new VirtualApplianceInfo();
                                deviceDetailsInstance.VirtualApplianceProperties = virtualAppliancePropertiesInstance;
                                
                                XElement dnsNameElement = virtualAppliancePropertiesElement.Element(XName.Get("DnsName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (dnsNameElement != null)
                                {
                                    string dnsNameInstance = dnsNameElement.Value;
                                    virtualAppliancePropertiesInstance.DnsName = dnsNameInstance;
                                }
                                
                                XElement encodedChannelIntegrityKeyElement = virtualAppliancePropertiesElement.Element(XName.Get("EncodedChannelIntegrityKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (encodedChannelIntegrityKeyElement != null)
                                {
                                    string encodedChannelIntegrityKeyInstance = encodedChannelIntegrityKeyElement.Value;
                                    virtualAppliancePropertiesInstance.EncodedChannelIntegrityKey = encodedChannelIntegrityKeyInstance;
                                }
                                
                                XElement encodedServiceEncryptionKeyElement = virtualAppliancePropertiesElement.Element(XName.Get("EncodedServiceEncryptionKey", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (encodedServiceEncryptionKeyElement != null)
                                {
                                    string encodedServiceEncryptionKeyInstance = encodedServiceEncryptionKeyElement.Value;
                                    virtualAppliancePropertiesInstance.EncodedServiceEncryptionKey = encodedServiceEncryptionKeyInstance;
                                }
                                
                                XElement internalIpAddressElement = virtualAppliancePropertiesElement.Element(XName.Get("InternalIpAddress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (internalIpAddressElement != null)
                                {
                                    string internalIpAddressInstance = internalIpAddressElement.Value;
                                    virtualAppliancePropertiesInstance.InternalIpAddress = internalIpAddressInstance;
                                }
                                
                                XElement isServiceEncryptionKeySetElement = virtualAppliancePropertiesElement.Element(XName.Get("IsServiceEncryptionKeySet", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (isServiceEncryptionKeySetElement != null)
                                {
                                    bool isServiceEncryptionKeySetInstance = bool.Parse(isServiceEncryptionKeySetElement.Value);
                                    virtualAppliancePropertiesInstance.IsServiceEncryptionKeySet = isServiceEncryptionKeySetInstance;
                                }
                                
                                XElement publicIpAddressElement = virtualAppliancePropertiesElement.Element(XName.Get("PublicIpAddress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (publicIpAddressElement != null)
                                {
                                    string publicIpAddressInstance = publicIpAddressElement.Value;
                                    virtualAppliancePropertiesInstance.PublicIpAddress = publicIpAddressInstance;
                                }
                                
                                XElement regionElement = virtualAppliancePropertiesElement.Element(XName.Get("Region", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (regionElement != null)
                                {
                                    string regionInstance = regionElement.Value;
                                    virtualAppliancePropertiesInstance.Region = regionInstance;
                                }
                                
                                XElement subnetNameElement = virtualAppliancePropertiesElement.Element(XName.Get("SubnetName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (subnetNameElement != null)
                                {
                                    string subnetNameInstance = subnetNameElement.Value;
                                    virtualAppliancePropertiesInstance.SubnetName = subnetNameInstance;
                                }
                                
                                XElement virtualNetworkNameElement = virtualAppliancePropertiesElement.Element(XName.Get("VirtualNetworkName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                if (virtualNetworkNameElement != null)
                                {
                                    string virtualNetworkNameInstance = virtualNetworkNameElement.Value;
                                    virtualAppliancePropertiesInstance.VirtualNetworkName = virtualNetworkNameInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update device details as specified by deviceDetails
        /// </summary>
        /// <param name='deviceDetails'>
        /// Required. Updated DeviceDetails. Contains the corresponding DeviceId
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Info about the async task
        /// </returns>
        public async Task<TaskStatusInfo> UpdateDeviceDetailsAsync(DeviceDetailsRequest deviceDetails, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            StorSimpleManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceDetails", deviceDetails);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateDeviceDetailsAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            GuidTaskResponse response = await client.DeviceDetails.BeginUpdateDeviceDetailsAsync(deviceDetails, customRequestHeaders, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            TaskStatusInfo result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.TaskId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.AsyncTaskAggregatedResult != AsyncTaskAggregatedResult.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
    }
}
