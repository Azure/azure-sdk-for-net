// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// All Operations related to Device Failover
    /// </summary>
    internal partial class DeviceFailoverOperations : IServiceOperations<StorSimpleManagementClient>, IDeviceFailoverOperations
    {
        /// <summary>
        /// Initializes a new instance of the DeviceFailoverOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DeviceFailoverOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='deviceId'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response model for DataContainerGroups Get call
        /// </returns>
        public async Task<DataContainerGroupsGetResponse> ListDCGroupsAsync(string deviceId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListDCGroupsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            if (deviceId != null)
            {
                url = url + Uri.EscapeDataString(deviceId);
            }
            url = url + "/failoverdatacontainers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataContainerGroupsGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataContainerGroupsGetResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement dataContainerGroupResponseElement = responseDoc.Element(XName.Get("DataContainerGroupResponse", "http://windowscloudbackup.com/CiS/V2013_03"));
                        if (dataContainerGroupResponseElement != null)
                        {
                            DataContainerGroupResponse dataContainerGroupResponseInstance = new DataContainerGroupResponse();
                            result.DataContainerGroupResponse = dataContainerGroupResponseInstance;
                            
                            XElement dCGroupsSequenceElement = dataContainerGroupResponseElement.Element(XName.Get("DCGroups", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (dCGroupsSequenceElement != null)
                            {
                                foreach (XElement dCGroupsElement in dCGroupsSequenceElement.Elements(XName.Get("DataContainerGroup", "http://windowscloudbackup.com/CiS/V2013_03")))
                                {
                                    DataContainerGroup dataContainerGroupInstance = new DataContainerGroup();
                                    dataContainerGroupResponseInstance.DCGroups.Add(dataContainerGroupInstance);
                                    
                                    XElement dCGroupSequenceElement = dCGroupsElement.Element(XName.Get("DCGroup", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (dCGroupSequenceElement != null)
                                    {
                                        foreach (XElement dCGroupElement in dCGroupSequenceElement.Elements(XName.Get("DRDataContainer", "http://windowscloudbackup.com/CiS/V2013_03")))
                                        {
                                            DRDataContainer dRDataContainerInstance = new DRDataContainer();
                                            dataContainerGroupInstance.DCGroup.Add(dRDataContainerInstance);
                                            
                                            XElement instanceIdElement = dCGroupElement.Element(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (instanceIdElement != null)
                                            {
                                                string instanceIdInstance = instanceIdElement.Value;
                                                dRDataContainerInstance.InstanceId = instanceIdInstance;
                                            }
                                            
                                            XElement nameElement = dCGroupElement.Element(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (nameElement != null)
                                            {
                                                string nameInstance = nameElement.Value;
                                                dRDataContainerInstance.Name = nameInstance;
                                            }
                                            
                                            XElement operationInProgressElement = dCGroupElement.Element(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (operationInProgressElement != null)
                                            {
                                                OperationInProgress operationInProgressInstance = ((OperationInProgress)Enum.Parse(typeof(OperationInProgress), operationInProgressElement.Value, true));
                                                dRDataContainerInstance.OperationInProgress = operationInProgressInstance;
                                            }
                                            
                                            XElement cloudTypeElement = dCGroupElement.Element(XName.Get("CloudType", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (cloudTypeElement != null)
                                            {
                                                CloudType cloudTypeInstance = StorSimpleManagementClient.ParseCloudType(cloudTypeElement.Value);
                                                dRDataContainerInstance.CloudType = cloudTypeInstance;
                                            }
                                            
                                            XElement dataContainerIdElement = dCGroupElement.Element(XName.Get("DataContainerId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (dataContainerIdElement != null)
                                            {
                                                string dataContainerIdInstance = dataContainerIdElement.Value;
                                                dRDataContainerInstance.DataContainerId = dataContainerIdInstance;
                                            }
                                            
                                            XElement locationElement = dCGroupElement.Element(XName.Get("Location", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (locationElement != null)
                                            {
                                                string locationInstance = locationElement.Value;
                                                dRDataContainerInstance.Location = locationInstance;
                                            }
                                            
                                            XElement ownedElement = dCGroupElement.Element(XName.Get("Owned", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (ownedElement != null)
                                            {
                                                bool ownedInstance = bool.Parse(ownedElement.Value);
                                                dRDataContainerInstance.Owned = ownedInstance;
                                            }
                                            
                                            XElement ownerDeviceIdElement = dCGroupElement.Element(XName.Get("OwnerDeviceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (ownerDeviceIdElement != null)
                                            {
                                                string ownerDeviceIdInstance = ownerDeviceIdElement.Value;
                                                dRDataContainerInstance.OwnerDeviceId = ownerDeviceIdInstance;
                                            }
                                            
                                            XElement volumeListSequenceElement = dCGroupElement.Element(XName.Get("VolumeList", "http://windowscloudbackup.com/CiS/V2013_03"));
                                            if (volumeListSequenceElement != null)
                                            {
                                                foreach (XElement volumeListElement in volumeListSequenceElement.Elements(XName.Get("DRVolume", "http://windowscloudbackup.com/CiS/V2013_03")))
                                                {
                                                    DRVolume dRVolumeInstance = new DRVolume();
                                                    dRDataContainerInstance.VolumeList.Add(dRVolumeInstance);
                                                    
                                                    XElement displayNameElement = volumeListElement.Element(XName.Get("DisplayName", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                    if (displayNameElement != null)
                                                    {
                                                        string displayNameInstance = displayNameElement.Value;
                                                        dRVolumeInstance.DisplayName = displayNameInstance;
                                                    }
                                                    
                                                    XElement sizeElement = volumeListElement.Element(XName.Get("Size", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                    if (sizeElement != null)
                                                    {
                                                        long sizeInstance = long.Parse(sizeElement.Value, CultureInfo.InvariantCulture);
                                                        dRVolumeInstance.Size = sizeInstance;
                                                    }
                                                    
                                                    XElement snapshotIdElement = volumeListElement.Element(XName.Get("SnapshotId", "http://windowscloudbackup.com/CiS/V2013_03"));
                                                    if (snapshotIdElement != null)
                                                    {
                                                        string snapshotIdInstance = snapshotIdElement.Value;
                                                        dRVolumeInstance.SnapshotId = snapshotIdInstance;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    XElement ineligibilityMessageElement = dCGroupsElement.Element(XName.Get("IneligibilityMessage", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (ineligibilityMessageElement != null)
                                    {
                                        string ineligibilityMessageInstance = ineligibilityMessageElement.Value;
                                        dataContainerGroupInstance.IneligibilityMessage = ineligibilityMessageInstance;
                                    }
                                    
                                    XElement isDCGroupEligibleForDRElement = dCGroupsElement.Element(XName.Get("IsDCGroupEligibleForDR", "http://windowscloudbackup.com/CiS/V2013_03"));
                                    if (isDCGroupEligibleForDRElement != null)
                                    {
                                        bool isDCGroupEligibleForDRInstance = bool.Parse(isDCGroupEligibleForDRElement.Value);
                                        dataContainerGroupInstance.IsDCGroupEligibleForDR = isDCGroupEligibleForDRInstance;
                                    }
                                }
                            }
                            
                            XElement followUpJobIdElement = dataContainerGroupResponseElement.Element(XName.Get("FollowUpJobId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            if (followUpJobIdElement != null)
                            {
                                string followUpJobIdInstance = followUpJobIdElement.Value;
                                dataContainerGroupResponseInstance.FollowUpJobId = followUpJobIdInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Trigger device failover.
        /// </summary>
        /// <param name='deviceId'>
        /// Required. The device identifier
        /// </param>
        /// <param name='drRequest'>
        /// Required. The details of the device failover request.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Job Response for all Device Job Related Calls
        /// </returns>
        public async Task<JobResponse> TriggerAsync(string deviceId, DeviceFailoverRequest drRequest, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (deviceId == null)
            {
                throw new ArgumentNullException("deviceId");
            }
            if (drRequest == null)
            {
                throw new ArgumentNullException("drRequest");
            }
            if (drRequest.DataContainerIds == null)
            {
                throw new ArgumentNullException("drRequest.DataContainerIds");
            }
            if (drRequest.TargetDeviceId == null)
            {
                throw new ArgumentNullException("drRequest.TargetDeviceId");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deviceId", deviceId);
                tracingParameters.Add("drRequest", drRequest);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "TriggerAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(deviceId);
            url = url + "/failover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement dRRequestV2Element = new XElement(XName.Get("DRRequest_V2", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(dRRequestV2Element);
                
                XElement cleanupPrimaryElement = new XElement(XName.Get("CleanupPrimary", "http://windowscloudbackup.com/CiS/V2013_03"));
                cleanupPrimaryElement.Value = drRequest.CleanupPrimary.ToString().ToLower();
                dRRequestV2Element.Add(cleanupPrimaryElement);
                
                XElement dataContainerIdsSequenceElement = new XElement(XName.Get("DataContainerIds", "http://windowscloudbackup.com/CiS/V2013_03"));
                foreach (string dataContainerIdsItem in drRequest.DataContainerIds)
                {
                    XElement dataContainerIdsItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                    dataContainerIdsItemElement.Value = dataContainerIdsItem;
                    dataContainerIdsSequenceElement.Add(dataContainerIdsItemElement);
                }
                dRRequestV2Element.Add(dataContainerIdsSequenceElement);
                
                XElement returnWorkflowIdElement = new XElement(XName.Get("ReturnWorkflowId", "http://windowscloudbackup.com/CiS/V2013_03"));
                returnWorkflowIdElement.Value = drRequest.ReturnWorkflowId.ToString().ToLower();
                dRRequestV2Element.Add(returnWorkflowIdElement);
                
                XElement targetDeviceIdElement = new XElement(XName.Get("TargetDeviceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                targetDeviceIdElement.Value = drRequest.TargetDeviceId;
                dRRequestV2Element.Add(targetDeviceIdElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.JobId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
