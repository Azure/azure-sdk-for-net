// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple
{
    /// <summary>
    /// All Operations related to CloneVolume  (see
    /// http://msdn.microsoft.com/en-us/library/azure/FILLTHISPART.aspx for
    /// more information)
    /// </summary>
    internal partial class CloneVolumeOperations : IServiceOperations<StorSimpleManagementClient>, ICloneVolumeOperations
    {
        /// <summary>
        /// Initializes a new instance of the CloneVolumeOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal CloneVolumeOperations(StorSimpleManagementClient client)
        {
            this._client = client;
        }
        
        private StorSimpleManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.StorSimple.StorSimpleManagementClient.
        /// </summary>
        public StorSimpleManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Clone a backup element.
        /// </summary>
        /// <param name='sourceDeviceId'>
        /// Required. The identifier of the source device from which clone is
        /// to be triggered
        /// </param>
        /// <param name='triggerCloneRequest'>
        /// Required. The parameters required for clone operation
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. The Custom Request Headers which client must use
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// This is the Job Response for all Device Job Related Calls
        /// </returns>
        public async Task<JobResponse> TriggerAsync(string sourceDeviceId, TriggerCloneRequest triggerCloneRequest, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (sourceDeviceId == null)
            {
                throw new ArgumentNullException("sourceDeviceId");
            }
            if (triggerCloneRequest == null)
            {
                throw new ArgumentNullException("triggerCloneRequest");
            }
            if (triggerCloneRequest.BackupSetId == null)
            {
                throw new ArgumentNullException("triggerCloneRequest.BackupSetId");
            }
            if (triggerCloneRequest.SourceSnapshot == null)
            {
                throw new ArgumentNullException("triggerCloneRequest.SourceSnapshot");
            }
            if (triggerCloneRequest.SourceSnapshot.DataContainerId == null)
            {
                throw new ArgumentNullException("triggerCloneRequest.SourceSnapshot.DataContainerId");
            }
            if (triggerCloneRequest.SourceSnapshot.Id == null)
            {
                throw new ArgumentNullException("triggerCloneRequest.SourceSnapshot.Id");
            }
            if (triggerCloneRequest.SourceSnapshot.Name == null)
            {
                throw new ArgumentNullException("triggerCloneRequest.SourceSnapshot.Name");
            }
            if (triggerCloneRequest.SourceSnapshot.VolumeId == null)
            {
                throw new ArgumentNullException("triggerCloneRequest.SourceSnapshot.VolumeId");
            }
            if (triggerCloneRequest.TargetACRList != null)
            {
                foreach (AccessControlRecord targetACRListParameterItem in triggerCloneRequest.TargetACRList)
                {
                    if (targetACRListParameterItem.InitiatorName == null)
                    {
                        throw new ArgumentNullException("triggerCloneRequest.TargetACRList.InitiatorName");
                    }
                    if (targetACRListParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("triggerCloneRequest.TargetACRList.Name");
                    }
                }
            }
            if (triggerCloneRequest.TargetDeviceId == null)
            {
                throw new ArgumentNullException("triggerCloneRequest.TargetDeviceId");
            }
            if (triggerCloneRequest.TargetVolName == null)
            {
                throw new ArgumentNullException("triggerCloneRequest.TargetVolName");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("sourceDeviceId", sourceDeviceId);
                tracingParameters.Add("triggerCloneRequest", triggerCloneRequest);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "TriggerAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/cloudservices/";
            url = url + Uri.EscapeDataString(this.Client.CloudServiceName);
            url = url + "/resources/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/~/";
            url = url + "CisVault";
            url = url + "/";
            url = url + Uri.EscapeDataString(this.Client.ResourceName);
            url = url + "/api/devices/";
            url = url + Uri.EscapeDataString(sourceDeviceId);
            url = url + "/clone";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-01-01.1.0");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/xml");
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Language);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2014-01-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement cloneRequestV2Element = new XElement(XName.Get("CloneRequest_V2", "http://windowscloudbackup.com/CiS/V2013_03"));
                requestDoc.Add(cloneRequestV2Element);
                
                XElement backupSetIdElement = new XElement(XName.Get("BackupSetId", "http://windowscloudbackup.com/CiS/V2013_03"));
                backupSetIdElement.Value = triggerCloneRequest.BackupSetId;
                cloneRequestV2Element.Add(backupSetIdElement);
                
                XElement returnWorkflowIdElement = new XElement(XName.Get("ReturnWorkflowId", "http://windowscloudbackup.com/CiS/V2013_03"));
                returnWorkflowIdElement.Value = triggerCloneRequest.ReturnWorkflowId.ToString().ToLower();
                cloneRequestV2Element.Add(returnWorkflowIdElement);
                
                XElement sourceSnapshotElement = new XElement(XName.Get("SourceSnapshot", "http://windowscloudbackup.com/CiS/V2013_03"));
                cloneRequestV2Element.Add(sourceSnapshotElement);
                
                XElement dataContainerIdElement = new XElement(XName.Get("DataContainerId", "http://windowscloudbackup.com/CiS/V2013_03"));
                dataContainerIdElement.Value = triggerCloneRequest.SourceSnapshot.DataContainerId;
                sourceSnapshotElement.Add(dataContainerIdElement);
                
                XElement idElement = new XElement(XName.Get("Id", "http://windowscloudbackup.com/CiS/V2013_03"));
                idElement.Value = triggerCloneRequest.SourceSnapshot.Id;
                sourceSnapshotElement.Add(idElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                nameElement.Value = triggerCloneRequest.SourceSnapshot.Name;
                sourceSnapshotElement.Add(nameElement);
                
                XElement sizeInBytesElement = new XElement(XName.Get("SizeInBytes", "http://windowscloudbackup.com/CiS/V2013_03"));
                sizeInBytesElement.Value = triggerCloneRequest.SourceSnapshot.SizeInBytes.ToString();
                sourceSnapshotElement.Add(sizeInBytesElement);
                
                XElement volumeIdElement = new XElement(XName.Get("VolumeId", "http://windowscloudbackup.com/CiS/V2013_03"));
                volumeIdElement.Value = triggerCloneRequest.SourceSnapshot.VolumeId;
                sourceSnapshotElement.Add(volumeIdElement);
                
                if (triggerCloneRequest.TargetACRIdList != null)
                {
                    XElement targetACRIdListSequenceElement = new XElement(XName.Get("TargetACRIdList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (string targetACRIdListItem in triggerCloneRequest.TargetACRIdList)
                    {
                        XElement targetACRIdListItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                        targetACRIdListItemElement.Value = targetACRIdListItem;
                        targetACRIdListSequenceElement.Add(targetACRIdListItemElement);
                    }
                    cloneRequestV2Element.Add(targetACRIdListSequenceElement);
                }
                else
                {
                    XElement emptyElement = new XElement(XName.Get("TargetACRIdList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    XAttribute nilAttribute = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                    nilAttribute.Value = "true";
                    emptyElement.Add(nilAttribute);
                    cloneRequestV2Element.Add(emptyElement);
                }
                
                if (triggerCloneRequest.TargetACRList != null)
                {
                    XElement targetACRListSequenceElement = new XElement(XName.Get("TargetACRList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    foreach (AccessControlRecord targetACRListItem in triggerCloneRequest.TargetACRList)
                    {
                        XElement accessControlRecordElement = new XElement(XName.Get("AccessControlRecord", "http://windowscloudbackup.com/CiS/V2013_03"));
                        targetACRListSequenceElement.Add(accessControlRecordElement);
                        
                        if (targetACRListItem.InstanceId != null)
                        {
                            XElement instanceIdElement = new XElement(XName.Get("InstanceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                            instanceIdElement.Value = targetACRListItem.InstanceId;
                            accessControlRecordElement.Add(instanceIdElement);
                        }
                        
                        XElement nameElement2 = new XElement(XName.Get("Name", "http://windowscloudbackup.com/CiS/V2013_03"));
                        nameElement2.Value = targetACRListItem.Name;
                        accessControlRecordElement.Add(nameElement2);
                        
                        if (targetACRListItem.GlobalId != null)
                        {
                            XElement globalIdElement = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                            globalIdElement.Value = targetACRListItem.GlobalId;
                            accessControlRecordElement.Add(globalIdElement);
                        }
                        else
                        {
                            XElement emptyElement2 = new XElement(XName.Get("GlobalId", "http://schemas.datacontract.org/2004/07/Microsoft.Internal.CiS.Service.Interface.Portal"));
                            XAttribute nilAttribute2 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                            nilAttribute2.Value = "true";
                            emptyElement2.Add(nilAttribute2);
                            accessControlRecordElement.Add(emptyElement2);
                        }
                        
                        XElement operationInProgressElement = new XElement(XName.Get("OperationInProgress", "http://windowscloudbackup.com/CiS/V2013_03"));
                        operationInProgressElement.Value = targetACRListItem.OperationInProgress.ToString();
                        accessControlRecordElement.Add(operationInProgressElement);
                        
                        XElement initiatorNameElement = new XElement(XName.Get("InitiatorName", "http://windowscloudbackup.com/CiS/V2013_03"));
                        initiatorNameElement.Value = targetACRListItem.InitiatorName;
                        accessControlRecordElement.Add(initiatorNameElement);
                        
                        XElement volumeCountElement = new XElement(XName.Get("VolumeCount", "http://windowscloudbackup.com/CiS/V2013_03"));
                        volumeCountElement.Value = targetACRListItem.VolumeCount.ToString();
                        accessControlRecordElement.Add(volumeCountElement);
                    }
                    cloneRequestV2Element.Add(targetACRListSequenceElement);
                }
                else
                {
                    XElement emptyElement3 = new XElement(XName.Get("TargetACRList", "http://windowscloudbackup.com/CiS/V2013_03"));
                    XAttribute nilAttribute3 = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                    nilAttribute3.Value = "true";
                    emptyElement3.Add(nilAttribute3);
                    cloneRequestV2Element.Add(emptyElement3);
                }
                
                XElement targetDeviceIdElement = new XElement(XName.Get("TargetDeviceId", "http://windowscloudbackup.com/CiS/V2013_03"));
                targetDeviceIdElement.Value = triggerCloneRequest.TargetDeviceId;
                cloneRequestV2Element.Add(targetDeviceIdElement);
                
                XElement targetVolNameElement = new XElement(XName.Get("TargetVolName", "http://windowscloudbackup.com/CiS/V2013_03"));
                targetVolNameElement.Value = triggerCloneRequest.TargetVolName;
                cloneRequestV2Element.Add(targetVolNameElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                        if (stringElement != null)
                        {
                            string stringInstance = stringElement.Value;
                            result.JobId = stringInstance;
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
