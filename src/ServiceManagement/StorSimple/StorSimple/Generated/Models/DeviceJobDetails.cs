// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple.Models
{
    /// <summary>
    /// Device Job Details
    /// </summary>
    public partial class DeviceJobDetails
    {
        private string _backupPolicy;
        
        /// <summary>
        /// Optional. Name of the BackupPolicy used for the job
        /// </summary>
        public string BackupPolicy
        {
            get { return this._backupPolicy; }
            set { this._backupPolicy = value; }
        }
        
        private DateTime _backupTimeStamp;
        
        /// <summary>
        /// Optional. TimeStamp of the backup instance used for the job
        /// </summary>
        public DateTime BackupTimeStamp
        {
            get { return this._backupTimeStamp; }
            set { this._backupTimeStamp = value; }
        }
        
        private BackupType _backupType;
        
        /// <summary>
        /// Optional. BackupType for the backup job
        /// </summary>
        public BackupType BackupType
        {
            get { return this._backupType; }
            set { this._backupType = value; }
        }
        
        private DataStatistics _dataStats;
        
        /// <summary>
        /// Optional. Data statistics of the job. Null if N/A
        /// </summary>
        public DataStatistics DataStats
        {
            get { return this._dataStats; }
            set { this._dataStats = value; }
        }
        
        private CisBaseObject _device;
        
        /// <summary>
        /// Optional. Device with which the job is associated
        /// </summary>
        public CisBaseObject Device
        {
            get { return this._device; }
            set { this._device = value; }
        }
        
        private CisBaseObject _entity;
        
        /// <summary>
        /// Optional. Entity with which the job is associated
        /// </summary>
        public CisBaseObject Entity
        {
            get { return this._entity; }
            set { this._entity = value; }
        }
        
        private IList<ErrorInfo> _errorDetails;
        
        /// <summary>
        /// Optional. Error info (for failed jobs)
        /// </summary>
        public IList<ErrorInfo> ErrorDetails
        {
            get { return this._errorDetails; }
            set { this._errorDetails = value; }
        }
        
        private bool _hideProgressDetails;
        
        /// <summary>
        /// Optional. Hide job progress details
        /// </summary>
        public bool HideProgressDetails
        {
            get { return this._hideProgressDetails; }
            set { this._hideProgressDetails = value; }
        }
        
        private string _instanceId;
        
        /// <summary>
        /// Optional. The instance identifier
        /// </summary>
        public string InstanceId
        {
            get { return this._instanceId; }
            set { this._instanceId = value; }
        }
        
        private bool _isInstantRestoreComplete;
        
        /// <summary>
        /// Optional. Instant restore complete, relevent only for running
        /// clone/restore jobs
        /// </summary>
        public bool IsInstantRestoreComplete
        {
            get { return this._isInstantRestoreComplete; }
            set { this._isInstantRestoreComplete = value; }
        }
        
        private bool _isJobCancellable;
        
        /// <summary>
        /// Optional. If the Job is cancellable or not
        /// </summary>
        public bool IsJobCancellable
        {
            get { return this._isJobCancellable; }
            set { this._isJobCancellable = value; }
        }
        
        private JobStatusInfo _jobDetails;
        
        /// <summary>
        /// Optional. Workflow details
        /// </summary>
        public JobStatusInfo JobDetails
        {
            get { return this._jobDetails; }
            set { this._jobDetails = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. The name of the entity
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private int _progress;
        
        /// <summary>
        /// Optional. Percentage completion of job (0-100)
        /// </summary>
        public int Progress
        {
            get { return this._progress; }
            set { this._progress = value; }
        }
        
        private CisBaseObject _sourceDevice;
        
        /// <summary>
        /// Optional. Source device (for DR and clone jobs)
        /// </summary>
        public CisBaseObject SourceDevice
        {
            get { return this._sourceDevice; }
            set { this._sourceDevice = value; }
        }
        
        private CisBaseObject _sourceEntity;
        
        /// <summary>
        /// Optional. Source Entity (for DR and clone jobs)
        /// </summary>
        public CisBaseObject SourceEntity
        {
            get { return this._sourceEntity; }
            set { this._sourceEntity = value; }
        }
        
        private CisBaseObject _sourceVolume;
        
        /// <summary>
        /// Optional. Source Volume associated with the job
        /// </summary>
        public CisBaseObject SourceVolume
        {
            get { return this._sourceVolume; }
            set { this._sourceVolume = value; }
        }
        
        private string _status;
        
        /// <summary>
        /// Optional. Status of Job.
        /// </summary>
        public string Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private TimeStatistics _timeStats;
        
        /// <summary>
        /// Optional. Time statistics of the job. Null if N/A
        /// </summary>
        public TimeStatistics TimeStats
        {
            get { return this._timeStats; }
            set { this._timeStats = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Optional. Type of Job
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        private CisBaseObject _volume;
        
        /// <summary>
        /// Optional. Volume on which the job is running
        /// </summary>
        public CisBaseObject Volume
        {
            get { return this._volume; }
            set { this._volume = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DeviceJobDetails class.
        /// </summary>
        public DeviceJobDetails()
        {
            this.ErrorDetails = new LazyList<ErrorInfo>();
        }
        
        /// <summary>
        /// Initializes a new instance of the DeviceJobDetails class with
        /// required arguments.
        /// </summary>
        public DeviceJobDetails(string name)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            this.Name = name;
        }
    }
}
