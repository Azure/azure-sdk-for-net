// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.WindowsAzure.Management.StorSimple.Models
{
    /// <summary>
    /// Represents a request to failover a device.
    /// </summary>
    public partial class DeviceFailoverRequest
    {
        private bool _cleanupPrimary;
        
        /// <summary>
        /// Optional. Flag indicating whether to cleanup the primary device
        /// </summary>
        public bool CleanupPrimary
        {
            get { return this._cleanupPrimary; }
            set { this._cleanupPrimary = value; }
        }
        
        private IList<string> _dataContainerIds;
        
        /// <summary>
        /// Required. The list of data container ids to failover
        /// </summary>
        public IList<string> DataContainerIds
        {
            get { return this._dataContainerIds; }
            set { this._dataContainerIds = value; }
        }
        
        private bool _returnWorkflowId;
        
        /// <summary>
        /// Optional. Flag indicating whether to return the workflow id
        /// </summary>
        public bool ReturnWorkflowId
        {
            get { return this._returnWorkflowId; }
            set { this._returnWorkflowId = value; }
        }
        
        private string _targetDeviceId;
        
        /// <summary>
        /// Required. The target device identifier
        /// </summary>
        public string TargetDeviceId
        {
            get { return this._targetDeviceId; }
            set { this._targetDeviceId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DeviceFailoverRequest class.
        /// </summary>
        public DeviceFailoverRequest()
        {
            this.DataContainerIds = new List<string>();
        }
        
        /// <summary>
        /// Initializes a new instance of the DeviceFailoverRequest class with
        /// required arguments.
        /// </summary>
        public DeviceFailoverRequest(List<string> dataContainerIds, string targetDeviceId)
            : this()
        {
            if (dataContainerIds == null)
            {
                throw new ArgumentNullException("dataContainerIds");
            }
            if (targetDeviceId == null)
            {
                throw new ArgumentNullException("targetDeviceId");
            }
            this.DataContainerIds = dataContainerIds;
            this.TargetDeviceId = targetDeviceId;
        }
    }
}
