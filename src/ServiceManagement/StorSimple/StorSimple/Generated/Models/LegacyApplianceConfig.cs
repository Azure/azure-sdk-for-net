// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.WindowsAzure.Management.StorSimple.Models;

namespace Microsoft.WindowsAzure.Management.StorSimple.Models
{
    /// <summary>
    /// This class represents the parsed config to be imported.
    /// </summary>
    public partial class LegacyApplianceConfig
    {
        private IList<AccessControlRecord> _accessControlRecords;
        
        /// <summary>
        /// Required. Gets or sets the list of Access Control Records from
        /// config xml to be imported.
        /// </summary>
        public IList<AccessControlRecord> AccessControlRecords
        {
            get { return this._accessControlRecords; }
            set { this._accessControlRecords = value; }
        }
        
        private IList<MigrationBackupPolicy> _backupPolicies;
        
        /// <summary>
        /// Required. Gets or sets list of back policies from config xml to be
        /// imported.
        /// </summary>
        public IList<MigrationBackupPolicy> BackupPolicies
        {
            get { return this._backupPolicies; }
            set { this._backupPolicies = value; }
        }
        
        private IList<BandwidthSetting> _bandwidthSettings;
        
        /// <summary>
        /// Required. Gets or sets list of Bandwidth settings from config xml
        /// to be imported.
        /// </summary>
        public IList<BandwidthSetting> BandwidthSettings
        {
            get { return this._bandwidthSettings; }
            set { this._bandwidthSettings = value; }
        }
        
        private IList<MigrationDataContainer> _cloudConfigurations;
        
        /// <summary>
        /// Required. Gets or sets list of volume containers from config xml to
        /// be imported.
        /// </summary>
        public IList<MigrationDataContainer> CloudConfigurations
        {
            get { return this._cloudConfigurations; }
            set { this._cloudConfigurations = value; }
        }
        
        private string _deviceId;
        
        /// <summary>
        /// Required. Gets or sets target device id to which volume containers
        /// needs to be migrated.
        /// </summary>
        public string DeviceId
        {
            get { return this._deviceId; }
            set { this._deviceId = value; }
        }
        
        private IList<MigrationChapSetting> _inboundChapSettings;
        
        /// <summary>
        /// Optional. Gets or sets list of inbound chap settings from config
        /// xml to be imported.
        /// </summary>
        public IList<MigrationChapSetting> InboundChapSettings
        {
            get { return this._inboundChapSettings; }
            set { this._inboundChapSettings = value; }
        }
        
        private string _instanceId;
        
        /// <summary>
        /// Optional. Gets or sets the unique config id to be passed while
        /// importing the config details
        /// </summary>
        public string InstanceId
        {
            get { return this._instanceId; }
            set { this._instanceId = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. Gets or sets the name of the config
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private OperationInProgress _operationInProgress;
        
        /// <summary>
        /// Optional. Gets or sets a value which indicating whether any
        /// operation is in progress
        /// </summary>
        public OperationInProgress OperationInProgress
        {
            get { return this._operationInProgress; }
            set { this._operationInProgress = value; }
        }
        
        private int _serialNumber;
        
        /// <summary>
        /// Required. Gets or sets the serial number of the current sub-config
        /// entry when the config is splitted into smaller config and imported
        /// </summary>
        public int SerialNumber
        {
            get { return this._serialNumber; }
            set { this._serialNumber = value; }
        }
        
        private IList<StorageAccountCredential> _storageAccountCredentials;
        
        /// <summary>
        /// Required. Gets or sets the list of storage account credentials from
        /// config xml to be imported.
        /// </summary>
        public IList<StorageAccountCredential> StorageAccountCredentials
        {
            get { return this._storageAccountCredentials; }
            set { this._storageAccountCredentials = value; }
        }
        
        private IList<MigrationChapSetting> _targetChapSettings;
        
        /// <summary>
        /// Optional. Gets or sets the  list of target chap settings from
        /// config xml to be imported
        /// </summary>
        public IList<MigrationChapSetting> TargetChapSettings
        {
            get { return this._targetChapSettings; }
            set { this._targetChapSettings = value; }
        }
        
        private int _totalCount;
        
        /// <summary>
        /// Required. Gets or sets the total count of sub-config entries to be
        /// imported, when the config splitted into smaller configs and
        /// imported
        /// </summary>
        public int TotalCount
        {
            get { return this._totalCount; }
            set { this._totalCount = value; }
        }
        
        private IList<VirtualDiskGroup> _volumeGroups;
        
        /// <summary>
        /// Required. Gets or sets the list of Volume Groups (VirtualDiskGroup)
        /// from config xml to be imported
        /// </summary>
        public IList<VirtualDiskGroup> VolumeGroups
        {
            get { return this._volumeGroups; }
            set { this._volumeGroups = value; }
        }
        
        private IList<VirtualDisk> _volumes;
        
        /// <summary>
        /// Required. Gets or sets the list of volumes (virtual disk) from
        /// config xml to be imported
        /// </summary>
        public IList<VirtualDisk> Volumes
        {
            get { return this._volumes; }
            set { this._volumes = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LegacyApplianceConfig class.
        /// </summary>
        public LegacyApplianceConfig()
        {
            this.AccessControlRecords = new List<AccessControlRecord>();
            this.BackupPolicies = new List<MigrationBackupPolicy>();
            this.BandwidthSettings = new List<BandwidthSetting>();
            this.CloudConfigurations = new List<MigrationDataContainer>();
            this.InboundChapSettings = new LazyList<MigrationChapSetting>();
            this.StorageAccountCredentials = new List<StorageAccountCredential>();
            this.TargetChapSettings = new LazyList<MigrationChapSetting>();
            this.VolumeGroups = new List<VirtualDiskGroup>();
            this.Volumes = new List<VirtualDisk>();
        }
    }
}
