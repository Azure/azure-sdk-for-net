// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Monitoring.Events;
using Microsoft.WindowsAzure.Management.Monitoring.Events.Models;
using Microsoft.WindowsAzure.Management.Monitoring.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.Monitoring.Events.Models
{
    /// <summary>
    /// The event channel.
    /// </summary>
    [Flags]
    public enum EventChannels
    {
        /// <summary>
        /// Admin channel
        /// </summary>
        Admin = 1,
        
        /// <summary>
        /// Operation channel
        /// </summary>
        Operation = 2,
        
        /// <summary>
        /// Debug channel
        /// </summary>
        Debug = 4,
        
        /// <summary>
        /// Analytics channel
        /// </summary>
        Analytics = 8,
    }
    
    /// <summary>
    /// The event data class.
    /// </summary>
    public partial class EventData
    {
        private SenderAuthorization _authorization;
        
        /// <summary>
        /// Optional. Gets or sets the authorization.
        /// </summary>
        public SenderAuthorization Authorization
        {
            get { return this._authorization; }
            set { this._authorization = value; }
        }
        
        private Dictionary<string, string> _claims;
        
        /// <summary>
        /// Optional. Gets or sets the claims
        /// </summary>
        public Dictionary<string, string> Claims
        {
            get { return this._claims; }
            set { this._claims = value; }
        }
        
        private string _correlationId;
        
        /// <summary>
        /// Optional. Gets or sets the correlation Id
        /// </summary>
        public string CorrelationId
        {
            get { return this._correlationId; }
            set { this._correlationId = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Optional. Gets or sets the description
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private EventChannels _eventChannels;
        
        /// <summary>
        /// Optional. Gets or sets the event channels
        /// </summary>
        public EventChannels EventChannels
        {
            get { return this._eventChannels; }
            set { this._eventChannels = value; }
        }
        
        private string _eventDataId;
        
        /// <summary>
        /// Optional. Gets or sets the event data Id
        /// </summary>
        public string EventDataId
        {
            get { return this._eventDataId; }
            set { this._eventDataId = value; }
        }
        
        private LocalizableString _eventName;
        
        /// <summary>
        /// Optional. Gets or sets the event name
        /// </summary>
        public LocalizableString EventName
        {
            get { return this._eventName; }
            set { this._eventName = value; }
        }
        
        private LocalizableString _eventSource;
        
        /// <summary>
        /// Optional. Gets or sets the event source
        /// </summary>
        public LocalizableString EventSource
        {
            get { return this._eventSource; }
            set { this._eventSource = value; }
        }
        
        private DateTime _eventTimestamp;
        
        /// <summary>
        /// Optional. Gets or sets the time event occured
        /// </summary>
        public DateTime EventTimestamp
        {
            get { return this._eventTimestamp; }
            set { this._eventTimestamp = value; }
        }
        
        private HttpRequestInfo _httpRequest;
        
        /// <summary>
        /// Optional. Gets or sets the http request info.
        /// </summary>
        public HttpRequestInfo HttpRequest
        {
            get { return this._httpRequest; }
            set { this._httpRequest = value; }
        }
        
        private EventLevel _level;
        
        /// <summary>
        /// Optional. Gets or sets the event level
        /// </summary>
        public EventLevel Level
        {
            get { return this._level; }
            set { this._level = value; }
        }
        
        private string _operationId;
        
        /// <summary>
        /// Optional. Gets or sets the operation id
        /// </summary>
        public string OperationId
        {
            get { return this._operationId; }
            set { this._operationId = value; }
        }
        
        private LocalizableString _operationName;
        
        /// <summary>
        /// Optional. Gets or sets the operation name
        /// </summary>
        public LocalizableString OperationName
        {
            get { return this._operationName; }
            set { this._operationName = value; }
        }
        
        private Dictionary<string, string> _properties;
        
        /// <summary>
        /// Optional. Gets or sets the property bag
        /// </summary>
        public Dictionary<string, string> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private string _resourceGroupName;
        
        /// <summary>
        /// Optional. Gets or sets the resource group name.
        /// </summary>
        public string ResourceGroupName
        {
            get { return this._resourceGroupName; }
            set { this._resourceGroupName = value; }
        }
        
        private LocalizableString _resourceProviderName;
        
        /// <summary>
        /// Optional. Gets or sets the resource provider name.
        /// </summary>
        public LocalizableString ResourceProviderName
        {
            get { return this._resourceProviderName; }
            set { this._resourceProviderName = value; }
        }
        
        private string _resourceUri;
        
        /// <summary>
        /// Optional. Gets or sets the resource uri
        /// </summary>
        public string ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }
        
        private LocalizableString _status;
        
        /// <summary>
        /// Optional. Gets or sets the event status
        /// </summary>
        public LocalizableString Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private DateTime _submissionTimestamp;
        
        /// <summary>
        /// Optional. Gets or sets the event submission time.
        /// </summary>
        public DateTime SubmissionTimestamp
        {
            get { return this._submissionTimestamp; }
            set { this._submissionTimestamp = value; }
        }
        
        private string _subscriptionId;
        
        /// <summary>
        /// Optional. Gets or sets the subscription id
        /// </summary>
        public string SubscriptionId
        {
            get { return this._subscriptionId; }
            set { this._subscriptionId = value; }
        }
        
        private LocalizableString _subStatus;
        
        /// <summary>
        /// Optional. Gets or sets the event sub status
        /// </summary>
        public LocalizableString SubStatus
        {
            get { return this._subStatus; }
            set { this._subStatus = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EventData class.
        /// </summary>
        public EventData()
        {
            this._claims = new Dictionary<string, string>();
            this._properties = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Represents collection of events.
    /// </summary>
    public partial class EventDataCollection
    {
        private string _nextLink;
        
        /// <summary>
        /// Optional. The continuation token.
        /// </summary>
        public string NextLink
        {
            get { return this._nextLink; }
            set { this._nextLink = value; }
        }
        
        private IList<EventData> _value;
        
        /// <summary>
        /// Optional. The list of events.
        /// </summary>
        public IList<EventData> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EventDataCollection class.
        /// </summary>
        public EventDataCollection()
        {
            this._value = new List<EventData>();
        }
    }
    
    /// <summary>
    /// The List Events operation response.
    /// </summary>
    public partial class EventDataListResponse : OperationResponse
    {
        private EventDataCollection _eventDataCollection;
        
        /// <summary>
        /// Optional. The retrieved events.
        /// </summary>
        public EventDataCollection EventDataCollection
        {
            get { return this._eventDataCollection; }
            set { this._eventDataCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EventDataListResponse class.
        /// </summary>
        public EventDataListResponse()
        {
        }
    }
    
    /// <summary>
    /// The event level.
    /// </summary>
    public enum EventLevel
    {
        /// <summary>
        /// Critical level
        /// </summary>
        Critical = 1,
        
        /// <summary>
        /// Error level
        /// </summary>
        Error = 2,
        
        /// <summary>
        /// Warning level
        /// </summary>
        Warning = 3,
        
        /// <summary>
        /// Informational level
        /// </summary>
        Informational = 4,
        
        /// <summary>
        /// Verbose level
        /// </summary>
        Verbose = 5,
    }
    
    /// <summary>
    /// The HttpInfo class.
    /// </summary>
    public partial class HttpRequestInfo
    {
        private string _clientIpAddress;
        
        /// <summary>
        /// Optional. The client Ip Address
        /// </summary>
        public string ClientIpAddress
        {
            get { return this._clientIpAddress; }
            set { this._clientIpAddress = value; }
        }
        
        private string _clientRequestId;
        
        /// <summary>
        /// Optional. The client request id.
        /// </summary>
        public string ClientRequestId
        {
            get { return this._clientRequestId; }
            set { this._clientRequestId = value; }
        }
        
        private string _method;
        
        /// <summary>
        /// Optional. The method.
        /// </summary>
        public string Method
        {
            get { return this._method; }
            set { this._method = value; }
        }
        
        private string _uri;
        
        /// <summary>
        /// Optional. The Uri.
        /// </summary>
        public string Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the HttpRequestInfo class.
        /// </summary>
        public HttpRequestInfo()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the List events operation.
    /// </summary>
    public partial class ListEventsForCorrelationIdParameters : ListEventsParameters
    {
        private string _correlationId;
        
        /// <summary>
        /// Required. The event correlation id.
        /// </summary>
        public string CorrelationId
        {
            get { return this._correlationId; }
            set { this._correlationId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ListEventsForCorrelationIdParameters class.
        /// </summary>
        public ListEventsForCorrelationIdParameters()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the List events operation.
    /// </summary>
    public partial class ListEventsForEventSourceParameters : ListEventsParameters
    {
        private string _eventSource;
        
        /// <summary>
        /// Required. The event source.
        /// </summary>
        public string EventSource
        {
            get { return this._eventSource; }
            set { this._eventSource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ListEventsForEventSourceParameters class.
        /// </summary>
        public ListEventsForEventSourceParameters()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the List events operation.
    /// </summary>
    public partial class ListEventsForResourceGroupParameters : ListEventsParameters
    {
        private string _resourceGroupName;
        
        /// <summary>
        /// Required. The resource group name.
        /// </summary>
        public string ResourceGroupName
        {
            get { return this._resourceGroupName; }
            set { this._resourceGroupName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ListEventsForResourceGroupParameters class.
        /// </summary>
        public ListEventsForResourceGroupParameters()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the List events operation.
    /// </summary>
    public partial class ListEventsForResourceParameters : ListEventsParameters
    {
        private string _resourceUri;
        
        /// <summary>
        /// Required. The id of the resource.
        /// </summary>
        public string ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ListEventsForResourceParameters
        /// class.
        /// </summary>
        public ListEventsForResourceParameters()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the List events operation.
    /// </summary>
    public partial class ListEventsForResourceProviderParameters : ListEventsParameters
    {
        private string _resourceProvider;
        
        /// <summary>
        /// Required. The resource provider.
        /// </summary>
        public string ResourceProvider
        {
            get { return this._resourceProvider; }
            set { this._resourceProvider = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ListEventsForResourceProviderParameters class.
        /// </summary>
        public ListEventsForResourceProviderParameters()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the List events operation.
    /// </summary>
    public partial class ListEventsParameters
    {
        private System.DateTime? _endTime;
        
        /// <summary>
        /// Optional. The end time of the events.
        /// </summary>
        public System.DateTime? EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private Microsoft.WindowsAzure.Management.Monitoring.Events.Models.EventChannels? _eventChannels;
        
        /// <summary>
        /// Optional. The event channels.
        /// </summary>
        public Microsoft.WindowsAzure.Management.Monitoring.Events.Models.EventChannels? EventChannels
        {
            get { return this._eventChannels; }
            set { this._eventChannels = value; }
        }
        
        private string _nextLink;
        
        /// <summary>
        /// Optional. The next link token.
        /// </summary>
        public string NextLink
        {
            get { return this._nextLink; }
            set { this._nextLink = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Required. The start time of the events.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ListEventsParameters class.
        /// </summary>
        public ListEventsParameters()
        {
        }
    }
    
    /// <summary>
    /// The authorization class.
    /// </summary>
    public partial class SenderAuthorization
    {
        private string _action;
        
        /// <summary>
        /// Optional. The Action.
        /// </summary>
        public string Action
        {
            get { return this._action; }
            set { this._action = value; }
        }
        
        private string _condition;
        
        /// <summary>
        /// Optional. The condition.
        /// </summary>
        public string Condition
        {
            get { return this._condition; }
            set { this._condition = value; }
        }
        
        private string _role;
        
        /// <summary>
        /// Optional. The role.
        /// </summary>
        public string Role
        {
            get { return this._role; }
            set { this._role = value; }
        }
        
        private string _scope;
        
        /// <summary>
        /// Optional. The scope.
        /// </summary>
        public string Scope
        {
            get { return this._scope; }
            set { this._scope = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SenderAuthorization class.
        /// </summary>
        public SenderAuthorization()
        {
        }
    }
}

namespace Microsoft.WindowsAzure.Management.Monitoring.Models
{
    /// <summary>
    /// The localizable string class.
    /// </summary>
    public partial class LocalizableString
    {
        private string _localizedValue;
        
        /// <summary>
        /// Optional. The locale specific value.
        /// </summary>
        public string LocalizedValue
        {
            get { return this._localizedValue; }
            set { this._localizedValue = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// Optional. The invariant value.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LocalizableString class.
        /// </summary>
        public LocalizableString()
        {
        }
    }
}

namespace Microsoft.WindowsAzure.Management.Monitoring.Events
{
    public static partial class EventsClientExtensions
    {
    }
    
    public partial interface IEventsClient : IDisposable
    {
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Windows Azure subscription id.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Operations for event data.
        /// </summary>
        IEventDataOperations EventData
        {
            get; 
        }
    }
    
    public partial class EventsClient : ServiceClient<EventsClient>, IEventsClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Windows Azure subscription id.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IEventDataOperations _eventData;
        
        /// <summary>
        /// Operations for event data.
        /// </summary>
        public virtual IEventDataOperations EventData
        {
            get { return this._eventData; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EventsClient class.
        /// </summary>
        private EventsClient()
            : base()
        {
            this._eventData = new EventDataOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the EventsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Windows Azure subscription id.
        /// </param>
        /// <param name='baseUri'>
        /// Required. Optional base uri parameter.
        /// </param>
        public EventsClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the EventsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Windows Azure subscription id.
        /// </param>
        public EventsClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    public static partial class EventDataOperationsExtensions
    {
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static EventDataListResponse ListEvents(this IEventDataOperations operations, ListEventsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEventDataOperations)s).ListEventsAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static Task<EventDataListResponse> ListEventsAsync(this IEventDataOperations operations, ListEventsParameters parameters)
        {
            return operations.ListEventsAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static EventDataListResponse ListEventsForCorrelationId(this IEventDataOperations operations, ListEventsForCorrelationIdParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEventDataOperations)s).ListEventsForCorrelationIdAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static Task<EventDataListResponse> ListEventsForCorrelationIdAsync(this IEventDataOperations operations, ListEventsForCorrelationIdParameters parameters)
        {
            return operations.ListEventsForCorrelationIdAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static EventDataListResponse ListEventsForEventSource(this IEventDataOperations operations, ListEventsForEventSourceParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEventDataOperations)s).ListEventsForEventSourceAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static Task<EventDataListResponse> ListEventsForEventSourceAsync(this IEventDataOperations operations, ListEventsForEventSourceParameters parameters)
        {
            return operations.ListEventsForEventSourceAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static EventDataListResponse ListEventsForResource(this IEventDataOperations operations, ListEventsForResourceParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEventDataOperations)s).ListEventsForResourceAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static Task<EventDataListResponse> ListEventsForResourceAsync(this IEventDataOperations operations, ListEventsForResourceParameters parameters)
        {
            return operations.ListEventsForResourceAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static EventDataListResponse ListEventsForResourceGroup(this IEventDataOperations operations, ListEventsForResourceGroupParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEventDataOperations)s).ListEventsForResourceGroupAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static Task<EventDataListResponse> ListEventsForResourceGroupAsync(this IEventDataOperations operations, ListEventsForResourceGroupParameters parameters)
        {
            return operations.ListEventsForResourceGroupAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static EventDataListResponse ListEventsForResourceProvider(this IEventDataOperations operations, ListEventsForResourceProviderParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEventDataOperations)s).ListEventsForResourceProviderAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.IEventDataOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public static Task<EventDataListResponse> ListEventsForResourceProviderAsync(this IEventDataOperations operations, ListEventsForResourceProviderParameters parameters)
        {
            return operations.ListEventsForResourceProviderAsync(parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for event data.
    /// </summary>
    public partial interface IEventDataOperations
    {
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        Task<EventDataListResponse> ListEventsAsync(ListEventsParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        Task<EventDataListResponse> ListEventsForCorrelationIdAsync(ListEventsForCorrelationIdParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        Task<EventDataListResponse> ListEventsForEventSourceAsync(ListEventsForEventSourceParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        Task<EventDataListResponse> ListEventsForResourceAsync(ListEventsForResourceParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        Task<EventDataListResponse> ListEventsForResourceGroupAsync(ListEventsForResourceGroupParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        Task<EventDataListResponse> ListEventsForResourceProviderAsync(ListEventsForResourceProviderParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for event data.
    /// </summary>
    internal partial class EventDataOperations : IServiceOperations<EventsClient>, IEventDataOperations
    {
        /// <summary>
        /// Initializes a new instance of the EventDataOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal EventDataOperations(EventsClient client)
        {
            this._client = client;
        }
        
        private EventsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Events.EventsClient.
        /// </summary>
        public EventsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsAsync(ListEventsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListEventsAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/eventtypes/management/values?";
            url = url + "api-version=2014-04";
            url = url + "&$filter=eventTimestamp ge '" + Uri.EscapeUriString(parameters.StartTime.ToString()) + "' and ";
            if (parameters.EndTime != null)
            {
                url = url + "&eventTimestamp le '" + Uri.EscapeUriString(parameters.EndTime.Value.ToString()) + "' and ";
            }
            if (parameters.EventChannels != null)
            {
                url = url + "&eventChannels eq '" + Uri.EscapeUriString(parameters.EventChannels.Value.ToString()) + "'";
            }
            if (parameters.NextLink != null)
            {
                url = url + "&$skipToken=" + Uri.EscapeUriString(parameters.NextLink != null ? parameters.NextLink.Trim() : "");
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);
                                
                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;
                                    
                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string actionInstance = ((string)actionValue);
                                        authorizationInstance.Action = actionInstance;
                                    }
                                    
                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string conditionInstance = ((string)conditionValue);
                                        authorizationInstance.Condition = conditionInstance;
                                    }
                                    
                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null && roleValue.Type != JTokenType.Null)
                                    {
                                        string roleInstance = ((string)roleValue);
                                        authorizationInstance.Role = roleInstance;
                                    }
                                    
                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                    {
                                        string scopeInstance = ((string)scopeValue);
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }
                                
                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null && channelsValue.Type != JTokenType.Null)
                                {
                                    EventChannels channelsInstance = ((EventChannels)Enum.Parse(typeof(EventChannels), ((string)channelsValue), true));
                                    eventDataInstance.EventChannels = channelsInstance;
                                }
                                
                                JToken claimsSequenceElement = ((JToken)valueValue["claims"]);
                                if (claimsSequenceElement != null && claimsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = ((string)property.Name);
                                        string claimsValue = ((string)property.Value);
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }
                                
                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    eventDataInstance.Description = descriptionInstance;
                                }
                                
                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null && eventDataIdValue.Type != JTokenType.Null)
                                {
                                    string eventDataIdInstance = ((string)eventDataIdValue);
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }
                                
                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                                {
                                    string correlationIdInstance = ((string)correlationIdValue);
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }
                                
                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;
                                    
                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance = ((string)valueValue2);
                                        eventNameInstance.Value = valueInstance;
                                    }
                                    
                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance = ((string)localizedValueValue);
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }
                                
                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;
                                    
                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue3);
                                        eventSourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null && localizedValueValue2.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance2 = ((string)localizedValueValue2);
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }
                                
                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null && httpRequestValue.Type != JTokenType.Null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;
                                    
                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                                    {
                                        string clientRequestIdInstance = ((string)clientRequestIdValue);
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }
                                    
                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null && clientIpAddressValue.Type != JTokenType.Null)
                                    {
                                        string clientIpAddressInstance = ((string)clientIpAddressValue);
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }
                                    
                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        httpRequestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        string uriInstance = ((string)uriValue);
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }
                                
                                JToken levelValue = valueValue["level"];
                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                {
                                    EventLevel levelInstance = ((EventLevel)Enum.Parse(typeof(EventLevel), ((string)levelValue), true));
                                    eventDataInstance.Level = levelInstance;
                                }
                                
                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }
                                
                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;
                                    
                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null && valueValue4.Type != JTokenType.Null)
                                    {
                                        string valueInstance3 = ((string)valueValue4);
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }
                                    
                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null && localizedValueValue3.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance3 = ((string)localizedValueValue3);
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }
                                
                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                                {
                                    string operationIdInstance = ((string)operationIdValue);
                                    eventDataInstance.OperationId = operationIdInstance;
                                }
                                
                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;
                                    
                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null && valueValue5.Type != JTokenType.Null)
                                    {
                                        string valueInstance4 = ((string)valueValue5);
                                        operationNameInstance.Value = valueInstance4;
                                    }
                                    
                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null && localizedValueValue4.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance4 = ((string)localizedValueValue4);
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property2.Name);
                                        string propertiesValue = ((string)property2.Value);
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                                
                                JToken statusValue = valueValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;
                                    
                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null && valueValue6.Type != JTokenType.Null)
                                    {
                                        string valueInstance5 = ((string)valueValue6);
                                        statusInstance.Value = valueInstance5;
                                    }
                                    
                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null && localizedValueValue5.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance5 = ((string)localizedValueValue5);
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }
                                
                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;
                                    
                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null && valueValue7.Type != JTokenType.Null)
                                    {
                                        string valueInstance6 = ((string)valueValue7);
                                        subStatusInstance.Value = valueInstance6;
                                    }
                                    
                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null && localizedValueValue6.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance6 = ((string)localizedValueValue6);
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }
                                
                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null && eventTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime eventTimestampInstance = ((DateTime)eventTimestampValue);
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }
                                
                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null && submissionTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime submissionTimestampInstance = ((DateTime)submissionTimestampValue);
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }
                                
                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsForCorrelationIdAsync(ListEventsForCorrelationIdParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.CorrelationId == null)
            {
                throw new ArgumentNullException("parameters.CorrelationId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListEventsForCorrelationIdAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/eventtypes/management/values?";
            url = url + "api-version=2014-04";
            url = url + "&$filter=correlationId eq '" + Uri.EscapeUriString(parameters.CorrelationId.Trim()) + "' and ";
            url = url + "&eventTimestamp ge '" + Uri.EscapeUriString(parameters.StartTime.ToString()) + "' and ";
            if (parameters.EndTime != null)
            {
                url = url + "&eventTimestamp le '" + Uri.EscapeUriString(parameters.EndTime.Value.ToString()) + "' and ";
            }
            if (parameters.EventChannels != null)
            {
                url = url + "&eventChannels eq '" + Uri.EscapeUriString(parameters.EventChannels.Value.ToString()) + "'";
            }
            if (parameters.NextLink != null)
            {
                url = url + "&$skipToken=" + Uri.EscapeUriString(parameters.NextLink != null ? parameters.NextLink.Trim() : "");
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);
                                
                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;
                                    
                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string actionInstance = ((string)actionValue);
                                        authorizationInstance.Action = actionInstance;
                                    }
                                    
                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string conditionInstance = ((string)conditionValue);
                                        authorizationInstance.Condition = conditionInstance;
                                    }
                                    
                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null && roleValue.Type != JTokenType.Null)
                                    {
                                        string roleInstance = ((string)roleValue);
                                        authorizationInstance.Role = roleInstance;
                                    }
                                    
                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                    {
                                        string scopeInstance = ((string)scopeValue);
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }
                                
                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null && channelsValue.Type != JTokenType.Null)
                                {
                                    EventChannels channelsInstance = ((EventChannels)Enum.Parse(typeof(EventChannels), ((string)channelsValue), true));
                                    eventDataInstance.EventChannels = channelsInstance;
                                }
                                
                                JToken claimsSequenceElement = ((JToken)valueValue["claims"]);
                                if (claimsSequenceElement != null && claimsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = ((string)property.Name);
                                        string claimsValue = ((string)property.Value);
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }
                                
                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    eventDataInstance.Description = descriptionInstance;
                                }
                                
                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null && eventDataIdValue.Type != JTokenType.Null)
                                {
                                    string eventDataIdInstance = ((string)eventDataIdValue);
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }
                                
                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                                {
                                    string correlationIdInstance = ((string)correlationIdValue);
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }
                                
                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;
                                    
                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance = ((string)valueValue2);
                                        eventNameInstance.Value = valueInstance;
                                    }
                                    
                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance = ((string)localizedValueValue);
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }
                                
                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;
                                    
                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue3);
                                        eventSourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null && localizedValueValue2.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance2 = ((string)localizedValueValue2);
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }
                                
                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null && httpRequestValue.Type != JTokenType.Null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;
                                    
                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                                    {
                                        string clientRequestIdInstance = ((string)clientRequestIdValue);
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }
                                    
                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null && clientIpAddressValue.Type != JTokenType.Null)
                                    {
                                        string clientIpAddressInstance = ((string)clientIpAddressValue);
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }
                                    
                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        httpRequestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        string uriInstance = ((string)uriValue);
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }
                                
                                JToken levelValue = valueValue["level"];
                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                {
                                    EventLevel levelInstance = ((EventLevel)Enum.Parse(typeof(EventLevel), ((string)levelValue), true));
                                    eventDataInstance.Level = levelInstance;
                                }
                                
                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }
                                
                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;
                                    
                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null && valueValue4.Type != JTokenType.Null)
                                    {
                                        string valueInstance3 = ((string)valueValue4);
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }
                                    
                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null && localizedValueValue3.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance3 = ((string)localizedValueValue3);
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }
                                
                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                                {
                                    string operationIdInstance = ((string)operationIdValue);
                                    eventDataInstance.OperationId = operationIdInstance;
                                }
                                
                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;
                                    
                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null && valueValue5.Type != JTokenType.Null)
                                    {
                                        string valueInstance4 = ((string)valueValue5);
                                        operationNameInstance.Value = valueInstance4;
                                    }
                                    
                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null && localizedValueValue4.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance4 = ((string)localizedValueValue4);
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property2.Name);
                                        string propertiesValue = ((string)property2.Value);
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                                
                                JToken statusValue = valueValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;
                                    
                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null && valueValue6.Type != JTokenType.Null)
                                    {
                                        string valueInstance5 = ((string)valueValue6);
                                        statusInstance.Value = valueInstance5;
                                    }
                                    
                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null && localizedValueValue5.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance5 = ((string)localizedValueValue5);
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }
                                
                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;
                                    
                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null && valueValue7.Type != JTokenType.Null)
                                    {
                                        string valueInstance6 = ((string)valueValue7);
                                        subStatusInstance.Value = valueInstance6;
                                    }
                                    
                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null && localizedValueValue6.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance6 = ((string)localizedValueValue6);
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }
                                
                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null && eventTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime eventTimestampInstance = ((DateTime)eventTimestampValue);
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }
                                
                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null && submissionTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime submissionTimestampInstance = ((DateTime)submissionTimestampValue);
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }
                                
                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsForEventSourceAsync(ListEventsForEventSourceParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.EventSource == null)
            {
                throw new ArgumentNullException("parameters.EventSource");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListEventsForEventSourceAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/eventtypes/management/values?";
            url = url + "api-version=2014-04";
            url = url + "&$filter=eventSource eq '" + Uri.EscapeUriString(parameters.EventSource.Trim()) + "' and ";
            url = url + "&eventTimestamp ge '" + Uri.EscapeUriString(parameters.StartTime.ToString()) + "' and ";
            if (parameters.EndTime != null)
            {
                url = url + "&eventTimestamp le '" + Uri.EscapeUriString(parameters.EndTime.Value.ToString()) + "' and ";
            }
            if (parameters.EventChannels != null)
            {
                url = url + "&eventChannels eq '" + Uri.EscapeUriString(parameters.EventChannels.Value.ToString()) + "'";
            }
            if (parameters.NextLink != null)
            {
                url = url + "&$skipToken=" + Uri.EscapeUriString(parameters.NextLink != null ? parameters.NextLink.Trim() : "");
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);
                                
                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;
                                    
                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string actionInstance = ((string)actionValue);
                                        authorizationInstance.Action = actionInstance;
                                    }
                                    
                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string conditionInstance = ((string)conditionValue);
                                        authorizationInstance.Condition = conditionInstance;
                                    }
                                    
                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null && roleValue.Type != JTokenType.Null)
                                    {
                                        string roleInstance = ((string)roleValue);
                                        authorizationInstance.Role = roleInstance;
                                    }
                                    
                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                    {
                                        string scopeInstance = ((string)scopeValue);
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }
                                
                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null && channelsValue.Type != JTokenType.Null)
                                {
                                    EventChannels channelsInstance = ((EventChannels)Enum.Parse(typeof(EventChannels), ((string)channelsValue), true));
                                    eventDataInstance.EventChannels = channelsInstance;
                                }
                                
                                JToken claimsSequenceElement = ((JToken)valueValue["claims"]);
                                if (claimsSequenceElement != null && claimsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = ((string)property.Name);
                                        string claimsValue = ((string)property.Value);
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }
                                
                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    eventDataInstance.Description = descriptionInstance;
                                }
                                
                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null && eventDataIdValue.Type != JTokenType.Null)
                                {
                                    string eventDataIdInstance = ((string)eventDataIdValue);
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }
                                
                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                                {
                                    string correlationIdInstance = ((string)correlationIdValue);
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }
                                
                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;
                                    
                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance = ((string)valueValue2);
                                        eventNameInstance.Value = valueInstance;
                                    }
                                    
                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance = ((string)localizedValueValue);
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }
                                
                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;
                                    
                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue3);
                                        eventSourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null && localizedValueValue2.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance2 = ((string)localizedValueValue2);
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }
                                
                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null && httpRequestValue.Type != JTokenType.Null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;
                                    
                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                                    {
                                        string clientRequestIdInstance = ((string)clientRequestIdValue);
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }
                                    
                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null && clientIpAddressValue.Type != JTokenType.Null)
                                    {
                                        string clientIpAddressInstance = ((string)clientIpAddressValue);
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }
                                    
                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        httpRequestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        string uriInstance = ((string)uriValue);
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }
                                
                                JToken levelValue = valueValue["level"];
                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                {
                                    EventLevel levelInstance = ((EventLevel)Enum.Parse(typeof(EventLevel), ((string)levelValue), true));
                                    eventDataInstance.Level = levelInstance;
                                }
                                
                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }
                                
                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;
                                    
                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null && valueValue4.Type != JTokenType.Null)
                                    {
                                        string valueInstance3 = ((string)valueValue4);
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }
                                    
                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null && localizedValueValue3.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance3 = ((string)localizedValueValue3);
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }
                                
                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                                {
                                    string operationIdInstance = ((string)operationIdValue);
                                    eventDataInstance.OperationId = operationIdInstance;
                                }
                                
                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;
                                    
                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null && valueValue5.Type != JTokenType.Null)
                                    {
                                        string valueInstance4 = ((string)valueValue5);
                                        operationNameInstance.Value = valueInstance4;
                                    }
                                    
                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null && localizedValueValue4.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance4 = ((string)localizedValueValue4);
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property2.Name);
                                        string propertiesValue = ((string)property2.Value);
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                                
                                JToken statusValue = valueValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;
                                    
                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null && valueValue6.Type != JTokenType.Null)
                                    {
                                        string valueInstance5 = ((string)valueValue6);
                                        statusInstance.Value = valueInstance5;
                                    }
                                    
                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null && localizedValueValue5.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance5 = ((string)localizedValueValue5);
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }
                                
                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;
                                    
                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null && valueValue7.Type != JTokenType.Null)
                                    {
                                        string valueInstance6 = ((string)valueValue7);
                                        subStatusInstance.Value = valueInstance6;
                                    }
                                    
                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null && localizedValueValue6.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance6 = ((string)localizedValueValue6);
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }
                                
                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null && eventTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime eventTimestampInstance = ((DateTime)eventTimestampValue);
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }
                                
                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null && submissionTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime submissionTimestampInstance = ((DateTime)submissionTimestampValue);
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }
                                
                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsForResourceAsync(ListEventsForResourceParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ResourceUri == null)
            {
                throw new ArgumentNullException("parameters.ResourceUri");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListEventsForResourceAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/eventtypes/management/values?";
            url = url + "api-version=2014-04";
            url = url + "&$filter=resourceUri eq '" + Uri.EscapeUriString(parameters.ResourceUri.Trim()) + "' and ";
            url = url + "&eventTimestamp ge '" + Uri.EscapeUriString(parameters.StartTime.ToString()) + "' and ";
            if (parameters.EndTime != null)
            {
                url = url + "&eventTimestamp le '" + Uri.EscapeUriString(parameters.EndTime.Value.ToString()) + "' and ";
            }
            if (parameters.EventChannels != null)
            {
                url = url + "&eventChannels eq '" + Uri.EscapeUriString(parameters.EventChannels.Value.ToString()) + "'";
            }
            if (parameters.NextLink != null)
            {
                url = url + "&$skipToken=" + Uri.EscapeUriString(parameters.NextLink != null ? parameters.NextLink.Trim() : "");
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);
                                
                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;
                                    
                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string actionInstance = ((string)actionValue);
                                        authorizationInstance.Action = actionInstance;
                                    }
                                    
                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string conditionInstance = ((string)conditionValue);
                                        authorizationInstance.Condition = conditionInstance;
                                    }
                                    
                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null && roleValue.Type != JTokenType.Null)
                                    {
                                        string roleInstance = ((string)roleValue);
                                        authorizationInstance.Role = roleInstance;
                                    }
                                    
                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                    {
                                        string scopeInstance = ((string)scopeValue);
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }
                                
                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null && channelsValue.Type != JTokenType.Null)
                                {
                                    EventChannels channelsInstance = ((EventChannels)Enum.Parse(typeof(EventChannels), ((string)channelsValue), true));
                                    eventDataInstance.EventChannels = channelsInstance;
                                }
                                
                                JToken claimsSequenceElement = ((JToken)valueValue["claims"]);
                                if (claimsSequenceElement != null && claimsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = ((string)property.Name);
                                        string claimsValue = ((string)property.Value);
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }
                                
                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    eventDataInstance.Description = descriptionInstance;
                                }
                                
                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null && eventDataIdValue.Type != JTokenType.Null)
                                {
                                    string eventDataIdInstance = ((string)eventDataIdValue);
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }
                                
                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                                {
                                    string correlationIdInstance = ((string)correlationIdValue);
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }
                                
                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;
                                    
                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance = ((string)valueValue2);
                                        eventNameInstance.Value = valueInstance;
                                    }
                                    
                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance = ((string)localizedValueValue);
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }
                                
                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;
                                    
                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue3);
                                        eventSourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null && localizedValueValue2.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance2 = ((string)localizedValueValue2);
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }
                                
                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null && httpRequestValue.Type != JTokenType.Null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;
                                    
                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                                    {
                                        string clientRequestIdInstance = ((string)clientRequestIdValue);
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }
                                    
                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null && clientIpAddressValue.Type != JTokenType.Null)
                                    {
                                        string clientIpAddressInstance = ((string)clientIpAddressValue);
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }
                                    
                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        httpRequestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        string uriInstance = ((string)uriValue);
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }
                                
                                JToken levelValue = valueValue["level"];
                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                {
                                    EventLevel levelInstance = ((EventLevel)Enum.Parse(typeof(EventLevel), ((string)levelValue), true));
                                    eventDataInstance.Level = levelInstance;
                                }
                                
                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }
                                
                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;
                                    
                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null && valueValue4.Type != JTokenType.Null)
                                    {
                                        string valueInstance3 = ((string)valueValue4);
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }
                                    
                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null && localizedValueValue3.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance3 = ((string)localizedValueValue3);
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }
                                
                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                                {
                                    string operationIdInstance = ((string)operationIdValue);
                                    eventDataInstance.OperationId = operationIdInstance;
                                }
                                
                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;
                                    
                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null && valueValue5.Type != JTokenType.Null)
                                    {
                                        string valueInstance4 = ((string)valueValue5);
                                        operationNameInstance.Value = valueInstance4;
                                    }
                                    
                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null && localizedValueValue4.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance4 = ((string)localizedValueValue4);
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property2.Name);
                                        string propertiesValue = ((string)property2.Value);
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                                
                                JToken statusValue = valueValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;
                                    
                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null && valueValue6.Type != JTokenType.Null)
                                    {
                                        string valueInstance5 = ((string)valueValue6);
                                        statusInstance.Value = valueInstance5;
                                    }
                                    
                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null && localizedValueValue5.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance5 = ((string)localizedValueValue5);
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }
                                
                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;
                                    
                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null && valueValue7.Type != JTokenType.Null)
                                    {
                                        string valueInstance6 = ((string)valueValue7);
                                        subStatusInstance.Value = valueInstance6;
                                    }
                                    
                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null && localizedValueValue6.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance6 = ((string)localizedValueValue6);
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }
                                
                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null && eventTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime eventTimestampInstance = ((DateTime)eventTimestampValue);
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }
                                
                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null && submissionTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime submissionTimestampInstance = ((DateTime)submissionTimestampValue);
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }
                                
                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsForResourceGroupAsync(ListEventsForResourceGroupParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ResourceGroupName == null)
            {
                throw new ArgumentNullException("parameters.ResourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListEventsForResourceGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/eventtypes/management/values?";
            url = url + "api-version=2014-04";
            url = url + "&$filter=resourceGroupName eq '" + Uri.EscapeUriString(parameters.ResourceGroupName.Trim()) + "' and ";
            url = url + "&eventTimestamp ge '" + Uri.EscapeUriString(parameters.StartTime.ToString()) + "' and ";
            if (parameters.EndTime != null)
            {
                url = url + "&eventTimestamp le '" + Uri.EscapeUriString(parameters.EndTime.Value.ToString()) + "' and ";
            }
            if (parameters.EventChannels != null)
            {
                url = url + "&eventChannels eq '" + Uri.EscapeUriString(parameters.EventChannels.Value.ToString()) + "'";
            }
            if (parameters.NextLink != null)
            {
                url = url + "&$skipToken=" + Uri.EscapeUriString(parameters.NextLink != null ? parameters.NextLink.Trim() : "");
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);
                                
                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;
                                    
                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string actionInstance = ((string)actionValue);
                                        authorizationInstance.Action = actionInstance;
                                    }
                                    
                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string conditionInstance = ((string)conditionValue);
                                        authorizationInstance.Condition = conditionInstance;
                                    }
                                    
                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null && roleValue.Type != JTokenType.Null)
                                    {
                                        string roleInstance = ((string)roleValue);
                                        authorizationInstance.Role = roleInstance;
                                    }
                                    
                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                    {
                                        string scopeInstance = ((string)scopeValue);
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }
                                
                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null && channelsValue.Type != JTokenType.Null)
                                {
                                    EventChannels channelsInstance = ((EventChannels)Enum.Parse(typeof(EventChannels), ((string)channelsValue), true));
                                    eventDataInstance.EventChannels = channelsInstance;
                                }
                                
                                JToken claimsSequenceElement = ((JToken)valueValue["claims"]);
                                if (claimsSequenceElement != null && claimsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = ((string)property.Name);
                                        string claimsValue = ((string)property.Value);
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }
                                
                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    eventDataInstance.Description = descriptionInstance;
                                }
                                
                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null && eventDataIdValue.Type != JTokenType.Null)
                                {
                                    string eventDataIdInstance = ((string)eventDataIdValue);
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }
                                
                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                                {
                                    string correlationIdInstance = ((string)correlationIdValue);
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }
                                
                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;
                                    
                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance = ((string)valueValue2);
                                        eventNameInstance.Value = valueInstance;
                                    }
                                    
                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance = ((string)localizedValueValue);
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }
                                
                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;
                                    
                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue3);
                                        eventSourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null && localizedValueValue2.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance2 = ((string)localizedValueValue2);
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }
                                
                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null && httpRequestValue.Type != JTokenType.Null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;
                                    
                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                                    {
                                        string clientRequestIdInstance = ((string)clientRequestIdValue);
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }
                                    
                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null && clientIpAddressValue.Type != JTokenType.Null)
                                    {
                                        string clientIpAddressInstance = ((string)clientIpAddressValue);
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }
                                    
                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        httpRequestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        string uriInstance = ((string)uriValue);
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }
                                
                                JToken levelValue = valueValue["level"];
                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                {
                                    EventLevel levelInstance = ((EventLevel)Enum.Parse(typeof(EventLevel), ((string)levelValue), true));
                                    eventDataInstance.Level = levelInstance;
                                }
                                
                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }
                                
                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;
                                    
                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null && valueValue4.Type != JTokenType.Null)
                                    {
                                        string valueInstance3 = ((string)valueValue4);
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }
                                    
                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null && localizedValueValue3.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance3 = ((string)localizedValueValue3);
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }
                                
                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                                {
                                    string operationIdInstance = ((string)operationIdValue);
                                    eventDataInstance.OperationId = operationIdInstance;
                                }
                                
                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;
                                    
                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null && valueValue5.Type != JTokenType.Null)
                                    {
                                        string valueInstance4 = ((string)valueValue5);
                                        operationNameInstance.Value = valueInstance4;
                                    }
                                    
                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null && localizedValueValue4.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance4 = ((string)localizedValueValue4);
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property2.Name);
                                        string propertiesValue = ((string)property2.Value);
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                                
                                JToken statusValue = valueValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;
                                    
                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null && valueValue6.Type != JTokenType.Null)
                                    {
                                        string valueInstance5 = ((string)valueValue6);
                                        statusInstance.Value = valueInstance5;
                                    }
                                    
                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null && localizedValueValue5.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance5 = ((string)localizedValueValue5);
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }
                                
                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;
                                    
                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null && valueValue7.Type != JTokenType.Null)
                                    {
                                        string valueInstance6 = ((string)valueValue7);
                                        subStatusInstance.Value = valueInstance6;
                                    }
                                    
                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null && localizedValueValue6.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance6 = ((string)localizedValueValue6);
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }
                                
                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null && eventTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime eventTimestampInstance = ((DateTime)eventTimestampValue);
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }
                                
                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null && submissionTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime submissionTimestampInstance = ((DateTime)submissionTimestampValue);
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }
                                
                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Event Values operation lists the events.
        /// </summary>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Events operation response.
        /// </returns>
        public async Task<EventDataListResponse> ListEventsForResourceProviderAsync(ListEventsForResourceProviderParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ResourceProvider == null)
            {
                throw new ArgumentNullException("parameters.ResourceProvider");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListEventsForResourceProviderAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/eventtypes/management/values?";
            url = url + "api-version=2014-04";
            url = url + "&$filter=resourceProvider eq '" + Uri.EscapeUriString(parameters.ResourceProvider.Trim()) + "' and ";
            url = url + "&eventTimestamp ge '" + Uri.EscapeUriString(parameters.StartTime.ToString()) + "' and ";
            if (parameters.EndTime != null)
            {
                url = url + "&eventTimestamp le '" + Uri.EscapeUriString(parameters.EndTime.Value.ToString()) + "' and ";
            }
            if (parameters.EventChannels != null)
            {
                url = url + "&eventChannels eq '" + Uri.EscapeUriString(parameters.EventChannels.Value.ToString()) + "'";
            }
            if (parameters.NextLink != null)
            {
                url = url + "&$skipToken=" + Uri.EscapeUriString(parameters.NextLink != null ? parameters.NextLink.Trim() : "");
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    EventDataListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new EventDataListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        EventDataCollection eventDataCollectionInstance = new EventDataCollection();
                        result.EventDataCollection = eventDataCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                EventData eventDataInstance = new EventData();
                                eventDataCollectionInstance.Value.Add(eventDataInstance);
                                
                                JToken authorizationValue = valueValue["authorization"];
                                if (authorizationValue != null && authorizationValue.Type != JTokenType.Null)
                                {
                                    SenderAuthorization authorizationInstance = new SenderAuthorization();
                                    eventDataInstance.Authorization = authorizationInstance;
                                    
                                    JToken actionValue = authorizationValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string actionInstance = ((string)actionValue);
                                        authorizationInstance.Action = actionInstance;
                                    }
                                    
                                    JToken conditionValue = authorizationValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string conditionInstance = ((string)conditionValue);
                                        authorizationInstance.Condition = conditionInstance;
                                    }
                                    
                                    JToken roleValue = authorizationValue["role"];
                                    if (roleValue != null && roleValue.Type != JTokenType.Null)
                                    {
                                        string roleInstance = ((string)roleValue);
                                        authorizationInstance.Role = roleInstance;
                                    }
                                    
                                    JToken scopeValue = authorizationValue["scope"];
                                    if (scopeValue != null && scopeValue.Type != JTokenType.Null)
                                    {
                                        string scopeInstance = ((string)scopeValue);
                                        authorizationInstance.Scope = scopeInstance;
                                    }
                                }
                                
                                JToken channelsValue = valueValue["channels"];
                                if (channelsValue != null && channelsValue.Type != JTokenType.Null)
                                {
                                    EventChannels channelsInstance = ((EventChannels)Enum.Parse(typeof(EventChannels), ((string)channelsValue), true));
                                    eventDataInstance.EventChannels = channelsInstance;
                                }
                                
                                JToken claimsSequenceElement = ((JToken)valueValue["claims"]);
                                if (claimsSequenceElement != null && claimsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in claimsSequenceElement)
                                    {
                                        string claimsKey = ((string)property.Name);
                                        string claimsValue = ((string)property.Value);
                                        eventDataInstance.Claims.Add(claimsKey, claimsValue);
                                    }
                                }
                                
                                JToken descriptionValue = valueValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    eventDataInstance.Description = descriptionInstance;
                                }
                                
                                JToken eventDataIdValue = valueValue["eventDataId"];
                                if (eventDataIdValue != null && eventDataIdValue.Type != JTokenType.Null)
                                {
                                    string eventDataIdInstance = ((string)eventDataIdValue);
                                    eventDataInstance.EventDataId = eventDataIdInstance;
                                }
                                
                                JToken correlationIdValue = valueValue["correlationId"];
                                if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                                {
                                    string correlationIdInstance = ((string)correlationIdValue);
                                    eventDataInstance.CorrelationId = correlationIdInstance;
                                }
                                
                                JToken eventNameValue = valueValue["eventName"];
                                if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventNameInstance = new LocalizableString();
                                    eventDataInstance.EventName = eventNameInstance;
                                    
                                    JToken valueValue2 = eventNameValue["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance = ((string)valueValue2);
                                        eventNameInstance.Value = valueInstance;
                                    }
                                    
                                    JToken localizedValueValue = eventNameValue["localizedValue"];
                                    if (localizedValueValue != null && localizedValueValue.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance = ((string)localizedValueValue);
                                        eventNameInstance.LocalizedValue = localizedValueInstance;
                                    }
                                }
                                
                                JToken eventSourceValue = valueValue["eventSource"];
                                if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                {
                                    LocalizableString eventSourceInstance = new LocalizableString();
                                    eventDataInstance.EventSource = eventSourceInstance;
                                    
                                    JToken valueValue3 = eventSourceValue["value"];
                                    if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue3);
                                        eventSourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken localizedValueValue2 = eventSourceValue["localizedValue"];
                                    if (localizedValueValue2 != null && localizedValueValue2.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance2 = ((string)localizedValueValue2);
                                        eventSourceInstance.LocalizedValue = localizedValueInstance2;
                                    }
                                }
                                
                                JToken httpRequestValue = valueValue["httpRequest"];
                                if (httpRequestValue != null && httpRequestValue.Type != JTokenType.Null)
                                {
                                    HttpRequestInfo httpRequestInstance = new HttpRequestInfo();
                                    eventDataInstance.HttpRequest = httpRequestInstance;
                                    
                                    JToken clientRequestIdValue = httpRequestValue["clientRequestId"];
                                    if (clientRequestIdValue != null && clientRequestIdValue.Type != JTokenType.Null)
                                    {
                                        string clientRequestIdInstance = ((string)clientRequestIdValue);
                                        httpRequestInstance.ClientRequestId = clientRequestIdInstance;
                                    }
                                    
                                    JToken clientIpAddressValue = httpRequestValue["clientIpAddress"];
                                    if (clientIpAddressValue != null && clientIpAddressValue.Type != JTokenType.Null)
                                    {
                                        string clientIpAddressInstance = ((string)clientIpAddressValue);
                                        httpRequestInstance.ClientIpAddress = clientIpAddressInstance;
                                    }
                                    
                                    JToken methodValue = httpRequestValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        httpRequestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken uriValue = httpRequestValue["uri"];
                                    if (uriValue != null && uriValue.Type != JTokenType.Null)
                                    {
                                        string uriInstance = ((string)uriValue);
                                        httpRequestInstance.Uri = uriInstance;
                                    }
                                }
                                
                                JToken levelValue = valueValue["level"];
                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                {
                                    EventLevel levelInstance = ((EventLevel)Enum.Parse(typeof(EventLevel), ((string)levelValue), true));
                                    eventDataInstance.Level = levelInstance;
                                }
                                
                                JToken resourceGroupNameValue = valueValue["resourceGroupName"];
                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                    eventDataInstance.ResourceGroupName = resourceGroupNameInstance;
                                }
                                
                                JToken resourceProviderNameValue = valueValue["resourceProviderName"];
                                if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString resourceProviderNameInstance = new LocalizableString();
                                    eventDataInstance.ResourceProviderName = resourceProviderNameInstance;
                                    
                                    JToken valueValue4 = resourceProviderNameValue["value"];
                                    if (valueValue4 != null && valueValue4.Type != JTokenType.Null)
                                    {
                                        string valueInstance3 = ((string)valueValue4);
                                        resourceProviderNameInstance.Value = valueInstance3;
                                    }
                                    
                                    JToken localizedValueValue3 = resourceProviderNameValue["localizedValue"];
                                    if (localizedValueValue3 != null && localizedValueValue3.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance3 = ((string)localizedValueValue3);
                                        resourceProviderNameInstance.LocalizedValue = localizedValueInstance3;
                                    }
                                }
                                
                                JToken resourceUriValue = valueValue["resourceUri"];
                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                {
                                    string resourceUriInstance = ((string)resourceUriValue);
                                    eventDataInstance.ResourceUri = resourceUriInstance;
                                }
                                
                                JToken operationIdValue = valueValue["operationId"];
                                if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                                {
                                    string operationIdInstance = ((string)operationIdValue);
                                    eventDataInstance.OperationId = operationIdInstance;
                                }
                                
                                JToken operationNameValue = valueValue["operationName"];
                                if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                {
                                    LocalizableString operationNameInstance = new LocalizableString();
                                    eventDataInstance.OperationName = operationNameInstance;
                                    
                                    JToken valueValue5 = operationNameValue["value"];
                                    if (valueValue5 != null && valueValue5.Type != JTokenType.Null)
                                    {
                                        string valueInstance4 = ((string)valueValue5);
                                        operationNameInstance.Value = valueInstance4;
                                    }
                                    
                                    JToken localizedValueValue4 = operationNameValue["localizedValue"];
                                    if (localizedValueValue4 != null && localizedValueValue4.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance4 = ((string)localizedValueValue4);
                                        operationNameInstance.LocalizedValue = localizedValueInstance4;
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)valueValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property2.Name);
                                        string propertiesValue = ((string)property2.Value);
                                        eventDataInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                                
                                JToken statusValue = valueValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString statusInstance = new LocalizableString();
                                    eventDataInstance.Status = statusInstance;
                                    
                                    JToken valueValue6 = statusValue["value"];
                                    if (valueValue6 != null && valueValue6.Type != JTokenType.Null)
                                    {
                                        string valueInstance5 = ((string)valueValue6);
                                        statusInstance.Value = valueInstance5;
                                    }
                                    
                                    JToken localizedValueValue5 = statusValue["localizedValue"];
                                    if (localizedValueValue5 != null && localizedValueValue5.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance5 = ((string)localizedValueValue5);
                                        statusInstance.LocalizedValue = localizedValueInstance5;
                                    }
                                }
                                
                                JToken subStatusValue = valueValue["subStatus"];
                                if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                {
                                    LocalizableString subStatusInstance = new LocalizableString();
                                    eventDataInstance.SubStatus = subStatusInstance;
                                    
                                    JToken valueValue7 = subStatusValue["value"];
                                    if (valueValue7 != null && valueValue7.Type != JTokenType.Null)
                                    {
                                        string valueInstance6 = ((string)valueValue7);
                                        subStatusInstance.Value = valueInstance6;
                                    }
                                    
                                    JToken localizedValueValue6 = subStatusValue["localizedValue"];
                                    if (localizedValueValue6 != null && localizedValueValue6.Type != JTokenType.Null)
                                    {
                                        string localizedValueInstance6 = ((string)localizedValueValue6);
                                        subStatusInstance.LocalizedValue = localizedValueInstance6;
                                    }
                                }
                                
                                JToken eventTimestampValue = valueValue["eventTimestamp"];
                                if (eventTimestampValue != null && eventTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime eventTimestampInstance = ((DateTime)eventTimestampValue);
                                    eventDataInstance.EventTimestamp = eventTimestampInstance;
                                }
                                
                                JToken submissionTimestampValue = valueValue["submissionTimestamp"];
                                if (submissionTimestampValue != null && submissionTimestampValue.Type != JTokenType.Null)
                                {
                                    DateTime submissionTimestampInstance = ((DateTime)submissionTimestampValue);
                                    eventDataInstance.SubmissionTimestamp = submissionTimestampInstance;
                                }
                                
                                JToken subscriptionIdValue = valueValue["subscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    eventDataInstance.SubscriptionId = subscriptionIdInstance;
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            eventDataCollectionInstance.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
