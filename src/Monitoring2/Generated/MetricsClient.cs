// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Monitoring.Metrics;
using Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models
{
    /// <summary>
    /// The setting for Endpoint monitoring.
    /// </summary>
    public partial class AvailabilityMetricSettingValue : MetricSettingValue
    {
        private IList<NameConfig> _availableLocations;
        
        /// <summary>
        /// Optional. The locations from which the Urls can be monitored.
        /// </summary>
        public IList<NameConfig> AvailableLocations
        {
            get { return this._availableLocations; }
            set { this._availableLocations = value; }
        }
        
        private IList<EndpointConfig> _endpoints;
        
        /// <summary>
        /// Required. The configuration for Urls to be monitored using endpoint
        /// monitoiring.
        /// </summary>
        public IList<EndpointConfig> Endpoints
        {
            get { return this._endpoints; }
            set { this._endpoints = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AvailabilityMetricSettingValue
        /// class.
        /// </summary>
        public AvailabilityMetricSettingValue()
        {
            this._availableLocations = new List<NameConfig>();
            this._endpoints = new List<EndpointConfig>();
        }
    }
    
    /// <summary>
    /// The configuration to enable endpoint monitoring for a Url.
    /// </summary>
    public partial class EndpointConfig
    {
        private string _configId;
        
        /// <summary>
        /// Optional. The config id for endpoint monitoring config.
        /// </summary>
        public string ConfigId
        {
            get { return this._configId; }
            set { this._configId = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location from which the endpoint is monitored.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The friendly name for the url for which endpoint
        /// monitoring is configured.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Uri _url;
        
        /// <summary>
        /// Optional. The Url to be monitored.
        /// </summary>
        public Uri Url
        {
            get { return this._url; }
            set { this._url = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EndpointConfig class.
        /// </summary>
        public EndpointConfig()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the List metricdefinitions operation.
    /// </summary>
    public partial class ListMetricDefinitionParameters
    {
        private IList<string> _metricNames;
        
        /// <summary>
        /// Required. The names of the metrics.
        /// </summary>
        public IList<string> MetricNames
        {
            get { return this._metricNames; }
            set { this._metricNames = value; }
        }
        
        private string _resourceId;
        
        /// <summary>
        /// Required. The id of the resource.
        /// </summary>
        public string ResourceId
        {
            get { return this._resourceId; }
            set { this._resourceId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ListMetricDefinitionParameters
        /// class.
        /// </summary>
        public ListMetricDefinitionParameters()
        {
            this._metricNames = new List<string>();
        }
    }
    
    /// <summary>
    /// Parameters supplied to the List metrics operation.
    /// </summary>
    public partial class ListMetricParameters
    {
        private DateTime _endTime;
        
        /// <summary>
        /// Required. The end time of the metrics.
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private IList<string> _metricNames;
        
        /// <summary>
        /// Required. The names of the metrics.
        /// </summary>
        public IList<string> MetricNames
        {
            get { return this._metricNames; }
            set { this._metricNames = value; }
        }
        
        private string _resourceId;
        
        /// <summary>
        /// Required. The id of the resource.
        /// </summary>
        public string ResourceId
        {
            get { return this._resourceId; }
            set { this._resourceId = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Required. The start time of the metrics.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Required. The time grain of the metrics.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ListMetricParameters class.
        /// </summary>
        public ListMetricParameters()
        {
            this._metricNames = new List<string>();
        }
    }
    
    /// <summary>
    /// Metric availability specifies the time grain (aggregation interval) and
    /// the retention period for that timegrain.
    /// </summary>
    public partial class MetricAvailability
    {
        private TimeSpan _retention;
        
        /// <summary>
        /// Optional. The retention period for the metric at the specified
        /// timegrain.
        /// </summary>
        public TimeSpan Retention
        {
            get { return this._retention; }
            set { this._retention = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Optional. The time grain specifies the aggregation interval for the
        /// metric.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricAvailability class.
        /// </summary>
        public MetricAvailability()
        {
        }
    }
    
    /// <summary>
    /// Metric definition class specifies the metadata for a metric.
    /// </summary>
    public partial class MetricDefinition
    {
        private string _displayName;
        
        /// <summary>
        /// Optional. Metric display name.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private bool _isAlertable;
        
        /// <summary>
        /// Optional. Specifies if the metric is alertable. Alerts can be
        /// defined on a metric only if this property is true.
        /// </summary>
        public bool IsAlertable
        {
            get { return this._isAlertable; }
            set { this._isAlertable = value; }
        }
        
        private IList<MetricAvailability> _metricAvailabilities;
        
        /// <summary>
        /// Optional. Metric availability specifies the time grain (aggregation
        /// interval) and the retention period for the metric in a timegrain.
        /// </summary>
        public IList<MetricAvailability> MetricAvailabilities
        {
            get { return this._metricAvailabilities; }
            set { this._metricAvailabilities = value; }
        }
        
        private TimeSpan _minimumAlertableTimeWindow;
        
        /// <summary>
        /// Optional. Specifies the minimum alertable time window for the
        /// metric.
        /// </summary>
        public TimeSpan MinimumAlertableTimeWindow
        {
            get { return this._minimumAlertableTimeWindow; }
            set { this._minimumAlertableTimeWindow = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Get the metric name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _namespace;
        
        /// <summary>
        /// Optional. Get the metric namespace.
        /// </summary>
        public string Namespace
        {
            get { return this._namespace; }
            set { this._namespace = value; }
        }
        
        private string _primaryAggregation;
        
        /// <summary>
        /// Optional. Metric primary aggregation specifies the default type for
        /// the metrics. This indicates if the metric is of type average,
        /// total, minimum or maximum.
        /// </summary>
        public string PrimaryAggregation
        {
            get { return this._primaryAggregation; }
            set { this._primaryAggregation = value; }
        }
        
        private string _resourceIdSuffix;
        
        /// <summary>
        /// Optional. Metric resource id suffix specfies the sub-resource path
        /// within the the resource for the metric.
        /// </summary>
        public string ResourceIdSuffix
        {
            get { return this._resourceIdSuffix; }
            set { this._resourceIdSuffix = value; }
        }
        
        private string _unit;
        
        /// <summary>
        /// Optional. The unit for the metric.
        /// </summary>
        public string Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>
        public MetricDefinition()
        {
            this._metricAvailabilities = new List<MetricAvailability>();
        }
    }
    
    /// <summary>
    /// Represents collection of metric definitions.
    /// </summary>
    public partial class MetricDefinitionCollection
    {
        private IList<MetricDefinition> _value;
        
        /// <summary>
        /// Optional. The values for the metric definitions.
        /// </summary>
        public IList<MetricDefinition> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinitionCollection class.
        /// </summary>
        public MetricDefinitionCollection()
        {
            this._value = new List<MetricDefinition>();
        }
    }
    
    /// <summary>
    /// The List Metric Definitions operation response.
    /// </summary>
    public partial class MetricDefinitionListResponse : OperationResponse
    {
        private MetricDefinitionCollection _metricDefinitionCollection;
        
        /// <summary>
        /// Optional. The retrieved metric definitions.
        /// </summary>
        public MetricDefinitionCollection MetricDefinitionCollection
        {
            get { return this._metricDefinitionCollection; }
            set { this._metricDefinitionCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinitionListResponse
        /// class.
        /// </summary>
        public MetricDefinitionListResponse()
        {
        }
    }
    
    /// <summary>
    /// A metric setting get response.
    /// </summary>
    public partial class MetricSetting
    {
        private string _namespace;
        
        /// <summary>
        /// Optional. The metric settings namespace. For endpoint monitoring
        /// metrics the namespace value is WindowsAzure.Availability
        /// </summary>
        public string Namespace
        {
            get { return this._namespace; }
            set { this._namespace = value; }
        }
        
        private string _resourceId;
        
        /// <summary>
        /// Required. The resource id of the service.
        /// </summary>
        public string ResourceId
        {
            get { return this._resourceId; }
            set { this._resourceId = value; }
        }
        
        private MetricSettingValue _value;
        
        /// <summary>
        /// Required. The metric settings value.
        /// </summary>
        public MetricSettingValue Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricSetting class.
        /// </summary>
        public MetricSetting()
        {
        }
    }
    
    /// <summary>
    /// A metric setting list response collection.
    /// </summary>
    public partial class MetricSettingCollection
    {
        private IList<MetricSetting> _value;
        
        /// <summary>
        /// Optional. The collection.
        /// </summary>
        public IList<MetricSetting> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricSettingCollection class.
        /// </summary>
        public MetricSettingCollection()
        {
            this._value = new List<MetricSetting>();
        }
    }
    
    /// <summary>
    /// The list metric settings operation response.
    /// </summary>
    public partial class MetricSettingListResponse : OperationResponse
    {
        private MetricSettingCollection _metricSettingCollection;
        
        /// <summary>
        /// Optional. The retrieved metric settings.
        /// </summary>
        public MetricSettingCollection MetricSettingCollection
        {
            get { return this._metricSettingCollection; }
            set { this._metricSettingCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricSettingListResponse class.
        /// </summary>
        public MetricSettingListResponse()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Put Metric Settings operation.
    /// </summary>
    public partial class MetricSettingsPutParameters
    {
        private MetricSetting _metricSetting;
        
        /// <summary>
        /// Required. Required. The metric setting.
        /// </summary>
        public MetricSetting MetricSetting
        {
            get { return this._metricSetting; }
            set { this._metricSetting = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricSettingsPutParameters class.
        /// </summary>
        public MetricSettingsPutParameters()
        {
        }
    }
    
    /// <summary>
    /// A metric setting get response.
    /// </summary>
    public abstract partial class MetricSettingValue
    {
        /// <summary>
        /// Initializes a new instance of the MetricSettingValue class.
        /// </summary>
        public MetricSettingValue()
        {
        }
    }
    
    /// <summary>
    /// Represents a metric value.
    /// </summary>
    public partial class MetricValue
    {
        private string _annotation;
        
        /// <summary>
        /// Optional. Specifies annotation for the metric.
        /// </summary>
        public string Annotation
        {
            get { return this._annotation; }
            set { this._annotation = value; }
        }
        
        private double? _average;
        
        /// <summary>
        /// Optional. Specifies the average value in the time interval.
        /// </summary>
        public double? Average
        {
            get { return this._average; }
            set { this._average = value; }
        }
        
        private int? _count;
        
        /// <summary>
        /// Optional. Specifies the sample count in the time interval. Can be
        /// used to determine the number of values that contributed to the
        /// average value.
        /// </summary>
        public int? Count
        {
            get { return this._count; }
            set { this._count = value; }
        }
        
        private double? _maximum;
        
        /// <summary>
        /// Optional. Specifies the maximum value in the time interval.
        /// </summary>
        public double? Maximum
        {
            get { return this._maximum; }
            set { this._maximum = value; }
        }
        
        private double? _minimum;
        
        /// <summary>
        /// Optional. Specifies the minimum value in the time interval.
        /// </summary>
        public double? Minimum
        {
            get { return this._minimum; }
            set { this._minimum = value; }
        }
        
        private DateTime _timestamp;
        
        /// <summary>
        /// Optional. The timestamp for the metric value.
        /// </summary>
        public DateTime Timestamp
        {
            get { return this._timestamp; }
            set { this._timestamp = value; }
        }
        
        private double? _total;
        
        /// <summary>
        /// Optional. Specifies the total value in the time interval.
        /// </summary>
        public double? Total
        {
            get { return this._total; }
            set { this._total = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValue class.
        /// </summary>
        public MetricValue()
        {
        }
    }
    
    /// <summary>
    /// The List Metric values operation response.
    /// </summary>
    public partial class MetricValueListResponse : OperationResponse
    {
        private MetricValueSetCollection _metricValueSetCollection;
        
        /// <summary>
        /// Optional. The retrieved metric value sets.
        /// </summary>
        public MetricValueSetCollection MetricValueSetCollection
        {
            get { return this._metricValueSetCollection; }
            set { this._metricValueSetCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValueListResponse class.
        /// </summary>
        public MetricValueListResponse()
        {
        }
    }
    
    /// <summary>
    /// A metric value set represents a set of metric values in a time period.
    /// </summary>
    public partial class MetricValueSet
    {
        private string _displayName;
        
        /// <summary>
        /// Optional. Metric display name.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private DateTime _endTime;
        
        /// <summary>
        /// Optional. The end time in UTC for the metric queried.
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private IList<MetricValue> _metricValues;
        
        /// <summary>
        /// Optional. Metric values.
        /// </summary>
        public IList<MetricValue> MetricValues
        {
            get { return this._metricValues; }
            set { this._metricValues = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Metric name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _namespace;
        
        /// <summary>
        /// Optional. Metric namespace.
        /// </summary>
        public string Namespace
        {
            get { return this._namespace; }
            set { this._namespace = value; }
        }
        
        private string _primaryAggregation;
        
        /// <summary>
        /// Optional. Metric primary aggregation.
        /// </summary>
        public string PrimaryAggregation
        {
            get { return this._primaryAggregation; }
            set { this._primaryAggregation = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Optional. The start time in UTC for the metric queried.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Optional. The time grain specifies the aggregation period of the
        /// metric value.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        private string _unit;
        
        /// <summary>
        /// Optional. Metric unit.
        /// </summary>
        public string Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValueSet class.
        /// </summary>
        public MetricValueSet()
        {
            this._metricValues = new List<MetricValue>();
        }
    }
    
    /// <summary>
    /// The collection of metric value sets.
    /// </summary>
    public partial class MetricValueSetCollection
    {
        private IList<MetricValueSet> _value;
        
        /// <summary>
        /// Optional. The collection.
        /// </summary>
        public IList<MetricValueSet> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValueSetCollection class.
        /// </summary>
        public MetricValueSetCollection()
        {
            this._value = new List<MetricValueSet>();
        }
    }
    
    /// <summary>
    /// An availability metric name config.
    /// </summary>
    public partial class NameConfig
    {
        private string _displayName;
        
        /// <summary>
        /// Optional. Availability metric name config display name.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Availability metric name config name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NameConfig class.
        /// </summary>
        public NameConfig()
        {
        }
    }
}

namespace Microsoft.WindowsAzure.Management.Monitoring.Models
{
    /// <summary>
    /// Endpoint monitoring location.
    /// </summary>
    public static partial class EndpointMonitoringLocation
    {
        /// <summary>
        /// Location - Chicago, IL USA.
        /// </summary>
        public const string USChicagoIL = "us-il-ch1-azr";
        
        /// <summary>
        /// Location - San Antonio, TX USA.
        /// </summary>
        public const string USSanAntonioTX = "us-tx-sn1-azr";
        
        /// <summary>
        /// Location - San Jose, CA USA.
        /// </summary>
        public const string USSanJoseCA = "us-ca-sjc-azr";
        
        /// <summary>
        /// Location - Ashburn, VA USA.
        /// </summary>
        public const string USAshburnVA = "us-va-ash-azr";
        
        /// <summary>
        /// Location - Dublin, Ireland.
        /// </summary>
        public const string IEDublin = "emea-gb-db3-azr";
        
        /// <summary>
        /// Location - Amsterdam, Netherlands.
        /// </summary>
        public const string NLAmsterdam = "emea-nl-ams-azr";
        
        /// <summary>
        /// Location - Hongkong.
        /// </summary>
        public const string HKHongkong = "apac-hk-hkn-azr";
        
        /// <summary>
        /// Location - Singapore.
        /// </summary>
        public const string SGSingapore = "apac-sg-sin-azr";
    }
    
    /// <summary>
    /// Metric namespace value.
    /// </summary>
    public static partial class MetricNamespace
    {
        /// <summary>
        /// Empty namespace.
        /// </summary>
        public const string None = "";
        
        /// <summary>
        /// Endpoint monitoring metric namespace.
        /// </summary>
        public const string EndpointMonitoring = "WindowsAzure.Availability";
    }
}

namespace Microsoft.WindowsAzure.Management.Monitoring.Metrics
{
    public static partial class MetricsClientExtensions
    {
    }
    
    public partial interface IMetricsClient : IDisposable
    {
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Windows Azure subscription id.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        IMetricDefinitionOperations MetricDefinitions
        {
            get; 
        }
        
        IMetricSettingOperations MetricSettings
        {
            get; 
        }
        
        IMetricValueOperations MetricValues
        {
            get; 
        }
    }
    
    public partial class MetricsClient : ServiceClient<MetricsClient>, IMetricsClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Windows Azure subscription id.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IMetricDefinitionOperations _metricDefinitions;
        
        public virtual IMetricDefinitionOperations MetricDefinitions
        {
            get { return this._metricDefinitions; }
        }
        
        private IMetricSettingOperations _metricSettings;
        
        public virtual IMetricSettingOperations MetricSettings
        {
            get { return this._metricSettings; }
        }
        
        private IMetricValueOperations _metricValues;
        
        public virtual IMetricValueOperations MetricValues
        {
            get { return this._metricValues; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsClient class.
        /// </summary>
        private MetricsClient()
            : base()
        {
            this._metricDefinitions = new MetricDefinitionOperations(this);
            this._metricSettings = new MetricSettingOperations(this);
            this._metricValues = new MetricValueOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Windows Azure subscription id.
        /// </param>
        /// <param name='baseUri'>
        /// Required. Optional base uri parameter.
        /// </param>
        public MetricsClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Windows Azure subscription id.
        /// </param>
        public MetricsClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    public static partial class MetricDefinitionOperationsExtensions
    {
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricDefinitionOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        public static MetricDefinitionListResponse List(this IMetricDefinitionOperations operations, ListMetricDefinitionParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricDefinitionOperations)s).ListAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricDefinitionOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        public static Task<MetricDefinitionListResponse> ListAsync(this IMetricDefinitionOperations operations, ListMetricDefinitionParameters parameters)
        {
            return operations.ListAsync(parameters, CancellationToken.None);
        }
    }
    
    public partial interface IMetricDefinitionOperations
    {
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        Task<MetricDefinitionListResponse> ListAsync(ListMetricDefinitionParameters parameters, CancellationToken cancellationToken);
    }
    
    internal partial class MetricDefinitionOperations : IServiceOperations<MetricsClient>, IMetricDefinitionOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricDefinitionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricDefinitionOperations(MetricsClient client)
        {
            this._client = client;
        }
        
        private MetricsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.MetricsClient.
        /// </summary>
        public MetricsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        public async Task<MetricDefinitionListResponse> ListAsync(ListMetricDefinitionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.MetricNames == null)
            {
                throw new ArgumentNullException("parameters.MetricNames");
            }
            if (parameters.ResourceId == null)
            {
                throw new ArgumentNullException("parameters.ResourceId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/metricDefinitions/resource/" + parameters.ResourceId.Trim() + "?";
            url = url + "api-version=2014-01";
            url = url + "&names=" + Uri.EscapeUriString(string.Join(",", parameters.MetricNames));
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new MetricDefinitionListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        MetricDefinitionCollection metricDefinitionCollectionInstance = new MetricDefinitionCollection();
                        result.MetricDefinitionCollection = metricDefinitionCollectionInstance;
                        
                        JToken valueArray = responseDoc["Value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                metricDefinitionCollectionInstance.Value.Add(metricDefinitionInstance);
                                
                                JToken nameValue = valueValue["Name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    metricDefinitionInstance.Name = nameInstance;
                                }
                                
                                JToken namespaceValue = valueValue["Namespace"];
                                if (namespaceValue != null && namespaceValue.Type != JTokenType.Null)
                                {
                                    string namespaceInstance = ((string)namespaceValue);
                                    metricDefinitionInstance.Namespace = namespaceInstance;
                                }
                                
                                JToken resourceIdSuffixValue = valueValue["ResourceIdSuffix"];
                                if (resourceIdSuffixValue != null && resourceIdSuffixValue.Type != JTokenType.Null)
                                {
                                    string resourceIdSuffixInstance = ((string)resourceIdSuffixValue);
                                    metricDefinitionInstance.ResourceIdSuffix = resourceIdSuffixInstance;
                                }
                                
                                JToken displayNameValue = valueValue["DisplayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    metricDefinitionInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken unitValue = valueValue["Unit"];
                                if (unitValue != null && unitValue.Type != JTokenType.Null)
                                {
                                    string unitInstance = ((string)unitValue);
                                    metricDefinitionInstance.Unit = unitInstance;
                                }
                                
                                JToken primaryAggregationValue = valueValue["PrimaryAggregation"];
                                if (primaryAggregationValue != null && primaryAggregationValue.Type != JTokenType.Null)
                                {
                                    string primaryAggregationInstance = ((string)primaryAggregationValue);
                                    metricDefinitionInstance.PrimaryAggregation = primaryAggregationInstance;
                                }
                                
                                JToken metricAvailabilitiesArray = valueValue["MetricAvailabilities"];
                                if (metricAvailabilitiesArray != null && metricAvailabilitiesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken metricAvailabilitiesValue in ((JArray)metricAvailabilitiesArray))
                                    {
                                        MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                        metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                        
                                        JToken timeGrainValue = metricAvailabilitiesValue["TimeGrain"];
                                        if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan timeGrainInstance = TypeConversion.From8601TimeSpan(((string)timeGrainValue));
                                            metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                        }
                                        
                                        JToken retentionValue = metricAvailabilitiesValue["Retention"];
                                        if (retentionValue != null && retentionValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retentionInstance = TypeConversion.From8601TimeSpan(((string)retentionValue));
                                            metricAvailabilityInstance.Retention = retentionInstance;
                                        }
                                    }
                                }
                                
                                JToken minimumAlertableTimeWindowValue = valueValue["MinimumAlertableTimeWindow"];
                                if (minimumAlertableTimeWindowValue != null && minimumAlertableTimeWindowValue.Type != JTokenType.Null)
                                {
                                    TimeSpan minimumAlertableTimeWindowInstance = TypeConversion.From8601TimeSpan(((string)minimumAlertableTimeWindowValue));
                                    metricDefinitionInstance.MinimumAlertableTimeWindow = minimumAlertableTimeWindowInstance;
                                }
                                
                                JToken isAlertableValue = valueValue["IsAlertable"];
                                if (isAlertableValue != null && isAlertableValue.Type != JTokenType.Null)
                                {
                                    bool isAlertableInstance = ((bool)isAlertableValue);
                                    metricDefinitionInstance.IsAlertable = isAlertableInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class MetricSettingOperationsExtensions
    {
        /// <summary>
        /// The Put Metric Settings operation creates or updates the metric
        /// settings for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricSettingOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Metric settings to be created or updated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdate(this IMetricSettingOperations operations, MetricSettingsPutParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricSettingOperations)s).CreateOrUpdateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The Put Metric Settings operation creates or updates the metric
        /// settings for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricSettingOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Metric settings to be created or updated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateAsync(this IMetricSettingOperations operations, MetricSettingsPutParameters parameters)
        {
            return operations.CreateOrUpdateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Metric Settings operation lists the metric settings for
        /// the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricSettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required. The id of the resource.
        /// </param>
        /// <param name='metricNamespace'>
        /// Required. The namespace of the metrics.
        /// </param>
        /// <returns>
        /// The list metric settings operation response.
        /// </returns>
        public static MetricSettingListResponse List(this IMetricSettingOperations operations, string resourceId, string metricNamespace)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricSettingOperations)s).ListAsync(resourceId, metricNamespace);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Metric Settings operation lists the metric settings for
        /// the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricSettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required. The id of the resource.
        /// </param>
        /// <param name='metricNamespace'>
        /// Required. The namespace of the metrics.
        /// </param>
        /// <returns>
        /// The list metric settings operation response.
        /// </returns>
        public static Task<MetricSettingListResponse> ListAsync(this IMetricSettingOperations operations, string resourceId, string metricNamespace)
        {
            return operations.ListAsync(resourceId, metricNamespace, CancellationToken.None);
        }
    }
    
    public partial interface IMetricSettingOperations
    {
        /// <summary>
        /// The Put Metric Settings operation creates or updates the metric
        /// settings for the resource.
        /// </summary>
        /// <param name='parameters'>
        /// Metric settings to be created or updated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateOrUpdateAsync(MetricSettingsPutParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Metric Settings operation lists the metric settings for
        /// the resource.
        /// </summary>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list metric settings operation response.
        /// </returns>
        Task<MetricSettingListResponse> ListAsync(string resourceId, string metricNamespace, CancellationToken cancellationToken);
    }
    
    internal partial class MetricSettingOperations : IServiceOperations<MetricsClient>, IMetricSettingOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricSettingOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricSettingOperations(MetricsClient client)
        {
            this._client = client;
        }
        
        private MetricsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.MetricsClient.
        /// </summary>
        public MetricsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put Metric Settings operation creates or updates the metric
        /// settings for the resource.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Metric settings to be created or updated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateAsync(MetricSettingsPutParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.MetricSetting == null)
            {
                throw new ArgumentNullException("parameters.MetricSetting");
            }
            if (parameters.MetricSetting.ResourceId == null)
            {
                throw new ArgumentNullException("parameters.MetricSetting.ResourceId");
            }
            if (parameters.MetricSetting.Value == null)
            {
                throw new ArgumentNullException("parameters.MetricSetting.Value");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/monitoring/metricsettings";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject metricSettingValue = new JObject();
                requestDoc = metricSettingValue;
                
                metricSettingValue["ResourceId"] = parameters.MetricSetting.ResourceId;
                
                if (parameters.MetricSetting.Namespace != null)
                {
                    metricSettingValue["Namespace"] = parameters.MetricSetting.Namespace;
                }
                
                JObject valueValue = new JObject();
                metricSettingValue["Value"] = valueValue;
                valueValue["odata.type"] = parameters.MetricSetting.Value.GetType().FullName;
                if (parameters.MetricSetting.Value is AvailabilityMetricSettingValue)
                {
                    AvailabilityMetricSettingValue derived = ((AvailabilityMetricSettingValue)parameters.MetricSetting.Value);
                    
                    if (derived.AvailableLocations != null)
                    {
                        JArray availableLocationsArray = new JArray();
                        foreach (NameConfig availableLocationsItem in derived.AvailableLocations)
                        {
                            JObject nameConfigValue = new JObject();
                            availableLocationsArray.Add(nameConfigValue);
                            
                            if (availableLocationsItem.Name != null)
                            {
                                nameConfigValue["Name"] = availableLocationsItem.Name;
                            }
                            
                            if (availableLocationsItem.DisplayName != null)
                            {
                                nameConfigValue["DisplayName"] = availableLocationsItem.DisplayName;
                            }
                        }
                        valueValue["AvailableLocations"] = availableLocationsArray;
                    }
                    
                    if (derived.Endpoints != null)
                    {
                        JArray endpointsArray = new JArray();
                        foreach (EndpointConfig endpointsItem in derived.Endpoints)
                        {
                            JObject endpointConfigValue = new JObject();
                            endpointsArray.Add(endpointConfigValue);
                            
                            if (endpointsItem.ConfigId != null)
                            {
                                endpointConfigValue["ConfigId"] = endpointsItem.ConfigId;
                            }
                            
                            if (endpointsItem.Name != null)
                            {
                                endpointConfigValue["Name"] = endpointsItem.Name;
                            }
                            
                            if (endpointsItem.Location != null)
                            {
                                endpointConfigValue["Location"] = endpointsItem.Location;
                            }
                            
                            if (endpointsItem.Url != null)
                            {
                                endpointConfigValue["Url"] = endpointsItem.Url.AbsoluteUri;
                            }
                        }
                        valueValue["Endpoints"] = endpointsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Metric Settings operation lists the metric settings for
        /// the resource.
        /// </summary>
        /// <param name='resourceId'>
        /// Required. The id of the resource.
        /// </param>
        /// <param name='metricNamespace'>
        /// Required. The namespace of the metrics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list metric settings operation response.
        /// </returns>
        public async Task<MetricSettingListResponse> ListAsync(string resourceId, string metricNamespace, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            if (metricNamespace == null)
            {
                throw new ArgumentNullException("metricNamespace");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceId", resourceId);
                tracingParameters.Add("metricNamespace", metricNamespace);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/monitoring/metricsettings?";
            url = url + "&resourceId=" + Uri.EscapeUriString(resourceId.Trim());
            url = url + "&namespace=" + Uri.EscapeUriString(metricNamespace.Trim());
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricSettingListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new MetricSettingListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        MetricSettingCollection metricSettingCollectionInstance = new MetricSettingCollection();
                        result.MetricSettingCollection = metricSettingCollectionInstance;
                        
                        JToken valueArray = responseDoc["Value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                MetricSetting metricSettingInstance = new MetricSetting();
                                metricSettingCollectionInstance.Value.Add(metricSettingInstance);
                                
                                JToken resourceIdValue = valueValue["ResourceId"];
                                if (resourceIdValue != null && resourceIdValue.Type != JTokenType.Null)
                                {
                                    string resourceIdInstance = ((string)resourceIdValue);
                                    metricSettingInstance.ResourceId = resourceIdInstance;
                                }
                                
                                JToken namespaceValue = valueValue["Namespace"];
                                if (namespaceValue != null && namespaceValue.Type != JTokenType.Null)
                                {
                                    string namespaceInstance = ((string)namespaceValue);
                                    metricSettingInstance.Namespace = namespaceInstance;
                                }
                                
                                JToken valueValue2 = valueValue["Value"];
                                if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)valueValue2["odata.type"]);
                                    if (typeName == "Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models.AvailabilityMetricSettingValue")
                                    {
                                        AvailabilityMetricSettingValue availabilityMetricSettingValueInstance = new AvailabilityMetricSettingValue();
                                        
                                        JToken availableLocationsArray = valueValue2["AvailableLocations"];
                                        if (availableLocationsArray != null && availableLocationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken availableLocationsValue in ((JArray)availableLocationsArray))
                                            {
                                                NameConfig nameConfigInstance = new NameConfig();
                                                availabilityMetricSettingValueInstance.AvailableLocations.Add(nameConfigInstance);
                                                
                                                JToken nameValue = availableLocationsValue["Name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    nameConfigInstance.Name = nameInstance;
                                                }
                                                
                                                JToken displayNameValue = availableLocationsValue["DisplayName"];
                                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                                {
                                                    string displayNameInstance = ((string)displayNameValue);
                                                    nameConfigInstance.DisplayName = displayNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken endpointsArray = valueValue2["Endpoints"];
                                        if (endpointsArray != null && endpointsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endpointsValue in ((JArray)endpointsArray))
                                            {
                                                EndpointConfig endpointConfigInstance = new EndpointConfig();
                                                availabilityMetricSettingValueInstance.Endpoints.Add(endpointConfigInstance);
                                                
                                                JToken configIdValue = endpointsValue["ConfigId"];
                                                if (configIdValue != null && configIdValue.Type != JTokenType.Null)
                                                {
                                                    string configIdInstance = ((string)configIdValue);
                                                    endpointConfigInstance.ConfigId = configIdInstance;
                                                }
                                                
                                                JToken nameValue2 = endpointsValue["Name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    endpointConfigInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken locationValue = endpointsValue["Location"];
                                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                {
                                                    string locationInstance = ((string)locationValue);
                                                    endpointConfigInstance.Location = locationInstance;
                                                }
                                                
                                                JToken urlValue = endpointsValue["Url"];
                                                if (urlValue != null && urlValue.Type != JTokenType.Null)
                                                {
                                                    Uri urlInstance = TypeConversion.TryParseUri(((string)urlValue));
                                                    endpointConfigInstance.Url = urlInstance;
                                                }
                                            }
                                        }
                                        metricSettingInstance.Value = availabilityMetricSettingValueInstance;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class MetricValueOperationsExtensions
    {
        /// <summary>
        /// The List Metric Value operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricValueOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public static MetricValueListResponse List(this IMetricValueOperations operations, ListMetricParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMetricValueOperations)s).ListAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The List Metric Value operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricValueOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public static Task<MetricValueListResponse> ListAsync(this IMetricValueOperations operations, ListMetricParameters parameters)
        {
            return operations.ListAsync(parameters, CancellationToken.None);
        }
    }
    
    public partial interface IMetricValueOperations
    {
        /// <summary>
        /// The List Metric Value operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        Task<MetricValueListResponse> ListAsync(ListMetricParameters parameters, CancellationToken cancellationToken);
    }
    
    internal partial class MetricValueOperations : IServiceOperations<MetricsClient>, IMetricValueOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricValueOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricValueOperations(MetricsClient client)
        {
            this._client = client;
        }
        
        private MetricsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.MetricsClient.
        /// </summary>
        public MetricsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The List Metric Value operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='parameters'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public async Task<MetricValueListResponse> ListAsync(ListMetricParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.MetricNames == null)
            {
                throw new ArgumentNullException("parameters.MetricNames");
            }
            if (parameters.MetricNames.Count <= 0)
            {
                throw new ArgumentException("parameters.MetricNames cannot be empty.");
            }
            if (parameters.ResourceId == null)
            {
                throw new ArgumentNullException("parameters.ResourceId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/microsoft.insights/metrics/resource/" + parameters.ResourceId.Trim() + "?";
            url = url + "api-version=2014-01";
            url = url + "&names=" + Uri.EscapeUriString(string.Join(",", parameters.MetricNames));
            url = url + "&timeGrain=" + Uri.EscapeUriString(TypeConversion.To8601String(parameters.TimeGrain));
            url = url + "&startTime=" + Uri.EscapeUriString(string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.StartTime.ToUniversalTime()));
            url = url + "&endTime=" + Uri.EscapeUriString(string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.EndTime.ToUniversalTime()));
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricValueListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new MetricValueListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        MetricValueSetCollection metricValueSetCollectionInstance = new MetricValueSetCollection();
                        result.MetricValueSetCollection = metricValueSetCollectionInstance;
                        
                        JToken valueArray = responseDoc["Value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                MetricValueSet metricValueSetInstance = new MetricValueSet();
                                metricValueSetCollectionInstance.Value.Add(metricValueSetInstance);
                                
                                JToken nameValue = valueValue["Name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    metricValueSetInstance.Name = nameInstance;
                                }
                                
                                JToken namespaceValue = valueValue["Namespace"];
                                if (namespaceValue != null && namespaceValue.Type != JTokenType.Null)
                                {
                                    string namespaceInstance = ((string)namespaceValue);
                                    metricValueSetInstance.Namespace = namespaceInstance;
                                }
                                
                                JToken displayNameValue = valueValue["DisplayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    metricValueSetInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken unitValue = valueValue["Unit"];
                                if (unitValue != null && unitValue.Type != JTokenType.Null)
                                {
                                    string unitInstance = ((string)unitValue);
                                    metricValueSetInstance.Unit = unitInstance;
                                }
                                
                                JToken primaryAggregationValue = valueValue["PrimaryAggregation"];
                                if (primaryAggregationValue != null && primaryAggregationValue.Type != JTokenType.Null)
                                {
                                    string primaryAggregationInstance = ((string)primaryAggregationValue);
                                    metricValueSetInstance.PrimaryAggregation = primaryAggregationInstance;
                                }
                                
                                JToken timeGrainValue = valueValue["TimeGrain"];
                                if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                {
                                    TimeSpan timeGrainInstance = TypeConversion.From8601TimeSpan(((string)timeGrainValue));
                                    metricValueSetInstance.TimeGrain = timeGrainInstance;
                                }
                                
                                JToken startTimeValue = valueValue["StartTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                    metricValueSetInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = valueValue["EndTime"];
                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime endTimeInstance = ((DateTime)endTimeValue);
                                    metricValueSetInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken metricValuesArray = valueValue["MetricValues"];
                                if (metricValuesArray != null && metricValuesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken metricValuesValue in ((JArray)metricValuesArray))
                                    {
                                        MetricValue metricValueInstance = new MetricValue();
                                        metricValueSetInstance.MetricValues.Add(metricValueInstance);
                                        
                                        JToken timestampValue = metricValuesValue["Timestamp"];
                                        if (timestampValue != null && timestampValue.Type != JTokenType.Null)
                                        {
                                            DateTime timestampInstance = ((DateTime)timestampValue);
                                            metricValueInstance.Timestamp = timestampInstance;
                                        }
                                        
                                        JToken averageValue = metricValuesValue["Average"];
                                        if (averageValue != null && averageValue.Type != JTokenType.Null)
                                        {
                                            double averageInstance = ((double)averageValue);
                                            metricValueInstance.Average = averageInstance;
                                        }
                                        
                                        JToken minimumValue = metricValuesValue["Minimum"];
                                        if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                        {
                                            double minimumInstance = ((double)minimumValue);
                                            metricValueInstance.Minimum = minimumInstance;
                                        }
                                        
                                        JToken maximumValue = metricValuesValue["Maximum"];
                                        if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                        {
                                            double maximumInstance = ((double)maximumValue);
                                            metricValueInstance.Maximum = maximumInstance;
                                        }
                                        
                                        JToken totalValue = metricValuesValue["Total"];
                                        if (totalValue != null && totalValue.Type != JTokenType.Null)
                                        {
                                            double totalInstance = ((double)totalValue);
                                            metricValueInstance.Total = totalInstance;
                                        }
                                        
                                        JToken annotationValue = metricValuesValue["Annotation"];
                                        if (annotationValue != null && annotationValue.Type != JTokenType.Null)
                                        {
                                            string annotationInstance = ((string)annotationValue);
                                            metricValueInstance.Annotation = annotationInstance;
                                        }
                                        
                                        JToken countValue = metricValuesValue["Count"];
                                        if (countValue != null && countValue.Type != JTokenType.Null)
                                        {
                                            int countInstance = ((int)countValue);
                                            metricValueInstance.Count = countInstance;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
