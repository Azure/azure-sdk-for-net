// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Monitoring.Alerts;
using Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models
{
    public enum ConditionOperator
    {
        GreaterThan = 0,
        
        GreaterThanOrEqual = 1,
        
        LessThan = 2,
        
        LessThanOrEqual = 3,
    }
    
    /// <summary>
    /// An alert incident indicates the activation status of an alert rule.
    /// </summary>
    public partial class Incident
    {
        private DateTime _activatedTime;
        
        /// <summary>
        /// Optional. The time at which the incident got activated.
        /// </summary>
        public DateTime ActivatedTime
        {
            get { return this._activatedTime; }
            set { this._activatedTime = value; }
        }
        
        private bool _isActive;
        
        /// <summary>
        /// Optional. A boolean to indicate whether the incident is active or
        /// resolved.
        /// </summary>
        public bool IsActive
        {
            get { return this._isActive; }
            set { this._isActive = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Incident name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private System.DateTime? _resolvedTime;
        
        /// <summary>
        /// Optional. The time at which the incident got resolved. If null, it
        /// means the incident is still active.
        /// </summary>
        public System.DateTime? ResolvedTime
        {
            get { return this._resolvedTime; }
            set { this._resolvedTime = value; }
        }
        
        private string _ruleName;
        
        /// <summary>
        /// Optional. Rule name that is associated with the incident.
        /// </summary>
        public string RuleName
        {
            get { return this._ruleName; }
            set { this._ruleName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Incident class.
        /// </summary>
        public Incident()
        {
        }
    }
    
    /// <summary>
    /// The Get Incident operation response.
    /// </summary>
    public partial class IncidentGetResponse : OperationResponse
    {
        private Incident _incident;
        
        /// <summary>
        /// Optional. The retrieved incident.
        /// </summary>
        public Incident Incident
        {
            get { return this._incident; }
            set { this._incident = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IncidentGetResponse class.
        /// </summary>
        public IncidentGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The List incidents operation response.
    /// </summary>
    public partial class IncidentListResponse : OperationResponse, IEnumerable<Incident>
    {
        private IList<Incident> _value;
        
        /// <summary>
        /// Optional. Incident collection.
        /// </summary>
        public IList<Incident> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IncidentListResponse class.
        /// </summary>
        public IncidentListResponse()
        {
            this._value = new List<Incident>();
        }
        
        /// <summary>
        /// Gets the sequence of Value.
        /// </summary>
        public IEnumerator<Incident> GetEnumerator()
        {
            return this.Value.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Value.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// A location threshold rule condition.
    /// </summary>
    public partial class LocationThresholdRuleCondition : RuleCondition
    {
        private RuleDataSource _dataSource;
        
        /// <summary>
        /// Optional. Condition data source.
        /// </summary>
        public RuleDataSource DataSource
        {
            get { return this._dataSource; }
            set { this._dataSource = value; }
        }
        
        private int _failedLocationCount;
        
        /// <summary>
        /// Optional. Failed location count.
        /// </summary>
        public int FailedLocationCount
        {
            get { return this._failedLocationCount; }
            set { this._failedLocationCount = value; }
        }
        
        private TimeSpan _windowSize;
        
        /// <summary>
        /// Optional. The time period over which the alert rule is evaluated.
        /// Condition window size depends on the metric.
        /// </summary>
        public TimeSpan WindowSize
        {
            get { return this._windowSize; }
            set { this._windowSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the LocationThresholdRuleCondition
        /// class.
        /// </summary>
        public LocationThresholdRuleCondition()
        {
        }
    }
    
    /// <summary>
    /// An alert rule.
    /// </summary>
    public partial class Rule
    {
        private RuleAction _action;
        
        /// <summary>
        /// Optional. Rule action.
        /// </summary>
        public RuleAction Action
        {
            get { return this._action; }
            set { this._action = value; }
        }
        
        private RuleCondition _condition;
        
        /// <summary>
        /// Optional. Rule condition.
        /// </summary>
        public RuleCondition Condition
        {
            get { return this._condition; }
            set { this._condition = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Optional. Rule description.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private bool _isEnabled;
        
        /// <summary>
        /// Optional. A flag that determines whether the rule is enabled or
        /// disabled.
        /// </summary>
        public bool IsEnabled
        {
            get { return this._isEnabled; }
            set { this._isEnabled = value; }
        }
        
        private DateTime _lastUpdatedTime;
        
        /// <summary>
        /// Optional. Rule last updated time.
        /// </summary>
        public DateTime LastUpdatedTime
        {
            get { return this._lastUpdatedTime; }
            set { this._lastUpdatedTime = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Rule name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Rule class.
        /// </summary>
        public Rule()
        {
        }
    }
    
    /// <summary>
    /// A rule action.
    /// </summary>
    public abstract partial class RuleAction
    {
        /// <summary>
        /// Initializes a new instance of the RuleAction class.
        /// </summary>
        public RuleAction()
        {
        }
    }
    
    /// <summary>
    /// A rule condition.
    /// </summary>
    public abstract partial class RuleCondition
    {
        /// <summary>
        /// Initializes a new instance of the RuleCondition class.
        /// </summary>
        public RuleCondition()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create or Update Rule operation.
    /// </summary>
    public partial class RuleCreateOrUpdateParameters
    {
        private string _location;
        
        /// <summary>
        /// Optional. The location of the rule.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private Rule _properties;
        
        /// <summary>
        /// Optional. The rule to create or update.
        /// </summary>
        public Rule Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleCreateOrUpdateParameters
        /// class.
        /// </summary>
        public RuleCreateOrUpdateParameters()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// A rule data source.
    /// </summary>
    public abstract partial class RuleDataSource
    {
        /// <summary>
        /// Initializes a new instance of the RuleDataSource class.
        /// </summary>
        public RuleDataSource()
        {
        }
    }
    
    /// <summary>
    /// Specifies the action to send email when the rule condition is evaluated.
    /// </summary>
    public partial class RuleEmailAction : RuleAction
    {
        private IList<string> _customEmails;
        
        /// <summary>
        /// Optional. The email address of an adminstrative user.
        /// </summary>
        public IList<string> CustomEmails
        {
            get { return this._customEmails; }
            set { this._customEmails = value; }
        }
        
        private bool _sendToServiceOwners;
        
        /// <summary>
        /// Optional. This indicates if email is sent to sevice adminstrator
        /// and co-administrators.
        /// </summary>
        public bool SendToServiceOwners
        {
            get { return this._sendToServiceOwners; }
            set { this._sendToServiceOwners = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleEmailAction class.
        /// </summary>
        public RuleEmailAction()
        {
            this._customEmails = new List<string>();
        }
    }
    
    /// <summary>
    /// The Get Rule operation response.
    /// </summary>
    public partial class RuleGetResponse : OperationResponse
    {
        private string _id;
        
        /// <summary>
        /// Optional. The resource id of the rule.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location of the rule.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Rule _properties;
        
        /// <summary>
        /// Optional. The retrieved rule.
        /// </summary>
        public Rule Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleGetResponse class.
        /// </summary>
        public RuleGetResponse()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// The List Rules operation response.
    /// </summary>
    public partial class RuleListResponse : OperationResponse
    {
        private RuleResourceCollection _ruleResourceCollection;
        
        /// <summary>
        /// Optional. Alert rules collection.
        /// </summary>
        public RuleResourceCollection RuleResourceCollection
        {
            get { return this._ruleResourceCollection; }
            set { this._ruleResourceCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleListResponse class.
        /// </summary>
        public RuleListResponse()
        {
        }
    }
    
    /// <summary>
    /// A rule metric data source.
    /// </summary>
    public partial class RuleMetricDataSource : RuleDataSource
    {
        private string _metricName;
        
        /// <summary>
        /// Optional. Metric name.
        /// </summary>
        public string MetricName
        {
            get { return this._metricName; }
            set { this._metricName = value; }
        }
        
        private string _metricNamespace;
        
        /// <summary>
        /// Optional. Metric namespace. When creating a rule on endpoint
        /// monitoring metrics, WindowsAzure.Availability namespace is
        /// required.
        /// </summary>
        public string MetricNamespace
        {
            get { return this._metricNamespace; }
            set { this._metricNamespace = value; }
        }
        
        private string _resourceUri;
        
        /// <summary>
        /// Optional. Metric resource uri.
        /// </summary>
        public string ResourceUri
        {
            get { return this._resourceUri; }
            set { this._resourceUri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleMetricDataSource class.
        /// </summary>
        public RuleMetricDataSource()
        {
        }
    }
    
    /// <summary>
    /// An alert rule resource.
    /// </summary>
    public partial class RuleResource
    {
        private string _id;
        
        /// <summary>
        /// Optional. The resource id of the rule.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location of the rule.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the rule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Rule _properties;
        
        /// <summary>
        /// Optional. The retrieved rule.
        /// </summary>
        public Rule Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. The tags of the rule.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleResource class.
        /// </summary>
        public RuleResource()
        {
            this._tags = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// Represents collection of alert rule resources.
    /// </summary>
    public partial class RuleResourceCollection
    {
        private IList<RuleResource> _value;
        
        /// <summary>
        /// Optional. The values for the alert rule resources.
        /// </summary>
        public IList<RuleResource> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RuleResourceCollection class.
        /// </summary>
        public RuleResourceCollection()
        {
            this._value = new List<RuleResource>();
        }
    }
    
    /// <summary>
    /// A threshold rule condition.
    /// </summary>
    public partial class ThresholdRuleCondition : RuleCondition
    {
        private RuleDataSource _dataSource;
        
        /// <summary>
        /// Optional. Condition data source.
        /// </summary>
        public RuleDataSource DataSource
        {
            get { return this._dataSource; }
            set { this._dataSource = value; }
        }
        
        private ConditionOperator _operator;
        
        /// <summary>
        /// Optional. Condition operator.
        /// </summary>
        public ConditionOperator Operator
        {
            get { return this._operator; }
            set { this._operator = value; }
        }
        
        private double _threshold;
        
        /// <summary>
        /// Optional. Condition threshold.
        /// </summary>
        public double Threshold
        {
            get { return this._threshold; }
            set { this._threshold = value; }
        }
        
        private TimeSpan _windowSize;
        
        /// <summary>
        /// Optional. The time period over which the alert rule is evaluated.
        /// Condition window size depends on the metric.
        /// </summary>
        public TimeSpan WindowSize
        {
            get { return this._windowSize; }
            set { this._windowSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ThresholdRuleCondition class.
        /// </summary>
        public ThresholdRuleCondition()
        {
        }
    }
}

namespace Microsoft.WindowsAzure.Management.Monitoring.Alerts
{
    public static partial class AlertsClientExtensions
    {
    }
    
    public partial interface IAlertsClient : IDisposable
    {
        /// <summary>
        /// Optional base uri parameter for Azure REST.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the alert incidents.
        /// </summary>
        IIncidentOperations Incidents
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the alert rules.
        /// </summary>
        IRuleOperations Rules
        {
            get; 
        }
    }
    
    public partial class AlertsClient : ServiceClient<AlertsClient>, IAlertsClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// Optional base uri parameter for Azure REST.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IIncidentOperations _incidents;
        
        /// <summary>
        /// Operations for managing the alert incidents.
        /// </summary>
        public virtual IIncidentOperations Incidents
        {
            get { return this._incidents; }
        }
        
        private IRuleOperations _rules;
        
        /// <summary>
        /// Operations for managing the alert rules.
        /// </summary>
        public virtual IRuleOperations Rules
        {
            get { return this._rules; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AlertsClient class.
        /// </summary>
        private AlertsClient()
            : base()
        {
            this._incidents = new IncidentOperations(this);
            this._rules = new RuleOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the AlertsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. When you create a Windows Azure subscription, it is
        /// uniquely identified by a subscription ID. The subscription ID
        /// forms part of the URI for every call that you make to the Service
        /// Management API.  The Windows Azure Service ManagementAPI use
        /// mutual authentication of management certificates over SSL to
        /// ensure that a request made to the service is secure.  No anonymous
        /// requests are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// Required. Optional base uri parameter for Azure REST.
        /// </param>
        public AlertsClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the AlertsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. When you create a Windows Azure subscription, it is
        /// uniquely identified by a subscription ID. The subscription ID
        /// forms part of the URI for every call that you make to the Service
        /// Management API.  The Windows Azure Service ManagementAPI use
        /// mutual authentication of management certificates over SSL to
        /// ensure that a request made to the service is secure.  No anonymous
        /// requests are allowed.
        /// </param>
        public AlertsClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    public static partial class IncidentOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IIncidentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// Required. The name of the incident to retrieve.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public static IncidentGetResponse Get(this IIncidentOperations operations, string resourceGroupName, string ruleName, string incidentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIncidentOperations)s).GetAsync(resourceGroupName, ruleName, incidentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IIncidentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// Required. The name of the incident to retrieve.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public static Task<IncidentGetResponse> GetAsync(this IIncidentOperations operations, string resourceGroupName, string ruleName, string incidentName)
        {
            return operations.GetAsync(resourceGroupName, ruleName, incidentName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IIncidentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public static IncidentListResponse ListForRule(this IIncidentOperations operations, string resourceGroupName, string ruleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IIncidentOperations)s).ListForRuleAsync(resourceGroupName, ruleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IIncidentOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public static Task<IncidentListResponse> ListForRuleAsync(this IIncidentOperations operations, string resourceGroupName, string ruleName)
        {
            return operations.ListForRuleAsync(resourceGroupName, ruleName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the alert incidents.
    /// </summary>
    public partial interface IIncidentOperations
    {
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// The name of the incident to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        Task<IncidentGetResponse> GetAsync(string resourceGroupName, string ruleName, string incidentName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        Task<IncidentListResponse> ListForRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the alert incidents.
    /// </summary>
    internal partial class IncidentOperations : IServiceOperations<AlertsClient>, IIncidentOperations
    {
        /// <summary>
        /// Initializes a new instance of the IncidentOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal IncidentOperations(AlertsClient client)
        {
            this._client = client;
        }
        
        private AlertsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.AlertsClient.
        /// </summary>
        public AlertsClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// Required. The name of the incident to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public async Task<IncidentGetResponse> GetAsync(string resourceGroupName, string ruleName, string incidentName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            if (incidentName == null)
            {
                throw new ArgumentNullException("incidentName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                tracingParameters.Add("incidentName", incidentName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + ruleName.Trim() + "/incidents/" + incidentName.Trim() + "?";
            url = url + "api-version=2014-04";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IncidentGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new IncidentGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Incident incidentInstance = new Incident();
                        result.Incident = incidentInstance;
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            incidentInstance.Name = nameInstance;
                        }
                        
                        JToken ruleNameValue = responseDoc["ruleName"];
                        if (ruleNameValue != null && ruleNameValue.Type != JTokenType.Null)
                        {
                            string ruleNameInstance = ((string)ruleNameValue);
                            incidentInstance.RuleName = ruleNameInstance;
                        }
                        
                        JToken isActiveValue = responseDoc["isActive"];
                        if (isActiveValue != null && isActiveValue.Type != JTokenType.Null)
                        {
                            bool isActiveInstance = ((bool)isActiveValue);
                            incidentInstance.IsActive = isActiveInstance;
                        }
                        
                        JToken activatedTimeValue = responseDoc["activatedTime"];
                        if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                        {
                            DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                            incidentInstance.ActivatedTime = activatedTimeInstance;
                        }
                        
                        JToken resolvedTimeValue = responseDoc["resolvedTime"];
                        if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                        {
                            DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                            incidentInstance.ResolvedTime = resolvedTimeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public async Task<IncidentListResponse> ListForRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "ListForRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + ruleName.Trim() + "/incidents?";
            url = url + "api-version=2014-04";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IncidentListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new IncidentListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                Incident incidentInstance = new Incident();
                                result.Value.Add(incidentInstance);
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    incidentInstance.Name = nameInstance;
                                }
                                
                                JToken ruleNameValue = valueValue["ruleName"];
                                if (ruleNameValue != null && ruleNameValue.Type != JTokenType.Null)
                                {
                                    string ruleNameInstance = ((string)ruleNameValue);
                                    incidentInstance.RuleName = ruleNameInstance;
                                }
                                
                                JToken isActiveValue = valueValue["isActive"];
                                if (isActiveValue != null && isActiveValue.Type != JTokenType.Null)
                                {
                                    bool isActiveInstance = ((bool)isActiveValue);
                                    incidentInstance.IsActive = isActiveInstance;
                                }
                                
                                JToken activatedTimeValue = valueValue["activatedTime"];
                                if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                                    incidentInstance.ActivatedTime = activatedTimeInstance;
                                }
                                
                                JToken resolvedTimeValue = valueValue["resolvedTime"];
                                if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                                    incidentInstance.ResolvedTime = resolvedTimeInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class RuleOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to create or update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdate(this IRuleOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRuleOperations)s).CreateOrUpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to create or update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateAsync(this IRuleOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IRuleOperations operations, string resourceGroupName, string ruleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRuleOperations)s).DeleteAsync(resourceGroupName, ruleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IRuleOperations operations, string resourceGroupName, string ruleName)
        {
            return operations.DeleteAsync(resourceGroupName, ruleName, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to retrieve.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public static RuleGetResponse Get(this IRuleOperations operations, string resourceGroupName, string ruleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRuleOperations)s).GetAsync(resourceGroupName, ruleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to retrieve.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public static Task<RuleGetResponse> GetAsync(this IRuleOperations operations, string resourceGroupName, string ruleName)
        {
            return operations.GetAsync(resourceGroupName, ruleName, CancellationToken.None);
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Required. The resource uri of the target of the alert rule.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public static RuleListResponse List(this IRuleOperations operations, string resourceGroupName, string targetResourceUri)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRuleOperations)s).ListAsync(resourceGroupName, targetResourceUri);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Required. The resource uri of the target of the alert rule.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public static Task<RuleListResponse> ListAsync(this IRuleOperations operations, string resourceGroupName, string targetResourceUri)
        {
            return operations.ListAsync(resourceGroupName, targetResourceUri, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Update(this IRuleOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRuleOperations)s).UpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.IRuleOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to update.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateAsync(this IRuleOperations operations, string resourceGroupName, RuleCreateOrUpdateParameters parameters)
        {
            return operations.UpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the alert rules.
    /// </summary>
    public partial interface IRuleOperations
    {
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateOrUpdateAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// The name of the rule to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        Task<RuleGetResponse> GetAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// The resource uri of the target of the alert rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        Task<RuleListResponse> ListAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// The rule to update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UpdateAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the alert rules.
    /// </summary>
    internal partial class RuleOperations : IServiceOperations<AlertsClient>, IRuleOperations
    {
        /// <summary>
        /// Initializes a new instance of the RuleOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RuleOperations(AlertsClient client)
        {
            this._client = client;
        }
        
        private AlertsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.AlertsClient.
        /// </summary>
        public AlertsClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + (parameters.Properties.Name != null ? parameters.Properties.Name.Trim() : "") + "?";
            url = url + "api-version=2014-04";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject ruleCreateOrUpdateParametersValue = new JObject();
                requestDoc = new JObject();
                requestDoc["ruleCreateOrUpdateParameters"] = ruleCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    ruleCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                ruleCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    ruleCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    propertiesValue["isEnabled"] = parameters.Properties.IsEnabled;
                    
                    if (parameters.Properties.Condition != null)
                    {
                        JObject conditionValue = new JObject();
                        propertiesValue["condition"] = conditionValue;
                        conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                        if (parameters.Properties.Condition is ThresholdRuleCondition)
                        {
                            ThresholdRuleCondition derived = ((ThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived.DataSource != null)
                            {
                                JObject dataSourceValue = new JObject();
                                conditionValue["dataSource"] = dataSourceValue;
                                dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                if (derived.DataSource is RuleMetricDataSource)
                                {
                                    RuleMetricDataSource derived2 = ((RuleMetricDataSource)derived.DataSource);
                                    
                                    if (derived2.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived2.ResourceUri;
                                    }
                                    
                                    if (derived2.MetricNamespace != null)
                                    {
                                        dataSourceValue["metricNamespace"] = derived2.MetricNamespace;
                                    }
                                    
                                    if (derived2.MetricName != null)
                                    {
                                        dataSourceValue["metricName"] = derived2.MetricName;
                                    }
                                }
                            }
                            
                            conditionValue["operator"] = derived.Operator.ToString();
                            
                            conditionValue["threshold"] = derived.Threshold;
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived.WindowSize);
                        }
                        if (parameters.Properties.Condition is LocationThresholdRuleCondition)
                        {
                            LocationThresholdRuleCondition derived3 = ((LocationThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived3.DataSource != null)
                            {
                                JObject dataSourceValue2 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue2;
                                dataSourceValue2["odata.type"] = derived3.DataSource.GetType().FullName;
                                if (derived3.DataSource is RuleMetricDataSource)
                                {
                                    RuleMetricDataSource derived4 = ((RuleMetricDataSource)derived3.DataSource);
                                    
                                    if (derived4.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived4.ResourceUri;
                                    }
                                    
                                    if (derived4.MetricNamespace != null)
                                    {
                                        dataSourceValue2["metricNamespace"] = derived4.MetricNamespace;
                                    }
                                    
                                    if (derived4.MetricName != null)
                                    {
                                        dataSourceValue2["metricName"] = derived4.MetricName;
                                    }
                                }
                            }
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived3.WindowSize);
                            
                            conditionValue["failedLocationCount"] = derived3.FailedLocationCount;
                        }
                    }
                    
                    if (parameters.Properties.Action != null)
                    {
                        JObject actionValue = new JObject();
                        propertiesValue["action"] = actionValue;
                        actionValue["odata.type"] = parameters.Properties.Action.GetType().FullName;
                        if (parameters.Properties.Action is RuleEmailAction)
                        {
                            RuleEmailAction derived5 = ((RuleEmailAction)parameters.Properties.Action);
                            
                            actionValue["sendToServiceOwners"] = derived5.SendToServiceOwners;
                            
                            if (derived5.CustomEmails != null)
                            {
                                JArray customEmailsArray = new JArray();
                                foreach (string customEmailsItem in derived5.CustomEmails)
                                {
                                    customEmailsArray.Add(customEmailsItem);
                                }
                                actionValue["customEmails"] = customEmailsArray;
                            }
                        }
                    }
                    
                    propertiesValue["lastUpdatedTime"] = parameters.Properties.LastUpdatedTime;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + ruleName.Trim() + "?";
            url = url + "api-version=2014-04";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public async Task<RuleGetResponse> GetAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + ruleName.Trim() + "?";
            url = url + "api-version=2014-04";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RuleGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            result.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            result.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            result.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                result.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            Rule propertiesInstance = new Rule();
                            result.Properties = propertiesInstance;
                            
                            JToken nameValue2 = propertiesValue["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                propertiesInstance.Name = nameInstance2;
                            }
                            
                            JToken descriptionValue = propertiesValue["description"];
                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                            {
                                string descriptionInstance = ((string)descriptionValue);
                                propertiesInstance.Description = descriptionInstance;
                            }
                            
                            JToken isEnabledValue = propertiesValue["isEnabled"];
                            if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                            {
                                bool isEnabledInstance = ((bool)isEnabledValue);
                                propertiesInstance.IsEnabled = isEnabledInstance;
                            }
                            
                            JToken conditionValue = propertiesValue["condition"];
                            if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)conditionValue["odata.type"]);
                                if (typeName == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition")
                                {
                                    ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                    
                                    JToken dataSourceValue = conditionValue["dataSource"];
                                    if (dataSourceValue != null && dataSourceValue.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)dataSourceValue["odata.type"]);
                                        if (typeName2 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource")
                                        {
                                            RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                            
                                            JToken resourceUriValue = dataSourceValue["resourceUri"];
                                            if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                            {
                                                string resourceUriInstance = ((string)resourceUriValue);
                                                ruleMetricDataSourceInstance.ResourceUri = resourceUriInstance;
                                            }
                                            
                                            JToken metricNamespaceValue = dataSourceValue["metricNamespace"];
                                            if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                            }
                                            
                                            JToken metricNameValue = dataSourceValue["metricName"];
                                            if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                            {
                                                string metricNameInstance = ((string)metricNameValue);
                                                ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                            }
                                            thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken operatorValue = conditionValue["operator"];
                                    if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                    {
                                        ConditionOperator operatorInstance = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue), true));
                                        thresholdRuleConditionInstance.Operator = operatorInstance;
                                    }
                                    
                                    JToken thresholdValue = conditionValue["threshold"];
                                    if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                    {
                                        double thresholdInstance = ((double)thresholdValue);
                                        thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                    }
                                    
                                    JToken windowSizeValue = conditionValue["windowSize"];
                                    if (windowSizeValue != null && windowSizeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan windowSizeInstance = TypeConversion.From8601TimeSpan(((string)windowSizeValue));
                                        thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                    }
                                    propertiesInstance.Condition = thresholdRuleConditionInstance;
                                }
                                if (typeName == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.LocationThresholdRuleCondition")
                                {
                                    LocationThresholdRuleCondition locationThresholdRuleConditionInstance = new LocationThresholdRuleCondition();
                                    
                                    JToken dataSourceValue2 = conditionValue["dataSource"];
                                    if (dataSourceValue2 != null && dataSourceValue2.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)dataSourceValue2["odata.type"]);
                                        if (typeName3 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource")
                                        {
                                            RuleMetricDataSource ruleMetricDataSourceInstance2 = new RuleMetricDataSource();
                                            
                                            JToken resourceUriValue2 = dataSourceValue2["resourceUri"];
                                            if (resourceUriValue2 != null && resourceUriValue2.Type != JTokenType.Null)
                                            {
                                                string resourceUriInstance2 = ((string)resourceUriValue2);
                                                ruleMetricDataSourceInstance2.ResourceUri = resourceUriInstance2;
                                            }
                                            
                                            JToken metricNamespaceValue2 = dataSourceValue2["metricNamespace"];
                                            if (metricNamespaceValue2 != null && metricNamespaceValue2.Type != JTokenType.Null)
                                            {
                                                string metricNamespaceInstance2 = ((string)metricNamespaceValue2);
                                                ruleMetricDataSourceInstance2.MetricNamespace = metricNamespaceInstance2;
                                            }
                                            
                                            JToken metricNameValue2 = dataSourceValue2["metricName"];
                                            if (metricNameValue2 != null && metricNameValue2.Type != JTokenType.Null)
                                            {
                                                string metricNameInstance2 = ((string)metricNameValue2);
                                                ruleMetricDataSourceInstance2.MetricName = metricNameInstance2;
                                            }
                                            locationThresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance2;
                                        }
                                    }
                                    
                                    JToken windowSizeValue2 = conditionValue["windowSize"];
                                    if (windowSizeValue2 != null && windowSizeValue2.Type != JTokenType.Null)
                                    {
                                        TimeSpan windowSizeInstance2 = TypeConversion.From8601TimeSpan(((string)windowSizeValue2));
                                        locationThresholdRuleConditionInstance.WindowSize = windowSizeInstance2;
                                    }
                                    
                                    JToken failedLocationCountValue = conditionValue["failedLocationCount"];
                                    if (failedLocationCountValue != null && failedLocationCountValue.Type != JTokenType.Null)
                                    {
                                        int failedLocationCountInstance = ((int)failedLocationCountValue);
                                        locationThresholdRuleConditionInstance.FailedLocationCount = failedLocationCountInstance;
                                    }
                                    propertiesInstance.Condition = locationThresholdRuleConditionInstance;
                                }
                            }
                            
                            JToken actionValue = propertiesValue["action"];
                            if (actionValue != null && actionValue.Type != JTokenType.Null)
                            {
                                string typeName4 = ((string)actionValue["odata.type"]);
                                if (typeName4 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction")
                                {
                                    RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                    
                                    JToken sendToServiceOwnersValue = actionValue["sendToServiceOwners"];
                                    if (sendToServiceOwnersValue != null && sendToServiceOwnersValue.Type != JTokenType.Null)
                                    {
                                        bool sendToServiceOwnersInstance = ((bool)sendToServiceOwnersValue);
                                        ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                    }
                                    
                                    JToken customEmailsArray = actionValue["customEmails"];
                                    if (customEmailsArray != null && customEmailsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken customEmailsValue in ((JArray)customEmailsArray))
                                        {
                                            ruleEmailActionInstance.CustomEmails.Add(((string)customEmailsValue));
                                        }
                                    }
                                    propertiesInstance.Action = ruleEmailActionInstance;
                                }
                            }
                            
                            JToken lastUpdatedTimeValue = propertiesValue["lastUpdatedTime"];
                            if (lastUpdatedTimeValue != null && lastUpdatedTimeValue.Type != JTokenType.Null)
                            {
                                DateTime lastUpdatedTimeInstance = ((DateTime)lastUpdatedTimeValue);
                                propertiesInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Required. The resource uri of the target of the alert rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public async Task<RuleListResponse> ListAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("targetResourceUri", targetResourceUri);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules?";
            url = url + "api-version=2014-04";
            if (targetResourceUri != null)
            {
                url = url + "&$filter=targetResourceUri eq " + Uri.EscapeUriString(targetResourceUri != null ? targetResourceUri.Trim() : "");
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new RuleListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        RuleResourceCollection ruleResourceCollectionInstance = new RuleResourceCollection();
                        result.RuleResourceCollection = ruleResourceCollectionInstance;
                        
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                RuleResource ruleResourceInstance = new RuleResource();
                                ruleResourceCollectionInstance.Value.Add(ruleResourceInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    ruleResourceInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    ruleResourceInstance.Name = nameInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    ruleResourceInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        ruleResourceInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    Rule propertiesInstance = new Rule();
                                    ruleResourceInstance.Properties = propertiesInstance;
                                    
                                    JToken nameValue2 = propertiesValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        propertiesInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken descriptionValue = propertiesValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        propertiesInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken isEnabledValue = propertiesValue["isEnabled"];
                                    if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool isEnabledInstance = ((bool)isEnabledValue);
                                        propertiesInstance.IsEnabled = isEnabledInstance;
                                    }
                                    
                                    JToken conditionValue = propertiesValue["condition"];
                                    if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)conditionValue["odata.type"]);
                                        if (typeName == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition")
                                        {
                                            ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                            
                                            JToken dataSourceValue = conditionValue["dataSource"];
                                            if (dataSourceValue != null && dataSourceValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)dataSourceValue["odata.type"]);
                                                if (typeName2 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource")
                                                {
                                                    RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                                    
                                                    JToken resourceUriValue = dataSourceValue["resourceUri"];
                                                    if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                                    {
                                                        string resourceUriInstance = ((string)resourceUriValue);
                                                        ruleMetricDataSourceInstance.ResourceUri = resourceUriInstance;
                                                    }
                                                    
                                                    JToken metricNamespaceValue = dataSourceValue["metricNamespace"];
                                                    if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                                    {
                                                        string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                        ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                                    }
                                                    
                                                    JToken metricNameValue = dataSourceValue["metricName"];
                                                    if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                    {
                                                        string metricNameInstance = ((string)metricNameValue);
                                                        ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                                    }
                                                    thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken operatorValue = conditionValue["operator"];
                                            if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                            {
                                                ConditionOperator operatorInstance = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue), true));
                                                thresholdRuleConditionInstance.Operator = operatorInstance;
                                            }
                                            
                                            JToken thresholdValue = conditionValue["threshold"];
                                            if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                            {
                                                double thresholdInstance = ((double)thresholdValue);
                                                thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                            }
                                            
                                            JToken windowSizeValue = conditionValue["windowSize"];
                                            if (windowSizeValue != null && windowSizeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan windowSizeInstance = TypeConversion.From8601TimeSpan(((string)windowSizeValue));
                                                thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                            }
                                            propertiesInstance.Condition = thresholdRuleConditionInstance;
                                        }
                                        if (typeName == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.LocationThresholdRuleCondition")
                                        {
                                            LocationThresholdRuleCondition locationThresholdRuleConditionInstance = new LocationThresholdRuleCondition();
                                            
                                            JToken dataSourceValue2 = conditionValue["dataSource"];
                                            if (dataSourceValue2 != null && dataSourceValue2.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)dataSourceValue2["odata.type"]);
                                                if (typeName3 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource")
                                                {
                                                    RuleMetricDataSource ruleMetricDataSourceInstance2 = new RuleMetricDataSource();
                                                    
                                                    JToken resourceUriValue2 = dataSourceValue2["resourceUri"];
                                                    if (resourceUriValue2 != null && resourceUriValue2.Type != JTokenType.Null)
                                                    {
                                                        string resourceUriInstance2 = ((string)resourceUriValue2);
                                                        ruleMetricDataSourceInstance2.ResourceUri = resourceUriInstance2;
                                                    }
                                                    
                                                    JToken metricNamespaceValue2 = dataSourceValue2["metricNamespace"];
                                                    if (metricNamespaceValue2 != null && metricNamespaceValue2.Type != JTokenType.Null)
                                                    {
                                                        string metricNamespaceInstance2 = ((string)metricNamespaceValue2);
                                                        ruleMetricDataSourceInstance2.MetricNamespace = metricNamespaceInstance2;
                                                    }
                                                    
                                                    JToken metricNameValue2 = dataSourceValue2["metricName"];
                                                    if (metricNameValue2 != null && metricNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string metricNameInstance2 = ((string)metricNameValue2);
                                                        ruleMetricDataSourceInstance2.MetricName = metricNameInstance2;
                                                    }
                                                    locationThresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance2;
                                                }
                                            }
                                            
                                            JToken windowSizeValue2 = conditionValue["windowSize"];
                                            if (windowSizeValue2 != null && windowSizeValue2.Type != JTokenType.Null)
                                            {
                                                TimeSpan windowSizeInstance2 = TypeConversion.From8601TimeSpan(((string)windowSizeValue2));
                                                locationThresholdRuleConditionInstance.WindowSize = windowSizeInstance2;
                                            }
                                            
                                            JToken failedLocationCountValue = conditionValue["failedLocationCount"];
                                            if (failedLocationCountValue != null && failedLocationCountValue.Type != JTokenType.Null)
                                            {
                                                int failedLocationCountInstance = ((int)failedLocationCountValue);
                                                locationThresholdRuleConditionInstance.FailedLocationCount = failedLocationCountInstance;
                                            }
                                            propertiesInstance.Condition = locationThresholdRuleConditionInstance;
                                        }
                                    }
                                    
                                    JToken actionValue = propertiesValue["action"];
                                    if (actionValue != null && actionValue.Type != JTokenType.Null)
                                    {
                                        string typeName4 = ((string)actionValue["odata.type"]);
                                        if (typeName4 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction")
                                        {
                                            RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                            
                                            JToken sendToServiceOwnersValue = actionValue["sendToServiceOwners"];
                                            if (sendToServiceOwnersValue != null && sendToServiceOwnersValue.Type != JTokenType.Null)
                                            {
                                                bool sendToServiceOwnersInstance = ((bool)sendToServiceOwnersValue);
                                                ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                            }
                                            
                                            JToken customEmailsArray = actionValue["customEmails"];
                                            if (customEmailsArray != null && customEmailsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken customEmailsValue in ((JArray)customEmailsArray))
                                                {
                                                    ruleEmailActionInstance.CustomEmails.Add(((string)customEmailsValue));
                                                }
                                            }
                                            propertiesInstance.Action = ruleEmailActionInstance;
                                        }
                                    }
                                    
                                    JToken lastUpdatedTimeValue = propertiesValue["lastUpdatedTime"];
                                    if (lastUpdatedTimeValue != null && lastUpdatedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastUpdatedTimeInstance = ((DateTime)lastUpdatedTimeValue);
                                        propertiesInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/microsoft.insights/alertrules/" + (parameters.Properties.Name != null ? parameters.Properties.Name.Trim() : "") + "?";
            url = url + "api-version=2014-04";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject ruleCreateOrUpdateParametersValue = new JObject();
                requestDoc = new JObject();
                requestDoc["ruleCreateOrUpdateParameters"] = ruleCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    ruleCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                ruleCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    ruleCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    propertiesValue["isEnabled"] = parameters.Properties.IsEnabled;
                    
                    if (parameters.Properties.Condition != null)
                    {
                        JObject conditionValue = new JObject();
                        propertiesValue["condition"] = conditionValue;
                        conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                        if (parameters.Properties.Condition is ThresholdRuleCondition)
                        {
                            ThresholdRuleCondition derived = ((ThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived.DataSource != null)
                            {
                                JObject dataSourceValue = new JObject();
                                conditionValue["dataSource"] = dataSourceValue;
                                dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                if (derived.DataSource is RuleMetricDataSource)
                                {
                                    RuleMetricDataSource derived2 = ((RuleMetricDataSource)derived.DataSource);
                                    
                                    if (derived2.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived2.ResourceUri;
                                    }
                                    
                                    if (derived2.MetricNamespace != null)
                                    {
                                        dataSourceValue["metricNamespace"] = derived2.MetricNamespace;
                                    }
                                    
                                    if (derived2.MetricName != null)
                                    {
                                        dataSourceValue["metricName"] = derived2.MetricName;
                                    }
                                }
                            }
                            
                            conditionValue["operator"] = derived.Operator.ToString();
                            
                            conditionValue["threshold"] = derived.Threshold;
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived.WindowSize);
                        }
                        if (parameters.Properties.Condition is LocationThresholdRuleCondition)
                        {
                            LocationThresholdRuleCondition derived3 = ((LocationThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived3.DataSource != null)
                            {
                                JObject dataSourceValue2 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue2;
                                dataSourceValue2["odata.type"] = derived3.DataSource.GetType().FullName;
                                if (derived3.DataSource is RuleMetricDataSource)
                                {
                                    RuleMetricDataSource derived4 = ((RuleMetricDataSource)derived3.DataSource);
                                    
                                    if (derived4.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived4.ResourceUri;
                                    }
                                    
                                    if (derived4.MetricNamespace != null)
                                    {
                                        dataSourceValue2["metricNamespace"] = derived4.MetricNamespace;
                                    }
                                    
                                    if (derived4.MetricName != null)
                                    {
                                        dataSourceValue2["metricName"] = derived4.MetricName;
                                    }
                                }
                            }
                            
                            conditionValue["windowSize"] = TypeConversion.To8601String(derived3.WindowSize);
                            
                            conditionValue["failedLocationCount"] = derived3.FailedLocationCount;
                        }
                    }
                    
                    if (parameters.Properties.Action != null)
                    {
                        JObject actionValue = new JObject();
                        propertiesValue["action"] = actionValue;
                        actionValue["odata.type"] = parameters.Properties.Action.GetType().FullName;
                        if (parameters.Properties.Action is RuleEmailAction)
                        {
                            RuleEmailAction derived5 = ((RuleEmailAction)parameters.Properties.Action);
                            
                            actionValue["sendToServiceOwners"] = derived5.SendToServiceOwners;
                            
                            if (derived5.CustomEmails != null)
                            {
                                JArray customEmailsArray = new JArray();
                                foreach (string customEmailsItem in derived5.CustomEmails)
                                {
                                    customEmailsArray.Add(customEmailsItem);
                                }
                                actionValue["customEmails"] = customEmailsArray;
                            }
                        }
                    }
                    
                    propertiesValue["lastUpdatedTime"] = parameters.Properties.LastUpdatedTime;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
