// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Frontend IP address of the load balancer
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class FrontendIPConfigurationInner : Microsoft.Rest.Azure.SubResource
    {
        /// <summary>
        /// Initializes a new instance of the FrontendIPConfigurationInner
        /// class.
        /// </summary>
        public FrontendIPConfigurationInner() { }

        /// <summary>
        /// Initializes a new instance of the FrontendIPConfigurationInner
        /// class.
        /// </summary>
        /// <param name="inboundNatRules">Read only. Inbound rules URIs that
        /// use this frontend IP</param>
        /// <param name="inboundNatPools">Read only. Inbound pools URIs that
        /// use this frontend IP</param>
        /// <param name="outboundNatRules">Read only. Outbound rules URIs that
        /// use this frontend IP</param>
        /// <param name="loadBalancingRules">Gets Load Balancing rules URIs
        /// that use this frontend IP</param>
        /// <param name="privateIPAddress">Gets or sets the privateIPAddress
        /// of the IP Configuration</param>
        /// <param name="privateIPAllocationMethod">Gets or sets PrivateIP
        /// allocation method. Possible values include: 'Static',
        /// 'Dynamic'</param>
        /// <param name="subnet">Gets or sets the reference of the subnet
        /// resource</param>
        /// <param name="publicIPAddress">Gets or sets the reference of the
        /// PublicIP resource</param>
        /// <param name="provisioningState">Gets provisioning state of the
        /// PublicIP resource Updating/Deleting/Failed</param>
        /// <param name="name">Gets name of the resource that is unique within
        /// a resource group. This name can be used to access the
        /// resource</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated</param>
        public FrontendIPConfigurationInner(string id = default(string), System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> inboundNatRules = default(System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource>), System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> inboundNatPools = default(System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource>), System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> outboundNatRules = default(System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource>), System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> loadBalancingRules = default(System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource>), string privateIPAddress = default(string), string privateIPAllocationMethod = default(string), SubnetInner subnet = default(SubnetInner), PublicIPAddressInner publicIPAddress = default(PublicIPAddressInner), string provisioningState = default(string), string name = default(string), string etag = default(string))
            : base(id)
        {
            InboundNatRules = inboundNatRules;
            InboundNatPools = inboundNatPools;
            OutboundNatRules = outboundNatRules;
            LoadBalancingRules = loadBalancingRules;
            PrivateIPAddress = privateIPAddress;
            PrivateIPAllocationMethod = privateIPAllocationMethod;
            Subnet = subnet;
            PublicIPAddress = publicIPAddress;
            ProvisioningState = provisioningState;
            Name = name;
            Etag = etag;
        }

        /// <summary>
        /// Gets read only. Inbound rules URIs that use this frontend IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.inboundNatRules")]
        public System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> InboundNatRules { get; private set; }

        /// <summary>
        /// Gets read only. Inbound pools URIs that use this frontend IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.inboundNatPools")]
        public System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> InboundNatPools { get; private set; }

        /// <summary>
        /// Gets read only. Outbound rules URIs that use this frontend IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outboundNatRules")]
        public System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> OutboundNatRules { get; private set; }

        /// <summary>
        /// Gets Load Balancing rules URIs that use this frontend IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancingRules")]
        public System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> LoadBalancingRules { get; private set; }

        /// <summary>
        /// Gets or sets the privateIPAddress of the IP Configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateIPAddress")]
        public string PrivateIPAddress { get; set; }

        /// <summary>
        /// Gets or sets PrivateIP allocation method. Possible values include:
        /// 'Static', 'Dynamic'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateIPAllocationMethod")]
        public string PrivateIPAllocationMethod { get; set; }

        /// <summary>
        /// Gets or sets the reference of the subnet resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subnet")]
        public SubnetInner Subnet { get; set; }

        /// <summary>
        /// Gets or sets the reference of the PublicIP resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIPAddress")]
        public PublicIPAddressInner PublicIPAddress { get; set; }

        /// <summary>
        /// Gets provisioning state of the PublicIP resource
        /// Updating/Deleting/Failed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets name of the resource that is unique within a resource group.
        /// This name can be used to access the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a unique read-only string that changes whenever the
        /// resource is updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

    }
}
