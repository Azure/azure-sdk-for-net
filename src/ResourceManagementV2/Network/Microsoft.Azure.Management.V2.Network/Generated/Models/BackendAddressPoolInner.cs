// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Pool of backend IP addresseses
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class BackendAddressPoolInner : Microsoft.Rest.Azure.SubResource
    {
        /// <summary>
        /// Initializes a new instance of the BackendAddressPoolInner class.
        /// </summary>
        public BackendAddressPoolInner() { }

        /// <summary>
        /// Initializes a new instance of the BackendAddressPoolInner class.
        /// </summary>
        /// <param name="backendIPConfigurations">Gets collection of
        /// references to IPs defined in NICs</param>
        /// <param name="loadBalancingRules">Gets Load Balancing rules that
        /// use this Backend Address Pool</param>
        /// <param name="outboundNatRule">Gets outbound rules that use this
        /// Backend Address Pool</param>
        /// <param name="provisioningState">Get provisioning state of the
        /// PublicIP resource Updating/Deleting/Failed</param>
        /// <param name="name">Gets name of the resource that is unique within
        /// a resource group. This name can be used to access the
        /// resource</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated</param>
        public BackendAddressPoolInner(string id = default(string), System.Collections.Generic.IList<NetworkInterfaceIPConfigurationInner> backendIPConfigurations = default(System.Collections.Generic.IList<NetworkInterfaceIPConfigurationInner>), System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> loadBalancingRules = default(System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource>), Microsoft.Rest.Azure.SubResource outboundNatRule = default(Microsoft.Rest.Azure.SubResource), string provisioningState = default(string), string name = default(string), string etag = default(string))
            : base(id)
        {
            BackendIPConfigurations = backendIPConfigurations;
            LoadBalancingRules = loadBalancingRules;
            OutboundNatRule = outboundNatRule;
            ProvisioningState = provisioningState;
            Name = name;
            Etag = etag;
        }

        /// <summary>
        /// Gets collection of references to IPs defined in NICs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendIPConfigurations")]
        public System.Collections.Generic.IList<NetworkInterfaceIPConfigurationInner> BackendIPConfigurations { get; private set; }

        /// <summary>
        /// Gets Load Balancing rules that use this Backend Address Pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancingRules")]
        public System.Collections.Generic.IList<Microsoft.Rest.Azure.SubResource> LoadBalancingRules { get; private set; }

        /// <summary>
        /// Gets outbound rules that use this Backend Address Pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outboundNatRule")]
        public Microsoft.Rest.Azure.SubResource OutboundNatRule { get; private set; }

        /// <summary>
        /// Gets or sets get provisioning state of the PublicIP resource
        /// Updating/Deleting/Failed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets name of the resource that is unique within a resource group.
        /// This name can be used to access the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a unique read-only string that changes whenever the
        /// resource is updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

    }
}
