// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Monitoring.Alerts;
using Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.Monitoring.Alerts
{
    /// <summary>
    /// Operations for managing the alert rules.
    /// </summary>
    internal partial class RuleOperations : IServiceOperations<AlertsClient>, IRuleOperations
    {
        /// <summary>
        /// Initializes a new instance of the RuleOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RuleOperations(AlertsClient client)
        {
            this._client = client;
        }
        
        private AlertsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Alerts.AlertsClient.
        /// </summary>
        public AlertsClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='parameters'>
        /// The rule to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateAsync(RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/alertrules/" + parameters.Rule.Id;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2013-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (parameters.Rule != null)
                {
                    JObject ruleValue = new JObject();
                    requestDoc = ruleValue;
                    
                    if (parameters.Rule.Id != null)
                    {
                        JToken idValue = parameters.Rule.Id;
                        ruleValue["Id"] = idValue;
                    }
                    
                    if (parameters.Rule.Name != null)
                    {
                        JToken nameValue = parameters.Rule.Name;
                        ruleValue["Name"] = nameValue;
                    }
                    
                    if (parameters.Rule.Description != null)
                    {
                        JToken descriptionValue = parameters.Rule.Description;
                        ruleValue["Description"] = descriptionValue;
                    }
                    
                    JToken isEnabledValue = parameters.Rule.IsEnabled;
                    ruleValue["IsEnabled"] = isEnabledValue;
                    
                    if (parameters.Rule.Condition != null)
                    {
                        JObject conditionValue = new JObject();
                        ruleValue["Condition"] = conditionValue;
                        conditionValue["odata.type"] = parameters.Rule.Condition.GetType().FullName;
                        if (parameters.Rule.Condition is ThresholdRuleCondition)
                        {
                            ThresholdRuleCondition derived = (ThresholdRuleCondition)parameters.Rule.Condition;
                            
                            if (derived.DataSource != null)
                            {
                                JObject dataSourceValue = new JObject();
                                conditionValue["DataSource"] = dataSourceValue;
                                dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                if (derived.DataSource is RuleMetricDataSource)
                                {
                                    RuleMetricDataSource derived2 = (RuleMetricDataSource)derived.DataSource;
                                    
                                    if (derived2.ResourceId != null)
                                    {
                                        JToken resourceIdValue = derived2.ResourceId;
                                        dataSourceValue["ResourceId"] = resourceIdValue;
                                    }
                                    
                                    if (derived2.MetricNamespace != null)
                                    {
                                        JToken metricNamespaceValue = derived2.MetricNamespace;
                                        dataSourceValue["MetricNamespace"] = metricNamespaceValue;
                                    }
                                    
                                    if (derived2.MetricName != null)
                                    {
                                        JToken metricNameValue = derived2.MetricName;
                                        dataSourceValue["MetricName"] = metricNameValue;
                                    }
                                }
                            }
                            
                            JToken operatorValue = derived.Operator.ToString();
                            conditionValue["Operator"] = operatorValue;
                            
                            JToken thresholdValue = derived.Threshold;
                            conditionValue["Threshold"] = thresholdValue;
                            
                            JToken windowSizeValue = TypeConversion.To8601String(derived.WindowSize);
                            conditionValue["WindowSize"] = windowSizeValue;
                        }
                    }
                    
                    if (parameters.Rule.Actions != null)
                    {
                        JArray actionsArray = new JArray();
                        foreach (RuleAction actionsItem in parameters.Rule.Actions)
                        {
                            JObject ruleActionValue = new JObject();
                            actionsArray.Add(ruleActionValue);
                            ruleActionValue["odata.type"] = actionsItem.GetType().FullName;
                            if (actionsItem is RuleEmailAction)
                            {
                                RuleEmailAction derived3 = (RuleEmailAction)actionsItem;
                                
                                JToken sendToServiceOwnersValue = derived3.SendToServiceOwners;
                                ruleActionValue["SendToServiceOwners"] = sendToServiceOwnersValue;
                                
                                if (derived3.CustomEmails != null)
                                {
                                    JArray customEmailsArray = new JArray();
                                    foreach (string customEmailsItem in derived3.CustomEmails)
                                    {
                                        customEmailsArray.Add(customEmailsItem);
                                    }
                                    ruleActionValue["CustomEmails"] = customEmailsArray;
                                }
                            }
                        }
                        ruleValue["Actions"] = actionsArray;
                    }
                    
                    JToken lastUpdatedTimeValue = parameters.Rule.LastUpdatedTime;
                    ruleValue["LastUpdatedTime"] = lastUpdatedTimeValue;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='ruleId'>
        /// The id of the rule to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string ruleId, CancellationToken cancellationToken)
        {
            // Validate
            if (ruleId == null)
            {
                throw new ArgumentNullException("ruleId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("ruleId", ruleId);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/alertrules/" + ruleId;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2013-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='ruleId'>
        /// The id of the rule to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public async Task<RuleGetResponse> GetAsync(string ruleId, CancellationToken cancellationToken)
        {
            // Validate
            if (ruleId == null)
            {
                throw new ArgumentNullException("ruleId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("ruleId", ruleId);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/alertrules/" + ruleId;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2013-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleGetResponse result = new RuleGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        Rule ruleInstance = new Rule();
                        result.Rule = ruleInstance;
                        
                        JToken idValue = responseDoc["Id"];
                        if (idValue != null)
                        {
                            string idInstance = (string)idValue;
                            ruleInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["Name"];
                        if (nameValue != null)
                        {
                            string nameInstance = (string)nameValue;
                            ruleInstance.Name = nameInstance;
                        }
                        
                        JToken descriptionValue = responseDoc["Description"];
                        if (descriptionValue != null)
                        {
                            string descriptionInstance = (string)descriptionValue;
                            ruleInstance.Description = descriptionInstance;
                        }
                        
                        JToken isEnabledValue = responseDoc["IsEnabled"];
                        if (isEnabledValue != null)
                        {
                            bool isEnabledInstance = (bool)isEnabledValue;
                            ruleInstance.IsEnabled = isEnabledInstance;
                        }
                        
                        JToken conditionValue = responseDoc["Condition"];
                        if (conditionValue != null)
                        {
                            string typeName = (string)conditionValue["odata.type"];
                            if (typeName == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition")
                            {
                                ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                
                                JToken dataSourceValue = conditionValue["DataSource"];
                                if (dataSourceValue != null)
                                {
                                    string typeName2 = (string)dataSourceValue["odata.type"];
                                    if (typeName2 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource")
                                    {
                                        RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                        
                                        JToken resourceIdValue = dataSourceValue["ResourceId"];
                                        if (resourceIdValue != null)
                                        {
                                            string resourceIdInstance = (string)resourceIdValue;
                                            ruleMetricDataSourceInstance.ResourceId = resourceIdInstance;
                                        }
                                        
                                        JToken metricNamespaceValue = dataSourceValue["MetricNamespace"];
                                        if (metricNamespaceValue != null)
                                        {
                                            string metricNamespaceInstance = (string)metricNamespaceValue;
                                            ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                        }
                                        
                                        JToken metricNameValue = dataSourceValue["MetricName"];
                                        if (metricNameValue != null)
                                        {
                                            string metricNameInstance = (string)metricNameValue;
                                            ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                        }
                                        thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                    }
                                }
                                
                                JToken operatorValue = conditionValue["Operator"];
                                if (operatorValue != null)
                                {
                                    ConditionOperator operatorInstance = (ConditionOperator)Enum.Parse(typeof(ConditionOperator), (string)operatorValue, false);
                                    thresholdRuleConditionInstance.Operator = operatorInstance;
                                }
                                
                                JToken thresholdValue = conditionValue["Threshold"];
                                if (thresholdValue != null)
                                {
                                    double thresholdInstance = (double)thresholdValue;
                                    thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                }
                                
                                JToken windowSizeValue = conditionValue["WindowSize"];
                                if (windowSizeValue != null)
                                {
                                    TimeSpan windowSizeInstance = TypeConversion.From8601TimeSpan((string)windowSizeValue);
                                    thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                }
                                ruleInstance.Condition = thresholdRuleConditionInstance;
                            }
                        }
                        
                        JArray actionsArray = (JArray)responseDoc["Actions"];
                        if (actionsArray != null)
                        {
                            foreach (JToken actionsValue in actionsArray)
                            {
                                string typeName3 = (string)actionsValue["odata.type"];
                                if (typeName3 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction")
                                {
                                    RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                    
                                    JToken sendToServiceOwnersValue = actionsValue["SendToServiceOwners"];
                                    if (sendToServiceOwnersValue != null)
                                    {
                                        bool sendToServiceOwnersInstance = (bool)sendToServiceOwnersValue;
                                        ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                    }
                                    
                                    JArray customEmailsArray = (JArray)actionsValue["CustomEmails"];
                                    if (customEmailsArray != null)
                                    {
                                        foreach (JToken customEmailsValue in customEmailsArray)
                                        {
                                            ruleEmailActionInstance.CustomEmails.Add((string)customEmailsValue);
                                        }
                                    }
                                    ruleInstance.Actions.Add(ruleEmailActionInstance);
                                }
                            }
                        }
                        
                        JToken lastUpdatedTimeValue = responseDoc["LastUpdatedTime"];
                        if (lastUpdatedTimeValue != null)
                        {
                            DateTime lastUpdatedTimeInstance = (DateTime)lastUpdatedTimeValue;
                            ruleInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the alert rules within a subscription
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public async Task<RuleListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/alertrules";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2013-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleListResponse result = new RuleListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        RuleCollection ruleCollectionInstance = new RuleCollection();
                        result.RuleCollection = ruleCollectionInstance;
                        
                        JArray valueArray = (JArray)responseDoc["Value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                Rule ruleInstance = new Rule();
                                ruleCollectionInstance.Value.Add(ruleInstance);
                                
                                JToken idValue = valueValue["Id"];
                                if (idValue != null)
                                {
                                    string idInstance = (string)idValue;
                                    ruleInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["Name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    ruleInstance.Name = nameInstance;
                                }
                                
                                JToken descriptionValue = valueValue["Description"];
                                if (descriptionValue != null)
                                {
                                    string descriptionInstance = (string)descriptionValue;
                                    ruleInstance.Description = descriptionInstance;
                                }
                                
                                JToken isEnabledValue = valueValue["IsEnabled"];
                                if (isEnabledValue != null)
                                {
                                    bool isEnabledInstance = (bool)isEnabledValue;
                                    ruleInstance.IsEnabled = isEnabledInstance;
                                }
                                
                                JToken conditionValue = valueValue["Condition"];
                                if (conditionValue != null)
                                {
                                    string typeName = (string)conditionValue["odata.type"];
                                    if (typeName == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.ThresholdRuleCondition")
                                    {
                                        ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                        
                                        JToken dataSourceValue = conditionValue["DataSource"];
                                        if (dataSourceValue != null)
                                        {
                                            string typeName2 = (string)dataSourceValue["odata.type"];
                                            if (typeName2 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleMetricDataSource")
                                            {
                                                RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                                
                                                JToken resourceIdValue = dataSourceValue["ResourceId"];
                                                if (resourceIdValue != null)
                                                {
                                                    string resourceIdInstance = (string)resourceIdValue;
                                                    ruleMetricDataSourceInstance.ResourceId = resourceIdInstance;
                                                }
                                                
                                                JToken metricNamespaceValue = dataSourceValue["MetricNamespace"];
                                                if (metricNamespaceValue != null)
                                                {
                                                    string metricNamespaceInstance = (string)metricNamespaceValue;
                                                    ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                                }
                                                
                                                JToken metricNameValue = dataSourceValue["MetricName"];
                                                if (metricNameValue != null)
                                                {
                                                    string metricNameInstance = (string)metricNameValue;
                                                    ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                                }
                                                thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                            }
                                        }
                                        
                                        JToken operatorValue = conditionValue["Operator"];
                                        if (operatorValue != null)
                                        {
                                            ConditionOperator operatorInstance = (ConditionOperator)Enum.Parse(typeof(ConditionOperator), (string)operatorValue, false);
                                            thresholdRuleConditionInstance.Operator = operatorInstance;
                                        }
                                        
                                        JToken thresholdValue = conditionValue["Threshold"];
                                        if (thresholdValue != null)
                                        {
                                            double thresholdInstance = (double)thresholdValue;
                                            thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                        }
                                        
                                        JToken windowSizeValue = conditionValue["WindowSize"];
                                        if (windowSizeValue != null)
                                        {
                                            TimeSpan windowSizeInstance = TypeConversion.From8601TimeSpan((string)windowSizeValue);
                                            thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                        }
                                        ruleInstance.Condition = thresholdRuleConditionInstance;
                                    }
                                }
                                
                                JArray actionsArray = (JArray)valueValue["Actions"];
                                if (actionsArray != null)
                                {
                                    foreach (JToken actionsValue in actionsArray)
                                    {
                                        string typeName3 = (string)actionsValue["odata.type"];
                                        if (typeName3 == "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction")
                                        {
                                            RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                            
                                            JToken sendToServiceOwnersValue = actionsValue["SendToServiceOwners"];
                                            if (sendToServiceOwnersValue != null)
                                            {
                                                bool sendToServiceOwnersInstance = (bool)sendToServiceOwnersValue;
                                                ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                            }
                                            
                                            JArray customEmailsArray = (JArray)actionsValue["CustomEmails"];
                                            if (customEmailsArray != null)
                                            {
                                                foreach (JToken customEmailsValue in customEmailsArray)
                                                {
                                                    ruleEmailActionInstance.CustomEmails.Add((string)customEmailsValue);
                                                }
                                            }
                                            ruleInstance.Actions.Add(ruleEmailActionInstance);
                                        }
                                    }
                                }
                                
                                JToken lastUpdatedTimeValue = valueValue["LastUpdatedTime"];
                                if (lastUpdatedTimeValue != null)
                                {
                                    DateTime lastUpdatedTimeInstance = (DateTime)lastUpdatedTimeValue;
                                    ruleInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
