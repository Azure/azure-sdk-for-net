// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Monitoring.Metrics;
using Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.Monitoring.Metrics
{
    internal partial class MetricValueOperations : IServiceOperations<MetricsClient>, IMetricValueOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricValueOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricValueOperations(MetricsClient client)
        {
            this._client = client;
        }
        
        private MetricsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.MetricsClient.
        /// </summary>
        public MetricsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The List Metric Value operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNames'>
        /// The names of the metrics.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='timeGrain'>
        /// The time grain of the metrics.
        /// </param>
        /// <param name='startTime'>
        /// The start time (in UTC) of the metrics.
        /// </param>
        /// <param name='endTime'>
        /// The end time (in UTC) of the metrics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public async Task<MetricValueListResponse> ListAsync(string resourceId, IList<string> metricNames, string metricNamespace, TimeSpan timeGrain, DateTime startTime, DateTime endTime, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            if (metricNames == null)
            {
                throw new ArgumentNullException("metricNames");
            }
            if (metricNames.Count <= 0)
            {
                throw new ArgumentException("metricNames cannot be empty.");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceId", resourceId);
                tracingParameters.Add("metricNames", metricNames);
                tracingParameters.Add("metricNamespace", metricNamespace);
                tracingParameters.Add("timeGrain", timeGrain);
                tracingParameters.Add("startTime", startTime);
                tracingParameters.Add("endTime", endTime);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/metricvalues/query?";
            url = url + "&resourceId=" + Uri.EscapeUriString(resourceId);
            if (metricNamespace != null)
            {
                url = url + "&namespace=" + Uri.EscapeUriString(metricNamespace);
            }
            url = url + "&names=" + Uri.EscapeUriString(string.Join(",", metricNames));
            url = url + "&timeGrain=" + Uri.EscapeUriString(TypeConversion.To8601String(timeGrain));
            url = url + "&startTime=" + Uri.EscapeUriString(string.Format(CultureInfo.InvariantCulture, "{0:O}", startTime.ToUniversalTime()));
            url = url + "&endTime=" + Uri.EscapeUriString(string.Format(CultureInfo.InvariantCulture, "{0:O}", endTime.ToUniversalTime()));
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2013-10-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricValueListResponse result = new MetricValueListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        MetricValueSetCollection metricValueSetCollectionInstance = new MetricValueSetCollection();
                        result.MetricValueSetCollection = metricValueSetCollectionInstance;
                        
                        JArray valueArray = (JArray)responseDoc["Value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                MetricValueSet metricValueSetInstance = new MetricValueSet();
                                metricValueSetCollectionInstance.Value.Add(metricValueSetInstance);
                                
                                JToken nameValue = valueValue["Name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    metricValueSetInstance.Name = nameInstance;
                                }
                                
                                JToken namespaceValue = valueValue["Namespace"];
                                if (namespaceValue != null)
                                {
                                    string namespaceInstance = (string)namespaceValue;
                                    metricValueSetInstance.Namespace = namespaceInstance;
                                }
                                
                                JToken displayNameValue = valueValue["DisplayName"];
                                if (displayNameValue != null)
                                {
                                    string displayNameInstance = (string)displayNameValue;
                                    metricValueSetInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken unitValue = valueValue["Unit"];
                                if (unitValue != null)
                                {
                                    string unitInstance = (string)unitValue;
                                    metricValueSetInstance.Unit = unitInstance;
                                }
                                
                                JToken primaryAggregationValue = valueValue["PrimaryAggregation"];
                                if (primaryAggregationValue != null)
                                {
                                    string primaryAggregationInstance = (string)primaryAggregationValue;
                                    metricValueSetInstance.PrimaryAggregation = primaryAggregationInstance;
                                }
                                
                                JToken timeGrainValue = valueValue["TimeGrain"];
                                if (timeGrainValue != null)
                                {
                                    TimeSpan timeGrainInstance = TypeConversion.From8601TimeSpan((string)timeGrainValue);
                                    metricValueSetInstance.TimeGrain = timeGrainInstance;
                                }
                                
                                JToken startTimeValue = valueValue["StartTime"];
                                if (startTimeValue != null)
                                {
                                    DateTime startTimeInstance = (DateTime)startTimeValue;
                                    metricValueSetInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = valueValue["EndTime"];
                                if (endTimeValue != null)
                                {
                                    DateTime endTimeInstance = (DateTime)endTimeValue;
                                    metricValueSetInstance.EndTime = endTimeInstance;
                                }
                                
                                JArray metricValuesArray = (JArray)valueValue["MetricValues"];
                                if (metricValuesArray != null)
                                {
                                    foreach (JToken metricValuesValue in metricValuesArray)
                                    {
                                        MetricValue metricValueInstance = new MetricValue();
                                        metricValueSetInstance.MetricValues.Add(metricValueInstance);
                                        
                                        JToken timestampValue = metricValuesValue["Timestamp"];
                                        if (timestampValue != null)
                                        {
                                            DateTime timestampInstance = (DateTime)timestampValue;
                                            metricValueInstance.Timestamp = timestampInstance;
                                        }
                                        
                                        JToken averageValue = metricValuesValue["Average"];
                                        if (averageValue != null)
                                        {
                                            double averageInstance = (double)averageValue;
                                            metricValueInstance.Average = averageInstance;
                                        }
                                        
                                        JToken minimumValue = metricValuesValue["Minimum"];
                                        if (minimumValue != null)
                                        {
                                            double minimumInstance = (double)minimumValue;
                                            metricValueInstance.Minimum = minimumInstance;
                                        }
                                        
                                        JToken maximumValue = metricValuesValue["Maximum"];
                                        if (maximumValue != null)
                                        {
                                            double maximumInstance = (double)maximumValue;
                                            metricValueInstance.Maximum = maximumInstance;
                                        }
                                        
                                        JToken totalValue = metricValuesValue["Total"];
                                        if (totalValue != null)
                                        {
                                            double totalInstance = (double)totalValue;
                                            metricValueInstance.Total = totalInstance;
                                        }
                                        
                                        JToken annotationValue = metricValuesValue["Annotation"];
                                        if (annotationValue != null)
                                        {
                                            string annotationInstance = (string)annotationValue;
                                            metricValueInstance.Annotation = annotationInstance;
                                        }
                                        
                                        JToken countValue = metricValuesValue["Count"];
                                        if (countValue != null)
                                        {
                                            int countInstance = (int)countValue;
                                            metricValueInstance.Count = countInstance;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
