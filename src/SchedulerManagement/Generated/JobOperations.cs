// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Scheduler;
using Microsoft.WindowsAzure.Scheduler.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Scheduler
{
    internal partial class JobOperations : IServiceOperations<SchedulerClient>, IJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the JobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobOperations(SchedulerClient client)
        {
            this._client = client;
        }
        
        private SchedulerClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Scheduler.SchedulerClient.
        /// </summary>
        public SchedulerClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// If the user wants the server to create the job id then he can use a
        /// POST request to the jobs resource.
        /// </summary>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Job operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Job operation response.
        /// </returns>
        public async Task<JobCreateResponse> CreateAsync(JobCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Action == null)
            {
                throw new ArgumentNullException("parameters.Action");
            }
            if (parameters.Action.ErrorAction != null)
            {
                if (parameters.Action.ErrorAction.QueueMessage != null)
                {
                    if (parameters.Action.ErrorAction.QueueMessage.Message == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.QueueMessage.Message");
                    }
                    if (parameters.Action.ErrorAction.QueueMessage.QueueName == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.QueueMessage.QueueName");
                    }
                    if (parameters.Action.ErrorAction.QueueMessage.SasToken == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.QueueMessage.SasToken");
                    }
                    if (parameters.Action.ErrorAction.QueueMessage.StorageAccountName == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.QueueMessage.StorageAccountName");
                    }
                }
                if (parameters.Action.ErrorAction.Request != null)
                {
                    if (parameters.Action.ErrorAction.Request.Method == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.Request.Method");
                    }
                    if (parameters.Action.ErrorAction.Request.Uri == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.Request.Uri");
                    }
                }
            }
            if (parameters.Action.QueueMessage != null)
            {
                if (parameters.Action.QueueMessage.Message == null)
                {
                    throw new ArgumentNullException("parameters.Action.QueueMessage.Message");
                }
                if (parameters.Action.QueueMessage.QueueName == null)
                {
                    throw new ArgumentNullException("parameters.Action.QueueMessage.QueueName");
                }
                if (parameters.Action.QueueMessage.SasToken == null)
                {
                    throw new ArgumentNullException("parameters.Action.QueueMessage.SasToken");
                }
                if (parameters.Action.QueueMessage.StorageAccountName == null)
                {
                    throw new ArgumentNullException("parameters.Action.QueueMessage.StorageAccountName");
                }
            }
            if (parameters.Action.Request != null)
            {
                if (parameters.Action.Request.Method == null)
                {
                    throw new ArgumentNullException("parameters.Action.Request.Method");
                }
                if (parameters.Action.Request.Uri == null)
                {
                    throw new ArgumentNullException("parameters.Action.Request.Uri");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + this.Client.CloudServiceName + "/resources/scheduler/~/JobCollections/" + this.Client.JobCollectionName + "/jobs?api-version=2013-10-31_Preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject jobCreateParametersValue = new JObject();
                requestDoc = jobCreateParametersValue;
                
                if (parameters.StartTime != null)
                {
                    JToken startTimeValue = parameters.StartTime;
                    jobCreateParametersValue["startTime"] = startTimeValue;
                }
                
                JObject actionValue = new JObject();
                jobCreateParametersValue["action"] = actionValue;
                
                JToken typeValue = SchedulerClient.JobActionTypeToString(parameters.Action.Type);
                actionValue["type"] = typeValue;
                
                if (parameters.Action.RetryPolicy != null)
                {
                    JObject retryPolicyValue = new JObject();
                    actionValue["retryPolicy"] = retryPolicyValue;
                    
                    JToken retryTypeValue = SchedulerClient.RetryTypeToString(parameters.Action.RetryPolicy.RetryType);
                    retryPolicyValue["retryType"] = retryTypeValue;
                    
                    if (parameters.Action.RetryPolicy.RetryInterval != null)
                    {
                        JToken retryIntervalValue = parameters.Action.RetryPolicy.RetryInterval.ToString();
                        retryPolicyValue["retryInterval"] = retryIntervalValue;
                    }
                    
                    if (parameters.Action.RetryPolicy.RetryCount != null)
                    {
                        JToken retryCountValue = parameters.Action.RetryPolicy.RetryCount;
                        retryPolicyValue["retryCount"] = retryCountValue;
                    }
                }
                
                if (parameters.Action.ErrorAction != null)
                {
                    JObject errorActionValue = new JObject();
                    actionValue["errorAction"] = errorActionValue;
                    
                    JToken typeValue2 = SchedulerClient.JobActionTypeToString(parameters.Action.ErrorAction.Type);
                    errorActionValue["type"] = typeValue2;
                    
                    if (parameters.Action.ErrorAction.Request != null)
                    {
                        JObject requestValue = new JObject();
                        errorActionValue["request"] = requestValue;
                        
                        JToken uriValue = parameters.Action.ErrorAction.Request.Uri.ToString();
                        requestValue["uri"] = uriValue;
                        
                        JToken methodValue = parameters.Action.ErrorAction.Request.Method;
                        requestValue["method"] = methodValue;
                        
                        JObject headersDictionary = new JObject();
                        if (parameters.Action.ErrorAction.Request.Headers != null)
                        {
                            foreach (KeyValuePair<string, string> pair in parameters.Action.ErrorAction.Request.Headers)
                            {
                                string headersKey = pair.Key;
                                string headersValue = pair.Value;
                                headersDictionary[headersKey] = headersValue;
                            }
                        }
                        requestValue["headers"] = headersDictionary;
                        
                        if (parameters.Action.ErrorAction.Request.Body != null)
                        {
                            JToken bodyValue = parameters.Action.ErrorAction.Request.Body;
                            requestValue["body"] = bodyValue;
                        }
                    }
                    
                    if (parameters.Action.ErrorAction.QueueMessage != null)
                    {
                        JObject queueMessageValue = new JObject();
                        errorActionValue["queueMessage"] = queueMessageValue;
                        
                        JToken storageAccountValue = parameters.Action.ErrorAction.QueueMessage.StorageAccountName;
                        queueMessageValue["storageAccount"] = storageAccountValue;
                        
                        JToken queueNameValue = parameters.Action.ErrorAction.QueueMessage.QueueName;
                        queueMessageValue["queueName"] = queueNameValue;
                        
                        JToken sasTokenValue = parameters.Action.ErrorAction.QueueMessage.SasToken;
                        queueMessageValue["sasToken"] = sasTokenValue;
                        
                        JToken messageValue = parameters.Action.ErrorAction.QueueMessage.Message;
                        queueMessageValue["message"] = messageValue;
                    }
                }
                
                if (parameters.Action.Request != null)
                {
                    JObject requestValue2 = new JObject();
                    actionValue["request"] = requestValue2;
                    
                    JToken uriValue2 = parameters.Action.Request.Uri.ToString();
                    requestValue2["uri"] = uriValue2;
                    
                    JToken methodValue2 = parameters.Action.Request.Method;
                    requestValue2["method"] = methodValue2;
                    
                    JObject headersDictionary2 = new JObject();
                    if (parameters.Action.Request.Headers != null)
                    {
                        foreach (KeyValuePair<string, string> pair2 in parameters.Action.Request.Headers)
                        {
                            string headersKey2 = pair2.Key;
                            string headersValue2 = pair2.Value;
                            headersDictionary2[headersKey2] = headersValue2;
                        }
                    }
                    requestValue2["headers"] = headersDictionary2;
                    
                    if (parameters.Action.Request.Body != null)
                    {
                        JToken bodyValue2 = parameters.Action.Request.Body;
                        requestValue2["body"] = bodyValue2;
                    }
                }
                
                if (parameters.Action.QueueMessage != null)
                {
                    JObject queueMessageValue2 = new JObject();
                    actionValue["queueMessage"] = queueMessageValue2;
                    
                    JToken storageAccountValue2 = parameters.Action.QueueMessage.StorageAccountName;
                    queueMessageValue2["storageAccount"] = storageAccountValue2;
                    
                    JToken queueNameValue2 = parameters.Action.QueueMessage.QueueName;
                    queueMessageValue2["queueName"] = queueNameValue2;
                    
                    JToken sasTokenValue2 = parameters.Action.QueueMessage.SasToken;
                    queueMessageValue2["sasToken"] = sasTokenValue2;
                    
                    JToken messageValue2 = parameters.Action.QueueMessage.Message;
                    queueMessageValue2["message"] = messageValue2;
                }
                
                if (parameters.Recurrence != null)
                {
                    JObject recurrenceValue = new JObject();
                    jobCreateParametersValue["recurrence"] = recurrenceValue;
                    
                    JToken frequencyValue = SchedulerClient.JobRecurrenceFrequencyToString(parameters.Recurrence.Frequency);
                    recurrenceValue["frequency"] = frequencyValue;
                    
                    if (parameters.Recurrence.Interval != null)
                    {
                        JToken intervalValue = parameters.Recurrence.Interval;
                        recurrenceValue["interval"] = intervalValue;
                    }
                    
                    if (parameters.Recurrence.Count != null)
                    {
                        JToken countValue = parameters.Recurrence.Count;
                        recurrenceValue["count"] = countValue;
                    }
                    
                    if (parameters.Recurrence.EndTime != null)
                    {
                        JToken endTimeValue = parameters.Recurrence.EndTime;
                        recurrenceValue["endTime"] = endTimeValue;
                    }
                    
                    if (parameters.Recurrence.Schedule != null)
                    {
                        JObject scheduleValue = new JObject();
                        recurrenceValue["schedule"] = scheduleValue;
                        
                        if (parameters.Recurrence.Schedule.Minutes != null)
                        {
                            JArray minutesArray = new JArray();
                            foreach (int minutesItem in parameters.Recurrence.Schedule.Minutes)
                            {
                                minutesArray.Add(minutesItem);
                            }
                            scheduleValue["minutes"] = minutesArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.Hours != null)
                        {
                            JArray hoursArray = new JArray();
                            foreach (int hoursItem in parameters.Recurrence.Schedule.Hours)
                            {
                                hoursArray.Add(hoursItem);
                            }
                            scheduleValue["hours"] = hoursArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.Days != null)
                        {
                            JArray daysArray = new JArray();
                            foreach (JobScheduleDay daysItem in parameters.Recurrence.Schedule.Days)
                            {
                                daysArray.Add(SchedulerClient.JobScheduleDayToString(daysItem));
                            }
                            scheduleValue["days"] = daysArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.Months != null)
                        {
                            JArray monthsArray = new JArray();
                            foreach (int monthsItem in parameters.Recurrence.Schedule.Months)
                            {
                                monthsArray.Add(monthsItem);
                            }
                            scheduleValue["months"] = monthsArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.MonthDays != null)
                        {
                            JArray monthDaysArray = new JArray();
                            foreach (int monthDaysItem in parameters.Recurrence.Schedule.MonthDays)
                            {
                                monthDaysArray.Add(monthDaysItem);
                            }
                            scheduleValue["monthDays"] = monthDaysArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.MonthlyOccurrences != null)
                        {
                            JArray monthlyOccurrencesArray = new JArray();
                            foreach (JobScheduleMonthlyOccurrence monthlyOccurrencesItem in parameters.Recurrence.Schedule.MonthlyOccurrences)
                            {
                                JObject jobScheduleMonthlyOccurrenceValue = new JObject();
                                monthlyOccurrencesArray.Add(jobScheduleMonthlyOccurrenceValue);
                                
                                JToken dayValue = SchedulerClient.JobScheduleDayToString(monthlyOccurrencesItem.Day);
                                jobScheduleMonthlyOccurrenceValue["day"] = dayValue;
                                
                                if (monthlyOccurrencesItem.Occurrence != null)
                                {
                                    JToken occurrenceValue = monthlyOccurrencesItem.Occurrence;
                                    jobScheduleMonthlyOccurrenceValue["occurrence"] = occurrenceValue;
                                }
                            }
                            scheduleValue["monthlyOccurrences"] = monthlyOccurrencesArray;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobCreateResponse result = new JobCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        Job jobInstance = new Job();
                        result.Job = jobInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null)
                        {
                            string idInstance = (string)idValue;
                            jobInstance.Id = idInstance;
                        }
                        
                        JToken startTimeValue2 = responseDoc["startTime"];
                        if (startTimeValue2 != null)
                        {
                            DateTime startTimeInstance = (DateTime)startTimeValue2;
                            jobInstance.StartTime = startTimeInstance;
                        }
                        
                        JToken actionValue2 = responseDoc["action"];
                        if (actionValue2 != null)
                        {
                            JobAction actionInstance = new JobAction();
                            jobInstance.Action = actionInstance;
                            
                            JToken typeValue3 = actionValue2["type"];
                            if (typeValue3 != null)
                            {
                                JobActionType typeInstance = SchedulerClient.ParseJobActionType((string)typeValue3);
                                actionInstance.Type = typeInstance;
                            }
                            
                            JToken retryPolicyValue2 = actionValue2["retryPolicy"];
                            if (retryPolicyValue2 != null)
                            {
                                RetryPolicy retryPolicyInstance = new RetryPolicy();
                                actionInstance.RetryPolicy = retryPolicyInstance;
                                
                                JToken retryTypeValue2 = retryPolicyValue2["retryType"];
                                if (retryTypeValue2 != null)
                                {
                                    RetryType retryTypeInstance = SchedulerClient.ParseRetryType((string)retryTypeValue2);
                                    retryPolicyInstance.RetryType = retryTypeInstance;
                                }
                                
                                JToken retryIntervalValue2 = retryPolicyValue2["retryInterval"];
                                if (retryIntervalValue2 != null)
                                {
                                    TimeSpan retryIntervalInstance = TimeSpan.Parse((string)retryIntervalValue2, CultureInfo.InvariantCulture);
                                    retryPolicyInstance.RetryInterval = retryIntervalInstance;
                                }
                                
                                JToken retryCountValue2 = retryPolicyValue2["retryCount"];
                                if (retryCountValue2 != null)
                                {
                                    int retryCountInstance = (int)retryCountValue2;
                                    retryPolicyInstance.RetryCount = retryCountInstance;
                                }
                            }
                            
                            JToken errorActionValue2 = actionValue2["errorAction"];
                            if (errorActionValue2 != null)
                            {
                                JobErrorAction errorActionInstance = new JobErrorAction();
                                actionInstance.ErrorAction = errorActionInstance;
                                
                                JToken typeValue4 = errorActionValue2["type"];
                                if (typeValue4 != null)
                                {
                                    JobActionType typeInstance2 = SchedulerClient.ParseJobActionType((string)typeValue4);
                                    errorActionInstance.Type = typeInstance2;
                                }
                                
                                JToken requestValue3 = errorActionValue2["request"];
                                if (requestValue3 != null)
                                {
                                    JobHttpRequest requestInstance = new JobHttpRequest();
                                    errorActionInstance.Request = requestInstance;
                                    
                                    JToken uriValue3 = requestValue3["uri"];
                                    if (uriValue3 != null)
                                    {
                                        Uri uriInstance = TypeConversion.TryParseUri((string)uriValue3);
                                        requestInstance.Uri = uriInstance;
                                    }
                                    
                                    JToken methodValue3 = requestValue3["method"];
                                    if (methodValue3 != null)
                                    {
                                        string methodInstance = (string)methodValue3;
                                        requestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken headersSequenceElement = requestValue3["headers"];
                                    if (headersSequenceElement != null)
                                    {
                                        foreach (JProperty property in headersSequenceElement)
                                        {
                                            string headersKey3 = (string)property.Name;
                                            string headersValue3 = (string)property.Value;
                                            requestInstance.Headers.Add(headersKey3, headersValue3);
                                        }
                                    }
                                    
                                    JToken bodyValue3 = requestValue3["body"];
                                    if (bodyValue3 != null)
                                    {
                                        string bodyInstance = (string)bodyValue3;
                                        requestInstance.Body = bodyInstance;
                                    }
                                }
                                
                                JToken queueMessageValue3 = errorActionValue2["queueMessage"];
                                if (queueMessageValue3 != null)
                                {
                                    JobQueueMessage queueMessageInstance = new JobQueueMessage();
                                    errorActionInstance.QueueMessage = queueMessageInstance;
                                    
                                    JToken storageAccountValue3 = queueMessageValue3["storageAccount"];
                                    if (storageAccountValue3 != null)
                                    {
                                        string storageAccountInstance = (string)storageAccountValue3;
                                        queueMessageInstance.StorageAccountName = storageAccountInstance;
                                    }
                                    
                                    JToken queueNameValue3 = queueMessageValue3["queueName"];
                                    if (queueNameValue3 != null)
                                    {
                                        string queueNameInstance = (string)queueNameValue3;
                                        queueMessageInstance.QueueName = queueNameInstance;
                                    }
                                    
                                    JToken sasTokenValue3 = queueMessageValue3["sasToken"];
                                    if (sasTokenValue3 != null)
                                    {
                                        string sasTokenInstance = (string)sasTokenValue3;
                                        queueMessageInstance.SasToken = sasTokenInstance;
                                    }
                                    
                                    JToken messageValue3 = queueMessageValue3["message"];
                                    if (messageValue3 != null)
                                    {
                                        string messageInstance = (string)messageValue3;
                                        queueMessageInstance.Message = messageInstance;
                                    }
                                }
                            }
                            
                            JToken requestValue4 = actionValue2["request"];
                            if (requestValue4 != null)
                            {
                                JobHttpRequest requestInstance2 = new JobHttpRequest();
                                actionInstance.Request = requestInstance2;
                                
                                JToken uriValue4 = requestValue4["uri"];
                                if (uriValue4 != null)
                                {
                                    Uri uriInstance2 = TypeConversion.TryParseUri((string)uriValue4);
                                    requestInstance2.Uri = uriInstance2;
                                }
                                
                                JToken methodValue4 = requestValue4["method"];
                                if (methodValue4 != null)
                                {
                                    string methodInstance2 = (string)methodValue4;
                                    requestInstance2.Method = methodInstance2;
                                }
                                
                                JToken headersSequenceElement2 = requestValue4["headers"];
                                if (headersSequenceElement2 != null)
                                {
                                    foreach (JProperty property2 in headersSequenceElement2)
                                    {
                                        string headersKey4 = (string)property2.Name;
                                        string headersValue4 = (string)property2.Value;
                                        requestInstance2.Headers.Add(headersKey4, headersValue4);
                                    }
                                }
                                
                                JToken bodyValue4 = requestValue4["body"];
                                if (bodyValue4 != null)
                                {
                                    string bodyInstance2 = (string)bodyValue4;
                                    requestInstance2.Body = bodyInstance2;
                                }
                            }
                            
                            JToken queueMessageValue4 = actionValue2["queueMessage"];
                            if (queueMessageValue4 != null)
                            {
                                JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                                actionInstance.QueueMessage = queueMessageInstance2;
                                
                                JToken storageAccountValue4 = queueMessageValue4["storageAccount"];
                                if (storageAccountValue4 != null)
                                {
                                    string storageAccountInstance2 = (string)storageAccountValue4;
                                    queueMessageInstance2.StorageAccountName = storageAccountInstance2;
                                }
                                
                                JToken queueNameValue4 = queueMessageValue4["queueName"];
                                if (queueNameValue4 != null)
                                {
                                    string queueNameInstance2 = (string)queueNameValue4;
                                    queueMessageInstance2.QueueName = queueNameInstance2;
                                }
                                
                                JToken sasTokenValue4 = queueMessageValue4["sasToken"];
                                if (sasTokenValue4 != null)
                                {
                                    string sasTokenInstance2 = (string)sasTokenValue4;
                                    queueMessageInstance2.SasToken = sasTokenInstance2;
                                }
                                
                                JToken messageValue4 = queueMessageValue4["message"];
                                if (messageValue4 != null)
                                {
                                    string messageInstance2 = (string)messageValue4;
                                    queueMessageInstance2.Message = messageInstance2;
                                }
                            }
                        }
                        
                        JToken recurrenceValue2 = responseDoc["recurrence"];
                        if (recurrenceValue2 != null)
                        {
                            JobRecurrence recurrenceInstance = new JobRecurrence();
                            jobInstance.Recurrence = recurrenceInstance;
                            
                            JToken frequencyValue2 = recurrenceValue2["frequency"];
                            if (frequencyValue2 != null)
                            {
                                JobRecurrenceFrequency frequencyInstance = SchedulerClient.ParseJobRecurrenceFrequency((string)frequencyValue2);
                                recurrenceInstance.Frequency = frequencyInstance;
                            }
                            
                            JToken intervalValue2 = recurrenceValue2["interval"];
                            if (intervalValue2 != null)
                            {
                                int intervalInstance = (int)intervalValue2;
                                recurrenceInstance.Interval = intervalInstance;
                            }
                            
                            JToken countValue2 = recurrenceValue2["count"];
                            if (countValue2 != null)
                            {
                                int countInstance = (int)countValue2;
                                recurrenceInstance.Count = countInstance;
                            }
                            
                            JToken endTimeValue2 = recurrenceValue2["endTime"];
                            if (endTimeValue2 != null)
                            {
                                DateTime endTimeInstance = (DateTime)endTimeValue2;
                                recurrenceInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken scheduleValue2 = recurrenceValue2["schedule"];
                            if (scheduleValue2 != null)
                            {
                                JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                                recurrenceInstance.Schedule = scheduleInstance;
                                
                                JArray minutesArray2 = (JArray)scheduleValue2["minutes"];
                                if (minutesArray2 != null)
                                {
                                    foreach (JToken minutesValue in minutesArray2)
                                    {
                                        scheduleInstance.Minutes.Add((int)minutesValue);
                                    }
                                }
                                
                                JArray hoursArray2 = (JArray)scheduleValue2["hours"];
                                if (hoursArray2 != null)
                                {
                                    foreach (JToken hoursValue in hoursArray2)
                                    {
                                        scheduleInstance.Hours.Add((int)hoursValue);
                                    }
                                }
                                
                                JArray daysArray2 = (JArray)scheduleValue2["days"];
                                if (daysArray2 != null)
                                {
                                    foreach (JToken daysValue in daysArray2)
                                    {
                                        scheduleInstance.Days.Add(SchedulerClient.ParseJobScheduleDay((string)daysValue));
                                    }
                                }
                                
                                JArray monthsArray2 = (JArray)scheduleValue2["months"];
                                if (monthsArray2 != null)
                                {
                                    foreach (JToken monthsValue in monthsArray2)
                                    {
                                        scheduleInstance.Months.Add((int)monthsValue);
                                    }
                                }
                                
                                JArray monthDaysArray2 = (JArray)scheduleValue2["monthDays"];
                                if (monthDaysArray2 != null)
                                {
                                    foreach (JToken monthDaysValue in monthDaysArray2)
                                    {
                                        scheduleInstance.MonthDays.Add((int)monthDaysValue);
                                    }
                                }
                                
                                JArray monthlyOccurrencesArray2 = (JArray)scheduleValue2["monthlyOccurrences"];
                                if (monthlyOccurrencesArray2 != null)
                                {
                                    foreach (JToken monthlyOccurrencesValue in monthlyOccurrencesArray2)
                                    {
                                        JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                        scheduleInstance.MonthlyOccurrences.Add(jobScheduleMonthlyOccurrenceInstance);
                                        
                                        JToken dayValue2 = monthlyOccurrencesValue["day"];
                                        if (dayValue2 != null)
                                        {
                                            JobScheduleDay dayInstance = SchedulerClient.ParseJobScheduleDay((string)dayValue2);
                                            jobScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                        }
                                        
                                        JToken occurrenceValue2 = monthlyOccurrencesValue["occurrence"];
                                        if (occurrenceValue2 != null)
                                        {
                                            int occurrenceInstance = (int)occurrenceValue2;
                                            jobScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken statusValue = responseDoc["status"];
                        if (statusValue != null)
                        {
                            JobStatus statusInstance = new JobStatus();
                            jobInstance.Status = statusInstance;
                            
                            JToken lastExecutionTimeValue = statusValue["lastExecutionTime"];
                            if (lastExecutionTimeValue != null)
                            {
                                DateTime lastExecutionTimeInstance = (DateTime)lastExecutionTimeValue;
                                statusInstance.LastExecutionTime = lastExecutionTimeInstance;
                            }
                            
                            JToken nextExecutionTimeValue = statusValue["nextExecutionTime"];
                            if (nextExecutionTimeValue != null)
                            {
                                DateTime nextExecutionTimeInstance = (DateTime)nextExecutionTimeValue;
                                statusInstance.NextExecutionTime = nextExecutionTimeInstance;
                            }
                            
                            JToken executionCountValue = statusValue["executionCount"];
                            if (executionCountValue != null)
                            {
                                int executionCountInstance = (int)executionCountValue;
                                statusInstance.ExecutionCount = executionCountInstance;
                            }
                            
                            JToken failureCountValue = statusValue["failureCount"];
                            if (failureCountValue != null)
                            {
                                int failureCountInstance = (int)failureCountValue;
                                statusInstance.FailureCount = failureCountInstance;
                            }
                            
                            JToken faultedCountValue = statusValue["faultedCount"];
                            if (faultedCountValue != null)
                            {
                                int faultedCountInstance = (int)faultedCountValue;
                                statusInstance.FaultedCount = faultedCountInstance;
                            }
                        }
                        
                        JToken stateValue = responseDoc["state"];
                        if (stateValue != null)
                        {
                            JobState stateInstance = SchedulerClient.ParseJobState((string)stateValue);
                            jobInstance.State = stateInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Jobs can be created or updated with a PUT operation to a job's
        /// address. The resource name is the ID of the job. Doing a PUT
        /// operation on a jobId that already exists will completely overwrite
        /// the existing job. Putting an existing job (replace) will reset
        /// internal execution counters.
        /// </summary>
        /// <param name='jobId'>
        /// Id of the job to create or update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the job operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Job operation response.
        /// </returns>
        public async Task<JobCreateOrUpdateResponse> CreateOrUpdateAsync(string jobId, JobCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Action == null)
            {
                throw new ArgumentNullException("parameters.Action");
            }
            if (parameters.Action.ErrorAction != null)
            {
                if (parameters.Action.ErrorAction.QueueMessage != null)
                {
                    if (parameters.Action.ErrorAction.QueueMessage.Message == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.QueueMessage.Message");
                    }
                    if (parameters.Action.ErrorAction.QueueMessage.QueueName == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.QueueMessage.QueueName");
                    }
                    if (parameters.Action.ErrorAction.QueueMessage.SasToken == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.QueueMessage.SasToken");
                    }
                    if (parameters.Action.ErrorAction.QueueMessage.StorageAccountName == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.QueueMessage.StorageAccountName");
                    }
                }
                if (parameters.Action.ErrorAction.Request != null)
                {
                    if (parameters.Action.ErrorAction.Request.Method == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.Request.Method");
                    }
                    if (parameters.Action.ErrorAction.Request.Uri == null)
                    {
                        throw new ArgumentNullException("parameters.Action.ErrorAction.Request.Uri");
                    }
                }
            }
            if (parameters.Action.QueueMessage != null)
            {
                if (parameters.Action.QueueMessage.Message == null)
                {
                    throw new ArgumentNullException("parameters.Action.QueueMessage.Message");
                }
                if (parameters.Action.QueueMessage.QueueName == null)
                {
                    throw new ArgumentNullException("parameters.Action.QueueMessage.QueueName");
                }
                if (parameters.Action.QueueMessage.SasToken == null)
                {
                    throw new ArgumentNullException("parameters.Action.QueueMessage.SasToken");
                }
                if (parameters.Action.QueueMessage.StorageAccountName == null)
                {
                    throw new ArgumentNullException("parameters.Action.QueueMessage.StorageAccountName");
                }
            }
            if (parameters.Action.Request != null)
            {
                if (parameters.Action.Request.Method == null)
                {
                    throw new ArgumentNullException("parameters.Action.Request.Method");
                }
                if (parameters.Action.Request.Uri == null)
                {
                    throw new ArgumentNullException("parameters.Action.Request.Uri");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + this.Client.CloudServiceName + "/resources/scheduler/~/JobCollections/" + this.Client.JobCollectionName + "/jobs/" + jobId + "?api-version=2013-10-31_Preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject jobCreateOrUpdateParametersValue = new JObject();
                requestDoc = jobCreateOrUpdateParametersValue;
                
                if (parameters.StartTime != null)
                {
                    JToken startTimeValue = parameters.StartTime;
                    jobCreateOrUpdateParametersValue["startTime"] = startTimeValue;
                }
                
                JObject actionValue = new JObject();
                jobCreateOrUpdateParametersValue["action"] = actionValue;
                
                JToken typeValue = SchedulerClient.JobActionTypeToString(parameters.Action.Type);
                actionValue["type"] = typeValue;
                
                if (parameters.Action.RetryPolicy != null)
                {
                    JObject retryPolicyValue = new JObject();
                    actionValue["retryPolicy"] = retryPolicyValue;
                    
                    JToken retryTypeValue = SchedulerClient.RetryTypeToString(parameters.Action.RetryPolicy.RetryType);
                    retryPolicyValue["retryType"] = retryTypeValue;
                    
                    if (parameters.Action.RetryPolicy.RetryInterval != null)
                    {
                        JToken retryIntervalValue = parameters.Action.RetryPolicy.RetryInterval.ToString();
                        retryPolicyValue["retryInterval"] = retryIntervalValue;
                    }
                    
                    if (parameters.Action.RetryPolicy.RetryCount != null)
                    {
                        JToken retryCountValue = parameters.Action.RetryPolicy.RetryCount;
                        retryPolicyValue["retryCount"] = retryCountValue;
                    }
                }
                
                if (parameters.Action.ErrorAction != null)
                {
                    JObject errorActionValue = new JObject();
                    actionValue["errorAction"] = errorActionValue;
                    
                    JToken typeValue2 = SchedulerClient.JobActionTypeToString(parameters.Action.ErrorAction.Type);
                    errorActionValue["type"] = typeValue2;
                    
                    if (parameters.Action.ErrorAction.Request != null)
                    {
                        JObject requestValue = new JObject();
                        errorActionValue["request"] = requestValue;
                        
                        JToken uriValue = parameters.Action.ErrorAction.Request.Uri.ToString();
                        requestValue["uri"] = uriValue;
                        
                        JToken methodValue = parameters.Action.ErrorAction.Request.Method;
                        requestValue["method"] = methodValue;
                        
                        JObject headersDictionary = new JObject();
                        if (parameters.Action.ErrorAction.Request.Headers != null)
                        {
                            foreach (KeyValuePair<string, string> pair in parameters.Action.ErrorAction.Request.Headers)
                            {
                                string headersKey = pair.Key;
                                string headersValue = pair.Value;
                                headersDictionary[headersKey] = headersValue;
                            }
                        }
                        requestValue["headers"] = headersDictionary;
                        
                        if (parameters.Action.ErrorAction.Request.Body != null)
                        {
                            JToken bodyValue = parameters.Action.ErrorAction.Request.Body;
                            requestValue["body"] = bodyValue;
                        }
                    }
                    
                    if (parameters.Action.ErrorAction.QueueMessage != null)
                    {
                        JObject queueMessageValue = new JObject();
                        errorActionValue["queueMessage"] = queueMessageValue;
                        
                        JToken storageAccountValue = parameters.Action.ErrorAction.QueueMessage.StorageAccountName;
                        queueMessageValue["storageAccount"] = storageAccountValue;
                        
                        JToken queueNameValue = parameters.Action.ErrorAction.QueueMessage.QueueName;
                        queueMessageValue["queueName"] = queueNameValue;
                        
                        JToken sasTokenValue = parameters.Action.ErrorAction.QueueMessage.SasToken;
                        queueMessageValue["sasToken"] = sasTokenValue;
                        
                        JToken messageValue = parameters.Action.ErrorAction.QueueMessage.Message;
                        queueMessageValue["message"] = messageValue;
                    }
                }
                
                if (parameters.Action.Request != null)
                {
                    JObject requestValue2 = new JObject();
                    actionValue["request"] = requestValue2;
                    
                    JToken uriValue2 = parameters.Action.Request.Uri.ToString();
                    requestValue2["uri"] = uriValue2;
                    
                    JToken methodValue2 = parameters.Action.Request.Method;
                    requestValue2["method"] = methodValue2;
                    
                    JObject headersDictionary2 = new JObject();
                    if (parameters.Action.Request.Headers != null)
                    {
                        foreach (KeyValuePair<string, string> pair2 in parameters.Action.Request.Headers)
                        {
                            string headersKey2 = pair2.Key;
                            string headersValue2 = pair2.Value;
                            headersDictionary2[headersKey2] = headersValue2;
                        }
                    }
                    requestValue2["headers"] = headersDictionary2;
                    
                    if (parameters.Action.Request.Body != null)
                    {
                        JToken bodyValue2 = parameters.Action.Request.Body;
                        requestValue2["body"] = bodyValue2;
                    }
                }
                
                if (parameters.Action.QueueMessage != null)
                {
                    JObject queueMessageValue2 = new JObject();
                    actionValue["queueMessage"] = queueMessageValue2;
                    
                    JToken storageAccountValue2 = parameters.Action.QueueMessage.StorageAccountName;
                    queueMessageValue2["storageAccount"] = storageAccountValue2;
                    
                    JToken queueNameValue2 = parameters.Action.QueueMessage.QueueName;
                    queueMessageValue2["queueName"] = queueNameValue2;
                    
                    JToken sasTokenValue2 = parameters.Action.QueueMessage.SasToken;
                    queueMessageValue2["sasToken"] = sasTokenValue2;
                    
                    JToken messageValue2 = parameters.Action.QueueMessage.Message;
                    queueMessageValue2["message"] = messageValue2;
                }
                
                if (parameters.Recurrence != null)
                {
                    JObject recurrenceValue = new JObject();
                    jobCreateOrUpdateParametersValue["recurrence"] = recurrenceValue;
                    
                    JToken frequencyValue = SchedulerClient.JobRecurrenceFrequencyToString(parameters.Recurrence.Frequency);
                    recurrenceValue["frequency"] = frequencyValue;
                    
                    if (parameters.Recurrence.Interval != null)
                    {
                        JToken intervalValue = parameters.Recurrence.Interval;
                        recurrenceValue["interval"] = intervalValue;
                    }
                    
                    if (parameters.Recurrence.Count != null)
                    {
                        JToken countValue = parameters.Recurrence.Count;
                        recurrenceValue["count"] = countValue;
                    }
                    
                    if (parameters.Recurrence.EndTime != null)
                    {
                        JToken endTimeValue = parameters.Recurrence.EndTime;
                        recurrenceValue["endTime"] = endTimeValue;
                    }
                    
                    if (parameters.Recurrence.Schedule != null)
                    {
                        JObject scheduleValue = new JObject();
                        recurrenceValue["schedule"] = scheduleValue;
                        
                        if (parameters.Recurrence.Schedule.Minutes != null)
                        {
                            JArray minutesArray = new JArray();
                            foreach (int minutesItem in parameters.Recurrence.Schedule.Minutes)
                            {
                                minutesArray.Add(minutesItem);
                            }
                            scheduleValue["minutes"] = minutesArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.Hours != null)
                        {
                            JArray hoursArray = new JArray();
                            foreach (int hoursItem in parameters.Recurrence.Schedule.Hours)
                            {
                                hoursArray.Add(hoursItem);
                            }
                            scheduleValue["hours"] = hoursArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.Days != null)
                        {
                            JArray daysArray = new JArray();
                            foreach (JobScheduleDay daysItem in parameters.Recurrence.Schedule.Days)
                            {
                                daysArray.Add(SchedulerClient.JobScheduleDayToString(daysItem));
                            }
                            scheduleValue["days"] = daysArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.Months != null)
                        {
                            JArray monthsArray = new JArray();
                            foreach (int monthsItem in parameters.Recurrence.Schedule.Months)
                            {
                                monthsArray.Add(monthsItem);
                            }
                            scheduleValue["months"] = monthsArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.MonthDays != null)
                        {
                            JArray monthDaysArray = new JArray();
                            foreach (int monthDaysItem in parameters.Recurrence.Schedule.MonthDays)
                            {
                                monthDaysArray.Add(monthDaysItem);
                            }
                            scheduleValue["monthDays"] = monthDaysArray;
                        }
                        
                        if (parameters.Recurrence.Schedule.MonthlyOccurrences != null)
                        {
                            JArray monthlyOccurrencesArray = new JArray();
                            foreach (JobScheduleMonthlyOccurrence monthlyOccurrencesItem in parameters.Recurrence.Schedule.MonthlyOccurrences)
                            {
                                JObject jobScheduleMonthlyOccurrenceValue = new JObject();
                                monthlyOccurrencesArray.Add(jobScheduleMonthlyOccurrenceValue);
                                
                                JToken dayValue = SchedulerClient.JobScheduleDayToString(monthlyOccurrencesItem.Day);
                                jobScheduleMonthlyOccurrenceValue["day"] = dayValue;
                                
                                if (monthlyOccurrencesItem.Occurrence != null)
                                {
                                    JToken occurrenceValue = monthlyOccurrencesItem.Occurrence;
                                    jobScheduleMonthlyOccurrenceValue["occurrence"] = occurrenceValue;
                                }
                            }
                            scheduleValue["monthlyOccurrences"] = monthlyOccurrencesArray;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobCreateOrUpdateResponse result = new JobCreateOrUpdateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        Job jobInstance = new Job();
                        result.Job = jobInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null)
                        {
                            string idInstance = (string)idValue;
                            jobInstance.Id = idInstance;
                        }
                        
                        JToken startTimeValue2 = responseDoc["startTime"];
                        if (startTimeValue2 != null)
                        {
                            DateTime startTimeInstance = (DateTime)startTimeValue2;
                            jobInstance.StartTime = startTimeInstance;
                        }
                        
                        JToken actionValue2 = responseDoc["action"];
                        if (actionValue2 != null)
                        {
                            JobAction actionInstance = new JobAction();
                            jobInstance.Action = actionInstance;
                            
                            JToken typeValue3 = actionValue2["type"];
                            if (typeValue3 != null)
                            {
                                JobActionType typeInstance = SchedulerClient.ParseJobActionType((string)typeValue3);
                                actionInstance.Type = typeInstance;
                            }
                            
                            JToken retryPolicyValue2 = actionValue2["retryPolicy"];
                            if (retryPolicyValue2 != null)
                            {
                                RetryPolicy retryPolicyInstance = new RetryPolicy();
                                actionInstance.RetryPolicy = retryPolicyInstance;
                                
                                JToken retryTypeValue2 = retryPolicyValue2["retryType"];
                                if (retryTypeValue2 != null)
                                {
                                    RetryType retryTypeInstance = SchedulerClient.ParseRetryType((string)retryTypeValue2);
                                    retryPolicyInstance.RetryType = retryTypeInstance;
                                }
                                
                                JToken retryIntervalValue2 = retryPolicyValue2["retryInterval"];
                                if (retryIntervalValue2 != null)
                                {
                                    TimeSpan retryIntervalInstance = TimeSpan.Parse((string)retryIntervalValue2, CultureInfo.InvariantCulture);
                                    retryPolicyInstance.RetryInterval = retryIntervalInstance;
                                }
                                
                                JToken retryCountValue2 = retryPolicyValue2["retryCount"];
                                if (retryCountValue2 != null)
                                {
                                    int retryCountInstance = (int)retryCountValue2;
                                    retryPolicyInstance.RetryCount = retryCountInstance;
                                }
                            }
                            
                            JToken errorActionValue2 = actionValue2["errorAction"];
                            if (errorActionValue2 != null)
                            {
                                JobErrorAction errorActionInstance = new JobErrorAction();
                                actionInstance.ErrorAction = errorActionInstance;
                                
                                JToken typeValue4 = errorActionValue2["type"];
                                if (typeValue4 != null)
                                {
                                    JobActionType typeInstance2 = SchedulerClient.ParseJobActionType((string)typeValue4);
                                    errorActionInstance.Type = typeInstance2;
                                }
                                
                                JToken requestValue3 = errorActionValue2["request"];
                                if (requestValue3 != null)
                                {
                                    JobHttpRequest requestInstance = new JobHttpRequest();
                                    errorActionInstance.Request = requestInstance;
                                    
                                    JToken uriValue3 = requestValue3["uri"];
                                    if (uriValue3 != null)
                                    {
                                        Uri uriInstance = TypeConversion.TryParseUri((string)uriValue3);
                                        requestInstance.Uri = uriInstance;
                                    }
                                    
                                    JToken methodValue3 = requestValue3["method"];
                                    if (methodValue3 != null)
                                    {
                                        string methodInstance = (string)methodValue3;
                                        requestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken headersSequenceElement = requestValue3["headers"];
                                    if (headersSequenceElement != null)
                                    {
                                        foreach (JProperty property in headersSequenceElement)
                                        {
                                            string headersKey3 = (string)property.Name;
                                            string headersValue3 = (string)property.Value;
                                            requestInstance.Headers.Add(headersKey3, headersValue3);
                                        }
                                    }
                                    
                                    JToken bodyValue3 = requestValue3["body"];
                                    if (bodyValue3 != null)
                                    {
                                        string bodyInstance = (string)bodyValue3;
                                        requestInstance.Body = bodyInstance;
                                    }
                                }
                                
                                JToken queueMessageValue3 = errorActionValue2["queueMessage"];
                                if (queueMessageValue3 != null)
                                {
                                    JobQueueMessage queueMessageInstance = new JobQueueMessage();
                                    errorActionInstance.QueueMessage = queueMessageInstance;
                                    
                                    JToken storageAccountValue3 = queueMessageValue3["storageAccount"];
                                    if (storageAccountValue3 != null)
                                    {
                                        string storageAccountInstance = (string)storageAccountValue3;
                                        queueMessageInstance.StorageAccountName = storageAccountInstance;
                                    }
                                    
                                    JToken queueNameValue3 = queueMessageValue3["queueName"];
                                    if (queueNameValue3 != null)
                                    {
                                        string queueNameInstance = (string)queueNameValue3;
                                        queueMessageInstance.QueueName = queueNameInstance;
                                    }
                                    
                                    JToken sasTokenValue3 = queueMessageValue3["sasToken"];
                                    if (sasTokenValue3 != null)
                                    {
                                        string sasTokenInstance = (string)sasTokenValue3;
                                        queueMessageInstance.SasToken = sasTokenInstance;
                                    }
                                    
                                    JToken messageValue3 = queueMessageValue3["message"];
                                    if (messageValue3 != null)
                                    {
                                        string messageInstance = (string)messageValue3;
                                        queueMessageInstance.Message = messageInstance;
                                    }
                                }
                            }
                            
                            JToken requestValue4 = actionValue2["request"];
                            if (requestValue4 != null)
                            {
                                JobHttpRequest requestInstance2 = new JobHttpRequest();
                                actionInstance.Request = requestInstance2;
                                
                                JToken uriValue4 = requestValue4["uri"];
                                if (uriValue4 != null)
                                {
                                    Uri uriInstance2 = TypeConversion.TryParseUri((string)uriValue4);
                                    requestInstance2.Uri = uriInstance2;
                                }
                                
                                JToken methodValue4 = requestValue4["method"];
                                if (methodValue4 != null)
                                {
                                    string methodInstance2 = (string)methodValue4;
                                    requestInstance2.Method = methodInstance2;
                                }
                                
                                JToken headersSequenceElement2 = requestValue4["headers"];
                                if (headersSequenceElement2 != null)
                                {
                                    foreach (JProperty property2 in headersSequenceElement2)
                                    {
                                        string headersKey4 = (string)property2.Name;
                                        string headersValue4 = (string)property2.Value;
                                        requestInstance2.Headers.Add(headersKey4, headersValue4);
                                    }
                                }
                                
                                JToken bodyValue4 = requestValue4["body"];
                                if (bodyValue4 != null)
                                {
                                    string bodyInstance2 = (string)bodyValue4;
                                    requestInstance2.Body = bodyInstance2;
                                }
                            }
                            
                            JToken queueMessageValue4 = actionValue2["queueMessage"];
                            if (queueMessageValue4 != null)
                            {
                                JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                                actionInstance.QueueMessage = queueMessageInstance2;
                                
                                JToken storageAccountValue4 = queueMessageValue4["storageAccount"];
                                if (storageAccountValue4 != null)
                                {
                                    string storageAccountInstance2 = (string)storageAccountValue4;
                                    queueMessageInstance2.StorageAccountName = storageAccountInstance2;
                                }
                                
                                JToken queueNameValue4 = queueMessageValue4["queueName"];
                                if (queueNameValue4 != null)
                                {
                                    string queueNameInstance2 = (string)queueNameValue4;
                                    queueMessageInstance2.QueueName = queueNameInstance2;
                                }
                                
                                JToken sasTokenValue4 = queueMessageValue4["sasToken"];
                                if (sasTokenValue4 != null)
                                {
                                    string sasTokenInstance2 = (string)sasTokenValue4;
                                    queueMessageInstance2.SasToken = sasTokenInstance2;
                                }
                                
                                JToken messageValue4 = queueMessageValue4["message"];
                                if (messageValue4 != null)
                                {
                                    string messageInstance2 = (string)messageValue4;
                                    queueMessageInstance2.Message = messageInstance2;
                                }
                            }
                        }
                        
                        JToken recurrenceValue2 = responseDoc["recurrence"];
                        if (recurrenceValue2 != null)
                        {
                            JobRecurrence recurrenceInstance = new JobRecurrence();
                            jobInstance.Recurrence = recurrenceInstance;
                            
                            JToken frequencyValue2 = recurrenceValue2["frequency"];
                            if (frequencyValue2 != null)
                            {
                                JobRecurrenceFrequency frequencyInstance = SchedulerClient.ParseJobRecurrenceFrequency((string)frequencyValue2);
                                recurrenceInstance.Frequency = frequencyInstance;
                            }
                            
                            JToken intervalValue2 = recurrenceValue2["interval"];
                            if (intervalValue2 != null)
                            {
                                int intervalInstance = (int)intervalValue2;
                                recurrenceInstance.Interval = intervalInstance;
                            }
                            
                            JToken countValue2 = recurrenceValue2["count"];
                            if (countValue2 != null)
                            {
                                int countInstance = (int)countValue2;
                                recurrenceInstance.Count = countInstance;
                            }
                            
                            JToken endTimeValue2 = recurrenceValue2["endTime"];
                            if (endTimeValue2 != null)
                            {
                                DateTime endTimeInstance = (DateTime)endTimeValue2;
                                recurrenceInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken scheduleValue2 = recurrenceValue2["schedule"];
                            if (scheduleValue2 != null)
                            {
                                JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                                recurrenceInstance.Schedule = scheduleInstance;
                                
                                JArray minutesArray2 = (JArray)scheduleValue2["minutes"];
                                if (minutesArray2 != null)
                                {
                                    foreach (JToken minutesValue in minutesArray2)
                                    {
                                        scheduleInstance.Minutes.Add((int)minutesValue);
                                    }
                                }
                                
                                JArray hoursArray2 = (JArray)scheduleValue2["hours"];
                                if (hoursArray2 != null)
                                {
                                    foreach (JToken hoursValue in hoursArray2)
                                    {
                                        scheduleInstance.Hours.Add((int)hoursValue);
                                    }
                                }
                                
                                JArray daysArray2 = (JArray)scheduleValue2["days"];
                                if (daysArray2 != null)
                                {
                                    foreach (JToken daysValue in daysArray2)
                                    {
                                        scheduleInstance.Days.Add(SchedulerClient.ParseJobScheduleDay((string)daysValue));
                                    }
                                }
                                
                                JArray monthsArray2 = (JArray)scheduleValue2["months"];
                                if (monthsArray2 != null)
                                {
                                    foreach (JToken monthsValue in monthsArray2)
                                    {
                                        scheduleInstance.Months.Add((int)monthsValue);
                                    }
                                }
                                
                                JArray monthDaysArray2 = (JArray)scheduleValue2["monthDays"];
                                if (monthDaysArray2 != null)
                                {
                                    foreach (JToken monthDaysValue in monthDaysArray2)
                                    {
                                        scheduleInstance.MonthDays.Add((int)monthDaysValue);
                                    }
                                }
                                
                                JArray monthlyOccurrencesArray2 = (JArray)scheduleValue2["monthlyOccurrences"];
                                if (monthlyOccurrencesArray2 != null)
                                {
                                    foreach (JToken monthlyOccurrencesValue in monthlyOccurrencesArray2)
                                    {
                                        JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                        scheduleInstance.MonthlyOccurrences.Add(jobScheduleMonthlyOccurrenceInstance);
                                        
                                        JToken dayValue2 = monthlyOccurrencesValue["day"];
                                        if (dayValue2 != null)
                                        {
                                            JobScheduleDay dayInstance = SchedulerClient.ParseJobScheduleDay((string)dayValue2);
                                            jobScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                        }
                                        
                                        JToken occurrenceValue2 = monthlyOccurrencesValue["occurrence"];
                                        if (occurrenceValue2 != null)
                                        {
                                            int occurrenceInstance = (int)occurrenceValue2;
                                            jobScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken statusValue = responseDoc["status"];
                        if (statusValue != null)
                        {
                            JobStatus statusInstance = new JobStatus();
                            jobInstance.Status = statusInstance;
                            
                            JToken lastExecutionTimeValue = statusValue["lastExecutionTime"];
                            if (lastExecutionTimeValue != null)
                            {
                                DateTime lastExecutionTimeInstance = (DateTime)lastExecutionTimeValue;
                                statusInstance.LastExecutionTime = lastExecutionTimeInstance;
                            }
                            
                            JToken nextExecutionTimeValue = statusValue["nextExecutionTime"];
                            if (nextExecutionTimeValue != null)
                            {
                                DateTime nextExecutionTimeInstance = (DateTime)nextExecutionTimeValue;
                                statusInstance.NextExecutionTime = nextExecutionTimeInstance;
                            }
                            
                            JToken executionCountValue = statusValue["executionCount"];
                            if (executionCountValue != null)
                            {
                                int executionCountInstance = (int)executionCountValue;
                                statusInstance.ExecutionCount = executionCountInstance;
                            }
                            
                            JToken failureCountValue = statusValue["failureCount"];
                            if (failureCountValue != null)
                            {
                                int failureCountInstance = (int)failureCountValue;
                                statusInstance.FailureCount = failureCountInstance;
                            }
                            
                            JToken faultedCountValue = statusValue["faultedCount"];
                            if (faultedCountValue != null)
                            {
                                int faultedCountInstance = (int)faultedCountValue;
                                statusInstance.FaultedCount = faultedCountInstance;
                            }
                        }
                        
                        JToken stateValue = responseDoc["state"];
                        if (stateValue != null)
                        {
                            JobState stateInstance = SchedulerClient.ParseJobState((string)stateValue);
                            jobInstance.State = stateInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a job.
        /// </summary>
        /// <param name='jobId'>
        /// Id of the job to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + this.Client.CloudServiceName + "/resources/scheduler/~/JobCollections/" + this.Client.JobCollectionName + "/jobs/" + jobId + "?api-version=2013-10-31_Preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The status of an individual job can be access by a GET call to a
        /// job's address, jobId.
        /// </summary>
        /// <param name='jobId'>
        /// Id of the job to get.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Job operation response.
        /// </returns>
        public async Task<JobGetResponse> GetAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + this.Client.CloudServiceName + "/resources/scheduler/~/JobCollections/" + this.Client.JobCollectionName + "/jobs/" + jobId + "?api-version=2013-10-31_Preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobGetResponse result = new JobGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        Job jobInstance = new Job();
                        result.Job = jobInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null)
                        {
                            string idInstance = (string)idValue;
                            jobInstance.Id = idInstance;
                        }
                        
                        JToken startTimeValue = responseDoc["startTime"];
                        if (startTimeValue != null)
                        {
                            DateTime startTimeInstance = (DateTime)startTimeValue;
                            jobInstance.StartTime = startTimeInstance;
                        }
                        
                        JToken actionValue = responseDoc["action"];
                        if (actionValue != null)
                        {
                            JobAction actionInstance = new JobAction();
                            jobInstance.Action = actionInstance;
                            
                            JToken typeValue = actionValue["type"];
                            if (typeValue != null)
                            {
                                JobActionType typeInstance = SchedulerClient.ParseJobActionType((string)typeValue);
                                actionInstance.Type = typeInstance;
                            }
                            
                            JToken retryPolicyValue = actionValue["retryPolicy"];
                            if (retryPolicyValue != null)
                            {
                                RetryPolicy retryPolicyInstance = new RetryPolicy();
                                actionInstance.RetryPolicy = retryPolicyInstance;
                                
                                JToken retryTypeValue = retryPolicyValue["retryType"];
                                if (retryTypeValue != null)
                                {
                                    RetryType retryTypeInstance = SchedulerClient.ParseRetryType((string)retryTypeValue);
                                    retryPolicyInstance.RetryType = retryTypeInstance;
                                }
                                
                                JToken retryIntervalValue = retryPolicyValue["retryInterval"];
                                if (retryIntervalValue != null)
                                {
                                    TimeSpan retryIntervalInstance = TimeSpan.Parse((string)retryIntervalValue, CultureInfo.InvariantCulture);
                                    retryPolicyInstance.RetryInterval = retryIntervalInstance;
                                }
                                
                                JToken retryCountValue = retryPolicyValue["retryCount"];
                                if (retryCountValue != null)
                                {
                                    int retryCountInstance = (int)retryCountValue;
                                    retryPolicyInstance.RetryCount = retryCountInstance;
                                }
                            }
                            
                            JToken errorActionValue = actionValue["errorAction"];
                            if (errorActionValue != null)
                            {
                                JobErrorAction errorActionInstance = new JobErrorAction();
                                actionInstance.ErrorAction = errorActionInstance;
                                
                                JToken typeValue2 = errorActionValue["type"];
                                if (typeValue2 != null)
                                {
                                    JobActionType typeInstance2 = SchedulerClient.ParseJobActionType((string)typeValue2);
                                    errorActionInstance.Type = typeInstance2;
                                }
                                
                                JToken requestValue = errorActionValue["request"];
                                if (requestValue != null)
                                {
                                    JobHttpRequest requestInstance = new JobHttpRequest();
                                    errorActionInstance.Request = requestInstance;
                                    
                                    JToken uriValue = requestValue["uri"];
                                    if (uriValue != null)
                                    {
                                        Uri uriInstance = TypeConversion.TryParseUri((string)uriValue);
                                        requestInstance.Uri = uriInstance;
                                    }
                                    
                                    JToken methodValue = requestValue["method"];
                                    if (methodValue != null)
                                    {
                                        string methodInstance = (string)methodValue;
                                        requestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken headersSequenceElement = requestValue["headers"];
                                    if (headersSequenceElement != null)
                                    {
                                        foreach (JProperty property in headersSequenceElement)
                                        {
                                            string headersKey = (string)property.Name;
                                            string headersValue = (string)property.Value;
                                            requestInstance.Headers.Add(headersKey, headersValue);
                                        }
                                    }
                                    
                                    JToken bodyValue = requestValue["body"];
                                    if (bodyValue != null)
                                    {
                                        string bodyInstance = (string)bodyValue;
                                        requestInstance.Body = bodyInstance;
                                    }
                                }
                                
                                JToken queueMessageValue = errorActionValue["queueMessage"];
                                if (queueMessageValue != null)
                                {
                                    JobQueueMessage queueMessageInstance = new JobQueueMessage();
                                    errorActionInstance.QueueMessage = queueMessageInstance;
                                    
                                    JToken storageAccountValue = queueMessageValue["storageAccount"];
                                    if (storageAccountValue != null)
                                    {
                                        string storageAccountInstance = (string)storageAccountValue;
                                        queueMessageInstance.StorageAccountName = storageAccountInstance;
                                    }
                                    
                                    JToken queueNameValue = queueMessageValue["queueName"];
                                    if (queueNameValue != null)
                                    {
                                        string queueNameInstance = (string)queueNameValue;
                                        queueMessageInstance.QueueName = queueNameInstance;
                                    }
                                    
                                    JToken sasTokenValue = queueMessageValue["sasToken"];
                                    if (sasTokenValue != null)
                                    {
                                        string sasTokenInstance = (string)sasTokenValue;
                                        queueMessageInstance.SasToken = sasTokenInstance;
                                    }
                                    
                                    JToken messageValue = queueMessageValue["message"];
                                    if (messageValue != null)
                                    {
                                        string messageInstance = (string)messageValue;
                                        queueMessageInstance.Message = messageInstance;
                                    }
                                }
                            }
                            
                            JToken requestValue2 = actionValue["request"];
                            if (requestValue2 != null)
                            {
                                JobHttpRequest requestInstance2 = new JobHttpRequest();
                                actionInstance.Request = requestInstance2;
                                
                                JToken uriValue2 = requestValue2["uri"];
                                if (uriValue2 != null)
                                {
                                    Uri uriInstance2 = TypeConversion.TryParseUri((string)uriValue2);
                                    requestInstance2.Uri = uriInstance2;
                                }
                                
                                JToken methodValue2 = requestValue2["method"];
                                if (methodValue2 != null)
                                {
                                    string methodInstance2 = (string)methodValue2;
                                    requestInstance2.Method = methodInstance2;
                                }
                                
                                JToken headersSequenceElement2 = requestValue2["headers"];
                                if (headersSequenceElement2 != null)
                                {
                                    foreach (JProperty property2 in headersSequenceElement2)
                                    {
                                        string headersKey2 = (string)property2.Name;
                                        string headersValue2 = (string)property2.Value;
                                        requestInstance2.Headers.Add(headersKey2, headersValue2);
                                    }
                                }
                                
                                JToken bodyValue2 = requestValue2["body"];
                                if (bodyValue2 != null)
                                {
                                    string bodyInstance2 = (string)bodyValue2;
                                    requestInstance2.Body = bodyInstance2;
                                }
                            }
                            
                            JToken queueMessageValue2 = actionValue["queueMessage"];
                            if (queueMessageValue2 != null)
                            {
                                JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                                actionInstance.QueueMessage = queueMessageInstance2;
                                
                                JToken storageAccountValue2 = queueMessageValue2["storageAccount"];
                                if (storageAccountValue2 != null)
                                {
                                    string storageAccountInstance2 = (string)storageAccountValue2;
                                    queueMessageInstance2.StorageAccountName = storageAccountInstance2;
                                }
                                
                                JToken queueNameValue2 = queueMessageValue2["queueName"];
                                if (queueNameValue2 != null)
                                {
                                    string queueNameInstance2 = (string)queueNameValue2;
                                    queueMessageInstance2.QueueName = queueNameInstance2;
                                }
                                
                                JToken sasTokenValue2 = queueMessageValue2["sasToken"];
                                if (sasTokenValue2 != null)
                                {
                                    string sasTokenInstance2 = (string)sasTokenValue2;
                                    queueMessageInstance2.SasToken = sasTokenInstance2;
                                }
                                
                                JToken messageValue2 = queueMessageValue2["message"];
                                if (messageValue2 != null)
                                {
                                    string messageInstance2 = (string)messageValue2;
                                    queueMessageInstance2.Message = messageInstance2;
                                }
                            }
                        }
                        
                        JToken recurrenceValue = responseDoc["recurrence"];
                        if (recurrenceValue != null)
                        {
                            JobRecurrence recurrenceInstance = new JobRecurrence();
                            jobInstance.Recurrence = recurrenceInstance;
                            
                            JToken frequencyValue = recurrenceValue["frequency"];
                            if (frequencyValue != null)
                            {
                                JobRecurrenceFrequency frequencyInstance = SchedulerClient.ParseJobRecurrenceFrequency((string)frequencyValue);
                                recurrenceInstance.Frequency = frequencyInstance;
                            }
                            
                            JToken intervalValue = recurrenceValue["interval"];
                            if (intervalValue != null)
                            {
                                int intervalInstance = (int)intervalValue;
                                recurrenceInstance.Interval = intervalInstance;
                            }
                            
                            JToken countValue = recurrenceValue["count"];
                            if (countValue != null)
                            {
                                int countInstance = (int)countValue;
                                recurrenceInstance.Count = countInstance;
                            }
                            
                            JToken endTimeValue = recurrenceValue["endTime"];
                            if (endTimeValue != null)
                            {
                                DateTime endTimeInstance = (DateTime)endTimeValue;
                                recurrenceInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken scheduleValue = recurrenceValue["schedule"];
                            if (scheduleValue != null)
                            {
                                JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                                recurrenceInstance.Schedule = scheduleInstance;
                                
                                JArray minutesArray = (JArray)scheduleValue["minutes"];
                                if (minutesArray != null)
                                {
                                    foreach (JToken minutesValue in minutesArray)
                                    {
                                        scheduleInstance.Minutes.Add((int)minutesValue);
                                    }
                                }
                                
                                JArray hoursArray = (JArray)scheduleValue["hours"];
                                if (hoursArray != null)
                                {
                                    foreach (JToken hoursValue in hoursArray)
                                    {
                                        scheduleInstance.Hours.Add((int)hoursValue);
                                    }
                                }
                                
                                JArray daysArray = (JArray)scheduleValue["days"];
                                if (daysArray != null)
                                {
                                    foreach (JToken daysValue in daysArray)
                                    {
                                        scheduleInstance.Days.Add(SchedulerClient.ParseJobScheduleDay((string)daysValue));
                                    }
                                }
                                
                                JArray monthsArray = (JArray)scheduleValue["months"];
                                if (monthsArray != null)
                                {
                                    foreach (JToken monthsValue in monthsArray)
                                    {
                                        scheduleInstance.Months.Add((int)monthsValue);
                                    }
                                }
                                
                                JArray monthDaysArray = (JArray)scheduleValue["monthDays"];
                                if (monthDaysArray != null)
                                {
                                    foreach (JToken monthDaysValue in monthDaysArray)
                                    {
                                        scheduleInstance.MonthDays.Add((int)monthDaysValue);
                                    }
                                }
                                
                                JArray monthlyOccurrencesArray = (JArray)scheduleValue["monthlyOccurrences"];
                                if (monthlyOccurrencesArray != null)
                                {
                                    foreach (JToken monthlyOccurrencesValue in monthlyOccurrencesArray)
                                    {
                                        JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                        scheduleInstance.MonthlyOccurrences.Add(jobScheduleMonthlyOccurrenceInstance);
                                        
                                        JToken dayValue = monthlyOccurrencesValue["day"];
                                        if (dayValue != null)
                                        {
                                            JobScheduleDay dayInstance = SchedulerClient.ParseJobScheduleDay((string)dayValue);
                                            jobScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                        }
                                        
                                        JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                        if (occurrenceValue != null)
                                        {
                                            int occurrenceInstance = (int)occurrenceValue;
                                            jobScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken statusValue = responseDoc["status"];
                        if (statusValue != null)
                        {
                            JobStatus statusInstance = new JobStatus();
                            jobInstance.Status = statusInstance;
                            
                            JToken lastExecutionTimeValue = statusValue["lastExecutionTime"];
                            if (lastExecutionTimeValue != null)
                            {
                                DateTime lastExecutionTimeInstance = (DateTime)lastExecutionTimeValue;
                                statusInstance.LastExecutionTime = lastExecutionTimeInstance;
                            }
                            
                            JToken nextExecutionTimeValue = statusValue["nextExecutionTime"];
                            if (nextExecutionTimeValue != null)
                            {
                                DateTime nextExecutionTimeInstance = (DateTime)nextExecutionTimeValue;
                                statusInstance.NextExecutionTime = nextExecutionTimeInstance;
                            }
                            
                            JToken executionCountValue = statusValue["executionCount"];
                            if (executionCountValue != null)
                            {
                                int executionCountInstance = (int)executionCountValue;
                                statusInstance.ExecutionCount = executionCountInstance;
                            }
                            
                            JToken failureCountValue = statusValue["failureCount"];
                            if (failureCountValue != null)
                            {
                                int failureCountInstance = (int)failureCountValue;
                                statusInstance.FailureCount = failureCountInstance;
                            }
                            
                            JToken faultedCountValue = statusValue["faultedCount"];
                            if (faultedCountValue != null)
                            {
                                int faultedCountInstance = (int)faultedCountValue;
                                statusInstance.FaultedCount = faultedCountInstance;
                            }
                        }
                        
                        JToken stateValue = responseDoc["state"];
                        if (stateValue != null)
                        {
                            JobState stateInstance = SchedulerClient.ParseJobState((string)stateValue);
                            jobInstance.State = stateInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Job history tracks the updates and executions of a job.
        /// </summary>
        /// <param name='jobId'>
        /// Id of the job to get the history of.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Get Job History operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Job History operation response.
        /// </returns>
        public async Task<JobGetHistoryResponse> GetHistoryAsync(string jobId, JobGetHistoryParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetHistoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + this.Client.CloudServiceName + "/resources/scheduler/~/JobCollections/" + this.Client.JobCollectionName + "/jobs/" + jobId + "/history?api-version=2013-10-31_Preview&$skip=" + parameters.Skip + "&$top=" + parameters.Top;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobGetHistoryResponse result = new JobGetHistoryResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    JArray jobHistoryArray = (JArray)responseDoc;
                    if (jobHistoryArray != null)
                    {
                        foreach (JToken jobHistoryValue in jobHistoryArray)
                        {
                            JobGetHistoryResponse.JobHistoryEntry jobHistoryEntryInstance = new JobGetHistoryResponse.JobHistoryEntry();
                            result.JobHistory.Add(jobHistoryEntryInstance);
                            
                            JToken jobIdValue = jobHistoryValue["jobId"];
                            if (jobIdValue != null)
                            {
                                string jobIdInstance = (string)jobIdValue;
                                jobHistoryEntryInstance.Id = jobIdInstance;
                            }
                            
                            JToken recordNumberValue = jobHistoryValue["recordNumber"];
                            if (recordNumberValue != null)
                            {
                                int recordNumberInstance = (int)recordNumberValue;
                                jobHistoryEntryInstance.RecordNumber = recordNumberInstance;
                            }
                            
                            JToken timestampValue = jobHistoryValue["timestamp"];
                            if (timestampValue != null)
                            {
                                DateTime timestampInstance = (DateTime)timestampValue;
                                jobHistoryEntryInstance.Timestamp = timestampInstance;
                            }
                            
                            JToken startTimeValue = jobHistoryValue["startTime"];
                            if (startTimeValue != null)
                            {
                                DateTime startTimeInstance = (DateTime)startTimeValue;
                                jobHistoryEntryInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = jobHistoryValue["endTime"];
                            if (endTimeValue != null)
                            {
                                DateTime endTimeInstance = (DateTime)endTimeValue;
                                jobHistoryEntryInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken stateValue = jobHistoryValue["state"];
                            if (stateValue != null)
                            {
                                JobState stateInstance = SchedulerClient.ParseJobState((string)stateValue);
                                jobHistoryEntryInstance.State = stateInstance;
                            }
                            
                            JToken messageValue = jobHistoryValue["message"];
                            if (messageValue != null)
                            {
                                string messageInstance = (string)messageValue;
                                jobHistoryEntryInstance.Message = messageInstance;
                            }
                            
                            JToken statusValue = jobHistoryValue["status"];
                            if (statusValue != null)
                            {
                                JobHistoryStatus statusInstance = SchedulerClient.ParseJobHistoryStatus((string)statusValue);
                                jobHistoryEntryInstance.Status = statusInstance;
                            }
                            
                            JToken actionNameValue = jobHistoryValue["actionName"];
                            if (actionNameValue != null)
                            {
                                JobHistoryActionName actionNameInstance = SchedulerClient.ParseJobHistoryActionName((string)actionNameValue);
                                jobHistoryEntryInstance.ActionName = actionNameInstance;
                            }
                            
                            JToken repeatCountValue = jobHistoryValue["repeatCount"];
                            if (repeatCountValue != null)
                            {
                                int repeatCountInstance = (int)repeatCountValue;
                                jobHistoryEntryInstance.RepeatCount = repeatCountInstance;
                            }
                            
                            JToken retryCountValue = jobHistoryValue["retryCount"];
                            if (retryCountValue != null)
                            {
                                int retryCountInstance = (int)retryCountValue;
                                jobHistoryEntryInstance.RetryCount = retryCountInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Job history tracks the updates and executions of a job.
        /// </summary>
        /// <param name='jobId'>
        /// Id of the job to get the history of.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Get Job History With Filter operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Job History operation response.
        /// </returns>
        public async Task<JobGetHistoryResponse> GetHistoryWithFilterAsync(string jobId, JobGetHistoryWithFilterParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetHistoryWithFilterAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + this.Client.CloudServiceName + "/resources/scheduler/~/JobCollections/" + this.Client.JobCollectionName + "/jobs/" + jobId + "/history?api-version=2013-10-31_Preview&$filter=status eq " + parameters.Status + "&$skip=" + parameters.Skip + "&$top=" + parameters.Top;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobGetHistoryResponse result = new JobGetHistoryResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    JArray jobHistoryArray = (JArray)responseDoc;
                    if (jobHistoryArray != null)
                    {
                        foreach (JToken jobHistoryValue in jobHistoryArray)
                        {
                            JobGetHistoryResponse.JobHistoryEntry jobHistoryEntryInstance = new JobGetHistoryResponse.JobHistoryEntry();
                            result.JobHistory.Add(jobHistoryEntryInstance);
                            
                            JToken jobIdValue = jobHistoryValue["jobId"];
                            if (jobIdValue != null)
                            {
                                string jobIdInstance = (string)jobIdValue;
                                jobHistoryEntryInstance.Id = jobIdInstance;
                            }
                            
                            JToken recordNumberValue = jobHistoryValue["recordNumber"];
                            if (recordNumberValue != null)
                            {
                                int recordNumberInstance = (int)recordNumberValue;
                                jobHistoryEntryInstance.RecordNumber = recordNumberInstance;
                            }
                            
                            JToken timestampValue = jobHistoryValue["timestamp"];
                            if (timestampValue != null)
                            {
                                DateTime timestampInstance = (DateTime)timestampValue;
                                jobHistoryEntryInstance.Timestamp = timestampInstance;
                            }
                            
                            JToken startTimeValue = jobHistoryValue["startTime"];
                            if (startTimeValue != null)
                            {
                                DateTime startTimeInstance = (DateTime)startTimeValue;
                                jobHistoryEntryInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = jobHistoryValue["endTime"];
                            if (endTimeValue != null)
                            {
                                DateTime endTimeInstance = (DateTime)endTimeValue;
                                jobHistoryEntryInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken stateValue = jobHistoryValue["state"];
                            if (stateValue != null)
                            {
                                JobState stateInstance = SchedulerClient.ParseJobState((string)stateValue);
                                jobHistoryEntryInstance.State = stateInstance;
                            }
                            
                            JToken messageValue = jobHistoryValue["message"];
                            if (messageValue != null)
                            {
                                string messageInstance = (string)messageValue;
                                jobHistoryEntryInstance.Message = messageInstance;
                            }
                            
                            JToken statusValue = jobHistoryValue["status"];
                            if (statusValue != null)
                            {
                                JobHistoryStatus statusInstance = SchedulerClient.ParseJobHistoryStatus((string)statusValue);
                                jobHistoryEntryInstance.Status = statusInstance;
                            }
                            
                            JToken actionNameValue = jobHistoryValue["actionName"];
                            if (actionNameValue != null)
                            {
                                JobHistoryActionName actionNameInstance = SchedulerClient.ParseJobHistoryActionName((string)actionNameValue);
                                jobHistoryEntryInstance.ActionName = actionNameInstance;
                            }
                            
                            JToken repeatCountValue = jobHistoryValue["repeatCount"];
                            if (repeatCountValue != null)
                            {
                                int repeatCountInstance = (int)repeatCountValue;
                                jobHistoryEntryInstance.RepeatCount = repeatCountInstance;
                            }
                            
                            JToken retryCountValue = jobHistoryValue["retryCount"];
                            if (retryCountValue != null)
                            {
                                int retryCountInstance = (int)retryCountValue;
                                jobHistoryEntryInstance.RetryCount = retryCountInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Fetch all jobs in a job collection.
        /// </summary>
        /// <param name='parameters'>
        /// Parameters supplied to the List Jobs operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Jobs operation response.
        /// </returns>
        public async Task<JobListResponse> ListAsync(JobListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + this.Client.CloudServiceName + "/resources/scheduler/~/JobCollections/" + this.Client.JobCollectionName + "/jobs?api-version=2013-10-31_Preview";
            if (parameters.State != null)
            {
                url = url + "&state=" + Uri.EscapeUriString(SchedulerClient.JobStateToString(parameters.State.Value));
            }
            if (parameters.Skip != null)
            {
                url = url + "&$skip=" + Uri.EscapeUriString(parameters.Skip.Value.ToString());
            }
            if (parameters.Top != null)
            {
                url = url + "&$top=" + Uri.EscapeUriString(parameters.Top.Value.ToString());
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobListResponse result = new JobListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    JArray jobsArray = (JArray)responseDoc;
                    if (jobsArray != null)
                    {
                        foreach (JToken jobsValue in jobsArray)
                        {
                            Job jobInstance = new Job();
                            result.Jobs.Add(jobInstance);
                            
                            JToken idValue = jobsValue["id"];
                            if (idValue != null)
                            {
                                string idInstance = (string)idValue;
                                jobInstance.Id = idInstance;
                            }
                            
                            JToken startTimeValue = jobsValue["startTime"];
                            if (startTimeValue != null)
                            {
                                DateTime startTimeInstance = (DateTime)startTimeValue;
                                jobInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken actionValue = jobsValue["action"];
                            if (actionValue != null)
                            {
                                JobAction actionInstance = new JobAction();
                                jobInstance.Action = actionInstance;
                                
                                JToken typeValue = actionValue["type"];
                                if (typeValue != null)
                                {
                                    JobActionType typeInstance = SchedulerClient.ParseJobActionType((string)typeValue);
                                    actionInstance.Type = typeInstance;
                                }
                                
                                JToken retryPolicyValue = actionValue["retryPolicy"];
                                if (retryPolicyValue != null)
                                {
                                    RetryPolicy retryPolicyInstance = new RetryPolicy();
                                    actionInstance.RetryPolicy = retryPolicyInstance;
                                    
                                    JToken retryTypeValue = retryPolicyValue["retryType"];
                                    if (retryTypeValue != null)
                                    {
                                        RetryType retryTypeInstance = SchedulerClient.ParseRetryType((string)retryTypeValue);
                                        retryPolicyInstance.RetryType = retryTypeInstance;
                                    }
                                    
                                    JToken retryIntervalValue = retryPolicyValue["retryInterval"];
                                    if (retryIntervalValue != null)
                                    {
                                        TimeSpan retryIntervalInstance = TimeSpan.Parse((string)retryIntervalValue, CultureInfo.InvariantCulture);
                                        retryPolicyInstance.RetryInterval = retryIntervalInstance;
                                    }
                                    
                                    JToken retryCountValue = retryPolicyValue["retryCount"];
                                    if (retryCountValue != null)
                                    {
                                        int retryCountInstance = (int)retryCountValue;
                                        retryPolicyInstance.RetryCount = retryCountInstance;
                                    }
                                }
                                
                                JToken errorActionValue = actionValue["errorAction"];
                                if (errorActionValue != null)
                                {
                                    JobErrorAction errorActionInstance = new JobErrorAction();
                                    actionInstance.ErrorAction = errorActionInstance;
                                    
                                    JToken typeValue2 = errorActionValue["type"];
                                    if (typeValue2 != null)
                                    {
                                        JobActionType typeInstance2 = SchedulerClient.ParseJobActionType((string)typeValue2);
                                        errorActionInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken requestValue = errorActionValue["request"];
                                    if (requestValue != null)
                                    {
                                        JobHttpRequest requestInstance = new JobHttpRequest();
                                        errorActionInstance.Request = requestInstance;
                                        
                                        JToken uriValue = requestValue["uri"];
                                        if (uriValue != null)
                                        {
                                            Uri uriInstance = TypeConversion.TryParseUri((string)uriValue);
                                            requestInstance.Uri = uriInstance;
                                        }
                                        
                                        JToken methodValue = requestValue["method"];
                                        if (methodValue != null)
                                        {
                                            string methodInstance = (string)methodValue;
                                            requestInstance.Method = methodInstance;
                                        }
                                        
                                        JToken headersSequenceElement = requestValue["headers"];
                                        if (headersSequenceElement != null)
                                        {
                                            foreach (JProperty property in headersSequenceElement)
                                            {
                                                string headersKey = (string)property.Name;
                                                string headersValue = (string)property.Value;
                                                requestInstance.Headers.Add(headersKey, headersValue);
                                            }
                                        }
                                        
                                        JToken bodyValue = requestValue["body"];
                                        if (bodyValue != null)
                                        {
                                            string bodyInstance = (string)bodyValue;
                                            requestInstance.Body = bodyInstance;
                                        }
                                    }
                                    
                                    JToken queueMessageValue = errorActionValue["queueMessage"];
                                    if (queueMessageValue != null)
                                    {
                                        JobQueueMessage queueMessageInstance = new JobQueueMessage();
                                        errorActionInstance.QueueMessage = queueMessageInstance;
                                        
                                        JToken storageAccountValue = queueMessageValue["storageAccount"];
                                        if (storageAccountValue != null)
                                        {
                                            string storageAccountInstance = (string)storageAccountValue;
                                            queueMessageInstance.StorageAccountName = storageAccountInstance;
                                        }
                                        
                                        JToken queueNameValue = queueMessageValue["queueName"];
                                        if (queueNameValue != null)
                                        {
                                            string queueNameInstance = (string)queueNameValue;
                                            queueMessageInstance.QueueName = queueNameInstance;
                                        }
                                        
                                        JToken sasTokenValue = queueMessageValue["sasToken"];
                                        if (sasTokenValue != null)
                                        {
                                            string sasTokenInstance = (string)sasTokenValue;
                                            queueMessageInstance.SasToken = sasTokenInstance;
                                        }
                                        
                                        JToken messageValue = queueMessageValue["message"];
                                        if (messageValue != null)
                                        {
                                            string messageInstance = (string)messageValue;
                                            queueMessageInstance.Message = messageInstance;
                                        }
                                    }
                                }
                                
                                JToken requestValue2 = actionValue["request"];
                                if (requestValue2 != null)
                                {
                                    JobHttpRequest requestInstance2 = new JobHttpRequest();
                                    actionInstance.Request = requestInstance2;
                                    
                                    JToken uriValue2 = requestValue2["uri"];
                                    if (uriValue2 != null)
                                    {
                                        Uri uriInstance2 = TypeConversion.TryParseUri((string)uriValue2);
                                        requestInstance2.Uri = uriInstance2;
                                    }
                                    
                                    JToken methodValue2 = requestValue2["method"];
                                    if (methodValue2 != null)
                                    {
                                        string methodInstance2 = (string)methodValue2;
                                        requestInstance2.Method = methodInstance2;
                                    }
                                    
                                    JToken headersSequenceElement2 = requestValue2["headers"];
                                    if (headersSequenceElement2 != null)
                                    {
                                        foreach (JProperty property2 in headersSequenceElement2)
                                        {
                                            string headersKey2 = (string)property2.Name;
                                            string headersValue2 = (string)property2.Value;
                                            requestInstance2.Headers.Add(headersKey2, headersValue2);
                                        }
                                    }
                                    
                                    JToken bodyValue2 = requestValue2["body"];
                                    if (bodyValue2 != null)
                                    {
                                        string bodyInstance2 = (string)bodyValue2;
                                        requestInstance2.Body = bodyInstance2;
                                    }
                                }
                                
                                JToken queueMessageValue2 = actionValue["queueMessage"];
                                if (queueMessageValue2 != null)
                                {
                                    JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                                    actionInstance.QueueMessage = queueMessageInstance2;
                                    
                                    JToken storageAccountValue2 = queueMessageValue2["storageAccount"];
                                    if (storageAccountValue2 != null)
                                    {
                                        string storageAccountInstance2 = (string)storageAccountValue2;
                                        queueMessageInstance2.StorageAccountName = storageAccountInstance2;
                                    }
                                    
                                    JToken queueNameValue2 = queueMessageValue2["queueName"];
                                    if (queueNameValue2 != null)
                                    {
                                        string queueNameInstance2 = (string)queueNameValue2;
                                        queueMessageInstance2.QueueName = queueNameInstance2;
                                    }
                                    
                                    JToken sasTokenValue2 = queueMessageValue2["sasToken"];
                                    if (sasTokenValue2 != null)
                                    {
                                        string sasTokenInstance2 = (string)sasTokenValue2;
                                        queueMessageInstance2.SasToken = sasTokenInstance2;
                                    }
                                    
                                    JToken messageValue2 = queueMessageValue2["message"];
                                    if (messageValue2 != null)
                                    {
                                        string messageInstance2 = (string)messageValue2;
                                        queueMessageInstance2.Message = messageInstance2;
                                    }
                                }
                            }
                            
                            JToken recurrenceValue = jobsValue["recurrence"];
                            if (recurrenceValue != null)
                            {
                                JobRecurrence recurrenceInstance = new JobRecurrence();
                                jobInstance.Recurrence = recurrenceInstance;
                                
                                JToken frequencyValue = recurrenceValue["frequency"];
                                if (frequencyValue != null)
                                {
                                    JobRecurrenceFrequency frequencyInstance = SchedulerClient.ParseJobRecurrenceFrequency((string)frequencyValue);
                                    recurrenceInstance.Frequency = frequencyInstance;
                                }
                                
                                JToken intervalValue = recurrenceValue["interval"];
                                if (intervalValue != null)
                                {
                                    int intervalInstance = (int)intervalValue;
                                    recurrenceInstance.Interval = intervalInstance;
                                }
                                
                                JToken countValue = recurrenceValue["count"];
                                if (countValue != null)
                                {
                                    int countInstance = (int)countValue;
                                    recurrenceInstance.Count = countInstance;
                                }
                                
                                JToken endTimeValue = recurrenceValue["endTime"];
                                if (endTimeValue != null)
                                {
                                    DateTime endTimeInstance = (DateTime)endTimeValue;
                                    recurrenceInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken scheduleValue = recurrenceValue["schedule"];
                                if (scheduleValue != null)
                                {
                                    JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                                    recurrenceInstance.Schedule = scheduleInstance;
                                    
                                    JArray minutesArray = (JArray)scheduleValue["minutes"];
                                    if (minutesArray != null)
                                    {
                                        foreach (JToken minutesValue in minutesArray)
                                        {
                                            scheduleInstance.Minutes.Add((int)minutesValue);
                                        }
                                    }
                                    
                                    JArray hoursArray = (JArray)scheduleValue["hours"];
                                    if (hoursArray != null)
                                    {
                                        foreach (JToken hoursValue in hoursArray)
                                        {
                                            scheduleInstance.Hours.Add((int)hoursValue);
                                        }
                                    }
                                    
                                    JArray daysArray = (JArray)scheduleValue["days"];
                                    if (daysArray != null)
                                    {
                                        foreach (JToken daysValue in daysArray)
                                        {
                                            scheduleInstance.Days.Add(SchedulerClient.ParseJobScheduleDay((string)daysValue));
                                        }
                                    }
                                    
                                    JArray monthsArray = (JArray)scheduleValue["months"];
                                    if (monthsArray != null)
                                    {
                                        foreach (JToken monthsValue in monthsArray)
                                        {
                                            scheduleInstance.Months.Add((int)monthsValue);
                                        }
                                    }
                                    
                                    JArray monthDaysArray = (JArray)scheduleValue["monthDays"];
                                    if (monthDaysArray != null)
                                    {
                                        foreach (JToken monthDaysValue in monthDaysArray)
                                        {
                                            scheduleInstance.MonthDays.Add((int)monthDaysValue);
                                        }
                                    }
                                    
                                    JArray monthlyOccurrencesArray = (JArray)scheduleValue["monthlyOccurrences"];
                                    if (monthlyOccurrencesArray != null)
                                    {
                                        foreach (JToken monthlyOccurrencesValue in monthlyOccurrencesArray)
                                        {
                                            JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                            scheduleInstance.MonthlyOccurrences.Add(jobScheduleMonthlyOccurrenceInstance);
                                            
                                            JToken dayValue = monthlyOccurrencesValue["day"];
                                            if (dayValue != null)
                                            {
                                                JobScheduleDay dayInstance = SchedulerClient.ParseJobScheduleDay((string)dayValue);
                                                jobScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                            }
                                            
                                            JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                            if (occurrenceValue != null)
                                            {
                                                int occurrenceInstance = (int)occurrenceValue;
                                                jobScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken statusValue = jobsValue["status"];
                            if (statusValue != null)
                            {
                                JobStatus statusInstance = new JobStatus();
                                jobInstance.Status = statusInstance;
                                
                                JToken lastExecutionTimeValue = statusValue["lastExecutionTime"];
                                if (lastExecutionTimeValue != null)
                                {
                                    DateTime lastExecutionTimeInstance = (DateTime)lastExecutionTimeValue;
                                    statusInstance.LastExecutionTime = lastExecutionTimeInstance;
                                }
                                
                                JToken nextExecutionTimeValue = statusValue["nextExecutionTime"];
                                if (nextExecutionTimeValue != null)
                                {
                                    DateTime nextExecutionTimeInstance = (DateTime)nextExecutionTimeValue;
                                    statusInstance.NextExecutionTime = nextExecutionTimeInstance;
                                }
                                
                                JToken executionCountValue = statusValue["executionCount"];
                                if (executionCountValue != null)
                                {
                                    int executionCountInstance = (int)executionCountValue;
                                    statusInstance.ExecutionCount = executionCountInstance;
                                }
                                
                                JToken failureCountValue = statusValue["failureCount"];
                                if (failureCountValue != null)
                                {
                                    int failureCountInstance = (int)failureCountValue;
                                    statusInstance.FailureCount = failureCountInstance;
                                }
                                
                                JToken faultedCountValue = statusValue["faultedCount"];
                                if (faultedCountValue != null)
                                {
                                    int faultedCountInstance = (int)faultedCountValue;
                                    statusInstance.FaultedCount = faultedCountInstance;
                                }
                            }
                            
                            JToken stateValue = jobsValue["state"];
                            if (stateValue != null)
                            {
                                JobState stateInstance = SchedulerClient.ParseJobState((string)stateValue);
                                jobInstance.State = stateInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Job collections can be updated through a simple PATCH operation.
        /// The format of the request is the same as that for creating a job,
        /// though if a field is unspecified we will carry forward the current
        /// value.
        /// </summary>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Jobs State operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Jobs State operation response.
        /// </returns>
        public async Task<JobCollectionJobsUpdateStateResponse> UpdateJobCollectionStateAsync(PatchJobCollectionJobsUpdateStateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateJobCollectionStateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + this.Client.CloudServiceName + "/resources/scheduler/~/JobCollections/" + this.Client.JobCollectionName + "/jobs";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject jobCollectionJobsUpdateStateParametersValue = new JObject();
                requestDoc = jobCollectionJobsUpdateStateParametersValue;
                
                if (parameters.State.IsIncluded)
                {
                    JToken stateValue = SchedulerClient.JobStateToString(parameters.State);
                    jobCollectionJobsUpdateStateParametersValue["state"] = stateValue;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobCollectionJobsUpdateStateResponse result = new JobCollectionJobsUpdateStateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    JArray jobsArray = (JArray)responseDoc;
                    if (jobsArray != null)
                    {
                        foreach (JToken jobsValue in jobsArray)
                        {
                            Job jobInstance = new Job();
                            result.Jobs.Add(jobInstance);
                            
                            JToken idValue = jobsValue["id"];
                            if (idValue != null)
                            {
                                string idInstance = (string)idValue;
                                jobInstance.Id = idInstance;
                            }
                            
                            JToken startTimeValue = jobsValue["startTime"];
                            if (startTimeValue != null)
                            {
                                DateTime startTimeInstance = (DateTime)startTimeValue;
                                jobInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken actionValue = jobsValue["action"];
                            if (actionValue != null)
                            {
                                JobAction actionInstance = new JobAction();
                                jobInstance.Action = actionInstance;
                                
                                JToken typeValue = actionValue["type"];
                                if (typeValue != null)
                                {
                                    JobActionType typeInstance = SchedulerClient.ParseJobActionType((string)typeValue);
                                    actionInstance.Type = typeInstance;
                                }
                                
                                JToken retryPolicyValue = actionValue["retryPolicy"];
                                if (retryPolicyValue != null)
                                {
                                    RetryPolicy retryPolicyInstance = new RetryPolicy();
                                    actionInstance.RetryPolicy = retryPolicyInstance;
                                    
                                    JToken retryTypeValue = retryPolicyValue["retryType"];
                                    if (retryTypeValue != null)
                                    {
                                        RetryType retryTypeInstance = SchedulerClient.ParseRetryType((string)retryTypeValue);
                                        retryPolicyInstance.RetryType = retryTypeInstance;
                                    }
                                    
                                    JToken retryIntervalValue = retryPolicyValue["retryInterval"];
                                    if (retryIntervalValue != null)
                                    {
                                        TimeSpan retryIntervalInstance = TimeSpan.Parse((string)retryIntervalValue, CultureInfo.InvariantCulture);
                                        retryPolicyInstance.RetryInterval = retryIntervalInstance;
                                    }
                                    
                                    JToken retryCountValue = retryPolicyValue["retryCount"];
                                    if (retryCountValue != null)
                                    {
                                        int retryCountInstance = (int)retryCountValue;
                                        retryPolicyInstance.RetryCount = retryCountInstance;
                                    }
                                }
                                
                                JToken errorActionValue = actionValue["errorAction"];
                                if (errorActionValue != null)
                                {
                                    JobErrorAction errorActionInstance = new JobErrorAction();
                                    actionInstance.ErrorAction = errorActionInstance;
                                    
                                    JToken typeValue2 = errorActionValue["type"];
                                    if (typeValue2 != null)
                                    {
                                        JobActionType typeInstance2 = SchedulerClient.ParseJobActionType((string)typeValue2);
                                        errorActionInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken requestValue = errorActionValue["request"];
                                    if (requestValue != null)
                                    {
                                        JobHttpRequest requestInstance = new JobHttpRequest();
                                        errorActionInstance.Request = requestInstance;
                                        
                                        JToken uriValue = requestValue["uri"];
                                        if (uriValue != null)
                                        {
                                            Uri uriInstance = TypeConversion.TryParseUri((string)uriValue);
                                            requestInstance.Uri = uriInstance;
                                        }
                                        
                                        JToken methodValue = requestValue["method"];
                                        if (methodValue != null)
                                        {
                                            string methodInstance = (string)methodValue;
                                            requestInstance.Method = methodInstance;
                                        }
                                        
                                        JToken headersSequenceElement = requestValue["headers"];
                                        if (headersSequenceElement != null)
                                        {
                                            foreach (JProperty property in headersSequenceElement)
                                            {
                                                string headersKey = (string)property.Name;
                                                string headersValue = (string)property.Value;
                                                requestInstance.Headers.Add(headersKey, headersValue);
                                            }
                                        }
                                        
                                        JToken bodyValue = requestValue["body"];
                                        if (bodyValue != null)
                                        {
                                            string bodyInstance = (string)bodyValue;
                                            requestInstance.Body = bodyInstance;
                                        }
                                    }
                                    
                                    JToken queueMessageValue = errorActionValue["queueMessage"];
                                    if (queueMessageValue != null)
                                    {
                                        JobQueueMessage queueMessageInstance = new JobQueueMessage();
                                        errorActionInstance.QueueMessage = queueMessageInstance;
                                        
                                        JToken storageAccountValue = queueMessageValue["storageAccount"];
                                        if (storageAccountValue != null)
                                        {
                                            string storageAccountInstance = (string)storageAccountValue;
                                            queueMessageInstance.StorageAccountName = storageAccountInstance;
                                        }
                                        
                                        JToken queueNameValue = queueMessageValue["queueName"];
                                        if (queueNameValue != null)
                                        {
                                            string queueNameInstance = (string)queueNameValue;
                                            queueMessageInstance.QueueName = queueNameInstance;
                                        }
                                        
                                        JToken sasTokenValue = queueMessageValue["sasToken"];
                                        if (sasTokenValue != null)
                                        {
                                            string sasTokenInstance = (string)sasTokenValue;
                                            queueMessageInstance.SasToken = sasTokenInstance;
                                        }
                                        
                                        JToken messageValue = queueMessageValue["message"];
                                        if (messageValue != null)
                                        {
                                            string messageInstance = (string)messageValue;
                                            queueMessageInstance.Message = messageInstance;
                                        }
                                    }
                                }
                                
                                JToken requestValue2 = actionValue["request"];
                                if (requestValue2 != null)
                                {
                                    JobHttpRequest requestInstance2 = new JobHttpRequest();
                                    actionInstance.Request = requestInstance2;
                                    
                                    JToken uriValue2 = requestValue2["uri"];
                                    if (uriValue2 != null)
                                    {
                                        Uri uriInstance2 = TypeConversion.TryParseUri((string)uriValue2);
                                        requestInstance2.Uri = uriInstance2;
                                    }
                                    
                                    JToken methodValue2 = requestValue2["method"];
                                    if (methodValue2 != null)
                                    {
                                        string methodInstance2 = (string)methodValue2;
                                        requestInstance2.Method = methodInstance2;
                                    }
                                    
                                    JToken headersSequenceElement2 = requestValue2["headers"];
                                    if (headersSequenceElement2 != null)
                                    {
                                        foreach (JProperty property2 in headersSequenceElement2)
                                        {
                                            string headersKey2 = (string)property2.Name;
                                            string headersValue2 = (string)property2.Value;
                                            requestInstance2.Headers.Add(headersKey2, headersValue2);
                                        }
                                    }
                                    
                                    JToken bodyValue2 = requestValue2["body"];
                                    if (bodyValue2 != null)
                                    {
                                        string bodyInstance2 = (string)bodyValue2;
                                        requestInstance2.Body = bodyInstance2;
                                    }
                                }
                                
                                JToken queueMessageValue2 = actionValue["queueMessage"];
                                if (queueMessageValue2 != null)
                                {
                                    JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                                    actionInstance.QueueMessage = queueMessageInstance2;
                                    
                                    JToken storageAccountValue2 = queueMessageValue2["storageAccount"];
                                    if (storageAccountValue2 != null)
                                    {
                                        string storageAccountInstance2 = (string)storageAccountValue2;
                                        queueMessageInstance2.StorageAccountName = storageAccountInstance2;
                                    }
                                    
                                    JToken queueNameValue2 = queueMessageValue2["queueName"];
                                    if (queueNameValue2 != null)
                                    {
                                        string queueNameInstance2 = (string)queueNameValue2;
                                        queueMessageInstance2.QueueName = queueNameInstance2;
                                    }
                                    
                                    JToken sasTokenValue2 = queueMessageValue2["sasToken"];
                                    if (sasTokenValue2 != null)
                                    {
                                        string sasTokenInstance2 = (string)sasTokenValue2;
                                        queueMessageInstance2.SasToken = sasTokenInstance2;
                                    }
                                    
                                    JToken messageValue2 = queueMessageValue2["message"];
                                    if (messageValue2 != null)
                                    {
                                        string messageInstance2 = (string)messageValue2;
                                        queueMessageInstance2.Message = messageInstance2;
                                    }
                                }
                            }
                            
                            JToken recurrenceValue = jobsValue["recurrence"];
                            if (recurrenceValue != null)
                            {
                                JobRecurrence recurrenceInstance = new JobRecurrence();
                                jobInstance.Recurrence = recurrenceInstance;
                                
                                JToken frequencyValue = recurrenceValue["frequency"];
                                if (frequencyValue != null)
                                {
                                    JobRecurrenceFrequency frequencyInstance = SchedulerClient.ParseJobRecurrenceFrequency((string)frequencyValue);
                                    recurrenceInstance.Frequency = frequencyInstance;
                                }
                                
                                JToken intervalValue = recurrenceValue["interval"];
                                if (intervalValue != null)
                                {
                                    int intervalInstance = (int)intervalValue;
                                    recurrenceInstance.Interval = intervalInstance;
                                }
                                
                                JToken countValue = recurrenceValue["count"];
                                if (countValue != null)
                                {
                                    int countInstance = (int)countValue;
                                    recurrenceInstance.Count = countInstance;
                                }
                                
                                JToken endTimeValue = recurrenceValue["endTime"];
                                if (endTimeValue != null)
                                {
                                    DateTime endTimeInstance = (DateTime)endTimeValue;
                                    recurrenceInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken scheduleValue = recurrenceValue["schedule"];
                                if (scheduleValue != null)
                                {
                                    JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                                    recurrenceInstance.Schedule = scheduleInstance;
                                    
                                    JArray minutesArray = (JArray)scheduleValue["minutes"];
                                    if (minutesArray != null)
                                    {
                                        foreach (JToken minutesValue in minutesArray)
                                        {
                                            scheduleInstance.Minutes.Add((int)minutesValue);
                                        }
                                    }
                                    
                                    JArray hoursArray = (JArray)scheduleValue["hours"];
                                    if (hoursArray != null)
                                    {
                                        foreach (JToken hoursValue in hoursArray)
                                        {
                                            scheduleInstance.Hours.Add((int)hoursValue);
                                        }
                                    }
                                    
                                    JArray daysArray = (JArray)scheduleValue["days"];
                                    if (daysArray != null)
                                    {
                                        foreach (JToken daysValue in daysArray)
                                        {
                                            scheduleInstance.Days.Add(SchedulerClient.ParseJobScheduleDay((string)daysValue));
                                        }
                                    }
                                    
                                    JArray monthsArray = (JArray)scheduleValue["months"];
                                    if (monthsArray != null)
                                    {
                                        foreach (JToken monthsValue in monthsArray)
                                        {
                                            scheduleInstance.Months.Add((int)monthsValue);
                                        }
                                    }
                                    
                                    JArray monthDaysArray = (JArray)scheduleValue["monthDays"];
                                    if (monthDaysArray != null)
                                    {
                                        foreach (JToken monthDaysValue in monthDaysArray)
                                        {
                                            scheduleInstance.MonthDays.Add((int)monthDaysValue);
                                        }
                                    }
                                    
                                    JArray monthlyOccurrencesArray = (JArray)scheduleValue["monthlyOccurrences"];
                                    if (monthlyOccurrencesArray != null)
                                    {
                                        foreach (JToken monthlyOccurrencesValue in monthlyOccurrencesArray)
                                        {
                                            JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                            scheduleInstance.MonthlyOccurrences.Add(jobScheduleMonthlyOccurrenceInstance);
                                            
                                            JToken dayValue = monthlyOccurrencesValue["day"];
                                            if (dayValue != null)
                                            {
                                                JobScheduleDay dayInstance = SchedulerClient.ParseJobScheduleDay((string)dayValue);
                                                jobScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                            }
                                            
                                            JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                            if (occurrenceValue != null)
                                            {
                                                int occurrenceInstance = (int)occurrenceValue;
                                                jobScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken statusValue = jobsValue["status"];
                            if (statusValue != null)
                            {
                                JobStatus statusInstance = new JobStatus();
                                jobInstance.Status = statusInstance;
                                
                                JToken lastExecutionTimeValue = statusValue["lastExecutionTime"];
                                if (lastExecutionTimeValue != null)
                                {
                                    DateTime lastExecutionTimeInstance = (DateTime)lastExecutionTimeValue;
                                    statusInstance.LastExecutionTime = lastExecutionTimeInstance;
                                }
                                
                                JToken nextExecutionTimeValue = statusValue["nextExecutionTime"];
                                if (nextExecutionTimeValue != null)
                                {
                                    DateTime nextExecutionTimeInstance = (DateTime)nextExecutionTimeValue;
                                    statusInstance.NextExecutionTime = nextExecutionTimeInstance;
                                }
                                
                                JToken executionCountValue = statusValue["executionCount"];
                                if (executionCountValue != null)
                                {
                                    int executionCountInstance = (int)executionCountValue;
                                    statusInstance.ExecutionCount = executionCountInstance;
                                }
                                
                                JToken failureCountValue = statusValue["failureCount"];
                                if (failureCountValue != null)
                                {
                                    int failureCountInstance = (int)failureCountValue;
                                    statusInstance.FailureCount = failureCountInstance;
                                }
                                
                                JToken faultedCountValue = statusValue["faultedCount"];
                                if (faultedCountValue != null)
                                {
                                    int faultedCountInstance = (int)faultedCountValue;
                                    statusInstance.FaultedCount = faultedCountInstance;
                                }
                            }
                            
                            JToken stateValue2 = jobsValue["state"];
                            if (stateValue2 != null)
                            {
                                JobState stateInstance = SchedulerClient.ParseJobState((string)stateValue2);
                                jobInstance.State = stateInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Jobs can be updated through a simple PATCH operation to a job's
        /// address. The format of the request is the same as that for
        /// creating a job, though if a field is unspecified we will carry
        /// forward the current value.
        /// </summary>
        /// <param name='jobId'>
        /// Id of the job to update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Job State operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Job State operation response.
        /// </returns>
        public async Task<JobUpdateStateResponse> UpdateStateAsync(string jobId, JobUpdateStateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateStateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + this.Client.CloudServiceName + "/resources/scheduler/~/JobCollections/" + this.Client.JobCollectionName + "/jobs/" + jobId + "?api-version=2013-10-31_Preview";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject jobUpdateStateParametersValue = new JObject();
                requestDoc = jobUpdateStateParametersValue;
                
                JToken stateValue = SchedulerClient.JobStateToString(parameters.State);
                jobUpdateStateParametersValue["state"] = stateValue;
                
                if (parameters.UpdateStateReason != null)
                {
                    JToken stateDetailsValue = parameters.UpdateStateReason;
                    jobUpdateStateParametersValue["stateDetails"] = stateDetailsValue;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobUpdateStateResponse result = new JobUpdateStateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        Job jobInstance = new Job();
                        result.Job = jobInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null)
                        {
                            string idInstance = (string)idValue;
                            jobInstance.Id = idInstance;
                        }
                        
                        JToken startTimeValue = responseDoc["startTime"];
                        if (startTimeValue != null)
                        {
                            DateTime startTimeInstance = (DateTime)startTimeValue;
                            jobInstance.StartTime = startTimeInstance;
                        }
                        
                        JToken actionValue = responseDoc["action"];
                        if (actionValue != null)
                        {
                            JobAction actionInstance = new JobAction();
                            jobInstance.Action = actionInstance;
                            
                            JToken typeValue = actionValue["type"];
                            if (typeValue != null)
                            {
                                JobActionType typeInstance = SchedulerClient.ParseJobActionType((string)typeValue);
                                actionInstance.Type = typeInstance;
                            }
                            
                            JToken retryPolicyValue = actionValue["retryPolicy"];
                            if (retryPolicyValue != null)
                            {
                                RetryPolicy retryPolicyInstance = new RetryPolicy();
                                actionInstance.RetryPolicy = retryPolicyInstance;
                                
                                JToken retryTypeValue = retryPolicyValue["retryType"];
                                if (retryTypeValue != null)
                                {
                                    RetryType retryTypeInstance = SchedulerClient.ParseRetryType((string)retryTypeValue);
                                    retryPolicyInstance.RetryType = retryTypeInstance;
                                }
                                
                                JToken retryIntervalValue = retryPolicyValue["retryInterval"];
                                if (retryIntervalValue != null)
                                {
                                    TimeSpan retryIntervalInstance = TimeSpan.Parse((string)retryIntervalValue, CultureInfo.InvariantCulture);
                                    retryPolicyInstance.RetryInterval = retryIntervalInstance;
                                }
                                
                                JToken retryCountValue = retryPolicyValue["retryCount"];
                                if (retryCountValue != null)
                                {
                                    int retryCountInstance = (int)retryCountValue;
                                    retryPolicyInstance.RetryCount = retryCountInstance;
                                }
                            }
                            
                            JToken errorActionValue = actionValue["errorAction"];
                            if (errorActionValue != null)
                            {
                                JobErrorAction errorActionInstance = new JobErrorAction();
                                actionInstance.ErrorAction = errorActionInstance;
                                
                                JToken typeValue2 = errorActionValue["type"];
                                if (typeValue2 != null)
                                {
                                    JobActionType typeInstance2 = SchedulerClient.ParseJobActionType((string)typeValue2);
                                    errorActionInstance.Type = typeInstance2;
                                }
                                
                                JToken requestValue = errorActionValue["request"];
                                if (requestValue != null)
                                {
                                    JobHttpRequest requestInstance = new JobHttpRequest();
                                    errorActionInstance.Request = requestInstance;
                                    
                                    JToken uriValue = requestValue["uri"];
                                    if (uriValue != null)
                                    {
                                        Uri uriInstance = TypeConversion.TryParseUri((string)uriValue);
                                        requestInstance.Uri = uriInstance;
                                    }
                                    
                                    JToken methodValue = requestValue["method"];
                                    if (methodValue != null)
                                    {
                                        string methodInstance = (string)methodValue;
                                        requestInstance.Method = methodInstance;
                                    }
                                    
                                    JToken headersSequenceElement = requestValue["headers"];
                                    if (headersSequenceElement != null)
                                    {
                                        foreach (JProperty property in headersSequenceElement)
                                        {
                                            string headersKey = (string)property.Name;
                                            string headersValue = (string)property.Value;
                                            requestInstance.Headers.Add(headersKey, headersValue);
                                        }
                                    }
                                    
                                    JToken bodyValue = requestValue["body"];
                                    if (bodyValue != null)
                                    {
                                        string bodyInstance = (string)bodyValue;
                                        requestInstance.Body = bodyInstance;
                                    }
                                }
                                
                                JToken queueMessageValue = errorActionValue["queueMessage"];
                                if (queueMessageValue != null)
                                {
                                    JobQueueMessage queueMessageInstance = new JobQueueMessage();
                                    errorActionInstance.QueueMessage = queueMessageInstance;
                                    
                                    JToken storageAccountValue = queueMessageValue["storageAccount"];
                                    if (storageAccountValue != null)
                                    {
                                        string storageAccountInstance = (string)storageAccountValue;
                                        queueMessageInstance.StorageAccountName = storageAccountInstance;
                                    }
                                    
                                    JToken queueNameValue = queueMessageValue["queueName"];
                                    if (queueNameValue != null)
                                    {
                                        string queueNameInstance = (string)queueNameValue;
                                        queueMessageInstance.QueueName = queueNameInstance;
                                    }
                                    
                                    JToken sasTokenValue = queueMessageValue["sasToken"];
                                    if (sasTokenValue != null)
                                    {
                                        string sasTokenInstance = (string)sasTokenValue;
                                        queueMessageInstance.SasToken = sasTokenInstance;
                                    }
                                    
                                    JToken messageValue = queueMessageValue["message"];
                                    if (messageValue != null)
                                    {
                                        string messageInstance = (string)messageValue;
                                        queueMessageInstance.Message = messageInstance;
                                    }
                                }
                            }
                            
                            JToken requestValue2 = actionValue["request"];
                            if (requestValue2 != null)
                            {
                                JobHttpRequest requestInstance2 = new JobHttpRequest();
                                actionInstance.Request = requestInstance2;
                                
                                JToken uriValue2 = requestValue2["uri"];
                                if (uriValue2 != null)
                                {
                                    Uri uriInstance2 = TypeConversion.TryParseUri((string)uriValue2);
                                    requestInstance2.Uri = uriInstance2;
                                }
                                
                                JToken methodValue2 = requestValue2["method"];
                                if (methodValue2 != null)
                                {
                                    string methodInstance2 = (string)methodValue2;
                                    requestInstance2.Method = methodInstance2;
                                }
                                
                                JToken headersSequenceElement2 = requestValue2["headers"];
                                if (headersSequenceElement2 != null)
                                {
                                    foreach (JProperty property2 in headersSequenceElement2)
                                    {
                                        string headersKey2 = (string)property2.Name;
                                        string headersValue2 = (string)property2.Value;
                                        requestInstance2.Headers.Add(headersKey2, headersValue2);
                                    }
                                }
                                
                                JToken bodyValue2 = requestValue2["body"];
                                if (bodyValue2 != null)
                                {
                                    string bodyInstance2 = (string)bodyValue2;
                                    requestInstance2.Body = bodyInstance2;
                                }
                            }
                            
                            JToken queueMessageValue2 = actionValue["queueMessage"];
                            if (queueMessageValue2 != null)
                            {
                                JobQueueMessage queueMessageInstance2 = new JobQueueMessage();
                                actionInstance.QueueMessage = queueMessageInstance2;
                                
                                JToken storageAccountValue2 = queueMessageValue2["storageAccount"];
                                if (storageAccountValue2 != null)
                                {
                                    string storageAccountInstance2 = (string)storageAccountValue2;
                                    queueMessageInstance2.StorageAccountName = storageAccountInstance2;
                                }
                                
                                JToken queueNameValue2 = queueMessageValue2["queueName"];
                                if (queueNameValue2 != null)
                                {
                                    string queueNameInstance2 = (string)queueNameValue2;
                                    queueMessageInstance2.QueueName = queueNameInstance2;
                                }
                                
                                JToken sasTokenValue2 = queueMessageValue2["sasToken"];
                                if (sasTokenValue2 != null)
                                {
                                    string sasTokenInstance2 = (string)sasTokenValue2;
                                    queueMessageInstance2.SasToken = sasTokenInstance2;
                                }
                                
                                JToken messageValue2 = queueMessageValue2["message"];
                                if (messageValue2 != null)
                                {
                                    string messageInstance2 = (string)messageValue2;
                                    queueMessageInstance2.Message = messageInstance2;
                                }
                            }
                        }
                        
                        JToken recurrenceValue = responseDoc["recurrence"];
                        if (recurrenceValue != null)
                        {
                            JobRecurrence recurrenceInstance = new JobRecurrence();
                            jobInstance.Recurrence = recurrenceInstance;
                            
                            JToken frequencyValue = recurrenceValue["frequency"];
                            if (frequencyValue != null)
                            {
                                JobRecurrenceFrequency frequencyInstance = SchedulerClient.ParseJobRecurrenceFrequency((string)frequencyValue);
                                recurrenceInstance.Frequency = frequencyInstance;
                            }
                            
                            JToken intervalValue = recurrenceValue["interval"];
                            if (intervalValue != null)
                            {
                                int intervalInstance = (int)intervalValue;
                                recurrenceInstance.Interval = intervalInstance;
                            }
                            
                            JToken countValue = recurrenceValue["count"];
                            if (countValue != null)
                            {
                                int countInstance = (int)countValue;
                                recurrenceInstance.Count = countInstance;
                            }
                            
                            JToken endTimeValue = recurrenceValue["endTime"];
                            if (endTimeValue != null)
                            {
                                DateTime endTimeInstance = (DateTime)endTimeValue;
                                recurrenceInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken scheduleValue = recurrenceValue["schedule"];
                            if (scheduleValue != null)
                            {
                                JobRecurrenceSchedule scheduleInstance = new JobRecurrenceSchedule();
                                recurrenceInstance.Schedule = scheduleInstance;
                                
                                JArray minutesArray = (JArray)scheduleValue["minutes"];
                                if (minutesArray != null)
                                {
                                    foreach (JToken minutesValue in minutesArray)
                                    {
                                        scheduleInstance.Minutes.Add((int)minutesValue);
                                    }
                                }
                                
                                JArray hoursArray = (JArray)scheduleValue["hours"];
                                if (hoursArray != null)
                                {
                                    foreach (JToken hoursValue in hoursArray)
                                    {
                                        scheduleInstance.Hours.Add((int)hoursValue);
                                    }
                                }
                                
                                JArray daysArray = (JArray)scheduleValue["days"];
                                if (daysArray != null)
                                {
                                    foreach (JToken daysValue in daysArray)
                                    {
                                        scheduleInstance.Days.Add(SchedulerClient.ParseJobScheduleDay((string)daysValue));
                                    }
                                }
                                
                                JArray monthsArray = (JArray)scheduleValue["months"];
                                if (monthsArray != null)
                                {
                                    foreach (JToken monthsValue in monthsArray)
                                    {
                                        scheduleInstance.Months.Add((int)monthsValue);
                                    }
                                }
                                
                                JArray monthDaysArray = (JArray)scheduleValue["monthDays"];
                                if (monthDaysArray != null)
                                {
                                    foreach (JToken monthDaysValue in monthDaysArray)
                                    {
                                        scheduleInstance.MonthDays.Add((int)monthDaysValue);
                                    }
                                }
                                
                                JArray monthlyOccurrencesArray = (JArray)scheduleValue["monthlyOccurrences"];
                                if (monthlyOccurrencesArray != null)
                                {
                                    foreach (JToken monthlyOccurrencesValue in monthlyOccurrencesArray)
                                    {
                                        JobScheduleMonthlyOccurrence jobScheduleMonthlyOccurrenceInstance = new JobScheduleMonthlyOccurrence();
                                        scheduleInstance.MonthlyOccurrences.Add(jobScheduleMonthlyOccurrenceInstance);
                                        
                                        JToken dayValue = monthlyOccurrencesValue["day"];
                                        if (dayValue != null)
                                        {
                                            JobScheduleDay dayInstance = SchedulerClient.ParseJobScheduleDay((string)dayValue);
                                            jobScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                        }
                                        
                                        JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                        if (occurrenceValue != null)
                                        {
                                            int occurrenceInstance = (int)occurrenceValue;
                                            jobScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken statusValue = responseDoc["status"];
                        if (statusValue != null)
                        {
                            JobStatus statusInstance = new JobStatus();
                            jobInstance.Status = statusInstance;
                            
                            JToken lastExecutionTimeValue = statusValue["lastExecutionTime"];
                            if (lastExecutionTimeValue != null)
                            {
                                DateTime lastExecutionTimeInstance = (DateTime)lastExecutionTimeValue;
                                statusInstance.LastExecutionTime = lastExecutionTimeInstance;
                            }
                            
                            JToken nextExecutionTimeValue = statusValue["nextExecutionTime"];
                            if (nextExecutionTimeValue != null)
                            {
                                DateTime nextExecutionTimeInstance = (DateTime)nextExecutionTimeValue;
                                statusInstance.NextExecutionTime = nextExecutionTimeInstance;
                            }
                            
                            JToken executionCountValue = statusValue["executionCount"];
                            if (executionCountValue != null)
                            {
                                int executionCountInstance = (int)executionCountValue;
                                statusInstance.ExecutionCount = executionCountInstance;
                            }
                            
                            JToken failureCountValue = statusValue["failureCount"];
                            if (failureCountValue != null)
                            {
                                int failureCountInstance = (int)failureCountValue;
                                statusInstance.FailureCount = failureCountInstance;
                            }
                            
                            JToken faultedCountValue = statusValue["faultedCount"];
                            if (faultedCountValue != null)
                            {
                                int faultedCountInstance = (int)faultedCountValue;
                                statusInstance.FaultedCount = faultedCountInstance;
                            }
                        }
                        
                        JToken stateValue2 = responseDoc["state"];
                        if (stateValue2 != null)
                        {
                            JobState stateInstance = SchedulerClient.ParseJobState((string)stateValue2);
                            jobInstance.State = stateInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
