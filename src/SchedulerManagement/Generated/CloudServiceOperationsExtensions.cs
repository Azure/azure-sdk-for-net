// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Management.Scheduler;
using Microsoft.WindowsAzure.Management.Scheduler.Models;

namespace Microsoft.WindowsAzure
{
    public static partial class CloudServiceOperationsExtensions
    {
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginCreating(this ICloudServiceOperations operations, string cloudServiceName, CloudServiceCreateParameters parameters)
        {
            try
            {
                return operations.BeginCreatingAsync(cloudServiceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginCreatingAsync(this ICloudServiceOperations operations, string cloudServiceName, CloudServiceCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(cloudServiceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginDeleting(this ICloudServiceOperations operations, string cloudServiceName)
        {
            try
            {
                return operations.BeginDeletingAsync(cloudServiceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Delete a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginDeletingAsync(this ICloudServiceOperations operations, string cloudServiceName)
        {
            return operations.BeginDeletingAsync(cloudServiceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static CloudServiceOperationStatusResponse Create(this ICloudServiceOperations operations, string cloudServiceName, CloudServiceCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(cloudServiceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Create a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create cloud service operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<CloudServiceOperationStatusResponse> CreateAsync(this ICloudServiceOperations operations, string cloudServiceName, CloudServiceCreateParameters parameters)
        {
            return operations.CreateAsync(cloudServiceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static CloudServiceOperationStatusResponse Delete(this ICloudServiceOperations operations, string cloudServiceName)
        {
            try
            {
                return operations.DeleteAsync(cloudServiceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Delete a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<CloudServiceOperationStatusResponse> DeleteAsync(this ICloudServiceOperations operations, string cloudServiceName)
        {
            return operations.DeleteAsync(cloudServiceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retreive a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <returns>
        /// Information about a retrieved Cloud Service.
        /// </returns>
        public static CloudServiceGetResponse Get(this ICloudServiceOperations operations, string cloudServiceName)
        {
            try
            {
                return operations.GetAsync(cloudServiceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Retreive a cloud service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The cloud service name.
        /// </param>
        /// <returns>
        /// Information about a retrieved Cloud Service.
        /// </returns>
        public static Task<CloudServiceGetResponse> GetAsync(this ICloudServiceOperations operations, string cloudServiceName)
        {
            return operations.GetAsync(cloudServiceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Cloud Services operation enumerates services that are
        /// provisioned for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Cloud Service List operation.
        /// </returns>
        public static CloudServiceListResponse List(this ICloudServiceOperations operations)
        {
            try
            {
                return operations.ListAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The List Cloud Services operation enumerates services that are
        /// provisioned for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ICloudServiceOperations.
        /// </param>
        /// <returns>
        /// The response structure for the Cloud Service List operation.
        /// </returns>
        public static Task<CloudServiceListResponse> ListAsync(this ICloudServiceOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
    }
}
