// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Management.Scheduler;
using Microsoft.WindowsAzure.Management.Scheduler.Models;

namespace Microsoft.WindowsAzure
{
    public static partial class JobCollectionOperationsExtensions
    {
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service containing the job
        /// collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Job Collection
        /// operation.
        /// </param>
        /// <returns>
        /// The Create Job Collection operation response.
        /// </returns>
        public static JobCollectionCreateResponse BeginCreating(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IJobCollectionOperations)s).BeginCreatingAsync(cloudServiceName, jobCollectionName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service containing the job
        /// collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Job Collection
        /// operation.
        /// </param>
        /// <returns>
        /// The Create Job Collection operation response.
        /// </returns>
        public static Task<JobCollectionCreateResponse> BeginCreatingAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(cloudServiceName, jobCollectionName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginDeleting(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IJobCollectionOperations)s).BeginDeletingAsync(cloudServiceName, jobCollectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginDeletingAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return operations.BeginDeletingAsync(cloudServiceName, jobCollectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service containing the job
        /// collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Job Collection
        /// operation.
        /// </param>
        /// <returns>
        /// The Update Job Collection operation response.
        /// </returns>
        public static JobCollectionUpdateResponse BeginUpdating(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IJobCollectionOperations)s).BeginUpdatingAsync(cloudServiceName, jobCollectionName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service containing the job
        /// collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Job Collection
        /// operation.
        /// </param>
        /// <returns>
        /// The Update Job Collection operation response.
        /// </returns>
        public static Task<JobCollectionUpdateResponse> BeginUpdatingAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters)
        {
            return operations.BeginUpdatingAsync(cloudServiceName, jobCollectionName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Determine if the JobCollection name is available to be used.
        /// JobCollection names must be unique within a cloud-service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. A name for the JobCollection. The name must be unique as
        /// scoped within the CloudService.  The name can be up to 100
        /// characters in length.
        /// </param>
        /// <returns>
        /// The Check Name Availability operation response.
        /// </returns>
        public static JobCollectionCheckNameAvailabilityResponse CheckNameAvailability(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IJobCollectionOperations)s).CheckNameAvailabilityAsync(cloudServiceName, jobCollectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Determine if the JobCollection name is available to be used.
        /// JobCollection names must be unique within a cloud-service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. A name for the JobCollection. The name must be unique as
        /// scoped within the CloudService.  The name can be up to 100
        /// characters in length.
        /// </param>
        /// <returns>
        /// The Check Name Availability operation response.
        /// </returns>
        public static Task<JobCollectionCheckNameAvailabilityResponse> CheckNameAvailabilityAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return operations.CheckNameAvailabilityAsync(cloudServiceName, jobCollectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service containing the job
        /// collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Job Collection
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static SchedulerOperationStatusResponse Create(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IJobCollectionOperations)s).CreateAsync(cloudServiceName, jobCollectionName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service containing the job
        /// collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Job Collection
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<SchedulerOperationStatusResponse> CreateAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters)
        {
            return operations.CreateAsync(cloudServiceName, jobCollectionName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static SchedulerOperationStatusResponse Delete(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IJobCollectionOperations)s).DeleteAsync(cloudServiceName, jobCollectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<SchedulerOperationStatusResponse> DeleteAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return operations.DeleteAsync(cloudServiceName, jobCollectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retreive a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. Name of the job collection.
        /// </param>
        /// <returns>
        /// The Get Job Collection operation response.
        /// </returns>
        public static JobCollectionGetResponse Get(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IJobCollectionOperations)s).GetAsync(cloudServiceName, jobCollectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retreive a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. Name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. Name of the job collection.
        /// </param>
        /// <returns>
        /// The Get Job Collection operation response.
        /// </returns>
        public static Task<JobCollectionGetResponse> GetAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return operations.GetAsync(cloudServiceName, jobCollectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service containing the job
        /// collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Job Collection
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static SchedulerOperationStatusResponse Update(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IJobCollectionOperations)s).UpdateAsync(cloudServiceName, jobCollectionName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Required. The name of the cloud service containing the job
        /// collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Required. The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Job Collection
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<SchedulerOperationStatusResponse> UpdateAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters)
        {
            return operations.UpdateAsync(cloudServiceName, jobCollectionName, parameters, CancellationToken.None);
        }
    }
}
