// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Scheduler;
using Microsoft.WindowsAzure.Scheduler.Models;

namespace Microsoft.WindowsAzure.Scheduler
{
    public partial class SchedulerClient : ServiceClient<SchedulerClient>, ISchedulerClient
    {
        private Uri _baseUri;
        
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private string _cloudServiceName;
        
        public string CloudServiceName
        {
            get { return this._cloudServiceName; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private string _jobCollectionName;
        
        public string JobCollectionName
        {
            get { return this._jobCollectionName; }
        }
        
        private IJobOperations _jobs;
        
        public virtual IJobOperations Jobs
        {
            get { return this._jobs; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SchedulerClient class.
        /// </summary>
        private SchedulerClient()
            : base()
        {
            this._jobs = new JobOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the SchedulerClient class.
        /// </summary>
        public SchedulerClient(SubscriptionCloudCredentials credentials, string cloudServiceName, string jobCollectionName, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException("jobCollectionName");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._cloudServiceName = cloudServiceName;
            this._jobCollectionName = jobCollectionName;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SchedulerClient class.
        /// </summary>
        public SchedulerClient(SubscriptionCloudCredentials credentials, string cloudServiceName, string jobCollectionName)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException("jobCollectionName");
            }
            this._credentials = credentials;
            this._cloudServiceName = cloudServiceName;
            this._jobCollectionName = jobCollectionName;
            this._baseUri = new Uri("https://management.core.windows.net/");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Parse enum values for type JobActionType.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static JobActionType ParseJobActionType(string value)
        {
            if (value == "http")
            {
                return JobActionType.Http;
            }
            if (value == "https")
            {
                return JobActionType.Https;
            }
            if (value == "storageQueue")
            {
                return JobActionType.StorageQueue;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type JobActionType to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string JobActionTypeToString(JobActionType value)
        {
            if (value == JobActionType.Http)
            {
                return "http";
            }
            if (value == JobActionType.Https)
            {
                return "https";
            }
            if (value == JobActionType.StorageQueue)
            {
                return "storageQueue";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type JobHistoryActionName.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static JobHistoryActionName ParseJobHistoryActionName(string value)
        {
            if (value == "MainAction")
            {
                return JobHistoryActionName.MainAction;
            }
            if (value == "ErrorAction")
            {
                return JobHistoryActionName.ErrorAction;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type JobHistoryActionName to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string JobHistoryActionNameToString(JobHistoryActionName value)
        {
            if (value == JobHistoryActionName.MainAction)
            {
                return "MainAction";
            }
            if (value == JobHistoryActionName.ErrorAction)
            {
                return "ErrorAction";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type JobHistoryStatus.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static JobHistoryStatus ParseJobHistoryStatus(string value)
        {
            if (value == "completed")
            {
                return JobHistoryStatus.Completed;
            }
            if (value == "failed")
            {
                return JobHistoryStatus.Failed;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type JobHistoryStatus to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string JobHistoryStatusToString(JobHistoryStatus value)
        {
            if (value == JobHistoryStatus.Completed)
            {
                return "completed";
            }
            if (value == JobHistoryStatus.Failed)
            {
                return "failed";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type JobRecurrenceFrequency.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static JobRecurrenceFrequency ParseJobRecurrenceFrequency(string value)
        {
            if (value == "minute")
            {
                return JobRecurrenceFrequency.Minute;
            }
            if (value == "hour")
            {
                return JobRecurrenceFrequency.Hour;
            }
            if (value == "day")
            {
                return JobRecurrenceFrequency.Day;
            }
            if (value == "week")
            {
                return JobRecurrenceFrequency.Week;
            }
            if (value == "month")
            {
                return JobRecurrenceFrequency.Month;
            }
            if (value == "year")
            {
                return JobRecurrenceFrequency.Year;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type JobRecurrenceFrequency to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string JobRecurrenceFrequencyToString(JobRecurrenceFrequency value)
        {
            if (value == JobRecurrenceFrequency.Minute)
            {
                return "minute";
            }
            if (value == JobRecurrenceFrequency.Hour)
            {
                return "hour";
            }
            if (value == JobRecurrenceFrequency.Day)
            {
                return "day";
            }
            if (value == JobRecurrenceFrequency.Week)
            {
                return "week";
            }
            if (value == JobRecurrenceFrequency.Month)
            {
                return "month";
            }
            if (value == JobRecurrenceFrequency.Year)
            {
                return "year";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type JobScheduleDay.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static JobScheduleDay ParseJobScheduleDay(string value)
        {
            if (value == "monday")
            {
                return JobScheduleDay.Monday;
            }
            if (value == "tuesday")
            {
                return JobScheduleDay.Tuesday;
            }
            if (value == "wednesday")
            {
                return JobScheduleDay.Wednesday;
            }
            if (value == "thursday")
            {
                return JobScheduleDay.Thursday;
            }
            if (value == "friday")
            {
                return JobScheduleDay.Friday;
            }
            if (value == "saturday")
            {
                return JobScheduleDay.Saturday;
            }
            if (value == "sunday")
            {
                return JobScheduleDay.Sunday;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type JobScheduleDay to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string JobScheduleDayToString(JobScheduleDay value)
        {
            if (value == JobScheduleDay.Monday)
            {
                return "monday";
            }
            if (value == JobScheduleDay.Tuesday)
            {
                return "tuesday";
            }
            if (value == JobScheduleDay.Wednesday)
            {
                return "wednesday";
            }
            if (value == JobScheduleDay.Thursday)
            {
                return "thursday";
            }
            if (value == JobScheduleDay.Friday)
            {
                return "friday";
            }
            if (value == JobScheduleDay.Saturday)
            {
                return "saturday";
            }
            if (value == JobScheduleDay.Sunday)
            {
                return "sunday";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type JobState.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static JobState ParseJobState(string value)
        {
            if (value == "enabled")
            {
                return JobState.Enabled;
            }
            if (value == "disabled")
            {
                return JobState.Disabled;
            }
            if (value == "faulted")
            {
                return JobState.Faulted;
            }
            if (value == "completed")
            {
                return JobState.Completed;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type JobState to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string JobStateToString(JobState value)
        {
            if (value == JobState.Enabled)
            {
                return "enabled";
            }
            if (value == JobState.Disabled)
            {
                return "disabled";
            }
            if (value == JobState.Faulted)
            {
                return "faulted";
            }
            if (value == JobState.Completed)
            {
                return "completed";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type RetryType.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static RetryType ParseRetryType(string value)
        {
            if (value == "none")
            {
                return RetryType.None;
            }
            if (value == "fixed")
            {
                return RetryType.Fixed;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type RetryType to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string RetryTypeToString(RetryType value)
        {
            if (value == RetryType.None)
            {
                return "none";
            }
            if (value == RetryType.Fixed)
            {
                return "fixed";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}
