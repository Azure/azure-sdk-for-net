// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.StreamAnalytics;
using Microsoft.Azure.Management.StreamAnalytics.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.StreamAnalytics
{
    /// <summary>
    /// Operations for managing the stream analytics job.
    /// </summary>
    internal partial class JobOperations : IServiceOperations<StreamAnalyticsManagementClient>, IJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the JobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobOperations(StreamAnalyticsManagementClient client)
        {
            this._client = client;
        }
        
        private StreamAnalyticsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.StreamAnalytics.StreamAnalyticsManagementClient.
        /// </summary>
        public StreamAnalyticsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Delete a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                Tracing.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.PreconditionFailed)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NotFound)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Start a stream analytics job. Asynchronous call.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginStartAsync(string resourceGroupName, string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                Tracing.Enter(invocationId, this, "BeginStartAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/start?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.PreconditionFailed)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NotFound)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Stop a stream analytics job. Asynchronous call.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginStopAsync(string resourceGroupName, string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                Tracing.Enter(invocationId, this, "BeginStopAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/stop?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.PreconditionFailed)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NotFound)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a stream
        /// analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the create stream analytics job operation.
        /// </returns>
        public async Task<JobCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string jobName, JobCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.JobRequest != null)
            {
                if (parameters.JobRequest.Location == null)
                {
                    throw new ArgumentNullException("parameters.JobRequest.Location");
                }
                if (parameters.JobRequest.Properties == null)
                {
                    throw new ArgumentNullException("parameters.JobRequest.Properties");
                }
                if (parameters.JobRequest.Properties.EventsOutOfOrderPolicy == null)
                {
                    throw new ArgumentNullException("parameters.JobRequest.Properties.EventsOutOfOrderPolicy");
                }
                if (parameters.JobRequest.Properties.Inputs != null)
                {
                    foreach (Input inputsParameterItem in parameters.JobRequest.Properties.Inputs)
                    {
                        if (inputsParameterItem.InputProperties == null)
                        {
                            throw new ArgumentNullException("parameters.JobRequest.Properties.Inputs.InputProperties");
                        }
                        if (inputsParameterItem.InputProperties.Serialization == null)
                        {
                            throw new ArgumentNullException("parameters.JobRequest.Properties.Inputs.InputProperties.Serialization");
                        }
                        if (inputsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.JobRequest.Properties.Inputs.Name");
                        }
                    }
                }
                if (parameters.JobRequest.Properties.Outputs != null)
                {
                    foreach (Output outputsParameterItem in parameters.JobRequest.Properties.Outputs)
                    {
                        if (outputsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.JobRequest.Properties.Outputs.Name");
                        }
                        if (outputsParameterItem.OutputProperties == null)
                        {
                            throw new ArgumentNullException("parameters.JobRequest.Properties.Outputs.OutputProperties");
                        }
                        if (outputsParameterItem.OutputProperties.DataSource == null)
                        {
                            throw new ArgumentNullException("parameters.JobRequest.Properties.Outputs.OutputProperties.DataSource");
                        }
                    }
                }
                if (parameters.JobRequest.Properties.Sku == null)
                {
                    throw new ArgumentNullException("parameters.JobRequest.Properties.Sku");
                }
                if (parameters.JobRequest.Properties.Sku.Name == null)
                {
                    throw new ArgumentNullException("parameters.JobRequest.Properties.Sku.Name");
                }
                if (parameters.JobRequest.Properties.Transformation != null)
                {
                    if (parameters.JobRequest.Properties.Transformation.Name == null)
                    {
                        throw new ArgumentNullException("parameters.JobRequest.Properties.Transformation.Name");
                    }
                    if (parameters.JobRequest.Properties.Transformation.TransformationProperties == null)
                    {
                        throw new ArgumentNullException("parameters.JobRequest.Properties.Transformation.TransformationProperties");
                    }
                    if (parameters.JobRequest.Properties.Transformation.TransformationProperties.Query == null)
                    {
                        throw new ArgumentNullException("parameters.JobRequest.Properties.Transformation.TransformationProperties.Query");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("If-None-Match", parameters.IfNoneMatch);
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject jobCreateOrUpdateParametersValue = new JObject();
                requestDoc = jobCreateOrUpdateParametersValue;
                
                if (parameters.IfNoneMatch != null)
                {
                    jobCreateOrUpdateParametersValue["IfNoneMatch"] = JObject.Parse(parameters.IfNoneMatch);
                }
                
                if (parameters.JobRequest != null)
                {
                    jobCreateOrUpdateParametersValue["location"] = parameters.JobRequest.Location;
                    
                    if (parameters.JobRequest.Tags != null)
                    {
                        if (parameters.JobRequest.Tags is ILazyCollection == false || ((ILazyCollection)parameters.JobRequest.Tags).IsInitialized)
                        {
                            JObject tagsDictionary = new JObject();
                            foreach (KeyValuePair<string, string> pair in parameters.JobRequest.Tags)
                            {
                                string tagsKey = pair.Key;
                                string tagsValue = pair.Value;
                                tagsDictionary[tagsKey] = tagsValue;
                            }
                            jobCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                        }
                    }
                    
                    JObject propertiesValue = new JObject();
                    jobCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    JObject skuValue = new JObject();
                    propertiesValue["sku"] = skuValue;
                    
                    skuValue["name"] = parameters.JobRequest.Properties.Sku.Name;
                    
                    propertiesValue["eventsOutOfOrderPolicy"] = parameters.JobRequest.Properties.EventsOutOfOrderPolicy;
                    
                    propertiesValue["eventsOutOfOrderMaxDelayInMilliseconds"] = parameters.JobRequest.Properties.EventsOutOfOrderMaxDelayInMilliseconds;
                    
                    propertiesValue["outputStartMode"] = parameters.JobRequest.Properties.OutputStartMode.ToString();
                    
                    if (parameters.JobRequest.Properties.OutputStartTime != null)
                    {
                        propertiesValue["outputStartTime"] = parameters.JobRequest.Properties.OutputStartTime.Value;
                    }
                    
                    if (parameters.JobRequest.Properties.Inputs != null)
                    {
                        if (parameters.JobRequest.Properties.Inputs is ILazyCollection == false || ((ILazyCollection)parameters.JobRequest.Properties.Inputs).IsInitialized)
                        {
                            JArray inputsArray = new JArray();
                            foreach (Input inputsItem in parameters.JobRequest.Properties.Inputs)
                            {
                                JObject inputValue = new JObject();
                                inputsArray.Add(inputValue);
                                
                                inputValue["name"] = inputsItem.Name;
                                
                                JObject propertiesValue2 = new JObject();
                                inputValue["properties"] = propertiesValue2;
                                if (inputsItem.InputProperties is ReferenceInputProperties)
                                {
                                    propertiesValue2["type"] = "Reference";
                                    ReferenceInputProperties derived = ((ReferenceInputProperties)inputsItem.InputProperties);
                                    
                                    JObject datasourceValue = new JObject();
                                    propertiesValue2["datasource"] = datasourceValue;
                                    if (derived.DataSource is BlobReferenceInputDataSource)
                                    {
                                        datasourceValue["type"] = "Microsoft.Storage/Blob";
                                        BlobReferenceInputDataSource derived2 = ((BlobReferenceInputDataSource)derived.DataSource);
                                        
                                        JObject propertiesValue3 = new JObject();
                                        datasourceValue["properties"] = propertiesValue3;
                                        
                                        if (derived2.BlobReferenceInputDataSourceProperties.StorageAccounts != null)
                                        {
                                            if (derived2.BlobReferenceInputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived2.BlobReferenceInputDataSourceProperties.StorageAccounts).IsInitialized)
                                            {
                                                JArray storageAccountsArray = new JArray();
                                                foreach (StorageAccount storageAccountsItem in derived2.BlobReferenceInputDataSourceProperties.StorageAccounts)
                                                {
                                                    JObject storageAccountValue = new JObject();
                                                    storageAccountsArray.Add(storageAccountValue);
                                                    
                                                    if (storageAccountsItem.AccountName != null)
                                                    {
                                                        storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                                    }
                                                    
                                                    if (storageAccountsItem.AccountKey != null)
                                                    {
                                                        storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                                    }
                                                }
                                                propertiesValue3["storageAccounts"] = storageAccountsArray;
                                            }
                                        }
                                        
                                        propertiesValue3["container"] = derived2.BlobReferenceInputDataSourceProperties.Container;
                                        
                                        propertiesValue3["blobName"] = derived2.BlobReferenceInputDataSourceProperties.BlobName;
                                    }
                                    
                                    if (derived.Etag != null)
                                    {
                                        propertiesValue2["etag"] = derived.Etag;
                                    }
                                    
                                    JObject serializationValue = new JObject();
                                    propertiesValue2["serialization"] = serializationValue;
                                    if (derived.Serialization is CsvSerialization)
                                    {
                                        serializationValue["type"] = "Csv";
                                        CsvSerialization derived3 = ((CsvSerialization)derived.Serialization);
                                        
                                        JObject propertiesValue4 = new JObject();
                                        serializationValue["properties"] = propertiesValue4;
                                        
                                        propertiesValue4["fieldDelimiter"] = derived3.CsvSerializationProperties.FieldDelimiter;
                                        
                                        propertiesValue4["encoding"] = derived3.CsvSerializationProperties.Encoding;
                                    }
                                    if (derived.Serialization is JsonSerialization)
                                    {
                                        serializationValue["type"] = "Json";
                                        JsonSerialization derived4 = ((JsonSerialization)derived.Serialization);
                                        
                                        JObject propertiesValue5 = new JObject();
                                        serializationValue["properties"] = propertiesValue5;
                                        
                                        propertiesValue5["encoding"] = derived4.JsonSerializationProperties.Encoding;
                                    }
                                    if (derived.Serialization is AvroSerialization)
                                    {
                                        serializationValue["type"] = "Avro";
                                        AvroSerialization derived5 = ((AvroSerialization)derived.Serialization);
                                        
                                        serializationValue["properties"] = derived5.AvroSerializationProperties.ToString();
                                    }
                                }
                                if (inputsItem.InputProperties is StreamInputProperties)
                                {
                                    propertiesValue2["type"] = "Stream";
                                    StreamInputProperties derived6 = ((StreamInputProperties)inputsItem.InputProperties);
                                    
                                    JObject datasourceValue2 = new JObject();
                                    propertiesValue2["datasource"] = datasourceValue2;
                                    if (derived6.DataSource is BlobStreamInputDataSource)
                                    {
                                        datasourceValue2["type"] = "Microsoft.Storage/Blob";
                                        BlobStreamInputDataSource derived7 = ((BlobStreamInputDataSource)derived6.DataSource);
                                        
                                        JObject propertiesValue6 = new JObject();
                                        datasourceValue2["properties"] = propertiesValue6;
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.StorageAccounts != null)
                                        {
                                            if (derived7.BlobStreamInputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived7.BlobStreamInputDataSourceProperties.StorageAccounts).IsInitialized)
                                            {
                                                JArray storageAccountsArray2 = new JArray();
                                                foreach (StorageAccount storageAccountsItem2 in derived7.BlobStreamInputDataSourceProperties.StorageAccounts)
                                                {
                                                    JObject storageAccountValue2 = new JObject();
                                                    storageAccountsArray2.Add(storageAccountValue2);
                                                    
                                                    if (storageAccountsItem2.AccountName != null)
                                                    {
                                                        storageAccountValue2["accountName"] = storageAccountsItem2.AccountName;
                                                    }
                                                    
                                                    if (storageAccountsItem2.AccountKey != null)
                                                    {
                                                        storageAccountValue2["accountKey"] = storageAccountsItem2.AccountKey;
                                                    }
                                                }
                                                propertiesValue6["storageAccounts"] = storageAccountsArray2;
                                            }
                                        }
                                        
                                        propertiesValue6["container"] = derived7.BlobStreamInputDataSourceProperties.Container;
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.BlobSerializationBoundary != null)
                                        {
                                            propertiesValue6["blobSerializationBoundary"] = derived7.BlobStreamInputDataSourceProperties.BlobSerializationBoundary;
                                        }
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.PathPattern != null)
                                        {
                                            propertiesValue6["pathPattern"] = derived7.BlobStreamInputDataSourceProperties.PathPattern;
                                        }
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.DateFormat != null)
                                        {
                                            propertiesValue6["dateFormat"] = derived7.BlobStreamInputDataSourceProperties.DateFormat;
                                        }
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.TimeFormat != null)
                                        {
                                            propertiesValue6["timeFormat"] = derived7.BlobStreamInputDataSourceProperties.TimeFormat;
                                        }
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.SourcePartitionCount != null)
                                        {
                                            propertiesValue6["sourcePartitionCount"] = derived7.BlobStreamInputDataSourceProperties.SourcePartitionCount.Value;
                                        }
                                    }
                                    if (derived6.DataSource is EventHubStreamInputDataSource)
                                    {
                                        datasourceValue2["type"] = "Microsoft.ServiceBus/EventHub";
                                        EventHubStreamInputDataSource derived8 = ((EventHubStreamInputDataSource)derived6.DataSource);
                                        
                                        JObject propertiesValue7 = new JObject();
                                        datasourceValue2["properties"] = propertiesValue7;
                                        
                                        propertiesValue7["serviceBusNamespace"] = derived8.EventHubStreamInputDataSourceProperties.ServiceBusNamespace;
                                        
                                        propertiesValue7["sharedAccessPolicyName"] = derived8.EventHubStreamInputDataSourceProperties.SharedAccessPolicyName;
                                        
                                        propertiesValue7["sharedAccessPolicyKey"] = derived8.EventHubStreamInputDataSourceProperties.SharedAccessPolicyKey;
                                        
                                        propertiesValue7["eventHubName"] = derived8.EventHubStreamInputDataSourceProperties.EventHubName;
                                    }
                                    
                                    if (derived6.Etag != null)
                                    {
                                        propertiesValue2["etag"] = derived6.Etag;
                                    }
                                    
                                    JObject serializationValue2 = new JObject();
                                    propertiesValue2["serialization"] = serializationValue2;
                                    if (derived6.Serialization is CsvSerialization)
                                    {
                                        serializationValue2["type"] = "Csv";
                                        CsvSerialization derived9 = ((CsvSerialization)derived6.Serialization);
                                        
                                        JObject propertiesValue8 = new JObject();
                                        serializationValue2["properties"] = propertiesValue8;
                                        
                                        propertiesValue8["fieldDelimiter"] = derived9.CsvSerializationProperties.FieldDelimiter;
                                        
                                        propertiesValue8["encoding"] = derived9.CsvSerializationProperties.Encoding;
                                    }
                                    if (derived6.Serialization is JsonSerialization)
                                    {
                                        serializationValue2["type"] = "Json";
                                        JsonSerialization derived10 = ((JsonSerialization)derived6.Serialization);
                                        
                                        JObject propertiesValue9 = new JObject();
                                        serializationValue2["properties"] = propertiesValue9;
                                        
                                        propertiesValue9["encoding"] = derived10.JsonSerializationProperties.Encoding;
                                    }
                                    if (derived6.Serialization is AvroSerialization)
                                    {
                                        serializationValue2["type"] = "Avro";
                                        AvroSerialization derived11 = ((AvroSerialization)derived6.Serialization);
                                        
                                        serializationValue2["properties"] = derived11.AvroSerializationProperties.ToString();
                                    }
                                }
                            }
                            propertiesValue["inputs"] = inputsArray;
                        }
                    }
                    
                    if (parameters.JobRequest.Properties.Transformation != null)
                    {
                        JObject transformationValue = new JObject();
                        propertiesValue["transformation"] = transformationValue;
                        
                        transformationValue["name"] = parameters.JobRequest.Properties.Transformation.Name;
                        
                        JObject propertiesValue10 = new JObject();
                        transformationValue["properties"] = propertiesValue10;
                        
                        if (parameters.JobRequest.Properties.Transformation.TransformationProperties.Etag != null)
                        {
                            propertiesValue10["etag"] = parameters.JobRequest.Properties.Transformation.TransformationProperties.Etag;
                        }
                        
                        if (parameters.JobRequest.Properties.Transformation.TransformationProperties.StreamingUnits != null)
                        {
                            propertiesValue10["streamingUnits"] = parameters.JobRequest.Properties.Transformation.TransformationProperties.StreamingUnits.Value;
                        }
                        
                        propertiesValue10["query"] = parameters.JobRequest.Properties.Transformation.TransformationProperties.Query;
                    }
                    
                    if (parameters.JobRequest.Properties.Outputs != null)
                    {
                        if (parameters.JobRequest.Properties.Outputs is ILazyCollection == false || ((ILazyCollection)parameters.JobRequest.Properties.Outputs).IsInitialized)
                        {
                            JArray outputsArray = new JArray();
                            foreach (Output outputsItem in parameters.JobRequest.Properties.Outputs)
                            {
                                JObject outputValue = new JObject();
                                outputsArray.Add(outputValue);
                                
                                outputValue["name"] = outputsItem.Name;
                                
                                JObject propertiesValue11 = new JObject();
                                outputValue["properties"] = propertiesValue11;
                                
                                if (outputsItem.OutputProperties.Etag != null)
                                {
                                    propertiesValue11["etag"] = outputsItem.OutputProperties.Etag;
                                }
                                
                                JObject datasourceValue3 = new JObject();
                                propertiesValue11["datasource"] = datasourceValue3;
                                if (outputsItem.OutputProperties.DataSource is BlobOutputDataSource)
                                {
                                    datasourceValue3["type"] = "Microsoft.Storage/Blob";
                                    BlobOutputDataSource derived12 = ((BlobOutputDataSource)outputsItem.OutputProperties.DataSource);
                                    
                                    JObject propertiesValue12 = new JObject();
                                    datasourceValue3["properties"] = propertiesValue12;
                                    
                                    if (derived12.BlobOutputDataSourceProperties.StorageAccounts != null)
                                    {
                                        if (derived12.BlobOutputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived12.BlobOutputDataSourceProperties.StorageAccounts).IsInitialized)
                                        {
                                            JArray storageAccountsArray3 = new JArray();
                                            foreach (StorageAccount storageAccountsItem3 in derived12.BlobOutputDataSourceProperties.StorageAccounts)
                                            {
                                                JObject storageAccountValue3 = new JObject();
                                                storageAccountsArray3.Add(storageAccountValue3);
                                                
                                                if (storageAccountsItem3.AccountName != null)
                                                {
                                                    storageAccountValue3["accountName"] = storageAccountsItem3.AccountName;
                                                }
                                                
                                                if (storageAccountsItem3.AccountKey != null)
                                                {
                                                    storageAccountValue3["accountKey"] = storageAccountsItem3.AccountKey;
                                                }
                                            }
                                            propertiesValue12["storageAccounts"] = storageAccountsArray3;
                                        }
                                    }
                                    
                                    propertiesValue12["container"] = derived12.BlobOutputDataSourceProperties.Container;
                                    
                                    if (derived12.BlobOutputDataSourceProperties.BlobPathPrefix != null)
                                    {
                                        propertiesValue12["blobPathPrefix"] = derived12.BlobOutputDataSourceProperties.BlobPathPrefix;
                                    }
                                }
                                if (outputsItem.OutputProperties.DataSource is EventHubOutputDataSource)
                                {
                                    datasourceValue3["type"] = "Microsoft.ServiceBus/EventHub";
                                    EventHubOutputDataSource derived13 = ((EventHubOutputDataSource)outputsItem.OutputProperties.DataSource);
                                    
                                    JObject propertiesValue13 = new JObject();
                                    datasourceValue3["properties"] = propertiesValue13;
                                    
                                    propertiesValue13["serviceBusNamespace"] = derived13.EventHubOutputDataSourceProperties.ServiceBusNamespace;
                                    
                                    propertiesValue13["sharedAccessPolicyName"] = derived13.EventHubOutputDataSourceProperties.SharedAccessPolicyName;
                                    
                                    propertiesValue13["sharedAccessPolicyKey"] = derived13.EventHubOutputDataSourceProperties.SharedAccessPolicyKey;
                                    
                                    propertiesValue13["eventHubName"] = derived13.EventHubOutputDataSourceProperties.EventHubName;
                                }
                                if (outputsItem.OutputProperties.DataSource is SqlAzureOutputDataSource)
                                {
                                    datasourceValue3["type"] = "Microsoft.Sql/Server/Database";
                                    SqlAzureOutputDataSource derived14 = ((SqlAzureOutputDataSource)outputsItem.OutputProperties.DataSource);
                                    
                                    JObject propertiesValue14 = new JObject();
                                    datasourceValue3["properties"] = propertiesValue14;
                                    
                                    propertiesValue14["server"] = derived14.SqlAzureOutputDataSourceProperties.Server;
                                    
                                    propertiesValue14["database"] = derived14.SqlAzureOutputDataSourceProperties.Database;
                                    
                                    propertiesValue14["user"] = derived14.SqlAzureOutputDataSourceProperties.User;
                                    
                                    propertiesValue14["password"] = derived14.SqlAzureOutputDataSourceProperties.Password;
                                    
                                    propertiesValue14["table"] = derived14.SqlAzureOutputDataSourceProperties.Table;
                                }
                                
                                if (outputsItem.OutputProperties.Serialization != null)
                                {
                                    JObject serializationValue3 = new JObject();
                                    propertiesValue11["serialization"] = serializationValue3;
                                    if (outputsItem.OutputProperties.Serialization is CsvSerialization)
                                    {
                                        serializationValue3["type"] = "Csv";
                                        CsvSerialization derived15 = ((CsvSerialization)outputsItem.OutputProperties.Serialization);
                                        
                                        JObject propertiesValue15 = new JObject();
                                        serializationValue3["properties"] = propertiesValue15;
                                        
                                        propertiesValue15["fieldDelimiter"] = derived15.CsvSerializationProperties.FieldDelimiter;
                                        
                                        propertiesValue15["encoding"] = derived15.CsvSerializationProperties.Encoding;
                                    }
                                    if (outputsItem.OutputProperties.Serialization is JsonSerialization)
                                    {
                                        serializationValue3["type"] = "Json";
                                        JsonSerialization derived16 = ((JsonSerialization)outputsItem.OutputProperties.Serialization);
                                        
                                        JObject propertiesValue16 = new JObject();
                                        serializationValue3["properties"] = propertiesValue16;
                                        
                                        propertiesValue16["encoding"] = derived16.JsonSerializationProperties.Encoding;
                                    }
                                    if (outputsItem.OutputProperties.Serialization is AvroSerialization)
                                    {
                                        serializationValue3["type"] = "Avro";
                                        AvroSerialization derived17 = ((AvroSerialization)outputsItem.OutputProperties.Serialization);
                                        
                                        serializationValue3["properties"] = derived17.AvroSerializationProperties.ToString();
                                    }
                                }
                            }
                            propertiesValue["outputs"] = outputsArray;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new JobCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JobResponse jobResponseInstance = new JobResponse();
                        result.JobResponse = jobResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            jobResponseInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            jobResponseInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            jobResponseInstance.Type = typeInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            jobResponseInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                jobResponseInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken propertiesValue17 = responseDoc["properties"];
                        if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                        {
                            JobResponseProperties propertiesInstance = new JobResponseProperties();
                            jobResponseInstance.Properties = propertiesInstance;
                            
                            JToken skuValue2 = propertiesValue17["sku"];
                            if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                            {
                                Sku skuInstance = new Sku();
                                propertiesInstance.Sku = skuInstance;
                                
                                JToken nameValue2 = skuValue2["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    skuInstance.Name = nameInstance2;
                                }
                            }
                            
                            JToken jobIdValue = propertiesValue17["jobId"];
                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                            {
                                string jobIdInstance = ((string)jobIdValue);
                                propertiesInstance.JobId = jobIdInstance;
                            }
                            
                            JToken etagValue = propertiesValue17["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                propertiesInstance.Etag = etagInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue17["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken jobStateValue = propertiesValue17["jobState"];
                            if (jobStateValue != null && jobStateValue.Type != JTokenType.Null)
                            {
                                string jobStateInstance = ((string)jobStateValue);
                                propertiesInstance.JobState = jobStateInstance;
                            }
                            
                            JToken outputStartModeValue = propertiesValue17["outputStartMode"];
                            if (outputStartModeValue != null && outputStartModeValue.Type != JTokenType.Null)
                            {
                                string outputStartModeInstance = ((string)outputStartModeValue);
                                propertiesInstance.OutputStartMode = outputStartModeInstance;
                            }
                            
                            JToken outputStartTimeValue = propertiesValue17["outputStartTime"];
                            if (outputStartTimeValue != null && outputStartTimeValue.Type != JTokenType.Null)
                            {
                                DateTime outputStartTimeInstance = ((DateTime)outputStartTimeValue);
                                propertiesInstance.OutputStartTime = outputStartTimeInstance;
                            }
                            
                            JToken eventsOutOfOrderPolicyValue = propertiesValue17["eventsOutOfOrderPolicy"];
                            if (eventsOutOfOrderPolicyValue != null && eventsOutOfOrderPolicyValue.Type != JTokenType.Null)
                            {
                                string eventsOutOfOrderPolicyInstance = ((string)eventsOutOfOrderPolicyValue);
                                propertiesInstance.EventsOutOfOrderPolicy = eventsOutOfOrderPolicyInstance;
                            }
                            
                            JToken eventsOutOfOrderMaxDelayInMillisecondsValue = propertiesValue17["eventsOutOfOrderMaxDelayInMilliseconds"];
                            if (eventsOutOfOrderMaxDelayInMillisecondsValue != null && eventsOutOfOrderMaxDelayInMillisecondsValue.Type != JTokenType.Null)
                            {
                                int eventsOutOfOrderMaxDelayInMillisecondsInstance = ((int)eventsOutOfOrderMaxDelayInMillisecondsValue);
                                propertiesInstance.EventsOutOfOrderMaxDelayInMilliseconds = eventsOutOfOrderMaxDelayInMillisecondsInstance;
                            }
                            
                            JToken createdDateValue = propertiesValue17["CreatedDate"];
                            if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                            {
                                DateTime createdDateInstance = ((DateTime)createdDateValue);
                                propertiesInstance.CreatedDate = createdDateInstance;
                            }
                            
                            JToken inputsArray2 = propertiesValue17["inputs"];
                            if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken inputsValue in ((JArray)inputsArray2))
                                {
                                    InputResponse inputResponseInstance = new InputResponse();
                                    propertiesInstance.InputsInResponse.Add(inputResponseInstance);
                                    
                                    JToken idValue2 = inputsValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        inputResponseInstance.Id = idInstance2;
                                    }
                                    
                                    JToken typeValue2 = inputsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        inputResponseInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken nameValue3 = inputsValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        inputResponseInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken propertiesValue18 = inputsValue["properties"];
                                    if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue18["type"]);
                                        if (typeName == "Reference")
                                        {
                                            ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                            
                                            JToken datasourceValue4 = propertiesValue18["datasource"];
                                            if (datasourceValue4 != null && datasourceValue4.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)datasourceValue4["type"]);
                                                if (typeName2 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                                    
                                                    JToken propertiesValue19 = datasourceValue4["properties"];
                                                    if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                                    {
                                                        BlobReferenceInputDataSourceProperties propertiesInstance2 = new BlobReferenceInputDataSourceProperties();
                                                        blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance2;
                                                        
                                                        JToken storageAccountsArray4 = propertiesValue19["storageAccounts"];
                                                        if (storageAccountsArray4 != null && storageAccountsArray4.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray4))
                                                            {
                                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                                propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                                
                                                                JToken accountNameValue = storageAccountsValue["accountName"];
                                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance = ((string)accountNameValue);
                                                                    storageAccountInstance.AccountName = accountNameInstance;
                                                                }
                                                                
                                                                JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                                if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance = ((string)accountKeyValue);
                                                                    storageAccountInstance.AccountKey = accountKeyInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue = propertiesValue19["container"];
                                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance = ((string)containerValue);
                                                            propertiesInstance2.Container = containerInstance;
                                                        }
                                                        
                                                        JToken blobNameValue = propertiesValue19["blobName"];
                                                        if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                                        {
                                                            string blobNameInstance = ((string)blobNameValue);
                                                            propertiesInstance2.BlobName = blobNameInstance;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue2 = propertiesValue18["etag"];
                                            if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                            {
                                                string etagInstance2 = ((string)etagValue2);
                                                referenceInputPropertiesInstance.Etag = etagInstance2;
                                            }
                                            
                                            JToken serializationValue4 = propertiesValue18["serialization"];
                                            if (serializationValue4 != null && serializationValue4.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)serializationValue4["type"]);
                                                if (typeName3 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance = new CsvSerialization();
                                                    
                                                    JToken propertiesValue20 = serializationValue4["properties"];
                                                    if (propertiesValue20 != null && propertiesValue20.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance3 = new CsvSerializationProperties();
                                                        csvSerializationInstance.CsvSerializationProperties = propertiesInstance3;
                                                        
                                                        JToken fieldDelimiterValue = propertiesValue20["fieldDelimiter"];
                                                        if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                            propertiesInstance3.FieldDelimiter = fieldDelimiterInstance;
                                                        }
                                                        
                                                        JToken encodingValue = propertiesValue20["encoding"];
                                                        if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance = ((string)encodingValue);
                                                            propertiesInstance3.Encoding = encodingInstance;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                                }
                                                if (typeName3 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                                    
                                                    JToken propertiesValue21 = serializationValue4["properties"];
                                                    if (propertiesValue21 != null && propertiesValue21.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance4 = new JsonSerializationProperties();
                                                        jsonSerializationInstance.JsonSerializationProperties = propertiesInstance4;
                                                        
                                                        JToken encodingValue2 = propertiesValue21["encoding"];
                                                        if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance2 = ((string)encodingValue2);
                                                            propertiesInstance4.Encoding = encodingInstance2;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                                }
                                                if (typeName3 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance = new AvroSerialization();
                                                    
                                                    JToken propertiesValue22 = serializationValue4["properties"];
                                                    if (propertiesValue22 != null && propertiesValue22.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance5 = new AvroSerializationProperties();
                                                        avroSerializationInstance.AvroSerializationProperties = propertiesInstance5;
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                                }
                                            }
                                            inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                                        }
                                        if (typeName == "Stream")
                                        {
                                            StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                            
                                            JToken datasourceValue5 = propertiesValue18["datasource"];
                                            if (datasourceValue5 != null && datasourceValue5.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)datasourceValue5["type"]);
                                                if (typeName4 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                                    
                                                    JToken propertiesValue23 = datasourceValue5["properties"];
                                                    if (propertiesValue23 != null && propertiesValue23.Type != JTokenType.Null)
                                                    {
                                                        BlobStreamInputDataSourceProperties propertiesInstance6 = new BlobStreamInputDataSourceProperties();
                                                        blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance6;
                                                        
                                                        JToken storageAccountsArray5 = propertiesValue23["storageAccounts"];
                                                        if (storageAccountsArray5 != null && storageAccountsArray5.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray5))
                                                            {
                                                                StorageAccount storageAccountInstance2 = new StorageAccount();
                                                                propertiesInstance6.StorageAccounts.Add(storageAccountInstance2);
                                                                
                                                                JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                                if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance2 = ((string)accountNameValue2);
                                                                    storageAccountInstance2.AccountName = accountNameInstance2;
                                                                }
                                                                
                                                                JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                                if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance2 = ((string)accountKeyValue2);
                                                                    storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue2 = propertiesValue23["container"];
                                                        if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance2 = ((string)containerValue2);
                                                            propertiesInstance6.Container = containerInstance2;
                                                        }
                                                        
                                                        JToken blobSerializationBoundaryValue = propertiesValue23["blobSerializationBoundary"];
                                                        if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                                        {
                                                            string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                            propertiesInstance6.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                                        }
                                                        
                                                        JToken pathPatternValue = propertiesValue23["pathPattern"];
                                                        if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                        {
                                                            string pathPatternInstance = ((string)pathPatternValue);
                                                            propertiesInstance6.PathPattern = pathPatternInstance;
                                                        }
                                                        
                                                        JToken dateFormatValue = propertiesValue23["dateFormat"];
                                                        if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string dateFormatInstance = ((string)dateFormatValue);
                                                            propertiesInstance6.DateFormat = dateFormatInstance;
                                                        }
                                                        
                                                        JToken timeFormatValue = propertiesValue23["timeFormat"];
                                                        if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string timeFormatInstance = ((string)timeFormatValue);
                                                            propertiesInstance6.TimeFormat = timeFormatInstance;
                                                        }
                                                        
                                                        JToken sourcePartitionCountValue = propertiesValue23["sourcePartitionCount"];
                                                        if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                            propertiesInstance6.SourcePartitionCount = sourcePartitionCountInstance;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                                }
                                                if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                                {
                                                    EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                                    
                                                    JToken propertiesValue24 = datasourceValue5["properties"];
                                                    if (propertiesValue24 != null && propertiesValue24.Type != JTokenType.Null)
                                                    {
                                                        EventHubStreamInputDataSourceProperties propertiesInstance7 = new EventHubStreamInputDataSourceProperties();
                                                        eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance7;
                                                        
                                                        JToken serviceBusNamespaceValue = propertiesValue24["serviceBusNamespace"];
                                                        if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                        {
                                                            string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                            propertiesInstance7.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyNameValue = propertiesValue24["sharedAccessPolicyName"];
                                                        if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                            propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyKeyValue = propertiesValue24["sharedAccessPolicyKey"];
                                                        if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                            propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                        }
                                                        
                                                        JToken eventHubNameValue = propertiesValue24["eventHubName"];
                                                        if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                        {
                                                            string eventHubNameInstance = ((string)eventHubNameValue);
                                                            propertiesInstance7.EventHubName = eventHubNameInstance;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue3 = propertiesValue18["etag"];
                                            if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                            {
                                                string etagInstance3 = ((string)etagValue3);
                                                streamInputPropertiesInstance.Etag = etagInstance3;
                                            }
                                            
                                            JToken serializationValue5 = propertiesValue18["serialization"];
                                            if (serializationValue5 != null && serializationValue5.Type != JTokenType.Null)
                                            {
                                                string typeName5 = ((string)serializationValue5["type"]);
                                                if (typeName5 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                                    
                                                    JToken propertiesValue25 = serializationValue5["properties"];
                                                    if (propertiesValue25 != null && propertiesValue25.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                        csvSerializationInstance2.CsvSerializationProperties = propertiesInstance8;
                                                        
                                                        JToken fieldDelimiterValue2 = propertiesValue25["fieldDelimiter"];
                                                        if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                            propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                        }
                                                        
                                                        JToken encodingValue3 = propertiesValue25["encoding"];
                                                        if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance3 = ((string)encodingValue3);
                                                            propertiesInstance8.Encoding = encodingInstance3;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                                }
                                                if (typeName5 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                                    
                                                    JToken propertiesValue26 = serializationValue5["properties"];
                                                    if (propertiesValue26 != null && propertiesValue26.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                        jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance9;
                                                        
                                                        JToken encodingValue4 = propertiesValue26["encoding"];
                                                        if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance4 = ((string)encodingValue4);
                                                            propertiesInstance9.Encoding = encodingInstance4;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                                }
                                                if (typeName5 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                                    
                                                    JToken propertiesValue27 = serializationValue5["properties"];
                                                    if (propertiesValue27 != null && propertiesValue27.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                        avroSerializationInstance2.AvroSerializationProperties = propertiesInstance10;
                                                    }
                                                    streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                                }
                                            }
                                            inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken transformationValue2 = propertiesValue17["transformation"];
                            if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                            {
                                Transformation transformationInstance = new Transformation();
                                propertiesInstance.Transformation = transformationInstance;
                                
                                JToken nameValue4 = transformationValue2["name"];
                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                {
                                    string nameInstance4 = ((string)nameValue4);
                                    transformationInstance.Name = nameInstance4;
                                }
                                
                                JToken propertiesValue28 = transformationValue2["properties"];
                                if (propertiesValue28 != null && propertiesValue28.Type != JTokenType.Null)
                                {
                                    TransformationProperties propertiesInstance11 = new TransformationProperties();
                                    transformationInstance.TransformationProperties = propertiesInstance11;
                                    
                                    JToken etagValue4 = propertiesValue28["etag"];
                                    if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                    {
                                        string etagInstance4 = ((string)etagValue4);
                                        propertiesInstance11.Etag = etagInstance4;
                                    }
                                    
                                    JToken streamingUnitsValue = propertiesValue28["streamingUnits"];
                                    if (streamingUnitsValue != null && streamingUnitsValue.Type != JTokenType.Null)
                                    {
                                        int streamingUnitsInstance = ((int)streamingUnitsValue);
                                        propertiesInstance11.StreamingUnits = streamingUnitsInstance;
                                    }
                                    
                                    JToken queryValue = propertiesValue28["query"];
                                    if (queryValue != null && queryValue.Type != JTokenType.Null)
                                    {
                                        string queryInstance = ((string)queryValue);
                                        propertiesInstance11.Query = queryInstance;
                                    }
                                }
                            }
                            
                            JToken outputsArray2 = propertiesValue17["outputs"];
                            if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken outputsValue in ((JArray)outputsArray2))
                                {
                                    OutputResponse outputResponseInstance = new OutputResponse();
                                    propertiesInstance.OutputsInResponse.Add(outputResponseInstance);
                                    
                                    JToken idValue3 = outputsValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        outputResponseInstance.Id = idInstance3;
                                    }
                                    
                                    JToken typeValue3 = outputsValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        outputResponseInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken nameValue5 = outputsValue["name"];
                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                    {
                                        string nameInstance5 = ((string)nameValue5);
                                        outputResponseInstance.Name = nameInstance5;
                                    }
                                    
                                    JToken propertiesValue29 = outputsValue["properties"];
                                    if (propertiesValue29 != null && propertiesValue29.Type != JTokenType.Null)
                                    {
                                        OutputProperties propertiesInstance12 = new OutputProperties();
                                        outputResponseInstance.OutputProperties = propertiesInstance12;
                                        
                                        JToken etagValue5 = propertiesValue29["etag"];
                                        if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                        {
                                            string etagInstance5 = ((string)etagValue5);
                                            propertiesInstance12.Etag = etagInstance5;
                                        }
                                        
                                        JToken datasourceValue6 = propertiesValue29["datasource"];
                                        if (datasourceValue6 != null && datasourceValue6.Type != JTokenType.Null)
                                        {
                                            string typeName6 = ((string)datasourceValue6["type"]);
                                            if (typeName6 == "Microsoft.Storage/Blob")
                                            {
                                                BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                                
                                                JToken propertiesValue30 = datasourceValue6["properties"];
                                                if (propertiesValue30 != null && propertiesValue30.Type != JTokenType.Null)
                                                {
                                                    BlobOutputDataSourceProperties propertiesInstance13 = new BlobOutputDataSourceProperties();
                                                    blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance13;
                                                    
                                                    JToken storageAccountsArray6 = propertiesValue30["storageAccounts"];
                                                    if (storageAccountsArray6 != null && storageAccountsArray6.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageAccountsValue3 in ((JArray)storageAccountsArray6))
                                                        {
                                                            StorageAccount storageAccountInstance3 = new StorageAccount();
                                                            propertiesInstance13.StorageAccounts.Add(storageAccountInstance3);
                                                            
                                                            JToken accountNameValue3 = storageAccountsValue3["accountName"];
                                                            if (accountNameValue3 != null && accountNameValue3.Type != JTokenType.Null)
                                                            {
                                                                string accountNameInstance3 = ((string)accountNameValue3);
                                                                storageAccountInstance3.AccountName = accountNameInstance3;
                                                            }
                                                            
                                                            JToken accountKeyValue3 = storageAccountsValue3["accountKey"];
                                                            if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                                            {
                                                                string accountKeyInstance3 = ((string)accountKeyValue3);
                                                                storageAccountInstance3.AccountKey = accountKeyInstance3;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken containerValue3 = propertiesValue30["container"];
                                                    if (containerValue3 != null && containerValue3.Type != JTokenType.Null)
                                                    {
                                                        string containerInstance3 = ((string)containerValue3);
                                                        propertiesInstance13.Container = containerInstance3;
                                                    }
                                                    
                                                    JToken blobPathPrefixValue = propertiesValue30["blobPathPrefix"];
                                                    if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                                        propertiesInstance13.BlobPathPrefix = blobPathPrefixInstance;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = blobOutputDataSourceInstance;
                                            }
                                            if (typeName6 == "Microsoft.ServiceBus/EventHub")
                                            {
                                                EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                                
                                                JToken propertiesValue31 = datasourceValue6["properties"];
                                                if (propertiesValue31 != null && propertiesValue31.Type != JTokenType.Null)
                                                {
                                                    EventHubOutputDataSourceProperties propertiesInstance14 = new EventHubOutputDataSourceProperties();
                                                    eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance14;
                                                    
                                                    JToken serviceBusNamespaceValue2 = propertiesValue31["serviceBusNamespace"];
                                                    if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                                    {
                                                        string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                        propertiesInstance14.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyNameValue2 = propertiesValue31["sharedAccessPolicyName"];
                                                    if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                        propertiesInstance14.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyKeyValue2 = propertiesValue31["sharedAccessPolicyKey"];
                                                    if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                        propertiesInstance14.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                    }
                                                    
                                                    JToken eventHubNameValue2 = propertiesValue31["eventHubName"];
                                                    if (eventHubNameValue2 != null && eventHubNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string eventHubNameInstance2 = ((string)eventHubNameValue2);
                                                        propertiesInstance14.EventHubName = eventHubNameInstance2;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = eventHubOutputDataSourceInstance;
                                            }
                                            if (typeName6 == "Microsoft.Sql/Server/Database")
                                            {
                                                SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                                
                                                JToken propertiesValue32 = datasourceValue6["properties"];
                                                if (propertiesValue32 != null && propertiesValue32.Type != JTokenType.Null)
                                                {
                                                    SqlAzureOutputDataSourceProperties propertiesInstance15 = new SqlAzureOutputDataSourceProperties();
                                                    sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance15;
                                                    
                                                    JToken serverValue = propertiesValue32["server"];
                                                    if (serverValue != null && serverValue.Type != JTokenType.Null)
                                                    {
                                                        string serverInstance = ((string)serverValue);
                                                        propertiesInstance15.Server = serverInstance;
                                                    }
                                                    
                                                    JToken databaseValue = propertiesValue32["database"];
                                                    if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                                    {
                                                        string databaseInstance = ((string)databaseValue);
                                                        propertiesInstance15.Database = databaseInstance;
                                                    }
                                                    
                                                    JToken userValue = propertiesValue32["user"];
                                                    if (userValue != null && userValue.Type != JTokenType.Null)
                                                    {
                                                        string userInstance = ((string)userValue);
                                                        propertiesInstance15.User = userInstance;
                                                    }
                                                    
                                                    JToken passwordValue = propertiesValue32["password"];
                                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                    {
                                                        string passwordInstance = ((string)passwordValue);
                                                        propertiesInstance15.Password = passwordInstance;
                                                    }
                                                    
                                                    JToken tableValue = propertiesValue32["table"];
                                                    if (tableValue != null && tableValue.Type != JTokenType.Null)
                                                    {
                                                        string tableInstance = ((string)tableValue);
                                                        propertiesInstance15.Table = tableInstance;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = sqlAzureOutputDataSourceInstance;
                                            }
                                        }
                                        
                                        JToken serializationValue6 = propertiesValue29["serialization"];
                                        if (serializationValue6 != null && serializationValue6.Type != JTokenType.Null)
                                        {
                                            string typeName7 = ((string)serializationValue6["type"]);
                                            if (typeName7 == "Csv")
                                            {
                                                CsvSerialization csvSerializationInstance3 = new CsvSerialization();
                                                
                                                JToken propertiesValue33 = serializationValue6["properties"];
                                                if (propertiesValue33 != null && propertiesValue33.Type != JTokenType.Null)
                                                {
                                                    CsvSerializationProperties propertiesInstance16 = new CsvSerializationProperties();
                                                    csvSerializationInstance3.CsvSerializationProperties = propertiesInstance16;
                                                    
                                                    JToken fieldDelimiterValue3 = propertiesValue33["fieldDelimiter"];
                                                    if (fieldDelimiterValue3 != null && fieldDelimiterValue3.Type != JTokenType.Null)
                                                    {
                                                        string fieldDelimiterInstance3 = ((string)fieldDelimiterValue3);
                                                        propertiesInstance16.FieldDelimiter = fieldDelimiterInstance3;
                                                    }
                                                    
                                                    JToken encodingValue5 = propertiesValue33["encoding"];
                                                    if (encodingValue5 != null && encodingValue5.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance5 = ((string)encodingValue5);
                                                        propertiesInstance16.Encoding = encodingInstance5;
                                                    }
                                                }
                                                propertiesInstance12.Serialization = csvSerializationInstance3;
                                            }
                                            if (typeName7 == "Json")
                                            {
                                                JsonSerialization jsonSerializationInstance3 = new JsonSerialization();
                                                
                                                JToken propertiesValue34 = serializationValue6["properties"];
                                                if (propertiesValue34 != null && propertiesValue34.Type != JTokenType.Null)
                                                {
                                                    JsonSerializationProperties propertiesInstance17 = new JsonSerializationProperties();
                                                    jsonSerializationInstance3.JsonSerializationProperties = propertiesInstance17;
                                                    
                                                    JToken encodingValue6 = propertiesValue34["encoding"];
                                                    if (encodingValue6 != null && encodingValue6.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance6 = ((string)encodingValue6);
                                                        propertiesInstance17.Encoding = encodingInstance6;
                                                    }
                                                }
                                                propertiesInstance12.Serialization = jsonSerializationInstance3;
                                            }
                                            if (typeName7 == "Avro")
                                            {
                                                AvroSerialization avroSerializationInstance3 = new AvroSerialization();
                                                
                                                JToken propertiesValue35 = serializationValue6["properties"];
                                                if (propertiesValue35 != null && propertiesValue35.Type != JTokenType.Null)
                                                {
                                                    AvroSerializationProperties propertiesInstance18 = new AvroSerializationProperties();
                                                    avroSerializationInstance3.AvroSerializationProperties = propertiesInstance18;
                                                }
                                                propertiesInstance12.Serialization = avroSerializationInstance3;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a stream
        /// analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the create stream analytics job operation.
        /// </returns>
        public async Task<JobCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string jobName, JobCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("If-None-Match", parameters.IfNoneMatch);
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new JobCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JobResponse jobResponseInstance = new JobResponse();
                        result.JobResponse = jobResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            jobResponseInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            jobResponseInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            jobResponseInstance.Type = typeInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            jobResponseInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                jobResponseInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            JobResponseProperties propertiesInstance = new JobResponseProperties();
                            jobResponseInstance.Properties = propertiesInstance;
                            
                            JToken skuValue = propertiesValue["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                Sku skuInstance = new Sku();
                                propertiesInstance.Sku = skuInstance;
                                
                                JToken nameValue2 = skuValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    skuInstance.Name = nameInstance2;
                                }
                            }
                            
                            JToken jobIdValue = propertiesValue["jobId"];
                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                            {
                                string jobIdInstance = ((string)jobIdValue);
                                propertiesInstance.JobId = jobIdInstance;
                            }
                            
                            JToken etagValue = propertiesValue["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                propertiesInstance.Etag = etagInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken jobStateValue = propertiesValue["jobState"];
                            if (jobStateValue != null && jobStateValue.Type != JTokenType.Null)
                            {
                                string jobStateInstance = ((string)jobStateValue);
                                propertiesInstance.JobState = jobStateInstance;
                            }
                            
                            JToken outputStartModeValue = propertiesValue["outputStartMode"];
                            if (outputStartModeValue != null && outputStartModeValue.Type != JTokenType.Null)
                            {
                                string outputStartModeInstance = ((string)outputStartModeValue);
                                propertiesInstance.OutputStartMode = outputStartModeInstance;
                            }
                            
                            JToken outputStartTimeValue = propertiesValue["outputStartTime"];
                            if (outputStartTimeValue != null && outputStartTimeValue.Type != JTokenType.Null)
                            {
                                DateTime outputStartTimeInstance = ((DateTime)outputStartTimeValue);
                                propertiesInstance.OutputStartTime = outputStartTimeInstance;
                            }
                            
                            JToken eventsOutOfOrderPolicyValue = propertiesValue["eventsOutOfOrderPolicy"];
                            if (eventsOutOfOrderPolicyValue != null && eventsOutOfOrderPolicyValue.Type != JTokenType.Null)
                            {
                                string eventsOutOfOrderPolicyInstance = ((string)eventsOutOfOrderPolicyValue);
                                propertiesInstance.EventsOutOfOrderPolicy = eventsOutOfOrderPolicyInstance;
                            }
                            
                            JToken eventsOutOfOrderMaxDelayInMillisecondsValue = propertiesValue["eventsOutOfOrderMaxDelayInMilliseconds"];
                            if (eventsOutOfOrderMaxDelayInMillisecondsValue != null && eventsOutOfOrderMaxDelayInMillisecondsValue.Type != JTokenType.Null)
                            {
                                int eventsOutOfOrderMaxDelayInMillisecondsInstance = ((int)eventsOutOfOrderMaxDelayInMillisecondsValue);
                                propertiesInstance.EventsOutOfOrderMaxDelayInMilliseconds = eventsOutOfOrderMaxDelayInMillisecondsInstance;
                            }
                            
                            JToken createdDateValue = propertiesValue["CreatedDate"];
                            if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                            {
                                DateTime createdDateInstance = ((DateTime)createdDateValue);
                                propertiesInstance.CreatedDate = createdDateInstance;
                            }
                            
                            JToken inputsArray = propertiesValue["inputs"];
                            if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken inputsValue in ((JArray)inputsArray))
                                {
                                    InputResponse inputResponseInstance = new InputResponse();
                                    propertiesInstance.InputsInResponse.Add(inputResponseInstance);
                                    
                                    JToken idValue2 = inputsValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        inputResponseInstance.Id = idInstance2;
                                    }
                                    
                                    JToken typeValue2 = inputsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        inputResponseInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken nameValue3 = inputsValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        inputResponseInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken propertiesValue2 = inputsValue["properties"];
                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue2["type"]);
                                        if (typeName == "Reference")
                                        {
                                            ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                            
                                            JToken datasourceValue = propertiesValue2["datasource"];
                                            if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)datasourceValue["type"]);
                                                if (typeName2 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                                    
                                                    JToken propertiesValue3 = datasourceValue["properties"];
                                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                    {
                                                        BlobReferenceInputDataSourceProperties propertiesInstance2 = new BlobReferenceInputDataSourceProperties();
                                                        blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance2;
                                                        
                                                        JToken storageAccountsArray = propertiesValue3["storageAccounts"];
                                                        if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                            {
                                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                                propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                                
                                                                JToken accountNameValue = storageAccountsValue["accountName"];
                                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance = ((string)accountNameValue);
                                                                    storageAccountInstance.AccountName = accountNameInstance;
                                                                }
                                                                
                                                                JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                                if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance = ((string)accountKeyValue);
                                                                    storageAccountInstance.AccountKey = accountKeyInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue = propertiesValue3["container"];
                                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance = ((string)containerValue);
                                                            propertiesInstance2.Container = containerInstance;
                                                        }
                                                        
                                                        JToken blobNameValue = propertiesValue3["blobName"];
                                                        if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                                        {
                                                            string blobNameInstance = ((string)blobNameValue);
                                                            propertiesInstance2.BlobName = blobNameInstance;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue2 = propertiesValue2["etag"];
                                            if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                            {
                                                string etagInstance2 = ((string)etagValue2);
                                                referenceInputPropertiesInstance.Etag = etagInstance2;
                                            }
                                            
                                            JToken serializationValue = propertiesValue2["serialization"];
                                            if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)serializationValue["type"]);
                                                if (typeName3 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance = new CsvSerialization();
                                                    
                                                    JToken propertiesValue4 = serializationValue["properties"];
                                                    if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance3 = new CsvSerializationProperties();
                                                        csvSerializationInstance.CsvSerializationProperties = propertiesInstance3;
                                                        
                                                        JToken fieldDelimiterValue = propertiesValue4["fieldDelimiter"];
                                                        if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                            propertiesInstance3.FieldDelimiter = fieldDelimiterInstance;
                                                        }
                                                        
                                                        JToken encodingValue = propertiesValue4["encoding"];
                                                        if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance = ((string)encodingValue);
                                                            propertiesInstance3.Encoding = encodingInstance;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                                }
                                                if (typeName3 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                                    
                                                    JToken propertiesValue5 = serializationValue["properties"];
                                                    if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance4 = new JsonSerializationProperties();
                                                        jsonSerializationInstance.JsonSerializationProperties = propertiesInstance4;
                                                        
                                                        JToken encodingValue2 = propertiesValue5["encoding"];
                                                        if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance2 = ((string)encodingValue2);
                                                            propertiesInstance4.Encoding = encodingInstance2;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                                }
                                                if (typeName3 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance = new AvroSerialization();
                                                    
                                                    JToken propertiesValue6 = serializationValue["properties"];
                                                    if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance5 = new AvroSerializationProperties();
                                                        avroSerializationInstance.AvroSerializationProperties = propertiesInstance5;
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                                }
                                            }
                                            inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                                        }
                                        if (typeName == "Stream")
                                        {
                                            StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                            
                                            JToken datasourceValue2 = propertiesValue2["datasource"];
                                            if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)datasourceValue2["type"]);
                                                if (typeName4 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                                    
                                                    JToken propertiesValue7 = datasourceValue2["properties"];
                                                    if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                    {
                                                        BlobStreamInputDataSourceProperties propertiesInstance6 = new BlobStreamInputDataSourceProperties();
                                                        blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance6;
                                                        
                                                        JToken storageAccountsArray2 = propertiesValue7["storageAccounts"];
                                                        if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                            {
                                                                StorageAccount storageAccountInstance2 = new StorageAccount();
                                                                propertiesInstance6.StorageAccounts.Add(storageAccountInstance2);
                                                                
                                                                JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                                if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance2 = ((string)accountNameValue2);
                                                                    storageAccountInstance2.AccountName = accountNameInstance2;
                                                                }
                                                                
                                                                JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                                if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance2 = ((string)accountKeyValue2);
                                                                    storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue2 = propertiesValue7["container"];
                                                        if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance2 = ((string)containerValue2);
                                                            propertiesInstance6.Container = containerInstance2;
                                                        }
                                                        
                                                        JToken blobSerializationBoundaryValue = propertiesValue7["blobSerializationBoundary"];
                                                        if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                                        {
                                                            string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                            propertiesInstance6.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                                        }
                                                        
                                                        JToken pathPatternValue = propertiesValue7["pathPattern"];
                                                        if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                        {
                                                            string pathPatternInstance = ((string)pathPatternValue);
                                                            propertiesInstance6.PathPattern = pathPatternInstance;
                                                        }
                                                        
                                                        JToken dateFormatValue = propertiesValue7["dateFormat"];
                                                        if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string dateFormatInstance = ((string)dateFormatValue);
                                                            propertiesInstance6.DateFormat = dateFormatInstance;
                                                        }
                                                        
                                                        JToken timeFormatValue = propertiesValue7["timeFormat"];
                                                        if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string timeFormatInstance = ((string)timeFormatValue);
                                                            propertiesInstance6.TimeFormat = timeFormatInstance;
                                                        }
                                                        
                                                        JToken sourcePartitionCountValue = propertiesValue7["sourcePartitionCount"];
                                                        if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                            propertiesInstance6.SourcePartitionCount = sourcePartitionCountInstance;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                                }
                                                if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                                {
                                                    EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                                    
                                                    JToken propertiesValue8 = datasourceValue2["properties"];
                                                    if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                    {
                                                        EventHubStreamInputDataSourceProperties propertiesInstance7 = new EventHubStreamInputDataSourceProperties();
                                                        eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance7;
                                                        
                                                        JToken serviceBusNamespaceValue = propertiesValue8["serviceBusNamespace"];
                                                        if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                        {
                                                            string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                            propertiesInstance7.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyNameValue = propertiesValue8["sharedAccessPolicyName"];
                                                        if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                            propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyKeyValue = propertiesValue8["sharedAccessPolicyKey"];
                                                        if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                            propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                        }
                                                        
                                                        JToken eventHubNameValue = propertiesValue8["eventHubName"];
                                                        if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                        {
                                                            string eventHubNameInstance = ((string)eventHubNameValue);
                                                            propertiesInstance7.EventHubName = eventHubNameInstance;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue3 = propertiesValue2["etag"];
                                            if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                            {
                                                string etagInstance3 = ((string)etagValue3);
                                                streamInputPropertiesInstance.Etag = etagInstance3;
                                            }
                                            
                                            JToken serializationValue2 = propertiesValue2["serialization"];
                                            if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                            {
                                                string typeName5 = ((string)serializationValue2["type"]);
                                                if (typeName5 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                                    
                                                    JToken propertiesValue9 = serializationValue2["properties"];
                                                    if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                        csvSerializationInstance2.CsvSerializationProperties = propertiesInstance8;
                                                        
                                                        JToken fieldDelimiterValue2 = propertiesValue9["fieldDelimiter"];
                                                        if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                            propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                        }
                                                        
                                                        JToken encodingValue3 = propertiesValue9["encoding"];
                                                        if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance3 = ((string)encodingValue3);
                                                            propertiesInstance8.Encoding = encodingInstance3;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                                }
                                                if (typeName5 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                                    
                                                    JToken propertiesValue10 = serializationValue2["properties"];
                                                    if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                        jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance9;
                                                        
                                                        JToken encodingValue4 = propertiesValue10["encoding"];
                                                        if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance4 = ((string)encodingValue4);
                                                            propertiesInstance9.Encoding = encodingInstance4;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                                }
                                                if (typeName5 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                                    
                                                    JToken propertiesValue11 = serializationValue2["properties"];
                                                    if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                        avroSerializationInstance2.AvroSerializationProperties = propertiesInstance10;
                                                    }
                                                    streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                                }
                                            }
                                            inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken transformationValue = propertiesValue["transformation"];
                            if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                            {
                                Transformation transformationInstance = new Transformation();
                                propertiesInstance.Transformation = transformationInstance;
                                
                                JToken nameValue4 = transformationValue["name"];
                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                {
                                    string nameInstance4 = ((string)nameValue4);
                                    transformationInstance.Name = nameInstance4;
                                }
                                
                                JToken propertiesValue12 = transformationValue["properties"];
                                if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                {
                                    TransformationProperties propertiesInstance11 = new TransformationProperties();
                                    transformationInstance.TransformationProperties = propertiesInstance11;
                                    
                                    JToken etagValue4 = propertiesValue12["etag"];
                                    if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                    {
                                        string etagInstance4 = ((string)etagValue4);
                                        propertiesInstance11.Etag = etagInstance4;
                                    }
                                    
                                    JToken streamingUnitsValue = propertiesValue12["streamingUnits"];
                                    if (streamingUnitsValue != null && streamingUnitsValue.Type != JTokenType.Null)
                                    {
                                        int streamingUnitsInstance = ((int)streamingUnitsValue);
                                        propertiesInstance11.StreamingUnits = streamingUnitsInstance;
                                    }
                                    
                                    JToken queryValue = propertiesValue12["query"];
                                    if (queryValue != null && queryValue.Type != JTokenType.Null)
                                    {
                                        string queryInstance = ((string)queryValue);
                                        propertiesInstance11.Query = queryInstance;
                                    }
                                }
                            }
                            
                            JToken outputsArray = propertiesValue["outputs"];
                            if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken outputsValue in ((JArray)outputsArray))
                                {
                                    OutputResponse outputResponseInstance = new OutputResponse();
                                    propertiesInstance.OutputsInResponse.Add(outputResponseInstance);
                                    
                                    JToken idValue3 = outputsValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        outputResponseInstance.Id = idInstance3;
                                    }
                                    
                                    JToken typeValue3 = outputsValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        outputResponseInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken nameValue5 = outputsValue["name"];
                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                    {
                                        string nameInstance5 = ((string)nameValue5);
                                        outputResponseInstance.Name = nameInstance5;
                                    }
                                    
                                    JToken propertiesValue13 = outputsValue["properties"];
                                    if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                    {
                                        OutputProperties propertiesInstance12 = new OutputProperties();
                                        outputResponseInstance.OutputProperties = propertiesInstance12;
                                        
                                        JToken etagValue5 = propertiesValue13["etag"];
                                        if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                        {
                                            string etagInstance5 = ((string)etagValue5);
                                            propertiesInstance12.Etag = etagInstance5;
                                        }
                                        
                                        JToken datasourceValue3 = propertiesValue13["datasource"];
                                        if (datasourceValue3 != null && datasourceValue3.Type != JTokenType.Null)
                                        {
                                            string typeName6 = ((string)datasourceValue3["type"]);
                                            if (typeName6 == "Microsoft.Storage/Blob")
                                            {
                                                BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                                
                                                JToken propertiesValue14 = datasourceValue3["properties"];
                                                if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                                {
                                                    BlobOutputDataSourceProperties propertiesInstance13 = new BlobOutputDataSourceProperties();
                                                    blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance13;
                                                    
                                                    JToken storageAccountsArray3 = propertiesValue14["storageAccounts"];
                                                    if (storageAccountsArray3 != null && storageAccountsArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageAccountsValue3 in ((JArray)storageAccountsArray3))
                                                        {
                                                            StorageAccount storageAccountInstance3 = new StorageAccount();
                                                            propertiesInstance13.StorageAccounts.Add(storageAccountInstance3);
                                                            
                                                            JToken accountNameValue3 = storageAccountsValue3["accountName"];
                                                            if (accountNameValue3 != null && accountNameValue3.Type != JTokenType.Null)
                                                            {
                                                                string accountNameInstance3 = ((string)accountNameValue3);
                                                                storageAccountInstance3.AccountName = accountNameInstance3;
                                                            }
                                                            
                                                            JToken accountKeyValue3 = storageAccountsValue3["accountKey"];
                                                            if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                                            {
                                                                string accountKeyInstance3 = ((string)accountKeyValue3);
                                                                storageAccountInstance3.AccountKey = accountKeyInstance3;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken containerValue3 = propertiesValue14["container"];
                                                    if (containerValue3 != null && containerValue3.Type != JTokenType.Null)
                                                    {
                                                        string containerInstance3 = ((string)containerValue3);
                                                        propertiesInstance13.Container = containerInstance3;
                                                    }
                                                    
                                                    JToken blobPathPrefixValue = propertiesValue14["blobPathPrefix"];
                                                    if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                                        propertiesInstance13.BlobPathPrefix = blobPathPrefixInstance;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = blobOutputDataSourceInstance;
                                            }
                                            if (typeName6 == "Microsoft.ServiceBus/EventHub")
                                            {
                                                EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                                
                                                JToken propertiesValue15 = datasourceValue3["properties"];
                                                if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                                {
                                                    EventHubOutputDataSourceProperties propertiesInstance14 = new EventHubOutputDataSourceProperties();
                                                    eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance14;
                                                    
                                                    JToken serviceBusNamespaceValue2 = propertiesValue15["serviceBusNamespace"];
                                                    if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                                    {
                                                        string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                        propertiesInstance14.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyNameValue2 = propertiesValue15["sharedAccessPolicyName"];
                                                    if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                        propertiesInstance14.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyKeyValue2 = propertiesValue15["sharedAccessPolicyKey"];
                                                    if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                        propertiesInstance14.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                    }
                                                    
                                                    JToken eventHubNameValue2 = propertiesValue15["eventHubName"];
                                                    if (eventHubNameValue2 != null && eventHubNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string eventHubNameInstance2 = ((string)eventHubNameValue2);
                                                        propertiesInstance14.EventHubName = eventHubNameInstance2;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = eventHubOutputDataSourceInstance;
                                            }
                                            if (typeName6 == "Microsoft.Sql/Server/Database")
                                            {
                                                SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                                
                                                JToken propertiesValue16 = datasourceValue3["properties"];
                                                if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                                {
                                                    SqlAzureOutputDataSourceProperties propertiesInstance15 = new SqlAzureOutputDataSourceProperties();
                                                    sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance15;
                                                    
                                                    JToken serverValue = propertiesValue16["server"];
                                                    if (serverValue != null && serverValue.Type != JTokenType.Null)
                                                    {
                                                        string serverInstance = ((string)serverValue);
                                                        propertiesInstance15.Server = serverInstance;
                                                    }
                                                    
                                                    JToken databaseValue = propertiesValue16["database"];
                                                    if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                                    {
                                                        string databaseInstance = ((string)databaseValue);
                                                        propertiesInstance15.Database = databaseInstance;
                                                    }
                                                    
                                                    JToken userValue = propertiesValue16["user"];
                                                    if (userValue != null && userValue.Type != JTokenType.Null)
                                                    {
                                                        string userInstance = ((string)userValue);
                                                        propertiesInstance15.User = userInstance;
                                                    }
                                                    
                                                    JToken passwordValue = propertiesValue16["password"];
                                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                    {
                                                        string passwordInstance = ((string)passwordValue);
                                                        propertiesInstance15.Password = passwordInstance;
                                                    }
                                                    
                                                    JToken tableValue = propertiesValue16["table"];
                                                    if (tableValue != null && tableValue.Type != JTokenType.Null)
                                                    {
                                                        string tableInstance = ((string)tableValue);
                                                        propertiesInstance15.Table = tableInstance;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = sqlAzureOutputDataSourceInstance;
                                            }
                                        }
                                        
                                        JToken serializationValue3 = propertiesValue13["serialization"];
                                        if (serializationValue3 != null && serializationValue3.Type != JTokenType.Null)
                                        {
                                            string typeName7 = ((string)serializationValue3["type"]);
                                            if (typeName7 == "Csv")
                                            {
                                                CsvSerialization csvSerializationInstance3 = new CsvSerialization();
                                                
                                                JToken propertiesValue17 = serializationValue3["properties"];
                                                if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                                {
                                                    CsvSerializationProperties propertiesInstance16 = new CsvSerializationProperties();
                                                    csvSerializationInstance3.CsvSerializationProperties = propertiesInstance16;
                                                    
                                                    JToken fieldDelimiterValue3 = propertiesValue17["fieldDelimiter"];
                                                    if (fieldDelimiterValue3 != null && fieldDelimiterValue3.Type != JTokenType.Null)
                                                    {
                                                        string fieldDelimiterInstance3 = ((string)fieldDelimiterValue3);
                                                        propertiesInstance16.FieldDelimiter = fieldDelimiterInstance3;
                                                    }
                                                    
                                                    JToken encodingValue5 = propertiesValue17["encoding"];
                                                    if (encodingValue5 != null && encodingValue5.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance5 = ((string)encodingValue5);
                                                        propertiesInstance16.Encoding = encodingInstance5;
                                                    }
                                                }
                                                propertiesInstance12.Serialization = csvSerializationInstance3;
                                            }
                                            if (typeName7 == "Json")
                                            {
                                                JsonSerialization jsonSerializationInstance3 = new JsonSerialization();
                                                
                                                JToken propertiesValue18 = serializationValue3["properties"];
                                                if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                                {
                                                    JsonSerializationProperties propertiesInstance17 = new JsonSerializationProperties();
                                                    jsonSerializationInstance3.JsonSerializationProperties = propertiesInstance17;
                                                    
                                                    JToken encodingValue6 = propertiesValue18["encoding"];
                                                    if (encodingValue6 != null && encodingValue6.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance6 = ((string)encodingValue6);
                                                        propertiesInstance17.Encoding = encodingInstance6;
                                                    }
                                                }
                                                propertiesInstance12.Serialization = jsonSerializationInstance3;
                                            }
                                            if (typeName7 == "Avro")
                                            {
                                                AvroSerialization avroSerializationInstance3 = new AvroSerialization();
                                                
                                                JToken propertiesValue19 = serializationValue3["properties"];
                                                if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                                {
                                                    AvroSerializationProperties propertiesInstance18 = new AvroSerializationProperties();
                                                    avroSerializationInstance3.AvroSerializationProperties = propertiesInstance18;
                                                }
                                                propertiesInstance12.Serialization = avroSerializationInstance3;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. A unique stream analytics job name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string jobName, CancellationToken cancellationToken)
        {
            StreamAnalyticsManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.Job.BeginDeleteAsync(resourceGroupName, jobName, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 20;
                }
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 10;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to get a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the get stream analytics job operation.
        /// </returns>
        public async Task<JobGetResponse> GetAsync(string resourceGroupName, string jobName, JobGetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.PropertiesToExpand == null)
            {
                throw new ArgumentNullException("parameters.PropertiesToExpand");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "?";
            url = url + "$expand=" + Uri.EscapeDataString(parameters.PropertiesToExpand.Trim());
            url = url + "&api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new JobGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JobResponse jobResponseInstance = new JobResponse();
                        result.JobResponse = jobResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            jobResponseInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            jobResponseInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            jobResponseInstance.Type = typeInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            jobResponseInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                jobResponseInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            JobResponseProperties propertiesInstance = new JobResponseProperties();
                            jobResponseInstance.Properties = propertiesInstance;
                            
                            JToken skuValue = propertiesValue["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                Sku skuInstance = new Sku();
                                propertiesInstance.Sku = skuInstance;
                                
                                JToken nameValue2 = skuValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    skuInstance.Name = nameInstance2;
                                }
                            }
                            
                            JToken jobIdValue = propertiesValue["jobId"];
                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                            {
                                string jobIdInstance = ((string)jobIdValue);
                                propertiesInstance.JobId = jobIdInstance;
                            }
                            
                            JToken etagValue = propertiesValue["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                propertiesInstance.Etag = etagInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken jobStateValue = propertiesValue["jobState"];
                            if (jobStateValue != null && jobStateValue.Type != JTokenType.Null)
                            {
                                string jobStateInstance = ((string)jobStateValue);
                                propertiesInstance.JobState = jobStateInstance;
                            }
                            
                            JToken outputStartModeValue = propertiesValue["outputStartMode"];
                            if (outputStartModeValue != null && outputStartModeValue.Type != JTokenType.Null)
                            {
                                string outputStartModeInstance = ((string)outputStartModeValue);
                                propertiesInstance.OutputStartMode = outputStartModeInstance;
                            }
                            
                            JToken outputStartTimeValue = propertiesValue["outputStartTime"];
                            if (outputStartTimeValue != null && outputStartTimeValue.Type != JTokenType.Null)
                            {
                                DateTime outputStartTimeInstance = ((DateTime)outputStartTimeValue);
                                propertiesInstance.OutputStartTime = outputStartTimeInstance;
                            }
                            
                            JToken eventsOutOfOrderPolicyValue = propertiesValue["eventsOutOfOrderPolicy"];
                            if (eventsOutOfOrderPolicyValue != null && eventsOutOfOrderPolicyValue.Type != JTokenType.Null)
                            {
                                string eventsOutOfOrderPolicyInstance = ((string)eventsOutOfOrderPolicyValue);
                                propertiesInstance.EventsOutOfOrderPolicy = eventsOutOfOrderPolicyInstance;
                            }
                            
                            JToken eventsOutOfOrderMaxDelayInMillisecondsValue = propertiesValue["eventsOutOfOrderMaxDelayInMilliseconds"];
                            if (eventsOutOfOrderMaxDelayInMillisecondsValue != null && eventsOutOfOrderMaxDelayInMillisecondsValue.Type != JTokenType.Null)
                            {
                                int eventsOutOfOrderMaxDelayInMillisecondsInstance = ((int)eventsOutOfOrderMaxDelayInMillisecondsValue);
                                propertiesInstance.EventsOutOfOrderMaxDelayInMilliseconds = eventsOutOfOrderMaxDelayInMillisecondsInstance;
                            }
                            
                            JToken createdDateValue = propertiesValue["CreatedDate"];
                            if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                            {
                                DateTime createdDateInstance = ((DateTime)createdDateValue);
                                propertiesInstance.CreatedDate = createdDateInstance;
                            }
                            
                            JToken inputsArray = propertiesValue["inputs"];
                            if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken inputsValue in ((JArray)inputsArray))
                                {
                                    InputResponse inputResponseInstance = new InputResponse();
                                    propertiesInstance.InputsInResponse.Add(inputResponseInstance);
                                    
                                    JToken idValue2 = inputsValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        inputResponseInstance.Id = idInstance2;
                                    }
                                    
                                    JToken typeValue2 = inputsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        inputResponseInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken nameValue3 = inputsValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        inputResponseInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken propertiesValue2 = inputsValue["properties"];
                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue2["type"]);
                                        if (typeName == "Reference")
                                        {
                                            ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                            
                                            JToken datasourceValue = propertiesValue2["datasource"];
                                            if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)datasourceValue["type"]);
                                                if (typeName2 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                                    
                                                    JToken propertiesValue3 = datasourceValue["properties"];
                                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                    {
                                                        BlobReferenceInputDataSourceProperties propertiesInstance2 = new BlobReferenceInputDataSourceProperties();
                                                        blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance2;
                                                        
                                                        JToken storageAccountsArray = propertiesValue3["storageAccounts"];
                                                        if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                            {
                                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                                propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                                
                                                                JToken accountNameValue = storageAccountsValue["accountName"];
                                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance = ((string)accountNameValue);
                                                                    storageAccountInstance.AccountName = accountNameInstance;
                                                                }
                                                                
                                                                JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                                if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance = ((string)accountKeyValue);
                                                                    storageAccountInstance.AccountKey = accountKeyInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue = propertiesValue3["container"];
                                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance = ((string)containerValue);
                                                            propertiesInstance2.Container = containerInstance;
                                                        }
                                                        
                                                        JToken blobNameValue = propertiesValue3["blobName"];
                                                        if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                                        {
                                                            string blobNameInstance = ((string)blobNameValue);
                                                            propertiesInstance2.BlobName = blobNameInstance;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue2 = propertiesValue2["etag"];
                                            if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                            {
                                                string etagInstance2 = ((string)etagValue2);
                                                referenceInputPropertiesInstance.Etag = etagInstance2;
                                            }
                                            
                                            JToken serializationValue = propertiesValue2["serialization"];
                                            if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)serializationValue["type"]);
                                                if (typeName3 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance = new CsvSerialization();
                                                    
                                                    JToken propertiesValue4 = serializationValue["properties"];
                                                    if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance3 = new CsvSerializationProperties();
                                                        csvSerializationInstance.CsvSerializationProperties = propertiesInstance3;
                                                        
                                                        JToken fieldDelimiterValue = propertiesValue4["fieldDelimiter"];
                                                        if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                            propertiesInstance3.FieldDelimiter = fieldDelimiterInstance;
                                                        }
                                                        
                                                        JToken encodingValue = propertiesValue4["encoding"];
                                                        if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance = ((string)encodingValue);
                                                            propertiesInstance3.Encoding = encodingInstance;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                                }
                                                if (typeName3 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                                    
                                                    JToken propertiesValue5 = serializationValue["properties"];
                                                    if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance4 = new JsonSerializationProperties();
                                                        jsonSerializationInstance.JsonSerializationProperties = propertiesInstance4;
                                                        
                                                        JToken encodingValue2 = propertiesValue5["encoding"];
                                                        if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance2 = ((string)encodingValue2);
                                                            propertiesInstance4.Encoding = encodingInstance2;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                                }
                                                if (typeName3 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance = new AvroSerialization();
                                                    
                                                    JToken propertiesValue6 = serializationValue["properties"];
                                                    if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance5 = new AvroSerializationProperties();
                                                        avroSerializationInstance.AvroSerializationProperties = propertiesInstance5;
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                                }
                                            }
                                            inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                                        }
                                        if (typeName == "Stream")
                                        {
                                            StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                            
                                            JToken datasourceValue2 = propertiesValue2["datasource"];
                                            if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)datasourceValue2["type"]);
                                                if (typeName4 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                                    
                                                    JToken propertiesValue7 = datasourceValue2["properties"];
                                                    if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                    {
                                                        BlobStreamInputDataSourceProperties propertiesInstance6 = new BlobStreamInputDataSourceProperties();
                                                        blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance6;
                                                        
                                                        JToken storageAccountsArray2 = propertiesValue7["storageAccounts"];
                                                        if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                            {
                                                                StorageAccount storageAccountInstance2 = new StorageAccount();
                                                                propertiesInstance6.StorageAccounts.Add(storageAccountInstance2);
                                                                
                                                                JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                                if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance2 = ((string)accountNameValue2);
                                                                    storageAccountInstance2.AccountName = accountNameInstance2;
                                                                }
                                                                
                                                                JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                                if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance2 = ((string)accountKeyValue2);
                                                                    storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue2 = propertiesValue7["container"];
                                                        if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance2 = ((string)containerValue2);
                                                            propertiesInstance6.Container = containerInstance2;
                                                        }
                                                        
                                                        JToken blobSerializationBoundaryValue = propertiesValue7["blobSerializationBoundary"];
                                                        if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                                        {
                                                            string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                            propertiesInstance6.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                                        }
                                                        
                                                        JToken pathPatternValue = propertiesValue7["pathPattern"];
                                                        if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                        {
                                                            string pathPatternInstance = ((string)pathPatternValue);
                                                            propertiesInstance6.PathPattern = pathPatternInstance;
                                                        }
                                                        
                                                        JToken dateFormatValue = propertiesValue7["dateFormat"];
                                                        if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string dateFormatInstance = ((string)dateFormatValue);
                                                            propertiesInstance6.DateFormat = dateFormatInstance;
                                                        }
                                                        
                                                        JToken timeFormatValue = propertiesValue7["timeFormat"];
                                                        if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string timeFormatInstance = ((string)timeFormatValue);
                                                            propertiesInstance6.TimeFormat = timeFormatInstance;
                                                        }
                                                        
                                                        JToken sourcePartitionCountValue = propertiesValue7["sourcePartitionCount"];
                                                        if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                            propertiesInstance6.SourcePartitionCount = sourcePartitionCountInstance;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                                }
                                                if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                                {
                                                    EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                                    
                                                    JToken propertiesValue8 = datasourceValue2["properties"];
                                                    if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                    {
                                                        EventHubStreamInputDataSourceProperties propertiesInstance7 = new EventHubStreamInputDataSourceProperties();
                                                        eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance7;
                                                        
                                                        JToken serviceBusNamespaceValue = propertiesValue8["serviceBusNamespace"];
                                                        if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                        {
                                                            string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                            propertiesInstance7.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyNameValue = propertiesValue8["sharedAccessPolicyName"];
                                                        if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                            propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyKeyValue = propertiesValue8["sharedAccessPolicyKey"];
                                                        if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                            propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                        }
                                                        
                                                        JToken eventHubNameValue = propertiesValue8["eventHubName"];
                                                        if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                        {
                                                            string eventHubNameInstance = ((string)eventHubNameValue);
                                                            propertiesInstance7.EventHubName = eventHubNameInstance;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue3 = propertiesValue2["etag"];
                                            if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                            {
                                                string etagInstance3 = ((string)etagValue3);
                                                streamInputPropertiesInstance.Etag = etagInstance3;
                                            }
                                            
                                            JToken serializationValue2 = propertiesValue2["serialization"];
                                            if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                            {
                                                string typeName5 = ((string)serializationValue2["type"]);
                                                if (typeName5 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                                    
                                                    JToken propertiesValue9 = serializationValue2["properties"];
                                                    if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                        csvSerializationInstance2.CsvSerializationProperties = propertiesInstance8;
                                                        
                                                        JToken fieldDelimiterValue2 = propertiesValue9["fieldDelimiter"];
                                                        if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                            propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                        }
                                                        
                                                        JToken encodingValue3 = propertiesValue9["encoding"];
                                                        if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance3 = ((string)encodingValue3);
                                                            propertiesInstance8.Encoding = encodingInstance3;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                                }
                                                if (typeName5 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                                    
                                                    JToken propertiesValue10 = serializationValue2["properties"];
                                                    if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                        jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance9;
                                                        
                                                        JToken encodingValue4 = propertiesValue10["encoding"];
                                                        if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance4 = ((string)encodingValue4);
                                                            propertiesInstance9.Encoding = encodingInstance4;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                                }
                                                if (typeName5 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                                    
                                                    JToken propertiesValue11 = serializationValue2["properties"];
                                                    if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                        avroSerializationInstance2.AvroSerializationProperties = propertiesInstance10;
                                                    }
                                                    streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                                }
                                            }
                                            inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken transformationValue = propertiesValue["transformation"];
                            if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                            {
                                Transformation transformationInstance = new Transformation();
                                propertiesInstance.Transformation = transformationInstance;
                                
                                JToken nameValue4 = transformationValue["name"];
                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                {
                                    string nameInstance4 = ((string)nameValue4);
                                    transformationInstance.Name = nameInstance4;
                                }
                                
                                JToken propertiesValue12 = transformationValue["properties"];
                                if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                {
                                    TransformationProperties propertiesInstance11 = new TransformationProperties();
                                    transformationInstance.TransformationProperties = propertiesInstance11;
                                    
                                    JToken etagValue4 = propertiesValue12["etag"];
                                    if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                    {
                                        string etagInstance4 = ((string)etagValue4);
                                        propertiesInstance11.Etag = etagInstance4;
                                    }
                                    
                                    JToken streamingUnitsValue = propertiesValue12["streamingUnits"];
                                    if (streamingUnitsValue != null && streamingUnitsValue.Type != JTokenType.Null)
                                    {
                                        int streamingUnitsInstance = ((int)streamingUnitsValue);
                                        propertiesInstance11.StreamingUnits = streamingUnitsInstance;
                                    }
                                    
                                    JToken queryValue = propertiesValue12["query"];
                                    if (queryValue != null && queryValue.Type != JTokenType.Null)
                                    {
                                        string queryInstance = ((string)queryValue);
                                        propertiesInstance11.Query = queryInstance;
                                    }
                                }
                            }
                            
                            JToken outputsArray = propertiesValue["outputs"];
                            if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken outputsValue in ((JArray)outputsArray))
                                {
                                    OutputResponse outputResponseInstance = new OutputResponse();
                                    propertiesInstance.OutputsInResponse.Add(outputResponseInstance);
                                    
                                    JToken idValue3 = outputsValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        outputResponseInstance.Id = idInstance3;
                                    }
                                    
                                    JToken typeValue3 = outputsValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        outputResponseInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken nameValue5 = outputsValue["name"];
                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                    {
                                        string nameInstance5 = ((string)nameValue5);
                                        outputResponseInstance.Name = nameInstance5;
                                    }
                                    
                                    JToken propertiesValue13 = outputsValue["properties"];
                                    if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                    {
                                        OutputProperties propertiesInstance12 = new OutputProperties();
                                        outputResponseInstance.OutputProperties = propertiesInstance12;
                                        
                                        JToken etagValue5 = propertiesValue13["etag"];
                                        if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                        {
                                            string etagInstance5 = ((string)etagValue5);
                                            propertiesInstance12.Etag = etagInstance5;
                                        }
                                        
                                        JToken datasourceValue3 = propertiesValue13["datasource"];
                                        if (datasourceValue3 != null && datasourceValue3.Type != JTokenType.Null)
                                        {
                                            string typeName6 = ((string)datasourceValue3["type"]);
                                            if (typeName6 == "Microsoft.Storage/Blob")
                                            {
                                                BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                                
                                                JToken propertiesValue14 = datasourceValue3["properties"];
                                                if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                                {
                                                    BlobOutputDataSourceProperties propertiesInstance13 = new BlobOutputDataSourceProperties();
                                                    blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance13;
                                                    
                                                    JToken storageAccountsArray3 = propertiesValue14["storageAccounts"];
                                                    if (storageAccountsArray3 != null && storageAccountsArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageAccountsValue3 in ((JArray)storageAccountsArray3))
                                                        {
                                                            StorageAccount storageAccountInstance3 = new StorageAccount();
                                                            propertiesInstance13.StorageAccounts.Add(storageAccountInstance3);
                                                            
                                                            JToken accountNameValue3 = storageAccountsValue3["accountName"];
                                                            if (accountNameValue3 != null && accountNameValue3.Type != JTokenType.Null)
                                                            {
                                                                string accountNameInstance3 = ((string)accountNameValue3);
                                                                storageAccountInstance3.AccountName = accountNameInstance3;
                                                            }
                                                            
                                                            JToken accountKeyValue3 = storageAccountsValue3["accountKey"];
                                                            if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                                            {
                                                                string accountKeyInstance3 = ((string)accountKeyValue3);
                                                                storageAccountInstance3.AccountKey = accountKeyInstance3;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken containerValue3 = propertiesValue14["container"];
                                                    if (containerValue3 != null && containerValue3.Type != JTokenType.Null)
                                                    {
                                                        string containerInstance3 = ((string)containerValue3);
                                                        propertiesInstance13.Container = containerInstance3;
                                                    }
                                                    
                                                    JToken blobPathPrefixValue = propertiesValue14["blobPathPrefix"];
                                                    if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                                        propertiesInstance13.BlobPathPrefix = blobPathPrefixInstance;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = blobOutputDataSourceInstance;
                                            }
                                            if (typeName6 == "Microsoft.ServiceBus/EventHub")
                                            {
                                                EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                                
                                                JToken propertiesValue15 = datasourceValue3["properties"];
                                                if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                                {
                                                    EventHubOutputDataSourceProperties propertiesInstance14 = new EventHubOutputDataSourceProperties();
                                                    eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance14;
                                                    
                                                    JToken serviceBusNamespaceValue2 = propertiesValue15["serviceBusNamespace"];
                                                    if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                                    {
                                                        string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                        propertiesInstance14.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyNameValue2 = propertiesValue15["sharedAccessPolicyName"];
                                                    if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                        propertiesInstance14.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyKeyValue2 = propertiesValue15["sharedAccessPolicyKey"];
                                                    if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                        propertiesInstance14.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                    }
                                                    
                                                    JToken eventHubNameValue2 = propertiesValue15["eventHubName"];
                                                    if (eventHubNameValue2 != null && eventHubNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string eventHubNameInstance2 = ((string)eventHubNameValue2);
                                                        propertiesInstance14.EventHubName = eventHubNameInstance2;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = eventHubOutputDataSourceInstance;
                                            }
                                            if (typeName6 == "Microsoft.Sql/Server/Database")
                                            {
                                                SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                                
                                                JToken propertiesValue16 = datasourceValue3["properties"];
                                                if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                                {
                                                    SqlAzureOutputDataSourceProperties propertiesInstance15 = new SqlAzureOutputDataSourceProperties();
                                                    sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance15;
                                                    
                                                    JToken serverValue = propertiesValue16["server"];
                                                    if (serverValue != null && serverValue.Type != JTokenType.Null)
                                                    {
                                                        string serverInstance = ((string)serverValue);
                                                        propertiesInstance15.Server = serverInstance;
                                                    }
                                                    
                                                    JToken databaseValue = propertiesValue16["database"];
                                                    if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                                    {
                                                        string databaseInstance = ((string)databaseValue);
                                                        propertiesInstance15.Database = databaseInstance;
                                                    }
                                                    
                                                    JToken userValue = propertiesValue16["user"];
                                                    if (userValue != null && userValue.Type != JTokenType.Null)
                                                    {
                                                        string userInstance = ((string)userValue);
                                                        propertiesInstance15.User = userInstance;
                                                    }
                                                    
                                                    JToken passwordValue = propertiesValue16["password"];
                                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                    {
                                                        string passwordInstance = ((string)passwordValue);
                                                        propertiesInstance15.Password = passwordInstance;
                                                    }
                                                    
                                                    JToken tableValue = propertiesValue16["table"];
                                                    if (tableValue != null && tableValue.Type != JTokenType.Null)
                                                    {
                                                        string tableInstance = ((string)tableValue);
                                                        propertiesInstance15.Table = tableInstance;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = sqlAzureOutputDataSourceInstance;
                                            }
                                        }
                                        
                                        JToken serializationValue3 = propertiesValue13["serialization"];
                                        if (serializationValue3 != null && serializationValue3.Type != JTokenType.Null)
                                        {
                                            string typeName7 = ((string)serializationValue3["type"]);
                                            if (typeName7 == "Csv")
                                            {
                                                CsvSerialization csvSerializationInstance3 = new CsvSerialization();
                                                
                                                JToken propertiesValue17 = serializationValue3["properties"];
                                                if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                                {
                                                    CsvSerializationProperties propertiesInstance16 = new CsvSerializationProperties();
                                                    csvSerializationInstance3.CsvSerializationProperties = propertiesInstance16;
                                                    
                                                    JToken fieldDelimiterValue3 = propertiesValue17["fieldDelimiter"];
                                                    if (fieldDelimiterValue3 != null && fieldDelimiterValue3.Type != JTokenType.Null)
                                                    {
                                                        string fieldDelimiterInstance3 = ((string)fieldDelimiterValue3);
                                                        propertiesInstance16.FieldDelimiter = fieldDelimiterInstance3;
                                                    }
                                                    
                                                    JToken encodingValue5 = propertiesValue17["encoding"];
                                                    if (encodingValue5 != null && encodingValue5.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance5 = ((string)encodingValue5);
                                                        propertiesInstance16.Encoding = encodingInstance5;
                                                    }
                                                }
                                                propertiesInstance12.Serialization = csvSerializationInstance3;
                                            }
                                            if (typeName7 == "Json")
                                            {
                                                JsonSerialization jsonSerializationInstance3 = new JsonSerialization();
                                                
                                                JToken propertiesValue18 = serializationValue3["properties"];
                                                if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                                {
                                                    JsonSerializationProperties propertiesInstance17 = new JsonSerializationProperties();
                                                    jsonSerializationInstance3.JsonSerializationProperties = propertiesInstance17;
                                                    
                                                    JToken encodingValue6 = propertiesValue18["encoding"];
                                                    if (encodingValue6 != null && encodingValue6.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance6 = ((string)encodingValue6);
                                                        propertiesInstance17.Encoding = encodingInstance6;
                                                    }
                                                }
                                                propertiesInstance12.Serialization = jsonSerializationInstance3;
                                            }
                                            if (typeName7 == "Avro")
                                            {
                                                AvroSerialization avroSerializationInstance3 = new AvroSerialization();
                                                
                                                JToken propertiesValue19 = serializationValue3["properties"];
                                                if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                                {
                                                    AvroSerializationProperties propertiesInstance18 = new AvroSerializationProperties();
                                                    avroSerializationInstance3.AvroSerializationProperties = propertiesInstance18;
                                                }
                                                propertiesInstance12.Serialization = avroSerializationInstance3;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all the stream analytics jobs in the same resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to list all the stream analytics
        /// job in the same resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the list stream analytics job operation.
        /// </returns>
        public async Task<JobListResponse> ListJobsInResourceGroupAsync(string resourceGroupName, JobListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.PropertiesToExpand == null)
            {
                throw new ArgumentNullException("parameters.PropertiesToExpand");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListJobsInResourceGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs?";
            url = url + "expand=" + Uri.EscapeDataString(parameters.PropertiesToExpand.Trim());
            url = url + "&api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.PropertiesToExpand;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new JobListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                JobResponse jobResponseInstance = new JobResponse();
                                result.JobResponses.Add(jobResponseInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    jobResponseInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    jobResponseInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    jobResponseInstance.Type = typeInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    jobResponseInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        jobResponseInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    JobResponseProperties propertiesInstance = new JobResponseProperties();
                                    jobResponseInstance.Properties = propertiesInstance;
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        Sku skuInstance = new Sku();
                                        propertiesInstance.Sku = skuInstance;
                                        
                                        JToken nameValue2 = skuValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            skuInstance.Name = nameInstance2;
                                        }
                                    }
                                    
                                    JToken jobIdValue = propertiesValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        propertiesInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken etagValue = propertiesValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        propertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken jobStateValue = propertiesValue["jobState"];
                                    if (jobStateValue != null && jobStateValue.Type != JTokenType.Null)
                                    {
                                        string jobStateInstance = ((string)jobStateValue);
                                        propertiesInstance.JobState = jobStateInstance;
                                    }
                                    
                                    JToken outputStartModeValue = propertiesValue["outputStartMode"];
                                    if (outputStartModeValue != null && outputStartModeValue.Type != JTokenType.Null)
                                    {
                                        string outputStartModeInstance = ((string)outputStartModeValue);
                                        propertiesInstance.OutputStartMode = outputStartModeInstance;
                                    }
                                    
                                    JToken outputStartTimeValue = propertiesValue["outputStartTime"];
                                    if (outputStartTimeValue != null && outputStartTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime outputStartTimeInstance = ((DateTime)outputStartTimeValue);
                                        propertiesInstance.OutputStartTime = outputStartTimeInstance;
                                    }
                                    
                                    JToken eventsOutOfOrderPolicyValue = propertiesValue["eventsOutOfOrderPolicy"];
                                    if (eventsOutOfOrderPolicyValue != null && eventsOutOfOrderPolicyValue.Type != JTokenType.Null)
                                    {
                                        string eventsOutOfOrderPolicyInstance = ((string)eventsOutOfOrderPolicyValue);
                                        propertiesInstance.EventsOutOfOrderPolicy = eventsOutOfOrderPolicyInstance;
                                    }
                                    
                                    JToken eventsOutOfOrderMaxDelayInMillisecondsValue = propertiesValue["eventsOutOfOrderMaxDelayInMilliseconds"];
                                    if (eventsOutOfOrderMaxDelayInMillisecondsValue != null && eventsOutOfOrderMaxDelayInMillisecondsValue.Type != JTokenType.Null)
                                    {
                                        int eventsOutOfOrderMaxDelayInMillisecondsInstance = ((int)eventsOutOfOrderMaxDelayInMillisecondsValue);
                                        propertiesInstance.EventsOutOfOrderMaxDelayInMilliseconds = eventsOutOfOrderMaxDelayInMillisecondsInstance;
                                    }
                                    
                                    JToken createdDateValue = propertiesValue["CreatedDate"];
                                    if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime createdDateInstance = ((DateTime)createdDateValue);
                                        propertiesInstance.CreatedDate = createdDateInstance;
                                    }
                                    
                                    JToken inputsArray = propertiesValue["inputs"];
                                    if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken inputsValue in ((JArray)inputsArray))
                                        {
                                            InputResponse inputResponseInstance = new InputResponse();
                                            propertiesInstance.InputsInResponse.Add(inputResponseInstance);
                                            
                                            JToken idValue2 = inputsValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                inputResponseInstance.Id = idInstance2;
                                            }
                                            
                                            JToken typeValue2 = inputsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                inputResponseInstance.Type = typeInstance2;
                                            }
                                            
                                            JToken nameValue3 = inputsValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                inputResponseInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken propertiesValue2 = inputsValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                string typeName = ((string)propertiesValue2["type"]);
                                                if (typeName == "Reference")
                                                {
                                                    ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                                    
                                                    JToken datasourceValue = propertiesValue2["datasource"];
                                                    if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName2 = ((string)datasourceValue["type"]);
                                                        if (typeName2 == "Microsoft.Storage/Blob")
                                                        {
                                                            BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                                            
                                                            JToken propertiesValue3 = datasourceValue["properties"];
                                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                            {
                                                                BlobReferenceInputDataSourceProperties propertiesInstance2 = new BlobReferenceInputDataSourceProperties();
                                                                blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance2;
                                                                
                                                                JToken storageAccountsArray = propertiesValue3["storageAccounts"];
                                                                if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                                    {
                                                                        StorageAccount storageAccountInstance = new StorageAccount();
                                                                        propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                                        
                                                                        JToken accountNameValue = storageAccountsValue["accountName"];
                                                                        if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                                        {
                                                                            string accountNameInstance = ((string)accountNameValue);
                                                                            storageAccountInstance.AccountName = accountNameInstance;
                                                                        }
                                                                        
                                                                        JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                                        if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                                        {
                                                                            string accountKeyInstance = ((string)accountKeyValue);
                                                                            storageAccountInstance.AccountKey = accountKeyInstance;
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken containerValue = propertiesValue3["container"];
                                                                if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                                {
                                                                    string containerInstance = ((string)containerValue);
                                                                    propertiesInstance2.Container = containerInstance;
                                                                }
                                                                
                                                                JToken blobNameValue = propertiesValue3["blobName"];
                                                                if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobNameInstance = ((string)blobNameValue);
                                                                    propertiesInstance2.BlobName = blobNameInstance;
                                                                }
                                                            }
                                                            referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                                        }
                                                    }
                                                    
                                                    JToken etagValue2 = propertiesValue2["etag"];
                                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                                    {
                                                        string etagInstance2 = ((string)etagValue2);
                                                        referenceInputPropertiesInstance.Etag = etagInstance2;
                                                    }
                                                    
                                                    JToken serializationValue = propertiesValue2["serialization"];
                                                    if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName3 = ((string)serializationValue["type"]);
                                                        if (typeName3 == "Csv")
                                                        {
                                                            CsvSerialization csvSerializationInstance = new CsvSerialization();
                                                            
                                                            JToken propertiesValue4 = serializationValue["properties"];
                                                            if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                            {
                                                                CsvSerializationProperties propertiesInstance3 = new CsvSerializationProperties();
                                                                csvSerializationInstance.CsvSerializationProperties = propertiesInstance3;
                                                                
                                                                JToken fieldDelimiterValue = propertiesValue4["fieldDelimiter"];
                                                                if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                                {
                                                                    string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                                    propertiesInstance3.FieldDelimiter = fieldDelimiterInstance;
                                                                }
                                                                
                                                                JToken encodingValue = propertiesValue4["encoding"];
                                                                if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                                {
                                                                    string encodingInstance = ((string)encodingValue);
                                                                    propertiesInstance3.Encoding = encodingInstance;
                                                                }
                                                            }
                                                            referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                                        }
                                                        if (typeName3 == "Json")
                                                        {
                                                            JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                                            
                                                            JToken propertiesValue5 = serializationValue["properties"];
                                                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                                            {
                                                                JsonSerializationProperties propertiesInstance4 = new JsonSerializationProperties();
                                                                jsonSerializationInstance.JsonSerializationProperties = propertiesInstance4;
                                                                
                                                                JToken encodingValue2 = propertiesValue5["encoding"];
                                                                if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                                {
                                                                    string encodingInstance2 = ((string)encodingValue2);
                                                                    propertiesInstance4.Encoding = encodingInstance2;
                                                                }
                                                            }
                                                            referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                                        }
                                                        if (typeName3 == "Avro")
                                                        {
                                                            AvroSerialization avroSerializationInstance = new AvroSerialization();
                                                            
                                                            JToken propertiesValue6 = serializationValue["properties"];
                                                            if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                            {
                                                                AvroSerializationProperties propertiesInstance5 = new AvroSerializationProperties();
                                                                avroSerializationInstance.AvroSerializationProperties = propertiesInstance5;
                                                            }
                                                            referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                                        }
                                                    }
                                                    inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                                                }
                                                if (typeName == "Stream")
                                                {
                                                    StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                                    
                                                    JToken datasourceValue2 = propertiesValue2["datasource"];
                                                    if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeName4 = ((string)datasourceValue2["type"]);
                                                        if (typeName4 == "Microsoft.Storage/Blob")
                                                        {
                                                            BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                                            
                                                            JToken propertiesValue7 = datasourceValue2["properties"];
                                                            if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                            {
                                                                BlobStreamInputDataSourceProperties propertiesInstance6 = new BlobStreamInputDataSourceProperties();
                                                                blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance6;
                                                                
                                                                JToken storageAccountsArray2 = propertiesValue7["storageAccounts"];
                                                                if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                                    {
                                                                        StorageAccount storageAccountInstance2 = new StorageAccount();
                                                                        propertiesInstance6.StorageAccounts.Add(storageAccountInstance2);
                                                                        
                                                                        JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                                        if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                                        {
                                                                            string accountNameInstance2 = ((string)accountNameValue2);
                                                                            storageAccountInstance2.AccountName = accountNameInstance2;
                                                                        }
                                                                        
                                                                        JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                                        if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                                        {
                                                                            string accountKeyInstance2 = ((string)accountKeyValue2);
                                                                            storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken containerValue2 = propertiesValue7["container"];
                                                                if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                                {
                                                                    string containerInstance2 = ((string)containerValue2);
                                                                    propertiesInstance6.Container = containerInstance2;
                                                                }
                                                                
                                                                JToken blobSerializationBoundaryValue = propertiesValue7["blobSerializationBoundary"];
                                                                if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                                    propertiesInstance6.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                                                }
                                                                
                                                                JToken pathPatternValue = propertiesValue7["pathPattern"];
                                                                if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                                {
                                                                    string pathPatternInstance = ((string)pathPatternValue);
                                                                    propertiesInstance6.PathPattern = pathPatternInstance;
                                                                }
                                                                
                                                                JToken dateFormatValue = propertiesValue7["dateFormat"];
                                                                if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                                {
                                                                    string dateFormatInstance = ((string)dateFormatValue);
                                                                    propertiesInstance6.DateFormat = dateFormatInstance;
                                                                }
                                                                
                                                                JToken timeFormatValue = propertiesValue7["timeFormat"];
                                                                if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                                {
                                                                    string timeFormatInstance = ((string)timeFormatValue);
                                                                    propertiesInstance6.TimeFormat = timeFormatInstance;
                                                                }
                                                                
                                                                JToken sourcePartitionCountValue = propertiesValue7["sourcePartitionCount"];
                                                                if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                                {
                                                                    int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                                    propertiesInstance6.SourcePartitionCount = sourcePartitionCountInstance;
                                                                }
                                                            }
                                                            streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                                        }
                                                        if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                                        {
                                                            EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                                            
                                                            JToken propertiesValue8 = datasourceValue2["properties"];
                                                            if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                            {
                                                                EventHubStreamInputDataSourceProperties propertiesInstance7 = new EventHubStreamInputDataSourceProperties();
                                                                eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance7;
                                                                
                                                                JToken serviceBusNamespaceValue = propertiesValue8["serviceBusNamespace"];
                                                                if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                                {
                                                                    string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                                    propertiesInstance7.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                                }
                                                                
                                                                JToken sharedAccessPolicyNameValue = propertiesValue8["sharedAccessPolicyName"];
                                                                if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                                    propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                                }
                                                                
                                                                JToken sharedAccessPolicyKeyValue = propertiesValue8["sharedAccessPolicyKey"];
                                                                if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                                {
                                                                    string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                                    propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                                }
                                                                
                                                                JToken eventHubNameValue = propertiesValue8["eventHubName"];
                                                                if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string eventHubNameInstance = ((string)eventHubNameValue);
                                                                    propertiesInstance7.EventHubName = eventHubNameInstance;
                                                                }
                                                            }
                                                            streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                                        }
                                                    }
                                                    
                                                    JToken etagValue3 = propertiesValue2["etag"];
                                                    if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                                    {
                                                        string etagInstance3 = ((string)etagValue3);
                                                        streamInputPropertiesInstance.Etag = etagInstance3;
                                                    }
                                                    
                                                    JToken serializationValue2 = propertiesValue2["serialization"];
                                                    if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeName5 = ((string)serializationValue2["type"]);
                                                        if (typeName5 == "Csv")
                                                        {
                                                            CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                                            
                                                            JToken propertiesValue9 = serializationValue2["properties"];
                                                            if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                                            {
                                                                CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                                csvSerializationInstance2.CsvSerializationProperties = propertiesInstance8;
                                                                
                                                                JToken fieldDelimiterValue2 = propertiesValue9["fieldDelimiter"];
                                                                if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                                {
                                                                    string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                                    propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                                }
                                                                
                                                                JToken encodingValue3 = propertiesValue9["encoding"];
                                                                if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                                {
                                                                    string encodingInstance3 = ((string)encodingValue3);
                                                                    propertiesInstance8.Encoding = encodingInstance3;
                                                                }
                                                            }
                                                            streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                                        }
                                                        if (typeName5 == "Json")
                                                        {
                                                            JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                                            
                                                            JToken propertiesValue10 = serializationValue2["properties"];
                                                            if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                                            {
                                                                JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                                jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance9;
                                                                
                                                                JToken encodingValue4 = propertiesValue10["encoding"];
                                                                if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                                {
                                                                    string encodingInstance4 = ((string)encodingValue4);
                                                                    propertiesInstance9.Encoding = encodingInstance4;
                                                                }
                                                            }
                                                            streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                                        }
                                                        if (typeName5 == "Avro")
                                                        {
                                                            AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                                            
                                                            JToken propertiesValue11 = serializationValue2["properties"];
                                                            if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                                            {
                                                                AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                                avroSerializationInstance2.AvroSerializationProperties = propertiesInstance10;
                                                            }
                                                            streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                                        }
                                                    }
                                                    inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken transformationValue = propertiesValue["transformation"];
                                    if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                    {
                                        Transformation transformationInstance = new Transformation();
                                        propertiesInstance.Transformation = transformationInstance;
                                        
                                        JToken nameValue4 = transformationValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            transformationInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken propertiesValue12 = transformationValue["properties"];
                                        if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                        {
                                            TransformationProperties propertiesInstance11 = new TransformationProperties();
                                            transformationInstance.TransformationProperties = propertiesInstance11;
                                            
                                            JToken etagValue4 = propertiesValue12["etag"];
                                            if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                            {
                                                string etagInstance4 = ((string)etagValue4);
                                                propertiesInstance11.Etag = etagInstance4;
                                            }
                                            
                                            JToken streamingUnitsValue = propertiesValue12["streamingUnits"];
                                            if (streamingUnitsValue != null && streamingUnitsValue.Type != JTokenType.Null)
                                            {
                                                int streamingUnitsInstance = ((int)streamingUnitsValue);
                                                propertiesInstance11.StreamingUnits = streamingUnitsInstance;
                                            }
                                            
                                            JToken queryValue = propertiesValue12["query"];
                                            if (queryValue != null && queryValue.Type != JTokenType.Null)
                                            {
                                                string queryInstance = ((string)queryValue);
                                                propertiesInstance11.Query = queryInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken outputsArray = propertiesValue["outputs"];
                                    if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken outputsValue in ((JArray)outputsArray))
                                        {
                                            OutputResponse outputResponseInstance = new OutputResponse();
                                            propertiesInstance.OutputsInResponse.Add(outputResponseInstance);
                                            
                                            JToken idValue3 = outputsValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                outputResponseInstance.Id = idInstance3;
                                            }
                                            
                                            JToken typeValue3 = outputsValue["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                outputResponseInstance.Type = typeInstance3;
                                            }
                                            
                                            JToken nameValue5 = outputsValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                outputResponseInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken propertiesValue13 = outputsValue["properties"];
                                            if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                            {
                                                OutputProperties propertiesInstance12 = new OutputProperties();
                                                outputResponseInstance.OutputProperties = propertiesInstance12;
                                                
                                                JToken etagValue5 = propertiesValue13["etag"];
                                                if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                                {
                                                    string etagInstance5 = ((string)etagValue5);
                                                    propertiesInstance12.Etag = etagInstance5;
                                                }
                                                
                                                JToken datasourceValue3 = propertiesValue13["datasource"];
                                                if (datasourceValue3 != null && datasourceValue3.Type != JTokenType.Null)
                                                {
                                                    string typeName6 = ((string)datasourceValue3["type"]);
                                                    if (typeName6 == "Microsoft.Storage/Blob")
                                                    {
                                                        BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                                        
                                                        JToken propertiesValue14 = datasourceValue3["properties"];
                                                        if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                                        {
                                                            BlobOutputDataSourceProperties propertiesInstance13 = new BlobOutputDataSourceProperties();
                                                            blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance13;
                                                            
                                                            JToken storageAccountsArray3 = propertiesValue14["storageAccounts"];
                                                            if (storageAccountsArray3 != null && storageAccountsArray3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageAccountsValue3 in ((JArray)storageAccountsArray3))
                                                                {
                                                                    StorageAccount storageAccountInstance3 = new StorageAccount();
                                                                    propertiesInstance13.StorageAccounts.Add(storageAccountInstance3);
                                                                    
                                                                    JToken accountNameValue3 = storageAccountsValue3["accountName"];
                                                                    if (accountNameValue3 != null && accountNameValue3.Type != JTokenType.Null)
                                                                    {
                                                                        string accountNameInstance3 = ((string)accountNameValue3);
                                                                        storageAccountInstance3.AccountName = accountNameInstance3;
                                                                    }
                                                                    
                                                                    JToken accountKeyValue3 = storageAccountsValue3["accountKey"];
                                                                    if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                                                    {
                                                                        string accountKeyInstance3 = ((string)accountKeyValue3);
                                                                        storageAccountInstance3.AccountKey = accountKeyInstance3;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            JToken containerValue3 = propertiesValue14["container"];
                                                            if (containerValue3 != null && containerValue3.Type != JTokenType.Null)
                                                            {
                                                                string containerInstance3 = ((string)containerValue3);
                                                                propertiesInstance13.Container = containerInstance3;
                                                            }
                                                            
                                                            JToken blobPathPrefixValue = propertiesValue14["blobPathPrefix"];
                                                            if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                                            {
                                                                string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                                                propertiesInstance13.BlobPathPrefix = blobPathPrefixInstance;
                                                            }
                                                        }
                                                        propertiesInstance12.DataSource = blobOutputDataSourceInstance;
                                                    }
                                                    if (typeName6 == "Microsoft.ServiceBus/EventHub")
                                                    {
                                                        EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                                        
                                                        JToken propertiesValue15 = datasourceValue3["properties"];
                                                        if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                                        {
                                                            EventHubOutputDataSourceProperties propertiesInstance14 = new EventHubOutputDataSourceProperties();
                                                            eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance14;
                                                            
                                                            JToken serviceBusNamespaceValue2 = propertiesValue15["serviceBusNamespace"];
                                                            if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                                            {
                                                                string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                                propertiesInstance14.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                                            }
                                                            
                                                            JToken sharedAccessPolicyNameValue2 = propertiesValue15["sharedAccessPolicyName"];
                                                            if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                            {
                                                                string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                                propertiesInstance14.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                            }
                                                            
                                                            JToken sharedAccessPolicyKeyValue2 = propertiesValue15["sharedAccessPolicyKey"];
                                                            if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                            {
                                                                string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                                propertiesInstance14.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                            }
                                                            
                                                            JToken eventHubNameValue2 = propertiesValue15["eventHubName"];
                                                            if (eventHubNameValue2 != null && eventHubNameValue2.Type != JTokenType.Null)
                                                            {
                                                                string eventHubNameInstance2 = ((string)eventHubNameValue2);
                                                                propertiesInstance14.EventHubName = eventHubNameInstance2;
                                                            }
                                                        }
                                                        propertiesInstance12.DataSource = eventHubOutputDataSourceInstance;
                                                    }
                                                    if (typeName6 == "Microsoft.Sql/Server/Database")
                                                    {
                                                        SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                                        
                                                        JToken propertiesValue16 = datasourceValue3["properties"];
                                                        if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                                        {
                                                            SqlAzureOutputDataSourceProperties propertiesInstance15 = new SqlAzureOutputDataSourceProperties();
                                                            sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance15;
                                                            
                                                            JToken serverValue = propertiesValue16["server"];
                                                            if (serverValue != null && serverValue.Type != JTokenType.Null)
                                                            {
                                                                string serverInstance = ((string)serverValue);
                                                                propertiesInstance15.Server = serverInstance;
                                                            }
                                                            
                                                            JToken databaseValue = propertiesValue16["database"];
                                                            if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                                            {
                                                                string databaseInstance = ((string)databaseValue);
                                                                propertiesInstance15.Database = databaseInstance;
                                                            }
                                                            
                                                            JToken userValue = propertiesValue16["user"];
                                                            if (userValue != null && userValue.Type != JTokenType.Null)
                                                            {
                                                                string userInstance = ((string)userValue);
                                                                propertiesInstance15.User = userInstance;
                                                            }
                                                            
                                                            JToken passwordValue = propertiesValue16["password"];
                                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                            {
                                                                string passwordInstance = ((string)passwordValue);
                                                                propertiesInstance15.Password = passwordInstance;
                                                            }
                                                            
                                                            JToken tableValue = propertiesValue16["table"];
                                                            if (tableValue != null && tableValue.Type != JTokenType.Null)
                                                            {
                                                                string tableInstance = ((string)tableValue);
                                                                propertiesInstance15.Table = tableInstance;
                                                            }
                                                        }
                                                        propertiesInstance12.DataSource = sqlAzureOutputDataSourceInstance;
                                                    }
                                                }
                                                
                                                JToken serializationValue3 = propertiesValue13["serialization"];
                                                if (serializationValue3 != null && serializationValue3.Type != JTokenType.Null)
                                                {
                                                    string typeName7 = ((string)serializationValue3["type"]);
                                                    if (typeName7 == "Csv")
                                                    {
                                                        CsvSerialization csvSerializationInstance3 = new CsvSerialization();
                                                        
                                                        JToken propertiesValue17 = serializationValue3["properties"];
                                                        if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                                        {
                                                            CsvSerializationProperties propertiesInstance16 = new CsvSerializationProperties();
                                                            csvSerializationInstance3.CsvSerializationProperties = propertiesInstance16;
                                                            
                                                            JToken fieldDelimiterValue3 = propertiesValue17["fieldDelimiter"];
                                                            if (fieldDelimiterValue3 != null && fieldDelimiterValue3.Type != JTokenType.Null)
                                                            {
                                                                string fieldDelimiterInstance3 = ((string)fieldDelimiterValue3);
                                                                propertiesInstance16.FieldDelimiter = fieldDelimiterInstance3;
                                                            }
                                                            
                                                            JToken encodingValue5 = propertiesValue17["encoding"];
                                                            if (encodingValue5 != null && encodingValue5.Type != JTokenType.Null)
                                                            {
                                                                string encodingInstance5 = ((string)encodingValue5);
                                                                propertiesInstance16.Encoding = encodingInstance5;
                                                            }
                                                        }
                                                        propertiesInstance12.Serialization = csvSerializationInstance3;
                                                    }
                                                    if (typeName7 == "Json")
                                                    {
                                                        JsonSerialization jsonSerializationInstance3 = new JsonSerialization();
                                                        
                                                        JToken propertiesValue18 = serializationValue3["properties"];
                                                        if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                                        {
                                                            JsonSerializationProperties propertiesInstance17 = new JsonSerializationProperties();
                                                            jsonSerializationInstance3.JsonSerializationProperties = propertiesInstance17;
                                                            
                                                            JToken encodingValue6 = propertiesValue18["encoding"];
                                                            if (encodingValue6 != null && encodingValue6.Type != JTokenType.Null)
                                                            {
                                                                string encodingInstance6 = ((string)encodingValue6);
                                                                propertiesInstance17.Encoding = encodingInstance6;
                                                            }
                                                        }
                                                        propertiesInstance12.Serialization = jsonSerializationInstance3;
                                                    }
                                                    if (typeName7 == "Avro")
                                                    {
                                                        AvroSerialization avroSerializationInstance3 = new AvroSerialization();
                                                        
                                                        JToken propertiesValue19 = serializationValue3["properties"];
                                                        if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                                        {
                                                            AvroSerializationProperties propertiesInstance18 = new AvroSerializationProperties();
                                                            avroSerializationInstance3.AvroSerializationProperties = propertiesInstance18;
                                                        }
                                                        propertiesInstance12.Serialization = avroSerializationInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all the stream analytics jobs in the same subscription.
        /// </summary>
        /// <param name='parameters'>
        /// Required. The parameters required to list all the stream analytics
        /// job in the same subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the list stream analytics job operation.
        /// </returns>
        public async Task<JobListResponse> ListJobsInSubscriptionAsync(JobListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.PropertiesToExpand == null)
            {
                throw new ArgumentNullException("parameters.PropertiesToExpand");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListJobsInSubscriptionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/providers/Microsoft.StreamAnalytics/streamingjobs?";
            url = url + "expand=" + Uri.EscapeDataString(parameters.PropertiesToExpand.Trim());
            url = url + "&api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.PropertiesToExpand;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new JobListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                JobResponse jobResponseInstance = new JobResponse();
                                result.JobResponses.Add(jobResponseInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    jobResponseInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    jobResponseInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    jobResponseInstance.Type = typeInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    jobResponseInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        jobResponseInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    JobResponseProperties propertiesInstance = new JobResponseProperties();
                                    jobResponseInstance.Properties = propertiesInstance;
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        Sku skuInstance = new Sku();
                                        propertiesInstance.Sku = skuInstance;
                                        
                                        JToken nameValue2 = skuValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            skuInstance.Name = nameInstance2;
                                        }
                                    }
                                    
                                    JToken jobIdValue = propertiesValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        propertiesInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken etagValue = propertiesValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        propertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                    
                                    JToken jobStateValue = propertiesValue["jobState"];
                                    if (jobStateValue != null && jobStateValue.Type != JTokenType.Null)
                                    {
                                        string jobStateInstance = ((string)jobStateValue);
                                        propertiesInstance.JobState = jobStateInstance;
                                    }
                                    
                                    JToken outputStartModeValue = propertiesValue["outputStartMode"];
                                    if (outputStartModeValue != null && outputStartModeValue.Type != JTokenType.Null)
                                    {
                                        string outputStartModeInstance = ((string)outputStartModeValue);
                                        propertiesInstance.OutputStartMode = outputStartModeInstance;
                                    }
                                    
                                    JToken outputStartTimeValue = propertiesValue["outputStartTime"];
                                    if (outputStartTimeValue != null && outputStartTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime outputStartTimeInstance = ((DateTime)outputStartTimeValue);
                                        propertiesInstance.OutputStartTime = outputStartTimeInstance;
                                    }
                                    
                                    JToken eventsOutOfOrderPolicyValue = propertiesValue["eventsOutOfOrderPolicy"];
                                    if (eventsOutOfOrderPolicyValue != null && eventsOutOfOrderPolicyValue.Type != JTokenType.Null)
                                    {
                                        string eventsOutOfOrderPolicyInstance = ((string)eventsOutOfOrderPolicyValue);
                                        propertiesInstance.EventsOutOfOrderPolicy = eventsOutOfOrderPolicyInstance;
                                    }
                                    
                                    JToken eventsOutOfOrderMaxDelayInMillisecondsValue = propertiesValue["eventsOutOfOrderMaxDelayInMilliseconds"];
                                    if (eventsOutOfOrderMaxDelayInMillisecondsValue != null && eventsOutOfOrderMaxDelayInMillisecondsValue.Type != JTokenType.Null)
                                    {
                                        int eventsOutOfOrderMaxDelayInMillisecondsInstance = ((int)eventsOutOfOrderMaxDelayInMillisecondsValue);
                                        propertiesInstance.EventsOutOfOrderMaxDelayInMilliseconds = eventsOutOfOrderMaxDelayInMillisecondsInstance;
                                    }
                                    
                                    JToken createdDateValue = propertiesValue["CreatedDate"];
                                    if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                                    {
                                        DateTime createdDateInstance = ((DateTime)createdDateValue);
                                        propertiesInstance.CreatedDate = createdDateInstance;
                                    }
                                    
                                    JToken inputsArray = propertiesValue["inputs"];
                                    if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken inputsValue in ((JArray)inputsArray))
                                        {
                                            InputResponse inputResponseInstance = new InputResponse();
                                            propertiesInstance.InputsInResponse.Add(inputResponseInstance);
                                            
                                            JToken idValue2 = inputsValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                inputResponseInstance.Id = idInstance2;
                                            }
                                            
                                            JToken typeValue2 = inputsValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                inputResponseInstance.Type = typeInstance2;
                                            }
                                            
                                            JToken nameValue3 = inputsValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                inputResponseInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken propertiesValue2 = inputsValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                string typeName = ((string)propertiesValue2["type"]);
                                                if (typeName == "Reference")
                                                {
                                                    ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                                    
                                                    JToken datasourceValue = propertiesValue2["datasource"];
                                                    if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName2 = ((string)datasourceValue["type"]);
                                                        if (typeName2 == "Microsoft.Storage/Blob")
                                                        {
                                                            BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                                            
                                                            JToken propertiesValue3 = datasourceValue["properties"];
                                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                            {
                                                                BlobReferenceInputDataSourceProperties propertiesInstance2 = new BlobReferenceInputDataSourceProperties();
                                                                blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance2;
                                                                
                                                                JToken storageAccountsArray = propertiesValue3["storageAccounts"];
                                                                if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                                    {
                                                                        StorageAccount storageAccountInstance = new StorageAccount();
                                                                        propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                                        
                                                                        JToken accountNameValue = storageAccountsValue["accountName"];
                                                                        if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                                        {
                                                                            string accountNameInstance = ((string)accountNameValue);
                                                                            storageAccountInstance.AccountName = accountNameInstance;
                                                                        }
                                                                        
                                                                        JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                                        if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                                        {
                                                                            string accountKeyInstance = ((string)accountKeyValue);
                                                                            storageAccountInstance.AccountKey = accountKeyInstance;
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken containerValue = propertiesValue3["container"];
                                                                if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                                {
                                                                    string containerInstance = ((string)containerValue);
                                                                    propertiesInstance2.Container = containerInstance;
                                                                }
                                                                
                                                                JToken blobNameValue = propertiesValue3["blobName"];
                                                                if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobNameInstance = ((string)blobNameValue);
                                                                    propertiesInstance2.BlobName = blobNameInstance;
                                                                }
                                                            }
                                                            referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                                        }
                                                    }
                                                    
                                                    JToken etagValue2 = propertiesValue2["etag"];
                                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                                    {
                                                        string etagInstance2 = ((string)etagValue2);
                                                        referenceInputPropertiesInstance.Etag = etagInstance2;
                                                    }
                                                    
                                                    JToken serializationValue = propertiesValue2["serialization"];
                                                    if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                                    {
                                                        string typeName3 = ((string)serializationValue["type"]);
                                                        if (typeName3 == "Csv")
                                                        {
                                                            CsvSerialization csvSerializationInstance = new CsvSerialization();
                                                            
                                                            JToken propertiesValue4 = serializationValue["properties"];
                                                            if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                            {
                                                                CsvSerializationProperties propertiesInstance3 = new CsvSerializationProperties();
                                                                csvSerializationInstance.CsvSerializationProperties = propertiesInstance3;
                                                                
                                                                JToken fieldDelimiterValue = propertiesValue4["fieldDelimiter"];
                                                                if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                                {
                                                                    string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                                    propertiesInstance3.FieldDelimiter = fieldDelimiterInstance;
                                                                }
                                                                
                                                                JToken encodingValue = propertiesValue4["encoding"];
                                                                if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                                {
                                                                    string encodingInstance = ((string)encodingValue);
                                                                    propertiesInstance3.Encoding = encodingInstance;
                                                                }
                                                            }
                                                            referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                                        }
                                                        if (typeName3 == "Json")
                                                        {
                                                            JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                                            
                                                            JToken propertiesValue5 = serializationValue["properties"];
                                                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                                            {
                                                                JsonSerializationProperties propertiesInstance4 = new JsonSerializationProperties();
                                                                jsonSerializationInstance.JsonSerializationProperties = propertiesInstance4;
                                                                
                                                                JToken encodingValue2 = propertiesValue5["encoding"];
                                                                if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                                {
                                                                    string encodingInstance2 = ((string)encodingValue2);
                                                                    propertiesInstance4.Encoding = encodingInstance2;
                                                                }
                                                            }
                                                            referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                                        }
                                                        if (typeName3 == "Avro")
                                                        {
                                                            AvroSerialization avroSerializationInstance = new AvroSerialization();
                                                            
                                                            JToken propertiesValue6 = serializationValue["properties"];
                                                            if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                            {
                                                                AvroSerializationProperties propertiesInstance5 = new AvroSerializationProperties();
                                                                avroSerializationInstance.AvroSerializationProperties = propertiesInstance5;
                                                            }
                                                            referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                                        }
                                                    }
                                                    inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                                                }
                                                if (typeName == "Stream")
                                                {
                                                    StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                                    
                                                    JToken datasourceValue2 = propertiesValue2["datasource"];
                                                    if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeName4 = ((string)datasourceValue2["type"]);
                                                        if (typeName4 == "Microsoft.Storage/Blob")
                                                        {
                                                            BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                                            
                                                            JToken propertiesValue7 = datasourceValue2["properties"];
                                                            if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                            {
                                                                BlobStreamInputDataSourceProperties propertiesInstance6 = new BlobStreamInputDataSourceProperties();
                                                                blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance6;
                                                                
                                                                JToken storageAccountsArray2 = propertiesValue7["storageAccounts"];
                                                                if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                                    {
                                                                        StorageAccount storageAccountInstance2 = new StorageAccount();
                                                                        propertiesInstance6.StorageAccounts.Add(storageAccountInstance2);
                                                                        
                                                                        JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                                        if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                                        {
                                                                            string accountNameInstance2 = ((string)accountNameValue2);
                                                                            storageAccountInstance2.AccountName = accountNameInstance2;
                                                                        }
                                                                        
                                                                        JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                                        if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                                        {
                                                                            string accountKeyInstance2 = ((string)accountKeyValue2);
                                                                            storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken containerValue2 = propertiesValue7["container"];
                                                                if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                                {
                                                                    string containerInstance2 = ((string)containerValue2);
                                                                    propertiesInstance6.Container = containerInstance2;
                                                                }
                                                                
                                                                JToken blobSerializationBoundaryValue = propertiesValue7["blobSerializationBoundary"];
                                                                if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                                    propertiesInstance6.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                                                }
                                                                
                                                                JToken pathPatternValue = propertiesValue7["pathPattern"];
                                                                if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                                {
                                                                    string pathPatternInstance = ((string)pathPatternValue);
                                                                    propertiesInstance6.PathPattern = pathPatternInstance;
                                                                }
                                                                
                                                                JToken dateFormatValue = propertiesValue7["dateFormat"];
                                                                if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                                {
                                                                    string dateFormatInstance = ((string)dateFormatValue);
                                                                    propertiesInstance6.DateFormat = dateFormatInstance;
                                                                }
                                                                
                                                                JToken timeFormatValue = propertiesValue7["timeFormat"];
                                                                if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                                {
                                                                    string timeFormatInstance = ((string)timeFormatValue);
                                                                    propertiesInstance6.TimeFormat = timeFormatInstance;
                                                                }
                                                                
                                                                JToken sourcePartitionCountValue = propertiesValue7["sourcePartitionCount"];
                                                                if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                                {
                                                                    int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                                    propertiesInstance6.SourcePartitionCount = sourcePartitionCountInstance;
                                                                }
                                                            }
                                                            streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                                        }
                                                        if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                                        {
                                                            EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                                            
                                                            JToken propertiesValue8 = datasourceValue2["properties"];
                                                            if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                            {
                                                                EventHubStreamInputDataSourceProperties propertiesInstance7 = new EventHubStreamInputDataSourceProperties();
                                                                eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance7;
                                                                
                                                                JToken serviceBusNamespaceValue = propertiesValue8["serviceBusNamespace"];
                                                                if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                                {
                                                                    string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                                    propertiesInstance7.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                                }
                                                                
                                                                JToken sharedAccessPolicyNameValue = propertiesValue8["sharedAccessPolicyName"];
                                                                if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                                    propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                                }
                                                                
                                                                JToken sharedAccessPolicyKeyValue = propertiesValue8["sharedAccessPolicyKey"];
                                                                if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                                {
                                                                    string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                                    propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                                }
                                                                
                                                                JToken eventHubNameValue = propertiesValue8["eventHubName"];
                                                                if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string eventHubNameInstance = ((string)eventHubNameValue);
                                                                    propertiesInstance7.EventHubName = eventHubNameInstance;
                                                                }
                                                            }
                                                            streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                                        }
                                                    }
                                                    
                                                    JToken etagValue3 = propertiesValue2["etag"];
                                                    if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                                    {
                                                        string etagInstance3 = ((string)etagValue3);
                                                        streamInputPropertiesInstance.Etag = etagInstance3;
                                                    }
                                                    
                                                    JToken serializationValue2 = propertiesValue2["serialization"];
                                                    if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeName5 = ((string)serializationValue2["type"]);
                                                        if (typeName5 == "Csv")
                                                        {
                                                            CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                                            
                                                            JToken propertiesValue9 = serializationValue2["properties"];
                                                            if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                                            {
                                                                CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                                csvSerializationInstance2.CsvSerializationProperties = propertiesInstance8;
                                                                
                                                                JToken fieldDelimiterValue2 = propertiesValue9["fieldDelimiter"];
                                                                if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                                {
                                                                    string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                                    propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                                }
                                                                
                                                                JToken encodingValue3 = propertiesValue9["encoding"];
                                                                if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                                {
                                                                    string encodingInstance3 = ((string)encodingValue3);
                                                                    propertiesInstance8.Encoding = encodingInstance3;
                                                                }
                                                            }
                                                            streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                                        }
                                                        if (typeName5 == "Json")
                                                        {
                                                            JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                                            
                                                            JToken propertiesValue10 = serializationValue2["properties"];
                                                            if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                                            {
                                                                JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                                jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance9;
                                                                
                                                                JToken encodingValue4 = propertiesValue10["encoding"];
                                                                if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                                {
                                                                    string encodingInstance4 = ((string)encodingValue4);
                                                                    propertiesInstance9.Encoding = encodingInstance4;
                                                                }
                                                            }
                                                            streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                                        }
                                                        if (typeName5 == "Avro")
                                                        {
                                                            AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                                            
                                                            JToken propertiesValue11 = serializationValue2["properties"];
                                                            if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                                            {
                                                                AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                                avroSerializationInstance2.AvroSerializationProperties = propertiesInstance10;
                                                            }
                                                            streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                                        }
                                                    }
                                                    inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken transformationValue = propertiesValue["transformation"];
                                    if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                    {
                                        Transformation transformationInstance = new Transformation();
                                        propertiesInstance.Transformation = transformationInstance;
                                        
                                        JToken nameValue4 = transformationValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            transformationInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken propertiesValue12 = transformationValue["properties"];
                                        if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                        {
                                            TransformationProperties propertiesInstance11 = new TransformationProperties();
                                            transformationInstance.TransformationProperties = propertiesInstance11;
                                            
                                            JToken etagValue4 = propertiesValue12["etag"];
                                            if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                            {
                                                string etagInstance4 = ((string)etagValue4);
                                                propertiesInstance11.Etag = etagInstance4;
                                            }
                                            
                                            JToken streamingUnitsValue = propertiesValue12["streamingUnits"];
                                            if (streamingUnitsValue != null && streamingUnitsValue.Type != JTokenType.Null)
                                            {
                                                int streamingUnitsInstance = ((int)streamingUnitsValue);
                                                propertiesInstance11.StreamingUnits = streamingUnitsInstance;
                                            }
                                            
                                            JToken queryValue = propertiesValue12["query"];
                                            if (queryValue != null && queryValue.Type != JTokenType.Null)
                                            {
                                                string queryInstance = ((string)queryValue);
                                                propertiesInstance11.Query = queryInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken outputsArray = propertiesValue["outputs"];
                                    if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken outputsValue in ((JArray)outputsArray))
                                        {
                                            OutputResponse outputResponseInstance = new OutputResponse();
                                            propertiesInstance.OutputsInResponse.Add(outputResponseInstance);
                                            
                                            JToken idValue3 = outputsValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                outputResponseInstance.Id = idInstance3;
                                            }
                                            
                                            JToken typeValue3 = outputsValue["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                outputResponseInstance.Type = typeInstance3;
                                            }
                                            
                                            JToken nameValue5 = outputsValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                outputResponseInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken propertiesValue13 = outputsValue["properties"];
                                            if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                            {
                                                OutputProperties propertiesInstance12 = new OutputProperties();
                                                outputResponseInstance.OutputProperties = propertiesInstance12;
                                                
                                                JToken etagValue5 = propertiesValue13["etag"];
                                                if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                                {
                                                    string etagInstance5 = ((string)etagValue5);
                                                    propertiesInstance12.Etag = etagInstance5;
                                                }
                                                
                                                JToken datasourceValue3 = propertiesValue13["datasource"];
                                                if (datasourceValue3 != null && datasourceValue3.Type != JTokenType.Null)
                                                {
                                                    string typeName6 = ((string)datasourceValue3["type"]);
                                                    if (typeName6 == "Microsoft.Storage/Blob")
                                                    {
                                                        BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                                        
                                                        JToken propertiesValue14 = datasourceValue3["properties"];
                                                        if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                                        {
                                                            BlobOutputDataSourceProperties propertiesInstance13 = new BlobOutputDataSourceProperties();
                                                            blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance13;
                                                            
                                                            JToken storageAccountsArray3 = propertiesValue14["storageAccounts"];
                                                            if (storageAccountsArray3 != null && storageAccountsArray3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageAccountsValue3 in ((JArray)storageAccountsArray3))
                                                                {
                                                                    StorageAccount storageAccountInstance3 = new StorageAccount();
                                                                    propertiesInstance13.StorageAccounts.Add(storageAccountInstance3);
                                                                    
                                                                    JToken accountNameValue3 = storageAccountsValue3["accountName"];
                                                                    if (accountNameValue3 != null && accountNameValue3.Type != JTokenType.Null)
                                                                    {
                                                                        string accountNameInstance3 = ((string)accountNameValue3);
                                                                        storageAccountInstance3.AccountName = accountNameInstance3;
                                                                    }
                                                                    
                                                                    JToken accountKeyValue3 = storageAccountsValue3["accountKey"];
                                                                    if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                                                    {
                                                                        string accountKeyInstance3 = ((string)accountKeyValue3);
                                                                        storageAccountInstance3.AccountKey = accountKeyInstance3;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            JToken containerValue3 = propertiesValue14["container"];
                                                            if (containerValue3 != null && containerValue3.Type != JTokenType.Null)
                                                            {
                                                                string containerInstance3 = ((string)containerValue3);
                                                                propertiesInstance13.Container = containerInstance3;
                                                            }
                                                            
                                                            JToken blobPathPrefixValue = propertiesValue14["blobPathPrefix"];
                                                            if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                                            {
                                                                string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                                                propertiesInstance13.BlobPathPrefix = blobPathPrefixInstance;
                                                            }
                                                        }
                                                        propertiesInstance12.DataSource = blobOutputDataSourceInstance;
                                                    }
                                                    if (typeName6 == "Microsoft.ServiceBus/EventHub")
                                                    {
                                                        EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                                        
                                                        JToken propertiesValue15 = datasourceValue3["properties"];
                                                        if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                                        {
                                                            EventHubOutputDataSourceProperties propertiesInstance14 = new EventHubOutputDataSourceProperties();
                                                            eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance14;
                                                            
                                                            JToken serviceBusNamespaceValue2 = propertiesValue15["serviceBusNamespace"];
                                                            if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                                            {
                                                                string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                                propertiesInstance14.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                                            }
                                                            
                                                            JToken sharedAccessPolicyNameValue2 = propertiesValue15["sharedAccessPolicyName"];
                                                            if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                            {
                                                                string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                                propertiesInstance14.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                            }
                                                            
                                                            JToken sharedAccessPolicyKeyValue2 = propertiesValue15["sharedAccessPolicyKey"];
                                                            if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                            {
                                                                string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                                propertiesInstance14.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                            }
                                                            
                                                            JToken eventHubNameValue2 = propertiesValue15["eventHubName"];
                                                            if (eventHubNameValue2 != null && eventHubNameValue2.Type != JTokenType.Null)
                                                            {
                                                                string eventHubNameInstance2 = ((string)eventHubNameValue2);
                                                                propertiesInstance14.EventHubName = eventHubNameInstance2;
                                                            }
                                                        }
                                                        propertiesInstance12.DataSource = eventHubOutputDataSourceInstance;
                                                    }
                                                    if (typeName6 == "Microsoft.Sql/Server/Database")
                                                    {
                                                        SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                                        
                                                        JToken propertiesValue16 = datasourceValue3["properties"];
                                                        if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                                        {
                                                            SqlAzureOutputDataSourceProperties propertiesInstance15 = new SqlAzureOutputDataSourceProperties();
                                                            sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance15;
                                                            
                                                            JToken serverValue = propertiesValue16["server"];
                                                            if (serverValue != null && serverValue.Type != JTokenType.Null)
                                                            {
                                                                string serverInstance = ((string)serverValue);
                                                                propertiesInstance15.Server = serverInstance;
                                                            }
                                                            
                                                            JToken databaseValue = propertiesValue16["database"];
                                                            if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                                            {
                                                                string databaseInstance = ((string)databaseValue);
                                                                propertiesInstance15.Database = databaseInstance;
                                                            }
                                                            
                                                            JToken userValue = propertiesValue16["user"];
                                                            if (userValue != null && userValue.Type != JTokenType.Null)
                                                            {
                                                                string userInstance = ((string)userValue);
                                                                propertiesInstance15.User = userInstance;
                                                            }
                                                            
                                                            JToken passwordValue = propertiesValue16["password"];
                                                            if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                            {
                                                                string passwordInstance = ((string)passwordValue);
                                                                propertiesInstance15.Password = passwordInstance;
                                                            }
                                                            
                                                            JToken tableValue = propertiesValue16["table"];
                                                            if (tableValue != null && tableValue.Type != JTokenType.Null)
                                                            {
                                                                string tableInstance = ((string)tableValue);
                                                                propertiesInstance15.Table = tableInstance;
                                                            }
                                                        }
                                                        propertiesInstance12.DataSource = sqlAzureOutputDataSourceInstance;
                                                    }
                                                }
                                                
                                                JToken serializationValue3 = propertiesValue13["serialization"];
                                                if (serializationValue3 != null && serializationValue3.Type != JTokenType.Null)
                                                {
                                                    string typeName7 = ((string)serializationValue3["type"]);
                                                    if (typeName7 == "Csv")
                                                    {
                                                        CsvSerialization csvSerializationInstance3 = new CsvSerialization();
                                                        
                                                        JToken propertiesValue17 = serializationValue3["properties"];
                                                        if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                                        {
                                                            CsvSerializationProperties propertiesInstance16 = new CsvSerializationProperties();
                                                            csvSerializationInstance3.CsvSerializationProperties = propertiesInstance16;
                                                            
                                                            JToken fieldDelimiterValue3 = propertiesValue17["fieldDelimiter"];
                                                            if (fieldDelimiterValue3 != null && fieldDelimiterValue3.Type != JTokenType.Null)
                                                            {
                                                                string fieldDelimiterInstance3 = ((string)fieldDelimiterValue3);
                                                                propertiesInstance16.FieldDelimiter = fieldDelimiterInstance3;
                                                            }
                                                            
                                                            JToken encodingValue5 = propertiesValue17["encoding"];
                                                            if (encodingValue5 != null && encodingValue5.Type != JTokenType.Null)
                                                            {
                                                                string encodingInstance5 = ((string)encodingValue5);
                                                                propertiesInstance16.Encoding = encodingInstance5;
                                                            }
                                                        }
                                                        propertiesInstance12.Serialization = csvSerializationInstance3;
                                                    }
                                                    if (typeName7 == "Json")
                                                    {
                                                        JsonSerialization jsonSerializationInstance3 = new JsonSerialization();
                                                        
                                                        JToken propertiesValue18 = serializationValue3["properties"];
                                                        if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                                        {
                                                            JsonSerializationProperties propertiesInstance17 = new JsonSerializationProperties();
                                                            jsonSerializationInstance3.JsonSerializationProperties = propertiesInstance17;
                                                            
                                                            JToken encodingValue6 = propertiesValue18["encoding"];
                                                            if (encodingValue6 != null && encodingValue6.Type != JTokenType.Null)
                                                            {
                                                                string encodingInstance6 = ((string)encodingValue6);
                                                                propertiesInstance17.Encoding = encodingInstance6;
                                                            }
                                                        }
                                                        propertiesInstance12.Serialization = jsonSerializationInstance3;
                                                    }
                                                    if (typeName7 == "Avro")
                                                    {
                                                        AvroSerialization avroSerializationInstance3 = new AvroSerialization();
                                                        
                                                        JToken propertiesValue19 = serializationValue3["properties"];
                                                        if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                                        {
                                                            AvroSerializationProperties propertiesInstance18 = new AvroSerializationProperties();
                                                            avroSerializationInstance3.AvroSerializationProperties = propertiesInstance18;
                                                        }
                                                        propertiesInstance12.Serialization = avroSerializationInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Start a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> StartAsync(string resourceGroupName, string jobName, CancellationToken cancellationToken)
        {
            StreamAnalyticsManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                Tracing.Enter(invocationId, this, "StartAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.Job.BeginStartAsync(resourceGroupName, jobName, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 90;
                }
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 10;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Stop a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> StopAsync(string resourceGroupName, string jobName, CancellationToken cancellationToken)
        {
            StreamAnalyticsManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                Tracing.Enter(invocationId, this, "StopAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.Job.BeginStopAsync(resourceGroupName, jobName, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 20;
                }
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 10;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to update a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the patch job operation.
        /// </returns>
        public async Task<JobPatchResponse> UpdateAsync(string resourceGroupName, string jobName, JobPatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.JobPatchRequest != null)
            {
                if (parameters.JobPatchRequest.JobPatchRequestProperties == null)
                {
                    throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties");
                }
                if (parameters.JobPatchRequest.JobPatchRequestProperties.EventsOutOfOrderPolicy == null)
                {
                    throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.EventsOutOfOrderPolicy");
                }
                if (parameters.JobPatchRequest.JobPatchRequestProperties.Inputs != null)
                {
                    foreach (Input inputsParameterItem in parameters.JobPatchRequest.JobPatchRequestProperties.Inputs)
                    {
                        if (inputsParameterItem.InputProperties == null)
                        {
                            throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Inputs.InputProperties");
                        }
                        if (inputsParameterItem.InputProperties.Serialization == null)
                        {
                            throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Inputs.InputProperties.Serialization");
                        }
                        if (inputsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Inputs.Name");
                        }
                    }
                }
                if (parameters.JobPatchRequest.JobPatchRequestProperties.Outputs != null)
                {
                    foreach (Output outputsParameterItem in parameters.JobPatchRequest.JobPatchRequestProperties.Outputs)
                    {
                        if (outputsParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Outputs.Name");
                        }
                        if (outputsParameterItem.OutputProperties == null)
                        {
                            throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Outputs.OutputProperties");
                        }
                        if (outputsParameterItem.OutputProperties.DataSource == null)
                        {
                            throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Outputs.OutputProperties.DataSource");
                        }
                    }
                }
                if (parameters.JobPatchRequest.JobPatchRequestProperties.Sku == null)
                {
                    throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Sku");
                }
                if (parameters.JobPatchRequest.JobPatchRequestProperties.Sku.Name == null)
                {
                    throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Sku.Name");
                }
                if (parameters.JobPatchRequest.JobPatchRequestProperties.Transformation != null)
                {
                    if (parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.Name == null)
                    {
                        throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.Name");
                    }
                    if (parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.TransformationProperties == null)
                    {
                        throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.TransformationProperties");
                    }
                    if (parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.TransformationProperties.Query == null)
                    {
                        throw new ArgumentNullException("parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.TransformationProperties.Query");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-jobState-if-match", parameters.JobStateIfMatch);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject jobPatchParametersValue = new JObject();
                requestDoc = jobPatchParametersValue;
                
                if (parameters.JobStateIfMatch != null)
                {
                    jobPatchParametersValue["JobStateIfMatch"] = JObject.Parse(parameters.JobStateIfMatch);
                }
                
                if (parameters.JobPatchRequest != null)
                {
                    if (parameters.JobPatchRequest.Tags != null)
                    {
                        if (parameters.JobPatchRequest.Tags is ILazyCollection == false || ((ILazyCollection)parameters.JobPatchRequest.Tags).IsInitialized)
                        {
                            JObject tagsDictionary = new JObject();
                            foreach (KeyValuePair<string, string> pair in parameters.JobPatchRequest.Tags)
                            {
                                string tagsKey = pair.Key;
                                string tagsValue = pair.Value;
                                tagsDictionary[tagsKey] = tagsValue;
                            }
                            jobPatchParametersValue["tags"] = tagsDictionary;
                        }
                    }
                    
                    JObject propertiesValue = new JObject();
                    jobPatchParametersValue["properties"] = propertiesValue;
                    
                    JObject skuValue = new JObject();
                    propertiesValue["sku"] = skuValue;
                    
                    skuValue["name"] = parameters.JobPatchRequest.JobPatchRequestProperties.Sku.Name;
                    
                    propertiesValue["eventsOutOfOrderPolicy"] = parameters.JobPatchRequest.JobPatchRequestProperties.EventsOutOfOrderPolicy;
                    
                    propertiesValue["eventsOutOfOrderMaxDelayInMilliseconds"] = parameters.JobPatchRequest.JobPatchRequestProperties.EventsOutOfOrderMaxDelayInMilliseconds;
                    
                    propertiesValue["outputStartMode"] = parameters.JobPatchRequest.JobPatchRequestProperties.OutputStartMode.ToString();
                    
                    if (parameters.JobPatchRequest.JobPatchRequestProperties.OutputStartTime != null)
                    {
                        propertiesValue["outputStartTime"] = parameters.JobPatchRequest.JobPatchRequestProperties.OutputStartTime.Value;
                    }
                    
                    if (parameters.JobPatchRequest.JobPatchRequestProperties.Inputs != null)
                    {
                        if (parameters.JobPatchRequest.JobPatchRequestProperties.Inputs is ILazyCollection == false || ((ILazyCollection)parameters.JobPatchRequest.JobPatchRequestProperties.Inputs).IsInitialized)
                        {
                            JArray inputsArray = new JArray();
                            foreach (Input inputsItem in parameters.JobPatchRequest.JobPatchRequestProperties.Inputs)
                            {
                                JObject inputValue = new JObject();
                                inputsArray.Add(inputValue);
                                
                                inputValue["name"] = inputsItem.Name;
                                
                                JObject propertiesValue2 = new JObject();
                                inputValue["properties"] = propertiesValue2;
                                if (inputsItem.InputProperties is ReferenceInputProperties)
                                {
                                    propertiesValue2["type"] = "Reference";
                                    ReferenceInputProperties derived = ((ReferenceInputProperties)inputsItem.InputProperties);
                                    
                                    JObject datasourceValue = new JObject();
                                    propertiesValue2["datasource"] = datasourceValue;
                                    if (derived.DataSource is BlobReferenceInputDataSource)
                                    {
                                        datasourceValue["type"] = "Microsoft.Storage/Blob";
                                        BlobReferenceInputDataSource derived2 = ((BlobReferenceInputDataSource)derived.DataSource);
                                        
                                        JObject propertiesValue3 = new JObject();
                                        datasourceValue["properties"] = propertiesValue3;
                                        
                                        if (derived2.BlobReferenceInputDataSourceProperties.StorageAccounts != null)
                                        {
                                            if (derived2.BlobReferenceInputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived2.BlobReferenceInputDataSourceProperties.StorageAccounts).IsInitialized)
                                            {
                                                JArray storageAccountsArray = new JArray();
                                                foreach (StorageAccount storageAccountsItem in derived2.BlobReferenceInputDataSourceProperties.StorageAccounts)
                                                {
                                                    JObject storageAccountValue = new JObject();
                                                    storageAccountsArray.Add(storageAccountValue);
                                                    
                                                    if (storageAccountsItem.AccountName != null)
                                                    {
                                                        storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                                    }
                                                    
                                                    if (storageAccountsItem.AccountKey != null)
                                                    {
                                                        storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                                    }
                                                }
                                                propertiesValue3["storageAccounts"] = storageAccountsArray;
                                            }
                                        }
                                        
                                        propertiesValue3["container"] = derived2.BlobReferenceInputDataSourceProperties.Container;
                                        
                                        propertiesValue3["blobName"] = derived2.BlobReferenceInputDataSourceProperties.BlobName;
                                    }
                                    
                                    if (derived.Etag != null)
                                    {
                                        propertiesValue2["etag"] = derived.Etag;
                                    }
                                    
                                    JObject serializationValue = new JObject();
                                    propertiesValue2["serialization"] = serializationValue;
                                    if (derived.Serialization is CsvSerialization)
                                    {
                                        serializationValue["type"] = "Csv";
                                        CsvSerialization derived3 = ((CsvSerialization)derived.Serialization);
                                        
                                        JObject propertiesValue4 = new JObject();
                                        serializationValue["properties"] = propertiesValue4;
                                        
                                        propertiesValue4["fieldDelimiter"] = derived3.CsvSerializationProperties.FieldDelimiter;
                                        
                                        propertiesValue4["encoding"] = derived3.CsvSerializationProperties.Encoding;
                                    }
                                    if (derived.Serialization is JsonSerialization)
                                    {
                                        serializationValue["type"] = "Json";
                                        JsonSerialization derived4 = ((JsonSerialization)derived.Serialization);
                                        
                                        JObject propertiesValue5 = new JObject();
                                        serializationValue["properties"] = propertiesValue5;
                                        
                                        propertiesValue5["encoding"] = derived4.JsonSerializationProperties.Encoding;
                                    }
                                    if (derived.Serialization is AvroSerialization)
                                    {
                                        serializationValue["type"] = "Avro";
                                        AvroSerialization derived5 = ((AvroSerialization)derived.Serialization);
                                        
                                        serializationValue["properties"] = derived5.AvroSerializationProperties.ToString();
                                    }
                                }
                                if (inputsItem.InputProperties is StreamInputProperties)
                                {
                                    propertiesValue2["type"] = "Stream";
                                    StreamInputProperties derived6 = ((StreamInputProperties)inputsItem.InputProperties);
                                    
                                    JObject datasourceValue2 = new JObject();
                                    propertiesValue2["datasource"] = datasourceValue2;
                                    if (derived6.DataSource is BlobStreamInputDataSource)
                                    {
                                        datasourceValue2["type"] = "Microsoft.Storage/Blob";
                                        BlobStreamInputDataSource derived7 = ((BlobStreamInputDataSource)derived6.DataSource);
                                        
                                        JObject propertiesValue6 = new JObject();
                                        datasourceValue2["properties"] = propertiesValue6;
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.StorageAccounts != null)
                                        {
                                            if (derived7.BlobStreamInputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived7.BlobStreamInputDataSourceProperties.StorageAccounts).IsInitialized)
                                            {
                                                JArray storageAccountsArray2 = new JArray();
                                                foreach (StorageAccount storageAccountsItem2 in derived7.BlobStreamInputDataSourceProperties.StorageAccounts)
                                                {
                                                    JObject storageAccountValue2 = new JObject();
                                                    storageAccountsArray2.Add(storageAccountValue2);
                                                    
                                                    if (storageAccountsItem2.AccountName != null)
                                                    {
                                                        storageAccountValue2["accountName"] = storageAccountsItem2.AccountName;
                                                    }
                                                    
                                                    if (storageAccountsItem2.AccountKey != null)
                                                    {
                                                        storageAccountValue2["accountKey"] = storageAccountsItem2.AccountKey;
                                                    }
                                                }
                                                propertiesValue6["storageAccounts"] = storageAccountsArray2;
                                            }
                                        }
                                        
                                        propertiesValue6["container"] = derived7.BlobStreamInputDataSourceProperties.Container;
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.BlobSerializationBoundary != null)
                                        {
                                            propertiesValue6["blobSerializationBoundary"] = derived7.BlobStreamInputDataSourceProperties.BlobSerializationBoundary;
                                        }
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.PathPattern != null)
                                        {
                                            propertiesValue6["pathPattern"] = derived7.BlobStreamInputDataSourceProperties.PathPattern;
                                        }
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.DateFormat != null)
                                        {
                                            propertiesValue6["dateFormat"] = derived7.BlobStreamInputDataSourceProperties.DateFormat;
                                        }
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.TimeFormat != null)
                                        {
                                            propertiesValue6["timeFormat"] = derived7.BlobStreamInputDataSourceProperties.TimeFormat;
                                        }
                                        
                                        if (derived7.BlobStreamInputDataSourceProperties.SourcePartitionCount != null)
                                        {
                                            propertiesValue6["sourcePartitionCount"] = derived7.BlobStreamInputDataSourceProperties.SourcePartitionCount.Value;
                                        }
                                    }
                                    if (derived6.DataSource is EventHubStreamInputDataSource)
                                    {
                                        datasourceValue2["type"] = "Microsoft.ServiceBus/EventHub";
                                        EventHubStreamInputDataSource derived8 = ((EventHubStreamInputDataSource)derived6.DataSource);
                                        
                                        JObject propertiesValue7 = new JObject();
                                        datasourceValue2["properties"] = propertiesValue7;
                                        
                                        propertiesValue7["serviceBusNamespace"] = derived8.EventHubStreamInputDataSourceProperties.ServiceBusNamespace;
                                        
                                        propertiesValue7["sharedAccessPolicyName"] = derived8.EventHubStreamInputDataSourceProperties.SharedAccessPolicyName;
                                        
                                        propertiesValue7["sharedAccessPolicyKey"] = derived8.EventHubStreamInputDataSourceProperties.SharedAccessPolicyKey;
                                        
                                        propertiesValue7["eventHubName"] = derived8.EventHubStreamInputDataSourceProperties.EventHubName;
                                    }
                                    
                                    if (derived6.Etag != null)
                                    {
                                        propertiesValue2["etag"] = derived6.Etag;
                                    }
                                    
                                    JObject serializationValue2 = new JObject();
                                    propertiesValue2["serialization"] = serializationValue2;
                                    if (derived6.Serialization is CsvSerialization)
                                    {
                                        serializationValue2["type"] = "Csv";
                                        CsvSerialization derived9 = ((CsvSerialization)derived6.Serialization);
                                        
                                        JObject propertiesValue8 = new JObject();
                                        serializationValue2["properties"] = propertiesValue8;
                                        
                                        propertiesValue8["fieldDelimiter"] = derived9.CsvSerializationProperties.FieldDelimiter;
                                        
                                        propertiesValue8["encoding"] = derived9.CsvSerializationProperties.Encoding;
                                    }
                                    if (derived6.Serialization is JsonSerialization)
                                    {
                                        serializationValue2["type"] = "Json";
                                        JsonSerialization derived10 = ((JsonSerialization)derived6.Serialization);
                                        
                                        JObject propertiesValue9 = new JObject();
                                        serializationValue2["properties"] = propertiesValue9;
                                        
                                        propertiesValue9["encoding"] = derived10.JsonSerializationProperties.Encoding;
                                    }
                                    if (derived6.Serialization is AvroSerialization)
                                    {
                                        serializationValue2["type"] = "Avro";
                                        AvroSerialization derived11 = ((AvroSerialization)derived6.Serialization);
                                        
                                        serializationValue2["properties"] = derived11.AvroSerializationProperties.ToString();
                                    }
                                }
                            }
                            propertiesValue["inputs"] = inputsArray;
                        }
                    }
                    
                    if (parameters.JobPatchRequest.JobPatchRequestProperties.Transformation != null)
                    {
                        JObject transformationValue = new JObject();
                        propertiesValue["transformation"] = transformationValue;
                        
                        transformationValue["name"] = parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.Name;
                        
                        JObject propertiesValue10 = new JObject();
                        transformationValue["properties"] = propertiesValue10;
                        
                        if (parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.TransformationProperties.Etag != null)
                        {
                            propertiesValue10["etag"] = parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.TransformationProperties.Etag;
                        }
                        
                        if (parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.TransformationProperties.StreamingUnits != null)
                        {
                            propertiesValue10["streamingUnits"] = parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.TransformationProperties.StreamingUnits.Value;
                        }
                        
                        propertiesValue10["query"] = parameters.JobPatchRequest.JobPatchRequestProperties.Transformation.TransformationProperties.Query;
                    }
                    
                    if (parameters.JobPatchRequest.JobPatchRequestProperties.Outputs != null)
                    {
                        if (parameters.JobPatchRequest.JobPatchRequestProperties.Outputs is ILazyCollection == false || ((ILazyCollection)parameters.JobPatchRequest.JobPatchRequestProperties.Outputs).IsInitialized)
                        {
                            JArray outputsArray = new JArray();
                            foreach (Output outputsItem in parameters.JobPatchRequest.JobPatchRequestProperties.Outputs)
                            {
                                JObject outputValue = new JObject();
                                outputsArray.Add(outputValue);
                                
                                outputValue["name"] = outputsItem.Name;
                                
                                JObject propertiesValue11 = new JObject();
                                outputValue["properties"] = propertiesValue11;
                                
                                if (outputsItem.OutputProperties.Etag != null)
                                {
                                    propertiesValue11["etag"] = outputsItem.OutputProperties.Etag;
                                }
                                
                                JObject datasourceValue3 = new JObject();
                                propertiesValue11["datasource"] = datasourceValue3;
                                if (outputsItem.OutputProperties.DataSource is BlobOutputDataSource)
                                {
                                    datasourceValue3["type"] = "Microsoft.Storage/Blob";
                                    BlobOutputDataSource derived12 = ((BlobOutputDataSource)outputsItem.OutputProperties.DataSource);
                                    
                                    JObject propertiesValue12 = new JObject();
                                    datasourceValue3["properties"] = propertiesValue12;
                                    
                                    if (derived12.BlobOutputDataSourceProperties.StorageAccounts != null)
                                    {
                                        if (derived12.BlobOutputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived12.BlobOutputDataSourceProperties.StorageAccounts).IsInitialized)
                                        {
                                            JArray storageAccountsArray3 = new JArray();
                                            foreach (StorageAccount storageAccountsItem3 in derived12.BlobOutputDataSourceProperties.StorageAccounts)
                                            {
                                                JObject storageAccountValue3 = new JObject();
                                                storageAccountsArray3.Add(storageAccountValue3);
                                                
                                                if (storageAccountsItem3.AccountName != null)
                                                {
                                                    storageAccountValue3["accountName"] = storageAccountsItem3.AccountName;
                                                }
                                                
                                                if (storageAccountsItem3.AccountKey != null)
                                                {
                                                    storageAccountValue3["accountKey"] = storageAccountsItem3.AccountKey;
                                                }
                                            }
                                            propertiesValue12["storageAccounts"] = storageAccountsArray3;
                                        }
                                    }
                                    
                                    propertiesValue12["container"] = derived12.BlobOutputDataSourceProperties.Container;
                                    
                                    if (derived12.BlobOutputDataSourceProperties.BlobPathPrefix != null)
                                    {
                                        propertiesValue12["blobPathPrefix"] = derived12.BlobOutputDataSourceProperties.BlobPathPrefix;
                                    }
                                }
                                if (outputsItem.OutputProperties.DataSource is EventHubOutputDataSource)
                                {
                                    datasourceValue3["type"] = "Microsoft.ServiceBus/EventHub";
                                    EventHubOutputDataSource derived13 = ((EventHubOutputDataSource)outputsItem.OutputProperties.DataSource);
                                    
                                    JObject propertiesValue13 = new JObject();
                                    datasourceValue3["properties"] = propertiesValue13;
                                    
                                    propertiesValue13["serviceBusNamespace"] = derived13.EventHubOutputDataSourceProperties.ServiceBusNamespace;
                                    
                                    propertiesValue13["sharedAccessPolicyName"] = derived13.EventHubOutputDataSourceProperties.SharedAccessPolicyName;
                                    
                                    propertiesValue13["sharedAccessPolicyKey"] = derived13.EventHubOutputDataSourceProperties.SharedAccessPolicyKey;
                                    
                                    propertiesValue13["eventHubName"] = derived13.EventHubOutputDataSourceProperties.EventHubName;
                                }
                                if (outputsItem.OutputProperties.DataSource is SqlAzureOutputDataSource)
                                {
                                    datasourceValue3["type"] = "Microsoft.Sql/Server/Database";
                                    SqlAzureOutputDataSource derived14 = ((SqlAzureOutputDataSource)outputsItem.OutputProperties.DataSource);
                                    
                                    JObject propertiesValue14 = new JObject();
                                    datasourceValue3["properties"] = propertiesValue14;
                                    
                                    propertiesValue14["server"] = derived14.SqlAzureOutputDataSourceProperties.Server;
                                    
                                    propertiesValue14["database"] = derived14.SqlAzureOutputDataSourceProperties.Database;
                                    
                                    propertiesValue14["user"] = derived14.SqlAzureOutputDataSourceProperties.User;
                                    
                                    propertiesValue14["password"] = derived14.SqlAzureOutputDataSourceProperties.Password;
                                    
                                    propertiesValue14["table"] = derived14.SqlAzureOutputDataSourceProperties.Table;
                                }
                                
                                if (outputsItem.OutputProperties.Serialization != null)
                                {
                                    JObject serializationValue3 = new JObject();
                                    propertiesValue11["serialization"] = serializationValue3;
                                    if (outputsItem.OutputProperties.Serialization is CsvSerialization)
                                    {
                                        serializationValue3["type"] = "Csv";
                                        CsvSerialization derived15 = ((CsvSerialization)outputsItem.OutputProperties.Serialization);
                                        
                                        JObject propertiesValue15 = new JObject();
                                        serializationValue3["properties"] = propertiesValue15;
                                        
                                        propertiesValue15["fieldDelimiter"] = derived15.CsvSerializationProperties.FieldDelimiter;
                                        
                                        propertiesValue15["encoding"] = derived15.CsvSerializationProperties.Encoding;
                                    }
                                    if (outputsItem.OutputProperties.Serialization is JsonSerialization)
                                    {
                                        serializationValue3["type"] = "Json";
                                        JsonSerialization derived16 = ((JsonSerialization)outputsItem.OutputProperties.Serialization);
                                        
                                        JObject propertiesValue16 = new JObject();
                                        serializationValue3["properties"] = propertiesValue16;
                                        
                                        propertiesValue16["encoding"] = derived16.JsonSerializationProperties.Encoding;
                                    }
                                    if (outputsItem.OutputProperties.Serialization is AvroSerialization)
                                    {
                                        serializationValue3["type"] = "Avro";
                                        AvroSerialization derived17 = ((AvroSerialization)outputsItem.OutputProperties.Serialization);
                                        
                                        serializationValue3["properties"] = derived17.AvroSerializationProperties.ToString();
                                    }
                                }
                            }
                            propertiesValue["outputs"] = outputsArray;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobPatchResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new JobPatchResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JobResponse jobResponseInstance = new JobResponse();
                        result.JobResponse = jobResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            jobResponseInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            jobResponseInstance.Name = nameInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            jobResponseInstance.Type = typeInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            jobResponseInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                jobResponseInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken propertiesValue17 = responseDoc["properties"];
                        if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                        {
                            JobResponseProperties propertiesInstance = new JobResponseProperties();
                            jobResponseInstance.Properties = propertiesInstance;
                            
                            JToken skuValue2 = propertiesValue17["sku"];
                            if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                            {
                                Sku skuInstance = new Sku();
                                propertiesInstance.Sku = skuInstance;
                                
                                JToken nameValue2 = skuValue2["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    skuInstance.Name = nameInstance2;
                                }
                            }
                            
                            JToken jobIdValue = propertiesValue17["jobId"];
                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                            {
                                string jobIdInstance = ((string)jobIdValue);
                                propertiesInstance.JobId = jobIdInstance;
                            }
                            
                            JToken etagValue = propertiesValue17["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                propertiesInstance.Etag = etagInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue17["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                            
                            JToken jobStateValue = propertiesValue17["jobState"];
                            if (jobStateValue != null && jobStateValue.Type != JTokenType.Null)
                            {
                                string jobStateInstance = ((string)jobStateValue);
                                propertiesInstance.JobState = jobStateInstance;
                            }
                            
                            JToken outputStartModeValue = propertiesValue17["outputStartMode"];
                            if (outputStartModeValue != null && outputStartModeValue.Type != JTokenType.Null)
                            {
                                string outputStartModeInstance = ((string)outputStartModeValue);
                                propertiesInstance.OutputStartMode = outputStartModeInstance;
                            }
                            
                            JToken outputStartTimeValue = propertiesValue17["outputStartTime"];
                            if (outputStartTimeValue != null && outputStartTimeValue.Type != JTokenType.Null)
                            {
                                DateTime outputStartTimeInstance = ((DateTime)outputStartTimeValue);
                                propertiesInstance.OutputStartTime = outputStartTimeInstance;
                            }
                            
                            JToken eventsOutOfOrderPolicyValue = propertiesValue17["eventsOutOfOrderPolicy"];
                            if (eventsOutOfOrderPolicyValue != null && eventsOutOfOrderPolicyValue.Type != JTokenType.Null)
                            {
                                string eventsOutOfOrderPolicyInstance = ((string)eventsOutOfOrderPolicyValue);
                                propertiesInstance.EventsOutOfOrderPolicy = eventsOutOfOrderPolicyInstance;
                            }
                            
                            JToken eventsOutOfOrderMaxDelayInMillisecondsValue = propertiesValue17["eventsOutOfOrderMaxDelayInMilliseconds"];
                            if (eventsOutOfOrderMaxDelayInMillisecondsValue != null && eventsOutOfOrderMaxDelayInMillisecondsValue.Type != JTokenType.Null)
                            {
                                int eventsOutOfOrderMaxDelayInMillisecondsInstance = ((int)eventsOutOfOrderMaxDelayInMillisecondsValue);
                                propertiesInstance.EventsOutOfOrderMaxDelayInMilliseconds = eventsOutOfOrderMaxDelayInMillisecondsInstance;
                            }
                            
                            JToken createdDateValue = propertiesValue17["CreatedDate"];
                            if (createdDateValue != null && createdDateValue.Type != JTokenType.Null)
                            {
                                DateTime createdDateInstance = ((DateTime)createdDateValue);
                                propertiesInstance.CreatedDate = createdDateInstance;
                            }
                            
                            JToken inputsArray2 = propertiesValue17["inputs"];
                            if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken inputsValue in ((JArray)inputsArray2))
                                {
                                    InputResponse inputResponseInstance = new InputResponse();
                                    propertiesInstance.InputsInResponse.Add(inputResponseInstance);
                                    
                                    JToken idValue2 = inputsValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        inputResponseInstance.Id = idInstance2;
                                    }
                                    
                                    JToken typeValue2 = inputsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        inputResponseInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken nameValue3 = inputsValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        inputResponseInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken propertiesValue18 = inputsValue["properties"];
                                    if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue18["type"]);
                                        if (typeName == "Reference")
                                        {
                                            ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                            
                                            JToken datasourceValue4 = propertiesValue18["datasource"];
                                            if (datasourceValue4 != null && datasourceValue4.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)datasourceValue4["type"]);
                                                if (typeName2 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                                    
                                                    JToken propertiesValue19 = datasourceValue4["properties"];
                                                    if (propertiesValue19 != null && propertiesValue19.Type != JTokenType.Null)
                                                    {
                                                        BlobReferenceInputDataSourceProperties propertiesInstance2 = new BlobReferenceInputDataSourceProperties();
                                                        blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance2;
                                                        
                                                        JToken storageAccountsArray4 = propertiesValue19["storageAccounts"];
                                                        if (storageAccountsArray4 != null && storageAccountsArray4.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray4))
                                                            {
                                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                                propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                                
                                                                JToken accountNameValue = storageAccountsValue["accountName"];
                                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance = ((string)accountNameValue);
                                                                    storageAccountInstance.AccountName = accountNameInstance;
                                                                }
                                                                
                                                                JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                                if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance = ((string)accountKeyValue);
                                                                    storageAccountInstance.AccountKey = accountKeyInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue = propertiesValue19["container"];
                                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance = ((string)containerValue);
                                                            propertiesInstance2.Container = containerInstance;
                                                        }
                                                        
                                                        JToken blobNameValue = propertiesValue19["blobName"];
                                                        if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                                        {
                                                            string blobNameInstance = ((string)blobNameValue);
                                                            propertiesInstance2.BlobName = blobNameInstance;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue2 = propertiesValue18["etag"];
                                            if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                            {
                                                string etagInstance2 = ((string)etagValue2);
                                                referenceInputPropertiesInstance.Etag = etagInstance2;
                                            }
                                            
                                            JToken serializationValue4 = propertiesValue18["serialization"];
                                            if (serializationValue4 != null && serializationValue4.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)serializationValue4["type"]);
                                                if (typeName3 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance = new CsvSerialization();
                                                    
                                                    JToken propertiesValue20 = serializationValue4["properties"];
                                                    if (propertiesValue20 != null && propertiesValue20.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance3 = new CsvSerializationProperties();
                                                        csvSerializationInstance.CsvSerializationProperties = propertiesInstance3;
                                                        
                                                        JToken fieldDelimiterValue = propertiesValue20["fieldDelimiter"];
                                                        if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                            propertiesInstance3.FieldDelimiter = fieldDelimiterInstance;
                                                        }
                                                        
                                                        JToken encodingValue = propertiesValue20["encoding"];
                                                        if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance = ((string)encodingValue);
                                                            propertiesInstance3.Encoding = encodingInstance;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                                }
                                                if (typeName3 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                                    
                                                    JToken propertiesValue21 = serializationValue4["properties"];
                                                    if (propertiesValue21 != null && propertiesValue21.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance4 = new JsonSerializationProperties();
                                                        jsonSerializationInstance.JsonSerializationProperties = propertiesInstance4;
                                                        
                                                        JToken encodingValue2 = propertiesValue21["encoding"];
                                                        if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance2 = ((string)encodingValue2);
                                                            propertiesInstance4.Encoding = encodingInstance2;
                                                        }
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                                }
                                                if (typeName3 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance = new AvroSerialization();
                                                    
                                                    JToken propertiesValue22 = serializationValue4["properties"];
                                                    if (propertiesValue22 != null && propertiesValue22.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance5 = new AvroSerializationProperties();
                                                        avroSerializationInstance.AvroSerializationProperties = propertiesInstance5;
                                                    }
                                                    referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                                }
                                            }
                                            inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                                        }
                                        if (typeName == "Stream")
                                        {
                                            StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                            
                                            JToken datasourceValue5 = propertiesValue18["datasource"];
                                            if (datasourceValue5 != null && datasourceValue5.Type != JTokenType.Null)
                                            {
                                                string typeName4 = ((string)datasourceValue5["type"]);
                                                if (typeName4 == "Microsoft.Storage/Blob")
                                                {
                                                    BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                                    
                                                    JToken propertiesValue23 = datasourceValue5["properties"];
                                                    if (propertiesValue23 != null && propertiesValue23.Type != JTokenType.Null)
                                                    {
                                                        BlobStreamInputDataSourceProperties propertiesInstance6 = new BlobStreamInputDataSourceProperties();
                                                        blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance6;
                                                        
                                                        JToken storageAccountsArray5 = propertiesValue23["storageAccounts"];
                                                        if (storageAccountsArray5 != null && storageAccountsArray5.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray5))
                                                            {
                                                                StorageAccount storageAccountInstance2 = new StorageAccount();
                                                                propertiesInstance6.StorageAccounts.Add(storageAccountInstance2);
                                                                
                                                                JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                                if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountNameInstance2 = ((string)accountNameValue2);
                                                                    storageAccountInstance2.AccountName = accountNameInstance2;
                                                                }
                                                                
                                                                JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                                if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                                {
                                                                    string accountKeyInstance2 = ((string)accountKeyValue2);
                                                                    storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken containerValue2 = propertiesValue23["container"];
                                                        if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                        {
                                                            string containerInstance2 = ((string)containerValue2);
                                                            propertiesInstance6.Container = containerInstance2;
                                                        }
                                                        
                                                        JToken blobSerializationBoundaryValue = propertiesValue23["blobSerializationBoundary"];
                                                        if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                                        {
                                                            string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                            propertiesInstance6.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                                        }
                                                        
                                                        JToken pathPatternValue = propertiesValue23["pathPattern"];
                                                        if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                        {
                                                            string pathPatternInstance = ((string)pathPatternValue);
                                                            propertiesInstance6.PathPattern = pathPatternInstance;
                                                        }
                                                        
                                                        JToken dateFormatValue = propertiesValue23["dateFormat"];
                                                        if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string dateFormatInstance = ((string)dateFormatValue);
                                                            propertiesInstance6.DateFormat = dateFormatInstance;
                                                        }
                                                        
                                                        JToken timeFormatValue = propertiesValue23["timeFormat"];
                                                        if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string timeFormatInstance = ((string)timeFormatValue);
                                                            propertiesInstance6.TimeFormat = timeFormatInstance;
                                                        }
                                                        
                                                        JToken sourcePartitionCountValue = propertiesValue23["sourcePartitionCount"];
                                                        if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                            propertiesInstance6.SourcePartitionCount = sourcePartitionCountInstance;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                                }
                                                if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                                {
                                                    EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                                    
                                                    JToken propertiesValue24 = datasourceValue5["properties"];
                                                    if (propertiesValue24 != null && propertiesValue24.Type != JTokenType.Null)
                                                    {
                                                        EventHubStreamInputDataSourceProperties propertiesInstance7 = new EventHubStreamInputDataSourceProperties();
                                                        eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance7;
                                                        
                                                        JToken serviceBusNamespaceValue = propertiesValue24["serviceBusNamespace"];
                                                        if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                        {
                                                            string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                            propertiesInstance7.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyNameValue = propertiesValue24["sharedAccessPolicyName"];
                                                        if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                            propertiesInstance7.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                        }
                                                        
                                                        JToken sharedAccessPolicyKeyValue = propertiesValue24["sharedAccessPolicyKey"];
                                                        if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                            propertiesInstance7.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                        }
                                                        
                                                        JToken eventHubNameValue = propertiesValue24["eventHubName"];
                                                        if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                        {
                                                            string eventHubNameInstance = ((string)eventHubNameValue);
                                                            propertiesInstance7.EventHubName = eventHubNameInstance;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                                }
                                            }
                                            
                                            JToken etagValue3 = propertiesValue18["etag"];
                                            if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                            {
                                                string etagInstance3 = ((string)etagValue3);
                                                streamInputPropertiesInstance.Etag = etagInstance3;
                                            }
                                            
                                            JToken serializationValue5 = propertiesValue18["serialization"];
                                            if (serializationValue5 != null && serializationValue5.Type != JTokenType.Null)
                                            {
                                                string typeName5 = ((string)serializationValue5["type"]);
                                                if (typeName5 == "Csv")
                                                {
                                                    CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                                    
                                                    JToken propertiesValue25 = serializationValue5["properties"];
                                                    if (propertiesValue25 != null && propertiesValue25.Type != JTokenType.Null)
                                                    {
                                                        CsvSerializationProperties propertiesInstance8 = new CsvSerializationProperties();
                                                        csvSerializationInstance2.CsvSerializationProperties = propertiesInstance8;
                                                        
                                                        JToken fieldDelimiterValue2 = propertiesValue25["fieldDelimiter"];
                                                        if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                        {
                                                            string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                            propertiesInstance8.FieldDelimiter = fieldDelimiterInstance2;
                                                        }
                                                        
                                                        JToken encodingValue3 = propertiesValue25["encoding"];
                                                        if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance3 = ((string)encodingValue3);
                                                            propertiesInstance8.Encoding = encodingInstance3;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                                }
                                                if (typeName5 == "Json")
                                                {
                                                    JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                                    
                                                    JToken propertiesValue26 = serializationValue5["properties"];
                                                    if (propertiesValue26 != null && propertiesValue26.Type != JTokenType.Null)
                                                    {
                                                        JsonSerializationProperties propertiesInstance9 = new JsonSerializationProperties();
                                                        jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance9;
                                                        
                                                        JToken encodingValue4 = propertiesValue26["encoding"];
                                                        if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                        {
                                                            string encodingInstance4 = ((string)encodingValue4);
                                                            propertiesInstance9.Encoding = encodingInstance4;
                                                        }
                                                    }
                                                    streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                                }
                                                if (typeName5 == "Avro")
                                                {
                                                    AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                                    
                                                    JToken propertiesValue27 = serializationValue5["properties"];
                                                    if (propertiesValue27 != null && propertiesValue27.Type != JTokenType.Null)
                                                    {
                                                        AvroSerializationProperties propertiesInstance10 = new AvroSerializationProperties();
                                                        avroSerializationInstance2.AvroSerializationProperties = propertiesInstance10;
                                                    }
                                                    streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                                }
                                            }
                                            inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken transformationValue2 = propertiesValue17["transformation"];
                            if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                            {
                                Transformation transformationInstance = new Transformation();
                                propertiesInstance.Transformation = transformationInstance;
                                
                                JToken nameValue4 = transformationValue2["name"];
                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                {
                                    string nameInstance4 = ((string)nameValue4);
                                    transformationInstance.Name = nameInstance4;
                                }
                                
                                JToken propertiesValue28 = transformationValue2["properties"];
                                if (propertiesValue28 != null && propertiesValue28.Type != JTokenType.Null)
                                {
                                    TransformationProperties propertiesInstance11 = new TransformationProperties();
                                    transformationInstance.TransformationProperties = propertiesInstance11;
                                    
                                    JToken etagValue4 = propertiesValue28["etag"];
                                    if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                    {
                                        string etagInstance4 = ((string)etagValue4);
                                        propertiesInstance11.Etag = etagInstance4;
                                    }
                                    
                                    JToken streamingUnitsValue = propertiesValue28["streamingUnits"];
                                    if (streamingUnitsValue != null && streamingUnitsValue.Type != JTokenType.Null)
                                    {
                                        int streamingUnitsInstance = ((int)streamingUnitsValue);
                                        propertiesInstance11.StreamingUnits = streamingUnitsInstance;
                                    }
                                    
                                    JToken queryValue = propertiesValue28["query"];
                                    if (queryValue != null && queryValue.Type != JTokenType.Null)
                                    {
                                        string queryInstance = ((string)queryValue);
                                        propertiesInstance11.Query = queryInstance;
                                    }
                                }
                            }
                            
                            JToken outputsArray2 = propertiesValue17["outputs"];
                            if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken outputsValue in ((JArray)outputsArray2))
                                {
                                    OutputResponse outputResponseInstance = new OutputResponse();
                                    propertiesInstance.OutputsInResponse.Add(outputResponseInstance);
                                    
                                    JToken idValue3 = outputsValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        outputResponseInstance.Id = idInstance3;
                                    }
                                    
                                    JToken typeValue3 = outputsValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        outputResponseInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken nameValue5 = outputsValue["name"];
                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                    {
                                        string nameInstance5 = ((string)nameValue5);
                                        outputResponseInstance.Name = nameInstance5;
                                    }
                                    
                                    JToken propertiesValue29 = outputsValue["properties"];
                                    if (propertiesValue29 != null && propertiesValue29.Type != JTokenType.Null)
                                    {
                                        OutputProperties propertiesInstance12 = new OutputProperties();
                                        outputResponseInstance.OutputProperties = propertiesInstance12;
                                        
                                        JToken etagValue5 = propertiesValue29["etag"];
                                        if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                        {
                                            string etagInstance5 = ((string)etagValue5);
                                            propertiesInstance12.Etag = etagInstance5;
                                        }
                                        
                                        JToken datasourceValue6 = propertiesValue29["datasource"];
                                        if (datasourceValue6 != null && datasourceValue6.Type != JTokenType.Null)
                                        {
                                            string typeName6 = ((string)datasourceValue6["type"]);
                                            if (typeName6 == "Microsoft.Storage/Blob")
                                            {
                                                BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                                
                                                JToken propertiesValue30 = datasourceValue6["properties"];
                                                if (propertiesValue30 != null && propertiesValue30.Type != JTokenType.Null)
                                                {
                                                    BlobOutputDataSourceProperties propertiesInstance13 = new BlobOutputDataSourceProperties();
                                                    blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance13;
                                                    
                                                    JToken storageAccountsArray6 = propertiesValue30["storageAccounts"];
                                                    if (storageAccountsArray6 != null && storageAccountsArray6.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageAccountsValue3 in ((JArray)storageAccountsArray6))
                                                        {
                                                            StorageAccount storageAccountInstance3 = new StorageAccount();
                                                            propertiesInstance13.StorageAccounts.Add(storageAccountInstance3);
                                                            
                                                            JToken accountNameValue3 = storageAccountsValue3["accountName"];
                                                            if (accountNameValue3 != null && accountNameValue3.Type != JTokenType.Null)
                                                            {
                                                                string accountNameInstance3 = ((string)accountNameValue3);
                                                                storageAccountInstance3.AccountName = accountNameInstance3;
                                                            }
                                                            
                                                            JToken accountKeyValue3 = storageAccountsValue3["accountKey"];
                                                            if (accountKeyValue3 != null && accountKeyValue3.Type != JTokenType.Null)
                                                            {
                                                                string accountKeyInstance3 = ((string)accountKeyValue3);
                                                                storageAccountInstance3.AccountKey = accountKeyInstance3;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken containerValue3 = propertiesValue30["container"];
                                                    if (containerValue3 != null && containerValue3.Type != JTokenType.Null)
                                                    {
                                                        string containerInstance3 = ((string)containerValue3);
                                                        propertiesInstance13.Container = containerInstance3;
                                                    }
                                                    
                                                    JToken blobPathPrefixValue = propertiesValue30["blobPathPrefix"];
                                                    if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                                        propertiesInstance13.BlobPathPrefix = blobPathPrefixInstance;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = blobOutputDataSourceInstance;
                                            }
                                            if (typeName6 == "Microsoft.ServiceBus/EventHub")
                                            {
                                                EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                                
                                                JToken propertiesValue31 = datasourceValue6["properties"];
                                                if (propertiesValue31 != null && propertiesValue31.Type != JTokenType.Null)
                                                {
                                                    EventHubOutputDataSourceProperties propertiesInstance14 = new EventHubOutputDataSourceProperties();
                                                    eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance14;
                                                    
                                                    JToken serviceBusNamespaceValue2 = propertiesValue31["serviceBusNamespace"];
                                                    if (serviceBusNamespaceValue2 != null && serviceBusNamespaceValue2.Type != JTokenType.Null)
                                                    {
                                                        string serviceBusNamespaceInstance2 = ((string)serviceBusNamespaceValue2);
                                                        propertiesInstance14.ServiceBusNamespace = serviceBusNamespaceInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyNameValue2 = propertiesValue31["sharedAccessPolicyName"];
                                                    if (sharedAccessPolicyNameValue2 != null && sharedAccessPolicyNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyNameInstance2 = ((string)sharedAccessPolicyNameValue2);
                                                        propertiesInstance14.SharedAccessPolicyName = sharedAccessPolicyNameInstance2;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyKeyValue2 = propertiesValue31["sharedAccessPolicyKey"];
                                                    if (sharedAccessPolicyKeyValue2 != null && sharedAccessPolicyKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyKeyInstance2 = ((string)sharedAccessPolicyKeyValue2);
                                                        propertiesInstance14.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance2;
                                                    }
                                                    
                                                    JToken eventHubNameValue2 = propertiesValue31["eventHubName"];
                                                    if (eventHubNameValue2 != null && eventHubNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string eventHubNameInstance2 = ((string)eventHubNameValue2);
                                                        propertiesInstance14.EventHubName = eventHubNameInstance2;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = eventHubOutputDataSourceInstance;
                                            }
                                            if (typeName6 == "Microsoft.Sql/Server/Database")
                                            {
                                                SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                                
                                                JToken propertiesValue32 = datasourceValue6["properties"];
                                                if (propertiesValue32 != null && propertiesValue32.Type != JTokenType.Null)
                                                {
                                                    SqlAzureOutputDataSourceProperties propertiesInstance15 = new SqlAzureOutputDataSourceProperties();
                                                    sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance15;
                                                    
                                                    JToken serverValue = propertiesValue32["server"];
                                                    if (serverValue != null && serverValue.Type != JTokenType.Null)
                                                    {
                                                        string serverInstance = ((string)serverValue);
                                                        propertiesInstance15.Server = serverInstance;
                                                    }
                                                    
                                                    JToken databaseValue = propertiesValue32["database"];
                                                    if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                                    {
                                                        string databaseInstance = ((string)databaseValue);
                                                        propertiesInstance15.Database = databaseInstance;
                                                    }
                                                    
                                                    JToken userValue = propertiesValue32["user"];
                                                    if (userValue != null && userValue.Type != JTokenType.Null)
                                                    {
                                                        string userInstance = ((string)userValue);
                                                        propertiesInstance15.User = userInstance;
                                                    }
                                                    
                                                    JToken passwordValue = propertiesValue32["password"];
                                                    if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                    {
                                                        string passwordInstance = ((string)passwordValue);
                                                        propertiesInstance15.Password = passwordInstance;
                                                    }
                                                    
                                                    JToken tableValue = propertiesValue32["table"];
                                                    if (tableValue != null && tableValue.Type != JTokenType.Null)
                                                    {
                                                        string tableInstance = ((string)tableValue);
                                                        propertiesInstance15.Table = tableInstance;
                                                    }
                                                }
                                                propertiesInstance12.DataSource = sqlAzureOutputDataSourceInstance;
                                            }
                                        }
                                        
                                        JToken serializationValue6 = propertiesValue29["serialization"];
                                        if (serializationValue6 != null && serializationValue6.Type != JTokenType.Null)
                                        {
                                            string typeName7 = ((string)serializationValue6["type"]);
                                            if (typeName7 == "Csv")
                                            {
                                                CsvSerialization csvSerializationInstance3 = new CsvSerialization();
                                                
                                                JToken propertiesValue33 = serializationValue6["properties"];
                                                if (propertiesValue33 != null && propertiesValue33.Type != JTokenType.Null)
                                                {
                                                    CsvSerializationProperties propertiesInstance16 = new CsvSerializationProperties();
                                                    csvSerializationInstance3.CsvSerializationProperties = propertiesInstance16;
                                                    
                                                    JToken fieldDelimiterValue3 = propertiesValue33["fieldDelimiter"];
                                                    if (fieldDelimiterValue3 != null && fieldDelimiterValue3.Type != JTokenType.Null)
                                                    {
                                                        string fieldDelimiterInstance3 = ((string)fieldDelimiterValue3);
                                                        propertiesInstance16.FieldDelimiter = fieldDelimiterInstance3;
                                                    }
                                                    
                                                    JToken encodingValue5 = propertiesValue33["encoding"];
                                                    if (encodingValue5 != null && encodingValue5.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance5 = ((string)encodingValue5);
                                                        propertiesInstance16.Encoding = encodingInstance5;
                                                    }
                                                }
                                                propertiesInstance12.Serialization = csvSerializationInstance3;
                                            }
                                            if (typeName7 == "Json")
                                            {
                                                JsonSerialization jsonSerializationInstance3 = new JsonSerialization();
                                                
                                                JToken propertiesValue34 = serializationValue6["properties"];
                                                if (propertiesValue34 != null && propertiesValue34.Type != JTokenType.Null)
                                                {
                                                    JsonSerializationProperties propertiesInstance17 = new JsonSerializationProperties();
                                                    jsonSerializationInstance3.JsonSerializationProperties = propertiesInstance17;
                                                    
                                                    JToken encodingValue6 = propertiesValue34["encoding"];
                                                    if (encodingValue6 != null && encodingValue6.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance6 = ((string)encodingValue6);
                                                        propertiesInstance17.Encoding = encodingInstance6;
                                                    }
                                                }
                                                propertiesInstance12.Serialization = jsonSerializationInstance3;
                                            }
                                            if (typeName7 == "Avro")
                                            {
                                                AvroSerialization avroSerializationInstance3 = new AvroSerialization();
                                                
                                                JToken propertiesValue35 = serializationValue6["properties"];
                                                if (propertiesValue35 != null && propertiesValue35.Type != JTokenType.Null)
                                                {
                                                    AvroSerializationProperties propertiesInstance18 = new AvroSerializationProperties();
                                                    avroSerializationInstance3.AvroSerializationProperties = propertiesInstance18;
                                                }
                                                propertiesInstance12.Serialization = avroSerializationInstance3;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
