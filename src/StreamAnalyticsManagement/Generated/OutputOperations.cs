// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.StreamAnalytics;
using Microsoft.Azure.Management.StreamAnalytics.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.StreamAnalytics
{
    /// <summary>
    /// Operations for managing the output of the stream analytics job.
    /// </summary>
    internal partial class OutputOperations : IServiceOperations<StreamAnalyticsManagementClient>, IOutputOperations
    {
        /// <summary>
        /// Initializes a new instance of the OutputOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal OutputOperations(StreamAnalyticsManagementClient client)
        {
            this._client = client;
        }
        
        private StreamAnalyticsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.StreamAnalytics.StreamAnalyticsManagementClient.
        /// </summary>
        public StreamAnalyticsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Test an output for a stream analytics job. Asynchronous call.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to test an output for a stream
        /// analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginTestConnectionAsync(string resourceGroupName, string jobName, OutputTestConnectionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginTestConnectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/outputs/" + (parameters.OutputName != null ? parameters.OutputName.Trim() : "") + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.BadRequest)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.NotFound)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an output for
        /// a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output create operation.
        /// </returns>
        public async Task<OutputCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string jobName, OutputCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Output != null)
            {
                if (parameters.Output.Name == null)
                {
                    throw new ArgumentNullException("parameters.Output.Name");
                }
                if (parameters.Output.OutputProperties == null)
                {
                    throw new ArgumentNullException("parameters.Output.OutputProperties");
                }
                if (parameters.Output.OutputProperties.DataSource == null)
                {
                    throw new ArgumentNullException("parameters.Output.OutputProperties.DataSource");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/outputs/" + (parameters.Output.Name != null ? parameters.Output.Name.Trim() : "") + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject outputCreateOrUpdateParametersValue = new JObject();
                requestDoc = outputCreateOrUpdateParametersValue;
                
                if (parameters.Output != null)
                {
                    outputCreateOrUpdateParametersValue["name"] = parameters.Output.Name;
                    
                    JObject propertiesValue = new JObject();
                    outputCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Output.OutputProperties.Etag != null)
                    {
                        propertiesValue["etag"] = parameters.Output.OutputProperties.Etag;
                    }
                    
                    JObject datasourceValue = new JObject();
                    propertiesValue["datasource"] = datasourceValue;
                    if (parameters.Output.OutputProperties.DataSource is BlobOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.Storage/Blob";
                        BlobOutputDataSource derived = ((BlobOutputDataSource)parameters.Output.OutputProperties.DataSource);
                        
                        JObject propertiesValue2 = new JObject();
                        datasourceValue["properties"] = propertiesValue2;
                        
                        if (derived.BlobOutputDataSourceProperties.StorageAccounts != null)
                        {
                            if (derived.BlobOutputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived.BlobOutputDataSourceProperties.StorageAccounts).IsInitialized)
                            {
                                JArray storageAccountsArray = new JArray();
                                foreach (StorageAccount storageAccountsItem in derived.BlobOutputDataSourceProperties.StorageAccounts)
                                {
                                    JObject storageAccountValue = new JObject();
                                    storageAccountsArray.Add(storageAccountValue);
                                    
                                    if (storageAccountsItem.AccountName != null)
                                    {
                                        storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                    }
                                    
                                    if (storageAccountsItem.AccountKey != null)
                                    {
                                        storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                    }
                                }
                                propertiesValue2["storageAccounts"] = storageAccountsArray;
                            }
                        }
                        
                        propertiesValue2["container"] = derived.BlobOutputDataSourceProperties.Container;
                        
                        if (derived.BlobOutputDataSourceProperties.BlobPathPrefix != null)
                        {
                            propertiesValue2["blobPathPrefix"] = derived.BlobOutputDataSourceProperties.BlobPathPrefix;
                        }
                    }
                    if (parameters.Output.OutputProperties.DataSource is EventHubOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.ServiceBus/EventHub";
                        EventHubOutputDataSource derived2 = ((EventHubOutputDataSource)parameters.Output.OutputProperties.DataSource);
                        
                        JObject propertiesValue3 = new JObject();
                        datasourceValue["properties"] = propertiesValue3;
                        
                        propertiesValue3["serviceBusNamespace"] = derived2.EventHubOutputDataSourceProperties.ServiceBusNamespace;
                        
                        propertiesValue3["sharedAccessPolicyName"] = derived2.EventHubOutputDataSourceProperties.SharedAccessPolicyName;
                        
                        propertiesValue3["sharedAccessPolicyKey"] = derived2.EventHubOutputDataSourceProperties.SharedAccessPolicyKey;
                        
                        propertiesValue3["eventHubName"] = derived2.EventHubOutputDataSourceProperties.EventHubName;
                    }
                    if (parameters.Output.OutputProperties.DataSource is SqlAzureOutputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.Sql/Server/Database";
                        SqlAzureOutputDataSource derived3 = ((SqlAzureOutputDataSource)parameters.Output.OutputProperties.DataSource);
                        
                        JObject propertiesValue4 = new JObject();
                        datasourceValue["properties"] = propertiesValue4;
                        
                        propertiesValue4["server"] = derived3.SqlAzureOutputDataSourceProperties.Server;
                        
                        propertiesValue4["database"] = derived3.SqlAzureOutputDataSourceProperties.Database;
                        
                        propertiesValue4["user"] = derived3.SqlAzureOutputDataSourceProperties.User;
                        
                        propertiesValue4["password"] = derived3.SqlAzureOutputDataSourceProperties.Password;
                        
                        propertiesValue4["table"] = derived3.SqlAzureOutputDataSourceProperties.Table;
                    }
                    
                    if (parameters.Output.OutputProperties.Serialization != null)
                    {
                        JObject serializationValue = new JObject();
                        propertiesValue["serialization"] = serializationValue;
                        if (parameters.Output.OutputProperties.Serialization is CsvSerialization)
                        {
                            serializationValue["type"] = "Csv";
                            CsvSerialization derived4 = ((CsvSerialization)parameters.Output.OutputProperties.Serialization);
                            
                            JObject propertiesValue5 = new JObject();
                            serializationValue["properties"] = propertiesValue5;
                            
                            propertiesValue5["fieldDelimiter"] = derived4.CsvSerializationProperties.FieldDelimiter;
                            
                            propertiesValue5["encoding"] = derived4.CsvSerializationProperties.Encoding;
                        }
                        if (parameters.Output.OutputProperties.Serialization is JsonSerialization)
                        {
                            serializationValue["type"] = "Json";
                            JsonSerialization derived5 = ((JsonSerialization)parameters.Output.OutputProperties.Serialization);
                            
                            JObject propertiesValue6 = new JObject();
                            serializationValue["properties"] = propertiesValue6;
                            
                            propertiesValue6["encoding"] = derived5.JsonSerializationProperties.Encoding;
                        }
                        if (parameters.Output.OutputProperties.Serialization is AvroSerialization)
                        {
                            serializationValue["type"] = "Avro";
                            AvroSerialization derived6 = ((AvroSerialization)parameters.Output.OutputProperties.Serialization);
                            
                            serializationValue["properties"] = derived6.AvroSerializationProperties.ToString();
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new OutputCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        OutputResponse outputResponseInstance = new OutputResponse();
                        result.OutputResponse = outputResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            outputResponseInstance.Id = idInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            outputResponseInstance.Type = typeInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            outputResponseInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue7 = responseDoc["properties"];
                        if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                        {
                            OutputProperties propertiesInstance = new OutputProperties();
                            outputResponseInstance.OutputProperties = propertiesInstance;
                            
                            JToken etagValue = propertiesValue7["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                propertiesInstance.Etag = etagInstance;
                            }
                            
                            JToken datasourceValue2 = propertiesValue7["datasource"];
                            if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                            {
                                string typeName = ((string)datasourceValue2["type"]);
                                if (typeName == "Microsoft.Storage/Blob")
                                {
                                    BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                    
                                    JToken propertiesValue8 = datasourceValue2["properties"];
                                    if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                    {
                                        BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                        blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance2;
                                        
                                        JToken storageAccountsArray2 = propertiesValue8["storageAccounts"];
                                        if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray2))
                                            {
                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                
                                                JToken accountNameValue = storageAccountsValue["accountName"];
                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                {
                                                    string accountNameInstance = ((string)accountNameValue);
                                                    storageAccountInstance.AccountName = accountNameInstance;
                                                }
                                                
                                                JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                {
                                                    string accountKeyInstance = ((string)accountKeyValue);
                                                    storageAccountInstance.AccountKey = accountKeyInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken containerValue = propertiesValue8["container"];
                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                        {
                                            string containerInstance = ((string)containerValue);
                                            propertiesInstance2.Container = containerInstance;
                                        }
                                        
                                        JToken blobPathPrefixValue = propertiesValue8["blobPathPrefix"];
                                        if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                        {
                                            string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                            propertiesInstance2.BlobPathPrefix = blobPathPrefixInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                }
                                if (typeName == "Microsoft.ServiceBus/EventHub")
                                {
                                    EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                    
                                    JToken propertiesValue9 = datasourceValue2["properties"];
                                    if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                    {
                                        EventHubOutputDataSourceProperties propertiesInstance3 = new EventHubOutputDataSourceProperties();
                                        eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance3;
                                        
                                        JToken serviceBusNamespaceValue = propertiesValue9["serviceBusNamespace"];
                                        if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                            propertiesInstance3.ServiceBusNamespace = serviceBusNamespaceInstance;
                                        }
                                        
                                        JToken sharedAccessPolicyNameValue = propertiesValue9["sharedAccessPolicyName"];
                                        if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                        {
                                            string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                            propertiesInstance3.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                        }
                                        
                                        JToken sharedAccessPolicyKeyValue = propertiesValue9["sharedAccessPolicyKey"];
                                        if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                        {
                                            string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                            propertiesInstance3.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                        }
                                        
                                        JToken eventHubNameValue = propertiesValue9["eventHubName"];
                                        if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                        {
                                            string eventHubNameInstance = ((string)eventHubNameValue);
                                            propertiesInstance3.EventHubName = eventHubNameInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                }
                                if (typeName == "Microsoft.Sql/Server/Database")
                                {
                                    SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                    
                                    JToken propertiesValue10 = datasourceValue2["properties"];
                                    if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                    {
                                        SqlAzureOutputDataSourceProperties propertiesInstance4 = new SqlAzureOutputDataSourceProperties();
                                        sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance4;
                                        
                                        JToken serverValue = propertiesValue10["server"];
                                        if (serverValue != null && serverValue.Type != JTokenType.Null)
                                        {
                                            string serverInstance = ((string)serverValue);
                                            propertiesInstance4.Server = serverInstance;
                                        }
                                        
                                        JToken databaseValue = propertiesValue10["database"];
                                        if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                        {
                                            string databaseInstance = ((string)databaseValue);
                                            propertiesInstance4.Database = databaseInstance;
                                        }
                                        
                                        JToken userValue = propertiesValue10["user"];
                                        if (userValue != null && userValue.Type != JTokenType.Null)
                                        {
                                            string userInstance = ((string)userValue);
                                            propertiesInstance4.User = userInstance;
                                        }
                                        
                                        JToken passwordValue = propertiesValue10["password"];
                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                        {
                                            string passwordInstance = ((string)passwordValue);
                                            propertiesInstance4.Password = passwordInstance;
                                        }
                                        
                                        JToken tableValue = propertiesValue10["table"];
                                        if (tableValue != null && tableValue.Type != JTokenType.Null)
                                        {
                                            string tableInstance = ((string)tableValue);
                                            propertiesInstance4.Table = tableInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                }
                            }
                            
                            JToken serializationValue2 = propertiesValue7["serialization"];
                            if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                            {
                                string typeName2 = ((string)serializationValue2["type"]);
                                if (typeName2 == "Csv")
                                {
                                    CsvSerialization csvSerializationInstance = new CsvSerialization();
                                    
                                    JToken propertiesValue11 = serializationValue2["properties"];
                                    if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                    {
                                        CsvSerializationProperties propertiesInstance5 = new CsvSerializationProperties();
                                        csvSerializationInstance.CsvSerializationProperties = propertiesInstance5;
                                        
                                        JToken fieldDelimiterValue = propertiesValue11["fieldDelimiter"];
                                        if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                        {
                                            string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                            propertiesInstance5.FieldDelimiter = fieldDelimiterInstance;
                                        }
                                        
                                        JToken encodingValue = propertiesValue11["encoding"];
                                        if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                        {
                                            string encodingInstance = ((string)encodingValue);
                                            propertiesInstance5.Encoding = encodingInstance;
                                        }
                                    }
                                    propertiesInstance.Serialization = csvSerializationInstance;
                                }
                                if (typeName2 == "Json")
                                {
                                    JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                    
                                    JToken propertiesValue12 = serializationValue2["properties"];
                                    if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                    {
                                        JsonSerializationProperties propertiesInstance6 = new JsonSerializationProperties();
                                        jsonSerializationInstance.JsonSerializationProperties = propertiesInstance6;
                                        
                                        JToken encodingValue2 = propertiesValue12["encoding"];
                                        if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                        {
                                            string encodingInstance2 = ((string)encodingValue2);
                                            propertiesInstance6.Encoding = encodingInstance2;
                                        }
                                    }
                                    propertiesInstance.Serialization = jsonSerializationInstance;
                                }
                                if (typeName2 == "Avro")
                                {
                                    AvroSerialization avroSerializationInstance = new AvroSerialization();
                                    
                                    JToken propertiesValue13 = serializationValue2["properties"];
                                    if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                    {
                                        AvroSerializationProperties propertiesInstance7 = new AvroSerializationProperties();
                                        avroSerializationInstance.AvroSerializationProperties = propertiesInstance7;
                                    }
                                    propertiesInstance.Serialization = avroSerializationInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create an output for a stream analytics job. The raw json content
        /// will be used.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an output for
        /// a stream analytics job. It is in json format
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output create operation.
        /// </returns>
        public async Task<OutputCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string jobName, string outputName, OutputCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (outputName == null)
            {
                throw new ArgumentNullException("outputName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/outputs/" + outputName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new OutputCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        OutputResponse outputResponseInstance = new OutputResponse();
                        result.OutputResponse = outputResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            outputResponseInstance.Id = idInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            outputResponseInstance.Type = typeInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            outputResponseInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            OutputProperties propertiesInstance = new OutputProperties();
                            outputResponseInstance.OutputProperties = propertiesInstance;
                            
                            JToken etagValue = propertiesValue["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                propertiesInstance.Etag = etagInstance;
                            }
                            
                            JToken datasourceValue = propertiesValue["datasource"];
                            if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)datasourceValue["type"]);
                                if (typeName == "Microsoft.Storage/Blob")
                                {
                                    BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                    
                                    JToken propertiesValue2 = datasourceValue["properties"];
                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                    {
                                        BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                        blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance2;
                                        
                                        JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                        if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                            {
                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                
                                                JToken accountNameValue = storageAccountsValue["accountName"];
                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                {
                                                    string accountNameInstance = ((string)accountNameValue);
                                                    storageAccountInstance.AccountName = accountNameInstance;
                                                }
                                                
                                                JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                {
                                                    string accountKeyInstance = ((string)accountKeyValue);
                                                    storageAccountInstance.AccountKey = accountKeyInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken containerValue = propertiesValue2["container"];
                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                        {
                                            string containerInstance = ((string)containerValue);
                                            propertiesInstance2.Container = containerInstance;
                                        }
                                        
                                        JToken blobPathPrefixValue = propertiesValue2["blobPathPrefix"];
                                        if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                        {
                                            string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                            propertiesInstance2.BlobPathPrefix = blobPathPrefixInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                }
                                if (typeName == "Microsoft.ServiceBus/EventHub")
                                {
                                    EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                    
                                    JToken propertiesValue3 = datasourceValue["properties"];
                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                    {
                                        EventHubOutputDataSourceProperties propertiesInstance3 = new EventHubOutputDataSourceProperties();
                                        eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance3;
                                        
                                        JToken serviceBusNamespaceValue = propertiesValue3["serviceBusNamespace"];
                                        if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                            propertiesInstance3.ServiceBusNamespace = serviceBusNamespaceInstance;
                                        }
                                        
                                        JToken sharedAccessPolicyNameValue = propertiesValue3["sharedAccessPolicyName"];
                                        if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                        {
                                            string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                            propertiesInstance3.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                        }
                                        
                                        JToken sharedAccessPolicyKeyValue = propertiesValue3["sharedAccessPolicyKey"];
                                        if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                        {
                                            string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                            propertiesInstance3.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                        }
                                        
                                        JToken eventHubNameValue = propertiesValue3["eventHubName"];
                                        if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                        {
                                            string eventHubNameInstance = ((string)eventHubNameValue);
                                            propertiesInstance3.EventHubName = eventHubNameInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                }
                                if (typeName == "Microsoft.Sql/Server/Database")
                                {
                                    SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                    
                                    JToken propertiesValue4 = datasourceValue["properties"];
                                    if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                    {
                                        SqlAzureOutputDataSourceProperties propertiesInstance4 = new SqlAzureOutputDataSourceProperties();
                                        sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance4;
                                        
                                        JToken serverValue = propertiesValue4["server"];
                                        if (serverValue != null && serverValue.Type != JTokenType.Null)
                                        {
                                            string serverInstance = ((string)serverValue);
                                            propertiesInstance4.Server = serverInstance;
                                        }
                                        
                                        JToken databaseValue = propertiesValue4["database"];
                                        if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                        {
                                            string databaseInstance = ((string)databaseValue);
                                            propertiesInstance4.Database = databaseInstance;
                                        }
                                        
                                        JToken userValue = propertiesValue4["user"];
                                        if (userValue != null && userValue.Type != JTokenType.Null)
                                        {
                                            string userInstance = ((string)userValue);
                                            propertiesInstance4.User = userInstance;
                                        }
                                        
                                        JToken passwordValue = propertiesValue4["password"];
                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                        {
                                            string passwordInstance = ((string)passwordValue);
                                            propertiesInstance4.Password = passwordInstance;
                                        }
                                        
                                        JToken tableValue = propertiesValue4["table"];
                                        if (tableValue != null && tableValue.Type != JTokenType.Null)
                                        {
                                            string tableInstance = ((string)tableValue);
                                            propertiesInstance4.Table = tableInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                }
                            }
                            
                            JToken serializationValue = propertiesValue["serialization"];
                            if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                            {
                                string typeName2 = ((string)serializationValue["type"]);
                                if (typeName2 == "Csv")
                                {
                                    CsvSerialization csvSerializationInstance = new CsvSerialization();
                                    
                                    JToken propertiesValue5 = serializationValue["properties"];
                                    if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                    {
                                        CsvSerializationProperties propertiesInstance5 = new CsvSerializationProperties();
                                        csvSerializationInstance.CsvSerializationProperties = propertiesInstance5;
                                        
                                        JToken fieldDelimiterValue = propertiesValue5["fieldDelimiter"];
                                        if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                        {
                                            string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                            propertiesInstance5.FieldDelimiter = fieldDelimiterInstance;
                                        }
                                        
                                        JToken encodingValue = propertiesValue5["encoding"];
                                        if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                        {
                                            string encodingInstance = ((string)encodingValue);
                                            propertiesInstance5.Encoding = encodingInstance;
                                        }
                                    }
                                    propertiesInstance.Serialization = csvSerializationInstance;
                                }
                                if (typeName2 == "Json")
                                {
                                    JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                    
                                    JToken propertiesValue6 = serializationValue["properties"];
                                    if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                    {
                                        JsonSerializationProperties propertiesInstance6 = new JsonSerializationProperties();
                                        jsonSerializationInstance.JsonSerializationProperties = propertiesInstance6;
                                        
                                        JToken encodingValue2 = propertiesValue6["encoding"];
                                        if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                        {
                                            string encodingInstance2 = ((string)encodingValue2);
                                            propertiesInstance6.Encoding = encodingInstance2;
                                        }
                                    }
                                    propertiesInstance.Serialization = jsonSerializationInstance;
                                }
                                if (typeName2 == "Avro")
                                {
                                    AvroSerialization avroSerializationInstance = new AvroSerialization();
                                    
                                    JToken propertiesValue7 = serializationValue["properties"];
                                    if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                    {
                                        AvroSerializationProperties propertiesInstance7 = new AvroSerializationProperties();
                                        avroSerializationInstance.AvroSerializationProperties = propertiesInstance7;
                                    }
                                    propertiesInstance.Serialization = avroSerializationInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceGroupName, string jobName, string outputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (outputName == null)
            {
                throw new ArgumentNullException("outputName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/outputs/" + outputName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output get operation.
        /// </returns>
        public async Task<OutputGetResponse> GetAsync(string resourceGroupName, string jobName, string outputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (outputName == null)
            {
                throw new ArgumentNullException("outputName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/outputs/" + outputName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new OutputGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        OutputResponse outputResponseInstance = new OutputResponse();
                        result.OutputResponse = outputResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            outputResponseInstance.Id = idInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            outputResponseInstance.Type = typeInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            outputResponseInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            OutputProperties propertiesInstance = new OutputProperties();
                            outputResponseInstance.OutputProperties = propertiesInstance;
                            
                            JToken etagValue = propertiesValue["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                propertiesInstance.Etag = etagInstance;
                            }
                            
                            JToken datasourceValue = propertiesValue["datasource"];
                            if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)datasourceValue["type"]);
                                if (typeName == "Microsoft.Storage/Blob")
                                {
                                    BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                    
                                    JToken propertiesValue2 = datasourceValue["properties"];
                                    if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                    {
                                        BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                        blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance2;
                                        
                                        JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                        if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                            {
                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                
                                                JToken accountNameValue = storageAccountsValue["accountName"];
                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                {
                                                    string accountNameInstance = ((string)accountNameValue);
                                                    storageAccountInstance.AccountName = accountNameInstance;
                                                }
                                                
                                                JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                {
                                                    string accountKeyInstance = ((string)accountKeyValue);
                                                    storageAccountInstance.AccountKey = accountKeyInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken containerValue = propertiesValue2["container"];
                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                        {
                                            string containerInstance = ((string)containerValue);
                                            propertiesInstance2.Container = containerInstance;
                                        }
                                        
                                        JToken blobPathPrefixValue = propertiesValue2["blobPathPrefix"];
                                        if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                        {
                                            string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                            propertiesInstance2.BlobPathPrefix = blobPathPrefixInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                }
                                if (typeName == "Microsoft.ServiceBus/EventHub")
                                {
                                    EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                    
                                    JToken propertiesValue3 = datasourceValue["properties"];
                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                    {
                                        EventHubOutputDataSourceProperties propertiesInstance3 = new EventHubOutputDataSourceProperties();
                                        eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance3;
                                        
                                        JToken serviceBusNamespaceValue = propertiesValue3["serviceBusNamespace"];
                                        if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                            propertiesInstance3.ServiceBusNamespace = serviceBusNamespaceInstance;
                                        }
                                        
                                        JToken sharedAccessPolicyNameValue = propertiesValue3["sharedAccessPolicyName"];
                                        if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                        {
                                            string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                            propertiesInstance3.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                        }
                                        
                                        JToken sharedAccessPolicyKeyValue = propertiesValue3["sharedAccessPolicyKey"];
                                        if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                        {
                                            string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                            propertiesInstance3.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                        }
                                        
                                        JToken eventHubNameValue = propertiesValue3["eventHubName"];
                                        if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                        {
                                            string eventHubNameInstance = ((string)eventHubNameValue);
                                            propertiesInstance3.EventHubName = eventHubNameInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                }
                                if (typeName == "Microsoft.Sql/Server/Database")
                                {
                                    SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                    
                                    JToken propertiesValue4 = datasourceValue["properties"];
                                    if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                    {
                                        SqlAzureOutputDataSourceProperties propertiesInstance4 = new SqlAzureOutputDataSourceProperties();
                                        sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance4;
                                        
                                        JToken serverValue = propertiesValue4["server"];
                                        if (serverValue != null && serverValue.Type != JTokenType.Null)
                                        {
                                            string serverInstance = ((string)serverValue);
                                            propertiesInstance4.Server = serverInstance;
                                        }
                                        
                                        JToken databaseValue = propertiesValue4["database"];
                                        if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                        {
                                            string databaseInstance = ((string)databaseValue);
                                            propertiesInstance4.Database = databaseInstance;
                                        }
                                        
                                        JToken userValue = propertiesValue4["user"];
                                        if (userValue != null && userValue.Type != JTokenType.Null)
                                        {
                                            string userInstance = ((string)userValue);
                                            propertiesInstance4.User = userInstance;
                                        }
                                        
                                        JToken passwordValue = propertiesValue4["password"];
                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                        {
                                            string passwordInstance = ((string)passwordValue);
                                            propertiesInstance4.Password = passwordInstance;
                                        }
                                        
                                        JToken tableValue = propertiesValue4["table"];
                                        if (tableValue != null && tableValue.Type != JTokenType.Null)
                                        {
                                            string tableInstance = ((string)tableValue);
                                            propertiesInstance4.Table = tableInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                }
                            }
                            
                            JToken serializationValue = propertiesValue["serialization"];
                            if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                            {
                                string typeName2 = ((string)serializationValue["type"]);
                                if (typeName2 == "Csv")
                                {
                                    CsvSerialization csvSerializationInstance = new CsvSerialization();
                                    
                                    JToken propertiesValue5 = serializationValue["properties"];
                                    if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                    {
                                        CsvSerializationProperties propertiesInstance5 = new CsvSerializationProperties();
                                        csvSerializationInstance.CsvSerializationProperties = propertiesInstance5;
                                        
                                        JToken fieldDelimiterValue = propertiesValue5["fieldDelimiter"];
                                        if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                        {
                                            string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                            propertiesInstance5.FieldDelimiter = fieldDelimiterInstance;
                                        }
                                        
                                        JToken encodingValue = propertiesValue5["encoding"];
                                        if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                        {
                                            string encodingInstance = ((string)encodingValue);
                                            propertiesInstance5.Encoding = encodingInstance;
                                        }
                                    }
                                    propertiesInstance.Serialization = csvSerializationInstance;
                                }
                                if (typeName2 == "Json")
                                {
                                    JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                    
                                    JToken propertiesValue6 = serializationValue["properties"];
                                    if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                    {
                                        JsonSerializationProperties propertiesInstance6 = new JsonSerializationProperties();
                                        jsonSerializationInstance.JsonSerializationProperties = propertiesInstance6;
                                        
                                        JToken encodingValue2 = propertiesValue6["encoding"];
                                        if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                        {
                                            string encodingInstance2 = ((string)encodingValue2);
                                            propertiesInstance6.Encoding = encodingInstance2;
                                        }
                                    }
                                    propertiesInstance.Serialization = jsonSerializationInstance;
                                }
                                if (typeName2 == "Avro")
                                {
                                    AvroSerialization avroSerializationInstance = new AvroSerialization();
                                    
                                    JToken propertiesValue7 = serializationValue["properties"];
                                    if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                    {
                                        AvroSerializationProperties propertiesInstance7 = new AvroSerializationProperties();
                                        avroSerializationInstance.AvroSerializationProperties = propertiesInstance7;
                                    }
                                    propertiesInstance.Serialization = avroSerializationInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a list of the outputs defined in a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output list operation.
        /// </returns>
        public async Task<OutputListResponse> ListOutputInJobAsync(string resourceGroupName, string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                Tracing.Enter(invocationId, this, "ListOutputInJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/outputs?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new OutputListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                OutputResponse outputResponseInstance = new OutputResponse();
                                result.OutputResponses.Add(outputResponseInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    outputResponseInstance.Id = idInstance;
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    outputResponseInstance.Type = typeInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    outputResponseInstance.Name = nameInstance;
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    OutputProperties propertiesInstance = new OutputProperties();
                                    outputResponseInstance.OutputProperties = propertiesInstance;
                                    
                                    JToken etagValue = propertiesValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        propertiesInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken datasourceValue = propertiesValue["datasource"];
                                    if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)datasourceValue["type"]);
                                        if (typeName == "Microsoft.Storage/Blob")
                                        {
                                            BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                            
                                            JToken propertiesValue2 = datasourceValue["properties"];
                                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                            {
                                                BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                                blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance2;
                                                
                                                JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                                if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                    {
                                                        StorageAccount storageAccountInstance = new StorageAccount();
                                                        propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                        
                                                        JToken accountNameValue = storageAccountsValue["accountName"];
                                                        if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                        {
                                                            string accountNameInstance = ((string)accountNameValue);
                                                            storageAccountInstance.AccountName = accountNameInstance;
                                                        }
                                                        
                                                        JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                        if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                        {
                                                            string accountKeyInstance = ((string)accountKeyValue);
                                                            storageAccountInstance.AccountKey = accountKeyInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken containerValue = propertiesValue2["container"];
                                                if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                {
                                                    string containerInstance = ((string)containerValue);
                                                    propertiesInstance2.Container = containerInstance;
                                                }
                                                
                                                JToken blobPathPrefixValue = propertiesValue2["blobPathPrefix"];
                                                if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                                {
                                                    string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                                    propertiesInstance2.BlobPathPrefix = blobPathPrefixInstance;
                                                }
                                            }
                                            propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                        }
                                        if (typeName == "Microsoft.ServiceBus/EventHub")
                                        {
                                            EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                            
                                            JToken propertiesValue3 = datasourceValue["properties"];
                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                            {
                                                EventHubOutputDataSourceProperties propertiesInstance3 = new EventHubOutputDataSourceProperties();
                                                eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance3;
                                                
                                                JToken serviceBusNamespaceValue = propertiesValue3["serviceBusNamespace"];
                                                if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                    propertiesInstance3.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyNameValue = propertiesValue3["sharedAccessPolicyName"];
                                                if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                    propertiesInstance3.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                }
                                                
                                                JToken sharedAccessPolicyKeyValue = propertiesValue3["sharedAccessPolicyKey"];
                                                if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                {
                                                    string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                    propertiesInstance3.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                }
                                                
                                                JToken eventHubNameValue = propertiesValue3["eventHubName"];
                                                if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                {
                                                    string eventHubNameInstance = ((string)eventHubNameValue);
                                                    propertiesInstance3.EventHubName = eventHubNameInstance;
                                                }
                                            }
                                            propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                        }
                                        if (typeName == "Microsoft.Sql/Server/Database")
                                        {
                                            SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                            
                                            JToken propertiesValue4 = datasourceValue["properties"];
                                            if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                            {
                                                SqlAzureOutputDataSourceProperties propertiesInstance4 = new SqlAzureOutputDataSourceProperties();
                                                sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance4;
                                                
                                                JToken serverValue = propertiesValue4["server"];
                                                if (serverValue != null && serverValue.Type != JTokenType.Null)
                                                {
                                                    string serverInstance = ((string)serverValue);
                                                    propertiesInstance4.Server = serverInstance;
                                                }
                                                
                                                JToken databaseValue = propertiesValue4["database"];
                                                if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                                {
                                                    string databaseInstance = ((string)databaseValue);
                                                    propertiesInstance4.Database = databaseInstance;
                                                }
                                                
                                                JToken userValue = propertiesValue4["user"];
                                                if (userValue != null && userValue.Type != JTokenType.Null)
                                                {
                                                    string userInstance = ((string)userValue);
                                                    propertiesInstance4.User = userInstance;
                                                }
                                                
                                                JToken passwordValue = propertiesValue4["password"];
                                                if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                                {
                                                    string passwordInstance = ((string)passwordValue);
                                                    propertiesInstance4.Password = passwordInstance;
                                                }
                                                
                                                JToken tableValue = propertiesValue4["table"];
                                                if (tableValue != null && tableValue.Type != JTokenType.Null)
                                                {
                                                    string tableInstance = ((string)tableValue);
                                                    propertiesInstance4.Table = tableInstance;
                                                }
                                            }
                                            propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                        }
                                    }
                                    
                                    JToken serializationValue = propertiesValue["serialization"];
                                    if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)serializationValue["type"]);
                                        if (typeName2 == "Csv")
                                        {
                                            CsvSerialization csvSerializationInstance = new CsvSerialization();
                                            
                                            JToken propertiesValue5 = serializationValue["properties"];
                                            if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                            {
                                                CsvSerializationProperties propertiesInstance5 = new CsvSerializationProperties();
                                                csvSerializationInstance.CsvSerializationProperties = propertiesInstance5;
                                                
                                                JToken fieldDelimiterValue = propertiesValue5["fieldDelimiter"];
                                                if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                    propertiesInstance5.FieldDelimiter = fieldDelimiterInstance;
                                                }
                                                
                                                JToken encodingValue = propertiesValue5["encoding"];
                                                if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance = ((string)encodingValue);
                                                    propertiesInstance5.Encoding = encodingInstance;
                                                }
                                            }
                                            propertiesInstance.Serialization = csvSerializationInstance;
                                        }
                                        if (typeName2 == "Json")
                                        {
                                            JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                            
                                            JToken propertiesValue6 = serializationValue["properties"];
                                            if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                            {
                                                JsonSerializationProperties propertiesInstance6 = new JsonSerializationProperties();
                                                jsonSerializationInstance.JsonSerializationProperties = propertiesInstance6;
                                                
                                                JToken encodingValue2 = propertiesValue6["encoding"];
                                                if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                {
                                                    string encodingInstance2 = ((string)encodingValue2);
                                                    propertiesInstance6.Encoding = encodingInstance2;
                                                }
                                            }
                                            propertiesInstance.Serialization = jsonSerializationInstance;
                                        }
                                        if (typeName2 == "Avro")
                                        {
                                            AvroSerialization avroSerializationInstance = new AvroSerialization();
                                            
                                            JToken propertiesValue7 = serializationValue["properties"];
                                            if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                            {
                                                AvroSerializationProperties propertiesInstance7 = new AvroSerializationProperties();
                                                avroSerializationInstance.AvroSerializationProperties = propertiesInstance7;
                                            }
                                            propertiesInstance.Serialization = avroSerializationInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Test an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to test an output for a stream
        /// analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> TestConnectionAsync(string resourceGroupName, string jobName, OutputTestConnectionParameters parameters, CancellationToken cancellationToken)
        {
            StreamAnalyticsManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "TestConnectionAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.Output.BeginTestConnectionAsync(resourceGroupName, jobName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 10;
                }
                while ((result.Status != Microsoft.WindowsAzure.OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 5;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update an output for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='outputName'>
        /// Required. The name of the output for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an output for
        /// a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the output patch operation.
        /// </returns>
        public async Task<OutputPatchResponse> UpdateAsync(string resourceGroupName, string jobName, string outputName, OutputPatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (outputName == null)
            {
                throw new ArgumentNullException("outputName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.OutputProperties == null)
            {
                throw new ArgumentNullException("parameters.OutputProperties");
            }
            if (parameters.OutputProperties.DataSource == null)
            {
                throw new ArgumentNullException("parameters.OutputProperties.DataSource");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("outputName", outputName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/outputs/" + outputName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject outputPatchParametersValue = new JObject();
                requestDoc = outputPatchParametersValue;
                
                JObject propertiesValue = new JObject();
                outputPatchParametersValue["properties"] = propertiesValue;
                
                if (parameters.OutputProperties.Etag != null)
                {
                    propertiesValue["etag"] = parameters.OutputProperties.Etag;
                }
                
                JObject datasourceValue = new JObject();
                propertiesValue["datasource"] = datasourceValue;
                if (parameters.OutputProperties.DataSource is BlobOutputDataSource)
                {
                    datasourceValue["type"] = "Microsoft.Storage/Blob";
                    BlobOutputDataSource derived = ((BlobOutputDataSource)parameters.OutputProperties.DataSource);
                    
                    JObject propertiesValue2 = new JObject();
                    datasourceValue["properties"] = propertiesValue2;
                    
                    if (derived.BlobOutputDataSourceProperties.StorageAccounts != null)
                    {
                        if (derived.BlobOutputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived.BlobOutputDataSourceProperties.StorageAccounts).IsInitialized)
                        {
                            JArray storageAccountsArray = new JArray();
                            foreach (StorageAccount storageAccountsItem in derived.BlobOutputDataSourceProperties.StorageAccounts)
                            {
                                JObject storageAccountValue = new JObject();
                                storageAccountsArray.Add(storageAccountValue);
                                
                                if (storageAccountsItem.AccountName != null)
                                {
                                    storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                }
                                
                                if (storageAccountsItem.AccountKey != null)
                                {
                                    storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                }
                            }
                            propertiesValue2["storageAccounts"] = storageAccountsArray;
                        }
                    }
                    
                    propertiesValue2["container"] = derived.BlobOutputDataSourceProperties.Container;
                    
                    if (derived.BlobOutputDataSourceProperties.BlobPathPrefix != null)
                    {
                        propertiesValue2["blobPathPrefix"] = derived.BlobOutputDataSourceProperties.BlobPathPrefix;
                    }
                }
                if (parameters.OutputProperties.DataSource is EventHubOutputDataSource)
                {
                    datasourceValue["type"] = "Microsoft.ServiceBus/EventHub";
                    EventHubOutputDataSource derived2 = ((EventHubOutputDataSource)parameters.OutputProperties.DataSource);
                    
                    JObject propertiesValue3 = new JObject();
                    datasourceValue["properties"] = propertiesValue3;
                    
                    propertiesValue3["serviceBusNamespace"] = derived2.EventHubOutputDataSourceProperties.ServiceBusNamespace;
                    
                    propertiesValue3["sharedAccessPolicyName"] = derived2.EventHubOutputDataSourceProperties.SharedAccessPolicyName;
                    
                    propertiesValue3["sharedAccessPolicyKey"] = derived2.EventHubOutputDataSourceProperties.SharedAccessPolicyKey;
                    
                    propertiesValue3["eventHubName"] = derived2.EventHubOutputDataSourceProperties.EventHubName;
                }
                if (parameters.OutputProperties.DataSource is SqlAzureOutputDataSource)
                {
                    datasourceValue["type"] = "Microsoft.Sql/Server/Database";
                    SqlAzureOutputDataSource derived3 = ((SqlAzureOutputDataSource)parameters.OutputProperties.DataSource);
                    
                    JObject propertiesValue4 = new JObject();
                    datasourceValue["properties"] = propertiesValue4;
                    
                    propertiesValue4["server"] = derived3.SqlAzureOutputDataSourceProperties.Server;
                    
                    propertiesValue4["database"] = derived3.SqlAzureOutputDataSourceProperties.Database;
                    
                    propertiesValue4["user"] = derived3.SqlAzureOutputDataSourceProperties.User;
                    
                    propertiesValue4["password"] = derived3.SqlAzureOutputDataSourceProperties.Password;
                    
                    propertiesValue4["table"] = derived3.SqlAzureOutputDataSourceProperties.Table;
                }
                
                if (parameters.OutputProperties.Serialization != null)
                {
                    JObject serializationValue = new JObject();
                    propertiesValue["serialization"] = serializationValue;
                    if (parameters.OutputProperties.Serialization is CsvSerialization)
                    {
                        serializationValue["type"] = "Csv";
                        CsvSerialization derived4 = ((CsvSerialization)parameters.OutputProperties.Serialization);
                        
                        JObject propertiesValue5 = new JObject();
                        serializationValue["properties"] = propertiesValue5;
                        
                        propertiesValue5["fieldDelimiter"] = derived4.CsvSerializationProperties.FieldDelimiter;
                        
                        propertiesValue5["encoding"] = derived4.CsvSerializationProperties.Encoding;
                    }
                    if (parameters.OutputProperties.Serialization is JsonSerialization)
                    {
                        serializationValue["type"] = "Json";
                        JsonSerialization derived5 = ((JsonSerialization)parameters.OutputProperties.Serialization);
                        
                        JObject propertiesValue6 = new JObject();
                        serializationValue["properties"] = propertiesValue6;
                        
                        propertiesValue6["encoding"] = derived5.JsonSerializationProperties.Encoding;
                    }
                    if (parameters.OutputProperties.Serialization is AvroSerialization)
                    {
                        serializationValue["type"] = "Avro";
                        AvroSerialization derived6 = ((AvroSerialization)parameters.OutputProperties.Serialization);
                        
                        serializationValue["properties"] = derived6.AvroSerializationProperties.ToString();
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OutputPatchResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new OutputPatchResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken propertiesValue7 = responseDoc["properties"];
                        if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                        {
                            OutputProperties propertiesInstance = new OutputProperties();
                            result.OutputProperties = propertiesInstance;
                            
                            JToken etagValue = propertiesValue7["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                propertiesInstance.Etag = etagInstance;
                            }
                            
                            JToken datasourceValue2 = propertiesValue7["datasource"];
                            if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                            {
                                string typeName = ((string)datasourceValue2["type"]);
                                if (typeName == "Microsoft.Storage/Blob")
                                {
                                    BlobOutputDataSource blobOutputDataSourceInstance = new BlobOutputDataSource();
                                    
                                    JToken propertiesValue8 = datasourceValue2["properties"];
                                    if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                    {
                                        BlobOutputDataSourceProperties propertiesInstance2 = new BlobOutputDataSourceProperties();
                                        blobOutputDataSourceInstance.BlobOutputDataSourceProperties = propertiesInstance2;
                                        
                                        JToken storageAccountsArray2 = propertiesValue8["storageAccounts"];
                                        if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray2))
                                            {
                                                StorageAccount storageAccountInstance = new StorageAccount();
                                                propertiesInstance2.StorageAccounts.Add(storageAccountInstance);
                                                
                                                JToken accountNameValue = storageAccountsValue["accountName"];
                                                if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                {
                                                    string accountNameInstance = ((string)accountNameValue);
                                                    storageAccountInstance.AccountName = accountNameInstance;
                                                }
                                                
                                                JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                {
                                                    string accountKeyInstance = ((string)accountKeyValue);
                                                    storageAccountInstance.AccountKey = accountKeyInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken containerValue = propertiesValue8["container"];
                                        if (containerValue != null && containerValue.Type != JTokenType.Null)
                                        {
                                            string containerInstance = ((string)containerValue);
                                            propertiesInstance2.Container = containerInstance;
                                        }
                                        
                                        JToken blobPathPrefixValue = propertiesValue8["blobPathPrefix"];
                                        if (blobPathPrefixValue != null && blobPathPrefixValue.Type != JTokenType.Null)
                                        {
                                            string blobPathPrefixInstance = ((string)blobPathPrefixValue);
                                            propertiesInstance2.BlobPathPrefix = blobPathPrefixInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = blobOutputDataSourceInstance;
                                }
                                if (typeName == "Microsoft.ServiceBus/EventHub")
                                {
                                    EventHubOutputDataSource eventHubOutputDataSourceInstance = new EventHubOutputDataSource();
                                    
                                    JToken propertiesValue9 = datasourceValue2["properties"];
                                    if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                    {
                                        EventHubOutputDataSourceProperties propertiesInstance3 = new EventHubOutputDataSourceProperties();
                                        eventHubOutputDataSourceInstance.EventHubOutputDataSourceProperties = propertiesInstance3;
                                        
                                        JToken serviceBusNamespaceValue = propertiesValue9["serviceBusNamespace"];
                                        if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                        {
                                            string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                            propertiesInstance3.ServiceBusNamespace = serviceBusNamespaceInstance;
                                        }
                                        
                                        JToken sharedAccessPolicyNameValue = propertiesValue9["sharedAccessPolicyName"];
                                        if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                        {
                                            string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                            propertiesInstance3.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                        }
                                        
                                        JToken sharedAccessPolicyKeyValue = propertiesValue9["sharedAccessPolicyKey"];
                                        if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                        {
                                            string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                            propertiesInstance3.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                        }
                                        
                                        JToken eventHubNameValue = propertiesValue9["eventHubName"];
                                        if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                        {
                                            string eventHubNameInstance = ((string)eventHubNameValue);
                                            propertiesInstance3.EventHubName = eventHubNameInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = eventHubOutputDataSourceInstance;
                                }
                                if (typeName == "Microsoft.Sql/Server/Database")
                                {
                                    SqlAzureOutputDataSource sqlAzureOutputDataSourceInstance = new SqlAzureOutputDataSource();
                                    
                                    JToken propertiesValue10 = datasourceValue2["properties"];
                                    if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                    {
                                        SqlAzureOutputDataSourceProperties propertiesInstance4 = new SqlAzureOutputDataSourceProperties();
                                        sqlAzureOutputDataSourceInstance.SqlAzureOutputDataSourceProperties = propertiesInstance4;
                                        
                                        JToken serverValue = propertiesValue10["server"];
                                        if (serverValue != null && serverValue.Type != JTokenType.Null)
                                        {
                                            string serverInstance = ((string)serverValue);
                                            propertiesInstance4.Server = serverInstance;
                                        }
                                        
                                        JToken databaseValue = propertiesValue10["database"];
                                        if (databaseValue != null && databaseValue.Type != JTokenType.Null)
                                        {
                                            string databaseInstance = ((string)databaseValue);
                                            propertiesInstance4.Database = databaseInstance;
                                        }
                                        
                                        JToken userValue = propertiesValue10["user"];
                                        if (userValue != null && userValue.Type != JTokenType.Null)
                                        {
                                            string userInstance = ((string)userValue);
                                            propertiesInstance4.User = userInstance;
                                        }
                                        
                                        JToken passwordValue = propertiesValue10["password"];
                                        if (passwordValue != null && passwordValue.Type != JTokenType.Null)
                                        {
                                            string passwordInstance = ((string)passwordValue);
                                            propertiesInstance4.Password = passwordInstance;
                                        }
                                        
                                        JToken tableValue = propertiesValue10["table"];
                                        if (tableValue != null && tableValue.Type != JTokenType.Null)
                                        {
                                            string tableInstance = ((string)tableValue);
                                            propertiesInstance4.Table = tableInstance;
                                        }
                                    }
                                    propertiesInstance.DataSource = sqlAzureOutputDataSourceInstance;
                                }
                            }
                            
                            JToken serializationValue2 = propertiesValue7["serialization"];
                            if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                            {
                                string typeName2 = ((string)serializationValue2["type"]);
                                if (typeName2 == "Csv")
                                {
                                    CsvSerialization csvSerializationInstance = new CsvSerialization();
                                    
                                    JToken propertiesValue11 = serializationValue2["properties"];
                                    if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                    {
                                        CsvSerializationProperties propertiesInstance5 = new CsvSerializationProperties();
                                        csvSerializationInstance.CsvSerializationProperties = propertiesInstance5;
                                        
                                        JToken fieldDelimiterValue = propertiesValue11["fieldDelimiter"];
                                        if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                        {
                                            string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                            propertiesInstance5.FieldDelimiter = fieldDelimiterInstance;
                                        }
                                        
                                        JToken encodingValue = propertiesValue11["encoding"];
                                        if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                        {
                                            string encodingInstance = ((string)encodingValue);
                                            propertiesInstance5.Encoding = encodingInstance;
                                        }
                                    }
                                    propertiesInstance.Serialization = csvSerializationInstance;
                                }
                                if (typeName2 == "Json")
                                {
                                    JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                    
                                    JToken propertiesValue12 = serializationValue2["properties"];
                                    if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                    {
                                        JsonSerializationProperties propertiesInstance6 = new JsonSerializationProperties();
                                        jsonSerializationInstance.JsonSerializationProperties = propertiesInstance6;
                                        
                                        JToken encodingValue2 = propertiesValue12["encoding"];
                                        if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                        {
                                            string encodingInstance2 = ((string)encodingValue2);
                                            propertiesInstance6.Encoding = encodingInstance2;
                                        }
                                    }
                                    propertiesInstance.Serialization = jsonSerializationInstance;
                                }
                                if (typeName2 == "Avro")
                                {
                                    AvroSerialization avroSerializationInstance = new AvroSerialization();
                                    
                                    JToken propertiesValue13 = serializationValue2["properties"];
                                    if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                    {
                                        AvroSerializationProperties propertiesInstance7 = new AvroSerializationProperties();
                                        avroSerializationInstance.AvroSerializationProperties = propertiesInstance7;
                                    }
                                    propertiesInstance.Serialization = avroSerializationInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
