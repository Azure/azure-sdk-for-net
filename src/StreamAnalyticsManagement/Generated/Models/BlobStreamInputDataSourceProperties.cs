// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Azure.Management.StreamAnalytics.Models;
using Microsoft.WindowsAzure.Common.Internals;

namespace Microsoft.Azure.Management.StreamAnalytics.Models
{
    /// <summary>
    /// The properties of the blob data source as stream input.
    /// </summary>
    public partial class BlobStreamInputDataSourceProperties
    {
        private string _blobSerializationBoundary;
        
        /// <summary>
        /// Optional. The blob serialization boundary.
        /// </summary>
        public string BlobSerializationBoundary
        {
            get { return this._blobSerializationBoundary; }
            set { this._blobSerializationBoundary = value; }
        }
        
        private string _container;
        
        /// <summary>
        /// Required. The container of the blob.
        /// </summary>
        public string Container
        {
            get { return this._container; }
            set { this._container = value; }
        }
        
        private string _dateFormat;
        
        /// <summary>
        /// Optional. The date format pattern.
        /// </summary>
        public string DateFormat
        {
            get { return this._dateFormat; }
            set { this._dateFormat = value; }
        }
        
        private string _pathPattern;
        
        /// <summary>
        /// Optional. The blob path pattern.
        /// </summary>
        public string PathPattern
        {
            get { return this._pathPattern; }
            set { this._pathPattern = value; }
        }
        
        private int? _sourcePartitionCount;
        
        /// <summary>
        /// Optional. The partition count of the blob input data source. Range
        /// 1 â€“ 256.
        /// </summary>
        public int? SourcePartitionCount
        {
            get { return this._sourcePartitionCount; }
            set { this._sourcePartitionCount = value; }
        }
        
        private IList<StorageAccount> _storageAccounts;
        
        /// <summary>
        /// Optional. A list of one or more storage accounts.
        /// </summary>
        public IList<StorageAccount> StorageAccounts
        {
            get { return this._storageAccounts; }
            set { this._storageAccounts = value; }
        }
        
        private string _timeFormat;
        
        /// <summary>
        /// Optional. The time format pattern.
        /// </summary>
        public string TimeFormat
        {
            get { return this._timeFormat; }
            set { this._timeFormat = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// BlobStreamInputDataSourceProperties class.
        /// </summary>
        public BlobStreamInputDataSourceProperties()
        {
            this.StorageAccounts = new LazyList<StorageAccount>();
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// BlobStreamInputDataSourceProperties class with required arguments.
        /// </summary>
        public BlobStreamInputDataSourceProperties(string container)
            : this()
        {
            if (container == null)
            {
                throw new ArgumentNullException("container");
            }
            this.Container = container;
        }
    }
}
