// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.StreamAnalytics;
using Microsoft.Azure.Management.StreamAnalytics.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.StreamAnalytics
{
    /// <summary>
    /// Operations for managing the input of the stream analytics job.
    /// </summary>
    internal partial class InputOperations : IServiceOperations<StreamAnalyticsManagementClient>, IInputOperations
    {
        /// <summary>
        /// Initializes a new instance of the InputOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal InputOperations(StreamAnalyticsManagementClient client)
        {
            this._client = client;
        }
        
        private StreamAnalyticsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.StreamAnalytics.StreamAnalyticsManagementClient.
        /// </summary>
        public StreamAnalyticsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Test the connectivity of an input for a stream analytics job.
        /// Asynchronous call.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to test an input for a stream
        /// analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginTestConnectionAsync(string resourceGroupName, string jobName, InputTestConnectionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginTestConnectionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/inputs/" + (parameters.InputName != null ? parameters.InputName.Trim() : "") + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NotFound)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.BadRequest)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an input for
        /// a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the input create operation.
        /// </returns>
        public async Task<InputCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string jobName, InputCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Input != null)
            {
                if (parameters.Input.InputProperties == null)
                {
                    throw new ArgumentNullException("parameters.Input.InputProperties");
                }
                if (parameters.Input.InputProperties.Serialization == null)
                {
                    throw new ArgumentNullException("parameters.Input.InputProperties.Serialization");
                }
                if (parameters.Input.Name == null)
                {
                    throw new ArgumentNullException("parameters.Input.Name");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/inputs/" + (parameters.Input.Name != null ? parameters.Input.Name.Trim() : "") + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject inputCreateOrUpdateParametersValue = new JObject();
                requestDoc = inputCreateOrUpdateParametersValue;
                
                if (parameters.Input != null)
                {
                    inputCreateOrUpdateParametersValue["name"] = parameters.Input.Name;
                    
                    JObject propertiesValue = new JObject();
                    inputCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    if (parameters.Input.InputProperties is ReferenceInputProperties)
                    {
                        propertiesValue["type"] = "Reference";
                        ReferenceInputProperties derived = ((ReferenceInputProperties)parameters.Input.InputProperties);
                        
                        JObject datasourceValue = new JObject();
                        propertiesValue["datasource"] = datasourceValue;
                        if (derived.DataSource is BlobReferenceInputDataSource)
                        {
                            datasourceValue["type"] = "Microsoft.Storage/Blob";
                            BlobReferenceInputDataSource derived2 = ((BlobReferenceInputDataSource)derived.DataSource);
                            
                            JObject propertiesValue2 = new JObject();
                            datasourceValue["properties"] = propertiesValue2;
                            
                            if (derived2.BlobReferenceInputDataSourceProperties.StorageAccounts != null)
                            {
                                if (derived2.BlobReferenceInputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived2.BlobReferenceInputDataSourceProperties.StorageAccounts).IsInitialized)
                                {
                                    JArray storageAccountsArray = new JArray();
                                    foreach (StorageAccount storageAccountsItem in derived2.BlobReferenceInputDataSourceProperties.StorageAccounts)
                                    {
                                        JObject storageAccountValue = new JObject();
                                        storageAccountsArray.Add(storageAccountValue);
                                        
                                        if (storageAccountsItem.AccountName != null)
                                        {
                                            storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                        }
                                        
                                        if (storageAccountsItem.AccountKey != null)
                                        {
                                            storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                        }
                                    }
                                    propertiesValue2["storageAccounts"] = storageAccountsArray;
                                }
                            }
                            
                            propertiesValue2["container"] = derived2.BlobReferenceInputDataSourceProperties.Container;
                            
                            propertiesValue2["blobName"] = derived2.BlobReferenceInputDataSourceProperties.BlobName;
                        }
                        
                        if (derived.Etag != null)
                        {
                            propertiesValue["etag"] = derived.Etag;
                        }
                        
                        JObject serializationValue = new JObject();
                        propertiesValue["serialization"] = serializationValue;
                        if (derived.Serialization is CsvSerialization)
                        {
                            serializationValue["type"] = "Csv";
                            CsvSerialization derived3 = ((CsvSerialization)derived.Serialization);
                            
                            JObject propertiesValue3 = new JObject();
                            serializationValue["properties"] = propertiesValue3;
                            
                            propertiesValue3["fieldDelimiter"] = derived3.CsvSerializationProperties.FieldDelimiter;
                            
                            propertiesValue3["encoding"] = derived3.CsvSerializationProperties.Encoding;
                        }
                        if (derived.Serialization is JsonSerialization)
                        {
                            serializationValue["type"] = "Json";
                            JsonSerialization derived4 = ((JsonSerialization)derived.Serialization);
                            
                            JObject propertiesValue4 = new JObject();
                            serializationValue["properties"] = propertiesValue4;
                            
                            propertiesValue4["encoding"] = derived4.JsonSerializationProperties.Encoding;
                        }
                        if (derived.Serialization is AvroSerialization)
                        {
                            serializationValue["type"] = "Avro";
                            AvroSerialization derived5 = ((AvroSerialization)derived.Serialization);
                            
                            serializationValue["properties"] = derived5.AvroSerializationProperties.ToString();
                        }
                    }
                    if (parameters.Input.InputProperties is StreamInputProperties)
                    {
                        propertiesValue["type"] = "Stream";
                        StreamInputProperties derived6 = ((StreamInputProperties)parameters.Input.InputProperties);
                        
                        JObject datasourceValue2 = new JObject();
                        propertiesValue["datasource"] = datasourceValue2;
                        if (derived6.DataSource is BlobStreamInputDataSource)
                        {
                            datasourceValue2["type"] = "Microsoft.Storage/Blob";
                            BlobStreamInputDataSource derived7 = ((BlobStreamInputDataSource)derived6.DataSource);
                            
                            JObject propertiesValue5 = new JObject();
                            datasourceValue2["properties"] = propertiesValue5;
                            
                            if (derived7.BlobStreamInputDataSourceProperties.StorageAccounts != null)
                            {
                                if (derived7.BlobStreamInputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived7.BlobStreamInputDataSourceProperties.StorageAccounts).IsInitialized)
                                {
                                    JArray storageAccountsArray2 = new JArray();
                                    foreach (StorageAccount storageAccountsItem2 in derived7.BlobStreamInputDataSourceProperties.StorageAccounts)
                                    {
                                        JObject storageAccountValue2 = new JObject();
                                        storageAccountsArray2.Add(storageAccountValue2);
                                        
                                        if (storageAccountsItem2.AccountName != null)
                                        {
                                            storageAccountValue2["accountName"] = storageAccountsItem2.AccountName;
                                        }
                                        
                                        if (storageAccountsItem2.AccountKey != null)
                                        {
                                            storageAccountValue2["accountKey"] = storageAccountsItem2.AccountKey;
                                        }
                                    }
                                    propertiesValue5["storageAccounts"] = storageAccountsArray2;
                                }
                            }
                            
                            propertiesValue5["container"] = derived7.BlobStreamInputDataSourceProperties.Container;
                            
                            if (derived7.BlobStreamInputDataSourceProperties.BlobSerializationBoundary != null)
                            {
                                propertiesValue5["blobSerializationBoundary"] = derived7.BlobStreamInputDataSourceProperties.BlobSerializationBoundary;
                            }
                            
                            if (derived7.BlobStreamInputDataSourceProperties.PathPattern != null)
                            {
                                propertiesValue5["pathPattern"] = derived7.BlobStreamInputDataSourceProperties.PathPattern;
                            }
                            
                            if (derived7.BlobStreamInputDataSourceProperties.DateFormat != null)
                            {
                                propertiesValue5["dateFormat"] = derived7.BlobStreamInputDataSourceProperties.DateFormat;
                            }
                            
                            if (derived7.BlobStreamInputDataSourceProperties.TimeFormat != null)
                            {
                                propertiesValue5["timeFormat"] = derived7.BlobStreamInputDataSourceProperties.TimeFormat;
                            }
                            
                            if (derived7.BlobStreamInputDataSourceProperties.SourcePartitionCount != null)
                            {
                                propertiesValue5["sourcePartitionCount"] = derived7.BlobStreamInputDataSourceProperties.SourcePartitionCount.Value;
                            }
                        }
                        if (derived6.DataSource is EventHubStreamInputDataSource)
                        {
                            datasourceValue2["type"] = "Microsoft.ServiceBus/EventHub";
                            EventHubStreamInputDataSource derived8 = ((EventHubStreamInputDataSource)derived6.DataSource);
                            
                            JObject propertiesValue6 = new JObject();
                            datasourceValue2["properties"] = propertiesValue6;
                            
                            propertiesValue6["serviceBusNamespace"] = derived8.EventHubStreamInputDataSourceProperties.ServiceBusNamespace;
                            
                            propertiesValue6["sharedAccessPolicyName"] = derived8.EventHubStreamInputDataSourceProperties.SharedAccessPolicyName;
                            
                            propertiesValue6["sharedAccessPolicyKey"] = derived8.EventHubStreamInputDataSourceProperties.SharedAccessPolicyKey;
                            
                            propertiesValue6["eventHubName"] = derived8.EventHubStreamInputDataSourceProperties.EventHubName;
                        }
                        
                        if (derived6.Etag != null)
                        {
                            propertiesValue["etag"] = derived6.Etag;
                        }
                        
                        JObject serializationValue2 = new JObject();
                        propertiesValue["serialization"] = serializationValue2;
                        if (derived6.Serialization is CsvSerialization)
                        {
                            serializationValue2["type"] = "Csv";
                            CsvSerialization derived9 = ((CsvSerialization)derived6.Serialization);
                            
                            JObject propertiesValue7 = new JObject();
                            serializationValue2["properties"] = propertiesValue7;
                            
                            propertiesValue7["fieldDelimiter"] = derived9.CsvSerializationProperties.FieldDelimiter;
                            
                            propertiesValue7["encoding"] = derived9.CsvSerializationProperties.Encoding;
                        }
                        if (derived6.Serialization is JsonSerialization)
                        {
                            serializationValue2["type"] = "Json";
                            JsonSerialization derived10 = ((JsonSerialization)derived6.Serialization);
                            
                            JObject propertiesValue8 = new JObject();
                            serializationValue2["properties"] = propertiesValue8;
                            
                            propertiesValue8["encoding"] = derived10.JsonSerializationProperties.Encoding;
                        }
                        if (derived6.Serialization is AvroSerialization)
                        {
                            serializationValue2["type"] = "Avro";
                            AvroSerialization derived11 = ((AvroSerialization)derived6.Serialization);
                            
                            serializationValue2["properties"] = derived11.AvroSerializationProperties.ToString();
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new InputCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        InputResponse inputResponseInstance = new InputResponse();
                        result.InputResponse = inputResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            inputResponseInstance.Id = idInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            inputResponseInstance.Type = typeInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            inputResponseInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue9 = responseDoc["properties"];
                        if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                        {
                            string typeName = ((string)propertiesValue9["type"]);
                            if (typeName == "Reference")
                            {
                                ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                
                                JToken datasourceValue3 = propertiesValue9["datasource"];
                                if (datasourceValue3 != null && datasourceValue3.Type != JTokenType.Null)
                                {
                                    string typeName2 = ((string)datasourceValue3["type"]);
                                    if (typeName2 == "Microsoft.Storage/Blob")
                                    {
                                        BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                        
                                        JToken propertiesValue10 = datasourceValue3["properties"];
                                        if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                        {
                                            BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                            blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance;
                                            
                                            JToken storageAccountsArray3 = propertiesValue10["storageAccounts"];
                                            if (storageAccountsArray3 != null && storageAccountsArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray3))
                                                {
                                                    StorageAccount storageAccountInstance = new StorageAccount();
                                                    propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                    
                                                    JToken accountNameValue = storageAccountsValue["accountName"];
                                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance = ((string)accountNameValue);
                                                        storageAccountInstance.AccountName = accountNameInstance;
                                                    }
                                                    
                                                    JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                    if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance = ((string)accountKeyValue);
                                                        storageAccountInstance.AccountKey = accountKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue = propertiesValue10["container"];
                                            if (containerValue != null && containerValue.Type != JTokenType.Null)
                                            {
                                                string containerInstance = ((string)containerValue);
                                                propertiesInstance.Container = containerInstance;
                                            }
                                            
                                            JToken blobNameValue = propertiesValue10["blobName"];
                                            if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                            {
                                                string blobNameInstance = ((string)blobNameValue);
                                                propertiesInstance.BlobName = blobNameInstance;
                                            }
                                        }
                                        referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                    }
                                }
                                
                                JToken etagValue = propertiesValue9["etag"];
                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                {
                                    string etagInstance = ((string)etagValue);
                                    referenceInputPropertiesInstance.Etag = etagInstance;
                                }
                                
                                JToken serializationValue3 = propertiesValue9["serialization"];
                                if (serializationValue3 != null && serializationValue3.Type != JTokenType.Null)
                                {
                                    string typeName3 = ((string)serializationValue3["type"]);
                                    if (typeName3 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance = new CsvSerialization();
                                        
                                        JToken propertiesValue11 = serializationValue3["properties"];
                                        if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                            csvSerializationInstance.CsvSerializationProperties = propertiesInstance2;
                                            
                                            JToken fieldDelimiterValue = propertiesValue11["fieldDelimiter"];
                                            if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                            }
                                            
                                            JToken encodingValue = propertiesValue11["encoding"];
                                            if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                            {
                                                string encodingInstance = ((string)encodingValue);
                                                propertiesInstance2.Encoding = encodingInstance;
                                            }
                                        }
                                        referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                    }
                                    if (typeName3 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                        
                                        JToken propertiesValue12 = serializationValue3["properties"];
                                        if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                            jsonSerializationInstance.JsonSerializationProperties = propertiesInstance3;
                                            
                                            JToken encodingValue2 = propertiesValue12["encoding"];
                                            if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                            {
                                                string encodingInstance2 = ((string)encodingValue2);
                                                propertiesInstance3.Encoding = encodingInstance2;
                                            }
                                        }
                                        referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                    }
                                    if (typeName3 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance = new AvroSerialization();
                                        
                                        JToken propertiesValue13 = serializationValue3["properties"];
                                        if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                            avroSerializationInstance.AvroSerializationProperties = propertiesInstance4;
                                        }
                                        referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                    }
                                }
                                inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                            }
                            if (typeName == "Stream")
                            {
                                StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                
                                JToken datasourceValue4 = propertiesValue9["datasource"];
                                if (datasourceValue4 != null && datasourceValue4.Type != JTokenType.Null)
                                {
                                    string typeName4 = ((string)datasourceValue4["type"]);
                                    if (typeName4 == "Microsoft.Storage/Blob")
                                    {
                                        BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                        
                                        JToken propertiesValue14 = datasourceValue4["properties"];
                                        if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                        {
                                            BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                            blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance5;
                                            
                                            JToken storageAccountsArray4 = propertiesValue14["storageAccounts"];
                                            if (storageAccountsArray4 != null && storageAccountsArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray4))
                                                {
                                                    StorageAccount storageAccountInstance2 = new StorageAccount();
                                                    propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                    
                                                    JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                    if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance2 = ((string)accountNameValue2);
                                                        storageAccountInstance2.AccountName = accountNameInstance2;
                                                    }
                                                    
                                                    JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                    if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance2 = ((string)accountKeyValue2);
                                                        storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue2 = propertiesValue14["container"];
                                            if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                            {
                                                string containerInstance2 = ((string)containerValue2);
                                                propertiesInstance5.Container = containerInstance2;
                                            }
                                            
                                            JToken blobSerializationBoundaryValue = propertiesValue14["blobSerializationBoundary"];
                                            if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                            {
                                                string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                propertiesInstance5.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                            }
                                            
                                            JToken pathPatternValue = propertiesValue14["pathPattern"];
                                            if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                            {
                                                string pathPatternInstance = ((string)pathPatternValue);
                                                propertiesInstance5.PathPattern = pathPatternInstance;
                                            }
                                            
                                            JToken dateFormatValue = propertiesValue14["dateFormat"];
                                            if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                            {
                                                string dateFormatInstance = ((string)dateFormatValue);
                                                propertiesInstance5.DateFormat = dateFormatInstance;
                                            }
                                            
                                            JToken timeFormatValue = propertiesValue14["timeFormat"];
                                            if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                            {
                                                string timeFormatInstance = ((string)timeFormatValue);
                                                propertiesInstance5.TimeFormat = timeFormatInstance;
                                            }
                                            
                                            JToken sourcePartitionCountValue = propertiesValue14["sourcePartitionCount"];
                                            if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                            {
                                                int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                            }
                                        }
                                        streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                    }
                                    if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                    {
                                        EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                        
                                        JToken propertiesValue15 = datasourceValue4["properties"];
                                        if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                        {
                                            EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                            eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance6;
                                            
                                            JToken serviceBusNamespaceValue = propertiesValue15["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue = propertiesValue15["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue = propertiesValue15["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                            }
                                            
                                            JToken eventHubNameValue = propertiesValue15["eventHubName"];
                                            if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                            {
                                                string eventHubNameInstance = ((string)eventHubNameValue);
                                                propertiesInstance6.EventHubName = eventHubNameInstance;
                                            }
                                        }
                                        streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                    }
                                }
                                
                                JToken etagValue2 = propertiesValue9["etag"];
                                if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                {
                                    string etagInstance2 = ((string)etagValue2);
                                    streamInputPropertiesInstance.Etag = etagInstance2;
                                }
                                
                                JToken serializationValue4 = propertiesValue9["serialization"];
                                if (serializationValue4 != null && serializationValue4.Type != JTokenType.Null)
                                {
                                    string typeName5 = ((string)serializationValue4["type"]);
                                    if (typeName5 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                        
                                        JToken propertiesValue16 = serializationValue4["properties"];
                                        if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance7 = new CsvSerializationProperties();
                                            csvSerializationInstance2.CsvSerializationProperties = propertiesInstance7;
                                            
                                            JToken fieldDelimiterValue2 = propertiesValue16["fieldDelimiter"];
                                            if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                propertiesInstance7.FieldDelimiter = fieldDelimiterInstance2;
                                            }
                                            
                                            JToken encodingValue3 = propertiesValue16["encoding"];
                                            if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                            {
                                                string encodingInstance3 = ((string)encodingValue3);
                                                propertiesInstance7.Encoding = encodingInstance3;
                                            }
                                        }
                                        streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                    }
                                    if (typeName5 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                        
                                        JToken propertiesValue17 = serializationValue4["properties"];
                                        if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance8 = new JsonSerializationProperties();
                                            jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance8;
                                            
                                            JToken encodingValue4 = propertiesValue17["encoding"];
                                            if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                            {
                                                string encodingInstance4 = ((string)encodingValue4);
                                                propertiesInstance8.Encoding = encodingInstance4;
                                            }
                                        }
                                        streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                    }
                                    if (typeName5 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                        
                                        JToken propertiesValue18 = serializationValue4["properties"];
                                        if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance9 = new AvroSerializationProperties();
                                            avroSerializationInstance2.AvroSerializationProperties = propertiesInstance9;
                                        }
                                        streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                    }
                                }
                                inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update an input for a stream analytics job. The raw json
        /// content will be used.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update an input for
        /// a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the input create operation.
        /// </returns>
        public async Task<InputCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string jobName, string inputName, InputCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (inputName == null)
            {
                throw new ArgumentNullException("inputName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/inputs/" + inputName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new InputCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        InputResponse inputResponseInstance = new InputResponse();
                        result.InputResponse = inputResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            inputResponseInstance.Id = idInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            inputResponseInstance.Type = typeInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            inputResponseInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            string typeName = ((string)propertiesValue["type"]);
                            if (typeName == "Reference")
                            {
                                ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                
                                JToken datasourceValue = propertiesValue["datasource"];
                                if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                {
                                    string typeName2 = ((string)datasourceValue["type"]);
                                    if (typeName2 == "Microsoft.Storage/Blob")
                                    {
                                        BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                        
                                        JToken propertiesValue2 = datasourceValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                            blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance;
                                            
                                            JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                            if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                {
                                                    StorageAccount storageAccountInstance = new StorageAccount();
                                                    propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                    
                                                    JToken accountNameValue = storageAccountsValue["accountName"];
                                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance = ((string)accountNameValue);
                                                        storageAccountInstance.AccountName = accountNameInstance;
                                                    }
                                                    
                                                    JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                    if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance = ((string)accountKeyValue);
                                                        storageAccountInstance.AccountKey = accountKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue = propertiesValue2["container"];
                                            if (containerValue != null && containerValue.Type != JTokenType.Null)
                                            {
                                                string containerInstance = ((string)containerValue);
                                                propertiesInstance.Container = containerInstance;
                                            }
                                            
                                            JToken blobNameValue = propertiesValue2["blobName"];
                                            if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                            {
                                                string blobNameInstance = ((string)blobNameValue);
                                                propertiesInstance.BlobName = blobNameInstance;
                                            }
                                        }
                                        referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                    }
                                }
                                
                                JToken etagValue = propertiesValue["etag"];
                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                {
                                    string etagInstance = ((string)etagValue);
                                    referenceInputPropertiesInstance.Etag = etagInstance;
                                }
                                
                                JToken serializationValue = propertiesValue["serialization"];
                                if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                {
                                    string typeName3 = ((string)serializationValue["type"]);
                                    if (typeName3 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance = new CsvSerialization();
                                        
                                        JToken propertiesValue3 = serializationValue["properties"];
                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                            csvSerializationInstance.CsvSerializationProperties = propertiesInstance2;
                                            
                                            JToken fieldDelimiterValue = propertiesValue3["fieldDelimiter"];
                                            if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                            }
                                            
                                            JToken encodingValue = propertiesValue3["encoding"];
                                            if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                            {
                                                string encodingInstance = ((string)encodingValue);
                                                propertiesInstance2.Encoding = encodingInstance;
                                            }
                                        }
                                        referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                    }
                                    if (typeName3 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                        
                                        JToken propertiesValue4 = serializationValue["properties"];
                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                            jsonSerializationInstance.JsonSerializationProperties = propertiesInstance3;
                                            
                                            JToken encodingValue2 = propertiesValue4["encoding"];
                                            if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                            {
                                                string encodingInstance2 = ((string)encodingValue2);
                                                propertiesInstance3.Encoding = encodingInstance2;
                                            }
                                        }
                                        referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                    }
                                    if (typeName3 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance = new AvroSerialization();
                                        
                                        JToken propertiesValue5 = serializationValue["properties"];
                                        if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                            avroSerializationInstance.AvroSerializationProperties = propertiesInstance4;
                                        }
                                        referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                    }
                                }
                                inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                            }
                            if (typeName == "Stream")
                            {
                                StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                
                                JToken datasourceValue2 = propertiesValue["datasource"];
                                if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                {
                                    string typeName4 = ((string)datasourceValue2["type"]);
                                    if (typeName4 == "Microsoft.Storage/Blob")
                                    {
                                        BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                        
                                        JToken propertiesValue6 = datasourceValue2["properties"];
                                        if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                        {
                                            BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                            blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance5;
                                            
                                            JToken storageAccountsArray2 = propertiesValue6["storageAccounts"];
                                            if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                {
                                                    StorageAccount storageAccountInstance2 = new StorageAccount();
                                                    propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                    
                                                    JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                    if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance2 = ((string)accountNameValue2);
                                                        storageAccountInstance2.AccountName = accountNameInstance2;
                                                    }
                                                    
                                                    JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                    if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance2 = ((string)accountKeyValue2);
                                                        storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue2 = propertiesValue6["container"];
                                            if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                            {
                                                string containerInstance2 = ((string)containerValue2);
                                                propertiesInstance5.Container = containerInstance2;
                                            }
                                            
                                            JToken blobSerializationBoundaryValue = propertiesValue6["blobSerializationBoundary"];
                                            if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                            {
                                                string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                propertiesInstance5.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                            }
                                            
                                            JToken pathPatternValue = propertiesValue6["pathPattern"];
                                            if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                            {
                                                string pathPatternInstance = ((string)pathPatternValue);
                                                propertiesInstance5.PathPattern = pathPatternInstance;
                                            }
                                            
                                            JToken dateFormatValue = propertiesValue6["dateFormat"];
                                            if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                            {
                                                string dateFormatInstance = ((string)dateFormatValue);
                                                propertiesInstance5.DateFormat = dateFormatInstance;
                                            }
                                            
                                            JToken timeFormatValue = propertiesValue6["timeFormat"];
                                            if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                            {
                                                string timeFormatInstance = ((string)timeFormatValue);
                                                propertiesInstance5.TimeFormat = timeFormatInstance;
                                            }
                                            
                                            JToken sourcePartitionCountValue = propertiesValue6["sourcePartitionCount"];
                                            if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                            {
                                                int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                            }
                                        }
                                        streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                    }
                                    if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                    {
                                        EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                        
                                        JToken propertiesValue7 = datasourceValue2["properties"];
                                        if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                        {
                                            EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                            eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance6;
                                            
                                            JToken serviceBusNamespaceValue = propertiesValue7["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue = propertiesValue7["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue = propertiesValue7["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                            }
                                            
                                            JToken eventHubNameValue = propertiesValue7["eventHubName"];
                                            if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                            {
                                                string eventHubNameInstance = ((string)eventHubNameValue);
                                                propertiesInstance6.EventHubName = eventHubNameInstance;
                                            }
                                        }
                                        streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                    }
                                }
                                
                                JToken etagValue2 = propertiesValue["etag"];
                                if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                {
                                    string etagInstance2 = ((string)etagValue2);
                                    streamInputPropertiesInstance.Etag = etagInstance2;
                                }
                                
                                JToken serializationValue2 = propertiesValue["serialization"];
                                if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                {
                                    string typeName5 = ((string)serializationValue2["type"]);
                                    if (typeName5 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                        
                                        JToken propertiesValue8 = serializationValue2["properties"];
                                        if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance7 = new CsvSerializationProperties();
                                            csvSerializationInstance2.CsvSerializationProperties = propertiesInstance7;
                                            
                                            JToken fieldDelimiterValue2 = propertiesValue8["fieldDelimiter"];
                                            if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                propertiesInstance7.FieldDelimiter = fieldDelimiterInstance2;
                                            }
                                            
                                            JToken encodingValue3 = propertiesValue8["encoding"];
                                            if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                            {
                                                string encodingInstance3 = ((string)encodingValue3);
                                                propertiesInstance7.Encoding = encodingInstance3;
                                            }
                                        }
                                        streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                    }
                                    if (typeName5 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                        
                                        JToken propertiesValue9 = serializationValue2["properties"];
                                        if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance8 = new JsonSerializationProperties();
                                            jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance8;
                                            
                                            JToken encodingValue4 = propertiesValue9["encoding"];
                                            if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                            {
                                                string encodingInstance4 = ((string)encodingValue4);
                                                propertiesInstance8.Encoding = encodingInstance4;
                                            }
                                        }
                                        streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                    }
                                    if (typeName5 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                        
                                        JToken propertiesValue10 = serializationValue2["properties"];
                                        if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance9 = new AvroSerializationProperties();
                                            avroSerializationInstance2.AvroSerializationProperties = propertiesInstance9;
                                        }
                                        streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                    }
                                }
                                inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceGroupName, string jobName, string inputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (inputName == null)
            {
                throw new ArgumentNullException("inputName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/inputs/" + inputName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the get stream analytics intput operation.
        /// </returns>
        public async Task<InputGetResponse> GetAsync(string resourceGroupName, string jobName, string inputName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (inputName == null)
            {
                throw new ArgumentNullException("inputName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/inputs/" + inputName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new InputGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        InputResponse inputResponseInstance = new InputResponse();
                        result.InputResponse = inputResponseInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            inputResponseInstance.Id = idInstance;
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            inputResponseInstance.Type = typeInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            inputResponseInstance.Name = nameInstance;
                        }
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            string typeName = ((string)propertiesValue["type"]);
                            if (typeName == "Reference")
                            {
                                ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                
                                JToken datasourceValue = propertiesValue["datasource"];
                                if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                {
                                    string typeName2 = ((string)datasourceValue["type"]);
                                    if (typeName2 == "Microsoft.Storage/Blob")
                                    {
                                        BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                        
                                        JToken propertiesValue2 = datasourceValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                            blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance;
                                            
                                            JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                            if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                {
                                                    StorageAccount storageAccountInstance = new StorageAccount();
                                                    propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                    
                                                    JToken accountNameValue = storageAccountsValue["accountName"];
                                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance = ((string)accountNameValue);
                                                        storageAccountInstance.AccountName = accountNameInstance;
                                                    }
                                                    
                                                    JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                    if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance = ((string)accountKeyValue);
                                                        storageAccountInstance.AccountKey = accountKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue = propertiesValue2["container"];
                                            if (containerValue != null && containerValue.Type != JTokenType.Null)
                                            {
                                                string containerInstance = ((string)containerValue);
                                                propertiesInstance.Container = containerInstance;
                                            }
                                            
                                            JToken blobNameValue = propertiesValue2["blobName"];
                                            if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                            {
                                                string blobNameInstance = ((string)blobNameValue);
                                                propertiesInstance.BlobName = blobNameInstance;
                                            }
                                        }
                                        referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                    }
                                }
                                
                                JToken etagValue = propertiesValue["etag"];
                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                {
                                    string etagInstance = ((string)etagValue);
                                    referenceInputPropertiesInstance.Etag = etagInstance;
                                }
                                
                                JToken serializationValue = propertiesValue["serialization"];
                                if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                {
                                    string typeName3 = ((string)serializationValue["type"]);
                                    if (typeName3 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance = new CsvSerialization();
                                        
                                        JToken propertiesValue3 = serializationValue["properties"];
                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                            csvSerializationInstance.CsvSerializationProperties = propertiesInstance2;
                                            
                                            JToken fieldDelimiterValue = propertiesValue3["fieldDelimiter"];
                                            if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                            }
                                            
                                            JToken encodingValue = propertiesValue3["encoding"];
                                            if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                            {
                                                string encodingInstance = ((string)encodingValue);
                                                propertiesInstance2.Encoding = encodingInstance;
                                            }
                                        }
                                        referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                    }
                                    if (typeName3 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                        
                                        JToken propertiesValue4 = serializationValue["properties"];
                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                            jsonSerializationInstance.JsonSerializationProperties = propertiesInstance3;
                                            
                                            JToken encodingValue2 = propertiesValue4["encoding"];
                                            if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                            {
                                                string encodingInstance2 = ((string)encodingValue2);
                                                propertiesInstance3.Encoding = encodingInstance2;
                                            }
                                        }
                                        referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                    }
                                    if (typeName3 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance = new AvroSerialization();
                                        
                                        JToken propertiesValue5 = serializationValue["properties"];
                                        if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                            avroSerializationInstance.AvroSerializationProperties = propertiesInstance4;
                                        }
                                        referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                    }
                                }
                                inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                            }
                            if (typeName == "Stream")
                            {
                                StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                
                                JToken datasourceValue2 = propertiesValue["datasource"];
                                if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                {
                                    string typeName4 = ((string)datasourceValue2["type"]);
                                    if (typeName4 == "Microsoft.Storage/Blob")
                                    {
                                        BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                        
                                        JToken propertiesValue6 = datasourceValue2["properties"];
                                        if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                        {
                                            BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                            blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance5;
                                            
                                            JToken storageAccountsArray2 = propertiesValue6["storageAccounts"];
                                            if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                {
                                                    StorageAccount storageAccountInstance2 = new StorageAccount();
                                                    propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                    
                                                    JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                    if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance2 = ((string)accountNameValue2);
                                                        storageAccountInstance2.AccountName = accountNameInstance2;
                                                    }
                                                    
                                                    JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                    if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance2 = ((string)accountKeyValue2);
                                                        storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue2 = propertiesValue6["container"];
                                            if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                            {
                                                string containerInstance2 = ((string)containerValue2);
                                                propertiesInstance5.Container = containerInstance2;
                                            }
                                            
                                            JToken blobSerializationBoundaryValue = propertiesValue6["blobSerializationBoundary"];
                                            if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                            {
                                                string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                propertiesInstance5.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                            }
                                            
                                            JToken pathPatternValue = propertiesValue6["pathPattern"];
                                            if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                            {
                                                string pathPatternInstance = ((string)pathPatternValue);
                                                propertiesInstance5.PathPattern = pathPatternInstance;
                                            }
                                            
                                            JToken dateFormatValue = propertiesValue6["dateFormat"];
                                            if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                            {
                                                string dateFormatInstance = ((string)dateFormatValue);
                                                propertiesInstance5.DateFormat = dateFormatInstance;
                                            }
                                            
                                            JToken timeFormatValue = propertiesValue6["timeFormat"];
                                            if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                            {
                                                string timeFormatInstance = ((string)timeFormatValue);
                                                propertiesInstance5.TimeFormat = timeFormatInstance;
                                            }
                                            
                                            JToken sourcePartitionCountValue = propertiesValue6["sourcePartitionCount"];
                                            if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                            {
                                                int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                            }
                                        }
                                        streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                    }
                                    if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                    {
                                        EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                        
                                        JToken propertiesValue7 = datasourceValue2["properties"];
                                        if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                        {
                                            EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                            eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance6;
                                            
                                            JToken serviceBusNamespaceValue = propertiesValue7["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue = propertiesValue7["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue = propertiesValue7["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                            }
                                            
                                            JToken eventHubNameValue = propertiesValue7["eventHubName"];
                                            if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                            {
                                                string eventHubNameInstance = ((string)eventHubNameValue);
                                                propertiesInstance6.EventHubName = eventHubNameInstance;
                                            }
                                        }
                                        streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                    }
                                }
                                
                                JToken etagValue2 = propertiesValue["etag"];
                                if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                {
                                    string etagInstance2 = ((string)etagValue2);
                                    streamInputPropertiesInstance.Etag = etagInstance2;
                                }
                                
                                JToken serializationValue2 = propertiesValue["serialization"];
                                if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                {
                                    string typeName5 = ((string)serializationValue2["type"]);
                                    if (typeName5 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                        
                                        JToken propertiesValue8 = serializationValue2["properties"];
                                        if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance7 = new CsvSerializationProperties();
                                            csvSerializationInstance2.CsvSerializationProperties = propertiesInstance7;
                                            
                                            JToken fieldDelimiterValue2 = propertiesValue8["fieldDelimiter"];
                                            if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                propertiesInstance7.FieldDelimiter = fieldDelimiterInstance2;
                                            }
                                            
                                            JToken encodingValue3 = propertiesValue8["encoding"];
                                            if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                            {
                                                string encodingInstance3 = ((string)encodingValue3);
                                                propertiesInstance7.Encoding = encodingInstance3;
                                            }
                                        }
                                        streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                    }
                                    if (typeName5 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                        
                                        JToken propertiesValue9 = serializationValue2["properties"];
                                        if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance8 = new JsonSerializationProperties();
                                            jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance8;
                                            
                                            JToken encodingValue4 = propertiesValue9["encoding"];
                                            if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                            {
                                                string encodingInstance4 = ((string)encodingValue4);
                                                propertiesInstance8.Encoding = encodingInstance4;
                                            }
                                        }
                                        streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                    }
                                    if (typeName5 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                        
                                        JToken propertiesValue10 = serializationValue2["properties"];
                                        if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance9 = new AvroSerializationProperties();
                                            avroSerializationInstance2.AvroSerializationProperties = propertiesInstance9;
                                        }
                                        streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                    }
                                }
                                inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a list of the inputs defined in a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the input list operation.
        /// </returns>
        public async Task<InputListResponse> ListInputInJobAsync(string resourceGroupName, string jobName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                Tracing.Enter(invocationId, this, "ListInputInJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/inputs?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new InputListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                InputResponse inputResponseInstance = new InputResponse();
                                result.InputResponses.Add(inputResponseInstance);
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    inputResponseInstance.Id = idInstance;
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    inputResponseInstance.Type = typeInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    inputResponseInstance.Name = nameInstance;
                                }
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)propertiesValue["type"]);
                                    if (typeName == "Reference")
                                    {
                                        ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                        
                                        JToken datasourceValue = propertiesValue["datasource"];
                                        if (datasourceValue != null && datasourceValue.Type != JTokenType.Null)
                                        {
                                            string typeName2 = ((string)datasourceValue["type"]);
                                            if (typeName2 == "Microsoft.Storage/Blob")
                                            {
                                                BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                                
                                                JToken propertiesValue2 = datasourceValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                                    blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance;
                                                    
                                                    JToken storageAccountsArray = propertiesValue2["storageAccounts"];
                                                    if (storageAccountsArray != null && storageAccountsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray))
                                                        {
                                                            StorageAccount storageAccountInstance = new StorageAccount();
                                                            propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                            
                                                            JToken accountNameValue = storageAccountsValue["accountName"];
                                                            if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                            {
                                                                string accountNameInstance = ((string)accountNameValue);
                                                                storageAccountInstance.AccountName = accountNameInstance;
                                                            }
                                                            
                                                            JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                            if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                            {
                                                                string accountKeyInstance = ((string)accountKeyValue);
                                                                storageAccountInstance.AccountKey = accountKeyInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken containerValue = propertiesValue2["container"];
                                                    if (containerValue != null && containerValue.Type != JTokenType.Null)
                                                    {
                                                        string containerInstance = ((string)containerValue);
                                                        propertiesInstance.Container = containerInstance;
                                                    }
                                                    
                                                    JToken blobNameValue = propertiesValue2["blobName"];
                                                    if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                                    {
                                                        string blobNameInstance = ((string)blobNameValue);
                                                        propertiesInstance.BlobName = blobNameInstance;
                                                    }
                                                }
                                                referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                            }
                                        }
                                        
                                        JToken etagValue = propertiesValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            referenceInputPropertiesInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken serializationValue = propertiesValue["serialization"];
                                        if (serializationValue != null && serializationValue.Type != JTokenType.Null)
                                        {
                                            string typeName3 = ((string)serializationValue["type"]);
                                            if (typeName3 == "Csv")
                                            {
                                                CsvSerialization csvSerializationInstance = new CsvSerialization();
                                                
                                                JToken propertiesValue3 = serializationValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                                    csvSerializationInstance.CsvSerializationProperties = propertiesInstance2;
                                                    
                                                    JToken fieldDelimiterValue = propertiesValue3["fieldDelimiter"];
                                                    if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                                    {
                                                        string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                        propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                                    }
                                                    
                                                    JToken encodingValue = propertiesValue3["encoding"];
                                                    if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance = ((string)encodingValue);
                                                        propertiesInstance2.Encoding = encodingInstance;
                                                    }
                                                }
                                                referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                            }
                                            if (typeName3 == "Json")
                                            {
                                                JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                                
                                                JToken propertiesValue4 = serializationValue["properties"];
                                                if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                                {
                                                    JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                                    jsonSerializationInstance.JsonSerializationProperties = propertiesInstance3;
                                                    
                                                    JToken encodingValue2 = propertiesValue4["encoding"];
                                                    if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance2 = ((string)encodingValue2);
                                                        propertiesInstance3.Encoding = encodingInstance2;
                                                    }
                                                }
                                                referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                            }
                                            if (typeName3 == "Avro")
                                            {
                                                AvroSerialization avroSerializationInstance = new AvroSerialization();
                                                
                                                JToken propertiesValue5 = serializationValue["properties"];
                                                if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                                {
                                                    AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                                    avroSerializationInstance.AvroSerializationProperties = propertiesInstance4;
                                                }
                                                referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                            }
                                        }
                                        inputResponseInstance.InputProperties = referenceInputPropertiesInstance;
                                    }
                                    if (typeName == "Stream")
                                    {
                                        StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                        
                                        JToken datasourceValue2 = propertiesValue["datasource"];
                                        if (datasourceValue2 != null && datasourceValue2.Type != JTokenType.Null)
                                        {
                                            string typeName4 = ((string)datasourceValue2["type"]);
                                            if (typeName4 == "Microsoft.Storage/Blob")
                                            {
                                                BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                                
                                                JToken propertiesValue6 = datasourceValue2["properties"];
                                                if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                                {
                                                    BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                                    blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance5;
                                                    
                                                    JToken storageAccountsArray2 = propertiesValue6["storageAccounts"];
                                                    if (storageAccountsArray2 != null && storageAccountsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray2))
                                                        {
                                                            StorageAccount storageAccountInstance2 = new StorageAccount();
                                                            propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                            
                                                            JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                            if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                            {
                                                                string accountNameInstance2 = ((string)accountNameValue2);
                                                                storageAccountInstance2.AccountName = accountNameInstance2;
                                                            }
                                                            
                                                            JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                            if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                            {
                                                                string accountKeyInstance2 = ((string)accountKeyValue2);
                                                                storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken containerValue2 = propertiesValue6["container"];
                                                    if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                                    {
                                                        string containerInstance2 = ((string)containerValue2);
                                                        propertiesInstance5.Container = containerInstance2;
                                                    }
                                                    
                                                    JToken blobSerializationBoundaryValue = propertiesValue6["blobSerializationBoundary"];
                                                    if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                                    {
                                                        string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                        propertiesInstance5.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                                    }
                                                    
                                                    JToken pathPatternValue = propertiesValue6["pathPattern"];
                                                    if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                                    {
                                                        string pathPatternInstance = ((string)pathPatternValue);
                                                        propertiesInstance5.PathPattern = pathPatternInstance;
                                                    }
                                                    
                                                    JToken dateFormatValue = propertiesValue6["dateFormat"];
                                                    if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string dateFormatInstance = ((string)dateFormatValue);
                                                        propertiesInstance5.DateFormat = dateFormatInstance;
                                                    }
                                                    
                                                    JToken timeFormatValue = propertiesValue6["timeFormat"];
                                                    if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                                    {
                                                        string timeFormatInstance = ((string)timeFormatValue);
                                                        propertiesInstance5.TimeFormat = timeFormatInstance;
                                                    }
                                                    
                                                    JToken sourcePartitionCountValue = propertiesValue6["sourcePartitionCount"];
                                                    if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                                    {
                                                        int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                        propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                                    }
                                                }
                                                streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                            }
                                            if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                            {
                                                EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                                
                                                JToken propertiesValue7 = datasourceValue2["properties"];
                                                if (propertiesValue7 != null && propertiesValue7.Type != JTokenType.Null)
                                                {
                                                    EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                                    eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance6;
                                                    
                                                    JToken serviceBusNamespaceValue = propertiesValue7["serviceBusNamespace"];
                                                    if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                                    {
                                                        string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                        propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyNameValue = propertiesValue7["sharedAccessPolicyName"];
                                                    if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                        propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                                    }
                                                    
                                                    JToken sharedAccessPolicyKeyValue = propertiesValue7["sharedAccessPolicyKey"];
                                                    if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                        propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                                    }
                                                    
                                                    JToken eventHubNameValue = propertiesValue7["eventHubName"];
                                                    if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                                    {
                                                        string eventHubNameInstance = ((string)eventHubNameValue);
                                                        propertiesInstance6.EventHubName = eventHubNameInstance;
                                                    }
                                                }
                                                streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                            }
                                        }
                                        
                                        JToken etagValue2 = propertiesValue["etag"];
                                        if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                        {
                                            string etagInstance2 = ((string)etagValue2);
                                            streamInputPropertiesInstance.Etag = etagInstance2;
                                        }
                                        
                                        JToken serializationValue2 = propertiesValue["serialization"];
                                        if (serializationValue2 != null && serializationValue2.Type != JTokenType.Null)
                                        {
                                            string typeName5 = ((string)serializationValue2["type"]);
                                            if (typeName5 == "Csv")
                                            {
                                                CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                                
                                                JToken propertiesValue8 = serializationValue2["properties"];
                                                if (propertiesValue8 != null && propertiesValue8.Type != JTokenType.Null)
                                                {
                                                    CsvSerializationProperties propertiesInstance7 = new CsvSerializationProperties();
                                                    csvSerializationInstance2.CsvSerializationProperties = propertiesInstance7;
                                                    
                                                    JToken fieldDelimiterValue2 = propertiesValue8["fieldDelimiter"];
                                                    if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                                    {
                                                        string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                        propertiesInstance7.FieldDelimiter = fieldDelimiterInstance2;
                                                    }
                                                    
                                                    JToken encodingValue3 = propertiesValue8["encoding"];
                                                    if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance3 = ((string)encodingValue3);
                                                        propertiesInstance7.Encoding = encodingInstance3;
                                                    }
                                                }
                                                streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                            }
                                            if (typeName5 == "Json")
                                            {
                                                JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                                
                                                JToken propertiesValue9 = serializationValue2["properties"];
                                                if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                                                {
                                                    JsonSerializationProperties propertiesInstance8 = new JsonSerializationProperties();
                                                    jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance8;
                                                    
                                                    JToken encodingValue4 = propertiesValue9["encoding"];
                                                    if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                                    {
                                                        string encodingInstance4 = ((string)encodingValue4);
                                                        propertiesInstance8.Encoding = encodingInstance4;
                                                    }
                                                }
                                                streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                            }
                                            if (typeName5 == "Avro")
                                            {
                                                AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                                
                                                JToken propertiesValue10 = serializationValue2["properties"];
                                                if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                                {
                                                    AvroSerializationProperties propertiesInstance9 = new AvroSerializationProperties();
                                                    avroSerializationInstance2.AvroSerializationProperties = propertiesInstance9;
                                                }
                                                streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                            }
                                        }
                                        inputResponseInstance.InputProperties = streamInputPropertiesInstance;
                                    }
                                }
                            }
                        }
                        
                        JToken nextLinkValue = responseDoc["nextLink"];
                        if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                        {
                            string nextLinkInstance = ((string)nextLinkValue);
                            result.NextLink = nextLinkInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Test the connectivity of an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to test the connectivity of an
        /// input for a stream analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> TestConnectionAsync(string resourceGroupName, string jobName, InputTestConnectionParameters parameters, CancellationToken cancellationToken)
        {
            StreamAnalyticsManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "TestConnectionAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse response = await client.Input.BeginTestConnectionAsync(resourceGroupName, jobName, parameters, cancellationToken).ConfigureAwait(false);
                if (response.Status == OperationStatus.Succeeded)
                {
                    return response;
                }
                cancellationToken.ThrowIfCancellationRequested();
                LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = response.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 10;
                }
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = result.RetryAfter;
                    if (delayInSeconds == 0)
                    {
                        delayInSeconds = 5;
                    }
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update an input for a stream analytics job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the stream analytics job.
        /// </param>
        /// <param name='jobName'>
        /// Required. The name of the stream analytics job.
        /// </param>
        /// <param name='inputName'>
        /// Required. The name of the input for the stream analytics job.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to update an input for a stream
        /// analytics job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the input patch operation.
        /// </returns>
        public async Task<InputPatchResponse> UpdateAsync(string resourceGroupName, string jobName, string inputName, InputPatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (inputName == null)
            {
                throw new ArgumentNullException("inputName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.InputProperties == null)
            {
                throw new ArgumentNullException("parameters.InputProperties");
            }
            if (parameters.InputProperties.Serialization == null)
            {
                throw new ArgumentNullException("parameters.InputProperties.Serialization");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("inputName", inputName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "/providers/Microsoft.StreamAnalytics/streamingjobs/" + jobName.Trim() + "/inputs/" + inputName.Trim() + "?";
            url = url + "api-version=2014-10-01-preview";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject inputPatchParametersValue = new JObject();
                requestDoc = inputPatchParametersValue;
                
                JObject propertiesValue = new JObject();
                inputPatchParametersValue["properties"] = propertiesValue;
                if (parameters.InputProperties is ReferenceInputProperties)
                {
                    propertiesValue["type"] = "Reference";
                    ReferenceInputProperties derived = ((ReferenceInputProperties)parameters.InputProperties);
                    
                    JObject datasourceValue = new JObject();
                    propertiesValue["datasource"] = datasourceValue;
                    if (derived.DataSource is BlobReferenceInputDataSource)
                    {
                        datasourceValue["type"] = "Microsoft.Storage/Blob";
                        BlobReferenceInputDataSource derived2 = ((BlobReferenceInputDataSource)derived.DataSource);
                        
                        JObject propertiesValue2 = new JObject();
                        datasourceValue["properties"] = propertiesValue2;
                        
                        if (derived2.BlobReferenceInputDataSourceProperties.StorageAccounts != null)
                        {
                            if (derived2.BlobReferenceInputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived2.BlobReferenceInputDataSourceProperties.StorageAccounts).IsInitialized)
                            {
                                JArray storageAccountsArray = new JArray();
                                foreach (StorageAccount storageAccountsItem in derived2.BlobReferenceInputDataSourceProperties.StorageAccounts)
                                {
                                    JObject storageAccountValue = new JObject();
                                    storageAccountsArray.Add(storageAccountValue);
                                    
                                    if (storageAccountsItem.AccountName != null)
                                    {
                                        storageAccountValue["accountName"] = storageAccountsItem.AccountName;
                                    }
                                    
                                    if (storageAccountsItem.AccountKey != null)
                                    {
                                        storageAccountValue["accountKey"] = storageAccountsItem.AccountKey;
                                    }
                                }
                                propertiesValue2["storageAccounts"] = storageAccountsArray;
                            }
                        }
                        
                        propertiesValue2["container"] = derived2.BlobReferenceInputDataSourceProperties.Container;
                        
                        propertiesValue2["blobName"] = derived2.BlobReferenceInputDataSourceProperties.BlobName;
                    }
                    
                    if (derived.Etag != null)
                    {
                        propertiesValue["etag"] = derived.Etag;
                    }
                    
                    JObject serializationValue = new JObject();
                    propertiesValue["serialization"] = serializationValue;
                    if (derived.Serialization is CsvSerialization)
                    {
                        serializationValue["type"] = "Csv";
                        CsvSerialization derived3 = ((CsvSerialization)derived.Serialization);
                        
                        JObject propertiesValue3 = new JObject();
                        serializationValue["properties"] = propertiesValue3;
                        
                        propertiesValue3["fieldDelimiter"] = derived3.CsvSerializationProperties.FieldDelimiter;
                        
                        propertiesValue3["encoding"] = derived3.CsvSerializationProperties.Encoding;
                    }
                    if (derived.Serialization is JsonSerialization)
                    {
                        serializationValue["type"] = "Json";
                        JsonSerialization derived4 = ((JsonSerialization)derived.Serialization);
                        
                        JObject propertiesValue4 = new JObject();
                        serializationValue["properties"] = propertiesValue4;
                        
                        propertiesValue4["encoding"] = derived4.JsonSerializationProperties.Encoding;
                    }
                    if (derived.Serialization is AvroSerialization)
                    {
                        serializationValue["type"] = "Avro";
                        AvroSerialization derived5 = ((AvroSerialization)derived.Serialization);
                        
                        serializationValue["properties"] = derived5.AvroSerializationProperties.ToString();
                    }
                }
                if (parameters.InputProperties is StreamInputProperties)
                {
                    propertiesValue["type"] = "Stream";
                    StreamInputProperties derived6 = ((StreamInputProperties)parameters.InputProperties);
                    
                    JObject datasourceValue2 = new JObject();
                    propertiesValue["datasource"] = datasourceValue2;
                    if (derived6.DataSource is BlobStreamInputDataSource)
                    {
                        datasourceValue2["type"] = "Microsoft.Storage/Blob";
                        BlobStreamInputDataSource derived7 = ((BlobStreamInputDataSource)derived6.DataSource);
                        
                        JObject propertiesValue5 = new JObject();
                        datasourceValue2["properties"] = propertiesValue5;
                        
                        if (derived7.BlobStreamInputDataSourceProperties.StorageAccounts != null)
                        {
                            if (derived7.BlobStreamInputDataSourceProperties.StorageAccounts is ILazyCollection == false || ((ILazyCollection)derived7.BlobStreamInputDataSourceProperties.StorageAccounts).IsInitialized)
                            {
                                JArray storageAccountsArray2 = new JArray();
                                foreach (StorageAccount storageAccountsItem2 in derived7.BlobStreamInputDataSourceProperties.StorageAccounts)
                                {
                                    JObject storageAccountValue2 = new JObject();
                                    storageAccountsArray2.Add(storageAccountValue2);
                                    
                                    if (storageAccountsItem2.AccountName != null)
                                    {
                                        storageAccountValue2["accountName"] = storageAccountsItem2.AccountName;
                                    }
                                    
                                    if (storageAccountsItem2.AccountKey != null)
                                    {
                                        storageAccountValue2["accountKey"] = storageAccountsItem2.AccountKey;
                                    }
                                }
                                propertiesValue5["storageAccounts"] = storageAccountsArray2;
                            }
                        }
                        
                        propertiesValue5["container"] = derived7.BlobStreamInputDataSourceProperties.Container;
                        
                        if (derived7.BlobStreamInputDataSourceProperties.BlobSerializationBoundary != null)
                        {
                            propertiesValue5["blobSerializationBoundary"] = derived7.BlobStreamInputDataSourceProperties.BlobSerializationBoundary;
                        }
                        
                        if (derived7.BlobStreamInputDataSourceProperties.PathPattern != null)
                        {
                            propertiesValue5["pathPattern"] = derived7.BlobStreamInputDataSourceProperties.PathPattern;
                        }
                        
                        if (derived7.BlobStreamInputDataSourceProperties.DateFormat != null)
                        {
                            propertiesValue5["dateFormat"] = derived7.BlobStreamInputDataSourceProperties.DateFormat;
                        }
                        
                        if (derived7.BlobStreamInputDataSourceProperties.TimeFormat != null)
                        {
                            propertiesValue5["timeFormat"] = derived7.BlobStreamInputDataSourceProperties.TimeFormat;
                        }
                        
                        if (derived7.BlobStreamInputDataSourceProperties.SourcePartitionCount != null)
                        {
                            propertiesValue5["sourcePartitionCount"] = derived7.BlobStreamInputDataSourceProperties.SourcePartitionCount.Value;
                        }
                    }
                    if (derived6.DataSource is EventHubStreamInputDataSource)
                    {
                        datasourceValue2["type"] = "Microsoft.ServiceBus/EventHub";
                        EventHubStreamInputDataSource derived8 = ((EventHubStreamInputDataSource)derived6.DataSource);
                        
                        JObject propertiesValue6 = new JObject();
                        datasourceValue2["properties"] = propertiesValue6;
                        
                        propertiesValue6["serviceBusNamespace"] = derived8.EventHubStreamInputDataSourceProperties.ServiceBusNamespace;
                        
                        propertiesValue6["sharedAccessPolicyName"] = derived8.EventHubStreamInputDataSourceProperties.SharedAccessPolicyName;
                        
                        propertiesValue6["sharedAccessPolicyKey"] = derived8.EventHubStreamInputDataSourceProperties.SharedAccessPolicyKey;
                        
                        propertiesValue6["eventHubName"] = derived8.EventHubStreamInputDataSourceProperties.EventHubName;
                    }
                    
                    if (derived6.Etag != null)
                    {
                        propertiesValue["etag"] = derived6.Etag;
                    }
                    
                    JObject serializationValue2 = new JObject();
                    propertiesValue["serialization"] = serializationValue2;
                    if (derived6.Serialization is CsvSerialization)
                    {
                        serializationValue2["type"] = "Csv";
                        CsvSerialization derived9 = ((CsvSerialization)derived6.Serialization);
                        
                        JObject propertiesValue7 = new JObject();
                        serializationValue2["properties"] = propertiesValue7;
                        
                        propertiesValue7["fieldDelimiter"] = derived9.CsvSerializationProperties.FieldDelimiter;
                        
                        propertiesValue7["encoding"] = derived9.CsvSerializationProperties.Encoding;
                    }
                    if (derived6.Serialization is JsonSerialization)
                    {
                        serializationValue2["type"] = "Json";
                        JsonSerialization derived10 = ((JsonSerialization)derived6.Serialization);
                        
                        JObject propertiesValue8 = new JObject();
                        serializationValue2["properties"] = propertiesValue8;
                        
                        propertiesValue8["encoding"] = derived10.JsonSerializationProperties.Encoding;
                    }
                    if (derived6.Serialization is AvroSerialization)
                    {
                        serializationValue2["type"] = "Avro";
                        AvroSerialization derived11 = ((AvroSerialization)derived6.Serialization);
                        
                        serializationValue2["properties"] = derived11.AvroSerializationProperties.ToString();
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    InputPatchResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new InputPatchResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken propertiesValue9 = responseDoc["properties"];
                        if (propertiesValue9 != null && propertiesValue9.Type != JTokenType.Null)
                        {
                            string typeName = ((string)propertiesValue9["type"]);
                            if (typeName == "Reference")
                            {
                                ReferenceInputProperties referenceInputPropertiesInstance = new ReferenceInputProperties();
                                
                                JToken datasourceValue3 = propertiesValue9["datasource"];
                                if (datasourceValue3 != null && datasourceValue3.Type != JTokenType.Null)
                                {
                                    string typeName2 = ((string)datasourceValue3["type"]);
                                    if (typeName2 == "Microsoft.Storage/Blob")
                                    {
                                        BlobReferenceInputDataSource blobReferenceInputDataSourceInstance = new BlobReferenceInputDataSource();
                                        
                                        JToken propertiesValue10 = datasourceValue3["properties"];
                                        if (propertiesValue10 != null && propertiesValue10.Type != JTokenType.Null)
                                        {
                                            BlobReferenceInputDataSourceProperties propertiesInstance = new BlobReferenceInputDataSourceProperties();
                                            blobReferenceInputDataSourceInstance.BlobReferenceInputDataSourceProperties = propertiesInstance;
                                            
                                            JToken storageAccountsArray3 = propertiesValue10["storageAccounts"];
                                            if (storageAccountsArray3 != null && storageAccountsArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken storageAccountsValue in ((JArray)storageAccountsArray3))
                                                {
                                                    StorageAccount storageAccountInstance = new StorageAccount();
                                                    propertiesInstance.StorageAccounts.Add(storageAccountInstance);
                                                    
                                                    JToken accountNameValue = storageAccountsValue["accountName"];
                                                    if (accountNameValue != null && accountNameValue.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance = ((string)accountNameValue);
                                                        storageAccountInstance.AccountName = accountNameInstance;
                                                    }
                                                    
                                                    JToken accountKeyValue = storageAccountsValue["accountKey"];
                                                    if (accountKeyValue != null && accountKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance = ((string)accountKeyValue);
                                                        storageAccountInstance.AccountKey = accountKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue = propertiesValue10["container"];
                                            if (containerValue != null && containerValue.Type != JTokenType.Null)
                                            {
                                                string containerInstance = ((string)containerValue);
                                                propertiesInstance.Container = containerInstance;
                                            }
                                            
                                            JToken blobNameValue = propertiesValue10["blobName"];
                                            if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                            {
                                                string blobNameInstance = ((string)blobNameValue);
                                                propertiesInstance.BlobName = blobNameInstance;
                                            }
                                        }
                                        referenceInputPropertiesInstance.DataSource = blobReferenceInputDataSourceInstance;
                                    }
                                }
                                
                                JToken etagValue = propertiesValue9["etag"];
                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                {
                                    string etagInstance = ((string)etagValue);
                                    referenceInputPropertiesInstance.Etag = etagInstance;
                                }
                                
                                JToken serializationValue3 = propertiesValue9["serialization"];
                                if (serializationValue3 != null && serializationValue3.Type != JTokenType.Null)
                                {
                                    string typeName3 = ((string)serializationValue3["type"]);
                                    if (typeName3 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance = new CsvSerialization();
                                        
                                        JToken propertiesValue11 = serializationValue3["properties"];
                                        if (propertiesValue11 != null && propertiesValue11.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance2 = new CsvSerializationProperties();
                                            csvSerializationInstance.CsvSerializationProperties = propertiesInstance2;
                                            
                                            JToken fieldDelimiterValue = propertiesValue11["fieldDelimiter"];
                                            if (fieldDelimiterValue != null && fieldDelimiterValue.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance = ((string)fieldDelimiterValue);
                                                propertiesInstance2.FieldDelimiter = fieldDelimiterInstance;
                                            }
                                            
                                            JToken encodingValue = propertiesValue11["encoding"];
                                            if (encodingValue != null && encodingValue.Type != JTokenType.Null)
                                            {
                                                string encodingInstance = ((string)encodingValue);
                                                propertiesInstance2.Encoding = encodingInstance;
                                            }
                                        }
                                        referenceInputPropertiesInstance.Serialization = csvSerializationInstance;
                                    }
                                    if (typeName3 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance = new JsonSerialization();
                                        
                                        JToken propertiesValue12 = serializationValue3["properties"];
                                        if (propertiesValue12 != null && propertiesValue12.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance3 = new JsonSerializationProperties();
                                            jsonSerializationInstance.JsonSerializationProperties = propertiesInstance3;
                                            
                                            JToken encodingValue2 = propertiesValue12["encoding"];
                                            if (encodingValue2 != null && encodingValue2.Type != JTokenType.Null)
                                            {
                                                string encodingInstance2 = ((string)encodingValue2);
                                                propertiesInstance3.Encoding = encodingInstance2;
                                            }
                                        }
                                        referenceInputPropertiesInstance.Serialization = jsonSerializationInstance;
                                    }
                                    if (typeName3 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance = new AvroSerialization();
                                        
                                        JToken propertiesValue13 = serializationValue3["properties"];
                                        if (propertiesValue13 != null && propertiesValue13.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance4 = new AvroSerializationProperties();
                                            avroSerializationInstance.AvroSerializationProperties = propertiesInstance4;
                                        }
                                        referenceInputPropertiesInstance.Serialization = avroSerializationInstance;
                                    }
                                }
                                result.InputProperties = referenceInputPropertiesInstance;
                            }
                            if (typeName == "Stream")
                            {
                                StreamInputProperties streamInputPropertiesInstance = new StreamInputProperties();
                                
                                JToken datasourceValue4 = propertiesValue9["datasource"];
                                if (datasourceValue4 != null && datasourceValue4.Type != JTokenType.Null)
                                {
                                    string typeName4 = ((string)datasourceValue4["type"]);
                                    if (typeName4 == "Microsoft.Storage/Blob")
                                    {
                                        BlobStreamInputDataSource blobStreamInputDataSourceInstance = new BlobStreamInputDataSource();
                                        
                                        JToken propertiesValue14 = datasourceValue4["properties"];
                                        if (propertiesValue14 != null && propertiesValue14.Type != JTokenType.Null)
                                        {
                                            BlobStreamInputDataSourceProperties propertiesInstance5 = new BlobStreamInputDataSourceProperties();
                                            blobStreamInputDataSourceInstance.BlobStreamInputDataSourceProperties = propertiesInstance5;
                                            
                                            JToken storageAccountsArray4 = propertiesValue14["storageAccounts"];
                                            if (storageAccountsArray4 != null && storageAccountsArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken storageAccountsValue2 in ((JArray)storageAccountsArray4))
                                                {
                                                    StorageAccount storageAccountInstance2 = new StorageAccount();
                                                    propertiesInstance5.StorageAccounts.Add(storageAccountInstance2);
                                                    
                                                    JToken accountNameValue2 = storageAccountsValue2["accountName"];
                                                    if (accountNameValue2 != null && accountNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountNameInstance2 = ((string)accountNameValue2);
                                                        storageAccountInstance2.AccountName = accountNameInstance2;
                                                    }
                                                    
                                                    JToken accountKeyValue2 = storageAccountsValue2["accountKey"];
                                                    if (accountKeyValue2 != null && accountKeyValue2.Type != JTokenType.Null)
                                                    {
                                                        string accountKeyInstance2 = ((string)accountKeyValue2);
                                                        storageAccountInstance2.AccountKey = accountKeyInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken containerValue2 = propertiesValue14["container"];
                                            if (containerValue2 != null && containerValue2.Type != JTokenType.Null)
                                            {
                                                string containerInstance2 = ((string)containerValue2);
                                                propertiesInstance5.Container = containerInstance2;
                                            }
                                            
                                            JToken blobSerializationBoundaryValue = propertiesValue14["blobSerializationBoundary"];
                                            if (blobSerializationBoundaryValue != null && blobSerializationBoundaryValue.Type != JTokenType.Null)
                                            {
                                                string blobSerializationBoundaryInstance = ((string)blobSerializationBoundaryValue);
                                                propertiesInstance5.BlobSerializationBoundary = blobSerializationBoundaryInstance;
                                            }
                                            
                                            JToken pathPatternValue = propertiesValue14["pathPattern"];
                                            if (pathPatternValue != null && pathPatternValue.Type != JTokenType.Null)
                                            {
                                                string pathPatternInstance = ((string)pathPatternValue);
                                                propertiesInstance5.PathPattern = pathPatternInstance;
                                            }
                                            
                                            JToken dateFormatValue = propertiesValue14["dateFormat"];
                                            if (dateFormatValue != null && dateFormatValue.Type != JTokenType.Null)
                                            {
                                                string dateFormatInstance = ((string)dateFormatValue);
                                                propertiesInstance5.DateFormat = dateFormatInstance;
                                            }
                                            
                                            JToken timeFormatValue = propertiesValue14["timeFormat"];
                                            if (timeFormatValue != null && timeFormatValue.Type != JTokenType.Null)
                                            {
                                                string timeFormatInstance = ((string)timeFormatValue);
                                                propertiesInstance5.TimeFormat = timeFormatInstance;
                                            }
                                            
                                            JToken sourcePartitionCountValue = propertiesValue14["sourcePartitionCount"];
                                            if (sourcePartitionCountValue != null && sourcePartitionCountValue.Type != JTokenType.Null)
                                            {
                                                int sourcePartitionCountInstance = ((int)sourcePartitionCountValue);
                                                propertiesInstance5.SourcePartitionCount = sourcePartitionCountInstance;
                                            }
                                        }
                                        streamInputPropertiesInstance.DataSource = blobStreamInputDataSourceInstance;
                                    }
                                    if (typeName4 == "Microsoft.ServiceBus/EventHub")
                                    {
                                        EventHubStreamInputDataSource eventHubStreamInputDataSourceInstance = new EventHubStreamInputDataSource();
                                        
                                        JToken propertiesValue15 = datasourceValue4["properties"];
                                        if (propertiesValue15 != null && propertiesValue15.Type != JTokenType.Null)
                                        {
                                            EventHubStreamInputDataSourceProperties propertiesInstance6 = new EventHubStreamInputDataSourceProperties();
                                            eventHubStreamInputDataSourceInstance.EventHubStreamInputDataSourceProperties = propertiesInstance6;
                                            
                                            JToken serviceBusNamespaceValue = propertiesValue15["serviceBusNamespace"];
                                            if (serviceBusNamespaceValue != null && serviceBusNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string serviceBusNamespaceInstance = ((string)serviceBusNamespaceValue);
                                                propertiesInstance6.ServiceBusNamespace = serviceBusNamespaceInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyNameValue = propertiesValue15["sharedAccessPolicyName"];
                                            if (sharedAccessPolicyNameValue != null && sharedAccessPolicyNameValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyNameInstance = ((string)sharedAccessPolicyNameValue);
                                                propertiesInstance6.SharedAccessPolicyName = sharedAccessPolicyNameInstance;
                                            }
                                            
                                            JToken sharedAccessPolicyKeyValue = propertiesValue15["sharedAccessPolicyKey"];
                                            if (sharedAccessPolicyKeyValue != null && sharedAccessPolicyKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedAccessPolicyKeyInstance = ((string)sharedAccessPolicyKeyValue);
                                                propertiesInstance6.SharedAccessPolicyKey = sharedAccessPolicyKeyInstance;
                                            }
                                            
                                            JToken eventHubNameValue = propertiesValue15["eventHubName"];
                                            if (eventHubNameValue != null && eventHubNameValue.Type != JTokenType.Null)
                                            {
                                                string eventHubNameInstance = ((string)eventHubNameValue);
                                                propertiesInstance6.EventHubName = eventHubNameInstance;
                                            }
                                        }
                                        streamInputPropertiesInstance.DataSource = eventHubStreamInputDataSourceInstance;
                                    }
                                }
                                
                                JToken etagValue2 = propertiesValue9["etag"];
                                if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                {
                                    string etagInstance2 = ((string)etagValue2);
                                    streamInputPropertiesInstance.Etag = etagInstance2;
                                }
                                
                                JToken serializationValue4 = propertiesValue9["serialization"];
                                if (serializationValue4 != null && serializationValue4.Type != JTokenType.Null)
                                {
                                    string typeName5 = ((string)serializationValue4["type"]);
                                    if (typeName5 == "Csv")
                                    {
                                        CsvSerialization csvSerializationInstance2 = new CsvSerialization();
                                        
                                        JToken propertiesValue16 = serializationValue4["properties"];
                                        if (propertiesValue16 != null && propertiesValue16.Type != JTokenType.Null)
                                        {
                                            CsvSerializationProperties propertiesInstance7 = new CsvSerializationProperties();
                                            csvSerializationInstance2.CsvSerializationProperties = propertiesInstance7;
                                            
                                            JToken fieldDelimiterValue2 = propertiesValue16["fieldDelimiter"];
                                            if (fieldDelimiterValue2 != null && fieldDelimiterValue2.Type != JTokenType.Null)
                                            {
                                                string fieldDelimiterInstance2 = ((string)fieldDelimiterValue2);
                                                propertiesInstance7.FieldDelimiter = fieldDelimiterInstance2;
                                            }
                                            
                                            JToken encodingValue3 = propertiesValue16["encoding"];
                                            if (encodingValue3 != null && encodingValue3.Type != JTokenType.Null)
                                            {
                                                string encodingInstance3 = ((string)encodingValue3);
                                                propertiesInstance7.Encoding = encodingInstance3;
                                            }
                                        }
                                        streamInputPropertiesInstance.Serialization = csvSerializationInstance2;
                                    }
                                    if (typeName5 == "Json")
                                    {
                                        JsonSerialization jsonSerializationInstance2 = new JsonSerialization();
                                        
                                        JToken propertiesValue17 = serializationValue4["properties"];
                                        if (propertiesValue17 != null && propertiesValue17.Type != JTokenType.Null)
                                        {
                                            JsonSerializationProperties propertiesInstance8 = new JsonSerializationProperties();
                                            jsonSerializationInstance2.JsonSerializationProperties = propertiesInstance8;
                                            
                                            JToken encodingValue4 = propertiesValue17["encoding"];
                                            if (encodingValue4 != null && encodingValue4.Type != JTokenType.Null)
                                            {
                                                string encodingInstance4 = ((string)encodingValue4);
                                                propertiesInstance8.Encoding = encodingInstance4;
                                            }
                                        }
                                        streamInputPropertiesInstance.Serialization = jsonSerializationInstance2;
                                    }
                                    if (typeName5 == "Avro")
                                    {
                                        AvroSerialization avroSerializationInstance2 = new AvroSerialization();
                                        
                                        JToken propertiesValue18 = serializationValue4["properties"];
                                        if (propertiesValue18 != null && propertiesValue18.Type != JTokenType.Null)
                                        {
                                            AvroSerializationProperties propertiesInstance9 = new AvroSerializationProperties();
                                            avroSerializationInstance2.AvroSerializationProperties = propertiesInstance9;
                                        }
                                        streamInputPropertiesInstance.Serialization = avroSerializationInstance2;
                                    }
                                }
                                result.InputProperties = streamInputPropertiesInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Date"))
                    {
                        result.Date = DateTime.Parse(httpResponse.Headers.GetValues("Date").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
