// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the
    /// deployments beneath your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460812.aspx for
    /// more information)
    /// </summary>
    public static partial class DeploymentOperationsExtensions
    {
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginChangingConfigurationByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters)
        {
            try
            {
                return operations.BeginChangingConfigurationByNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginChangingConfigurationByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters)
        {
            return operations.BeginChangingConfigurationByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginChangingConfigurationBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters)
        {
            try
            {
                return operations.BeginChangingConfigurationBySlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginChangingConfigurationBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters)
        {
            return operations.BeginChangingConfigurationBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Deployment operation uploads a new service package and
        /// creates a new deployment in the staging or production
        /// environments.  The Create Deployment operation is an asynchronous
        /// operation. To determine whether the management service has
        /// finished processing the request, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Deployment operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginCreating(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters)
        {
            try
            {
                return operations.BeginCreatingAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Create Deployment operation uploads a new service package and
        /// creates a new deployment in the staging or production
        /// environments.  The Create Deployment operation is an asynchronous
        /// operation. To determine whether the management service has
        /// finished processing the request, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Deployment operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginCreatingAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginDeletingByName(this IDeploymentOperations operations, string serviceName, string deploymentName, bool deleteFromStorage)
        {
            try
            {
                return operations.BeginDeletingByNameAsync(serviceName, deploymentName, deleteFromStorage).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginDeletingByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, bool deleteFromStorage)
        {
            return operations.BeginDeletingByNameAsync(serviceName, deploymentName, deleteFromStorage, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginDeletingBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            try
            {
                return operations.BeginDeletingBySlotAsync(serviceName, deploymentSlot).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginDeletingBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            return operations.BeginDeletingBySlotAsync(serviceName, deploymentSlot, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginRebootingRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            try
            {
                return operations.BeginRebootingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginRebootingRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return operations.BeginRebootingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginRebootingRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            try
            {
                return operations.BeginRebootingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginRebootingRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return operations.BeginRebootingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginReimagingRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            try
            {
                return operations.BeginReimagingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginReimagingRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return operations.BeginReimagingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginReimagingRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            try
            {
                return operations.BeginReimagingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginReimagingRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return operations.BeginReimagingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Swap Deployment operation initiates a virtual IP address swap
        /// between the staging and production deployment environments for a
        /// service. If the service is currently running in the staging
        /// environment, it will be swapped to the production environment. If
        /// it is running in the production environment, it will be swapped to
        /// staging. For more information on this type of upgrade, see
        /// Performing Virtual IP Swap Upgrades.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Swap Deployment operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginSwapping(this IDeploymentOperations operations, string serviceName, DeploymentSwapParameters parameters)
        {
            try
            {
                return operations.BeginSwappingAsync(serviceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Swap Deployment operation initiates a virtual IP address swap
        /// between the staging and production deployment environments for a
        /// service. If the service is currently running in the staging
        /// environment, it will be swapped to the production environment. If
        /// it is running in the production environment, it will be swapped to
        /// staging. For more information on this type of upgrade, see
        /// Performing Virtual IP Swap Upgrades.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Swap Deployment operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginSwappingAsync(this IDeploymentOperations operations, string serviceName, DeploymentSwapParameters parameters)
        {
            return operations.BeginSwappingAsync(serviceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginUpdatingStatusByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters)
        {
            try
            {
                return operations.BeginUpdatingStatusByDeploymentNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginUpdatingStatusByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters)
        {
            return operations.BeginUpdatingStatusByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginUpdatingStatusByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters)
        {
            try
            {
                return operations.BeginUpdatingStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginUpdatingStatusByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters)
        {
            return operations.BeginUpdatingStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginUpgradingByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpgradeParameters parameters)
        {
            try
            {
                return operations.BeginUpgradingByNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginUpgradingByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpgradeParameters parameters)
        {
            return operations.BeginUpgradingByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.  To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginUpgradingBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters)
        {
            try
            {
                return operations.BeginUpgradingBySlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.  To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginUpgradingBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters)
        {
            return operations.BeginUpgradingBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginWalkingUpgradeDomainByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters)
        {
            try
            {
                return operations.BeginWalkingUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginWalkingUpgradeDomainByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return operations.BeginWalkingUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginWalkingUpgradeDomainByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters)
        {
            try
            {
                return operations.BeginWalkingUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginWalkingUpgradeDomainByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return operations.BeginWalkingUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse ChangeConfigurationByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters)
        {
            try
            {
                return operations.ChangeConfigurationByNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> ChangeConfigurationByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters)
        {
            return operations.ChangeConfigurationByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse ChangeConfigurationBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters)
        {
            try
            {
                return operations.ChangeConfigurationBySlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> ChangeConfigurationBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters)
        {
            return operations.ChangeConfigurationBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Deployment operation uploads a new service package and
        /// creates a new deployment in the staging or production
        /// environments.  The Create Deployment operation is an asynchronous
        /// operation. To determine whether the management service has
        /// finished processing the request, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse Create(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Create Deployment operation uploads a new service package and
        /// creates a new deployment in the staging or production
        /// environments.  The Create Deployment operation is an asynchronous
        /// operation. To determine whether the management service has
        /// finished processing the request, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> CreateAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters)
        {
            return operations.CreateAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse DeleteByName(this IDeploymentOperations operations, string serviceName, string deploymentName, bool deleteFromStorage)
        {
            try
            {
                return operations.DeleteByNameAsync(serviceName, deploymentName, deleteFromStorage).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> DeleteByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, bool deleteFromStorage)
        {
            return operations.DeleteByNameAsync(serviceName, deploymentName, deleteFromStorage, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse DeleteBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            try
            {
                return operations.DeleteBySlotAsync(serviceName, deploymentSlot).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> DeleteBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            return operations.DeleteBySlotAsync(serviceName, deploymentSlot, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Deployment operation returns configuration information,
        /// status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public static DeploymentGetResponse GetByName(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            try
            {
                return operations.GetByNameAsync(serviceName, deploymentName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Deployment operation returns configuration information,
        /// status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public static Task<DeploymentGetResponse> GetByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName)
        {
            return operations.GetByNameAsync(serviceName, deploymentName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Deployment operation returns configuration information,
        /// status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public static DeploymentGetResponse GetBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            try
            {
                return operations.GetBySlotAsync(serviceName, deploymentSlot).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Deployment operation returns configuration information,
        /// status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public static Task<DeploymentGetResponse> GetBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot)
        {
            return operations.GetBySlotAsync(serviceName, deploymentSlot, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Package operation retrieves a cloud service package for a
        /// deployment and stores the package files in Windows Azure Blob
        /// storage.  The following package files are placed in storage:
        /// Service configuration file - The cloud service configuration file
        /// (.cscfg) provides configuration settings for the cloud service and
        /// individual roles, including the number of role instances.
        /// Service package - The service package (.cspkg) contains the
        /// application code and the service definition file.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Get Package operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse GetPackageByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentGetPackageParameters parameters)
        {
            try
            {
                return operations.GetPackageByNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Package operation retrieves a cloud service package for a
        /// deployment and stores the package files in Windows Azure Blob
        /// storage.  The following package files are placed in storage:
        /// Service configuration file - The cloud service configuration file
        /// (.cscfg) provides configuration settings for the cloud service and
        /// individual roles, including the number of role instances.
        /// Service package - The service package (.cspkg) contains the
        /// application code and the service definition file.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Get Package operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> GetPackageByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentGetPackageParameters parameters)
        {
            return operations.GetPackageByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Package operation retrieves a cloud service package for a
        /// deployment and stores the package files in Windows Azure Blob
        /// storage.  The following package files are placed in storage:
        /// Service configuration file - The cloud service configuration file
        /// (.cscfg) provides configuration settings for the cloud service and
        /// individual roles, including the number of role instances.
        /// Service package - The service package (.cspkg) contains the
        /// application code and the service definition file.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Get Package operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse GetPackageBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters)
        {
            try
            {
                return operations.GetPackageBySlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Package operation retrieves a cloud service package for a
        /// deployment and stores the package files in Windows Azure Blob
        /// storage.  The following package files are placed in storage:
        /// Service configuration file - The cloud service configuration file
        /// (.cscfg) provides configuration settings for the cloud service and
        /// individual roles, including the number of role instances.
        /// Service package - The service package (.cspkg) contains the
        /// application code and the service definition file.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Get Package operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> GetPackageBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters)
        {
            return operations.GetPackageBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse RebootRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            try
            {
                return operations.RebootRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> RebootRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return operations.RebootRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse RebootRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            try
            {
                return operations.RebootRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> RebootRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return operations.RebootRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse ReimageRoleInstanceByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            try
            {
                return operations.ReimageRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> ReimageRoleInstanceByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, string roleInstanceName)
        {
            return operations.ReimageRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse ReimageRoleInstanceByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            try
            {
                return operations.ReimageRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> ReimageRoleInstanceByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName)
        {
            return operations.ReimageRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade operation cancels an in-progress
        /// configuration update and returns the deployment to its state
        /// before the update was started.  The Rollback Update Or Upgrade
        /// operation can only be called when an update is in progress on the
        /// deployment. The deployment status can be detected by calling the
        /// Get Deployment operation or Get Hosted Service Properties
        /// operation and inspecting the RollbackAllowed element. If the value
        /// returned is true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Rollback Update Or Upgrade operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RollbackUpdateOrUpgradeByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentRollbackUpdateOrUpgradeParameters parameters)
        {
            try
            {
                return operations.RollbackUpdateOrUpgradeByDeploymentNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade operation cancels an in-progress
        /// configuration update and returns the deployment to its state
        /// before the update was started.  The Rollback Update Or Upgrade
        /// operation can only be called when an update is in progress on the
        /// deployment. The deployment status can be detected by calling the
        /// Get Deployment operation or Get Hosted Service Properties
        /// operation and inspecting the RollbackAllowed element. If the value
        /// returned is true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Rollback Update Or Upgrade operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RollbackUpdateOrUpgradeByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentRollbackUpdateOrUpgradeParameters parameters)
        {
            return operations.RollbackUpdateOrUpgradeByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade operation cancels an in-progress
        /// configuration update and returns the deployment to its state
        /// before the update was started.  The Rollback Update Or Upgrade
        /// operation can only be called when an update is in progress on the
        /// deployment. The deployment status can be detected by calling the
        /// Get Deployment operation or Get Hosted Service Properties
        /// operation and inspecting the RollbackAllowed element. If the value
        /// returned is true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Rollback Update Or Upgrade operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RollbackUpdateOrUpgradeByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentRollbackUpdateOrUpgradeParameters parameters)
        {
            try
            {
                return operations.RollbackUpdateOrUpgradeByDeploymentSlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade operation cancels an in-progress
        /// configuration update and returns the deployment to its state
        /// before the update was started.  The Rollback Update Or Upgrade
        /// operation can only be called when an update is in progress on the
        /// deployment. The deployment status can be detected by calling the
        /// Get Deployment operation or Get Hosted Service Properties
        /// operation and inspecting the RollbackAllowed element. If the value
        /// returned is true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Rollback Update Or Upgrade operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RollbackUpdateOrUpgradeByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentRollbackUpdateOrUpgradeParameters parameters)
        {
            return operations.RollbackUpdateOrUpgradeByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Swap Deployment operation initiates a virtual IP address swap
        /// between the staging and production deployment environments for a
        /// service. If the service is currently running in the staging
        /// environment, it will be swapped to the production environment. If
        /// it is running in the production environment, it will be swapped to
        /// staging. For more information on this type of upgrade, see
        /// Performing Virtual IP Swap Upgrades.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Swap Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse Swap(this IDeploymentOperations operations, string serviceName, DeploymentSwapParameters parameters)
        {
            try
            {
                return operations.SwapAsync(serviceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Swap Deployment operation initiates a virtual IP address swap
        /// between the staging and production deployment environments for a
        /// service. If the service is currently running in the staging
        /// environment, it will be swapped to the production environment. If
        /// it is running in the production environment, it will be swapped to
        /// staging. For more information on this type of upgrade, see
        /// Performing Virtual IP Swap Upgrades.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Swap Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> SwapAsync(this IDeploymentOperations operations, string serviceName, DeploymentSwapParameters parameters)
        {
            return operations.SwapAsync(serviceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse UpdateStatusByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters)
        {
            try
            {
                return operations.UpdateStatusByDeploymentNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> UpdateStatusByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters)
        {
            return operations.UpdateStatusByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse UpdateStatusByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters)
        {
            try
            {
                return operations.UpdateStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> UpdateStatusByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters)
        {
            return operations.UpdateStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse UpgradeByName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpgradeParameters parameters)
        {
            try
            {
                return operations.UpgradeByNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> UpgradeByNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentUpgradeParameters parameters)
        {
            return operations.UpgradeByNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse UpgradeBySlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters)
        {
            try
            {
                return operations.UpgradeBySlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> UpgradeBySlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters)
        {
            return operations.UpgradeBySlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse WalkUpgradeDomainByDeploymentName(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters)
        {
            try
            {
                return operations.WalkUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> WalkUpgradeDomainByDeploymentNameAsync(this IDeploymentOperations operations, string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return operations.WalkUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static ComputeOperationStatusResponse WalkUpgradeDomainByDeploymentSlot(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters)
        {
            try
            {
                return operations.WalkUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IDeploymentOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<ComputeOperationStatusResponse> WalkUpgradeDomainByDeploymentSlotAsync(this IDeploymentOperations operations, string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters)
        {
            return operations.WalkUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, CancellationToken.None);
        }
    }
}
