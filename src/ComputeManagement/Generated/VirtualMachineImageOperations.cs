// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the OS
    /// images in your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157175.aspx for
    /// more information)
    /// </summary>
    internal partial class VirtualMachineImageOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineImageOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineImageOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineImageOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Add OS Image operation adds an operating system image that is
        /// stored in a storage account and is available from the image
        /// repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157192.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine Image operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Parameters returned from the Create Virtual Machine Image operation.
        /// </returns>
        public async Task<VirtualMachineImageCreateResponse> CreateAsync(VirtualMachineImageCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.MediaLinkUri == null)
            {
                throw new ArgumentNullException("parameters.MediaLinkUri");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.OperatingSystemType == null)
            {
                throw new ArgumentNullException("parameters.OperatingSystemType");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/images";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement oSImageElement = new XElement(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(oSImageElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = parameters.Label;
                oSImageElement.Add(labelElement);
                
                XElement mediaLinkElement = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                mediaLinkElement.Value = parameters.MediaLinkUri.ToString();
                oSImageElement.Add(mediaLinkElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                oSImageElement.Add(nameElement);
                
                XElement osElement = new XElement(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                osElement.Value = parameters.OperatingSystemType;
                oSImageElement.Add(osElement);
                
                if (parameters.Eula != null)
                {
                    XElement eulaElement = new XElement(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                    eulaElement.Value = parameters.Eula;
                    oSImageElement.Add(eulaElement);
                }
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    oSImageElement.Add(descriptionElement);
                }
                
                if (parameters.ImageFamily != null)
                {
                    XElement imageFamilyElement = new XElement(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                    imageFamilyElement.Value = parameters.ImageFamily;
                    oSImageElement.Add(imageFamilyElement);
                }
                
                if (parameters.PublishedDate != null)
                {
                    XElement publishedDateElement = new XElement(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                    publishedDateElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.PublishedDate.Value.ToUniversalTime());
                    oSImageElement.Add(publishedDateElement);
                }
                
                XElement isPremiumElement = new XElement(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                isPremiumElement.Value = parameters.IsPremium.ToString().ToLower();
                oSImageElement.Add(isPremiumElement);
                
                XElement showInGuiElement = new XElement(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                showInGuiElement.Value = parameters.ShowInGui.ToString().ToLower();
                oSImageElement.Add(showInGuiElement);
                
                if (parameters.PrivacyUri != null)
                {
                    XElement privacyUriElement = new XElement(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                    privacyUriElement.Value = parameters.PrivacyUri.ToString();
                    oSImageElement.Add(privacyUriElement);
                }
                
                if (parameters.IconUri != null)
                {
                    XElement iconUriElement = new XElement(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                    iconUriElement.Value = parameters.IconUri.ToString();
                    oSImageElement.Add(iconUriElement);
                }
                
                if (parameters.RecommendedVMSize != null)
                {
                    XElement recommendedVMSizeElement = new XElement(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                    recommendedVMSizeElement.Value = parameters.RecommendedVMSize;
                    oSImageElement.Add(recommendedVMSizeElement);
                }
                
                if (parameters.SmallIconUri != null)
                {
                    XElement smallIconUriElement = new XElement(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                    smallIconUriElement.Value = parameters.SmallIconUri.ToString();
                    oSImageElement.Add(smallIconUriElement);
                }
                
                if (parameters.Language != null)
                {
                    XElement languageElement = new XElement(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                    languageElement.Value = parameters.Language;
                    oSImageElement.Add(languageElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageCreateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new VirtualMachineImageCreateResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement oSImageElement2 = responseDoc.Element(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                    if (oSImageElement2 != null)
                    {
                        XElement locationElement = oSImageElement2.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                        if (locationElement != null)
                        {
                            string locationInstance = locationElement.Value;
                            result.Location = locationInstance;
                        }
                        
                        XElement categoryElement = oSImageElement2.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                        if (categoryElement != null)
                        {
                            string categoryInstance = categoryElement.Value;
                            result.Category = categoryInstance;
                        }
                        
                        XElement labelElement2 = oSImageElement2.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                        if (labelElement2 != null)
                        {
                            string labelInstance = labelElement2.Value;
                            result.Label = labelInstance;
                        }
                        
                        XElement logicalSizeInGBElement = oSImageElement2.Element(XName.Get("LogicalSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                        if (logicalSizeInGBElement != null)
                        {
                            double logicalSizeInGBInstance = double.Parse(logicalSizeInGBElement.Value, CultureInfo.InvariantCulture);
                            result.LogicalSizeInGB = logicalSizeInGBInstance;
                        }
                        
                        XElement mediaLinkElement2 = oSImageElement2.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                        if (mediaLinkElement2 != null)
                        {
                            Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                            result.MediaLinkUri = mediaLinkInstance;
                        }
                        
                        XElement nameElement2 = oSImageElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance = nameElement2.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement osElement2 = oSImageElement2.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                        if (osElement2 != null)
                        {
                            string osInstance = osElement2.Value;
                            result.OperatingSystemType = osInstance;
                        }
                        
                        XElement eulaElement2 = oSImageElement2.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                        if (eulaElement2 != null)
                        {
                            string eulaInstance = eulaElement2.Value;
                            result.Eula = eulaInstance;
                        }
                        
                        XElement descriptionElement2 = oSImageElement2.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                        if (descriptionElement2 != null)
                        {
                            string descriptionInstance = descriptionElement2.Value;
                            result.Description = descriptionInstance;
                        }
                        
                        XElement imageFamilyElement2 = oSImageElement2.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                        if (imageFamilyElement2 != null)
                        {
                            string imageFamilyInstance = imageFamilyElement2.Value;
                            result.ImageFamily = imageFamilyInstance;
                        }
                        
                        XElement publishedDateElement2 = oSImageElement2.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                        if (publishedDateElement2 != null && string.IsNullOrEmpty(publishedDateElement2.Value) == false)
                        {
                            DateTime publishedDateInstance = DateTime.Parse(publishedDateElement2.Value, CultureInfo.InvariantCulture);
                            result.PublishedDate = publishedDateInstance;
                        }
                        
                        XElement publisherNameElement = oSImageElement2.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                        if (publisherNameElement != null)
                        {
                            string publisherNameInstance = publisherNameElement.Value;
                            result.PublisherName = publisherNameInstance;
                        }
                        
                        XElement isPremiumElement2 = oSImageElement2.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                        if (isPremiumElement2 != null && string.IsNullOrEmpty(isPremiumElement2.Value) == false)
                        {
                            bool isPremiumInstance = bool.Parse(isPremiumElement2.Value);
                            result.IsPremium = isPremiumInstance;
                        }
                        
                        XElement showInGuiElement2 = oSImageElement2.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                        if (showInGuiElement2 != null && string.IsNullOrEmpty(showInGuiElement2.Value) == false)
                        {
                            bool showInGuiInstance = bool.Parse(showInGuiElement2.Value);
                            result.ShowInGui = showInGuiInstance;
                        }
                        
                        XElement privacyUriElement2 = oSImageElement2.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                        if (privacyUriElement2 != null)
                        {
                            Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement2.Value);
                            result.PrivacyUri = privacyUriInstance;
                        }
                        
                        XElement iconUriElement2 = oSImageElement2.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                        if (iconUriElement2 != null)
                        {
                            Uri iconUriInstance = TypeConversion.TryParseUri(iconUriElement2.Value);
                            result.IconUri = iconUriInstance;
                        }
                        
                        XElement recommendedVMSizeElement2 = oSImageElement2.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                        if (recommendedVMSizeElement2 != null)
                        {
                            string recommendedVMSizeInstance = recommendedVMSizeElement2.Value;
                            result.RecommendedVMSize = recommendedVMSizeInstance;
                        }
                        
                        XElement smallIconUriElement2 = oSImageElement2.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                        if (smallIconUriElement2 != null)
                        {
                            Uri smallIconUriInstance = TypeConversion.TryParseUri(smallIconUriElement2.Value);
                            result.SmallIconUri = smallIconUriInstance;
                        }
                        
                        XElement languageElement2 = oSImageElement2.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                        if (languageElement2 != null)
                        {
                            string languageInstance = languageElement2.Value;
                            result.Language = languageInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete OS Image operation deletes the specified OS image from
        /// your image repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157203.aspx
        /// for more information)
        /// </summary>
        /// <param name='imageName'>
        /// The name of the image to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob for the image should also
        /// be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string imageName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/images/" + imageName + "?";
            if (deleteFromStorage == true)
            {
                url = url + "&comp=" + Uri.EscapeUriString("media");
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get OS Image operation retrieves the details for an operating
        /// system image from the image repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx
        /// for more information)
        /// </summary>
        /// <param name='imageName'>
        /// The name of the OS image to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A virtual machine image associated with your subscription.
        /// </returns>
        public async Task<VirtualMachineImageGetResponse> GetAsync(string imageName, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/images/" + imageName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new VirtualMachineImageGetResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement oSImageElement = responseDoc.Element(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                    if (oSImageElement != null)
                    {
                        XElement affinityGroupElement = oSImageElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                        if (affinityGroupElement != null)
                        {
                            string affinityGroupInstance = affinityGroupElement.Value;
                            result.AffinityGroup = affinityGroupInstance;
                        }
                        
                        XElement categoryElement = oSImageElement.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                        if (categoryElement != null)
                        {
                            string categoryInstance = categoryElement.Value;
                            result.Category = categoryInstance;
                        }
                        
                        XElement labelElement = oSImageElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                        if (labelElement != null)
                        {
                            string labelInstance = labelElement.Value;
                            result.Label = labelInstance;
                        }
                        
                        XElement locationElement = oSImageElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                        if (locationElement != null)
                        {
                            string locationInstance = locationElement.Value;
                            result.Location = locationInstance;
                        }
                        
                        XElement logicalSizeInGBElement = oSImageElement.Element(XName.Get("LogicalSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                        if (logicalSizeInGBElement != null)
                        {
                            double logicalSizeInGBInstance = double.Parse(logicalSizeInGBElement.Value, CultureInfo.InvariantCulture);
                            result.LogicalSizeInGB = logicalSizeInGBInstance;
                        }
                        
                        XElement mediaLinkElement = oSImageElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                        if (mediaLinkElement != null)
                        {
                            Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                            result.MediaLinkUri = mediaLinkInstance;
                        }
                        
                        XElement nameElement = oSImageElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement osElement = oSImageElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                        if (osElement != null)
                        {
                            string osInstance = osElement.Value;
                            result.OperatingSystemType = osInstance;
                        }
                        
                        XElement eulaElement = oSImageElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                        if (eulaElement != null)
                        {
                            string eulaInstance = eulaElement.Value;
                            result.Eula = eulaInstance;
                        }
                        
                        XElement descriptionElement = oSImageElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                        if (descriptionElement != null)
                        {
                            string descriptionInstance = descriptionElement.Value;
                            result.Description = descriptionInstance;
                        }
                        
                        XElement imageFamilyElement = oSImageElement.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                        if (imageFamilyElement != null)
                        {
                            string imageFamilyInstance = imageFamilyElement.Value;
                            result.ImageFamily = imageFamilyInstance;
                        }
                        
                        XElement showInGuiElement = oSImageElement.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                        if (showInGuiElement != null && string.IsNullOrEmpty(showInGuiElement.Value) == false)
                        {
                            bool showInGuiInstance = bool.Parse(showInGuiElement.Value);
                            result.ShowInGui = showInGuiInstance;
                        }
                        
                        XElement publishedDateElement = oSImageElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                        if (publishedDateElement != null)
                        {
                            DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture);
                            result.PublishedDate = publishedDateInstance;
                        }
                        
                        XElement isPremiumElement = oSImageElement.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                        if (isPremiumElement != null && string.IsNullOrEmpty(isPremiumElement.Value) == false)
                        {
                            bool isPremiumInstance = bool.Parse(isPremiumElement.Value);
                            result.IsPremium = isPremiumInstance;
                        }
                        
                        XElement iconUriElement = oSImageElement.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                        if (iconUriElement != null)
                        {
                            Uri iconUriInstance = TypeConversion.TryParseUri(iconUriElement.Value);
                            result.IconUri = iconUriInstance;
                        }
                        
                        XElement privacyUriElement = oSImageElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                        if (privacyUriElement != null)
                        {
                            Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                            result.PrivacyUri = privacyUriInstance;
                        }
                        
                        XElement recommendedVMSizeElement = oSImageElement.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                        if (recommendedVMSizeElement != null)
                        {
                            string recommendedVMSizeInstance = recommendedVMSizeElement.Value;
                            result.RecommendedVMSize = recommendedVMSizeInstance;
                        }
                        
                        XElement publisherNameElement = oSImageElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                        if (publisherNameElement != null)
                        {
                            string publisherNameInstance = publisherNameElement.Value;
                            result.PublisherName = publisherNameInstance;
                        }
                        
                        XElement smallIconUriElement = oSImageElement.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                        if (smallIconUriElement != null)
                        {
                            Uri smallIconUriInstance = TypeConversion.TryParseUri(smallIconUriElement.Value);
                            result.SmallIconUri = smallIconUriInstance;
                        }
                        
                        XElement languageElement = oSImageElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                        if (languageElement != null)
                        {
                            string languageInstance = languageElement.Value;
                            result.Language = languageInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List OS Images operation retrieves a list of the operating
        /// system images from the image repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157191.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List OS Images operation response.
        /// </returns>
        public async Task<VirtualMachineImageListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/images";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new VirtualMachineImageListResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement imagesSequenceElement = responseDoc.Element(XName.Get("Images", "http://schemas.microsoft.com/windowsazure"));
                    if (imagesSequenceElement != null)
                    {
                        foreach (XElement imagesElement in imagesSequenceElement.Elements(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure")))
                        {
                            VirtualMachineImageListResponse.VirtualMachineImage oSImageInstance = new VirtualMachineImageListResponse.VirtualMachineImage();
                            result.Images.Add(oSImageInstance);
                            
                            XElement affinityGroupElement = imagesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                            if (affinityGroupElement != null)
                            {
                                string affinityGroupInstance = affinityGroupElement.Value;
                                oSImageInstance.AffinityGroup = affinityGroupInstance;
                            }
                            
                            XElement categoryElement = imagesElement.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                            if (categoryElement != null)
                            {
                                string categoryInstance = categoryElement.Value;
                                oSImageInstance.Category = categoryInstance;
                            }
                            
                            XElement labelElement = imagesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null)
                            {
                                string labelInstance = labelElement.Value;
                                oSImageInstance.Label = labelInstance;
                            }
                            
                            XElement locationElement = imagesElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                            if (locationElement != null)
                            {
                                string locationInstance = locationElement.Value;
                                oSImageInstance.Location = locationInstance;
                            }
                            
                            XElement logicalSizeInGBElement = imagesElement.Element(XName.Get("LogicalSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                            if (logicalSizeInGBElement != null)
                            {
                                double logicalSizeInGBInstance = double.Parse(logicalSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                oSImageInstance.LogicalSizeInGB = logicalSizeInGBInstance;
                            }
                            
                            XElement mediaLinkElement = imagesElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                            if (mediaLinkElement != null)
                            {
                                Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                oSImageInstance.MediaLinkUri = mediaLinkInstance;
                            }
                            
                            XElement nameElement = imagesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                oSImageInstance.Name = nameInstance;
                            }
                            
                            XElement osElement = imagesElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                            if (osElement != null)
                            {
                                string osInstance = osElement.Value;
                                oSImageInstance.OperatingSystemType = osInstance;
                            }
                            
                            XElement eulaElement = imagesElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                            if (eulaElement != null)
                            {
                                string eulaInstance = eulaElement.Value;
                                oSImageInstance.Eula = eulaInstance;
                            }
                            
                            XElement descriptionElement = imagesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                oSImageInstance.Description = descriptionInstance;
                            }
                            
                            XElement imageFamilyElement = imagesElement.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                            if (imageFamilyElement != null)
                            {
                                string imageFamilyInstance = imageFamilyElement.Value;
                                oSImageInstance.ImageFamily = imageFamilyInstance;
                            }
                            
                            XElement publishedDateElement = imagesElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                            if (publishedDateElement != null)
                            {
                                DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture);
                                oSImageInstance.PublishedDate = publishedDateInstance;
                            }
                            
                            XElement isPremiumElement = imagesElement.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                            if (isPremiumElement != null && string.IsNullOrEmpty(isPremiumElement.Value) == false)
                            {
                                bool isPremiumInstance = bool.Parse(isPremiumElement.Value);
                                oSImageInstance.IsPremium = isPremiumInstance;
                            }
                            
                            XElement privacyUriElement = imagesElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                            if (privacyUriElement != null)
                            {
                                Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                                oSImageInstance.PrivacyUri = privacyUriInstance;
                            }
                            
                            XElement recommendedVMSizeElement = imagesElement.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                            if (recommendedVMSizeElement != null)
                            {
                                string recommendedVMSizeInstance = recommendedVMSizeElement.Value;
                                oSImageInstance.RecommendedVMSize = recommendedVMSizeInstance;
                            }
                            
                            XElement publisherNameElement = imagesElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                            if (publisherNameElement != null)
                            {
                                string publisherNameInstance = publisherNameElement.Value;
                                oSImageInstance.PublisherName = publisherNameInstance;
                            }
                            
                            XElement pricingDetailLinkElement = imagesElement.Element(XName.Get("PricingDetailLink", "http://schemas.microsoft.com/windowsazure"));
                            if (pricingDetailLinkElement != null)
                            {
                                Uri pricingDetailLinkInstance = TypeConversion.TryParseUri(pricingDetailLinkElement.Value);
                                oSImageInstance.PricingDetailUri = pricingDetailLinkInstance;
                            }
                            
                            XElement smallIconUriElement = imagesElement.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (smallIconUriElement != null)
                            {
                                Uri smallIconUriInstance = TypeConversion.TryParseUri(smallIconUriElement.Value);
                                oSImageInstance.SmallIconUri = smallIconUriInstance;
                            }
                            
                            XElement languageElement = imagesElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                            if (languageElement != null)
                            {
                                string languageInstance = languageElement.Value;
                                oSImageInstance.Language = languageInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Update OS Image operation updates an OS image that in your
        /// image repository.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157198.aspx
        /// for more information)
        /// </summary>
        /// <param name='imageName'>
        /// The name of the virtual machine image to be updated.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Virtual Machine Image operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Parameters returned from the Create Virtual Machine Image operation.
        /// </returns>
        public async Task<VirtualMachineImageUpdateResponse> UpdateAsync(string imageName, VirtualMachineImageUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/images/" + imageName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement oSImageElement = new XElement(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(oSImageElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = parameters.Label;
                oSImageElement.Add(labelElement);
                
                if (parameters.Eula != null)
                {
                    XElement eulaElement = new XElement(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                    eulaElement.Value = parameters.Eula;
                    oSImageElement.Add(eulaElement);
                }
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    oSImageElement.Add(descriptionElement);
                }
                
                if (parameters.ImageFamily != null)
                {
                    XElement imageFamilyElement = new XElement(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                    imageFamilyElement.Value = parameters.ImageFamily;
                    oSImageElement.Add(imageFamilyElement);
                }
                
                if (parameters.PublishedDate != null)
                {
                    XElement publishedDateElement = new XElement(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                    publishedDateElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.PublishedDate.Value.ToUniversalTime());
                    oSImageElement.Add(publishedDateElement);
                }
                
                XElement isPremiumElement = new XElement(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                isPremiumElement.Value = parameters.IsPremium.ToString().ToLower();
                oSImageElement.Add(isPremiumElement);
                
                if (parameters.PrivacyUri != null)
                {
                    XElement privacyUriElement = new XElement(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                    privacyUriElement.Value = parameters.PrivacyUri.ToString();
                    oSImageElement.Add(privacyUriElement);
                }
                
                if (parameters.IconUri != null)
                {
                    XElement iconUriElement = new XElement(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                    iconUriElement.Value = parameters.IconUri.ToString();
                    oSImageElement.Add(iconUriElement);
                }
                
                if (parameters.RecommendedVMSize != null)
                {
                    XElement recommendedVMSizeElement = new XElement(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                    recommendedVMSizeElement.Value = parameters.RecommendedVMSize;
                    oSImageElement.Add(recommendedVMSizeElement);
                }
                
                if (parameters.SmallIconUri != null)
                {
                    XElement smallIconUriElement = new XElement(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                    smallIconUriElement.Value = parameters.SmallIconUri.ToString();
                    oSImageElement.Add(smallIconUriElement);
                }
                
                if (parameters.Language != null)
                {
                    XElement languageElement = new XElement(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                    languageElement.Value = parameters.Language;
                    oSImageElement.Add(languageElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineImageUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new VirtualMachineImageUpdateResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement oSImageElement2 = responseDoc.Element(XName.Get("OSImage", "http://schemas.microsoft.com/windowsazure"));
                    if (oSImageElement2 != null)
                    {
                        XElement locationElement = oSImageElement2.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                        if (locationElement != null)
                        {
                            string locationInstance = locationElement.Value;
                            result.Location = locationInstance;
                        }
                        
                        XElement categoryElement = oSImageElement2.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                        if (categoryElement != null)
                        {
                            string categoryInstance = categoryElement.Value;
                            result.Category = categoryInstance;
                        }
                        
                        XElement labelElement2 = oSImageElement2.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                        if (labelElement2 != null)
                        {
                            string labelInstance = labelElement2.Value;
                            result.Label = labelInstance;
                        }
                        
                        XElement logicalSizeInGBElement = oSImageElement2.Element(XName.Get("LogicalSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                        if (logicalSizeInGBElement != null)
                        {
                            double logicalSizeInGBInstance = double.Parse(logicalSizeInGBElement.Value, CultureInfo.InvariantCulture);
                            result.LogicalSizeInGB = logicalSizeInGBInstance;
                        }
                        
                        XElement mediaLinkElement = oSImageElement2.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                        if (mediaLinkElement != null)
                        {
                            Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                            result.MediaLinkUri = mediaLinkInstance;
                        }
                        
                        XElement nameElement = oSImageElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement osElement = oSImageElement2.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                        if (osElement != null)
                        {
                            string osInstance = osElement.Value;
                            result.OperatingSystemType = osInstance;
                        }
                        
                        XElement eulaElement2 = oSImageElement2.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                        if (eulaElement2 != null)
                        {
                            string eulaInstance = eulaElement2.Value;
                            result.Eula = eulaInstance;
                        }
                        
                        XElement descriptionElement2 = oSImageElement2.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                        if (descriptionElement2 != null)
                        {
                            string descriptionInstance = descriptionElement2.Value;
                            result.Description = descriptionInstance;
                        }
                        
                        XElement imageFamilyElement2 = oSImageElement2.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                        if (imageFamilyElement2 != null)
                        {
                            string imageFamilyInstance = imageFamilyElement2.Value;
                            result.ImageFamily = imageFamilyInstance;
                        }
                        
                        XElement publishedDateElement2 = oSImageElement2.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                        if (publishedDateElement2 != null && string.IsNullOrEmpty(publishedDateElement2.Value) == false)
                        {
                            DateTime publishedDateInstance = DateTime.Parse(publishedDateElement2.Value, CultureInfo.InvariantCulture);
                            result.PublishedDate = publishedDateInstance;
                        }
                        
                        XElement publisherNameElement = oSImageElement2.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                        if (publisherNameElement != null)
                        {
                            string publisherNameInstance = publisherNameElement.Value;
                            result.PublisherName = publisherNameInstance;
                        }
                        
                        XElement isPremiumElement2 = oSImageElement2.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                        if (isPremiumElement2 != null && string.IsNullOrEmpty(isPremiumElement2.Value) == false)
                        {
                            bool isPremiumInstance = bool.Parse(isPremiumElement2.Value);
                            result.IsPremium = isPremiumInstance;
                        }
                        
                        XElement showInGuiElement = oSImageElement2.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                        if (showInGuiElement != null && string.IsNullOrEmpty(showInGuiElement.Value) == false)
                        {
                            bool showInGuiInstance = bool.Parse(showInGuiElement.Value);
                            result.ShowInGui = showInGuiInstance;
                        }
                        
                        XElement privacyUriElement2 = oSImageElement2.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                        if (privacyUriElement2 != null)
                        {
                            Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement2.Value);
                            result.PrivacyUri = privacyUriInstance;
                        }
                        
                        XElement iconUriElement2 = oSImageElement2.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                        if (iconUriElement2 != null)
                        {
                            Uri iconUriInstance = TypeConversion.TryParseUri(iconUriElement2.Value);
                            result.IconUri = iconUriInstance;
                        }
                        
                        XElement recommendedVMSizeElement2 = oSImageElement2.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                        if (recommendedVMSizeElement2 != null)
                        {
                            string recommendedVMSizeInstance = recommendedVMSizeElement2.Value;
                            result.RecommendedVMSize = recommendedVMSizeInstance;
                        }
                        
                        XElement smallIconUriElement2 = oSImageElement2.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                        if (smallIconUriElement2 != null)
                        {
                            Uri smallIconUriInstance = TypeConversion.TryParseUri(smallIconUriElement2.Value);
                            result.SmallIconUri = smallIconUriInstance;
                        }
                        
                        XElement languageElement2 = oSImageElement2.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                        if (languageElement2 != null)
                        {
                            string languageInstance = languageElement2.Value;
                            result.Language = languageInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
