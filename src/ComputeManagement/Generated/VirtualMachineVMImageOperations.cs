// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the virtual
    /// machine templates in your subscription.
    /// </summary>
    internal partial class VirtualMachineVMImageOperations : IServiceOperations<ComputeManagementClient>, IVirtualMachineVMImageOperations
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineVMImageOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualMachineVMImageOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Create VM Image operation creates a VM image that in your image
        /// repository.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn775054.aspx for
        /// more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the virtual machine VM image
        /// create operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginCreatingAsync(VirtualMachineVMImageCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.DataDiskConfigurations != null)
            {
                foreach (DataDiskConfigurationCreateParameters dataDiskConfigurationsParameterItem in parameters.DataDiskConfigurations)
                {
                    if (dataDiskConfigurationsParameterItem.MediaLink == null)
                    {
                        throw new ArgumentNullException("parameters.DataDiskConfigurations.MediaLink");
                    }
                }
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.OSDiskConfiguration == null)
            {
                throw new ArgumentNullException("parameters.OSDiskConfiguration");
            }
            if (parameters.OSDiskConfiguration.MediaLink == null)
            {
                throw new ArgumentNullException("parameters.OSDiskConfiguration.MediaLink");
            }
            if (parameters.OSDiskConfiguration.OS == null)
            {
                throw new ArgumentNullException("parameters.OSDiskConfiguration.OS");
            }
            if (parameters.OSDiskConfiguration.OSState == null)
            {
                throw new ArgumentNullException("parameters.OSDiskConfiguration.OSState");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/vmimages";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement vMImageElement = new XElement(XName.Get("VMImage", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(vMImageElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                vMImageElement.Add(nameElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = parameters.Label;
                vMImageElement.Add(labelElement);
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    vMImageElement.Add(descriptionElement);
                }
                
                XElement oSDiskConfigurationElement = new XElement(XName.Get("OSDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                vMImageElement.Add(oSDiskConfigurationElement);
                
                if (parameters.OSDiskConfiguration.HostCaching != null)
                {
                    XElement hostCachingElement = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                    hostCachingElement.Value = parameters.OSDiskConfiguration.HostCaching;
                    oSDiskConfigurationElement.Add(hostCachingElement);
                }
                
                XElement oSStateElement = new XElement(XName.Get("OSState", "http://schemas.microsoft.com/windowsazure"));
                oSStateElement.Value = parameters.OSDiskConfiguration.OSState;
                oSDiskConfigurationElement.Add(oSStateElement);
                
                XElement osElement = new XElement(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                osElement.Value = parameters.OSDiskConfiguration.OS;
                oSDiskConfigurationElement.Add(osElement);
                
                XElement mediaLinkElement = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                mediaLinkElement.Value = parameters.OSDiskConfiguration.MediaLink.AbsoluteUri;
                oSDiskConfigurationElement.Add(mediaLinkElement);
                
                if (parameters.DataDiskConfigurations != null)
                {
                    if (parameters.DataDiskConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.DataDiskConfigurations).IsInitialized)
                    {
                        XElement dataDiskConfigurationsSequenceElement = new XElement(XName.Get("DataDiskConfigurations", "http://schemas.microsoft.com/windowsazure"));
                        foreach (DataDiskConfigurationCreateParameters dataDiskConfigurationsItem in parameters.DataDiskConfigurations)
                        {
                            XElement dataDiskConfigurationElement = new XElement(XName.Get("DataDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                            dataDiskConfigurationsSequenceElement.Add(dataDiskConfigurationElement);
                            
                            if (dataDiskConfigurationsItem.HostCaching != null)
                            {
                                XElement hostCachingElement2 = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                hostCachingElement2.Value = dataDiskConfigurationsItem.HostCaching;
                                dataDiskConfigurationElement.Add(hostCachingElement2);
                            }
                            
                            if (dataDiskConfigurationsItem.LogicalUnitNumber != null)
                            {
                                XElement lunElement = new XElement(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                lunElement.Value = dataDiskConfigurationsItem.LogicalUnitNumber.ToString();
                                dataDiskConfigurationElement.Add(lunElement);
                            }
                            
                            XElement mediaLinkElement2 = new XElement(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                            mediaLinkElement2.Value = dataDiskConfigurationsItem.MediaLink.AbsoluteUri;
                            dataDiskConfigurationElement.Add(mediaLinkElement2);
                        }
                        vMImageElement.Add(dataDiskConfigurationsSequenceElement);
                    }
                }
                
                if (parameters.Language != null)
                {
                    XElement languageElement = new XElement(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                    languageElement.Value = parameters.Language;
                    vMImageElement.Add(languageElement);
                }
                
                if (parameters.ImageFamily != null)
                {
                    XElement imageFamilyElement = new XElement(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                    imageFamilyElement.Value = parameters.ImageFamily;
                    vMImageElement.Add(imageFamilyElement);
                }
                
                if (parameters.RecommendedVMSize != null)
                {
                    XElement recommendedVMSizeElement = new XElement(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                    recommendedVMSizeElement.Value = parameters.RecommendedVMSize;
                    vMImageElement.Add(recommendedVMSizeElement);
                }
                
                if (parameters.Eula != null)
                {
                    XElement eulaElement = new XElement(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                    eulaElement.Value = parameters.Eula;
                    vMImageElement.Add(eulaElement);
                }
                
                if (parameters.IconUri != null)
                {
                    XElement iconUriElement = new XElement(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                    iconUriElement.Value = parameters.IconUri;
                    vMImageElement.Add(iconUriElement);
                }
                
                if (parameters.SmallIconUri != null)
                {
                    XElement smallIconUriElement = new XElement(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                    smallIconUriElement.Value = parameters.SmallIconUri;
                    vMImageElement.Add(smallIconUriElement);
                }
                
                if (parameters.PrivacyUri != null)
                {
                    XElement privacyUriElement = new XElement(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                    privacyUriElement.Value = parameters.PrivacyUri.AbsoluteUri;
                    vMImageElement.Add(privacyUriElement);
                }
                
                if (parameters.PublishedDate != null)
                {
                    XElement publishedDateElement = new XElement(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                    publishedDateElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.PublishedDate.Value.ToUniversalTime());
                    vMImageElement.Add(publishedDateElement);
                }
                
                if (parameters.ShowInGui != null)
                {
                    XElement showInGuiElement = new XElement(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                    showInGuiElement.Value = parameters.ShowInGui.ToString().ToLower();
                    vMImageElement.Add(showInGuiElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Begin Deleting Virtual Machine Image operation deletes the
        /// specified virtual machine image.
        /// </summary>
        /// <param name='vmImageName'>
        /// Required. The name of the virtual machine image to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob for the image should also
        /// be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginDeletingAsync(string vmImageName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            // Validate
            if (vmImageName == null)
            {
                throw new ArgumentNullException("vmImageName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vmImageName", vmImageName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/vmimages/";
            url = url + Uri.EscapeDataString(vmImageName);
            List<string> queryParameters = new List<string>();
            if (deleteFromStorage == true)
            {
                queryParameters.Add("comp=media");
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Share an already replicated VM image. This operation is only for
        /// publishers. You have to be registered as image publisher with
        /// Windows Azure to be able to call this.
        /// </summary>
        /// <param name='vmImageName'>
        /// Required. The name of the virtual machine image to share.
        /// </param>
        /// <param name='permission'>
        /// Required. The sharing permission: public, msdn, or private.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginSharingAsync(string vmImageName, string permission, CancellationToken cancellationToken)
        {
            // Validate
            if (vmImageName == null)
            {
                throw new ArgumentNullException("vmImageName");
            }
            if (permission == null)
            {
                throw new ArgumentNullException("permission");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vmImageName", vmImageName);
                tracingParameters.Add("permission", permission);
                TracingAdapter.Enter(invocationId, this, "BeginSharingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/vmimages/";
            url = url + Uri.EscapeDataString(vmImageName);
            url = url + "/shareasync";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("permission=" + Uri.EscapeDataString(permission));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unreplicate an VM image to multiple target locations. This
        /// operation is only for publishers. You have to be registered as
        /// image publisher with Windows Azure to be able to call this. Note:
        /// The operation removes the published copies of the user VM Image.
        /// It does not remove the actual user VM Image. To remove the actual
        /// user VM Image, the publisher will have to call Delete VM Image.
        /// </summary>
        /// <param name='vmImageName'>
        /// Required. The name of the virtual machine image to replicate. Note:
        /// The VM Image Name should be the user VM Image, not the published
        /// name of the VM Image.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> BeginUnreplicatingAsync(string vmImageName, CancellationToken cancellationToken)
        {
            // Validate
            if (vmImageName == null)
            {
                throw new ArgumentNullException("vmImageName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vmImageName", vmImageName);
                TracingAdapter.Enter(invocationId, this, "BeginUnreplicatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/vmimages/";
            url = url + Uri.EscapeDataString(vmImageName);
            url = url + "/unreplicate";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create VM Image operation creates a VM image that in your image
        /// repository.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/dn775054.aspx for
        /// more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Virtual Machine Image
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> CreateAsync(VirtualMachineVMImageCreateParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachineVMImages.BeginCreatingAsync(parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete Virtual Machine Image operation deletes the specified
        /// virtual machine image.
        /// </summary>
        /// <param name='vmImageName'>
        /// Required. The name of the virtual machine image to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Required. Specifies that the source blob for the image should also
        /// be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> DeleteAsync(string vmImageName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vmImageName", vmImageName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachineVMImages.BeginDeletingAsync(vmImageName, deleteFromStorage, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets VMImage's properties and its replication details. This
        /// operation is only for publishers. You have to be registered as
        /// image publisher with Windows Azure to be able to call this.
        /// </summary>
        /// <param name='vmImageName'>
        /// Required. The name of the virtual machine image to replicate.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Details VM Images operation response.
        /// </returns>
        public async Task<VirtualMachineVMImageGetDetailsResponse> GetDetailsAsync(string vmImageName, CancellationToken cancellationToken)
        {
            // Validate
            if (vmImageName == null)
            {
                throw new ArgumentNullException("vmImageName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vmImageName", vmImageName);
                TracingAdapter.Enter(invocationId, this, "GetDetailsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/vmimages/";
            url = url + Uri.EscapeDataString(vmImageName);
            url = url + "/details";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineVMImageGetDetailsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineVMImageGetDetailsResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement vMImageDetailsElement = responseDoc.Element(XName.Get("VMImageDetails", "http://schemas.microsoft.com/windowsazure"));
                        if (vMImageDetailsElement != null)
                        {
                            XElement nameElement = vMImageDetailsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                result.Name = nameInstance;
                            }
                            
                            XElement labelElement = vMImageDetailsElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null)
                            {
                                string labelInstance = labelElement.Value;
                                result.Label = labelInstance;
                            }
                            
                            XElement categoryElement = vMImageDetailsElement.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                            if (categoryElement != null)
                            {
                                string categoryInstance = categoryElement.Value;
                                result.Category = categoryInstance;
                            }
                            
                            XElement descriptionElement = vMImageDetailsElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                result.Description = descriptionInstance;
                            }
                            
                            XElement oSDiskConfigurationElement = vMImageDetailsElement.Element(XName.Get("OSDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                            if (oSDiskConfigurationElement != null)
                            {
                                VirtualMachineVMImageListResponse.OSDiskConfiguration oSDiskConfigurationInstance = new VirtualMachineVMImageListResponse.OSDiskConfiguration();
                                result.OSDiskConfiguration = oSDiskConfigurationInstance;
                                
                                XElement nameElement2 = oSDiskConfigurationElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement2 != null)
                                {
                                    string nameInstance2 = nameElement2.Value;
                                    oSDiskConfigurationInstance.Name = nameInstance2;
                                }
                                
                                XElement hostCachingElement = oSDiskConfigurationElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                if (hostCachingElement != null)
                                {
                                    string hostCachingInstance = hostCachingElement.Value;
                                    oSDiskConfigurationInstance.HostCaching = hostCachingInstance;
                                }
                                
                                XElement oSStateElement = oSDiskConfigurationElement.Element(XName.Get("OSState", "http://schemas.microsoft.com/windowsazure"));
                                if (oSStateElement != null)
                                {
                                    string oSStateInstance = oSStateElement.Value;
                                    oSDiskConfigurationInstance.OSState = oSStateInstance;
                                }
                                
                                XElement osElement = oSDiskConfigurationElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                if (osElement != null)
                                {
                                    string osInstance = osElement.Value;
                                    oSDiskConfigurationInstance.OperatingSystem = osInstance;
                                }
                                
                                XElement mediaLinkElement = oSDiskConfigurationElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                if (mediaLinkElement != null)
                                {
                                    Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                    oSDiskConfigurationInstance.MediaLink = mediaLinkInstance;
                                }
                                
                                XElement logicalDiskSizeInGBElement = oSDiskConfigurationElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                if (logicalDiskSizeInGBElement != null)
                                {
                                    int logicalDiskSizeInGBInstance = int.Parse(logicalDiskSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                    oSDiskConfigurationInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                                }
                                
                                XElement iOTypeElement = oSDiskConfigurationElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                if (iOTypeElement != null)
                                {
                                    string iOTypeInstance = iOTypeElement.Value;
                                    oSDiskConfigurationInstance.IOType = iOTypeInstance;
                                }
                            }
                            
                            XElement dataDiskConfigurationsSequenceElement = vMImageDetailsElement.Element(XName.Get("DataDiskConfigurations", "http://schemas.microsoft.com/windowsazure"));
                            if (dataDiskConfigurationsSequenceElement != null)
                            {
                                foreach (XElement dataDiskConfigurationsElement in dataDiskConfigurationsSequenceElement.Elements(XName.Get("DataDiskConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    VirtualMachineVMImageListResponse.DataDiskConfiguration dataDiskConfigurationInstance = new VirtualMachineVMImageListResponse.DataDiskConfiguration();
                                    result.DataDiskConfigurations.Add(dataDiskConfigurationInstance);
                                    
                                    XElement nameElement3 = dataDiskConfigurationsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement3 != null)
                                    {
                                        string nameInstance3 = nameElement3.Value;
                                        dataDiskConfigurationInstance.Name = nameInstance3;
                                    }
                                    
                                    XElement hostCachingElement2 = dataDiskConfigurationsElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostCachingElement2 != null)
                                    {
                                        string hostCachingInstance2 = hostCachingElement2.Value;
                                        dataDiskConfigurationInstance.HostCaching = hostCachingInstance2;
                                    }
                                    
                                    XElement lunElement = dataDiskConfigurationsElement.Element(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                    if (lunElement != null && !string.IsNullOrEmpty(lunElement.Value))
                                    {
                                        int lunInstance = int.Parse(lunElement.Value, CultureInfo.InvariantCulture);
                                        dataDiskConfigurationInstance.LogicalUnitNumber = lunInstance;
                                    }
                                    
                                    XElement mediaLinkElement2 = dataDiskConfigurationsElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                    if (mediaLinkElement2 != null)
                                    {
                                        Uri mediaLinkInstance2 = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                        dataDiskConfigurationInstance.MediaLink = mediaLinkInstance2;
                                    }
                                    
                                    XElement logicalDiskSizeInGBElement2 = dataDiskConfigurationsElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                    if (logicalDiskSizeInGBElement2 != null)
                                    {
                                        int logicalDiskSizeInGBInstance2 = int.Parse(logicalDiskSizeInGBElement2.Value, CultureInfo.InvariantCulture);
                                        dataDiskConfigurationInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance2;
                                    }
                                    
                                    XElement iOTypeElement2 = dataDiskConfigurationsElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                    if (iOTypeElement2 != null)
                                    {
                                        string iOTypeInstance2 = iOTypeElement2.Value;
                                        dataDiskConfigurationInstance.IOType = iOTypeInstance2;
                                    }
                                }
                            }
                            
                            XElement serviceNameElement = vMImageDetailsElement.Element(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceNameElement != null)
                            {
                                string serviceNameInstance = serviceNameElement.Value;
                                result.ServiceName = serviceNameInstance;
                            }
                            
                            XElement deploymentNameElement = vMImageDetailsElement.Element(XName.Get("DeploymentName", "http://schemas.microsoft.com/windowsazure"));
                            if (deploymentNameElement != null)
                            {
                                string deploymentNameInstance = deploymentNameElement.Value;
                                result.DeploymentName = deploymentNameInstance;
                            }
                            
                            XElement roleNameElement = vMImageDetailsElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                            if (roleNameElement != null)
                            {
                                string roleNameInstance = roleNameElement.Value;
                                result.RoleName = roleNameInstance;
                            }
                            
                            XElement affinityGroupElement = vMImageDetailsElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                            if (affinityGroupElement != null)
                            {
                                string affinityGroupInstance = affinityGroupElement.Value;
                                result.AffinityGroup = affinityGroupInstance;
                            }
                            
                            XElement locationElement = vMImageDetailsElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                            if (locationElement != null)
                            {
                                string locationInstance = locationElement.Value;
                                result.Location = locationInstance;
                            }
                            
                            XElement createdTimeElement = vMImageDetailsElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/windowsazure"));
                            if (createdTimeElement != null && !string.IsNullOrEmpty(createdTimeElement.Value))
                            {
                                DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.CreatedTime = createdTimeInstance;
                            }
                            
                            XElement modifiedTimeElement = vMImageDetailsElement.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/windowsazure"));
                            if (modifiedTimeElement != null && !string.IsNullOrEmpty(modifiedTimeElement.Value))
                            {
                                DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.ModifiedTime = modifiedTimeInstance;
                            }
                            
                            XElement languageElement = vMImageDetailsElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                            if (languageElement != null)
                            {
                                string languageInstance = languageElement.Value;
                                result.Language = languageInstance;
                            }
                            
                            XElement imageFamilyElement = vMImageDetailsElement.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                            if (imageFamilyElement != null)
                            {
                                string imageFamilyInstance = imageFamilyElement.Value;
                                result.ImageFamily = imageFamilyInstance;
                            }
                            
                            XElement recommendedVMSizeElement = vMImageDetailsElement.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                            if (recommendedVMSizeElement != null)
                            {
                                string recommendedVMSizeInstance = recommendedVMSizeElement.Value;
                                result.RecommendedVMSize = recommendedVMSizeInstance;
                            }
                            
                            XElement isPremiumElement = vMImageDetailsElement.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                            if (isPremiumElement != null && !string.IsNullOrEmpty(isPremiumElement.Value))
                            {
                                bool isPremiumInstance = bool.Parse(isPremiumElement.Value);
                                result.IsPremium = isPremiumInstance;
                            }
                            
                            XElement eulaElement = vMImageDetailsElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                            if (eulaElement != null)
                            {
                                string eulaInstance = eulaElement.Value;
                                result.Eula = eulaInstance;
                            }
                            
                            XElement iconUriElement = vMImageDetailsElement.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (iconUriElement != null)
                            {
                                string iconUriInstance = iconUriElement.Value;
                                result.IconUri = iconUriInstance;
                            }
                            
                            XElement smallIconUriElement = vMImageDetailsElement.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                            if (smallIconUriElement != null)
                            {
                                string smallIconUriInstance = smallIconUriElement.Value;
                                result.SmallIconUri = smallIconUriInstance;
                            }
                            
                            XElement privacyUriElement = vMImageDetailsElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                            if (privacyUriElement != null)
                            {
                                Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                                result.PrivacyUri = privacyUriInstance;
                            }
                            
                            XElement publisherNameElement = vMImageDetailsElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                            if (publisherNameElement != null)
                            {
                                string publisherNameInstance = publisherNameElement.Value;
                                result.PublisherName = publisherNameInstance;
                            }
                            
                            XElement publishedDateElement = vMImageDetailsElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                            if (publishedDateElement != null && !string.IsNullOrEmpty(publishedDateElement.Value))
                            {
                                DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                result.PublishedDate = publishedDateInstance;
                            }
                            
                            XElement showInGuiElement = vMImageDetailsElement.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                            if (showInGuiElement != null && !string.IsNullOrEmpty(showInGuiElement.Value))
                            {
                                bool showInGuiInstance = bool.Parse(showInGuiElement.Value);
                                result.ShowInGui = showInGuiInstance;
                            }
                            
                            XElement pricingDetailLinkElement = vMImageDetailsElement.Element(XName.Get("PricingDetailLink", "http://schemas.microsoft.com/windowsazure"));
                            if (pricingDetailLinkElement != null)
                            {
                                Uri pricingDetailLinkInstance = TypeConversion.TryParseUri(pricingDetailLinkElement.Value);
                                result.PricingDetailLink = pricingDetailLinkInstance;
                            }
                            
                            XElement isCorruptedElement = vMImageDetailsElement.Element(XName.Get("IsCorrupted", "http://schemas.microsoft.com/windowsazure"));
                            if (isCorruptedElement != null && !string.IsNullOrEmpty(isCorruptedElement.Value))
                            {
                                bool isCorruptedInstance = bool.Parse(isCorruptedElement.Value);
                                result.IsCorrupted = isCorruptedInstance;
                            }
                            
                            XElement publishedNameElement = vMImageDetailsElement.Element(XName.Get("PublishedName", "http://schemas.microsoft.com/windowsazure"));
                            if (publishedNameElement != null)
                            {
                                string publishedNameInstance = publishedNameElement.Value;
                                result.PublishedName = publishedNameInstance;
                            }
                            
                            XElement sharingStatusElement = vMImageDetailsElement.Element(XName.Get("SharingStatus", "http://schemas.microsoft.com/windowsazure"));
                            if (sharingStatusElement != null)
                            {
                                string sharingStatusInstance = sharingStatusElement.Value;
                                result.SharingStatus = sharingStatusInstance;
                            }
                            
                            XElement replicationProgressSequenceElement = vMImageDetailsElement.Element(XName.Get("ReplicationProgress", "http://schemas.microsoft.com/windowsazure"));
                            if (replicationProgressSequenceElement != null)
                            {
                                foreach (XElement replicationProgressElement in replicationProgressSequenceElement.Elements(XName.Get("ReplicationProgressElement", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    VirtualMachineVMImageGetDetailsResponse.ReplicationProgressElement replicationProgressElementInstance = new VirtualMachineVMImageGetDetailsResponse.ReplicationProgressElement();
                                    result.ReplicationProgress.Add(replicationProgressElementInstance);
                                    
                                    XElement locationElement2 = replicationProgressElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                                    if (locationElement2 != null)
                                    {
                                        string locationInstance2 = locationElement2.Value;
                                        replicationProgressElementInstance.Location = locationInstance2;
                                    }
                                    
                                    XElement progressElement = replicationProgressElement.Element(XName.Get("Progress", "http://schemas.microsoft.com/windowsazure"));
                                    if (progressElement != null)
                                    {
                                        string progressInstance = progressElement.Value;
                                        replicationProgressElementInstance.Progress = progressInstance;
                                    }
                                }
                            }
                            
                            XElement computeImageAttributesElement = vMImageDetailsElement.Element(XName.Get("ComputeImageAttributes", "http://schemas.microsoft.com/windowsazure"));
                            if (computeImageAttributesElement != null)
                            {
                                ComputeImageAttributes computeImageAttributesInstance = new ComputeImageAttributes();
                                result.ComputeImageAttributes = computeImageAttributesInstance;
                                
                                XElement offerElement = computeImageAttributesElement.Element(XName.Get("Offer", "http://schemas.microsoft.com/windowsazure"));
                                if (offerElement != null)
                                {
                                    string offerInstance = offerElement.Value;
                                    computeImageAttributesInstance.Offer = offerInstance;
                                }
                                
                                XElement skuElement = computeImageAttributesElement.Element(XName.Get("Sku", "http://schemas.microsoft.com/windowsazure"));
                                if (skuElement != null)
                                {
                                    string skuInstance = skuElement.Value;
                                    computeImageAttributesInstance.Sku = skuInstance;
                                }
                                
                                XElement versionElement = computeImageAttributesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                if (versionElement != null)
                                {
                                    string versionInstance = versionElement.Value;
                                    computeImageAttributesInstance.Version = versionInstance;
                                }
                            }
                            
                            XElement marketplaceImageAttributesElement = vMImageDetailsElement.Element(XName.Get("MarketplaceImageAttributes", "http://schemas.microsoft.com/windowsazure"));
                            if (marketplaceImageAttributesElement != null)
                            {
                                MarketplaceImageAttributes marketplaceImageAttributesInstance = new MarketplaceImageAttributes();
                                result.MarketplaceImageAttributes = marketplaceImageAttributesInstance;
                                
                                XElement publisherIdElement = marketplaceImageAttributesElement.Element(XName.Get("PublisherId", "http://schemas.microsoft.com/windowsazure"));
                                if (publisherIdElement != null)
                                {
                                    string publisherIdInstance = publisherIdElement.Value;
                                    marketplaceImageAttributesInstance.PublisherId = publisherIdInstance;
                                }
                                
                                XElement planElement = marketplaceImageAttributesElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                                if (planElement != null)
                                {
                                    Plan planInstance = new Plan();
                                    marketplaceImageAttributesInstance.Plan = planInstance;
                                    
                                    XElement nameElement4 = planElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement4 != null)
                                    {
                                        string nameInstance4 = nameElement4.Value;
                                        planInstance.Name = nameInstance4;
                                    }
                                    
                                    XElement publisherElement = planElement.Element(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                                    if (publisherElement != null)
                                    {
                                        string publisherInstance = publisherElement.Value;
                                        planInstance.Publisher = publisherInstance;
                                    }
                                    
                                    XElement productElement = planElement.Element(XName.Get("Product", "http://schemas.microsoft.com/windowsazure"));
                                    if (productElement != null)
                                    {
                                        string productInstance = productElement.Value;
                                        planInstance.Product = productInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Virtual Machine Images operation retrieves a list of the
        /// virtual machine images.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List VM Images operation response.
        /// </returns>
        public async Task<VirtualMachineVMImageListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/vmimages";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineVMImageListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineVMImageListResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement vMImagesSequenceElement = responseDoc.Element(XName.Get("VMImages", "http://schemas.microsoft.com/windowsazure"));
                        if (vMImagesSequenceElement != null)
                        {
                            foreach (XElement vMImagesElement in vMImagesSequenceElement.Elements(XName.Get("VMImage", "http://schemas.microsoft.com/windowsazure")))
                            {
                                VirtualMachineVMImageListResponse.VirtualMachineVMImage vMImageInstance = new VirtualMachineVMImageListResponse.VirtualMachineVMImage();
                                result.VMImages.Add(vMImageInstance);
                                
                                XElement nameElement = vMImagesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    vMImageInstance.Name = nameInstance;
                                }
                                
                                XElement labelElement = vMImagesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement != null)
                                {
                                    string labelInstance = labelElement.Value;
                                    vMImageInstance.Label = labelInstance;
                                }
                                
                                XElement categoryElement = vMImagesElement.Element(XName.Get("Category", "http://schemas.microsoft.com/windowsazure"));
                                if (categoryElement != null)
                                {
                                    string categoryInstance = categoryElement.Value;
                                    vMImageInstance.Category = categoryInstance;
                                }
                                
                                XElement descriptionElement = vMImagesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement != null)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    vMImageInstance.Description = descriptionInstance;
                                }
                                
                                XElement oSDiskConfigurationElement = vMImagesElement.Element(XName.Get("OSDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                                if (oSDiskConfigurationElement != null)
                                {
                                    VirtualMachineVMImageListResponse.OSDiskConfiguration oSDiskConfigurationInstance = new VirtualMachineVMImageListResponse.OSDiskConfiguration();
                                    vMImageInstance.OSDiskConfiguration = oSDiskConfigurationInstance;
                                    
                                    XElement nameElement2 = oSDiskConfigurationElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement2 != null)
                                    {
                                        string nameInstance2 = nameElement2.Value;
                                        oSDiskConfigurationInstance.Name = nameInstance2;
                                    }
                                    
                                    XElement hostCachingElement = oSDiskConfigurationElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostCachingElement != null)
                                    {
                                        string hostCachingInstance = hostCachingElement.Value;
                                        oSDiskConfigurationInstance.HostCaching = hostCachingInstance;
                                    }
                                    
                                    XElement oSStateElement = oSDiskConfigurationElement.Element(XName.Get("OSState", "http://schemas.microsoft.com/windowsazure"));
                                    if (oSStateElement != null)
                                    {
                                        string oSStateInstance = oSStateElement.Value;
                                        oSDiskConfigurationInstance.OSState = oSStateInstance;
                                    }
                                    
                                    XElement osElement = oSDiskConfigurationElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                    if (osElement != null)
                                    {
                                        string osInstance = osElement.Value;
                                        oSDiskConfigurationInstance.OperatingSystem = osInstance;
                                    }
                                    
                                    XElement mediaLinkElement = oSDiskConfigurationElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                    if (mediaLinkElement != null)
                                    {
                                        Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                        oSDiskConfigurationInstance.MediaLink = mediaLinkInstance;
                                    }
                                    
                                    XElement logicalDiskSizeInGBElement = oSDiskConfigurationElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                    if (logicalDiskSizeInGBElement != null)
                                    {
                                        int logicalDiskSizeInGBInstance = int.Parse(logicalDiskSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                        oSDiskConfigurationInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                                    }
                                    
                                    XElement iOTypeElement = oSDiskConfigurationElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                    if (iOTypeElement != null)
                                    {
                                        string iOTypeInstance = iOTypeElement.Value;
                                        oSDiskConfigurationInstance.IOType = iOTypeInstance;
                                    }
                                }
                                
                                XElement dataDiskConfigurationsSequenceElement = vMImagesElement.Element(XName.Get("DataDiskConfigurations", "http://schemas.microsoft.com/windowsazure"));
                                if (dataDiskConfigurationsSequenceElement != null)
                                {
                                    foreach (XElement dataDiskConfigurationsElement in dataDiskConfigurationsSequenceElement.Elements(XName.Get("DataDiskConfiguration", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        VirtualMachineVMImageListResponse.DataDiskConfiguration dataDiskConfigurationInstance = new VirtualMachineVMImageListResponse.DataDiskConfiguration();
                                        vMImageInstance.DataDiskConfigurations.Add(dataDiskConfigurationInstance);
                                        
                                        XElement nameElement3 = dataDiskConfigurationsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement3 != null)
                                        {
                                            string nameInstance3 = nameElement3.Value;
                                            dataDiskConfigurationInstance.Name = nameInstance3;
                                        }
                                        
                                        XElement hostCachingElement2 = dataDiskConfigurationsElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                        if (hostCachingElement2 != null)
                                        {
                                            string hostCachingInstance2 = hostCachingElement2.Value;
                                            dataDiskConfigurationInstance.HostCaching = hostCachingInstance2;
                                        }
                                        
                                        XElement lunElement = dataDiskConfigurationsElement.Element(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                        if (lunElement != null && !string.IsNullOrEmpty(lunElement.Value))
                                        {
                                            int lunInstance = int.Parse(lunElement.Value, CultureInfo.InvariantCulture);
                                            dataDiskConfigurationInstance.LogicalUnitNumber = lunInstance;
                                        }
                                        
                                        XElement mediaLinkElement2 = dataDiskConfigurationsElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                        if (mediaLinkElement2 != null)
                                        {
                                            Uri mediaLinkInstance2 = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                            dataDiskConfigurationInstance.MediaLink = mediaLinkInstance2;
                                        }
                                        
                                        XElement logicalDiskSizeInGBElement2 = dataDiskConfigurationsElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                        if (logicalDiskSizeInGBElement2 != null)
                                        {
                                            int logicalDiskSizeInGBInstance2 = int.Parse(logicalDiskSizeInGBElement2.Value, CultureInfo.InvariantCulture);
                                            dataDiskConfigurationInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance2;
                                        }
                                        
                                        XElement iOTypeElement2 = dataDiskConfigurationsElement.Element(XName.Get("IOType", "http://schemas.microsoft.com/windowsazure"));
                                        if (iOTypeElement2 != null)
                                        {
                                            string iOTypeInstance2 = iOTypeElement2.Value;
                                            dataDiskConfigurationInstance.IOType = iOTypeInstance2;
                                        }
                                    }
                                }
                                
                                XElement serviceNameElement = vMImagesElement.Element(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                                if (serviceNameElement != null)
                                {
                                    string serviceNameInstance = serviceNameElement.Value;
                                    vMImageInstance.ServiceName = serviceNameInstance;
                                }
                                
                                XElement deploymentNameElement = vMImagesElement.Element(XName.Get("DeploymentName", "http://schemas.microsoft.com/windowsazure"));
                                if (deploymentNameElement != null)
                                {
                                    string deploymentNameInstance = deploymentNameElement.Value;
                                    vMImageInstance.DeploymentName = deploymentNameInstance;
                                }
                                
                                XElement roleNameElement = vMImagesElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                if (roleNameElement != null)
                                {
                                    string roleNameInstance = roleNameElement.Value;
                                    vMImageInstance.RoleName = roleNameInstance;
                                }
                                
                                XElement affinityGroupElement = vMImagesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                                if (affinityGroupElement != null)
                                {
                                    string affinityGroupInstance = affinityGroupElement.Value;
                                    vMImageInstance.AffinityGroup = affinityGroupInstance;
                                }
                                
                                XElement locationElement = vMImagesElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                                if (locationElement != null)
                                {
                                    string locationInstance = locationElement.Value;
                                    vMImageInstance.Location = locationInstance;
                                }
                                
                                XElement createdTimeElement = vMImagesElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/windowsazure"));
                                if (createdTimeElement != null && !string.IsNullOrEmpty(createdTimeElement.Value))
                                {
                                    DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    vMImageInstance.CreatedTime = createdTimeInstance;
                                }
                                
                                XElement modifiedTimeElement = vMImagesElement.Element(XName.Get("ModifiedTime", "http://schemas.microsoft.com/windowsazure"));
                                if (modifiedTimeElement != null && !string.IsNullOrEmpty(modifiedTimeElement.Value))
                                {
                                    DateTime modifiedTimeInstance = DateTime.Parse(modifiedTimeElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    vMImageInstance.ModifiedTime = modifiedTimeInstance;
                                }
                                
                                XElement languageElement = vMImagesElement.Element(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                                if (languageElement != null)
                                {
                                    string languageInstance = languageElement.Value;
                                    vMImageInstance.Language = languageInstance;
                                }
                                
                                XElement imageFamilyElement = vMImagesElement.Element(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                                if (imageFamilyElement != null)
                                {
                                    string imageFamilyInstance = imageFamilyElement.Value;
                                    vMImageInstance.ImageFamily = imageFamilyInstance;
                                }
                                
                                XElement recommendedVMSizeElement = vMImagesElement.Element(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                                if (recommendedVMSizeElement != null)
                                {
                                    string recommendedVMSizeInstance = recommendedVMSizeElement.Value;
                                    vMImageInstance.RecommendedVMSize = recommendedVMSizeInstance;
                                }
                                
                                XElement isPremiumElement = vMImagesElement.Element(XName.Get("IsPremium", "http://schemas.microsoft.com/windowsazure"));
                                if (isPremiumElement != null && !string.IsNullOrEmpty(isPremiumElement.Value))
                                {
                                    bool isPremiumInstance = bool.Parse(isPremiumElement.Value);
                                    vMImageInstance.IsPremium = isPremiumInstance;
                                }
                                
                                XElement eulaElement = vMImagesElement.Element(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                                if (eulaElement != null)
                                {
                                    string eulaInstance = eulaElement.Value;
                                    vMImageInstance.Eula = eulaInstance;
                                }
                                
                                XElement iconUriElement = vMImagesElement.Element(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                                if (iconUriElement != null)
                                {
                                    string iconUriInstance = iconUriElement.Value;
                                    vMImageInstance.IconUri = iconUriInstance;
                                }
                                
                                XElement smallIconUriElement = vMImagesElement.Element(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                                if (smallIconUriElement != null)
                                {
                                    string smallIconUriInstance = smallIconUriElement.Value;
                                    vMImageInstance.SmallIconUri = smallIconUriInstance;
                                }
                                
                                XElement privacyUriElement = vMImagesElement.Element(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                                if (privacyUriElement != null)
                                {
                                    Uri privacyUriInstance = TypeConversion.TryParseUri(privacyUriElement.Value);
                                    vMImageInstance.PrivacyUri = privacyUriInstance;
                                }
                                
                                XElement publisherNameElement = vMImagesElement.Element(XName.Get("PublisherName", "http://schemas.microsoft.com/windowsazure"));
                                if (publisherNameElement != null)
                                {
                                    string publisherNameInstance = publisherNameElement.Value;
                                    vMImageInstance.PublisherName = publisherNameInstance;
                                }
                                
                                XElement publishedDateElement = vMImagesElement.Element(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                                if (publishedDateElement != null && !string.IsNullOrEmpty(publishedDateElement.Value))
                                {
                                    DateTime publishedDateInstance = DateTime.Parse(publishedDateElement.Value, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal).ToLocalTime();
                                    vMImageInstance.PublishedDate = publishedDateInstance;
                                }
                                
                                XElement showInGuiElement = vMImagesElement.Element(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                                if (showInGuiElement != null && !string.IsNullOrEmpty(showInGuiElement.Value))
                                {
                                    bool showInGuiInstance = bool.Parse(showInGuiElement.Value);
                                    vMImageInstance.ShowInGui = showInGuiInstance;
                                }
                                
                                XElement pricingDetailLinkElement = vMImagesElement.Element(XName.Get("PricingDetailLink", "http://schemas.microsoft.com/windowsazure"));
                                if (pricingDetailLinkElement != null)
                                {
                                    Uri pricingDetailLinkInstance = TypeConversion.TryParseUri(pricingDetailLinkElement.Value);
                                    vMImageInstance.PricingDetailLink = pricingDetailLinkInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Replicate an VM image to multiple target locations. This operation
        /// is only for publishers. You have to be registered as image
        /// publisher with Windows Azure to be able to call this.
        /// </summary>
        /// <param name='vmImageName'>
        /// Required. The name of the virtual machine image to replicate.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Replicate Virtual Machine
        /// Image operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the published name of the image.
        /// </returns>
        public async Task<VirtualMachineVMImageReplicateResponse> ReplicateAsync(string vmImageName, VirtualMachineVMImageReplicateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (vmImageName == null)
            {
                throw new ArgumentNullException("vmImageName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ComputeImageAttributes == null)
            {
                throw new ArgumentNullException("parameters.ComputeImageAttributes");
            }
            if (parameters.ComputeImageAttributes.Offer == null)
            {
                throw new ArgumentNullException("parameters.ComputeImageAttributes.Offer");
            }
            if (parameters.ComputeImageAttributes.Sku == null)
            {
                throw new ArgumentNullException("parameters.ComputeImageAttributes.Sku");
            }
            if (parameters.ComputeImageAttributes.Version == null)
            {
                throw new ArgumentNullException("parameters.ComputeImageAttributes.Version");
            }
            if (parameters.MarketplaceImageAttributes != null)
            {
                if (parameters.MarketplaceImageAttributes.Plan == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.Plan");
                }
                if (parameters.MarketplaceImageAttributes.Plan.Name == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.Plan.Name");
                }
                if (parameters.MarketplaceImageAttributes.Plan.Product == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.Plan.Product");
                }
                if (parameters.MarketplaceImageAttributes.Plan.Publisher == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.Plan.Publisher");
                }
                if (parameters.MarketplaceImageAttributes.PublisherId == null)
                {
                    throw new ArgumentNullException("parameters.MarketplaceImageAttributes.PublisherId");
                }
            }
            if (parameters.TargetLocations == null)
            {
                throw new ArgumentNullException("parameters.TargetLocations");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vmImageName", vmImageName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ReplicateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/vmimages/";
            url = url + Uri.EscapeDataString(vmImageName);
            url = url + "/replicate";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement replicationInputElement = new XElement(XName.Get("ReplicationInput", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(replicationInputElement);
                
                if (parameters.TargetLocations is ILazyCollection == false || ((ILazyCollection)parameters.TargetLocations).IsInitialized)
                {
                    XElement targetLocationsSequenceElement = new XElement(XName.Get("TargetLocations", "http://schemas.microsoft.com/windowsazure"));
                    foreach (string targetLocationsItem in parameters.TargetLocations)
                    {
                        XElement targetLocationsItemElement = new XElement(XName.Get("Region", "http://schemas.microsoft.com/windowsazure"));
                        targetLocationsItemElement.Value = targetLocationsItem;
                        targetLocationsSequenceElement.Add(targetLocationsItemElement);
                    }
                    replicationInputElement.Add(targetLocationsSequenceElement);
                }
                
                XElement computeImageAttributesElement = new XElement(XName.Get("ComputeImageAttributes", "http://schemas.microsoft.com/windowsazure"));
                replicationInputElement.Add(computeImageAttributesElement);
                
                XElement offerElement = new XElement(XName.Get("Offer", "http://schemas.microsoft.com/windowsazure"));
                offerElement.Value = parameters.ComputeImageAttributes.Offer;
                computeImageAttributesElement.Add(offerElement);
                
                XElement skuElement = new XElement(XName.Get("Sku", "http://schemas.microsoft.com/windowsazure"));
                skuElement.Value = parameters.ComputeImageAttributes.Sku;
                computeImageAttributesElement.Add(skuElement);
                
                XElement versionElement = new XElement(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                versionElement.Value = parameters.ComputeImageAttributes.Version;
                computeImageAttributesElement.Add(versionElement);
                
                if (parameters.MarketplaceImageAttributes != null)
                {
                    XElement marketplaceImageAttributesElement = new XElement(XName.Get("MarketplaceImageAttributes", "http://schemas.microsoft.com/windowsazure"));
                    replicationInputElement.Add(marketplaceImageAttributesElement);
                    
                    XElement publisherIdElement = new XElement(XName.Get("PublisherId", "http://schemas.microsoft.com/windowsazure"));
                    publisherIdElement.Value = parameters.MarketplaceImageAttributes.PublisherId;
                    marketplaceImageAttributesElement.Add(publisherIdElement);
                    
                    XElement planElement = new XElement(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                    marketplaceImageAttributesElement.Add(planElement);
                    
                    XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                    nameElement.Value = parameters.MarketplaceImageAttributes.Plan.Name;
                    planElement.Add(nameElement);
                    
                    XElement publisherElement = new XElement(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                    publisherElement.Value = parameters.MarketplaceImageAttributes.Plan.Publisher;
                    planElement.Add(publisherElement);
                    
                    XElement productElement = new XElement(XName.Get("Product", "http://schemas.microsoft.com/windowsazure"));
                    productElement.Value = parameters.MarketplaceImageAttributes.Plan.Product;
                    planElement.Add(productElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualMachineVMImageReplicateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualMachineVMImageReplicateResponse();
                        XDocument responseDoc = XDocument.Parse(responseContent);
                        
                        XElement virtualMachineVMImageReplicateResponseElement = responseDoc.Element(XName.Get("VirtualMachineVMImageReplicateResponse", ""));
                        if (virtualMachineVMImageReplicateResponseElement != null)
                        {
                            XElement stringElement = virtualMachineVMImageReplicateResponseElement.Element(XName.Get("string", ""));
                            if (stringElement != null)
                            {
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Share an already replicated VM image. This operation is only for
        /// publishers. You have to be registered as image publisher with
        /// Windows Azure to be able to call this.
        /// </summary>
        /// <param name='vmImageName'>
        /// Required. The name of the virtual machine image to share.
        /// </param>
        /// <param name='permission'>
        /// Required. The sharing permission: public, msdn, or private.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> ShareAsync(string vmImageName, string permission, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vmImageName", vmImageName);
                tracingParameters.Add("permission", permission);
                TracingAdapter.Enter(invocationId, this, "ShareAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachineVMImages.BeginSharingAsync(vmImageName, permission, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// Unreplicate an VM image to multiple target locations. This
        /// operation is only for publishers. You have to be registered as
        /// image publisher with Windows Azure to be able to call this. Note:
        /// The operation removes the published copies of the user VM Image.
        /// It does not remove the actual user VM Image. To remove the actual
        /// user VM Image, the publisher will have to call Delete VM Image.
        /// </summary>
        /// <param name='vmImageName'>
        /// Required. The name of the virtual machine image to replicate. Note:
        /// The VM Image Name should be the user VM Image, not the published
        /// name of the VM Image.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<OperationStatusResponse> UnreplicateAsync(string vmImageName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("vmImageName", vmImageName);
                TracingAdapter.Enter(invocationId, this, "UnreplicateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            AzureOperationResponse response = await client.VirtualMachineVMImages.BeginUnreplicatingAsync(vmImageName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 30;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 30;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            if (result.Status != OperationStatus.Succeeded)
            {
                if (result.Error != null)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.Error = new CloudError();
                    ex.Error.Code = result.Error.Code;
                    ex.Error.Message = result.Error.Message;
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
                else
                {
                    CloudException ex = new CloudException("");
                    if (shouldTrace)
                    {
                        TracingAdapter.Error(invocationId, ex);
                    }
                    throw ex;
                }
            }
            
            return result;
        }
        
        /// <summary>
        /// The Update VM Image operation updates a VM image that in your image
        /// repository.
        /// </summary>
        /// <param name='imageName'>
        /// Required. The name of the virtual machine image to be updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Update Virtual Machine Image
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateAsync(string imageName, VirtualMachineVMImageUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (imageName == null)
            {
                throw new ArgumentNullException("imageName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageName", imageName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/services/vmimages/";
            url = url + Uri.EscapeDataString(imageName);
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2015-04-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement vMImageElement = new XElement(XName.Get("VMImage", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(vMImageElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = parameters.Label;
                vMImageElement.Add(labelElement);
                
                if (parameters.OSDiskConfiguration != null)
                {
                    XElement oSDiskConfigurationElement = new XElement(XName.Get("OSDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    vMImageElement.Add(oSDiskConfigurationElement);
                    
                    if (parameters.OSDiskConfiguration.HostCaching != null)
                    {
                        XElement hostCachingElement = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                        hostCachingElement.Value = parameters.OSDiskConfiguration.HostCaching;
                        oSDiskConfigurationElement.Add(hostCachingElement);
                    }
                }
                
                if (parameters.DataDiskConfigurations != null)
                {
                    if (parameters.DataDiskConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.DataDiskConfigurations).IsInitialized)
                    {
                        XElement dataDiskConfigurationsSequenceElement = new XElement(XName.Get("DataDiskConfigurations", "http://schemas.microsoft.com/windowsazure"));
                        foreach (DataDiskConfigurationUpdateParameters dataDiskConfigurationsItem in parameters.DataDiskConfigurations)
                        {
                            XElement dataDiskConfigurationElement = new XElement(XName.Get("DataDiskConfiguration", "http://schemas.microsoft.com/windowsazure"));
                            dataDiskConfigurationsSequenceElement.Add(dataDiskConfigurationElement);
                            
                            if (dataDiskConfigurationsItem.Name != null)
                            {
                                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                nameElement.Value = dataDiskConfigurationsItem.Name;
                                dataDiskConfigurationElement.Add(nameElement);
                            }
                            
                            if (dataDiskConfigurationsItem.HostCaching != null)
                            {
                                XElement hostCachingElement2 = new XElement(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                hostCachingElement2.Value = dataDiskConfigurationsItem.HostCaching;
                                dataDiskConfigurationElement.Add(hostCachingElement2);
                            }
                            
                            if (dataDiskConfigurationsItem.LogicalUnitNumber != null)
                            {
                                XElement lunElement = new XElement(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                lunElement.Value = dataDiskConfigurationsItem.LogicalUnitNumber.ToString();
                                dataDiskConfigurationElement.Add(lunElement);
                            }
                        }
                        vMImageElement.Add(dataDiskConfigurationsSequenceElement);
                    }
                }
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    vMImageElement.Add(descriptionElement);
                }
                
                if (parameters.Language != null)
                {
                    XElement languageElement = new XElement(XName.Get("Language", "http://schemas.microsoft.com/windowsazure"));
                    languageElement.Value = parameters.Language;
                    vMImageElement.Add(languageElement);
                }
                
                if (parameters.ImageFamily != null)
                {
                    XElement imageFamilyElement = new XElement(XName.Get("ImageFamily", "http://schemas.microsoft.com/windowsazure"));
                    imageFamilyElement.Value = parameters.ImageFamily;
                    vMImageElement.Add(imageFamilyElement);
                }
                
                if (parameters.RecommendedVMSize != null)
                {
                    XElement recommendedVMSizeElement = new XElement(XName.Get("RecommendedVMSize", "http://schemas.microsoft.com/windowsazure"));
                    recommendedVMSizeElement.Value = parameters.RecommendedVMSize;
                    vMImageElement.Add(recommendedVMSizeElement);
                }
                
                if (parameters.Eula != null)
                {
                    XElement eulaElement = new XElement(XName.Get("Eula", "http://schemas.microsoft.com/windowsazure"));
                    eulaElement.Value = parameters.Eula;
                    vMImageElement.Add(eulaElement);
                }
                
                if (parameters.IconUri != null)
                {
                    XElement iconUriElement = new XElement(XName.Get("IconUri", "http://schemas.microsoft.com/windowsazure"));
                    iconUriElement.Value = parameters.IconUri;
                    vMImageElement.Add(iconUriElement);
                }
                
                if (parameters.SmallIconUri != null)
                {
                    XElement smallIconUriElement = new XElement(XName.Get("SmallIconUri", "http://schemas.microsoft.com/windowsazure"));
                    smallIconUriElement.Value = parameters.SmallIconUri;
                    vMImageElement.Add(smallIconUriElement);
                }
                
                if (parameters.PrivacyUri != null)
                {
                    XElement privacyUriElement = new XElement(XName.Get("PrivacyUri", "http://schemas.microsoft.com/windowsazure"));
                    privacyUriElement.Value = parameters.PrivacyUri.AbsoluteUri;
                    vMImageElement.Add(privacyUriElement);
                }
                
                if (parameters.PublishedDate != null)
                {
                    XElement publishedDateElement = new XElement(XName.Get("PublishedDate", "http://schemas.microsoft.com/windowsazure"));
                    publishedDateElement.Value = string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.PublishedDate.Value.ToUniversalTime());
                    vMImageElement.Add(publishedDateElement);
                }
                
                if (parameters.ShowInGui != null)
                {
                    XElement showInGuiElement = new XElement(XName.Get("ShowInGui", "http://schemas.microsoft.com/windowsazure"));
                    showInGuiElement.Value = parameters.ShowInGui.ToString().ToLower();
                    vMImageElement.Add(showInGuiElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
