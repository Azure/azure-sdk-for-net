// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure
{
    /// <summary>
    /// The Service Management API provides programmatic access to much of the
    /// functionality available through the Management Portal. The Service
    /// Management API is a REST API. All API operations are performed over
    /// SSL and mutually authenticated using X.509 v3 certificates.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460799.aspx for
    /// more information)
    /// </summary>
    public static partial class VirtualMachineOperationsExtensions
    {
        /// <summary>
        /// The Capture Role operation creates a copy of the operating system
        /// virtual hard disk (VHD) that is deployed in the virtual machine,
        /// saves the VHD copy in the same storage location as the operating
        /// system VHD, and registers the copy as an image in your image
        /// gallery. From the captured image, you can create additional
        /// customized virtual machines. For more information about images and
        /// disks, see Manage Disks and Images. For more information about
        /// capturing images, see How to Capture an Image of a Virtual Machine
        /// Running Windows Server 2008 R2 or How to Capture an Image of a
        /// Virtual Machine Running Linux.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to restart.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Capture Virtual Machine operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginCapturing(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineCaptureParameters parameters)
        {
            try
            {
                return operations.BeginCapturingAsync(serviceName, deploymentName, virtualMachineName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Capture Role operation creates a copy of the operating system
        /// virtual hard disk (VHD) that is deployed in the virtual machine,
        /// saves the VHD copy in the same storage location as the operating
        /// system VHD, and registers the copy as an image in your image
        /// gallery. From the captured image, you can create additional
        /// customized virtual machines. For more information about images and
        /// disks, see Manage Disks and Images. For more information about
        /// capturing images, see How to Capture an Image of a Virtual Machine
        /// Running Windows Server 2008 R2 or How to Capture an Image of a
        /// Virtual Machine Running Linux.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to restart.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Capture Virtual Machine operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginCapturingAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineCaptureParameters parameters)
        {
            return operations.BeginCapturingAsync(serviceName, deploymentName, virtualMachineName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Add Role operation adds a virtual machine to an existing
        /// deployment.  You can refer to the OSDisk in the Add Role operation
        /// in the following ways.  Platform/User Image – Set the
        /// SourceImageName to a platform or user image. You can optionally
        /// specify the DiskName and MediaLink values as part the operation to
        /// control the name and location of target disk.  When DiskName and
        /// MediaLink are specified in this mode, they must not already exist
        /// in the system, otherwise a conflict fault is returned.  UserDisk –
        /// Set DiskName to a user supplied image in image repository.
        /// SourceImageName must be set to NULL. All other properties are
        /// ignored.  Blob in a Storage Account – Set MediaLink to a blob
        /// containing the image. SourceImageName and DiskName are set to
        /// NULL.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginCreating(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineCreateParameters parameters)
        {
            try
            {
                return operations.BeginCreatingAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Add Role operation adds a virtual machine to an existing
        /// deployment.  You can refer to the OSDisk in the Add Role operation
        /// in the following ways.  Platform/User Image – Set the
        /// SourceImageName to a platform or user image. You can optionally
        /// specify the DiskName and MediaLink values as part the operation to
        /// control the name and location of target disk.  When DiskName and
        /// MediaLink are specified in this mode, they must not already exist
        /// in the system, otherwise a conflict fault is returned.  UserDisk –
        /// Set DiskName to a user supplied image in image repository.
        /// SourceImageName must be set to NULL. All other properties are
        /// ignored.  Blob in a Storage Account – Set MediaLink to a blob
        /// containing the image. SourceImageName and DiskName are set to
        /// NULL.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginCreatingAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Virtual Machine Deployment operation provisions a
        /// virtual machine based on the supplied configuration.  When you
        /// create a deployment of a virtual machine, you should make sure
        /// that the cloud service and the disk or image that you use are
        /// located in the same region. For example, if the cloud service was
        /// created in the West US region, the disk or image that you use
        /// should also be located in a stor4age account in the West US
        /// region.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginCreatingDeployment(this IVirtualMachineOperations operations, string serviceName, VirtualMachineCreateDeploymentParameters parameters)
        {
            try
            {
                return operations.BeginCreatingDeploymentAsync(serviceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Create Virtual Machine Deployment operation provisions a
        /// virtual machine based on the supplied configuration.  When you
        /// create a deployment of a virtual machine, you should make sure
        /// that the cloud service and the disk or image that you use are
        /// located in the same region. For example, if the cloud service was
        /// created in the West US region, the disk or image that you use
        /// should also be located in a stor4age account in the West US
        /// region.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginCreatingDeploymentAsync(this IVirtualMachineOperations operations, string serviceName, VirtualMachineCreateDeploymentParameters parameters)
        {
            return operations.BeginCreatingDeploymentAsync(serviceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Role operation deletes the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob(s) for the virtual machine
        /// should also be deleted from storage.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginDeleting(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, bool deleteFromStorage)
        {
            try
            {
                return operations.BeginDeletingAsync(serviceName, deploymentName, virtualMachineName, deleteFromStorage).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Role operation deletes the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob(s) for the virtual machine
        /// should also be deleted from storage.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginDeletingAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, bool deleteFromStorage)
        {
            return operations.BeginDeletingAsync(serviceName, deploymentName, virtualMachineName, deleteFromStorage, CancellationToken.None);
        }
        
        /// <summary>
        /// The Restart role operation restarts the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to restart.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginRestarting(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            try
            {
                return operations.BeginRestartingAsync(serviceName, deploymentName, virtualMachineName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Restart role operation restarts the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to restart.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginRestartingAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            return operations.BeginRestartingAsync(serviceName, deploymentName, virtualMachineName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Shutdown Role operation shuts down the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to shutdown.
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the shutdown vm operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginShutdown(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineShutdownParameters parameters)
        {
            try
            {
                return operations.BeginShutdownAsync(serviceName, deploymentName, virtualMachineName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Shutdown Role operation shuts down the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to shutdown.
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the shutdown vm operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginShutdownAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineShutdownParameters parameters)
        {
            return operations.BeginShutdownAsync(serviceName, deploymentName, virtualMachineName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Shutdown Roles operation stops the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// The set of virtual machine roles to shutdown and their post
        /// shutdown state.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginShuttingDownRoles(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineShutdownRolesParameters parameters)
        {
            try
            {
                return operations.BeginShuttingDownRolesAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Shutdown Roles operation stops the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// The set of virtual machine roles to shutdown and their post
        /// shutdown state.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginShuttingDownRolesAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineShutdownRolesParameters parameters)
        {
            return operations.BeginShuttingDownRolesAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Start Role operation starts the specified virtual machine.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to start.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginStarting(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            try
            {
                return operations.BeginStartingAsync(serviceName, deploymentName, virtualMachineName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Start Role operation starts the specified virtual machine.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to start.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginStartingAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            return operations.BeginStartingAsync(serviceName, deploymentName, virtualMachineName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Start Roles operation starts the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// The set of virtual machine roles to start.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginStartingRoles(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineStartRolesParameters parameters)
        {
            try
            {
                return operations.BeginStartingRolesAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Start Roles operation starts the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// The set of virtual machine roles to start.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginStartingRolesAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineStartRolesParameters parameters)
        {
            return operations.BeginStartingRolesAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Role operation adds a virtual machine to an existing
        /// deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of your virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Virtual Machine operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginUpdating(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineUpdateParameters parameters)
        {
            try
            {
                return operations.BeginUpdatingAsync(serviceName, deploymentName, virtualMachineName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Update Role operation adds a virtual machine to an existing
        /// deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of your virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Virtual Machine operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginUpdatingAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineUpdateParameters parameters)
        {
            return operations.BeginUpdatingAsync(serviceName, deploymentName, virtualMachineName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The UpdateLoadBalancedEndpointSet operation changes the specified
        /// load-balanced InputEndpoints on all the roles of an Infrastructure
        /// as a Service deployment. Non load-balanced endpoints must be
        /// changed using UpdateRole.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Load Balanced Endpoint Set
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginUpdatingLoadBalancedEndpointSet(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineUpdateLoadBalancedSetParameters parameters)
        {
            try
            {
                return operations.BeginUpdatingLoadBalancedEndpointSetAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The UpdateLoadBalancedEndpointSet operation changes the specified
        /// load-balanced InputEndpoints on all the roles of an Infrastructure
        /// as a Service deployment. Non load-balanced endpoints must be
        /// changed using UpdateRole.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Load Balanced Endpoint Set
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginUpdatingLoadBalancedEndpointSetAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineUpdateLoadBalancedSetParameters parameters)
        {
            return operations.BeginUpdatingLoadBalancedEndpointSetAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Capture Role operation creates a copy of the operating system
        /// virtual hard disk (VHD) that is deployed in the virtual machine,
        /// saves the VHD copy in the same storage location as the operating
        /// system VHD, and registers the copy as an image in your image
        /// gallery. From the captured image, you can create additional
        /// customized virtual machines. For more information about images and
        /// disks, see Manage Disks and Images. For more information about
        /// capturing images, see How to Capture an Image of a Virtual Machine
        /// Running Windows Server 2008 R2 or How to Capture an Image of a
        /// Virtual Machine Running Linux.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to restart.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Capture Virtual Machine operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Capture(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineCaptureParameters parameters)
        {
            try
            {
                return operations.CaptureAsync(serviceName, deploymentName, virtualMachineName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Capture Role operation creates a copy of the operating system
        /// virtual hard disk (VHD) that is deployed in the virtual machine,
        /// saves the VHD copy in the same storage location as the operating
        /// system VHD, and registers the copy as an image in your image
        /// gallery. From the captured image, you can create additional
        /// customized virtual machines. For more information about images and
        /// disks, see Manage Disks and Images. For more information about
        /// capturing images, see How to Capture an Image of a Virtual Machine
        /// Running Windows Server 2008 R2 or How to Capture an Image of a
        /// Virtual Machine Running Linux.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157201.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to restart.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Capture Virtual Machine operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CaptureAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineCaptureParameters parameters)
        {
            return operations.CaptureAsync(serviceName, deploymentName, virtualMachineName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Add Role operation adds a virtual machine to an existing
        /// deployment.  You can refer to the OSDisk in the Add Role operation
        /// in the following ways.  Platform/User Image – Set the
        /// SourceImageName to a platform or user image. You can optionally
        /// specify the DiskName and MediaLink values as part the operation to
        /// control the name and location of target disk.  When DiskName and
        /// MediaLink are specified in this mode, they must not already exist
        /// in the system, otherwise a conflict fault is returned.  UserDisk –
        /// Set DiskName to a user supplied image in image repository.
        /// SourceImageName must be set to NULL. All other properties are
        /// ignored.  Blob in a Storage Account – Set MediaLink to a blob
        /// containing the image. SourceImageName and DiskName are set to
        /// NULL.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Create(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Add Role operation adds a virtual machine to an existing
        /// deployment.  You can refer to the OSDisk in the Add Role operation
        /// in the following ways.  Platform/User Image – Set the
        /// SourceImageName to a platform or user image. You can optionally
        /// specify the DiskName and MediaLink values as part the operation to
        /// control the name and location of target disk.  When DiskName and
        /// MediaLink are specified in this mode, they must not already exist
        /// in the system, otherwise a conflict fault is returned.  UserDisk –
        /// Set DiskName to a user supplied image in image repository.
        /// SourceImageName must be set to NULL. All other properties are
        /// ignored.  Blob in a Storage Account – Set MediaLink to a blob
        /// containing the image. SourceImageName and DiskName are set to
        /// NULL.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157186.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CreateAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineCreateParameters parameters)
        {
            return operations.CreateAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Create Virtual Machine Deployment operation provisions a
        /// virtual machine based on the supplied configuration.  When you
        /// create a deployment of a virtual machine, you should make sure
        /// that the cloud service and the disk or image that you use are
        /// located in the same region. For example, if the cloud service was
        /// created in the West US region, the disk or image that you use
        /// should also be located in a stor4age account in the West US
        /// region.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse CreateDeployment(this IVirtualMachineOperations operations, string serviceName, VirtualMachineCreateDeploymentParameters parameters)
        {
            try
            {
                return operations.CreateDeploymentAsync(serviceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Create Virtual Machine Deployment operation provisions a
        /// virtual machine based on the supplied configuration.  When you
        /// create a deployment of a virtual machine, you should make sure
        /// that the cloud service and the disk or image that you use are
        /// located in the same region. For example, if the cloud service was
        /// created in the West US region, the disk or image that you use
        /// should also be located in a stor4age account in the West US
        /// region.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157194.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Virtual Machine Deployment
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> CreateDeploymentAsync(this IVirtualMachineOperations operations, string serviceName, VirtualMachineCreateDeploymentParameters parameters)
        {
            return operations.CreateDeploymentAsync(serviceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Delete Role operation deletes the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob(s) for the virtual machine
        /// should also be deleted from storage.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Delete(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, bool deleteFromStorage)
        {
            try
            {
                return operations.DeleteAsync(serviceName, deploymentName, virtualMachineName, deleteFromStorage).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Delete Role operation deletes the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157184.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to delete.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob(s) for the virtual machine
        /// should also be deleted from storage.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> DeleteAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, bool deleteFromStorage)
        {
            return operations.DeleteAsync(serviceName, deploymentName, virtualMachineName, deleteFromStorage, CancellationToken.None);
        }
        
        /// <summary>
        /// The Get Role operation retrieves information about the specified
        /// virtual machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Get Virtual Machine operation response.
        /// </returns>
        public static VirtualMachineGetResponse Get(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            try
            {
                return operations.GetAsync(serviceName, deploymentName, virtualMachineName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Role operation retrieves information about the specified
        /// virtual machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Get Virtual Machine operation response.
        /// </returns>
        public static Task<VirtualMachineGetResponse> GetAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            return operations.GetAsync(serviceName, deploymentName, virtualMachineName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Download RDP file operation retrieves the Remote Desktop
        /// Protocol configuration file from the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Download RDP file operation response.
        /// </returns>
        public static VirtualMachineGetRemoteDesktopFileResponse GetRemoteDesktopFile(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            try
            {
                return operations.GetRemoteDesktopFileAsync(serviceName, deploymentName, virtualMachineName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Download RDP file operation retrieves the Remote Desktop
        /// Protocol configuration file from the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157183.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine.
        /// </param>
        /// <returns>
        /// The Download RDP file operation response.
        /// </returns>
        public static Task<VirtualMachineGetRemoteDesktopFileResponse> GetRemoteDesktopFileAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            return operations.GetRemoteDesktopFileAsync(serviceName, deploymentName, virtualMachineName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Restart role operation restarts the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to restart.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Restart(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            try
            {
                return operations.RestartAsync(serviceName, deploymentName, virtualMachineName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Restart role operation restarts the specified virtual machine.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157197.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to restart.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> RestartAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            return operations.RestartAsync(serviceName, deploymentName, virtualMachineName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Shutdown Role operation shuts down the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to shutdown.
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the shutdown vm operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Shutdown(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineShutdownParameters parameters)
        {
            try
            {
                return operations.ShutdownAsync(serviceName, deploymentName, virtualMachineName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Shutdown Role operation shuts down the specified virtual
        /// machine.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157195.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to shutdown.
        /// </param>
        /// <param name='parameters'>
        /// The parameters for the shutdown vm operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> ShutdownAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineShutdownParameters parameters)
        {
            return operations.ShutdownAsync(serviceName, deploymentName, virtualMachineName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Shutdown Roles operation stops the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// The set of virtual machine roles to shutdown and their post
        /// shutdown state.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse ShutdownRoles(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineShutdownRolesParameters parameters)
        {
            try
            {
                return operations.ShutdownRolesAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Shutdown Roles operation stops the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// The set of virtual machine roles to shutdown and their post
        /// shutdown state.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> ShutdownRolesAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineShutdownRolesParameters parameters)
        {
            return operations.ShutdownRolesAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Start Role operation starts the specified virtual machine.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to start.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Start(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            try
            {
                return operations.StartAsync(serviceName, deploymentName, virtualMachineName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Start Role operation starts the specified virtual machine.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj157189.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of the virtual machine to start.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> StartAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName)
        {
            return operations.StartAsync(serviceName, deploymentName, virtualMachineName, CancellationToken.None);
        }
        
        /// <summary>
        /// The Start Roles operation starts the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// The set of virtual machine roles to start.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse StartRoles(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineStartRolesParameters parameters)
        {
            try
            {
                return operations.StartRolesAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Start Roles operation starts the specified set of virtual
        /// machines.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// The set of virtual machine roles to start.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> StartRolesAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineStartRolesParameters parameters)
        {
            return operations.StartRolesAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The Update Role operation adds a virtual machine to an existing
        /// deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of your virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Virtual Machine operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse Update(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineUpdateParameters parameters)
        {
            try
            {
                return operations.UpdateAsync(serviceName, deploymentName, virtualMachineName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Update Role operation adds a virtual machine to an existing
        /// deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj157187.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='virtualMachineName'>
        /// The name of your virtual machine.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Virtual Machine operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> UpdateAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, string virtualMachineName, VirtualMachineUpdateParameters parameters)
        {
            return operations.UpdateAsync(serviceName, deploymentName, virtualMachineName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The UpdateLoadBalancedEndpointSet operation changes the specified
        /// load-balanced InputEndpoints on all the roles of an Infrastructure
        /// as a Service deployment. Non load-balanced endpoints must be
        /// changed using UpdateRole.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Load Balanced Endpoint Set
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static OperationStatusResponse UpdateLoadBalancedEndpointSet(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineUpdateLoadBalancedSetParameters parameters)
        {
            try
            {
                return operations.UpdateLoadBalancedEndpointSetAsync(serviceName, deploymentName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The UpdateLoadBalancedEndpointSet operation changes the specified
        /// load-balanced InputEndpoints on all the roles of an Infrastructure
        /// as a Service deployment. Non load-balanced endpoints must be
        /// changed using UpdateRole.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Compute.IVirtualMachineOperations.
        /// </param>
        /// <param name='serviceName'>
        /// The name of your service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Load Balanced Endpoint Set
        /// operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<OperationStatusResponse> UpdateLoadBalancedEndpointSetAsync(this IVirtualMachineOperations operations, string serviceName, string deploymentName, VirtualMachineUpdateLoadBalancedSetParameters parameters)
        {
            return operations.UpdateLoadBalancedEndpointSetAsync(serviceName, deploymentName, parameters, CancellationToken.None);
        }
    }
}
