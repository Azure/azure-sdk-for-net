// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the
    /// deployments beneath your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460812.aspx for
    /// more information)
    /// </summary>
    internal partial class DeploymentOperations : IServiceOperations<ComputeManagementClient>, IDeploymentOperations
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DeploymentOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginChangingConfigurationByNameAsync(string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                {
                    if (allRolesParameterItem.Id == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
                foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                {
                    if (namedRolesParameterItem.Extensions == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                    {
                        if (extensionsParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                        }
                    }
                    if (namedRolesParameterItem.RoleName == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginChangingConfigurationByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/?comp=config";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement changeConfigurationElement = new XElement(XName.Get("ChangeConfiguration", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(changeConfigurationElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                changeConfigurationElement.Add(configurationElement);
                
                if (parameters.TreatWarningsAsError != null)
                {
                    XElement treatWarningsAsErrorElement = new XElement(XName.Get("TreatWarningsAsError", "http://schemas.microsoft.com/windowsazure"));
                    treatWarningsAsErrorElement.Value = parameters.TreatWarningsAsError.ToString().ToLower();
                    changeConfigurationElement.Add(treatWarningsAsErrorElement);
                }
                
                if (parameters.Mode != null)
                {
                    XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                    modeElement.Value = parameters.Mode.ToString();
                    changeConfigurationElement.Add(modeElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                    {
                        string extendedPropertiesKey = pair.Key;
                        string extendedPropertiesValue = pair.Value;
                        XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                        
                        XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                        extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                        
                        XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesValueElement.Value = extendedPropertiesValue;
                        extendedPropertiesElement.Add(extendedPropertiesValueElement);
                    }
                    changeConfigurationElement.Add(extendedPropertiesDictionaryElement);
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    changeConfigurationElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                        {
                            XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                            allRolesSequenceElement.Add(extensionElement);
                            
                            XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            idElement.Value = allRolesItem.Id;
                            extensionElement.Add(idElement);
                        }
                        extensionConfigurationElement.Add(allRolesSequenceElement);
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                        {
                            XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                            namedRolesSequenceElement.Add(roleElement);
                            
                            XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                            roleNameElement.Value = namedRolesItem.RoleName;
                            roleElement.Add(roleNameElement);
                            
                            XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                            {
                                XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                extensionsSequenceElement.Add(extensionElement2);
                                
                                XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement2.Value = extensionsItem.Id;
                                extensionElement2.Add(idElement2);
                            }
                            roleElement.Add(extensionsSequenceElement);
                        }
                        extensionConfigurationElement.Add(namedRolesSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginChangingConfigurationBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                {
                    if (allRolesParameterItem.Id == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
                foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                {
                    if (namedRolesParameterItem.Extensions == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                    {
                        if (extensionsParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                        }
                    }
                    if (namedRolesParameterItem.RoleName == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginChangingConfigurationBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot + "/?comp=config";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement changeConfigurationElement = new XElement(XName.Get("ChangeConfiguration", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(changeConfigurationElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                changeConfigurationElement.Add(configurationElement);
                
                if (parameters.TreatWarningsAsError != null)
                {
                    XElement treatWarningsAsErrorElement = new XElement(XName.Get("TreatWarningsAsError", "http://schemas.microsoft.com/windowsazure"));
                    treatWarningsAsErrorElement.Value = parameters.TreatWarningsAsError.ToString().ToLower();
                    changeConfigurationElement.Add(treatWarningsAsErrorElement);
                }
                
                if (parameters.Mode != null)
                {
                    XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                    modeElement.Value = parameters.Mode.ToString();
                    changeConfigurationElement.Add(modeElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                    {
                        string extendedPropertiesKey = pair.Key;
                        string extendedPropertiesValue = pair.Value;
                        XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                        
                        XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                        extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                        
                        XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesValueElement.Value = extendedPropertiesValue;
                        extendedPropertiesElement.Add(extendedPropertiesValueElement);
                    }
                    changeConfigurationElement.Add(extendedPropertiesDictionaryElement);
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    changeConfigurationElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                        {
                            XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                            allRolesSequenceElement.Add(extensionElement);
                            
                            XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            idElement.Value = allRolesItem.Id;
                            extensionElement.Add(idElement);
                        }
                        extensionConfigurationElement.Add(allRolesSequenceElement);
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                        {
                            XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                            namedRolesSequenceElement.Add(roleElement);
                            
                            XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                            roleNameElement.Value = namedRolesItem.RoleName;
                            roleElement.Add(roleNameElement);
                            
                            XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                            {
                                XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                extensionsSequenceElement.Add(extensionElement2);
                                
                                XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement2.Value = extensionsItem.Id;
                                extensionElement2.Add(idElement2);
                            }
                            roleElement.Add(extensionsSequenceElement);
                        }
                        extensionConfigurationElement.Add(namedRolesSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create Deployment operation uploads a new service package and
        /// creates a new deployment in the staging or production
        /// environments.  The Create Deployment operation is an asynchronous
        /// operation. To determine whether the management service has
        /// finished processing the request, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginCreatingAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                {
                    if (allRolesParameterItem.Id == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
                foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                {
                    if (namedRolesParameterItem.Extensions == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                    {
                        if (extensionsParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                        }
                    }
                    if (namedRolesParameterItem.RoleName == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.Label.Length > 100)
            {
                throw new ArgumentOutOfRangeException("parameters.Label");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.PackageUri == null)
            {
                throw new ArgumentNullException("parameters.PackageUri");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement createDeploymentElement = new XElement(XName.Get("CreateDeployment", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(createDeploymentElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                createDeploymentElement.Add(nameElement);
                
                XElement packageUrlElement = new XElement(XName.Get("PackageUrl", "http://schemas.microsoft.com/windowsazure"));
                packageUrlElement.Value = parameters.PackageUri.ToString();
                createDeploymentElement.Add(packageUrlElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                createDeploymentElement.Add(labelElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                createDeploymentElement.Add(configurationElement);
                
                if (parameters.StartDeployment != null)
                {
                    XElement startDeploymentElement = new XElement(XName.Get("StartDeployment", "http://schemas.microsoft.com/windowsazure"));
                    startDeploymentElement.Value = parameters.StartDeployment.ToString().ToLower();
                    createDeploymentElement.Add(startDeploymentElement);
                }
                
                if (parameters.TreatWarningsAsError != null)
                {
                    XElement treatWarningsAsErrorElement = new XElement(XName.Get("TreatWarningsAsError", "http://schemas.microsoft.com/windowsazure"));
                    treatWarningsAsErrorElement.Value = parameters.TreatWarningsAsError.ToString().ToLower();
                    createDeploymentElement.Add(treatWarningsAsErrorElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                    {
                        string extendedPropertiesKey = pair.Key;
                        string extendedPropertiesValue = pair.Value;
                        XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                        
                        XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                        extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                        
                        XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesValueElement.Value = extendedPropertiesValue;
                        extendedPropertiesElement.Add(extendedPropertiesValueElement);
                    }
                    createDeploymentElement.Add(extendedPropertiesDictionaryElement);
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    createDeploymentElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                        {
                            XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                            allRolesSequenceElement.Add(extensionElement);
                            
                            XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            idElement.Value = allRolesItem.Id;
                            extensionElement.Add(idElement);
                        }
                        extensionConfigurationElement.Add(allRolesSequenceElement);
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                        {
                            XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                            namedRolesSequenceElement.Add(roleElement);
                            
                            XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                            roleNameElement.Value = namedRolesItem.RoleName;
                            roleElement.Add(roleNameElement);
                            
                            XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                            {
                                XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                extensionsSequenceElement.Add(extensionElement2);
                                
                                XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement2.Value = extensionsItem.Id;
                                extensionElement2.Add(idElement2);
                            }
                            roleElement.Add(extensionsSequenceElement);
                        }
                        extensionConfigurationElement.Add(namedRolesSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginDeletingByNameAsync(string serviceName, string deploymentName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                Tracing.Enter(invocationId, this, "BeginDeletingByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "?";
            if (deleteFromStorage == true)
            {
                url = url + "&comp=" + Uri.EscapeUriString("media");
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginDeletingBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                Tracing.Enter(invocationId, this, "BeginDeletingBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginRebootingRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                Tracing.Enter(invocationId, this, "BeginRebootingRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/roleinstances/" + roleInstanceName + "?comp=reboot";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginRebootingRoleInstanceByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                Tracing.Enter(invocationId, this, "BeginRebootingRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot + "/roleinstances/" + roleInstanceName + "?comp=reboot";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginReimagingRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                Tracing.Enter(invocationId, this, "BeginReimagingRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/roleinstances/" + roleInstanceName + "?comp=reimage";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginReimagingRoleInstanceByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (roleInstanceName == null)
            {
                throw new ArgumentNullException("roleInstanceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                Tracing.Enter(invocationId, this, "BeginReimagingRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot + "/roleinstances/" + roleInstanceName + "?comp=reimage";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Swap Deployment operation initiates a virtual IP address swap
        /// between the staging and production deployment environments for a
        /// service. If the service is currently running in the staging
        /// environment, it will be swapped to the production environment. If
        /// it is running in the production environment, it will be swapped to
        /// staging. For more information on this type of upgrade, see
        /// Performing Virtual IP Swap Upgrades.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Swap Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginSwappingAsync(string serviceName, DeploymentSwapParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.SourceDeployment == null)
            {
                throw new ArgumentNullException("parameters.SourceDeployment");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginSwappingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement swapElement = new XElement(XName.Get("Swap", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(swapElement);
                
                if (parameters.ProductionDeployment != null)
                {
                    XElement productionElement = new XElement(XName.Get("Production", "http://schemas.microsoft.com/windowsazure"));
                    productionElement.Value = parameters.ProductionDeployment;
                    swapElement.Add(productionElement);
                }
                
                XElement sourceDeploymentElement = new XElement(XName.Get("SourceDeployment", "http://schemas.microsoft.com/windowsazure"));
                sourceDeploymentElement.Value = parameters.SourceDeployment;
                swapElement.Add(sourceDeploymentElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginUpdatingStatusByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginUpdatingStatusByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/?comp=status";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateDeploymentStatusElement = new XElement(XName.Get("UpdateDeploymentStatus", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(updateDeploymentStatusElement);
                
                XElement statusElement = new XElement(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                statusElement.Value = parameters.Status.ToString();
                updateDeploymentStatusElement.Add(statusElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginUpdatingStatusByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginUpdatingStatusByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot + "/?comp=status";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateDeploymentStatusElement = new XElement(XName.Get("UpdateDeploymentStatus", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(updateDeploymentStatusElement);
                
                XElement statusElement = new XElement(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                statusElement.Value = parameters.Status.ToString();
                updateDeploymentStatusElement.Add(statusElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginUpgradingByNameAsync(string serviceName, string deploymentName, DeploymentUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                {
                    if (allRolesParameterItem.Id == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
                foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                {
                    if (namedRolesParameterItem.Extensions == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                    {
                        if (extensionsParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                        }
                    }
                    if (namedRolesParameterItem.RoleName == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.Label.Length > 100)
            {
                throw new ArgumentOutOfRangeException("parameters.Label");
            }
            if (parameters.PackageUri == null)
            {
                throw new ArgumentNullException("parameters.PackageUri");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginUpgradingByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/?comp=upgrade";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement upgradeDeploymentElement = new XElement(XName.Get("UpgradeDeployment", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(upgradeDeploymentElement);
                
                XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                modeElement.Value = parameters.Mode.ToString();
                upgradeDeploymentElement.Add(modeElement);
                
                XElement packageUrlElement = new XElement(XName.Get("PackageUrl", "http://schemas.microsoft.com/windowsazure"));
                packageUrlElement.Value = parameters.PackageUri.ToString();
                upgradeDeploymentElement.Add(packageUrlElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                upgradeDeploymentElement.Add(configurationElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                upgradeDeploymentElement.Add(labelElement);
                
                if (parameters.RoleToUpgrade != null)
                {
                    XElement roleToUpgradeElement = new XElement(XName.Get("RoleToUpgrade", "http://schemas.microsoft.com/windowsazure"));
                    roleToUpgradeElement.Value = parameters.RoleToUpgrade;
                    upgradeDeploymentElement.Add(roleToUpgradeElement);
                }
                
                XElement forceElement = new XElement(XName.Get("Force", "http://schemas.microsoft.com/windowsazure"));
                forceElement.Value = parameters.Force.ToString().ToLower();
                upgradeDeploymentElement.Add(forceElement);
                
                if (parameters.ExtendedProperties != null)
                {
                    XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                    {
                        string extendedPropertiesKey = pair.Key;
                        string extendedPropertiesValue = pair.Value;
                        XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                        
                        XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                        extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                        
                        XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesValueElement.Value = extendedPropertiesValue;
                        extendedPropertiesElement.Add(extendedPropertiesValueElement);
                    }
                    upgradeDeploymentElement.Add(extendedPropertiesDictionaryElement);
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    upgradeDeploymentElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                        {
                            XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                            allRolesSequenceElement.Add(extensionElement);
                            
                            XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            idElement.Value = allRolesItem.Id;
                            extensionElement.Add(idElement);
                        }
                        extensionConfigurationElement.Add(allRolesSequenceElement);
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                        {
                            XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                            namedRolesSequenceElement.Add(roleElement);
                            
                            XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                            roleNameElement.Value = namedRolesItem.RoleName;
                            roleElement.Add(roleNameElement);
                            
                            XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                            {
                                XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                extensionsSequenceElement.Add(extensionElement2);
                                
                                XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement2.Value = extensionsItem.Id;
                                extensionElement2.Add(idElement2);
                            }
                            roleElement.Add(extensionsSequenceElement);
                        }
                        extensionConfigurationElement.Add(namedRolesSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.  To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginUpgradingBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Configuration == null)
            {
                throw new ArgumentNullException("parameters.Configuration");
            }
            if (parameters.ExtensionConfiguration != null)
            {
                foreach (ExtensionConfiguration.Extension allRolesParameterItem in parameters.ExtensionConfiguration.AllRoles)
                {
                    if (allRolesParameterItem.Id == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.AllRoles.Id");
                    }
                }
                foreach (ExtensionConfiguration.NamedRole namedRolesParameterItem in parameters.ExtensionConfiguration.NamedRoles)
                {
                    if (namedRolesParameterItem.Extensions == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions");
                    }
                    foreach (ExtensionConfiguration.Extension extensionsParameterItem in namedRolesParameterItem.Extensions)
                    {
                        if (extensionsParameterItem.Id == null)
                        {
                            throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.Extensions.Id");
                        }
                    }
                    if (namedRolesParameterItem.RoleName == null)
                    {
                        throw new ArgumentNullException("parameters.ExtensionConfiguration.NamedRoles.RoleName");
                    }
                }
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.Label.Length > 100)
            {
                throw new ArgumentOutOfRangeException("parameters.Label");
            }
            if (parameters.PackageUri == null)
            {
                throw new ArgumentNullException("parameters.PackageUri");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginUpgradingBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot + "/?comp=upgrade";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement upgradeDeploymentElement = new XElement(XName.Get("UpgradeDeployment", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(upgradeDeploymentElement);
                
                XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                modeElement.Value = parameters.Mode.ToString();
                upgradeDeploymentElement.Add(modeElement);
                
                XElement packageUrlElement = new XElement(XName.Get("PackageUrl", "http://schemas.microsoft.com/windowsazure"));
                packageUrlElement.Value = parameters.PackageUri.ToString();
                upgradeDeploymentElement.Add(packageUrlElement);
                
                XElement configurationElement = new XElement(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                configurationElement.Value = TypeConversion.ToBase64String(parameters.Configuration);
                upgradeDeploymentElement.Add(configurationElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                upgradeDeploymentElement.Add(labelElement);
                
                if (parameters.RoleToUpgrade != null)
                {
                    XElement roleToUpgradeElement = new XElement(XName.Get("RoleToUpgrade", "http://schemas.microsoft.com/windowsazure"));
                    roleToUpgradeElement.Value = parameters.RoleToUpgrade;
                    upgradeDeploymentElement.Add(roleToUpgradeElement);
                }
                
                XElement forceElement = new XElement(XName.Get("Force", "http://schemas.microsoft.com/windowsazure"));
                forceElement.Value = parameters.Force.ToString().ToLower();
                upgradeDeploymentElement.Add(forceElement);
                
                if (parameters.ExtendedProperties != null)
                {
                    XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                    {
                        string extendedPropertiesKey = pair.Key;
                        string extendedPropertiesValue = pair.Value;
                        XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                        
                        XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                        extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                        
                        XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesValueElement.Value = extendedPropertiesValue;
                        extendedPropertiesElement.Add(extendedPropertiesValueElement);
                    }
                    upgradeDeploymentElement.Add(extendedPropertiesDictionaryElement);
                }
                
                if (parameters.ExtensionConfiguration != null)
                {
                    XElement extensionConfigurationElement = new XElement(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    upgradeDeploymentElement.Add(extensionConfigurationElement);
                    
                    if (parameters.ExtensionConfiguration.AllRoles != null)
                    {
                        XElement allRolesSequenceElement = new XElement(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.Extension allRolesItem in parameters.ExtensionConfiguration.AllRoles)
                        {
                            XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                            allRolesSequenceElement.Add(extensionElement);
                            
                            XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            idElement.Value = allRolesItem.Id;
                            extensionElement.Add(idElement);
                        }
                        extensionConfigurationElement.Add(allRolesSequenceElement);
                    }
                    
                    if (parameters.ExtensionConfiguration.NamedRoles != null)
                    {
                        XElement namedRolesSequenceElement = new XElement(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                        foreach (ExtensionConfiguration.NamedRole namedRolesItem in parameters.ExtensionConfiguration.NamedRoles)
                        {
                            XElement roleElement = new XElement(XName.Get("Role", "http://schemas.microsoft.com/windowsazure"));
                            namedRolesSequenceElement.Add(roleElement);
                            
                            XElement roleNameElement = new XElement(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                            roleNameElement.Value = namedRolesItem.RoleName;
                            roleElement.Add(roleNameElement);
                            
                            XElement extensionsSequenceElement = new XElement(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                            foreach (ExtensionConfiguration.Extension extensionsItem in namedRolesItem.Extensions)
                            {
                                XElement extensionElement2 = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                extensionsSequenceElement.Add(extensionElement2);
                                
                                XElement idElement2 = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                idElement2.Value = extensionsItem.Id;
                                extensionElement2.Add(idElement2);
                            }
                            roleElement.Add(extensionsSequenceElement);
                        }
                        extensionConfigurationElement.Add(namedRolesSequenceElement);
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginWalkingUpgradeDomainByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginWalkingUpgradeDomainByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "?comp=walkupgradedomain";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement walkUpgradeDomainElement = new XElement(XName.Get("WalkUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(walkUpgradeDomainElement);
                
                XElement upgradeDomainElement = new XElement(XName.Get("UpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                upgradeDomainElement.Value = parameters.UpgradeDomain.ToString();
                walkUpgradeDomainElement.Add(upgradeDomainElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginWalkingUpgradeDomainByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginWalkingUpgradeDomainByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot + "/?comp=walkupgradedomain";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement walkUpgradeDomainElement = new XElement(XName.Get("WalkUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(walkUpgradeDomainElement);
                
                XElement upgradeDomainElement = new XElement(XName.Get("UpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                upgradeDomainElement.Value = parameters.UpgradeDomain.ToString();
                walkUpgradeDomainElement.Add(upgradeDomainElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to change configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> ChangeConfigurationByNameAsync(string serviceName, string deploymentName, DeploymentChangeConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ChangeConfigurationByNameAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginChangingConfigurationByNameAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Change Deployment Configuration operation initiates a change to
        /// the deployment configuration.  The Change Deployment Configuration
        /// operation is an asynchronous operation. To determine whether the
        /// Management service has finished processing the request, call Get
        /// Operation Status.  For more information on asynchronous
        /// operations, see Tracking Asynchronous Service Management Requests.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460809.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to change deployment configuration for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to change deployment configuration for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Change Configuration Deployment
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> ChangeConfigurationBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentChangeConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ChangeConfigurationBySlotAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginChangingConfigurationBySlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create Deployment operation uploads a new service package and
        /// creates a new deployment in the staging or production
        /// environments.  The Create Deployment operation is an asynchronous
        /// operation. To determine whether the management service has
        /// finished processing the request, call Get Operation Status. For
        /// more information on asynchronous operations, see Tracking
        /// Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460813.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to create a deployment for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to create a deployment for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> CreateAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentCreateParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginCreatingAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='deleteFromStorage'>
        /// Optional. Specifies that the source blob for the disk should also
        /// be deleted from storage.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> DeleteByNameAsync(string serviceName, string deploymentName, bool deleteFromStorage, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("deleteFromStorage", deleteFromStorage);
                Tracing.Enter(invocationId, this, "DeleteByNameAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginDeletingByNameAsync(serviceName, deploymentName, deleteFromStorage, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Deployment operation deletes the specified deployment.
        /// The Delete Deployment operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460815.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> DeleteBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                Tracing.Enter(invocationId, this, "DeleteBySlotAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginDeletingBySlotAsync(serviceName, deploymentSlot, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Deployment operation returns configuration information,
        /// status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public async Task<DeploymentGetResponse> GetByNameAsync(string serviceName, string deploymentName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                Tracing.Enter(invocationId, this, "GetByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentGetResponse result = new DeploymentGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement deploymentElement = responseDoc.Element(XName.Get("Deployment", "http://schemas.microsoft.com/windowsazure"));
                    if (deploymentElement != null)
                    {
                        XElement nameElement = deploymentElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement deploymentSlotElement = deploymentElement.Element(XName.Get("DeploymentSlot", "http://schemas.microsoft.com/windowsazure"));
                        if (deploymentSlotElement != null)
                        {
                            DeploymentSlot deploymentSlotInstance = (DeploymentSlot)Enum.Parse(typeof(DeploymentSlot), deploymentSlotElement.Value, false);
                            result.DeploymentSlot = deploymentSlotInstance;
                        }
                        
                        XElement privateIDElement = deploymentElement.Element(XName.Get("PrivateID", "http://schemas.microsoft.com/windowsazure"));
                        if (privateIDElement != null)
                        {
                            string privateIDInstance = privateIDElement.Value;
                            result.PrivateId = privateIDInstance;
                        }
                        
                        XElement statusElement = deploymentElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement != null)
                        {
                            DeploymentStatus statusInstance = (DeploymentStatus)Enum.Parse(typeof(DeploymentStatus), statusElement.Value, false);
                            result.Status = statusInstance;
                        }
                        
                        XElement labelElement = deploymentElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                        if (labelElement != null)
                        {
                            string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                            result.Label = labelInstance;
                        }
                        
                        XElement urlElement = deploymentElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                        if (urlElement != null)
                        {
                            Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                            result.Uri = urlInstance;
                        }
                        
                        XElement configurationElement = deploymentElement.Element(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                        if (configurationElement != null)
                        {
                            string configurationInstance = TypeConversion.FromBase64String(configurationElement.Value);
                            result.Configuration = configurationInstance;
                        }
                        
                        XElement roleInstanceListSequenceElement = deploymentElement.Element(XName.Get("RoleInstanceList", "http://schemas.microsoft.com/windowsazure"));
                        if (roleInstanceListSequenceElement != null)
                        {
                            foreach (XElement roleInstanceListElement in roleInstanceListSequenceElement.Elements(XName.Get("RoleInstance", "http://schemas.microsoft.com/windowsazure")))
                            {
                                RoleInstance roleInstanceInstance = new RoleInstance();
                                result.RoleInstances.Add(roleInstanceInstance);
                                
                                XElement roleNameElement = roleInstanceListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                if (roleNameElement != null)
                                {
                                    string roleNameInstance = roleNameElement.Value;
                                    roleInstanceInstance.RoleName = roleNameInstance;
                                }
                                
                                XElement instanceNameElement = roleInstanceListElement.Element(XName.Get("InstanceName", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceNameElement != null)
                                {
                                    string instanceNameInstance = instanceNameElement.Value;
                                    roleInstanceInstance.InstanceName = instanceNameInstance;
                                }
                                
                                XElement instanceStatusElement = roleInstanceListElement.Element(XName.Get("InstanceStatus", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceStatusElement != null)
                                {
                                    string instanceStatusInstance = instanceStatusElement.Value;
                                    roleInstanceInstance.InstanceStatus = instanceStatusInstance;
                                }
                                
                                XElement instanceUpgradeDomainElement = roleInstanceListElement.Element(XName.Get("InstanceUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceUpgradeDomainElement != null && string.IsNullOrEmpty(instanceUpgradeDomainElement.Value) == false)
                                {
                                    int instanceUpgradeDomainInstance = int.Parse(instanceUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                    roleInstanceInstance.InstanceUpgradeDomain = instanceUpgradeDomainInstance;
                                }
                                
                                XElement instanceFaultDomainElement = roleInstanceListElement.Element(XName.Get("InstanceFaultDomain", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceFaultDomainElement != null && string.IsNullOrEmpty(instanceFaultDomainElement.Value) == false)
                                {
                                    int instanceFaultDomainInstance = int.Parse(instanceFaultDomainElement.Value, CultureInfo.InvariantCulture);
                                    roleInstanceInstance.InstanceFaultDomain = instanceFaultDomainInstance;
                                }
                                
                                XElement instanceSizeElement = roleInstanceListElement.Element(XName.Get("InstanceSize", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceSizeElement != null && string.IsNullOrEmpty(instanceSizeElement.Value) == false)
                                {
                                    VirtualMachineRoleSize instanceSizeInstance = (VirtualMachineRoleSize)Enum.Parse(typeof(VirtualMachineRoleSize), instanceSizeElement.Value, false);
                                    roleInstanceInstance.InstanceSize = instanceSizeInstance;
                                }
                                
                                XElement instanceStateDetailsElement = roleInstanceListElement.Element(XName.Get("InstanceStateDetails", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceStateDetailsElement != null)
                                {
                                    string instanceStateDetailsInstance = instanceStateDetailsElement.Value;
                                    roleInstanceInstance.InstanceStateDetails = instanceStateDetailsInstance;
                                }
                                
                                XElement instanceErrorCodeElement = roleInstanceListElement.Element(XName.Get("InstanceErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceErrorCodeElement != null)
                                {
                                    string instanceErrorCodeInstance = instanceErrorCodeElement.Value;
                                    roleInstanceInstance.InstanceErrorCode = instanceErrorCodeInstance;
                                }
                                
                                XElement ipAddressElement = roleInstanceListElement.Element(XName.Get("IpAddress", "http://schemas.microsoft.com/windowsazure"));
                                if (ipAddressElement != null)
                                {
                                    string ipAddressInstance = ipAddressElement.Value;
                                    roleInstanceInstance.IPAddress = ipAddressInstance;
                                }
                                
                                XElement instanceEndpointsSequenceElement = roleInstanceListElement.Element(XName.Get("InstanceEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceEndpointsSequenceElement != null)
                                {
                                    foreach (XElement instanceEndpointsElement in instanceEndpointsSequenceElement.Elements(XName.Get("InstanceEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        InstanceEndpoint instanceEndpointInstance = new InstanceEndpoint();
                                        roleInstanceInstance.InstanceEndpoints.Add(instanceEndpointInstance);
                                        
                                        XElement localPortElement = instanceEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                        if (localPortElement != null && string.IsNullOrEmpty(localPortElement.Value) == false)
                                        {
                                            int localPortInstance = int.Parse(localPortElement.Value, CultureInfo.InvariantCulture);
                                            instanceEndpointInstance.LocalPort = localPortInstance;
                                        }
                                        
                                        XElement nameElement2 = instanceEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement2 != null)
                                        {
                                            string nameInstance2 = nameElement2.Value;
                                            instanceEndpointInstance.Name = nameInstance2;
                                        }
                                        
                                        XElement publicPortElement = instanceEndpointsElement.Element(XName.Get("PublicPort", "http://schemas.microsoft.com/windowsazure"));
                                        if (publicPortElement != null)
                                        {
                                            int publicPortInstance = int.Parse(publicPortElement.Value, CultureInfo.InvariantCulture);
                                            instanceEndpointInstance.Port = publicPortInstance;
                                        }
                                        
                                        XElement protocolElement = instanceEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                        if (protocolElement != null)
                                        {
                                            string protocolInstance = protocolElement.Value;
                                            instanceEndpointInstance.Protocol = protocolInstance;
                                        }
                                        
                                        XElement vipElement = instanceEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                        if (vipElement != null)
                                        {
                                            string vipInstance = vipElement.Value;
                                            instanceEndpointInstance.VirtualIPAddress = vipInstance;
                                        }
                                    }
                                }
                                
                                XElement powerStateElement = roleInstanceListElement.Element(XName.Get("PowerState", "http://schemas.microsoft.com/windowsazure"));
                                if (powerStateElement != null)
                                {
                                    RoleInstancePowerState powerStateInstance = (RoleInstancePowerState)Enum.Parse(typeof(RoleInstancePowerState), powerStateElement.Value, false);
                                    roleInstanceInstance.PowerState = powerStateInstance;
                                }
                                
                                XElement hostNameElement = roleInstanceListElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                if (hostNameElement != null)
                                {
                                    string hostNameInstance = hostNameElement.Value;
                                    roleInstanceInstance.HostName = hostNameInstance;
                                }
                                
                                XElement remoteAccessCertificateThumbprintElement = roleInstanceListElement.Element(XName.Get("RemoteAccessCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (remoteAccessCertificateThumbprintElement != null)
                                {
                                    string remoteAccessCertificateThumbprintInstance = remoteAccessCertificateThumbprintElement.Value;
                                    roleInstanceInstance.RemoteAccessCertificateThumbprint = remoteAccessCertificateThumbprintInstance;
                                }
                            }
                        }
                        
                        XElement upgradeStatusElement = deploymentElement.Element(XName.Get("UpgradeStatus", "http://schemas.microsoft.com/windowsazure"));
                        if (upgradeStatusElement != null)
                        {
                            UpgradeStatus upgradeStatusInstance = new UpgradeStatus();
                            result.UpgradeStatus = upgradeStatusInstance;
                            
                            XElement upgradeTypeElement = upgradeStatusElement.Element(XName.Get("UpgradeType", "http://schemas.microsoft.com/windowsazure"));
                            if (upgradeTypeElement != null)
                            {
                                DeploymentUpgradeType upgradeTypeInstance = (DeploymentUpgradeType)Enum.Parse(typeof(DeploymentUpgradeType), upgradeTypeElement.Value, false);
                                upgradeStatusInstance.UpgradeType = upgradeTypeInstance;
                            }
                            
                            XElement currentUpgradeDomainStateElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomainState", "http://schemas.microsoft.com/windowsazure"));
                            if (currentUpgradeDomainStateElement != null)
                            {
                                UpgradeDomainState currentUpgradeDomainStateInstance = (UpgradeDomainState)Enum.Parse(typeof(UpgradeDomainState), currentUpgradeDomainStateElement.Value, false);
                                upgradeStatusInstance.CurrentUpgradeDomainState = currentUpgradeDomainStateInstance;
                            }
                            
                            XElement currentUpgradeDomainElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                            if (currentUpgradeDomainElement != null)
                            {
                                int currentUpgradeDomainInstance = int.Parse(currentUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                upgradeStatusInstance.CurrentUpgradeDomain = currentUpgradeDomainInstance;
                            }
                        }
                        
                        XElement upgradeDomainCountElement = deploymentElement.Element(XName.Get("UpgradeDomainCount", "http://schemas.microsoft.com/windowsazure"));
                        if (upgradeDomainCountElement != null)
                        {
                            int upgradeDomainCountInstance = int.Parse(upgradeDomainCountElement.Value, CultureInfo.InvariantCulture);
                            result.UpgradeDomainCount = upgradeDomainCountInstance;
                        }
                        
                        XElement roleListSequenceElement = deploymentElement.Element(XName.Get("RoleList", "http://schemas.microsoft.com/windowsazure"));
                        if (roleListSequenceElement != null)
                        {
                            foreach (XElement roleListElement in roleListSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                            {
                                Role roleInstance = new Role();
                                result.Roles.Add(roleInstance);
                                
                                XElement roleNameElement2 = roleListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                if (roleNameElement2 != null)
                                {
                                    string roleNameInstance2 = roleNameElement2.Value;
                                    roleInstance.RoleName = roleNameInstance2;
                                }
                                
                                XElement osVersionElement = roleListElement.Element(XName.Get("OsVersion", "http://schemas.microsoft.com/windowsazure"));
                                if (osVersionElement != null)
                                {
                                    string osVersionInstance = osVersionElement.Value;
                                    roleInstance.OSVersion = osVersionInstance;
                                }
                                
                                XElement roleTypeElement = roleListElement.Element(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                                if (roleTypeElement != null)
                                {
                                    string roleTypeInstance = roleTypeElement.Value;
                                    roleInstance.RoleType = roleTypeInstance;
                                }
                                
                                XElement configurationSetsSequenceElement = roleListElement.Element(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                                if (configurationSetsSequenceElement != null)
                                {
                                    foreach (XElement configurationSetsElement in configurationSetsSequenceElement.Elements(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                        roleInstance.ConfigurationSets.Add(configurationSetInstance);
                                        
                                        XElement configurationSetTypeElement = configurationSetsElement.Element(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                        if (configurationSetTypeElement != null)
                                        {
                                            string configurationSetTypeInstance = configurationSetTypeElement.Value;
                                            configurationSetInstance.ConfigurationSetType = configurationSetTypeInstance;
                                        }
                                        
                                        XElement inputEndpointsSequenceElement = configurationSetsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                        if (inputEndpointsSequenceElement != null)
                                        {
                                            foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                InputEndpoint inputEndpointInstance = new InputEndpoint();
                                                configurationSetInstance.InputEndpoints.Add(inputEndpointInstance);
                                                
                                                XElement loadBalancedEndpointSetNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                                if (loadBalancedEndpointSetNameElement != null)
                                                {
                                                    string loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement.Value;
                                                    inputEndpointInstance.LoadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                                                }
                                                
                                                XElement localPortElement2 = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                                if (localPortElement2 != null && string.IsNullOrEmpty(localPortElement2.Value) == false)
                                                {
                                                    int localPortInstance2 = int.Parse(localPortElement2.Value, CultureInfo.InvariantCulture);
                                                    inputEndpointInstance.LocalPort = localPortInstance2;
                                                }
                                                
                                                XElement nameElement3 = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement3 != null)
                                                {
                                                    string nameInstance3 = nameElement3.Value;
                                                    inputEndpointInstance.Name = nameInstance3;
                                                }
                                                
                                                XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                if (portElement != null && string.IsNullOrEmpty(portElement.Value) == false)
                                                {
                                                    int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                    inputEndpointInstance.Port = portInstance;
                                                }
                                                
                                                XElement loadBalancerProbeElement = inputEndpointsElement.Element(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                                if (loadBalancerProbeElement != null)
                                                {
                                                    LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                    inputEndpointInstance.LoadBalancerProbe = loadBalancerProbeInstance;
                                                    
                                                    XElement pathElement = loadBalancerProbeElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                    if (pathElement != null)
                                                    {
                                                        string pathInstance = pathElement.Value;
                                                        loadBalancerProbeInstance.Path = pathInstance;
                                                    }
                                                    
                                                    XElement portElement2 = loadBalancerProbeElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                    if (portElement2 != null)
                                                    {
                                                        int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                        loadBalancerProbeInstance.Port = portInstance2;
                                                    }
                                                    
                                                    XElement protocolElement2 = loadBalancerProbeElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    if (protocolElement2 != null)
                                                    {
                                                        LoadBalancerProbeTransportProtocol protocolInstance2 = ComputeManagementClient.ParseLoadBalancerProbeTransportProtocol(protocolElement2.Value);
                                                        loadBalancerProbeInstance.Protocol = protocolInstance2;
                                                    }
                                                    
                                                    XElement intervalInSecondsElement = loadBalancerProbeElement.Element(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                    if (intervalInSecondsElement != null && string.IsNullOrEmpty(intervalInSecondsElement.Value) == false)
                                                    {
                                                        int intervalInSecondsInstance = int.Parse(intervalInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                        loadBalancerProbeInstance.IntervalInSeconds = intervalInSecondsInstance;
                                                    }
                                                    
                                                    XElement timeoutInSecondsElement = loadBalancerProbeElement.Element(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                    if (timeoutInSecondsElement != null && string.IsNullOrEmpty(timeoutInSecondsElement.Value) == false)
                                                    {
                                                        int timeoutInSecondsInstance = int.Parse(timeoutInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                        loadBalancerProbeInstance.TimeoutInSeconds = timeoutInSecondsInstance;
                                                    }
                                                }
                                                
                                                XElement protocolElement3 = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                if (protocolElement3 != null)
                                                {
                                                    string protocolInstance3 = protocolElement3.Value;
                                                    inputEndpointInstance.Protocol = protocolInstance3;
                                                }
                                                
                                                XElement vipElement2 = inputEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                                if (vipElement2 != null)
                                                {
                                                    string vipInstance2 = vipElement2.Value;
                                                    inputEndpointInstance.VirtualIPAddress = vipInstance2;
                                                }
                                                
                                                XElement enableDirectServerReturnElement = inputEndpointsElement.Element(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                                if (enableDirectServerReturnElement != null && string.IsNullOrEmpty(enableDirectServerReturnElement.Value) == false)
                                                {
                                                    bool enableDirectServerReturnInstance = bool.Parse(enableDirectServerReturnElement.Value);
                                                    inputEndpointInstance.EnableDirectServerReturn = enableDirectServerReturnInstance;
                                                }
                                                
                                                XElement endpointAclElement = inputEndpointsElement.Element(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                                if (endpointAclElement != null)
                                                {
                                                    EndpointAcl endpointAclInstance = new EndpointAcl();
                                                    inputEndpointInstance.EndpointAcl = endpointAclInstance;
                                                    
                                                    XElement rulesSequenceElement = endpointAclElement.Element(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                    if (rulesSequenceElement != null)
                                                    {
                                                        foreach (XElement rulesElement in rulesSequenceElement.Elements(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            AccessControlListRule ruleInstance = new AccessControlListRule();
                                                            endpointAclInstance.Rules.Add(ruleInstance);
                                                            
                                                            XElement orderElement = rulesElement.Element(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                            if (orderElement != null && string.IsNullOrEmpty(orderElement.Value) == false)
                                                            {
                                                                int orderInstance = int.Parse(orderElement.Value, CultureInfo.InvariantCulture);
                                                                ruleInstance.Order = orderInstance;
                                                            }
                                                            
                                                            XElement actionElement = rulesElement.Element(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                            if (actionElement != null)
                                                            {
                                                                string actionInstance = actionElement.Value;
                                                                ruleInstance.Action = actionInstance;
                                                            }
                                                            
                                                            XElement remoteSubnetElement = rulesElement.Element(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                            if (remoteSubnetElement != null)
                                                            {
                                                                string remoteSubnetInstance = remoteSubnetElement.Value;
                                                                ruleInstance.RemoteSubnet = remoteSubnetInstance;
                                                            }
                                                            
                                                            XElement descriptionElement = rulesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                            if (descriptionElement != null)
                                                            {
                                                                string descriptionInstance = descriptionElement.Value;
                                                                ruleInstance.Description = descriptionInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        XElement subnetNamesSequenceElement = configurationSetsElement.Element(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                        if (subnetNamesSequenceElement != null)
                                        {
                                            foreach (XElement subnetNamesElement in subnetNamesSequenceElement.Elements(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                configurationSetInstance.SubnetNames.Add(subnetNamesElement.Value);
                                            }
                                        }
                                        
                                        XElement computerNameElement = configurationSetsElement.Element(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                        if (computerNameElement != null)
                                        {
                                            string computerNameInstance = computerNameElement.Value;
                                            configurationSetInstance.ComputerName = computerNameInstance;
                                        }
                                        
                                        XElement adminPasswordElement = configurationSetsElement.Element(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                        if (adminPasswordElement != null)
                                        {
                                            string adminPasswordInstance = adminPasswordElement.Value;
                                            configurationSetInstance.AdminPassword = adminPasswordInstance;
                                        }
                                        
                                        XElement resetPasswordOnFirstLogonElement = configurationSetsElement.Element(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                        if (resetPasswordOnFirstLogonElement != null && string.IsNullOrEmpty(resetPasswordOnFirstLogonElement.Value) == false)
                                        {
                                            bool resetPasswordOnFirstLogonInstance = bool.Parse(resetPasswordOnFirstLogonElement.Value);
                                            configurationSetInstance.ResetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                                        }
                                        
                                        XElement enableAutomaticUpdatesElement = configurationSetsElement.Element(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                        if (enableAutomaticUpdatesElement != null && string.IsNullOrEmpty(enableAutomaticUpdatesElement.Value) == false)
                                        {
                                            bool enableAutomaticUpdatesInstance = bool.Parse(enableAutomaticUpdatesElement.Value);
                                            configurationSetInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                        }
                                        
                                        XElement timeZoneElement = configurationSetsElement.Element(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                        if (timeZoneElement != null)
                                        {
                                            string timeZoneInstance = timeZoneElement.Value;
                                            configurationSetInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        XElement domainJoinElement = configurationSetsElement.Element(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                        if (domainJoinElement != null)
                                        {
                                            DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                            configurationSetInstance.DomainJoin = domainJoinInstance;
                                            
                                            XElement credentialsElement = domainJoinElement.Element(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                            if (credentialsElement != null)
                                            {
                                                DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                                domainJoinInstance.Credentials = credentialsInstance;
                                                
                                                XElement domainElement = credentialsElement.Element(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                                if (domainElement != null)
                                                {
                                                    string domainInstance = domainElement.Value;
                                                    credentialsInstance.Domain = domainInstance;
                                                }
                                                
                                                XElement usernameElement = credentialsElement.Element(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                                if (usernameElement != null)
                                                {
                                                    string usernameInstance = usernameElement.Value;
                                                    credentialsInstance.UserName = usernameInstance;
                                                }
                                                
                                                XElement passwordElement = credentialsElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                                if (passwordElement != null)
                                                {
                                                    string passwordInstance = passwordElement.Value;
                                                    credentialsInstance.Password = passwordInstance;
                                                }
                                            }
                                            
                                            XElement joinDomainElement = domainJoinElement.Element(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                            if (joinDomainElement != null)
                                            {
                                                string joinDomainInstance = joinDomainElement.Value;
                                                domainJoinInstance.DomainToJoin = joinDomainInstance;
                                            }
                                            
                                            XElement machineObjectOUElement = domainJoinElement.Element(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                            if (machineObjectOUElement != null)
                                            {
                                                string machineObjectOUInstance = machineObjectOUElement.Value;
                                                domainJoinInstance.LdapMachineObjectOU = machineObjectOUInstance;
                                            }
                                            
                                            XElement provisioningElement = domainJoinElement.Element(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                            if (provisioningElement != null)
                                            {
                                                DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                                domainJoinInstance.Provisioning = provisioningInstance;
                                                
                                                XElement accountDataElement = provisioningElement.Element(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                                if (accountDataElement != null)
                                                {
                                                    string accountDataInstance = accountDataElement.Value;
                                                    provisioningInstance.AccountData = accountDataInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement storedCertificateSettingsSequenceElement = configurationSetsElement.Element(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                        if (storedCertificateSettingsSequenceElement != null)
                                        {
                                            foreach (XElement storedCertificateSettingsElement in storedCertificateSettingsSequenceElement.Elements(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                                configurationSetInstance.StoredCertificateSettings.Add(certificateSettingInstance);
                                                
                                                XElement storeLocationElement = storedCertificateSettingsElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                                if (storeLocationElement != null)
                                                {
                                                }
                                                
                                                XElement storeNameElement = storedCertificateSettingsElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                                if (storeNameElement != null)
                                                {
                                                    string storeNameInstance = storeNameElement.Value;
                                                    certificateSettingInstance.StoreName = storeNameInstance;
                                                }
                                                
                                                XElement thumbprintElement = storedCertificateSettingsElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                if (thumbprintElement != null)
                                                {
                                                    string thumbprintInstance = thumbprintElement.Value;
                                                    certificateSettingInstance.Thumbprint = thumbprintInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement winRMElement = configurationSetsElement.Element(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                        if (winRMElement != null)
                                        {
                                            WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                            configurationSetInstance.WindowsRemoteManagement = winRMInstance;
                                            
                                            XElement listenersSequenceElement = winRMElement.Element(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                            if (listenersSequenceElement != null)
                                            {
                                                foreach (XElement listenersElement in listenersSequenceElement.Elements(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                    winRMInstance.Listeners.Add(listenerInstance);
                                                    
                                                    XElement protocolElement4 = listenersElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    if (protocolElement4 != null)
                                                    {
                                                        VirtualMachineWindowsRemoteManagementListenerType protocolInstance4 = (VirtualMachineWindowsRemoteManagementListenerType)Enum.Parse(typeof(VirtualMachineWindowsRemoteManagementListenerType), protocolElement4.Value, false);
                                                        listenerInstance.ListenerType = protocolInstance4;
                                                    }
                                                    
                                                    XElement certificateThumbprintElement = listenersElement.Element(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                    if (certificateThumbprintElement != null)
                                                    {
                                                        string certificateThumbprintInstance = certificateThumbprintElement.Value;
                                                        listenerInstance.CertificateThumbprint = certificateThumbprintInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        XElement adminUsernameElement = configurationSetsElement.Element(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                        if (adminUsernameElement != null)
                                        {
                                            string adminUsernameInstance = adminUsernameElement.Value;
                                            configurationSetInstance.AdminUserName = adminUsernameInstance;
                                        }
                                        
                                        XElement hostNameElement2 = configurationSetsElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                        if (hostNameElement2 != null)
                                        {
                                            string hostNameInstance2 = hostNameElement2.Value;
                                            configurationSetInstance.HostName = hostNameInstance2;
                                        }
                                        
                                        XElement userNameElement = configurationSetsElement.Element(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                        if (userNameElement != null)
                                        {
                                            string userNameInstance = userNameElement.Value;
                                            configurationSetInstance.UserName = userNameInstance;
                                        }
                                        
                                        XElement userPasswordElement = configurationSetsElement.Element(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                        if (userPasswordElement != null)
                                        {
                                            string userPasswordInstance = userPasswordElement.Value;
                                            configurationSetInstance.UserPassword = userPasswordInstance;
                                        }
                                        
                                        XElement disableSshPasswordAuthenticationElement = configurationSetsElement.Element(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                        if (disableSshPasswordAuthenticationElement != null && string.IsNullOrEmpty(disableSshPasswordAuthenticationElement.Value) == false)
                                        {
                                            bool disableSshPasswordAuthenticationInstance = bool.Parse(disableSshPasswordAuthenticationElement.Value);
                                            configurationSetInstance.DisableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                                        }
                                        
                                        XElement sSHElement = configurationSetsElement.Element(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                        if (sSHElement != null)
                                        {
                                            SshSettings sSHInstance = new SshSettings();
                                            configurationSetInstance.SshSettings = sSHInstance;
                                            
                                            XElement publicKeysSequenceElement = sSHElement.Element(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                            if (publicKeysSequenceElement != null)
                                            {
                                                foreach (XElement publicKeysElement in publicKeysSequenceElement.Elements(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                    sSHInstance.PublicKeys.Add(publicKeyInstance);
                                                    
                                                    XElement fingerprintElement = publicKeysElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                    if (fingerprintElement != null)
                                                    {
                                                        string fingerprintInstance = fingerprintElement.Value;
                                                        publicKeyInstance.Fingerprint = fingerprintInstance;
                                                    }
                                                    
                                                    XElement pathElement2 = publicKeysElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                    if (pathElement2 != null)
                                                    {
                                                        string pathInstance2 = pathElement2.Value;
                                                        publicKeyInstance.Path = pathInstance2;
                                                    }
                                                }
                                            }
                                            
                                            XElement keyPairsSequenceElement = sSHElement.Element(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                            if (keyPairsSequenceElement != null)
                                            {
                                                foreach (XElement keyPairsElement in keyPairsSequenceElement.Elements(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                    sSHInstance.KeyPairs.Add(keyPairInstance);
                                                    
                                                    XElement fingerprintElement2 = keyPairsElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                    if (fingerprintElement2 != null)
                                                    {
                                                        string fingerprintInstance2 = fingerprintElement2.Value;
                                                        keyPairInstance.Fingerprint = fingerprintInstance2;
                                                    }
                                                    
                                                    XElement pathElement3 = keyPairsElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                    if (pathElement3 != null)
                                                    {
                                                        string pathInstance3 = pathElement3.Value;
                                                        keyPairInstance.Path = pathInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                XElement availabilitySetNameElement = roleListElement.Element(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                                if (availabilitySetNameElement != null)
                                {
                                    string availabilitySetNameInstance = availabilitySetNameElement.Value;
                                    roleInstance.AvailabilitySetName = availabilitySetNameInstance;
                                }
                                
                                XElement dataVirtualHardDisksSequenceElement = roleListElement.Element(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                                if (dataVirtualHardDisksSequenceElement != null)
                                {
                                    foreach (XElement dataVirtualHardDisksElement in dataVirtualHardDisksSequenceElement.Elements(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                        roleInstance.DataVirtualHardDisks.Add(dataVirtualHardDiskInstance);
                                        
                                        XElement hostCachingElement = dataVirtualHardDisksElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                        if (hostCachingElement != null && string.IsNullOrEmpty(hostCachingElement.Value) == false)
                                        {
                                            VirtualHardDiskHostCaching hostCachingInstance = (VirtualHardDiskHostCaching)Enum.Parse(typeof(VirtualHardDiskHostCaching), hostCachingElement.Value, false);
                                            dataVirtualHardDiskInstance.HostCaching = hostCachingInstance;
                                        }
                                        
                                        XElement diskLabelElement = dataVirtualHardDisksElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                        if (diskLabelElement != null)
                                        {
                                            string diskLabelInstance = diskLabelElement.Value;
                                            dataVirtualHardDiskInstance.DiskLabel = diskLabelInstance;
                                        }
                                        
                                        XElement diskNameElement = dataVirtualHardDisksElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                        if (diskNameElement != null)
                                        {
                                            string diskNameInstance = diskNameElement.Value;
                                            dataVirtualHardDiskInstance.DiskName = diskNameInstance;
                                        }
                                        
                                        XElement lunElement = dataVirtualHardDisksElement.Element(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                        if (lunElement != null && string.IsNullOrEmpty(lunElement.Value) == false)
                                        {
                                            int lunInstance = int.Parse(lunElement.Value, CultureInfo.InvariantCulture);
                                            dataVirtualHardDiskInstance.LogicalUnitNumber = lunInstance;
                                        }
                                        
                                        XElement logicalDiskSizeInGBElement = dataVirtualHardDisksElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                        if (logicalDiskSizeInGBElement != null)
                                        {
                                            int logicalDiskSizeInGBInstance = int.Parse(logicalDiskSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                            dataVirtualHardDiskInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                                        }
                                        
                                        XElement mediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                        if (mediaLinkElement != null)
                                        {
                                            Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                            dataVirtualHardDiskInstance.MediaLink = mediaLinkInstance;
                                        }
                                    }
                                }
                                
                                XElement labelElement2 = roleListElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement2 != null)
                                {
                                    string labelInstance2 = labelElement2.Value;
                                    roleInstance.Label = labelInstance2;
                                }
                                
                                XElement oSVirtualHardDiskElement = roleListElement.Element(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                                if (oSVirtualHardDiskElement != null)
                                {
                                    OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                    roleInstance.OSVirtualHardDisk = oSVirtualHardDiskInstance;
                                    
                                    XElement hostCachingElement2 = oSVirtualHardDiskElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostCachingElement2 != null && string.IsNullOrEmpty(hostCachingElement2.Value) == false)
                                    {
                                        VirtualHardDiskHostCaching hostCachingInstance2 = (VirtualHardDiskHostCaching)Enum.Parse(typeof(VirtualHardDiskHostCaching), hostCachingElement2.Value, false);
                                        oSVirtualHardDiskInstance.HostCaching = hostCachingInstance2;
                                    }
                                    
                                    XElement diskLabelElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                    if (diskLabelElement2 != null)
                                    {
                                        string diskLabelInstance2 = diskLabelElement2.Value;
                                        oSVirtualHardDiskInstance.DiskLabel = diskLabelInstance2;
                                    }
                                    
                                    XElement diskNameElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                    if (diskNameElement2 != null)
                                    {
                                        string diskNameInstance2 = diskNameElement2.Value;
                                        oSVirtualHardDiskInstance.DiskName = diskNameInstance2;
                                    }
                                    
                                    XElement mediaLinkElement2 = oSVirtualHardDiskElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                    if (mediaLinkElement2 != null)
                                    {
                                        Uri mediaLinkInstance2 = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                        oSVirtualHardDiskInstance.MediaLink = mediaLinkInstance2;
                                    }
                                    
                                    XElement sourceImageNameElement = oSVirtualHardDiskElement.Element(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                                    if (sourceImageNameElement != null)
                                    {
                                        string sourceImageNameInstance = sourceImageNameElement.Value;
                                        oSVirtualHardDiskInstance.SourceImageName = sourceImageNameInstance;
                                    }
                                    
                                    XElement osElement = oSVirtualHardDiskElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                    if (osElement != null)
                                    {
                                        string osInstance = osElement.Value;
                                        oSVirtualHardDiskInstance.OperatingSystem = osInstance;
                                    }
                                }
                                
                                XElement roleSizeElement = roleListElement.Element(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                                if (roleSizeElement != null && string.IsNullOrEmpty(roleSizeElement.Value) == false)
                                {
                                    VirtualMachineRoleSize roleSizeInstance = (VirtualMachineRoleSize)Enum.Parse(typeof(VirtualMachineRoleSize), roleSizeElement.Value, false);
                                    roleInstance.RoleSize = roleSizeInstance;
                                }
                                
                                XElement defaultWinRmCertificateThumbprintElement = roleListElement.Element(XName.Get("DefaultWinRmCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (defaultWinRmCertificateThumbprintElement != null)
                                {
                                    string defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement.Value;
                                    roleInstance.DefaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
                                }
                            }
                        }
                        
                        XElement sdkVersionElement = deploymentElement.Element(XName.Get("SdkVersion", "http://schemas.microsoft.com/windowsazure"));
                        if (sdkVersionElement != null)
                        {
                            string sdkVersionInstance = sdkVersionElement.Value;
                            result.SdkVersion = sdkVersionInstance;
                        }
                        
                        XElement lockedElement = deploymentElement.Element(XName.Get("Locked", "http://schemas.microsoft.com/windowsazure"));
                        if (lockedElement != null)
                        {
                            bool lockedInstance = bool.Parse(lockedElement.Value);
                            result.Locked = lockedInstance;
                        }
                        
                        XElement rollbackAllowedElement = deploymentElement.Element(XName.Get("RollbackAllowed", "http://schemas.microsoft.com/windowsazure"));
                        if (rollbackAllowedElement != null)
                        {
                            string rollbackAllowedInstance = rollbackAllowedElement.Value;
                            result.RollbackAllowed = rollbackAllowedInstance;
                        }
                        
                        XElement createdTimeElement = deploymentElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/windowsazure"));
                        if (createdTimeElement != null)
                        {
                            DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture);
                            result.CreatedTime = createdTimeInstance;
                        }
                        
                        XElement lastModifiedTimeElement = deploymentElement.Element(XName.Get("LastModifiedTime", "http://schemas.microsoft.com/windowsazure"));
                        if (lastModifiedTimeElement != null)
                        {
                            DateTime lastModifiedTimeInstance = DateTime.Parse(lastModifiedTimeElement.Value, CultureInfo.InvariantCulture);
                            result.LastModifiedTime = lastModifiedTimeInstance;
                        }
                        
                        XElement virtualNetworkNameElement = deploymentElement.Element(XName.Get("VirtualNetworkName", "http://schemas.microsoft.com/windowsazure"));
                        if (virtualNetworkNameElement != null)
                        {
                            string virtualNetworkNameInstance = virtualNetworkNameElement.Value;
                            result.VirtualNetworkName = virtualNetworkNameInstance;
                        }
                        
                        XElement extendedPropertiesSequenceElement = deploymentElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (extendedPropertiesSequenceElement != null)
                        {
                            foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                            {
                                string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                result.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                            }
                        }
                        
                        XElement persistentVMDowntimeElement = deploymentElement.Element(XName.Get("PersistentVMDowntime", "http://schemas.microsoft.com/windowsazure"));
                        if (persistentVMDowntimeElement != null)
                        {
                            PersistentVMDowntime persistentVMDowntimeInstance = new PersistentVMDowntime();
                            result.PersistentVMDowntime = persistentVMDowntimeInstance;
                            
                            XElement startTimeElement = persistentVMDowntimeElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                            if (startTimeElement != null)
                            {
                                DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                persistentVMDowntimeInstance.StartTime = startTimeInstance;
                            }
                            
                            XElement endTimeElement = persistentVMDowntimeElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                            if (endTimeElement != null)
                            {
                                DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture);
                                persistentVMDowntimeInstance.EndTime = endTimeInstance;
                            }
                            
                            XElement statusElement2 = persistentVMDowntimeElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement2 != null)
                            {
                                string statusInstance2 = statusElement2.Value;
                                persistentVMDowntimeInstance.Status = statusInstance2;
                            }
                        }
                        
                        XElement virtualIPsSequenceElement = deploymentElement.Element(XName.Get("VirtualIPs", "http://schemas.microsoft.com/windowsazure"));
                        if (virtualIPsSequenceElement != null)
                        {
                            foreach (XElement virtualIPsElement in virtualIPsSequenceElement.Elements(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure")))
                            {
                                VirtualIPAddress virtualIPInstance = new VirtualIPAddress();
                                result.VirtualIPAddresses.Add(virtualIPInstance);
                                
                                XElement addressElement = virtualIPsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                if (addressElement != null)
                                {
                                    string addressInstance = addressElement.Value;
                                    virtualIPInstance.Address = addressInstance;
                                }
                                
                                XElement nameElement4 = virtualIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement4 != null)
                                {
                                    string nameInstance4 = nameElement4.Value;
                                    virtualIPInstance.Name = nameInstance4;
                                }
                                
                                XElement isDnsProgrammedElement = virtualIPsElement.Element(XName.Get("IsDnsProgrammed", "http://schemas.microsoft.com/windowsazure"));
                                if (isDnsProgrammedElement != null && string.IsNullOrEmpty(isDnsProgrammedElement.Value) == false)
                                {
                                    bool isDnsProgrammedInstance = bool.Parse(isDnsProgrammedElement.Value);
                                    virtualIPInstance.IsDnsProgrammed = isDnsProgrammedInstance;
                                }
                            }
                        }
                        
                        XElement reservedIPNameElement = deploymentElement.Element(XName.Get("ReservedIPName", "http://schemas.microsoft.com/windowsazure"));
                        if (reservedIPNameElement != null)
                        {
                            string reservedIPNameInstance = reservedIPNameElement.Value;
                            result.ReservedIPName = reservedIPNameInstance;
                        }
                        
                        XElement dnsElement = deploymentElement.Element(XName.Get("Dns", "http://schemas.microsoft.com/windowsazure"));
                        if (dnsElement != null)
                        {
                            DnsSettings dnsInstance = new DnsSettings();
                            result.DnsSettings = dnsInstance;
                            
                            XElement dnsServersSequenceElement = dnsElement.Element(XName.Get("DnsServers", "http://schemas.microsoft.com/windowsazure"));
                            if (dnsServersSequenceElement != null)
                            {
                                foreach (XElement dnsServersElement in dnsServersSequenceElement.Elements(XName.Get("DnsServer", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    DnsServer dnsServerInstance = new DnsServer();
                                    dnsInstance.DnsServers.Add(dnsServerInstance);
                                    
                                    XElement nameElement5 = dnsServersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement5 != null)
                                    {
                                        string nameInstance5 = nameElement5.Value;
                                        dnsServerInstance.Name = nameInstance5;
                                    }
                                    
                                    XElement addressElement2 = dnsServersElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                    if (addressElement2 != null)
                                    {
                                        string addressInstance2 = addressElement2.Value;
                                        dnsServerInstance.Address = addressInstance2;
                                    }
                                }
                            }
                        }
                        
                        XElement extensionConfigurationElement = deploymentElement.Element(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                        if (extensionConfigurationElement != null)
                        {
                            ExtensionConfiguration extensionConfigurationInstance = new ExtensionConfiguration();
                            result.ExtensionConfiguration = extensionConfigurationInstance;
                            
                            XElement allRolesSequenceElement = extensionConfigurationElement.Element(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                            if (allRolesSequenceElement != null)
                            {
                                foreach (XElement allRolesElement in allRolesSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ExtensionConfiguration.Extension extensionInstance = new ExtensionConfiguration.Extension();
                                    extensionConfigurationInstance.AllRoles.Add(extensionInstance);
                                    
                                    XElement idElement = allRolesElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement != null)
                                    {
                                        string idInstance = idElement.Value;
                                        extensionInstance.Id = idInstance;
                                    }
                                }
                            }
                            
                            XElement namedRolesSequenceElement = extensionConfigurationElement.Element(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                            if (namedRolesSequenceElement != null)
                            {
                                foreach (XElement namedRolesElement in namedRolesSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ExtensionConfiguration.NamedRole roleInstance2 = new ExtensionConfiguration.NamedRole();
                                    extensionConfigurationInstance.NamedRoles.Add(roleInstance2);
                                    
                                    XElement roleNameElement3 = namedRolesElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleNameElement3 != null)
                                    {
                                        string roleNameInstance3 = roleNameElement3.Value;
                                        roleInstance2.RoleName = roleNameInstance3;
                                    }
                                    
                                    XElement extensionsSequenceElement = namedRolesElement.Element(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                                    if (extensionsSequenceElement != null)
                                    {
                                        foreach (XElement extensionsElement in extensionsSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionConfiguration.Extension extensionInstance2 = new ExtensionConfiguration.Extension();
                                            roleInstance2.Extensions.Add(extensionInstance2);
                                            
                                            XElement idElement2 = extensionsElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                            if (idElement2 != null)
                                            {
                                                string idInstance2 = idElement2.Value;
                                                extensionInstance2.Id = idInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Deployment operation returns configuration information,
        /// status, and system properties for a deployment.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460804.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A deployment that exists in the cloud service.
        /// </returns>
        public async Task<DeploymentGetResponse> GetBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                Tracing.Enter(invocationId, this, "GetBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentGetResponse result = new DeploymentGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement deploymentElement = responseDoc.Element(XName.Get("Deployment", "http://schemas.microsoft.com/windowsazure"));
                    if (deploymentElement != null)
                    {
                        XElement nameElement = deploymentElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement deploymentSlotElement = deploymentElement.Element(XName.Get("DeploymentSlot", "http://schemas.microsoft.com/windowsazure"));
                        if (deploymentSlotElement != null)
                        {
                            DeploymentSlot deploymentSlotInstance = (DeploymentSlot)Enum.Parse(typeof(DeploymentSlot), deploymentSlotElement.Value, false);
                            result.DeploymentSlot = deploymentSlotInstance;
                        }
                        
                        XElement privateIDElement = deploymentElement.Element(XName.Get("PrivateID", "http://schemas.microsoft.com/windowsazure"));
                        if (privateIDElement != null)
                        {
                            string privateIDInstance = privateIDElement.Value;
                            result.PrivateId = privateIDInstance;
                        }
                        
                        XElement statusElement = deploymentElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement != null)
                        {
                            DeploymentStatus statusInstance = (DeploymentStatus)Enum.Parse(typeof(DeploymentStatus), statusElement.Value, false);
                            result.Status = statusInstance;
                        }
                        
                        XElement labelElement = deploymentElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                        if (labelElement != null)
                        {
                            string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                            result.Label = labelInstance;
                        }
                        
                        XElement urlElement = deploymentElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                        if (urlElement != null)
                        {
                            Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                            result.Uri = urlInstance;
                        }
                        
                        XElement configurationElement = deploymentElement.Element(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                        if (configurationElement != null)
                        {
                            string configurationInstance = TypeConversion.FromBase64String(configurationElement.Value);
                            result.Configuration = configurationInstance;
                        }
                        
                        XElement roleInstanceListSequenceElement = deploymentElement.Element(XName.Get("RoleInstanceList", "http://schemas.microsoft.com/windowsazure"));
                        if (roleInstanceListSequenceElement != null)
                        {
                            foreach (XElement roleInstanceListElement in roleInstanceListSequenceElement.Elements(XName.Get("RoleInstance", "http://schemas.microsoft.com/windowsazure")))
                            {
                                RoleInstance roleInstanceInstance = new RoleInstance();
                                result.RoleInstances.Add(roleInstanceInstance);
                                
                                XElement roleNameElement = roleInstanceListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                if (roleNameElement != null)
                                {
                                    string roleNameInstance = roleNameElement.Value;
                                    roleInstanceInstance.RoleName = roleNameInstance;
                                }
                                
                                XElement instanceNameElement = roleInstanceListElement.Element(XName.Get("InstanceName", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceNameElement != null)
                                {
                                    string instanceNameInstance = instanceNameElement.Value;
                                    roleInstanceInstance.InstanceName = instanceNameInstance;
                                }
                                
                                XElement instanceStatusElement = roleInstanceListElement.Element(XName.Get("InstanceStatus", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceStatusElement != null)
                                {
                                    string instanceStatusInstance = instanceStatusElement.Value;
                                    roleInstanceInstance.InstanceStatus = instanceStatusInstance;
                                }
                                
                                XElement instanceUpgradeDomainElement = roleInstanceListElement.Element(XName.Get("InstanceUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceUpgradeDomainElement != null && string.IsNullOrEmpty(instanceUpgradeDomainElement.Value) == false)
                                {
                                    int instanceUpgradeDomainInstance = int.Parse(instanceUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                    roleInstanceInstance.InstanceUpgradeDomain = instanceUpgradeDomainInstance;
                                }
                                
                                XElement instanceFaultDomainElement = roleInstanceListElement.Element(XName.Get("InstanceFaultDomain", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceFaultDomainElement != null && string.IsNullOrEmpty(instanceFaultDomainElement.Value) == false)
                                {
                                    int instanceFaultDomainInstance = int.Parse(instanceFaultDomainElement.Value, CultureInfo.InvariantCulture);
                                    roleInstanceInstance.InstanceFaultDomain = instanceFaultDomainInstance;
                                }
                                
                                XElement instanceSizeElement = roleInstanceListElement.Element(XName.Get("InstanceSize", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceSizeElement != null && string.IsNullOrEmpty(instanceSizeElement.Value) == false)
                                {
                                    VirtualMachineRoleSize instanceSizeInstance = (VirtualMachineRoleSize)Enum.Parse(typeof(VirtualMachineRoleSize), instanceSizeElement.Value, false);
                                    roleInstanceInstance.InstanceSize = instanceSizeInstance;
                                }
                                
                                XElement instanceStateDetailsElement = roleInstanceListElement.Element(XName.Get("InstanceStateDetails", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceStateDetailsElement != null)
                                {
                                    string instanceStateDetailsInstance = instanceStateDetailsElement.Value;
                                    roleInstanceInstance.InstanceStateDetails = instanceStateDetailsInstance;
                                }
                                
                                XElement instanceErrorCodeElement = roleInstanceListElement.Element(XName.Get("InstanceErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceErrorCodeElement != null)
                                {
                                    string instanceErrorCodeInstance = instanceErrorCodeElement.Value;
                                    roleInstanceInstance.InstanceErrorCode = instanceErrorCodeInstance;
                                }
                                
                                XElement ipAddressElement = roleInstanceListElement.Element(XName.Get("IpAddress", "http://schemas.microsoft.com/windowsazure"));
                                if (ipAddressElement != null)
                                {
                                    string ipAddressInstance = ipAddressElement.Value;
                                    roleInstanceInstance.IPAddress = ipAddressInstance;
                                }
                                
                                XElement instanceEndpointsSequenceElement = roleInstanceListElement.Element(XName.Get("InstanceEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                if (instanceEndpointsSequenceElement != null)
                                {
                                    foreach (XElement instanceEndpointsElement in instanceEndpointsSequenceElement.Elements(XName.Get("InstanceEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        InstanceEndpoint instanceEndpointInstance = new InstanceEndpoint();
                                        roleInstanceInstance.InstanceEndpoints.Add(instanceEndpointInstance);
                                        
                                        XElement localPortElement = instanceEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                        if (localPortElement != null && string.IsNullOrEmpty(localPortElement.Value) == false)
                                        {
                                            int localPortInstance = int.Parse(localPortElement.Value, CultureInfo.InvariantCulture);
                                            instanceEndpointInstance.LocalPort = localPortInstance;
                                        }
                                        
                                        XElement nameElement2 = instanceEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement2 != null)
                                        {
                                            string nameInstance2 = nameElement2.Value;
                                            instanceEndpointInstance.Name = nameInstance2;
                                        }
                                        
                                        XElement publicPortElement = instanceEndpointsElement.Element(XName.Get("PublicPort", "http://schemas.microsoft.com/windowsazure"));
                                        if (publicPortElement != null)
                                        {
                                            int publicPortInstance = int.Parse(publicPortElement.Value, CultureInfo.InvariantCulture);
                                            instanceEndpointInstance.Port = publicPortInstance;
                                        }
                                        
                                        XElement protocolElement = instanceEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                        if (protocolElement != null)
                                        {
                                            string protocolInstance = protocolElement.Value;
                                            instanceEndpointInstance.Protocol = protocolInstance;
                                        }
                                        
                                        XElement vipElement = instanceEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                        if (vipElement != null)
                                        {
                                            string vipInstance = vipElement.Value;
                                            instanceEndpointInstance.VirtualIPAddress = vipInstance;
                                        }
                                    }
                                }
                                
                                XElement powerStateElement = roleInstanceListElement.Element(XName.Get("PowerState", "http://schemas.microsoft.com/windowsazure"));
                                if (powerStateElement != null)
                                {
                                    RoleInstancePowerState powerStateInstance = (RoleInstancePowerState)Enum.Parse(typeof(RoleInstancePowerState), powerStateElement.Value, false);
                                    roleInstanceInstance.PowerState = powerStateInstance;
                                }
                                
                                XElement hostNameElement = roleInstanceListElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                if (hostNameElement != null)
                                {
                                    string hostNameInstance = hostNameElement.Value;
                                    roleInstanceInstance.HostName = hostNameInstance;
                                }
                                
                                XElement remoteAccessCertificateThumbprintElement = roleInstanceListElement.Element(XName.Get("RemoteAccessCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (remoteAccessCertificateThumbprintElement != null)
                                {
                                    string remoteAccessCertificateThumbprintInstance = remoteAccessCertificateThumbprintElement.Value;
                                    roleInstanceInstance.RemoteAccessCertificateThumbprint = remoteAccessCertificateThumbprintInstance;
                                }
                            }
                        }
                        
                        XElement upgradeStatusElement = deploymentElement.Element(XName.Get("UpgradeStatus", "http://schemas.microsoft.com/windowsazure"));
                        if (upgradeStatusElement != null)
                        {
                            UpgradeStatus upgradeStatusInstance = new UpgradeStatus();
                            result.UpgradeStatus = upgradeStatusInstance;
                            
                            XElement upgradeTypeElement = upgradeStatusElement.Element(XName.Get("UpgradeType", "http://schemas.microsoft.com/windowsazure"));
                            if (upgradeTypeElement != null)
                            {
                                DeploymentUpgradeType upgradeTypeInstance = (DeploymentUpgradeType)Enum.Parse(typeof(DeploymentUpgradeType), upgradeTypeElement.Value, false);
                                upgradeStatusInstance.UpgradeType = upgradeTypeInstance;
                            }
                            
                            XElement currentUpgradeDomainStateElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomainState", "http://schemas.microsoft.com/windowsazure"));
                            if (currentUpgradeDomainStateElement != null)
                            {
                                UpgradeDomainState currentUpgradeDomainStateInstance = (UpgradeDomainState)Enum.Parse(typeof(UpgradeDomainState), currentUpgradeDomainStateElement.Value, false);
                                upgradeStatusInstance.CurrentUpgradeDomainState = currentUpgradeDomainStateInstance;
                            }
                            
                            XElement currentUpgradeDomainElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                            if (currentUpgradeDomainElement != null)
                            {
                                int currentUpgradeDomainInstance = int.Parse(currentUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                upgradeStatusInstance.CurrentUpgradeDomain = currentUpgradeDomainInstance;
                            }
                        }
                        
                        XElement upgradeDomainCountElement = deploymentElement.Element(XName.Get("UpgradeDomainCount", "http://schemas.microsoft.com/windowsazure"));
                        if (upgradeDomainCountElement != null)
                        {
                            int upgradeDomainCountInstance = int.Parse(upgradeDomainCountElement.Value, CultureInfo.InvariantCulture);
                            result.UpgradeDomainCount = upgradeDomainCountInstance;
                        }
                        
                        XElement roleListSequenceElement = deploymentElement.Element(XName.Get("RoleList", "http://schemas.microsoft.com/windowsazure"));
                        if (roleListSequenceElement != null)
                        {
                            foreach (XElement roleListElement in roleListSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                            {
                                Role roleInstance = new Role();
                                result.Roles.Add(roleInstance);
                                
                                XElement roleNameElement2 = roleListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                if (roleNameElement2 != null)
                                {
                                    string roleNameInstance2 = roleNameElement2.Value;
                                    roleInstance.RoleName = roleNameInstance2;
                                }
                                
                                XElement osVersionElement = roleListElement.Element(XName.Get("OsVersion", "http://schemas.microsoft.com/windowsazure"));
                                if (osVersionElement != null)
                                {
                                    string osVersionInstance = osVersionElement.Value;
                                    roleInstance.OSVersion = osVersionInstance;
                                }
                                
                                XElement roleTypeElement = roleListElement.Element(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                                if (roleTypeElement != null)
                                {
                                    string roleTypeInstance = roleTypeElement.Value;
                                    roleInstance.RoleType = roleTypeInstance;
                                }
                                
                                XElement configurationSetsSequenceElement = roleListElement.Element(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                                if (configurationSetsSequenceElement != null)
                                {
                                    foreach (XElement configurationSetsElement in configurationSetsSequenceElement.Elements(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                        roleInstance.ConfigurationSets.Add(configurationSetInstance);
                                        
                                        XElement configurationSetTypeElement = configurationSetsElement.Element(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                        if (configurationSetTypeElement != null)
                                        {
                                            string configurationSetTypeInstance = configurationSetTypeElement.Value;
                                            configurationSetInstance.ConfigurationSetType = configurationSetTypeInstance;
                                        }
                                        
                                        XElement inputEndpointsSequenceElement = configurationSetsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                        if (inputEndpointsSequenceElement != null)
                                        {
                                            foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                InputEndpoint inputEndpointInstance = new InputEndpoint();
                                                configurationSetInstance.InputEndpoints.Add(inputEndpointInstance);
                                                
                                                XElement loadBalancedEndpointSetNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                                if (loadBalancedEndpointSetNameElement != null)
                                                {
                                                    string loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement.Value;
                                                    inputEndpointInstance.LoadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                                                }
                                                
                                                XElement localPortElement2 = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                                if (localPortElement2 != null && string.IsNullOrEmpty(localPortElement2.Value) == false)
                                                {
                                                    int localPortInstance2 = int.Parse(localPortElement2.Value, CultureInfo.InvariantCulture);
                                                    inputEndpointInstance.LocalPort = localPortInstance2;
                                                }
                                                
                                                XElement nameElement3 = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement3 != null)
                                                {
                                                    string nameInstance3 = nameElement3.Value;
                                                    inputEndpointInstance.Name = nameInstance3;
                                                }
                                                
                                                XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                if (portElement != null && string.IsNullOrEmpty(portElement.Value) == false)
                                                {
                                                    int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                    inputEndpointInstance.Port = portInstance;
                                                }
                                                
                                                XElement loadBalancerProbeElement = inputEndpointsElement.Element(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                                if (loadBalancerProbeElement != null)
                                                {
                                                    LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                    inputEndpointInstance.LoadBalancerProbe = loadBalancerProbeInstance;
                                                    
                                                    XElement pathElement = loadBalancerProbeElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                    if (pathElement != null)
                                                    {
                                                        string pathInstance = pathElement.Value;
                                                        loadBalancerProbeInstance.Path = pathInstance;
                                                    }
                                                    
                                                    XElement portElement2 = loadBalancerProbeElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                    if (portElement2 != null)
                                                    {
                                                        int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                        loadBalancerProbeInstance.Port = portInstance2;
                                                    }
                                                    
                                                    XElement protocolElement2 = loadBalancerProbeElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    if (protocolElement2 != null)
                                                    {
                                                        LoadBalancerProbeTransportProtocol protocolInstance2 = ComputeManagementClient.ParseLoadBalancerProbeTransportProtocol(protocolElement2.Value);
                                                        loadBalancerProbeInstance.Protocol = protocolInstance2;
                                                    }
                                                    
                                                    XElement intervalInSecondsElement = loadBalancerProbeElement.Element(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                    if (intervalInSecondsElement != null && string.IsNullOrEmpty(intervalInSecondsElement.Value) == false)
                                                    {
                                                        int intervalInSecondsInstance = int.Parse(intervalInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                        loadBalancerProbeInstance.IntervalInSeconds = intervalInSecondsInstance;
                                                    }
                                                    
                                                    XElement timeoutInSecondsElement = loadBalancerProbeElement.Element(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                    if (timeoutInSecondsElement != null && string.IsNullOrEmpty(timeoutInSecondsElement.Value) == false)
                                                    {
                                                        int timeoutInSecondsInstance = int.Parse(timeoutInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                        loadBalancerProbeInstance.TimeoutInSeconds = timeoutInSecondsInstance;
                                                    }
                                                }
                                                
                                                XElement protocolElement3 = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                if (protocolElement3 != null)
                                                {
                                                    string protocolInstance3 = protocolElement3.Value;
                                                    inputEndpointInstance.Protocol = protocolInstance3;
                                                }
                                                
                                                XElement vipElement2 = inputEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                                if (vipElement2 != null)
                                                {
                                                    string vipInstance2 = vipElement2.Value;
                                                    inputEndpointInstance.VirtualIPAddress = vipInstance2;
                                                }
                                                
                                                XElement enableDirectServerReturnElement = inputEndpointsElement.Element(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                                if (enableDirectServerReturnElement != null && string.IsNullOrEmpty(enableDirectServerReturnElement.Value) == false)
                                                {
                                                    bool enableDirectServerReturnInstance = bool.Parse(enableDirectServerReturnElement.Value);
                                                    inputEndpointInstance.EnableDirectServerReturn = enableDirectServerReturnInstance;
                                                }
                                                
                                                XElement endpointAclElement = inputEndpointsElement.Element(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                                if (endpointAclElement != null)
                                                {
                                                    EndpointAcl endpointAclInstance = new EndpointAcl();
                                                    inputEndpointInstance.EndpointAcl = endpointAclInstance;
                                                    
                                                    XElement rulesSequenceElement = endpointAclElement.Element(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                    if (rulesSequenceElement != null)
                                                    {
                                                        foreach (XElement rulesElement in rulesSequenceElement.Elements(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            AccessControlListRule ruleInstance = new AccessControlListRule();
                                                            endpointAclInstance.Rules.Add(ruleInstance);
                                                            
                                                            XElement orderElement = rulesElement.Element(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                            if (orderElement != null && string.IsNullOrEmpty(orderElement.Value) == false)
                                                            {
                                                                int orderInstance = int.Parse(orderElement.Value, CultureInfo.InvariantCulture);
                                                                ruleInstance.Order = orderInstance;
                                                            }
                                                            
                                                            XElement actionElement = rulesElement.Element(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                            if (actionElement != null)
                                                            {
                                                                string actionInstance = actionElement.Value;
                                                                ruleInstance.Action = actionInstance;
                                                            }
                                                            
                                                            XElement remoteSubnetElement = rulesElement.Element(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                            if (remoteSubnetElement != null)
                                                            {
                                                                string remoteSubnetInstance = remoteSubnetElement.Value;
                                                                ruleInstance.RemoteSubnet = remoteSubnetInstance;
                                                            }
                                                            
                                                            XElement descriptionElement = rulesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                            if (descriptionElement != null)
                                                            {
                                                                string descriptionInstance = descriptionElement.Value;
                                                                ruleInstance.Description = descriptionInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        XElement subnetNamesSequenceElement = configurationSetsElement.Element(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                        if (subnetNamesSequenceElement != null)
                                        {
                                            foreach (XElement subnetNamesElement in subnetNamesSequenceElement.Elements(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                configurationSetInstance.SubnetNames.Add(subnetNamesElement.Value);
                                            }
                                        }
                                        
                                        XElement computerNameElement = configurationSetsElement.Element(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                        if (computerNameElement != null)
                                        {
                                            string computerNameInstance = computerNameElement.Value;
                                            configurationSetInstance.ComputerName = computerNameInstance;
                                        }
                                        
                                        XElement adminPasswordElement = configurationSetsElement.Element(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                        if (adminPasswordElement != null)
                                        {
                                            string adminPasswordInstance = adminPasswordElement.Value;
                                            configurationSetInstance.AdminPassword = adminPasswordInstance;
                                        }
                                        
                                        XElement resetPasswordOnFirstLogonElement = configurationSetsElement.Element(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                        if (resetPasswordOnFirstLogonElement != null && string.IsNullOrEmpty(resetPasswordOnFirstLogonElement.Value) == false)
                                        {
                                            bool resetPasswordOnFirstLogonInstance = bool.Parse(resetPasswordOnFirstLogonElement.Value);
                                            configurationSetInstance.ResetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                                        }
                                        
                                        XElement enableAutomaticUpdatesElement = configurationSetsElement.Element(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                        if (enableAutomaticUpdatesElement != null && string.IsNullOrEmpty(enableAutomaticUpdatesElement.Value) == false)
                                        {
                                            bool enableAutomaticUpdatesInstance = bool.Parse(enableAutomaticUpdatesElement.Value);
                                            configurationSetInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                        }
                                        
                                        XElement timeZoneElement = configurationSetsElement.Element(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                        if (timeZoneElement != null)
                                        {
                                            string timeZoneInstance = timeZoneElement.Value;
                                            configurationSetInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        XElement domainJoinElement = configurationSetsElement.Element(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                        if (domainJoinElement != null)
                                        {
                                            DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                            configurationSetInstance.DomainJoin = domainJoinInstance;
                                            
                                            XElement credentialsElement = domainJoinElement.Element(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                            if (credentialsElement != null)
                                            {
                                                DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                                domainJoinInstance.Credentials = credentialsInstance;
                                                
                                                XElement domainElement = credentialsElement.Element(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                                if (domainElement != null)
                                                {
                                                    string domainInstance = domainElement.Value;
                                                    credentialsInstance.Domain = domainInstance;
                                                }
                                                
                                                XElement usernameElement = credentialsElement.Element(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                                if (usernameElement != null)
                                                {
                                                    string usernameInstance = usernameElement.Value;
                                                    credentialsInstance.UserName = usernameInstance;
                                                }
                                                
                                                XElement passwordElement = credentialsElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                                if (passwordElement != null)
                                                {
                                                    string passwordInstance = passwordElement.Value;
                                                    credentialsInstance.Password = passwordInstance;
                                                }
                                            }
                                            
                                            XElement joinDomainElement = domainJoinElement.Element(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                            if (joinDomainElement != null)
                                            {
                                                string joinDomainInstance = joinDomainElement.Value;
                                                domainJoinInstance.DomainToJoin = joinDomainInstance;
                                            }
                                            
                                            XElement machineObjectOUElement = domainJoinElement.Element(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                            if (machineObjectOUElement != null)
                                            {
                                                string machineObjectOUInstance = machineObjectOUElement.Value;
                                                domainJoinInstance.LdapMachineObjectOU = machineObjectOUInstance;
                                            }
                                            
                                            XElement provisioningElement = domainJoinElement.Element(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                            if (provisioningElement != null)
                                            {
                                                DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                                domainJoinInstance.Provisioning = provisioningInstance;
                                                
                                                XElement accountDataElement = provisioningElement.Element(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                                if (accountDataElement != null)
                                                {
                                                    string accountDataInstance = accountDataElement.Value;
                                                    provisioningInstance.AccountData = accountDataInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement storedCertificateSettingsSequenceElement = configurationSetsElement.Element(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                        if (storedCertificateSettingsSequenceElement != null)
                                        {
                                            foreach (XElement storedCertificateSettingsElement in storedCertificateSettingsSequenceElement.Elements(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                                configurationSetInstance.StoredCertificateSettings.Add(certificateSettingInstance);
                                                
                                                XElement storeLocationElement = storedCertificateSettingsElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                                if (storeLocationElement != null)
                                                {
                                                }
                                                
                                                XElement storeNameElement = storedCertificateSettingsElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                                if (storeNameElement != null)
                                                {
                                                    string storeNameInstance = storeNameElement.Value;
                                                    certificateSettingInstance.StoreName = storeNameInstance;
                                                }
                                                
                                                XElement thumbprintElement = storedCertificateSettingsElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                if (thumbprintElement != null)
                                                {
                                                    string thumbprintInstance = thumbprintElement.Value;
                                                    certificateSettingInstance.Thumbprint = thumbprintInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement winRMElement = configurationSetsElement.Element(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                        if (winRMElement != null)
                                        {
                                            WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                            configurationSetInstance.WindowsRemoteManagement = winRMInstance;
                                            
                                            XElement listenersSequenceElement = winRMElement.Element(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                            if (listenersSequenceElement != null)
                                            {
                                                foreach (XElement listenersElement in listenersSequenceElement.Elements(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                    winRMInstance.Listeners.Add(listenerInstance);
                                                    
                                                    XElement protocolElement4 = listenersElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                    if (protocolElement4 != null)
                                                    {
                                                        VirtualMachineWindowsRemoteManagementListenerType protocolInstance4 = (VirtualMachineWindowsRemoteManagementListenerType)Enum.Parse(typeof(VirtualMachineWindowsRemoteManagementListenerType), protocolElement4.Value, false);
                                                        listenerInstance.ListenerType = protocolInstance4;
                                                    }
                                                    
                                                    XElement certificateThumbprintElement = listenersElement.Element(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                    if (certificateThumbprintElement != null)
                                                    {
                                                        string certificateThumbprintInstance = certificateThumbprintElement.Value;
                                                        listenerInstance.CertificateThumbprint = certificateThumbprintInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        XElement adminUsernameElement = configurationSetsElement.Element(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                        if (adminUsernameElement != null)
                                        {
                                            string adminUsernameInstance = adminUsernameElement.Value;
                                            configurationSetInstance.AdminUserName = adminUsernameInstance;
                                        }
                                        
                                        XElement hostNameElement2 = configurationSetsElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                        if (hostNameElement2 != null)
                                        {
                                            string hostNameInstance2 = hostNameElement2.Value;
                                            configurationSetInstance.HostName = hostNameInstance2;
                                        }
                                        
                                        XElement userNameElement = configurationSetsElement.Element(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                        if (userNameElement != null)
                                        {
                                            string userNameInstance = userNameElement.Value;
                                            configurationSetInstance.UserName = userNameInstance;
                                        }
                                        
                                        XElement userPasswordElement = configurationSetsElement.Element(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                        if (userPasswordElement != null)
                                        {
                                            string userPasswordInstance = userPasswordElement.Value;
                                            configurationSetInstance.UserPassword = userPasswordInstance;
                                        }
                                        
                                        XElement disableSshPasswordAuthenticationElement = configurationSetsElement.Element(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                        if (disableSshPasswordAuthenticationElement != null && string.IsNullOrEmpty(disableSshPasswordAuthenticationElement.Value) == false)
                                        {
                                            bool disableSshPasswordAuthenticationInstance = bool.Parse(disableSshPasswordAuthenticationElement.Value);
                                            configurationSetInstance.DisableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                                        }
                                        
                                        XElement sSHElement = configurationSetsElement.Element(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                        if (sSHElement != null)
                                        {
                                            SshSettings sSHInstance = new SshSettings();
                                            configurationSetInstance.SshSettings = sSHInstance;
                                            
                                            XElement publicKeysSequenceElement = sSHElement.Element(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                            if (publicKeysSequenceElement != null)
                                            {
                                                foreach (XElement publicKeysElement in publicKeysSequenceElement.Elements(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                    sSHInstance.PublicKeys.Add(publicKeyInstance);
                                                    
                                                    XElement fingerprintElement = publicKeysElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                    if (fingerprintElement != null)
                                                    {
                                                        string fingerprintInstance = fingerprintElement.Value;
                                                        publicKeyInstance.Fingerprint = fingerprintInstance;
                                                    }
                                                    
                                                    XElement pathElement2 = publicKeysElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                    if (pathElement2 != null)
                                                    {
                                                        string pathInstance2 = pathElement2.Value;
                                                        publicKeyInstance.Path = pathInstance2;
                                                    }
                                                }
                                            }
                                            
                                            XElement keyPairsSequenceElement = sSHElement.Element(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                            if (keyPairsSequenceElement != null)
                                            {
                                                foreach (XElement keyPairsElement in keyPairsSequenceElement.Elements(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure")))
                                                {
                                                    SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                    sSHInstance.KeyPairs.Add(keyPairInstance);
                                                    
                                                    XElement fingerprintElement2 = keyPairsElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                    if (fingerprintElement2 != null)
                                                    {
                                                        string fingerprintInstance2 = fingerprintElement2.Value;
                                                        keyPairInstance.Fingerprint = fingerprintInstance2;
                                                    }
                                                    
                                                    XElement pathElement3 = keyPairsElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                    if (pathElement3 != null)
                                                    {
                                                        string pathInstance3 = pathElement3.Value;
                                                        keyPairInstance.Path = pathInstance3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                XElement availabilitySetNameElement = roleListElement.Element(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                                if (availabilitySetNameElement != null)
                                {
                                    string availabilitySetNameInstance = availabilitySetNameElement.Value;
                                    roleInstance.AvailabilitySetName = availabilitySetNameInstance;
                                }
                                
                                XElement dataVirtualHardDisksSequenceElement = roleListElement.Element(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                                if (dataVirtualHardDisksSequenceElement != null)
                                {
                                    foreach (XElement dataVirtualHardDisksElement in dataVirtualHardDisksSequenceElement.Elements(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                        roleInstance.DataVirtualHardDisks.Add(dataVirtualHardDiskInstance);
                                        
                                        XElement hostCachingElement = dataVirtualHardDisksElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                        if (hostCachingElement != null && string.IsNullOrEmpty(hostCachingElement.Value) == false)
                                        {
                                            VirtualHardDiskHostCaching hostCachingInstance = (VirtualHardDiskHostCaching)Enum.Parse(typeof(VirtualHardDiskHostCaching), hostCachingElement.Value, false);
                                            dataVirtualHardDiskInstance.HostCaching = hostCachingInstance;
                                        }
                                        
                                        XElement diskLabelElement = dataVirtualHardDisksElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                        if (diskLabelElement != null)
                                        {
                                            string diskLabelInstance = diskLabelElement.Value;
                                            dataVirtualHardDiskInstance.DiskLabel = diskLabelInstance;
                                        }
                                        
                                        XElement diskNameElement = dataVirtualHardDisksElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                        if (diskNameElement != null)
                                        {
                                            string diskNameInstance = diskNameElement.Value;
                                            dataVirtualHardDiskInstance.DiskName = diskNameInstance;
                                        }
                                        
                                        XElement lunElement = dataVirtualHardDisksElement.Element(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                        if (lunElement != null && string.IsNullOrEmpty(lunElement.Value) == false)
                                        {
                                            int lunInstance = int.Parse(lunElement.Value, CultureInfo.InvariantCulture);
                                            dataVirtualHardDiskInstance.LogicalUnitNumber = lunInstance;
                                        }
                                        
                                        XElement logicalDiskSizeInGBElement = dataVirtualHardDisksElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                        if (logicalDiskSizeInGBElement != null)
                                        {
                                            int logicalDiskSizeInGBInstance = int.Parse(logicalDiskSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                            dataVirtualHardDiskInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                                        }
                                        
                                        XElement mediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                        if (mediaLinkElement != null)
                                        {
                                            Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                            dataVirtualHardDiskInstance.MediaLink = mediaLinkInstance;
                                        }
                                    }
                                }
                                
                                XElement labelElement2 = roleListElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement2 != null)
                                {
                                    string labelInstance2 = labelElement2.Value;
                                    roleInstance.Label = labelInstance2;
                                }
                                
                                XElement oSVirtualHardDiskElement = roleListElement.Element(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                                if (oSVirtualHardDiskElement != null)
                                {
                                    OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                    roleInstance.OSVirtualHardDisk = oSVirtualHardDiskInstance;
                                    
                                    XElement hostCachingElement2 = oSVirtualHardDiskElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostCachingElement2 != null && string.IsNullOrEmpty(hostCachingElement2.Value) == false)
                                    {
                                        VirtualHardDiskHostCaching hostCachingInstance2 = (VirtualHardDiskHostCaching)Enum.Parse(typeof(VirtualHardDiskHostCaching), hostCachingElement2.Value, false);
                                        oSVirtualHardDiskInstance.HostCaching = hostCachingInstance2;
                                    }
                                    
                                    XElement diskLabelElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                    if (diskLabelElement2 != null)
                                    {
                                        string diskLabelInstance2 = diskLabelElement2.Value;
                                        oSVirtualHardDiskInstance.DiskLabel = diskLabelInstance2;
                                    }
                                    
                                    XElement diskNameElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                    if (diskNameElement2 != null)
                                    {
                                        string diskNameInstance2 = diskNameElement2.Value;
                                        oSVirtualHardDiskInstance.DiskName = diskNameInstance2;
                                    }
                                    
                                    XElement mediaLinkElement2 = oSVirtualHardDiskElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                    if (mediaLinkElement2 != null)
                                    {
                                        Uri mediaLinkInstance2 = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                        oSVirtualHardDiskInstance.MediaLink = mediaLinkInstance2;
                                    }
                                    
                                    XElement sourceImageNameElement = oSVirtualHardDiskElement.Element(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                                    if (sourceImageNameElement != null)
                                    {
                                        string sourceImageNameInstance = sourceImageNameElement.Value;
                                        oSVirtualHardDiskInstance.SourceImageName = sourceImageNameInstance;
                                    }
                                    
                                    XElement osElement = oSVirtualHardDiskElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                    if (osElement != null)
                                    {
                                        string osInstance = osElement.Value;
                                        oSVirtualHardDiskInstance.OperatingSystem = osInstance;
                                    }
                                }
                                
                                XElement roleSizeElement = roleListElement.Element(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                                if (roleSizeElement != null && string.IsNullOrEmpty(roleSizeElement.Value) == false)
                                {
                                    VirtualMachineRoleSize roleSizeInstance = (VirtualMachineRoleSize)Enum.Parse(typeof(VirtualMachineRoleSize), roleSizeElement.Value, false);
                                    roleInstance.RoleSize = roleSizeInstance;
                                }
                                
                                XElement defaultWinRmCertificateThumbprintElement = roleListElement.Element(XName.Get("DefaultWinRmCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (defaultWinRmCertificateThumbprintElement != null)
                                {
                                    string defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement.Value;
                                    roleInstance.DefaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
                                }
                            }
                        }
                        
                        XElement sdkVersionElement = deploymentElement.Element(XName.Get("SdkVersion", "http://schemas.microsoft.com/windowsazure"));
                        if (sdkVersionElement != null)
                        {
                            string sdkVersionInstance = sdkVersionElement.Value;
                            result.SdkVersion = sdkVersionInstance;
                        }
                        
                        XElement lockedElement = deploymentElement.Element(XName.Get("Locked", "http://schemas.microsoft.com/windowsazure"));
                        if (lockedElement != null)
                        {
                            bool lockedInstance = bool.Parse(lockedElement.Value);
                            result.Locked = lockedInstance;
                        }
                        
                        XElement rollbackAllowedElement = deploymentElement.Element(XName.Get("RollbackAllowed", "http://schemas.microsoft.com/windowsazure"));
                        if (rollbackAllowedElement != null)
                        {
                            string rollbackAllowedInstance = rollbackAllowedElement.Value;
                            result.RollbackAllowed = rollbackAllowedInstance;
                        }
                        
                        XElement createdTimeElement = deploymentElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/windowsazure"));
                        if (createdTimeElement != null)
                        {
                            DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture);
                            result.CreatedTime = createdTimeInstance;
                        }
                        
                        XElement lastModifiedTimeElement = deploymentElement.Element(XName.Get("LastModifiedTime", "http://schemas.microsoft.com/windowsazure"));
                        if (lastModifiedTimeElement != null)
                        {
                            DateTime lastModifiedTimeInstance = DateTime.Parse(lastModifiedTimeElement.Value, CultureInfo.InvariantCulture);
                            result.LastModifiedTime = lastModifiedTimeInstance;
                        }
                        
                        XElement virtualNetworkNameElement = deploymentElement.Element(XName.Get("VirtualNetworkName", "http://schemas.microsoft.com/windowsazure"));
                        if (virtualNetworkNameElement != null)
                        {
                            string virtualNetworkNameInstance = virtualNetworkNameElement.Value;
                            result.VirtualNetworkName = virtualNetworkNameInstance;
                        }
                        
                        XElement extendedPropertiesSequenceElement = deploymentElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (extendedPropertiesSequenceElement != null)
                        {
                            foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                            {
                                string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                result.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                            }
                        }
                        
                        XElement persistentVMDowntimeElement = deploymentElement.Element(XName.Get("PersistentVMDowntime", "http://schemas.microsoft.com/windowsazure"));
                        if (persistentVMDowntimeElement != null)
                        {
                            PersistentVMDowntime persistentVMDowntimeInstance = new PersistentVMDowntime();
                            result.PersistentVMDowntime = persistentVMDowntimeInstance;
                            
                            XElement startTimeElement = persistentVMDowntimeElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                            if (startTimeElement != null)
                            {
                                DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                persistentVMDowntimeInstance.StartTime = startTimeInstance;
                            }
                            
                            XElement endTimeElement = persistentVMDowntimeElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                            if (endTimeElement != null)
                            {
                                DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture);
                                persistentVMDowntimeInstance.EndTime = endTimeInstance;
                            }
                            
                            XElement statusElement2 = persistentVMDowntimeElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement2 != null)
                            {
                                string statusInstance2 = statusElement2.Value;
                                persistentVMDowntimeInstance.Status = statusInstance2;
                            }
                        }
                        
                        XElement virtualIPsSequenceElement = deploymentElement.Element(XName.Get("VirtualIPs", "http://schemas.microsoft.com/windowsazure"));
                        if (virtualIPsSequenceElement != null)
                        {
                            foreach (XElement virtualIPsElement in virtualIPsSequenceElement.Elements(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure")))
                            {
                                VirtualIPAddress virtualIPInstance = new VirtualIPAddress();
                                result.VirtualIPAddresses.Add(virtualIPInstance);
                                
                                XElement addressElement = virtualIPsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                if (addressElement != null)
                                {
                                    string addressInstance = addressElement.Value;
                                    virtualIPInstance.Address = addressInstance;
                                }
                                
                                XElement nameElement4 = virtualIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement4 != null)
                                {
                                    string nameInstance4 = nameElement4.Value;
                                    virtualIPInstance.Name = nameInstance4;
                                }
                                
                                XElement isDnsProgrammedElement = virtualIPsElement.Element(XName.Get("IsDnsProgrammed", "http://schemas.microsoft.com/windowsazure"));
                                if (isDnsProgrammedElement != null && string.IsNullOrEmpty(isDnsProgrammedElement.Value) == false)
                                {
                                    bool isDnsProgrammedInstance = bool.Parse(isDnsProgrammedElement.Value);
                                    virtualIPInstance.IsDnsProgrammed = isDnsProgrammedInstance;
                                }
                            }
                        }
                        
                        XElement reservedIPNameElement = deploymentElement.Element(XName.Get("ReservedIPName", "http://schemas.microsoft.com/windowsazure"));
                        if (reservedIPNameElement != null)
                        {
                            string reservedIPNameInstance = reservedIPNameElement.Value;
                            result.ReservedIPName = reservedIPNameInstance;
                        }
                        
                        XElement dnsElement = deploymentElement.Element(XName.Get("Dns", "http://schemas.microsoft.com/windowsazure"));
                        if (dnsElement != null)
                        {
                            DnsSettings dnsInstance = new DnsSettings();
                            result.DnsSettings = dnsInstance;
                            
                            XElement dnsServersSequenceElement = dnsElement.Element(XName.Get("DnsServers", "http://schemas.microsoft.com/windowsazure"));
                            if (dnsServersSequenceElement != null)
                            {
                                foreach (XElement dnsServersElement in dnsServersSequenceElement.Elements(XName.Get("DnsServer", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    DnsServer dnsServerInstance = new DnsServer();
                                    dnsInstance.DnsServers.Add(dnsServerInstance);
                                    
                                    XElement nameElement5 = dnsServersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement5 != null)
                                    {
                                        string nameInstance5 = nameElement5.Value;
                                        dnsServerInstance.Name = nameInstance5;
                                    }
                                    
                                    XElement addressElement2 = dnsServersElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                    if (addressElement2 != null)
                                    {
                                        string addressInstance2 = addressElement2.Value;
                                        dnsServerInstance.Address = addressInstance2;
                                    }
                                }
                            }
                        }
                        
                        XElement extensionConfigurationElement = deploymentElement.Element(XName.Get("ExtensionConfiguration", "http://schemas.microsoft.com/windowsazure"));
                        if (extensionConfigurationElement != null)
                        {
                            ExtensionConfiguration extensionConfigurationInstance = new ExtensionConfiguration();
                            result.ExtensionConfiguration = extensionConfigurationInstance;
                            
                            XElement allRolesSequenceElement = extensionConfigurationElement.Element(XName.Get("AllRoles", "http://schemas.microsoft.com/windowsazure"));
                            if (allRolesSequenceElement != null)
                            {
                                foreach (XElement allRolesElement in allRolesSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ExtensionConfiguration.Extension extensionInstance = new ExtensionConfiguration.Extension();
                                    extensionConfigurationInstance.AllRoles.Add(extensionInstance);
                                    
                                    XElement idElement = allRolesElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                    if (idElement != null)
                                    {
                                        string idInstance = idElement.Value;
                                        extensionInstance.Id = idInstance;
                                    }
                                }
                            }
                            
                            XElement namedRolesSequenceElement = extensionConfigurationElement.Element(XName.Get("NamedRoles", "http://schemas.microsoft.com/windowsazure"));
                            if (namedRolesSequenceElement != null)
                            {
                                foreach (XElement namedRolesElement in namedRolesSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    ExtensionConfiguration.NamedRole roleInstance2 = new ExtensionConfiguration.NamedRole();
                                    extensionConfigurationInstance.NamedRoles.Add(roleInstance2);
                                    
                                    XElement roleNameElement3 = namedRolesElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                    if (roleNameElement3 != null)
                                    {
                                        string roleNameInstance3 = roleNameElement3.Value;
                                        roleInstance2.RoleName = roleNameInstance3;
                                    }
                                    
                                    XElement extensionsSequenceElement = namedRolesElement.Element(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                                    if (extensionsSequenceElement != null)
                                    {
                                        foreach (XElement extensionsElement in extensionsSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            ExtensionConfiguration.Extension extensionInstance2 = new ExtensionConfiguration.Extension();
                                            roleInstance2.Extensions.Add(extensionInstance2);
                                            
                                            XElement idElement2 = extensionsElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                                            if (idElement2 != null)
                                            {
                                                string idInstance2 = idElement2.Value;
                                                extensionInstance2.Id = idInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Package operation retrieves a cloud service package for a
        /// deployment and stores the package files in Windows Azure Blob
        /// storage.  The following package files are placed in storage:
        /// Service configuration file - The cloud service configuration file
        /// (.cscfg) provides configuration settings for the cloud service and
        /// individual roles, including the number of role instances.
        /// Service package - The service package (.cspkg) contains the
        /// application code and the service definition file.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Get Package operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> GetPackageByNameAsync(string serviceName, string deploymentName, DeploymentGetPackageParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ContainerUri == null)
            {
                throw new ArgumentNullException("parameters.ContainerUri");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetPackageByNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "/package?containerUri=" + parameters.ContainerUri + " +";
            if (parameters.OverwriteExisting != null)
            {
                url = url + "&overwriteExisting=" + Uri.EscapeUriString(parameters.OverwriteExisting.Value.ToString().ToLower());
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Package operation retrieves a cloud service package for a
        /// deployment and stores the package files in Windows Azure Blob
        /// storage.  The following package files are placed in storage:
        /// Service configuration file - The cloud service configuration file
        /// (.cscfg) provides configuration settings for the cloud service and
        /// individual roles, including the number of role instances.
        /// Service package - The service package (.cspkg) contains the
        /// application code and the service definition file.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154121.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Get Package operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> GetPackageBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentGetPackageParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ContainerUri == null)
            {
                throw new ArgumentNullException("parameters.ContainerUri");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetPackageBySlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot + "/package?containerUri=" + parameters.ContainerUri + " +";
            if (parameters.OverwriteExisting != null)
            {
                url = url + "&overwriteExisting=" + Uri.EscapeUriString(parameters.OverwriteExisting.Value.ToString().ToLower());
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> RebootRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                Tracing.Enter(invocationId, this, "RebootRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginRebootingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reboot Role Instance operation requests a reboot of a role
        /// instance that is running in a deployment.  The Reboot Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441298.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> RebootRoleInstanceByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                Tracing.Enter(invocationId, this, "RebootRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginRebootingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> ReimageRoleInstanceByDeploymentNameAsync(string serviceName, string deploymentName, string roleInstanceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                Tracing.Enter(invocationId, this, "ReimageRoleInstanceByDeploymentNameAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginReimagingRoleInstanceByDeploymentNameAsync(serviceName, deploymentName, roleInstanceName, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reimage Role Instance operation requests a reimage of a role
        /// instance that is running in a deployment.  The Reimage Role
        /// Instance operation is an asynchronous operation. To determine
        /// whether the Management service has finished processing the
        /// request, call Get Operation Status. For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441292.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='roleInstanceName'>
        /// The name of your role instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> ReimageRoleInstanceByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, string roleInstanceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("roleInstanceName", roleInstanceName);
                Tracing.Enter(invocationId, this, "ReimageRoleInstanceByDeploymentSlotAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginReimagingRoleInstanceByDeploymentSlotAsync(serviceName, deploymentSlot, roleInstanceName, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade operation cancels an in-progress
        /// configuration update and returns the deployment to its state
        /// before the update was started.  The Rollback Update Or Upgrade
        /// operation can only be called when an update is in progress on the
        /// deployment. The deployment status can be detected by calling the
        /// Get Deployment operation or Get Hosted Service Properties
        /// operation and inspecting the RollbackAllowed element. If the value
        /// returned is true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Rollback Update Or Upgrade operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RollbackUpdateOrUpgradeByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentRollbackUpdateOrUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (deploymentName == null)
            {
                throw new ArgumentNullException("deploymentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "RollbackUpdateOrUpgradeByDeploymentNameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deployments/" + deploymentName + "?comp=rollback";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement rollbackUpdateOrUpgradeElement = new XElement(XName.Get("RollbackUpdateOrUpgrade", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(rollbackUpdateOrUpgradeElement);
                
                XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                modeElement.Value = ComputeManagementClient.RollbackUpdateOrUpgradeModeToString(parameters.Mode);
                rollbackUpdateOrUpgradeElement.Add(modeElement);
                
                XElement forceElement = new XElement(XName.Get("Force", "http://schemas.microsoft.com/windowsazure"));
                forceElement.Value = parameters.Force.ToString().ToLower();
                rollbackUpdateOrUpgradeElement.Add(forceElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Rollback Update Or Upgrade operation cancels an in-progress
        /// configuration update and returns the deployment to its state
        /// before the update was started.  The Rollback Update Or Upgrade
        /// operation can only be called when an update is in progress on the
        /// deployment. The deployment status can be detected by calling the
        /// Get Deployment operation or Get Hosted Service Properties
        /// operation and inspecting the RollbackAllowed element. If the value
        /// returned is true a rollback can be performed.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/hh403977.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Rollback Update Or Upgrade operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RollbackUpdateOrUpgradeByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentRollbackUpdateOrUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "RollbackUpdateOrUpgradeByDeploymentSlotAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/deploymentslots/" + deploymentSlot + "?comp=rollback";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement rollbackUpdateOrUpgradeElement = new XElement(XName.Get("RollbackUpdateOrUpgrade", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(rollbackUpdateOrUpgradeElement);
                
                XElement modeElement = new XElement(XName.Get("Mode", "http://schemas.microsoft.com/windowsazure"));
                modeElement.Value = ComputeManagementClient.RollbackUpdateOrUpgradeModeToString(parameters.Mode);
                rollbackUpdateOrUpgradeElement.Add(modeElement);
                
                XElement forceElement = new XElement(XName.Get("Force", "http://schemas.microsoft.com/windowsazure"));
                forceElement.Value = parameters.Force.ToString().ToLower();
                rollbackUpdateOrUpgradeElement.Add(forceElement);
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Swap Deployment operation initiates a virtual IP address swap
        /// between the staging and production deployment environments for a
        /// service. If the service is currently running in the staging
        /// environment, it will be swapped to the production environment. If
        /// it is running in the production environment, it will be swapped to
        /// staging. For more information on this type of upgrade, see
        /// Performing Virtual IP Swap Upgrades.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460814.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Swap Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> SwapAsync(string serviceName, DeploymentSwapParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "SwapAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginSwappingAsync(serviceName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> UpdateStatusByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentUpdateStatusParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateStatusByDeploymentNameAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginUpdatingStatusByDeploymentNameAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Update Deployment Status operation initiates a change in the
        /// running status of a deployment. The status of a deployment can be
        /// running or suspended.  The Update Deployment Status operation is
        /// an asynchronous operation. To determine whether the Management
        /// service has finished processing the request, call Get Operation
        /// Status. For more information on asynchronous operations, see
        /// Tracking Asynchronous Service Management Requests.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460808.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to swap deployments for.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Deployment Status operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> UpdateStatusByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentUpdateStatusParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateStatusByDeploymentSlotAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginUpdatingStatusByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentName'>
        /// The deployment to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> UpgradeByNameAsync(string serviceName, string deploymentName, DeploymentUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpgradeByNameAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginUpgradingByNameAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Upgrade Deployment operation initiates an update of role
        /// instances in a deployment using the package and configuration that
        /// you specify. For more information about updating role instances,
        /// see Update a Windows Azure Service.  The Upgrade Deployment
        /// operation is an asynchronous operation. To determine whether the
        /// request has been processed, call Get Operation Status. For more
        /// information on asynchronous operations, see Tracking Asynchronous
        /// Service Management Requests.To perform an automatic update of a
        /// deployment, call Upgrade Deployment or Change Deployment
        /// Configuration with the Mode element set to automatic. The update
        /// proceeds from that point without a need for further input. You can
        /// call Get Operation Status to determine when the update is
        /// complete.  To perform a manual update, first call Upgrade
        /// Deployment with the Mode element set to manual. Next, call Walk
        /// Upgrade Domain to update each domain within the deployment. You
        /// should make sure that the operation is complete by calling Get
        /// Operation Status before updating the next domain.  Important: An
        /// update that adds or removes role instances will result in a
        /// configuration update to all roles that are deployed in the cloud
        /// service. Existing role instances need to be notified of new role
        /// instances so that all role instances can communicate together in
        /// the cloud service.  By default, a cloud service is deployed with
        /// five update domains, which are updated one at a time during an
        /// in-place update. For information on modifying the number of update
        /// domains in the service definition file, see Windows Azure Service
        /// Definition Schema (.csdef File).  To determine the update domain
        /// in which a particular instance is running in Windows Azure, use
        /// the UpdateDomain property of the RoleInstance class. See the
        /// Windows Azure Managed Library Reference for more information.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/ee460793.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service to upgrade.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The slot to upgrade.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Upgrade Deployment operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> UpgradeBySlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentUpgradeParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpgradeBySlotAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginUpgradingBySlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of your deployment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> WalkUpgradeDomainByDeploymentNameAsync(string serviceName, string deploymentName, DeploymentWalkUpgradeDomainParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentName", deploymentName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "WalkUpgradeDomainByDeploymentNameAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginWalkingUpgradeDomainByDeploymentNameAsync(serviceName, deploymentName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Walk Upgrade Domain operation specifies an update domain in
        /// which a role instance must be updated. For more information about
        /// updating role instances, see Update a Windows Azure Service.  The
        /// Walk Upgrade Domain operation is an asynchronous operation. To
        /// determine whether the Management service has finished processing
        /// the request, call Get Operation Status.  For more information on
        /// asynchronous operations, see Tracking Asynchronous Service
        /// Management Requests.  Prior to calling the Walk Upgrade Domain
        /// operation you must have called Upgrade Deployment, Change
        /// Deployment Configuration, or Rollback Update Or Upgrade.  By
        /// default, a service is deployed with five update domains, which are
        /// updated one at a time during an in-place update. For information
        /// on modifying the number of update domains in the service
        /// definition file, see Windows Azure Service Definition Schema
        /// (.csdef File).  To perform a manual update of your deployment,
        /// proceed in this order:  Call Upgrade Deployment with the Mode
        /// element set to manual.   Call Walk Upgrade Domain to update each
        /// domain within the deployment. Update domains must be updated in
        /// order. For example, begin with domain 0, proceed to domain 1, and
        /// so on.  Important: An update that adds or removes role instances
        /// will result in a configuration update to all roles that are
        /// deployed in the cloud service. Existing role instances need to be
        /// notified of new role instances so that all role instances can
        /// communicate together in the cloud service.  While an update is in
        /// progress, call Get Deployment to determine its status. If the
        /// update is in progress, Get Deployment returns an UpgradeStatus
        /// element that contains information about the update. If the update
        /// is complete, or if no update is in progress, then the
        /// UpgradeStatus element is null.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460800.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='deploymentSlot'>
        /// The deployment slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Walk Upgrade Domain operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<ComputeOperationStatusResponse> WalkUpgradeDomainByDeploymentSlotAsync(string serviceName, DeploymentSlot deploymentSlot, DeploymentWalkUpgradeDomainParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("deploymentSlot", deploymentSlot);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "WalkUpgradeDomainByDeploymentSlotAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.Deployments.BeginWalkingUpgradeDomainByDeploymentSlotAsync(serviceName, deploymentSlot, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                ComputeOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
    }
}
