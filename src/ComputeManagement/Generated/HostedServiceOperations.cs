// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Compute;
using Microsoft.WindowsAzure.Management.Compute.Models;

namespace Microsoft.WindowsAzure.Management.Compute
{
    /// <summary>
    /// The Service Management API includes operations for managing the hosted
    /// services beneath your subscription.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460812.aspx for
    /// more information)
    /// </summary>
    internal partial class HostedServiceOperations : IServiceOperations<ComputeManagementClient>, Microsoft.WindowsAzure.Management.Compute.IHostedServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the HostedServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal HostedServiceOperations(ComputeManagementClient client)
        {
            this._client = client;
        }
        
        private ComputeManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Compute.ComputeManagementClient.
        /// </summary>
        public ComputeManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Add Extension operation adds an available extension to your
        /// cloud service. In Windows Azure, a process can run as an extension
        /// of a cloud service. For example, Remote Desktop Access or the
        /// Windows Azure Diagnostics Agent can run as extensions to the cloud
        /// service. You can find the available extension by using the List
        /// Available Extensions operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Add Extension operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async System.Threading.Tasks.Task<OperationStatusResponse> AddExtensionAsync(string serviceName, HostedServiceAddExtensionParameters parameters, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "AddExtensionAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.HostedServices.BeginAddingExtensionAsync(serviceName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    if (result.Error != null)
                    {
                        CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                        ex.ErrorCode = result.Error.Code;
                        ex.ErrorMessage = result.Error.Message;
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    else
                    {
                        CloudException ex = new CloudException("");
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Add Extension operation adds an available extension to your
        /// cloud service. In Windows Azure, a process can run as an extension
        /// of a cloud service. For example, Remote Desktop Access or the
        /// Windows Azure Diagnostics Agent can run as extensions to the cloud
        /// service. You can find the available extension by using the List
        /// Available Extensions operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169558.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Add Extension operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<OperationResponse> BeginAddingExtensionAsync(string serviceName, HostedServiceAddExtensionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Id == null)
            {
                throw new ArgumentNullException("parameters.Id");
            }
            if (parameters.Type == null)
            {
                throw new ArgumentNullException("parameters.Type");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginAddingExtensionAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/extensions";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(extensionElement);
                
                if (parameters.ProviderNamespace != null)
                {
                    XElement providerNameSpaceElement = new XElement(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                    providerNameSpaceElement.Value = parameters.ProviderNamespace;
                    extensionElement.Add(providerNameSpaceElement);
                }
                
                XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                typeElement.Value = parameters.Type;
                extensionElement.Add(typeElement);
                
                XElement idElement = new XElement(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                idElement.Value = parameters.Id;
                extensionElement.Add(idElement);
                
                if (parameters.Thumbprint != null)
                {
                    XElement thumbprintElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                    thumbprintElement.Value = parameters.Thumbprint;
                    extensionElement.Add(thumbprintElement);
                }
                
                if (parameters.ThumbprintAlgorithm != null)
                {
                    XElement thumbprintAlgorithmElement = new XElement(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                    thumbprintAlgorithmElement.Value = parameters.ThumbprintAlgorithm;
                    extensionElement.Add(thumbprintAlgorithmElement);
                }
                
                if (parameters.PublicConfiguration != null)
                {
                    XElement publicConfigurationElement = new XElement(XName.Get("PublicConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    publicConfigurationElement.Value = TypeConversion.ToBase64String(parameters.PublicConfiguration);
                    extensionElement.Add(publicConfigurationElement);
                }
                
                if (parameters.PrivateConfiguration != null)
                {
                    XElement privateConfigurationElement = new XElement(XName.Get("PrivateConfiguration", "http://schemas.microsoft.com/windowsazure"));
                    privateConfigurationElement.Value = TypeConversion.ToBase64String(parameters.PrivateConfiguration);
                    extensionElement.Add(privateConfigurationElement);
                }
                
                if (parameters.Version != null)
                {
                    XElement versionElement = new XElement(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                    versionElement.Value = parameters.Version;
                    extensionElement.Add(versionElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Hosted Service operation deletes the specified cloud
        /// service from Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<OperationResponse> BeginDeletingAllAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                Tracing.Enter(invocationId, this, "BeginDeletingAllAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "?comp=media";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Extension operation deletes the specified extension from
        /// a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='extensionId'>
        /// The identifier that was assigned to the extension when it was added
        /// to the cloud service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<OperationResponse> BeginDeletingExtensionAsync(string serviceName, string extensionId, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (extensionId == null)
            {
                throw new ArgumentNullException("extensionId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("extensionId", extensionId);
                Tracing.Enter(invocationId, this, "BeginDeletingExtensionAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/extensions/" + extensionId;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Check Hosted Service Name Availability operation checks for the
        /// availability of the specified cloud service name.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj154116.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The cloud service name that you would like to use.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Check Hosted Service Name Availability operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Compute.Models.HostedServiceCheckNameAvailabilityResponse> CheckNameAvailabilityAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                Tracing.Enter(invocationId, this, "CheckNameAvailabilityAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/operations/isavailable/" + serviceName;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceCheckNameAvailabilityResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new HostedServiceCheckNameAvailabilityResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement availabilityResponseElement = responseDoc.Element(XName.Get("AvailabilityResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (availabilityResponseElement != null && availabilityResponseElement.IsEmpty == false)
                    {
                        XElement resultElement = availabilityResponseElement.Element(XName.Get("Result", "http://schemas.microsoft.com/windowsazure"));
                        if (resultElement != null && resultElement.IsEmpty == false)
                        {
                            bool resultInstance = bool.Parse(resultElement.Value);
                            result.IsAvailable = resultInstance;
                        }
                        
                        XElement reasonElement = availabilityResponseElement.Element(XName.Get("Reason", "http://schemas.microsoft.com/windowsazure"));
                        if (reasonElement != null && reasonElement.IsEmpty == false)
                        {
                            string reasonInstance = reasonElement.Value;
                            result.Reason = reasonInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Create Hosted Service operation creates a new cloud service in
        /// Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441304.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Hosted Service operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<OperationResponse> CreateAsync(HostedServiceCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Description != null && parameters.Description.Length > 1024)
            {
                throw new ArgumentOutOfRangeException("parameters.Description");
            }
            if (parameters.Label == null)
            {
                throw new ArgumentNullException("parameters.Label");
            }
            if (parameters.ServiceName == null)
            {
                throw new ArgumentNullException("parameters.ServiceName");
            }
            // TODO: Validate parameters.ServiceName is a valid DNS name.
            int locationCount = (parameters.AffinityGroup != null ? 1 : 0) + (parameters.Location != null ? 1 : 0);
            if (locationCount != 1)
            {
                throw new ArgumentException("Only one of parameters.AffinityGroup, parameters.Location may be provided.");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement createHostedServiceElement = new XElement(XName.Get("CreateHostedService", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(createHostedServiceElement);
                
                XElement serviceNameElement = new XElement(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                serviceNameElement.Value = parameters.ServiceName;
                createHostedServiceElement.Add(serviceNameElement);
                
                XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                createHostedServiceElement.Add(labelElement);
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    createHostedServiceElement.Add(descriptionElement);
                }
                
                if (parameters.Location != null)
                {
                    XElement locationElement = new XElement(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                    locationElement.Value = parameters.Location;
                    createHostedServiceElement.Add(locationElement);
                }
                
                if (parameters.AffinityGroup != null)
                {
                    XElement affinityGroupElement = new XElement(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                    affinityGroupElement.Value = parameters.AffinityGroup;
                    createHostedServiceElement.Add(affinityGroupElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                    {
                        string extendedPropertiesKey = pair.Key;
                        string extendedPropertiesValue = pair.Value;
                        XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                        
                        XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                        extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                        
                        XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesValueElement.Value = extendedPropertiesValue;
                        extendedPropertiesElement.Add(extendedPropertiesValueElement);
                    }
                    createHostedServiceElement.Add(extendedPropertiesDictionaryElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Hosted Service operation deletes the specified cloud
        /// service from Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<OperationResponse> DeleteAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Hosted Service operation deletes the specified cloud
        /// service from Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441305.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async System.Threading.Tasks.Task<OperationStatusResponse> DeleteAllAsync(string serviceName, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                Tracing.Enter(invocationId, this, "DeleteAllAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.HostedServices.BeginDeletingAllAsync(serviceName, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    if (result.Error != null)
                    {
                        CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                        ex.ErrorCode = result.Error.Code;
                        ex.ErrorMessage = result.Error.Message;
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    else
                    {
                        CloudException ex = new CloudException("");
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Extension operation deletes the specified extension from
        /// a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169560.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='extensionId'>
        /// The identifier that was assigned to the extension when it was added
        /// to the cloud service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async System.Threading.Tasks.Task<OperationStatusResponse> DeleteExtensionAsync(string serviceName, string extensionId, CancellationToken cancellationToken)
        {
            ComputeManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("extensionId", extensionId);
                Tracing.Enter(invocationId, this, "DeleteExtensionAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.HostedServices.BeginDeletingExtensionAsync(serviceName, extensionId, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                OperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 30;
                while ((result.Status != OperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 30;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != OperationStatus.Succeeded)
                {
                    if (result.Error != null)
                    {
                        CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                        ex.ErrorCode = result.Error.Code;
                        ex.ErrorMessage = result.Error.Message;
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    else
                    {
                        CloudException ex = new CloudException("");
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Hosted Service Properties operation retrieves system
        /// properties for the specified cloud service. These properties
        /// include the service name and service type; the name of the
        /// affinity group to which the service belongs, or its location if it
        /// is not part of an affinity group.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Hosted Service operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Compute.Models.HostedServiceGetResponse> GetAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new HostedServiceGetResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement hostedServiceElement = responseDoc.Element(XName.Get("HostedService", "http://schemas.microsoft.com/windowsazure"));
                    if (hostedServiceElement != null && hostedServiceElement.IsEmpty == false)
                    {
                        XElement urlElement = hostedServiceElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                        if (urlElement != null && urlElement.IsEmpty == false)
                        {
                            Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                            result.Uri = urlInstance;
                        }
                        
                        XElement serviceNameElement = hostedServiceElement.Element(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceNameElement != null && serviceNameElement.IsEmpty == false)
                        {
                            string serviceNameInstance = serviceNameElement.Value;
                            result.ServiceName = serviceNameInstance;
                        }
                        
                        XElement hostedServicePropertiesElement = hostedServiceElement.Element(XName.Get("HostedServiceProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (hostedServicePropertiesElement != null && hostedServicePropertiesElement.IsEmpty == false)
                        {
                            HostedServiceProperties hostedServicePropertiesInstance = new HostedServiceProperties();
                            result.Properties = hostedServicePropertiesInstance;
                            
                            XElement descriptionElement = hostedServicePropertiesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null && descriptionElement.IsEmpty == false)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                hostedServicePropertiesInstance.Description = descriptionInstance;
                            }
                            
                            XElement affinityGroupElement = hostedServicePropertiesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                            if (affinityGroupElement != null && affinityGroupElement.IsEmpty == false)
                            {
                                string affinityGroupInstance = affinityGroupElement.Value;
                                hostedServicePropertiesInstance.AffinityGroup = affinityGroupInstance;
                            }
                            
                            XElement locationElement = hostedServicePropertiesElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                            if (locationElement != null && locationElement.IsEmpty == false)
                            {
                                string locationInstance = locationElement.Value;
                                hostedServicePropertiesInstance.Location = locationInstance;
                            }
                            
                            XElement labelElement = hostedServicePropertiesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null && labelElement.IsEmpty == false)
                            {
                                string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                                hostedServicePropertiesInstance.Label = labelInstance;
                            }
                            
                            XElement statusElement = hostedServicePropertiesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null && statusElement.IsEmpty == false)
                            {
                                HostedServiceStatus statusInstance = (HostedServiceStatus)Enum.Parse(typeof(HostedServiceStatus), statusElement.Value, true);
                                hostedServicePropertiesInstance.Status = statusInstance;
                            }
                            
                            XElement dateCreatedElement = hostedServicePropertiesElement.Element(XName.Get("DateCreated", "http://schemas.microsoft.com/windowsazure"));
                            if (dateCreatedElement != null && dateCreatedElement.IsEmpty == false)
                            {
                                DateTime dateCreatedInstance = DateTime.Parse(dateCreatedElement.Value, CultureInfo.InvariantCulture);
                                hostedServicePropertiesInstance.DateCreated = dateCreatedInstance;
                            }
                            
                            XElement dateLastModifiedElement = hostedServicePropertiesElement.Element(XName.Get("DateLastModified", "http://schemas.microsoft.com/windowsazure"));
                            if (dateLastModifiedElement != null && dateLastModifiedElement.IsEmpty == false)
                            {
                                DateTime dateLastModifiedInstance = DateTime.Parse(dateLastModifiedElement.Value, CultureInfo.InvariantCulture);
                                hostedServicePropertiesInstance.DateLastModified = dateLastModifiedInstance;
                            }
                            
                            XElement extendedPropertiesSequenceElement = hostedServicePropertiesElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                            if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.IsEmpty == false)
                            {
                                foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    hostedServicePropertiesInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Hosted Service Properties operation retrieves system
        /// properties for the specified cloud service. These properties
        /// include the service name and service type; the name of the
        /// affinity group to which the service belongs, or its location if it
        /// is not part of an affinity group; and information on the
        /// deployments of the service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460806.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The detailed Get Hosted Service operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Compute.Models.HostedServiceGetDetailedResponse> GetDetailedAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                Tracing.Enter(invocationId, this, "GetDetailedAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "?embed-detail=true";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceGetDetailedResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new HostedServiceGetDetailedResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement hostedServiceElement = responseDoc.Element(XName.Get("HostedService", "http://schemas.microsoft.com/windowsazure"));
                    if (hostedServiceElement != null && hostedServiceElement.IsEmpty == false)
                    {
                        XElement deploymentsSequenceElement = hostedServiceElement.Element(XName.Get("Deployments", "http://schemas.microsoft.com/windowsazure"));
                        if (deploymentsSequenceElement != null && deploymentsSequenceElement.IsEmpty == false)
                        {
                            foreach (XElement deploymentsElement in deploymentsSequenceElement.Elements(XName.Get("Deployment", "http://schemas.microsoft.com/windowsazure")))
                            {
                                HostedServiceGetDetailedResponse.Deployment deploymentInstance = new HostedServiceGetDetailedResponse.Deployment();
                                result.Deployments.Add(deploymentInstance);
                                
                                XElement nameElement = deploymentsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null && nameElement.IsEmpty == false)
                                {
                                    string nameInstance = nameElement.Value;
                                    deploymentInstance.Name = nameInstance;
                                }
                                
                                XElement deploymentSlotElement = deploymentsElement.Element(XName.Get("DeploymentSlot", "http://schemas.microsoft.com/windowsazure"));
                                if (deploymentSlotElement != null && deploymentSlotElement.IsEmpty == false)
                                {
                                    DeploymentSlot deploymentSlotInstance = (DeploymentSlot)Enum.Parse(typeof(DeploymentSlot), deploymentSlotElement.Value, true);
                                    deploymentInstance.DeploymentSlot = deploymentSlotInstance;
                                }
                                
                                XElement privateIDElement = deploymentsElement.Element(XName.Get("PrivateID", "http://schemas.microsoft.com/windowsazure"));
                                if (privateIDElement != null && privateIDElement.IsEmpty == false)
                                {
                                    string privateIDInstance = privateIDElement.Value;
                                    deploymentInstance.PrivateId = privateIDInstance;
                                }
                                
                                XElement statusElement = deploymentsElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                if (statusElement != null && statusElement.IsEmpty == false)
                                {
                                    DeploymentStatus statusInstance = (DeploymentStatus)Enum.Parse(typeof(DeploymentStatus), statusElement.Value, true);
                                    deploymentInstance.Status = statusInstance;
                                }
                                
                                XElement labelElement = deploymentsElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement != null && labelElement.IsEmpty == false)
                                {
                                    string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                                    deploymentInstance.Label = labelInstance;
                                }
                                
                                XElement urlElement = deploymentsElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                                if (urlElement != null && urlElement.IsEmpty == false)
                                {
                                    Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                                    deploymentInstance.Uri = urlInstance;
                                }
                                
                                XElement configurationElement = deploymentsElement.Element(XName.Get("Configuration", "http://schemas.microsoft.com/windowsazure"));
                                if (configurationElement != null && configurationElement.IsEmpty == false)
                                {
                                    string configurationInstance = TypeConversion.FromBase64String(configurationElement.Value);
                                    deploymentInstance.Configuration = configurationInstance;
                                }
                                
                                XElement roleInstanceListSequenceElement = deploymentsElement.Element(XName.Get("RoleInstanceList", "http://schemas.microsoft.com/windowsazure"));
                                if (roleInstanceListSequenceElement != null && roleInstanceListSequenceElement.IsEmpty == false)
                                {
                                    foreach (XElement roleInstanceListElement in roleInstanceListSequenceElement.Elements(XName.Get("RoleInstance", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        RoleInstance roleInstanceInstance = new RoleInstance();
                                        deploymentInstance.RoleInstances.Add(roleInstanceInstance);
                                        
                                        XElement roleNameElement = roleInstanceListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                        if (roleNameElement != null && roleNameElement.IsEmpty == false)
                                        {
                                            string roleNameInstance = roleNameElement.Value;
                                            roleInstanceInstance.RoleName = roleNameInstance;
                                        }
                                        
                                        XElement instanceNameElement = roleInstanceListElement.Element(XName.Get("InstanceName", "http://schemas.microsoft.com/windowsazure"));
                                        if (instanceNameElement != null && instanceNameElement.IsEmpty == false)
                                        {
                                            string instanceNameInstance = instanceNameElement.Value;
                                            roleInstanceInstance.InstanceName = instanceNameInstance;
                                        }
                                        
                                        XElement instanceStatusElement = roleInstanceListElement.Element(XName.Get("InstanceStatus", "http://schemas.microsoft.com/windowsazure"));
                                        if (instanceStatusElement != null && instanceStatusElement.IsEmpty == false)
                                        {
                                            string instanceStatusInstance = instanceStatusElement.Value;
                                            roleInstanceInstance.InstanceStatus = instanceStatusInstance;
                                        }
                                        
                                        XElement instanceUpgradeDomainElement = roleInstanceListElement.Element(XName.Get("InstanceUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                        if (instanceUpgradeDomainElement != null && instanceUpgradeDomainElement.IsEmpty == false && string.IsNullOrEmpty(instanceUpgradeDomainElement.Value) == false)
                                        {
                                            int instanceUpgradeDomainInstance = int.Parse(instanceUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                            roleInstanceInstance.InstanceUpgradeDomain = instanceUpgradeDomainInstance;
                                        }
                                        
                                        XElement instanceFaultDomainElement = roleInstanceListElement.Element(XName.Get("InstanceFaultDomain", "http://schemas.microsoft.com/windowsazure"));
                                        if (instanceFaultDomainElement != null && instanceFaultDomainElement.IsEmpty == false && string.IsNullOrEmpty(instanceFaultDomainElement.Value) == false)
                                        {
                                            int instanceFaultDomainInstance = int.Parse(instanceFaultDomainElement.Value, CultureInfo.InvariantCulture);
                                            roleInstanceInstance.InstanceFaultDomain = instanceFaultDomainInstance;
                                        }
                                        
                                        XElement instanceSizeElement = roleInstanceListElement.Element(XName.Get("InstanceSize", "http://schemas.microsoft.com/windowsazure"));
                                        if (instanceSizeElement != null && instanceSizeElement.IsEmpty == false)
                                        {
                                            string instanceSizeInstance = instanceSizeElement.Value;
                                            roleInstanceInstance.InstanceSize = instanceSizeInstance;
                                        }
                                        
                                        XElement instanceStateDetailsElement = roleInstanceListElement.Element(XName.Get("InstanceStateDetails", "http://schemas.microsoft.com/windowsazure"));
                                        if (instanceStateDetailsElement != null && instanceStateDetailsElement.IsEmpty == false)
                                        {
                                            string instanceStateDetailsInstance = instanceStateDetailsElement.Value;
                                            roleInstanceInstance.InstanceStateDetails = instanceStateDetailsInstance;
                                        }
                                        
                                        XElement instanceErrorCodeElement = roleInstanceListElement.Element(XName.Get("InstanceErrorCode", "http://schemas.microsoft.com/windowsazure"));
                                        if (instanceErrorCodeElement != null && instanceErrorCodeElement.IsEmpty == false)
                                        {
                                            string instanceErrorCodeInstance = instanceErrorCodeElement.Value;
                                            roleInstanceInstance.InstanceErrorCode = instanceErrorCodeInstance;
                                        }
                                        
                                        XElement ipAddressElement = roleInstanceListElement.Element(XName.Get("IpAddress", "http://schemas.microsoft.com/windowsazure"));
                                        if (ipAddressElement != null && ipAddressElement.IsEmpty == false)
                                        {
                                            string ipAddressInstance = ipAddressElement.Value;
                                            roleInstanceInstance.IPAddress = ipAddressInstance;
                                        }
                                        
                                        XElement instanceEndpointsSequenceElement = roleInstanceListElement.Element(XName.Get("InstanceEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                        if (instanceEndpointsSequenceElement != null && instanceEndpointsSequenceElement.IsEmpty == false)
                                        {
                                            foreach (XElement instanceEndpointsElement in instanceEndpointsSequenceElement.Elements(XName.Get("InstanceEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                InstanceEndpoint instanceEndpointInstance = new InstanceEndpoint();
                                                roleInstanceInstance.InstanceEndpoints.Add(instanceEndpointInstance);
                                                
                                                XElement localPortElement = instanceEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                                if (localPortElement != null && localPortElement.IsEmpty == false && string.IsNullOrEmpty(localPortElement.Value) == false)
                                                {
                                                    int localPortInstance = int.Parse(localPortElement.Value, CultureInfo.InvariantCulture);
                                                    instanceEndpointInstance.LocalPort = localPortInstance;
                                                }
                                                
                                                XElement nameElement2 = instanceEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement2 != null && nameElement2.IsEmpty == false)
                                                {
                                                    string nameInstance2 = nameElement2.Value;
                                                    instanceEndpointInstance.Name = nameInstance2;
                                                }
                                                
                                                XElement publicPortElement = instanceEndpointsElement.Element(XName.Get("PublicPort", "http://schemas.microsoft.com/windowsazure"));
                                                if (publicPortElement != null && publicPortElement.IsEmpty == false)
                                                {
                                                    int publicPortInstance = int.Parse(publicPortElement.Value, CultureInfo.InvariantCulture);
                                                    instanceEndpointInstance.Port = publicPortInstance;
                                                }
                                                
                                                XElement protocolElement = instanceEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                if (protocolElement != null && protocolElement.IsEmpty == false)
                                                {
                                                    string protocolInstance = protocolElement.Value;
                                                    instanceEndpointInstance.Protocol = protocolInstance;
                                                }
                                                
                                                XElement vipElement = instanceEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                                if (vipElement != null && vipElement.IsEmpty == false)
                                                {
                                                    string vipInstance = vipElement.Value;
                                                    instanceEndpointInstance.VirtualIPAddress = vipInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement powerStateElement = roleInstanceListElement.Element(XName.Get("PowerState", "http://schemas.microsoft.com/windowsazure"));
                                        if (powerStateElement != null && powerStateElement.IsEmpty == false)
                                        {
                                            RoleInstancePowerState powerStateInstance = (RoleInstancePowerState)Enum.Parse(typeof(RoleInstancePowerState), powerStateElement.Value, true);
                                            roleInstanceInstance.PowerState = powerStateInstance;
                                        }
                                        
                                        XElement hostNameElement = roleInstanceListElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                        if (hostNameElement != null && hostNameElement.IsEmpty == false)
                                        {
                                            string hostNameInstance = hostNameElement.Value;
                                            roleInstanceInstance.HostName = hostNameInstance;
                                        }
                                        
                                        XElement remoteAccessCertificateThumbprintElement = roleInstanceListElement.Element(XName.Get("RemoteAccessCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                        if (remoteAccessCertificateThumbprintElement != null && remoteAccessCertificateThumbprintElement.IsEmpty == false)
                                        {
                                            string remoteAccessCertificateThumbprintInstance = remoteAccessCertificateThumbprintElement.Value;
                                            roleInstanceInstance.RemoteAccessCertificateThumbprint = remoteAccessCertificateThumbprintInstance;
                                        }
                                    }
                                }
                                
                                XElement upgradeStatusElement = deploymentsElement.Element(XName.Get("UpgradeStatus", "http://schemas.microsoft.com/windowsazure"));
                                if (upgradeStatusElement != null && upgradeStatusElement.IsEmpty == false)
                                {
                                    UpgradeStatus upgradeStatusInstance = new UpgradeStatus();
                                    deploymentInstance.UpgradeStatus = upgradeStatusInstance;
                                    
                                    XElement upgradeTypeElement = upgradeStatusElement.Element(XName.Get("UpgradeType", "http://schemas.microsoft.com/windowsazure"));
                                    if (upgradeTypeElement != null && upgradeTypeElement.IsEmpty == false)
                                    {
                                        DeploymentUpgradeType upgradeTypeInstance = (DeploymentUpgradeType)Enum.Parse(typeof(DeploymentUpgradeType), upgradeTypeElement.Value, true);
                                        upgradeStatusInstance.UpgradeType = upgradeTypeInstance;
                                    }
                                    
                                    XElement currentUpgradeDomainStateElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomainState", "http://schemas.microsoft.com/windowsazure"));
                                    if (currentUpgradeDomainStateElement != null && currentUpgradeDomainStateElement.IsEmpty == false)
                                    {
                                        UpgradeDomainState currentUpgradeDomainStateInstance = (UpgradeDomainState)Enum.Parse(typeof(UpgradeDomainState), currentUpgradeDomainStateElement.Value, true);
                                        upgradeStatusInstance.CurrentUpgradeDomainState = currentUpgradeDomainStateInstance;
                                    }
                                    
                                    XElement currentUpgradeDomainElement = upgradeStatusElement.Element(XName.Get("CurrentUpgradeDomain", "http://schemas.microsoft.com/windowsazure"));
                                    if (currentUpgradeDomainElement != null && currentUpgradeDomainElement.IsEmpty == false)
                                    {
                                        int currentUpgradeDomainInstance = int.Parse(currentUpgradeDomainElement.Value, CultureInfo.InvariantCulture);
                                        upgradeStatusInstance.CurrentUpgradeDomain = currentUpgradeDomainInstance;
                                    }
                                }
                                
                                XElement upgradeDomainCountElement = deploymentsElement.Element(XName.Get("UpgradeDomainCount", "http://schemas.microsoft.com/windowsazure"));
                                if (upgradeDomainCountElement != null && upgradeDomainCountElement.IsEmpty == false)
                                {
                                    int upgradeDomainCountInstance = int.Parse(upgradeDomainCountElement.Value, CultureInfo.InvariantCulture);
                                    deploymentInstance.UpgradeDomainCount = upgradeDomainCountInstance;
                                }
                                
                                XElement roleListSequenceElement = deploymentsElement.Element(XName.Get("RoleList", "http://schemas.microsoft.com/windowsazure"));
                                if (roleListSequenceElement != null && roleListSequenceElement.IsEmpty == false)
                                {
                                    foreach (XElement roleListElement in roleListSequenceElement.Elements(XName.Get("Role", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        Role roleInstance = new Role();
                                        deploymentInstance.Roles.Add(roleInstance);
                                        
                                        XElement roleNameElement2 = roleListElement.Element(XName.Get("RoleName", "http://schemas.microsoft.com/windowsazure"));
                                        if (roleNameElement2 != null && roleNameElement2.IsEmpty == false)
                                        {
                                            string roleNameInstance2 = roleNameElement2.Value;
                                            roleInstance.RoleName = roleNameInstance2;
                                        }
                                        
                                        XElement osVersionElement = roleListElement.Element(XName.Get("OsVersion", "http://schemas.microsoft.com/windowsazure"));
                                        if (osVersionElement != null && osVersionElement.IsEmpty == false)
                                        {
                                            string osVersionInstance = osVersionElement.Value;
                                            roleInstance.OSVersion = osVersionInstance;
                                        }
                                        
                                        XElement roleTypeElement = roleListElement.Element(XName.Get("RoleType", "http://schemas.microsoft.com/windowsazure"));
                                        if (roleTypeElement != null && roleTypeElement.IsEmpty == false)
                                        {
                                            string roleTypeInstance = roleTypeElement.Value;
                                            roleInstance.RoleType = roleTypeInstance;
                                        }
                                        
                                        XElement configurationSetsSequenceElement = roleListElement.Element(XName.Get("ConfigurationSets", "http://schemas.microsoft.com/windowsazure"));
                                        if (configurationSetsSequenceElement != null && configurationSetsSequenceElement.IsEmpty == false)
                                        {
                                            foreach (XElement configurationSetsElement in configurationSetsSequenceElement.Elements(XName.Get("ConfigurationSet", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                ConfigurationSet configurationSetInstance = new ConfigurationSet();
                                                roleInstance.ConfigurationSets.Add(configurationSetInstance);
                                                
                                                XElement configurationSetTypeElement = configurationSetsElement.Element(XName.Get("ConfigurationSetType", "http://schemas.microsoft.com/windowsazure"));
                                                if (configurationSetTypeElement != null && configurationSetTypeElement.IsEmpty == false)
                                                {
                                                    string configurationSetTypeInstance = configurationSetTypeElement.Value;
                                                    configurationSetInstance.ConfigurationSetType = configurationSetTypeInstance;
                                                }
                                                
                                                XElement inputEndpointsSequenceElement = configurationSetsElement.Element(XName.Get("InputEndpoints", "http://schemas.microsoft.com/windowsazure"));
                                                if (inputEndpointsSequenceElement != null && inputEndpointsSequenceElement.IsEmpty == false)
                                                {
                                                    foreach (XElement inputEndpointsElement in inputEndpointsSequenceElement.Elements(XName.Get("InputEndpoint", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        InputEndpoint inputEndpointInstance = new InputEndpoint();
                                                        configurationSetInstance.InputEndpoints.Add(inputEndpointInstance);
                                                        
                                                        XElement loadBalancedEndpointSetNameElement = inputEndpointsElement.Element(XName.Get("LoadBalancedEndpointSetName", "http://schemas.microsoft.com/windowsazure"));
                                                        if (loadBalancedEndpointSetNameElement != null && loadBalancedEndpointSetNameElement.IsEmpty == false)
                                                        {
                                                            string loadBalancedEndpointSetNameInstance = loadBalancedEndpointSetNameElement.Value;
                                                            inputEndpointInstance.LoadBalancedEndpointSetName = loadBalancedEndpointSetNameInstance;
                                                        }
                                                        
                                                        XElement localPortElement2 = inputEndpointsElement.Element(XName.Get("LocalPort", "http://schemas.microsoft.com/windowsazure"));
                                                        if (localPortElement2 != null && localPortElement2.IsEmpty == false && string.IsNullOrEmpty(localPortElement2.Value) == false)
                                                        {
                                                            int localPortInstance2 = int.Parse(localPortElement2.Value, CultureInfo.InvariantCulture);
                                                            inputEndpointInstance.LocalPort = localPortInstance2;
                                                        }
                                                        
                                                        XElement nameElement3 = inputEndpointsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                        if (nameElement3 != null && nameElement3.IsEmpty == false)
                                                        {
                                                            string nameInstance3 = nameElement3.Value;
                                                            inputEndpointInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        XElement portElement = inputEndpointsElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                        if (portElement != null && portElement.IsEmpty == false && string.IsNullOrEmpty(portElement.Value) == false)
                                                        {
                                                            int portInstance = int.Parse(portElement.Value, CultureInfo.InvariantCulture);
                                                            inputEndpointInstance.Port = portInstance;
                                                        }
                                                        
                                                        XElement loadBalancerProbeElement = inputEndpointsElement.Element(XName.Get("LoadBalancerProbe", "http://schemas.microsoft.com/windowsazure"));
                                                        if (loadBalancerProbeElement != null && loadBalancerProbeElement.IsEmpty == false)
                                                        {
                                                            LoadBalancerProbe loadBalancerProbeInstance = new LoadBalancerProbe();
                                                            inputEndpointInstance.LoadBalancerProbe = loadBalancerProbeInstance;
                                                            
                                                            XElement pathElement = loadBalancerProbeElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                            if (pathElement != null && pathElement.IsEmpty == false)
                                                            {
                                                                string pathInstance = pathElement.Value;
                                                                loadBalancerProbeInstance.Path = pathInstance;
                                                            }
                                                            
                                                            XElement portElement2 = loadBalancerProbeElement.Element(XName.Get("Port", "http://schemas.microsoft.com/windowsazure"));
                                                            if (portElement2 != null && portElement2.IsEmpty == false)
                                                            {
                                                                int portInstance2 = int.Parse(portElement2.Value, CultureInfo.InvariantCulture);
                                                                loadBalancerProbeInstance.Port = portInstance2;
                                                            }
                                                            
                                                            XElement protocolElement2 = loadBalancerProbeElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                            if (protocolElement2 != null && protocolElement2.IsEmpty == false)
                                                            {
                                                                LoadBalancerProbeTransportProtocol protocolInstance2 = ComputeManagementClient.ParseLoadBalancerProbeTransportProtocol(protocolElement2.Value);
                                                                loadBalancerProbeInstance.Protocol = protocolInstance2;
                                                            }
                                                            
                                                            XElement intervalInSecondsElement = loadBalancerProbeElement.Element(XName.Get("IntervalInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                            if (intervalInSecondsElement != null && intervalInSecondsElement.IsEmpty == false && string.IsNullOrEmpty(intervalInSecondsElement.Value) == false)
                                                            {
                                                                int intervalInSecondsInstance = int.Parse(intervalInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                                loadBalancerProbeInstance.IntervalInSeconds = intervalInSecondsInstance;
                                                            }
                                                            
                                                            XElement timeoutInSecondsElement = loadBalancerProbeElement.Element(XName.Get("TimeoutInSeconds", "http://schemas.microsoft.com/windowsazure"));
                                                            if (timeoutInSecondsElement != null && timeoutInSecondsElement.IsEmpty == false && string.IsNullOrEmpty(timeoutInSecondsElement.Value) == false)
                                                            {
                                                                int timeoutInSecondsInstance = int.Parse(timeoutInSecondsElement.Value, CultureInfo.InvariantCulture);
                                                                loadBalancerProbeInstance.TimeoutInSeconds = timeoutInSecondsInstance;
                                                            }
                                                        }
                                                        
                                                        XElement protocolElement3 = inputEndpointsElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                        if (protocolElement3 != null && protocolElement3.IsEmpty == false)
                                                        {
                                                            string protocolInstance3 = protocolElement3.Value;
                                                            inputEndpointInstance.Protocol = protocolInstance3;
                                                        }
                                                        
                                                        XElement vipElement2 = inputEndpointsElement.Element(XName.Get("Vip", "http://schemas.microsoft.com/windowsazure"));
                                                        if (vipElement2 != null && vipElement2.IsEmpty == false)
                                                        {
                                                            string vipInstance2 = vipElement2.Value;
                                                            inputEndpointInstance.VirtualIPAddress = vipInstance2;
                                                        }
                                                        
                                                        XElement enableDirectServerReturnElement = inputEndpointsElement.Element(XName.Get("EnableDirectServerReturn", "http://schemas.microsoft.com/windowsazure"));
                                                        if (enableDirectServerReturnElement != null && enableDirectServerReturnElement.IsEmpty == false && string.IsNullOrEmpty(enableDirectServerReturnElement.Value) == false)
                                                        {
                                                            bool enableDirectServerReturnInstance = bool.Parse(enableDirectServerReturnElement.Value);
                                                            inputEndpointInstance.EnableDirectServerReturn = enableDirectServerReturnInstance;
                                                        }
                                                        
                                                        XElement endpointAclElement = inputEndpointsElement.Element(XName.Get("EndpointAcl", "http://schemas.microsoft.com/windowsazure"));
                                                        if (endpointAclElement != null && endpointAclElement.IsEmpty == false)
                                                        {
                                                            EndpointAcl endpointAclInstance = new EndpointAcl();
                                                            inputEndpointInstance.EndpointAcl = endpointAclInstance;
                                                            
                                                            XElement rulesSequenceElement = endpointAclElement.Element(XName.Get("Rules", "http://schemas.microsoft.com/windowsazure"));
                                                            if (rulesSequenceElement != null && rulesSequenceElement.IsEmpty == false)
                                                            {
                                                                foreach (XElement rulesElement in rulesSequenceElement.Elements(XName.Get("Rule", "http://schemas.microsoft.com/windowsazure")))
                                                                {
                                                                    AccessControlListRule ruleInstance = new AccessControlListRule();
                                                                    endpointAclInstance.Rules.Add(ruleInstance);
                                                                    
                                                                    XElement orderElement = rulesElement.Element(XName.Get("Order", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (orderElement != null && orderElement.IsEmpty == false && string.IsNullOrEmpty(orderElement.Value) == false)
                                                                    {
                                                                        int orderInstance = int.Parse(orderElement.Value, CultureInfo.InvariantCulture);
                                                                        ruleInstance.Order = orderInstance;
                                                                    }
                                                                    
                                                                    XElement actionElement = rulesElement.Element(XName.Get("Action", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (actionElement != null && actionElement.IsEmpty == false)
                                                                    {
                                                                        string actionInstance = actionElement.Value;
                                                                        ruleInstance.Action = actionInstance;
                                                                    }
                                                                    
                                                                    XElement remoteSubnetElement = rulesElement.Element(XName.Get("RemoteSubnet", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (remoteSubnetElement != null && remoteSubnetElement.IsEmpty == false)
                                                                    {
                                                                        string remoteSubnetInstance = remoteSubnetElement.Value;
                                                                        ruleInstance.RemoteSubnet = remoteSubnetInstance;
                                                                    }
                                                                    
                                                                    XElement descriptionElement = rulesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                                                    if (descriptionElement != null && descriptionElement.IsEmpty == false)
                                                                    {
                                                                        string descriptionInstance = descriptionElement.Value;
                                                                        ruleInstance.Description = descriptionInstance;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                XElement subnetNamesSequenceElement = configurationSetsElement.Element(XName.Get("SubnetNames", "http://schemas.microsoft.com/windowsazure"));
                                                if (subnetNamesSequenceElement != null && subnetNamesSequenceElement.IsEmpty == false)
                                                {
                                                    foreach (XElement subnetNamesElement in subnetNamesSequenceElement.Elements(XName.Get("SubnetName", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        configurationSetInstance.SubnetNames.Add(subnetNamesElement.Value);
                                                    }
                                                }
                                                
                                                XElement staticVirtualNetworkIPAddressElement = configurationSetsElement.Element(XName.Get("StaticVirtualNetworkIPAddress", "http://schemas.microsoft.com/windowsazure"));
                                                if (staticVirtualNetworkIPAddressElement != null && staticVirtualNetworkIPAddressElement.IsEmpty == false)
                                                {
                                                    string staticVirtualNetworkIPAddressInstance = staticVirtualNetworkIPAddressElement.Value;
                                                    configurationSetInstance.StaticVirtualNetworkIPAddress = staticVirtualNetworkIPAddressInstance;
                                                }
                                                
                                                XElement computerNameElement = configurationSetsElement.Element(XName.Get("ComputerName", "http://schemas.microsoft.com/windowsazure"));
                                                if (computerNameElement != null && computerNameElement.IsEmpty == false)
                                                {
                                                    string computerNameInstance = computerNameElement.Value;
                                                    configurationSetInstance.ComputerName = computerNameInstance;
                                                }
                                                
                                                XElement adminPasswordElement = configurationSetsElement.Element(XName.Get("AdminPassword", "http://schemas.microsoft.com/windowsazure"));
                                                if (adminPasswordElement != null && adminPasswordElement.IsEmpty == false)
                                                {
                                                    string adminPasswordInstance = adminPasswordElement.Value;
                                                    configurationSetInstance.AdminPassword = adminPasswordInstance;
                                                }
                                                
                                                XElement resetPasswordOnFirstLogonElement = configurationSetsElement.Element(XName.Get("ResetPasswordOnFirstLogon", "http://schemas.microsoft.com/windowsazure"));
                                                if (resetPasswordOnFirstLogonElement != null && resetPasswordOnFirstLogonElement.IsEmpty == false && string.IsNullOrEmpty(resetPasswordOnFirstLogonElement.Value) == false)
                                                {
                                                    bool resetPasswordOnFirstLogonInstance = bool.Parse(resetPasswordOnFirstLogonElement.Value);
                                                    configurationSetInstance.ResetPasswordOnFirstLogon = resetPasswordOnFirstLogonInstance;
                                                }
                                                
                                                XElement enableAutomaticUpdatesElement = configurationSetsElement.Element(XName.Get("EnableAutomaticUpdates", "http://schemas.microsoft.com/windowsazure"));
                                                if (enableAutomaticUpdatesElement != null && enableAutomaticUpdatesElement.IsEmpty == false && string.IsNullOrEmpty(enableAutomaticUpdatesElement.Value) == false)
                                                {
                                                    bool enableAutomaticUpdatesInstance = bool.Parse(enableAutomaticUpdatesElement.Value);
                                                    configurationSetInstance.EnableAutomaticUpdates = enableAutomaticUpdatesInstance;
                                                }
                                                
                                                XElement timeZoneElement = configurationSetsElement.Element(XName.Get("TimeZone", "http://schemas.microsoft.com/windowsazure"));
                                                if (timeZoneElement != null && timeZoneElement.IsEmpty == false)
                                                {
                                                    string timeZoneInstance = timeZoneElement.Value;
                                                    configurationSetInstance.TimeZone = timeZoneInstance;
                                                }
                                                
                                                XElement domainJoinElement = configurationSetsElement.Element(XName.Get("DomainJoin", "http://schemas.microsoft.com/windowsazure"));
                                                if (domainJoinElement != null && domainJoinElement.IsEmpty == false)
                                                {
                                                    DomainJoinSettings domainJoinInstance = new DomainJoinSettings();
                                                    configurationSetInstance.DomainJoin = domainJoinInstance;
                                                    
                                                    XElement credentialsElement = domainJoinElement.Element(XName.Get("Credentials", "http://schemas.microsoft.com/windowsazure"));
                                                    if (credentialsElement != null && credentialsElement.IsEmpty == false)
                                                    {
                                                        DomainJoinCredentials credentialsInstance = new DomainJoinCredentials();
                                                        domainJoinInstance.Credentials = credentialsInstance;
                                                        
                                                        XElement domainElement = credentialsElement.Element(XName.Get("Domain", "http://schemas.microsoft.com/windowsazure"));
                                                        if (domainElement != null && domainElement.IsEmpty == false)
                                                        {
                                                            string domainInstance = domainElement.Value;
                                                            credentialsInstance.Domain = domainInstance;
                                                        }
                                                        
                                                        XElement usernameElement = credentialsElement.Element(XName.Get("Username", "http://schemas.microsoft.com/windowsazure"));
                                                        if (usernameElement != null && usernameElement.IsEmpty == false)
                                                        {
                                                            string usernameInstance = usernameElement.Value;
                                                            credentialsInstance.UserName = usernameInstance;
                                                        }
                                                        
                                                        XElement passwordElement = credentialsElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                                        if (passwordElement != null && passwordElement.IsEmpty == false)
                                                        {
                                                            string passwordInstance = passwordElement.Value;
                                                            credentialsInstance.Password = passwordInstance;
                                                        }
                                                    }
                                                    
                                                    XElement joinDomainElement = domainJoinElement.Element(XName.Get("JoinDomain", "http://schemas.microsoft.com/windowsazure"));
                                                    if (joinDomainElement != null && joinDomainElement.IsEmpty == false)
                                                    {
                                                        string joinDomainInstance = joinDomainElement.Value;
                                                        domainJoinInstance.DomainToJoin = joinDomainInstance;
                                                    }
                                                    
                                                    XElement machineObjectOUElement = domainJoinElement.Element(XName.Get("MachineObjectOU", "http://schemas.microsoft.com/windowsazure"));
                                                    if (machineObjectOUElement != null && machineObjectOUElement.IsEmpty == false)
                                                    {
                                                        string machineObjectOUInstance = machineObjectOUElement.Value;
                                                        domainJoinInstance.LdapMachineObjectOU = machineObjectOUInstance;
                                                    }
                                                    
                                                    XElement provisioningElement = domainJoinElement.Element(XName.Get("Provisioning", "http://schemas.microsoft.com/windowsazure"));
                                                    if (provisioningElement != null && provisioningElement.IsEmpty == false)
                                                    {
                                                        DomainJoinProvisioning provisioningInstance = new DomainJoinProvisioning();
                                                        domainJoinInstance.Provisioning = provisioningInstance;
                                                        
                                                        XElement accountDataElement = provisioningElement.Element(XName.Get("AccountData", "http://schemas.microsoft.com/windowsazure"));
                                                        if (accountDataElement != null && accountDataElement.IsEmpty == false)
                                                        {
                                                            string accountDataInstance = accountDataElement.Value;
                                                            provisioningInstance.AccountData = accountDataInstance;
                                                        }
                                                    }
                                                }
                                                
                                                XElement storedCertificateSettingsSequenceElement = configurationSetsElement.Element(XName.Get("StoredCertificateSettings", "http://schemas.microsoft.com/windowsazure"));
                                                if (storedCertificateSettingsSequenceElement != null && storedCertificateSettingsSequenceElement.IsEmpty == false)
                                                {
                                                    foreach (XElement storedCertificateSettingsElement in storedCertificateSettingsSequenceElement.Elements(XName.Get("CertificateSetting", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        StoredCertificateSettings certificateSettingInstance = new StoredCertificateSettings();
                                                        configurationSetInstance.StoredCertificateSettings.Add(certificateSettingInstance);
                                                        
                                                        XElement storeLocationElement = storedCertificateSettingsElement.Element(XName.Get("StoreLocation", "http://schemas.microsoft.com/windowsazure"));
                                                        if (storeLocationElement != null && storeLocationElement.IsEmpty == false)
                                                        {
                                                        }
                                                        
                                                        XElement storeNameElement = storedCertificateSettingsElement.Element(XName.Get("StoreName", "http://schemas.microsoft.com/windowsazure"));
                                                        if (storeNameElement != null && storeNameElement.IsEmpty == false)
                                                        {
                                                            string storeNameInstance = storeNameElement.Value;
                                                            certificateSettingInstance.StoreName = storeNameInstance;
                                                        }
                                                        
                                                        XElement thumbprintElement = storedCertificateSettingsElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                        if (thumbprintElement != null && thumbprintElement.IsEmpty == false)
                                                        {
                                                            string thumbprintInstance = thumbprintElement.Value;
                                                            certificateSettingInstance.Thumbprint = thumbprintInstance;
                                                        }
                                                    }
                                                }
                                                
                                                XElement winRMElement = configurationSetsElement.Element(XName.Get("WinRM", "http://schemas.microsoft.com/windowsazure"));
                                                if (winRMElement != null && winRMElement.IsEmpty == false)
                                                {
                                                    WindowsRemoteManagementSettings winRMInstance = new WindowsRemoteManagementSettings();
                                                    configurationSetInstance.WindowsRemoteManagement = winRMInstance;
                                                    
                                                    XElement listenersSequenceElement = winRMElement.Element(XName.Get("Listeners", "http://schemas.microsoft.com/windowsazure"));
                                                    if (listenersSequenceElement != null && listenersSequenceElement.IsEmpty == false)
                                                    {
                                                        foreach (XElement listenersElement in listenersSequenceElement.Elements(XName.Get("Listener", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            WindowsRemoteManagementListener listenerInstance = new WindowsRemoteManagementListener();
                                                            winRMInstance.Listeners.Add(listenerInstance);
                                                            
                                                            XElement protocolElement4 = listenersElement.Element(XName.Get("Protocol", "http://schemas.microsoft.com/windowsazure"));
                                                            if (protocolElement4 != null && protocolElement4.IsEmpty == false)
                                                            {
                                                                VirtualMachineWindowsRemoteManagementListenerType protocolInstance4 = (VirtualMachineWindowsRemoteManagementListenerType)Enum.Parse(typeof(VirtualMachineWindowsRemoteManagementListenerType), protocolElement4.Value, true);
                                                                listenerInstance.ListenerType = protocolInstance4;
                                                            }
                                                            
                                                            XElement certificateThumbprintElement = listenersElement.Element(XName.Get("CertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                                            if (certificateThumbprintElement != null && certificateThumbprintElement.IsEmpty == false)
                                                            {
                                                                string certificateThumbprintInstance = certificateThumbprintElement.Value;
                                                                listenerInstance.CertificateThumbprint = certificateThumbprintInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                XElement adminUsernameElement = configurationSetsElement.Element(XName.Get("AdminUsername", "http://schemas.microsoft.com/windowsazure"));
                                                if (adminUsernameElement != null && adminUsernameElement.IsEmpty == false)
                                                {
                                                    string adminUsernameInstance = adminUsernameElement.Value;
                                                    configurationSetInstance.AdminUserName = adminUsernameInstance;
                                                }
                                                
                                                XElement hostNameElement2 = configurationSetsElement.Element(XName.Get("HostName", "http://schemas.microsoft.com/windowsazure"));
                                                if (hostNameElement2 != null && hostNameElement2.IsEmpty == false)
                                                {
                                                    string hostNameInstance2 = hostNameElement2.Value;
                                                    configurationSetInstance.HostName = hostNameInstance2;
                                                }
                                                
                                                XElement userNameElement = configurationSetsElement.Element(XName.Get("UserName", "http://schemas.microsoft.com/windowsazure"));
                                                if (userNameElement != null && userNameElement.IsEmpty == false)
                                                {
                                                    string userNameInstance = userNameElement.Value;
                                                    configurationSetInstance.UserName = userNameInstance;
                                                }
                                                
                                                XElement userPasswordElement = configurationSetsElement.Element(XName.Get("UserPassword", "http://schemas.microsoft.com/windowsazure"));
                                                if (userPasswordElement != null && userPasswordElement.IsEmpty == false)
                                                {
                                                    string userPasswordInstance = userPasswordElement.Value;
                                                    configurationSetInstance.UserPassword = userPasswordInstance;
                                                }
                                                
                                                XElement disableSshPasswordAuthenticationElement = configurationSetsElement.Element(XName.Get("DisableSshPasswordAuthentication", "http://schemas.microsoft.com/windowsazure"));
                                                if (disableSshPasswordAuthenticationElement != null && disableSshPasswordAuthenticationElement.IsEmpty == false && string.IsNullOrEmpty(disableSshPasswordAuthenticationElement.Value) == false)
                                                {
                                                    bool disableSshPasswordAuthenticationInstance = bool.Parse(disableSshPasswordAuthenticationElement.Value);
                                                    configurationSetInstance.DisableSshPasswordAuthentication = disableSshPasswordAuthenticationInstance;
                                                }
                                                
                                                XElement sSHElement = configurationSetsElement.Element(XName.Get("SSH", "http://schemas.microsoft.com/windowsazure"));
                                                if (sSHElement != null && sSHElement.IsEmpty == false)
                                                {
                                                    SshSettings sSHInstance = new SshSettings();
                                                    configurationSetInstance.SshSettings = sSHInstance;
                                                    
                                                    XElement publicKeysSequenceElement = sSHElement.Element(XName.Get("PublicKeys", "http://schemas.microsoft.com/windowsazure"));
                                                    if (publicKeysSequenceElement != null && publicKeysSequenceElement.IsEmpty == false)
                                                    {
                                                        foreach (XElement publicKeysElement in publicKeysSequenceElement.Elements(XName.Get("PublicKey", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            SshSettingPublicKey publicKeyInstance = new SshSettingPublicKey();
                                                            sSHInstance.PublicKeys.Add(publicKeyInstance);
                                                            
                                                            XElement fingerprintElement = publicKeysElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                            if (fingerprintElement != null && fingerprintElement.IsEmpty == false)
                                                            {
                                                                string fingerprintInstance = fingerprintElement.Value;
                                                                publicKeyInstance.Fingerprint = fingerprintInstance;
                                                            }
                                                            
                                                            XElement pathElement2 = publicKeysElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                            if (pathElement2 != null && pathElement2.IsEmpty == false)
                                                            {
                                                                string pathInstance2 = pathElement2.Value;
                                                                publicKeyInstance.Path = pathInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    XElement keyPairsSequenceElement = sSHElement.Element(XName.Get("KeyPairs", "http://schemas.microsoft.com/windowsazure"));
                                                    if (keyPairsSequenceElement != null && keyPairsSequenceElement.IsEmpty == false)
                                                    {
                                                        foreach (XElement keyPairsElement in keyPairsSequenceElement.Elements(XName.Get("KeyPair", "http://schemas.microsoft.com/windowsazure")))
                                                        {
                                                            SshSettingKeyPair keyPairInstance = new SshSettingKeyPair();
                                                            sSHInstance.KeyPairs.Add(keyPairInstance);
                                                            
                                                            XElement fingerprintElement2 = keyPairsElement.Element(XName.Get("Fingerprint", "http://schemas.microsoft.com/windowsazure"));
                                                            if (fingerprintElement2 != null && fingerprintElement2.IsEmpty == false)
                                                            {
                                                                string fingerprintInstance2 = fingerprintElement2.Value;
                                                                keyPairInstance.Fingerprint = fingerprintInstance2;
                                                            }
                                                            
                                                            XElement pathElement3 = keyPairsElement.Element(XName.Get("Path", "http://schemas.microsoft.com/windowsazure"));
                                                            if (pathElement3 != null && pathElement3.IsEmpty == false)
                                                            {
                                                                string pathInstance3 = pathElement3.Value;
                                                                keyPairInstance.Path = pathInstance3;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        XElement resourceExtensionReferencesSequenceElement = roleListElement.Element(XName.Get("ResourceExtensionReferences", "http://schemas.microsoft.com/windowsazure"));
                                        if (resourceExtensionReferencesSequenceElement != null && resourceExtensionReferencesSequenceElement.IsEmpty == false)
                                        {
                                            foreach (XElement resourceExtensionReferencesElement in resourceExtensionReferencesSequenceElement.Elements(XName.Get("ResourceExtensionReference", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                ResourceExtensionReference resourceExtensionReferenceInstance = new ResourceExtensionReference();
                                                roleInstance.ResourceExtensionReferences.Add(resourceExtensionReferenceInstance);
                                                
                                                XElement referenceNameElement = resourceExtensionReferencesElement.Element(XName.Get("ReferenceName", "http://schemas.microsoft.com/windowsazure"));
                                                if (referenceNameElement != null && referenceNameElement.IsEmpty == false)
                                                {
                                                    string referenceNameInstance = referenceNameElement.Value;
                                                    resourceExtensionReferenceInstance.ReferenceName = referenceNameInstance;
                                                }
                                                
                                                XElement publisherElement = resourceExtensionReferencesElement.Element(XName.Get("Publisher", "http://schemas.microsoft.com/windowsazure"));
                                                if (publisherElement != null && publisherElement.IsEmpty == false)
                                                {
                                                    string publisherInstance = publisherElement.Value;
                                                    resourceExtensionReferenceInstance.Publisher = publisherInstance;
                                                }
                                                
                                                XElement nameElement4 = resourceExtensionReferencesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                                if (nameElement4 != null && nameElement4.IsEmpty == false)
                                                {
                                                    string nameInstance4 = nameElement4.Value;
                                                    resourceExtensionReferenceInstance.Name = nameInstance4;
                                                }
                                                
                                                XElement versionElement = resourceExtensionReferencesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                                                if (versionElement != null && versionElement.IsEmpty == false)
                                                {
                                                    string versionInstance = versionElement.Value;
                                                    resourceExtensionReferenceInstance.Version = versionInstance;
                                                }
                                                
                                                XElement resourceExtensionParameterValuesSequenceElement = resourceExtensionReferencesElement.Element(XName.Get("ResourceExtensionParameterValues", "http://schemas.microsoft.com/windowsazure"));
                                                if (resourceExtensionParameterValuesSequenceElement != null && resourceExtensionParameterValuesSequenceElement.IsEmpty == false)
                                                {
                                                    foreach (XElement resourceExtensionParameterValuesElement in resourceExtensionParameterValuesSequenceElement.Elements(XName.Get("ResourceExtensionParameterValue", "http://schemas.microsoft.com/windowsazure")))
                                                    {
                                                        ResourceExtensionParameterValue resourceExtensionParameterValueInstance = new ResourceExtensionParameterValue();
                                                        resourceExtensionReferenceInstance.ResourceExtensionParameterValues.Add(resourceExtensionParameterValueInstance);
                                                        
                                                        XElement keyElement = resourceExtensionParameterValuesElement.Element(XName.Get("Key", "http://schemas.microsoft.com/windowsazure"));
                                                        if (keyElement != null && keyElement.IsEmpty == false)
                                                        {
                                                            string keyInstance = keyElement.Value;
                                                            resourceExtensionParameterValueInstance.Key = keyInstance;
                                                        }
                                                        
                                                        XElement valueElement = resourceExtensionParameterValuesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                                                        if (valueElement != null && valueElement.IsEmpty == false)
                                                        {
                                                            string valueInstance = TypeConversion.FromBase64String(valueElement.Value);
                                                            resourceExtensionParameterValueInstance.Value = valueInstance;
                                                        }
                                                        
                                                        XElement typeElement = resourceExtensionParameterValuesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                                        if (typeElement != null && typeElement.IsEmpty == false)
                                                        {
                                                            string typeInstance = typeElement.Value;
                                                            resourceExtensionParameterValueInstance.Type = typeInstance;
                                                        }
                                                    }
                                                }
                                                
                                                XElement stateElement = resourceExtensionReferencesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                                                if (stateElement != null && stateElement.IsEmpty == false)
                                                {
                                                    string stateInstance = stateElement.Value;
                                                    resourceExtensionReferenceInstance.State = stateInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement availabilitySetNameElement = roleListElement.Element(XName.Get("AvailabilitySetName", "http://schemas.microsoft.com/windowsazure"));
                                        if (availabilitySetNameElement != null && availabilitySetNameElement.IsEmpty == false)
                                        {
                                            string availabilitySetNameInstance = availabilitySetNameElement.Value;
                                            roleInstance.AvailabilitySetName = availabilitySetNameInstance;
                                        }
                                        
                                        XElement dataVirtualHardDisksSequenceElement = roleListElement.Element(XName.Get("DataVirtualHardDisks", "http://schemas.microsoft.com/windowsazure"));
                                        if (dataVirtualHardDisksSequenceElement != null && dataVirtualHardDisksSequenceElement.IsEmpty == false)
                                        {
                                            foreach (XElement dataVirtualHardDisksElement in dataVirtualHardDisksSequenceElement.Elements(XName.Get("DataVirtualHardDisk", "http://schemas.microsoft.com/windowsazure")))
                                            {
                                                DataVirtualHardDisk dataVirtualHardDiskInstance = new DataVirtualHardDisk();
                                                roleInstance.DataVirtualHardDisks.Add(dataVirtualHardDiskInstance);
                                                
                                                XElement hostCachingElement = dataVirtualHardDisksElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                                if (hostCachingElement != null && hostCachingElement.IsEmpty == false && string.IsNullOrEmpty(hostCachingElement.Value) == false)
                                                {
                                                    VirtualHardDiskHostCaching hostCachingInstance = (VirtualHardDiskHostCaching)Enum.Parse(typeof(VirtualHardDiskHostCaching), hostCachingElement.Value, true);
                                                    dataVirtualHardDiskInstance.HostCaching = hostCachingInstance;
                                                }
                                                
                                                XElement diskLabelElement = dataVirtualHardDisksElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                                if (diskLabelElement != null && diskLabelElement.IsEmpty == false)
                                                {
                                                    string diskLabelInstance = diskLabelElement.Value;
                                                    dataVirtualHardDiskInstance.DiskLabel = diskLabelInstance;
                                                }
                                                
                                                XElement diskNameElement = dataVirtualHardDisksElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                                if (diskNameElement != null && diskNameElement.IsEmpty == false)
                                                {
                                                    string diskNameInstance = diskNameElement.Value;
                                                    dataVirtualHardDiskInstance.Name = diskNameInstance;
                                                }
                                                
                                                XElement lunElement = dataVirtualHardDisksElement.Element(XName.Get("Lun", "http://schemas.microsoft.com/windowsazure"));
                                                if (lunElement != null && lunElement.IsEmpty == false && string.IsNullOrEmpty(lunElement.Value) == false)
                                                {
                                                    int lunInstance = int.Parse(lunElement.Value, CultureInfo.InvariantCulture);
                                                    dataVirtualHardDiskInstance.LogicalUnitNumber = lunInstance;
                                                }
                                                
                                                XElement logicalDiskSizeInGBElement = dataVirtualHardDisksElement.Element(XName.Get("LogicalDiskSizeInGB", "http://schemas.microsoft.com/windowsazure"));
                                                if (logicalDiskSizeInGBElement != null && logicalDiskSizeInGBElement.IsEmpty == false)
                                                {
                                                    int logicalDiskSizeInGBInstance = int.Parse(logicalDiskSizeInGBElement.Value, CultureInfo.InvariantCulture);
                                                    dataVirtualHardDiskInstance.LogicalDiskSizeInGB = logicalDiskSizeInGBInstance;
                                                }
                                                
                                                XElement mediaLinkElement = dataVirtualHardDisksElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                                if (mediaLinkElement != null && mediaLinkElement.IsEmpty == false)
                                                {
                                                    Uri mediaLinkInstance = TypeConversion.TryParseUri(mediaLinkElement.Value);
                                                    dataVirtualHardDiskInstance.MediaLink = mediaLinkInstance;
                                                }
                                            }
                                        }
                                        
                                        XElement labelElement2 = roleListElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                        if (labelElement2 != null && labelElement2.IsEmpty == false)
                                        {
                                            string labelInstance2 = labelElement2.Value;
                                            roleInstance.Label = labelInstance2;
                                        }
                                        
                                        XElement oSVirtualHardDiskElement = roleListElement.Element(XName.Get("OSVirtualHardDisk", "http://schemas.microsoft.com/windowsazure"));
                                        if (oSVirtualHardDiskElement != null && oSVirtualHardDiskElement.IsEmpty == false)
                                        {
                                            OSVirtualHardDisk oSVirtualHardDiskInstance = new OSVirtualHardDisk();
                                            roleInstance.OSVirtualHardDisk = oSVirtualHardDiskInstance;
                                            
                                            XElement hostCachingElement2 = oSVirtualHardDiskElement.Element(XName.Get("HostCaching", "http://schemas.microsoft.com/windowsazure"));
                                            if (hostCachingElement2 != null && hostCachingElement2.IsEmpty == false && string.IsNullOrEmpty(hostCachingElement2.Value) == false)
                                            {
                                                VirtualHardDiskHostCaching hostCachingInstance2 = (VirtualHardDiskHostCaching)Enum.Parse(typeof(VirtualHardDiskHostCaching), hostCachingElement2.Value, true);
                                                oSVirtualHardDiskInstance.HostCaching = hostCachingInstance2;
                                            }
                                            
                                            XElement diskLabelElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskLabel", "http://schemas.microsoft.com/windowsazure"));
                                            if (diskLabelElement2 != null && diskLabelElement2.IsEmpty == false)
                                            {
                                                string diskLabelInstance2 = diskLabelElement2.Value;
                                                oSVirtualHardDiskInstance.Label = diskLabelInstance2;
                                            }
                                            
                                            XElement diskNameElement2 = oSVirtualHardDiskElement.Element(XName.Get("DiskName", "http://schemas.microsoft.com/windowsazure"));
                                            if (diskNameElement2 != null && diskNameElement2.IsEmpty == false)
                                            {
                                                string diskNameInstance2 = diskNameElement2.Value;
                                                oSVirtualHardDiskInstance.Name = diskNameInstance2;
                                            }
                                            
                                            XElement mediaLinkElement2 = oSVirtualHardDiskElement.Element(XName.Get("MediaLink", "http://schemas.microsoft.com/windowsazure"));
                                            if (mediaLinkElement2 != null && mediaLinkElement2.IsEmpty == false)
                                            {
                                                Uri mediaLinkInstance2 = TypeConversion.TryParseUri(mediaLinkElement2.Value);
                                                oSVirtualHardDiskInstance.MediaLink = mediaLinkInstance2;
                                            }
                                            
                                            XElement sourceImageNameElement = oSVirtualHardDiskElement.Element(XName.Get("SourceImageName", "http://schemas.microsoft.com/windowsazure"));
                                            if (sourceImageNameElement != null && sourceImageNameElement.IsEmpty == false)
                                            {
                                                string sourceImageNameInstance = sourceImageNameElement.Value;
                                                oSVirtualHardDiskInstance.SourceImageName = sourceImageNameInstance;
                                            }
                                            
                                            XElement osElement = oSVirtualHardDiskElement.Element(XName.Get("OS", "http://schemas.microsoft.com/windowsazure"));
                                            if (osElement != null && osElement.IsEmpty == false)
                                            {
                                                string osInstance = osElement.Value;
                                                oSVirtualHardDiskInstance.OperatingSystem = osInstance;
                                            }
                                        }
                                        
                                        XElement roleSizeElement = roleListElement.Element(XName.Get("RoleSize", "http://schemas.microsoft.com/windowsazure"));
                                        if (roleSizeElement != null && roleSizeElement.IsEmpty == false)
                                        {
                                            string roleSizeInstance = roleSizeElement.Value;
                                            roleInstance.RoleSize = roleSizeInstance;
                                        }
                                        
                                        XElement provisionGuestAgentElement = roleListElement.Element(XName.Get("ProvisionGuestAgent", "http://schemas.microsoft.com/windowsazure"));
                                        if (provisionGuestAgentElement != null && provisionGuestAgentElement.IsEmpty == false && string.IsNullOrEmpty(provisionGuestAgentElement.Value) == false)
                                        {
                                            bool provisionGuestAgentInstance = bool.Parse(provisionGuestAgentElement.Value);
                                            roleInstance.ProvisionGuestAgent = provisionGuestAgentInstance;
                                        }
                                        
                                        XElement defaultWinRmCertificateThumbprintElement = roleListElement.Element(XName.Get("DefaultWinRmCertificateThumbprint", "http://schemas.microsoft.com/windowsazure"));
                                        if (defaultWinRmCertificateThumbprintElement != null && defaultWinRmCertificateThumbprintElement.IsEmpty == false)
                                        {
                                            string defaultWinRmCertificateThumbprintInstance = defaultWinRmCertificateThumbprintElement.Value;
                                            roleInstance.DefaultWinRmCertificateThumbprint = defaultWinRmCertificateThumbprintInstance;
                                        }
                                    }
                                }
                                
                                XElement sdkVersionElement = deploymentsElement.Element(XName.Get("SdkVersion", "http://schemas.microsoft.com/windowsazure"));
                                if (sdkVersionElement != null && sdkVersionElement.IsEmpty == false)
                                {
                                    string sdkVersionInstance = sdkVersionElement.Value;
                                    deploymentInstance.SdkVersion = sdkVersionInstance;
                                }
                                
                                XElement lockedElement = deploymentsElement.Element(XName.Get("Locked", "http://schemas.microsoft.com/windowsazure"));
                                if (lockedElement != null && lockedElement.IsEmpty == false)
                                {
                                    bool lockedInstance = bool.Parse(lockedElement.Value);
                                    deploymentInstance.Locked = lockedInstance;
                                }
                                
                                XElement rollbackAllowedElement = deploymentsElement.Element(XName.Get("RollbackAllowed", "http://schemas.microsoft.com/windowsazure"));
                                if (rollbackAllowedElement != null && rollbackAllowedElement.IsEmpty == false)
                                {
                                    bool rollbackAllowedInstance = bool.Parse(rollbackAllowedElement.Value);
                                    deploymentInstance.RollbackAllowed = rollbackAllowedInstance;
                                }
                                
                                XElement createdTimeElement = deploymentsElement.Element(XName.Get("CreatedTime", "http://schemas.microsoft.com/windowsazure"));
                                if (createdTimeElement != null && createdTimeElement.IsEmpty == false)
                                {
                                    DateTime createdTimeInstance = DateTime.Parse(createdTimeElement.Value, CultureInfo.InvariantCulture);
                                    deploymentInstance.CreatedTime = createdTimeInstance;
                                }
                                
                                XElement lastModifiedTimeElement = deploymentsElement.Element(XName.Get("LastModifiedTime", "http://schemas.microsoft.com/windowsazure"));
                                if (lastModifiedTimeElement != null && lastModifiedTimeElement.IsEmpty == false)
                                {
                                    string lastModifiedTimeInstance = lastModifiedTimeElement.Value;
                                    deploymentInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                XElement virtualNetworkNameElement = deploymentsElement.Element(XName.Get("VirtualNetworkName", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualNetworkNameElement != null && virtualNetworkNameElement.IsEmpty == false)
                                {
                                    string virtualNetworkNameInstance = virtualNetworkNameElement.Value;
                                    deploymentInstance.VirtualNetworkName = virtualNetworkNameInstance;
                                }
                                
                                XElement extendedPropertiesSequenceElement = deploymentsElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.IsEmpty == false)
                                {
                                    foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        deploymentInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                    }
                                }
                                
                                XElement persistentVMDowntimeElement = deploymentsElement.Element(XName.Get("PersistentVMDowntime", "http://schemas.microsoft.com/windowsazure"));
                                if (persistentVMDowntimeElement != null && persistentVMDowntimeElement.IsEmpty == false)
                                {
                                    PersistentVMDowntime persistentVMDowntimeInstance = new PersistentVMDowntime();
                                    deploymentInstance.PersistentVMDowntime = persistentVMDowntimeInstance;
                                    
                                    XElement startTimeElement = persistentVMDowntimeElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (startTimeElement != null && startTimeElement.IsEmpty == false)
                                    {
                                        DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                        persistentVMDowntimeInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    XElement endTimeElement = persistentVMDowntimeElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (endTimeElement != null && endTimeElement.IsEmpty == false)
                                    {
                                        DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture);
                                        persistentVMDowntimeInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    XElement statusElement2 = persistentVMDowntimeElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                    if (statusElement2 != null && statusElement2.IsEmpty == false)
                                    {
                                        string statusInstance2 = statusElement2.Value;
                                        persistentVMDowntimeInstance.Status = statusInstance2;
                                    }
                                }
                                
                                XElement virtualIPsSequenceElement = deploymentsElement.Element(XName.Get("VirtualIPs", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualIPsSequenceElement != null && virtualIPsSequenceElement.IsEmpty == false)
                                {
                                    foreach (XElement virtualIPsElement in virtualIPsSequenceElement.Elements(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        VirtualIPAddress virtualIPInstance = new VirtualIPAddress();
                                        deploymentInstance.VirtualIPAddresses.Add(virtualIPInstance);
                                        
                                        XElement addressElement = virtualIPsElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                        if (addressElement != null && addressElement.IsEmpty == false)
                                        {
                                            string addressInstance = addressElement.Value;
                                            virtualIPInstance.Address = addressInstance;
                                        }
                                        
                                        XElement nameElement5 = virtualIPsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                        if (nameElement5 != null && nameElement5.IsEmpty == false)
                                        {
                                            string nameInstance5 = nameElement5.Value;
                                            virtualIPInstance.Name = nameInstance5;
                                        }
                                        
                                        XElement isDnsProgrammedElement = virtualIPsElement.Element(XName.Get("IsDnsProgrammed", "http://schemas.microsoft.com/windowsazure"));
                                        if (isDnsProgrammedElement != null && isDnsProgrammedElement.IsEmpty == false && string.IsNullOrEmpty(isDnsProgrammedElement.Value) == false)
                                        {
                                            bool isDnsProgrammedInstance = bool.Parse(isDnsProgrammedElement.Value);
                                            virtualIPInstance.IsDnsProgrammed = isDnsProgrammedInstance;
                                        }
                                    }
                                }
                                
                                XElement dnsElement = deploymentsElement.Element(XName.Get("Dns", "http://schemas.microsoft.com/windowsazure"));
                                if (dnsElement != null && dnsElement.IsEmpty == false)
                                {
                                    DnsSettings dnsInstance = new DnsSettings();
                                    deploymentInstance.DnsSettings = dnsInstance;
                                    
                                    XElement dnsServersSequenceElement = dnsElement.Element(XName.Get("DnsServers", "http://schemas.microsoft.com/windowsazure"));
                                    if (dnsServersSequenceElement != null && dnsServersSequenceElement.IsEmpty == false)
                                    {
                                        foreach (XElement dnsServersElement in dnsServersSequenceElement.Elements(XName.Get("DnsServer", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            DnsServer dnsServerInstance = new DnsServer();
                                            dnsInstance.DnsServers.Add(dnsServerInstance);
                                            
                                            XElement nameElement6 = dnsServersElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                            if (nameElement6 != null && nameElement6.IsEmpty == false)
                                            {
                                                string nameInstance6 = nameElement6.Value;
                                                dnsServerInstance.Name = nameInstance6;
                                            }
                                            
                                            XElement addressElement2 = dnsServersElement.Element(XName.Get("Address", "http://schemas.microsoft.com/windowsazure"));
                                            if (addressElement2 != null && addressElement2.IsEmpty == false)
                                            {
                                                string addressInstance2 = addressElement2.Value;
                                                dnsServerInstance.Address = addressInstance2;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        XElement urlElement2 = hostedServiceElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                        if (urlElement2 != null && urlElement2.IsEmpty == false)
                        {
                            Uri urlInstance2 = TypeConversion.TryParseUri(urlElement2.Value);
                            result.Uri = urlInstance2;
                        }
                        
                        XElement serviceNameElement = hostedServiceElement.Element(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                        if (serviceNameElement != null && serviceNameElement.IsEmpty == false)
                        {
                            string serviceNameInstance = serviceNameElement.Value;
                            result.ServiceName = serviceNameInstance;
                        }
                        
                        XElement hostedServicePropertiesElement = hostedServiceElement.Element(XName.Get("HostedServiceProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (hostedServicePropertiesElement != null && hostedServicePropertiesElement.IsEmpty == false)
                        {
                            HostedServiceProperties hostedServicePropertiesInstance = new HostedServiceProperties();
                            result.Properties = hostedServicePropertiesInstance;
                            
                            XElement descriptionElement2 = hostedServicePropertiesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement2 != null && descriptionElement2.IsEmpty == false)
                            {
                                string descriptionInstance2 = descriptionElement2.Value;
                                hostedServicePropertiesInstance.Description = descriptionInstance2;
                            }
                            
                            XElement affinityGroupElement = hostedServicePropertiesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                            if (affinityGroupElement != null && affinityGroupElement.IsEmpty == false)
                            {
                                string affinityGroupInstance = affinityGroupElement.Value;
                                hostedServicePropertiesInstance.AffinityGroup = affinityGroupInstance;
                            }
                            
                            XElement locationElement = hostedServicePropertiesElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                            if (locationElement != null && locationElement.IsEmpty == false)
                            {
                                string locationInstance = locationElement.Value;
                                hostedServicePropertiesInstance.Location = locationInstance;
                            }
                            
                            XElement labelElement3 = hostedServicePropertiesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement3 != null && labelElement3.IsEmpty == false)
                            {
                                string labelInstance3 = TypeConversion.FromBase64String(labelElement3.Value);
                                hostedServicePropertiesInstance.Label = labelInstance3;
                            }
                            
                            XElement statusElement3 = hostedServicePropertiesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement3 != null && statusElement3.IsEmpty == false)
                            {
                                HostedServiceStatus statusInstance3 = (HostedServiceStatus)Enum.Parse(typeof(HostedServiceStatus), statusElement3.Value, true);
                                hostedServicePropertiesInstance.Status = statusInstance3;
                            }
                            
                            XElement dateCreatedElement = hostedServicePropertiesElement.Element(XName.Get("DateCreated", "http://schemas.microsoft.com/windowsazure"));
                            if (dateCreatedElement != null && dateCreatedElement.IsEmpty == false)
                            {
                                DateTime dateCreatedInstance = DateTime.Parse(dateCreatedElement.Value, CultureInfo.InvariantCulture);
                                hostedServicePropertiesInstance.DateCreated = dateCreatedInstance;
                            }
                            
                            XElement dateLastModifiedElement = hostedServicePropertiesElement.Element(XName.Get("DateLastModified", "http://schemas.microsoft.com/windowsazure"));
                            if (dateLastModifiedElement != null && dateLastModifiedElement.IsEmpty == false)
                            {
                                DateTime dateLastModifiedInstance = DateTime.Parse(dateLastModifiedElement.Value, CultureInfo.InvariantCulture);
                                hostedServicePropertiesInstance.DateLastModified = dateLastModifiedInstance;
                            }
                            
                            XElement extendedPropertiesSequenceElement2 = hostedServicePropertiesElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                            if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.IsEmpty == false)
                            {
                                foreach (XElement extendedPropertiesElement2 in extendedPropertiesSequenceElement2.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string extendedPropertiesKey2 = extendedPropertiesElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string extendedPropertiesValue2 = extendedPropertiesElement2.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    hostedServicePropertiesInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get Extension operation retrieves information about a specified
        /// extension that was added to a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169557.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='extensionId'>
        /// The identifier that was assigned to the extension when it was added
        /// to the cloud service
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Extension operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Compute.Models.HostedServiceGetExtensionResponse> GetExtensionAsync(string serviceName, string extensionId, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (extensionId == null)
            {
                throw new ArgumentNullException("extensionId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("extensionId", extensionId);
                Tracing.Enter(invocationId, this, "GetExtensionAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/extensions/" + extensionId;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceGetExtensionResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new HostedServiceGetExtensionResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement extensionElement = responseDoc.Element(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                    if (extensionElement != null && extensionElement.IsEmpty == false)
                    {
                        XElement providerNameSpaceElement = extensionElement.Element(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                        if (providerNameSpaceElement != null && providerNameSpaceElement.IsEmpty == false)
                        {
                            string providerNameSpaceInstance = providerNameSpaceElement.Value;
                            result.ProviderNamespace = providerNameSpaceInstance;
                        }
                        
                        XElement typeElement = extensionElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                        if (typeElement != null && typeElement.IsEmpty == false)
                        {
                            string typeInstance = typeElement.Value;
                            result.Type = typeInstance;
                        }
                        
                        XElement idElement = extensionElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null && idElement.IsEmpty == false)
                        {
                            string idInstance = idElement.Value;
                            result.Id = idInstance;
                        }
                        
                        XElement versionElement = extensionElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                        if (versionElement != null && versionElement.IsEmpty == false)
                        {
                            string versionInstance = versionElement.Value;
                            result.Version = versionInstance;
                        }
                        
                        XElement thumbprintElement = extensionElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                        if (thumbprintElement != null && thumbprintElement.IsEmpty == false)
                        {
                            string thumbprintInstance = thumbprintElement.Value;
                            result.Thumbprint = thumbprintInstance;
                        }
                        
                        XElement thumbprintAlgorithmElement = extensionElement.Element(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                        if (thumbprintAlgorithmElement != null && thumbprintAlgorithmElement.IsEmpty == false)
                        {
                            string thumbprintAlgorithmInstance = thumbprintAlgorithmElement.Value;
                            result.ThumbprintAlgorithm = thumbprintAlgorithmInstance;
                        }
                        
                        XElement publicConfigurationElement = extensionElement.Element(XName.Get("PublicConfiguration", "http://schemas.microsoft.com/windowsazure"));
                        if (publicConfigurationElement != null && publicConfigurationElement.IsEmpty == false)
                        {
                            string publicConfigurationInstance = TypeConversion.FromBase64String(publicConfigurationElement.Value);
                            result.PublicConfiguration = publicConfigurationInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Hosted Services operation lists the cloud services
        /// available under the current subscription.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460781.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Hosted Service operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Compute.Models.HostedServiceListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new HostedServiceListResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement hostedServicesSequenceElement = responseDoc.Element(XName.Get("HostedServices", "http://schemas.microsoft.com/windowsazure"));
                    if (hostedServicesSequenceElement != null && hostedServicesSequenceElement.IsEmpty == false)
                    {
                        foreach (XElement hostedServicesElement in hostedServicesSequenceElement.Elements(XName.Get("HostedService", "http://schemas.microsoft.com/windowsazure")))
                        {
                            HostedServiceListResponse.HostedService hostedServiceInstance = new HostedServiceListResponse.HostedService();
                            result.HostedServices.Add(hostedServiceInstance);
                            
                            XElement urlElement = hostedServicesElement.Element(XName.Get("Url", "http://schemas.microsoft.com/windowsazure"));
                            if (urlElement != null && urlElement.IsEmpty == false)
                            {
                                Uri urlInstance = TypeConversion.TryParseUri(urlElement.Value);
                                hostedServiceInstance.Uri = urlInstance;
                            }
                            
                            XElement serviceNameElement = hostedServicesElement.Element(XName.Get("ServiceName", "http://schemas.microsoft.com/windowsazure"));
                            if (serviceNameElement != null && serviceNameElement.IsEmpty == false)
                            {
                                string serviceNameInstance = serviceNameElement.Value;
                                hostedServiceInstance.ServiceName = serviceNameInstance;
                            }
                            
                            XElement hostedServicePropertiesElement = hostedServicesElement.Element(XName.Get("HostedServiceProperties", "http://schemas.microsoft.com/windowsazure"));
                            if (hostedServicePropertiesElement != null && hostedServicePropertiesElement.IsEmpty == false)
                            {
                                HostedServiceProperties hostedServicePropertiesInstance = new HostedServiceProperties();
                                hostedServiceInstance.Properties = hostedServicePropertiesInstance;
                                
                                XElement descriptionElement = hostedServicePropertiesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                                if (descriptionElement != null && descriptionElement.IsEmpty == false)
                                {
                                    string descriptionInstance = descriptionElement.Value;
                                    hostedServicePropertiesInstance.Description = descriptionInstance;
                                }
                                
                                XElement affinityGroupElement = hostedServicePropertiesElement.Element(XName.Get("AffinityGroup", "http://schemas.microsoft.com/windowsazure"));
                                if (affinityGroupElement != null && affinityGroupElement.IsEmpty == false)
                                {
                                    string affinityGroupInstance = affinityGroupElement.Value;
                                    hostedServicePropertiesInstance.AffinityGroup = affinityGroupInstance;
                                }
                                
                                XElement locationElement = hostedServicePropertiesElement.Element(XName.Get("Location", "http://schemas.microsoft.com/windowsazure"));
                                if (locationElement != null && locationElement.IsEmpty == false)
                                {
                                    string locationInstance = locationElement.Value;
                                    hostedServicePropertiesInstance.Location = locationInstance;
                                }
                                
                                XElement labelElement = hostedServicePropertiesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                                if (labelElement != null && labelElement.IsEmpty == false)
                                {
                                    string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                                    hostedServicePropertiesInstance.Label = labelInstance;
                                }
                                
                                XElement statusElement = hostedServicePropertiesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                                if (statusElement != null && statusElement.IsEmpty == false)
                                {
                                    HostedServiceStatus statusInstance = (HostedServiceStatus)Enum.Parse(typeof(HostedServiceStatus), statusElement.Value, true);
                                    hostedServicePropertiesInstance.Status = statusInstance;
                                }
                                
                                XElement dateCreatedElement = hostedServicePropertiesElement.Element(XName.Get("DateCreated", "http://schemas.microsoft.com/windowsazure"));
                                if (dateCreatedElement != null && dateCreatedElement.IsEmpty == false)
                                {
                                    DateTime dateCreatedInstance = DateTime.Parse(dateCreatedElement.Value, CultureInfo.InvariantCulture);
                                    hostedServicePropertiesInstance.DateCreated = dateCreatedInstance;
                                }
                                
                                XElement dateLastModifiedElement = hostedServicePropertiesElement.Element(XName.Get("DateLastModified", "http://schemas.microsoft.com/windowsazure"));
                                if (dateLastModifiedElement != null && dateLastModifiedElement.IsEmpty == false)
                                {
                                    DateTime dateLastModifiedInstance = DateTime.Parse(dateLastModifiedElement.Value, CultureInfo.InvariantCulture);
                                    hostedServicePropertiesInstance.DateLastModified = dateLastModifiedInstance;
                                }
                                
                                XElement extendedPropertiesSequenceElement = hostedServicePropertiesElement.Element(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.IsEmpty == false)
                                {
                                    foreach (XElement extendedPropertiesElement in extendedPropertiesSequenceElement.Elements(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string extendedPropertiesKey = extendedPropertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string extendedPropertiesValue = extendedPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        hostedServicePropertiesInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Available Extensions operation lists the extensions that
        /// are available to add to your cloud service. In Windows Azure, a
        /// process can run as an extension of a cloud service. For example,
        /// Remote Desktop Access or the Windows Azure Diagnostics Agent can
        /// run as extensions to the cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169559.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Available Extensions operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Compute.Models.HostedServiceListAvailableExtensionsResponse> ListAvailableExtensionsAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAvailableExtensionsAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/extensions";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceListAvailableExtensionsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new HostedServiceListAvailableExtensionsResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement extensionImagesSequenceElement = responseDoc.Element(XName.Get("ExtensionImages", "http://schemas.microsoft.com/windowsazure"));
                    if (extensionImagesSequenceElement != null && extensionImagesSequenceElement.IsEmpty == false)
                    {
                        foreach (XElement extensionImagesElement in extensionImagesSequenceElement.Elements(XName.Get("ExtensionImage", "http://schemas.microsoft.com/windowsazure")))
                        {
                            HostedServiceListAvailableExtensionsResponse.ExtensionImage extensionImageInstance = new HostedServiceListAvailableExtensionsResponse.ExtensionImage();
                            result.ExtensionImages.Add(extensionImageInstance);
                            
                            XElement providerNameSpaceElement = extensionImagesElement.Element(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                            if (providerNameSpaceElement != null && providerNameSpaceElement.IsEmpty == false)
                            {
                                string providerNameSpaceInstance = providerNameSpaceElement.Value;
                                extensionImageInstance.ProviderNamespace = providerNameSpaceInstance;
                            }
                            
                            XElement typeElement = extensionImagesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null && typeElement.IsEmpty == false)
                            {
                                string typeInstance = typeElement.Value;
                                extensionImageInstance.Type = typeInstance;
                            }
                            
                            XElement labelElement = extensionImagesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null && labelElement.IsEmpty == false)
                            {
                                string labelInstance = labelElement.Value;
                                extensionImageInstance.Label = labelInstance;
                            }
                            
                            XElement versionElement = extensionImagesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                            if (versionElement != null && versionElement.IsEmpty == false)
                            {
                                string versionInstance = versionElement.Value;
                                extensionImageInstance.Version = versionInstance;
                            }
                            
                            XElement descriptionElement = extensionImagesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null && descriptionElement.IsEmpty == false)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                extensionImageInstance.Description = descriptionInstance;
                            }
                            
                            XElement thumbprintAlgorithmElement = extensionImagesElement.Element(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                            if (thumbprintAlgorithmElement != null && thumbprintAlgorithmElement.IsEmpty == false)
                            {
                                string thumbprintAlgorithmInstance = thumbprintAlgorithmElement.Value;
                                extensionImageInstance.ThumbprintAlgorithm = thumbprintAlgorithmInstance;
                            }
                            
                            XElement hostingResourcesElement = extensionImagesElement.Element(XName.Get("HostingResources", "http://schemas.microsoft.com/windowsazure"));
                            if (hostingResourcesElement != null && hostingResourcesElement.IsEmpty == false)
                            {
                                string hostingResourcesInstance = hostingResourcesElement.Value;
                                extensionImageInstance.HostingResources = hostingResourcesInstance;
                            }
                            
                            XElement publicConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PublicConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                            if (publicConfigurationSchemaElement != null && publicConfigurationSchemaElement.IsEmpty == false)
                            {
                                string publicConfigurationSchemaInstance = TypeConversion.FromBase64String(publicConfigurationSchemaElement.Value);
                                extensionImageInstance.PublicConfigurationSchema = publicConfigurationSchemaInstance;
                            }
                            
                            XElement privateConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PrivateConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                            if (privateConfigurationSchemaElement != null && privateConfigurationSchemaElement.IsEmpty == false)
                            {
                                string privateConfigurationSchemaInstance = TypeConversion.FromBase64String(privateConfigurationSchemaElement.Value);
                                extensionImageInstance.PrivateConfigurationSchema = privateConfigurationSchemaInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Extensions operation lists all of the extensions that were
        /// added to a cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn169561.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Extensions operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Compute.Models.HostedServiceListExtensionsResponse> ListExtensionsAsync(string serviceName, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                Tracing.Enter(invocationId, this, "ListExtensionsAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName + "/extensions";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceListExtensionsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new HostedServiceListExtensionsResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement extensionsSequenceElement = responseDoc.Element(XName.Get("Extensions", "http://schemas.microsoft.com/windowsazure"));
                    if (extensionsSequenceElement != null && extensionsSequenceElement.IsEmpty == false)
                    {
                        foreach (XElement extensionsElement in extensionsSequenceElement.Elements(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure")))
                        {
                            HostedServiceListExtensionsResponse.Extension extensionInstance = new HostedServiceListExtensionsResponse.Extension();
                            result.Extensions.Add(extensionInstance);
                            
                            XElement providerNameSpaceElement = extensionsElement.Element(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                            if (providerNameSpaceElement != null && providerNameSpaceElement.IsEmpty == false)
                            {
                                string providerNameSpaceInstance = providerNameSpaceElement.Value;
                                extensionInstance.ProviderNamespace = providerNameSpaceInstance;
                            }
                            
                            XElement typeElement = extensionsElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null && typeElement.IsEmpty == false)
                            {
                                string typeInstance = typeElement.Value;
                                extensionInstance.Type = typeInstance;
                            }
                            
                            XElement idElement = extensionsElement.Element(XName.Get("Id", "http://schemas.microsoft.com/windowsazure"));
                            if (idElement != null && idElement.IsEmpty == false)
                            {
                                string idInstance = idElement.Value;
                                extensionInstance.Id = idInstance;
                            }
                            
                            XElement versionElement = extensionsElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                            if (versionElement != null && versionElement.IsEmpty == false)
                            {
                                string versionInstance = versionElement.Value;
                                extensionInstance.Version = versionInstance;
                            }
                            
                            XElement thumbprintElement = extensionsElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                            if (thumbprintElement != null && thumbprintElement.IsEmpty == false)
                            {
                                string thumbprintInstance = thumbprintElement.Value;
                                extensionInstance.Thumbprint = thumbprintInstance;
                            }
                            
                            XElement thumbprintAlgorithmElement = extensionsElement.Element(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                            if (thumbprintAlgorithmElement != null && thumbprintAlgorithmElement.IsEmpty == false)
                            {
                                string thumbprintAlgorithmInstance = thumbprintAlgorithmElement.Value;
                                extensionInstance.ThumbprintAlgorithm = thumbprintAlgorithmInstance;
                            }
                            
                            XElement publicConfigurationElement = extensionsElement.Element(XName.Get("PublicConfiguration", "http://schemas.microsoft.com/windowsazure"));
                            if (publicConfigurationElement != null && publicConfigurationElement.IsEmpty == false)
                            {
                                string publicConfigurationInstance = TypeConversion.FromBase64String(publicConfigurationElement.Value);
                                extensionInstance.PublicConfiguration = publicConfigurationInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Extension Versions operation lists the versions of an
        /// extension that are available to add to a cloud service. In Windows
        /// Azure, a process can run as an extension of a cloud service. For
        /// example, Remote Desktop Access or the Windows Azure Diagnostics
        /// Agent can run as extensions to the cloud service.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn495437.aspx
        /// for more information)
        /// </summary>
        /// <param name='providerNamespace'>
        /// The provider namespace.
        /// </param>
        /// <param name='extensionType'>
        /// The extension type name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Available Extensions operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.Compute.Models.HostedServiceListAvailableExtensionsResponse> ListExtensionVersionsAsync(string providerNamespace, string extensionType, CancellationToken cancellationToken)
        {
            // Validate
            if (providerNamespace == null)
            {
                throw new ArgumentNullException("providerNamespace");
            }
            if (extensionType == null)
            {
                throw new ArgumentNullException("extensionType");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("providerNamespace", providerNamespace);
                tracingParameters.Add("extensionType", extensionType);
                Tracing.Enter(invocationId, this, "ListExtensionVersionsAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/extensions/" + providerNamespace + "/" + extensionType;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HostedServiceListAvailableExtensionsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new HostedServiceListAvailableExtensionsResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement extensionImagesSequenceElement = responseDoc.Element(XName.Get("ExtensionImages", "http://schemas.microsoft.com/windowsazure"));
                    if (extensionImagesSequenceElement != null && extensionImagesSequenceElement.IsEmpty == false)
                    {
                        foreach (XElement extensionImagesElement in extensionImagesSequenceElement.Elements(XName.Get("ExtensionImage", "http://schemas.microsoft.com/windowsazure")))
                        {
                            HostedServiceListAvailableExtensionsResponse.ExtensionImage extensionImageInstance = new HostedServiceListAvailableExtensionsResponse.ExtensionImage();
                            result.ExtensionImages.Add(extensionImageInstance);
                            
                            XElement providerNameSpaceElement = extensionImagesElement.Element(XName.Get("ProviderNameSpace", "http://schemas.microsoft.com/windowsazure"));
                            if (providerNameSpaceElement != null && providerNameSpaceElement.IsEmpty == false)
                            {
                                string providerNameSpaceInstance = providerNameSpaceElement.Value;
                                extensionImageInstance.ProviderNamespace = providerNameSpaceInstance;
                            }
                            
                            XElement typeElement = extensionImagesElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            if (typeElement != null && typeElement.IsEmpty == false)
                            {
                                string typeInstance = typeElement.Value;
                                extensionImageInstance.Type = typeInstance;
                            }
                            
                            XElement labelElement = extensionImagesElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                            if (labelElement != null && labelElement.IsEmpty == false)
                            {
                                string labelInstance = labelElement.Value;
                                extensionImageInstance.Label = labelInstance;
                            }
                            
                            XElement versionElement = extensionImagesElement.Element(XName.Get("Version", "http://schemas.microsoft.com/windowsazure"));
                            if (versionElement != null && versionElement.IsEmpty == false)
                            {
                                string versionInstance = versionElement.Value;
                                extensionImageInstance.Version = versionInstance;
                            }
                            
                            XElement descriptionElement = extensionImagesElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null && descriptionElement.IsEmpty == false)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                extensionImageInstance.Description = descriptionInstance;
                            }
                            
                            XElement thumbprintAlgorithmElement = extensionImagesElement.Element(XName.Get("ThumbprintAlgorithm", "http://schemas.microsoft.com/windowsazure"));
                            if (thumbprintAlgorithmElement != null && thumbprintAlgorithmElement.IsEmpty == false)
                            {
                                string thumbprintAlgorithmInstance = thumbprintAlgorithmElement.Value;
                                extensionImageInstance.ThumbprintAlgorithm = thumbprintAlgorithmInstance;
                            }
                            
                            XElement hostingResourcesElement = extensionImagesElement.Element(XName.Get("HostingResources", "http://schemas.microsoft.com/windowsazure"));
                            if (hostingResourcesElement != null && hostingResourcesElement.IsEmpty == false)
                            {
                                string hostingResourcesInstance = hostingResourcesElement.Value;
                                extensionImageInstance.HostingResources = hostingResourcesInstance;
                            }
                            
                            XElement publicConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PublicConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                            if (publicConfigurationSchemaElement != null && publicConfigurationSchemaElement.IsEmpty == false)
                            {
                                string publicConfigurationSchemaInstance = TypeConversion.FromBase64String(publicConfigurationSchemaElement.Value);
                                extensionImageInstance.PublicConfigurationSchema = publicConfigurationSchemaInstance;
                            }
                            
                            XElement privateConfigurationSchemaElement = extensionImagesElement.Element(XName.Get("PrivateConfigurationSchema", "http://schemas.microsoft.com/windowsazure"));
                            if (privateConfigurationSchemaElement != null && privateConfigurationSchemaElement.IsEmpty == false)
                            {
                                string privateConfigurationSchemaInstance = TypeConversion.FromBase64String(privateConfigurationSchemaElement.Value);
                                extensionImageInstance.PrivateConfigurationSchema = privateConfigurationSchemaInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Update Hosted Service operation can update the label or
        /// description of a cloud service in Windows Azure.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/gg441303.aspx
        /// for more information)
        /// </summary>
        /// <param name='serviceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Hosted Service operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async System.Threading.Tasks.Task<OperationResponse> UpdateAsync(string serviceName, HostedServiceUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceName == null)
            {
                throw new ArgumentNullException("serviceName");
            }
            // TODO: Validate serviceName is a valid DNS name.
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Description != null && parameters.Description.Length > 1024)
            {
                throw new ArgumentOutOfRangeException("parameters.Description");
            }
            int labelCount = (parameters.Description != null ? 1 : 0) + (parameters.Label != null ? 1 : 0);
            if (labelCount < 1)
            {
                throw new ArgumentException("Expected at least one of parameters.Description, parameters.Label to be provided.");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("serviceName", serviceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/hostedservices/" + serviceName;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-11-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement updateHostedServiceElement = new XElement(XName.Get("UpdateHostedService", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(updateHostedServiceElement);
                
                if (parameters.Label != null)
                {
                    XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                    labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                    updateHostedServiceElement.Add(labelElement);
                }
                
                if (parameters.Description != null)
                {
                    XElement descriptionElement = new XElement(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                    descriptionElement.Value = parameters.Description;
                    updateHostedServiceElement.Add(descriptionElement);
                }
                
                if (parameters.ExtendedProperties != null)
                {
                    XElement extendedPropertiesDictionaryElement = new XElement(XName.Get("ExtendedProperties", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair in parameters.ExtendedProperties)
                    {
                        string extendedPropertiesKey = pair.Key;
                        string extendedPropertiesValue = pair.Value;
                        XElement extendedPropertiesElement = new XElement(XName.Get("ExtendedProperty", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesDictionaryElement.Add(extendedPropertiesElement);
                        
                        XElement extendedPropertiesKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesKeyElement.Value = extendedPropertiesKey;
                        extendedPropertiesElement.Add(extendedPropertiesKeyElement);
                        
                        XElement extendedPropertiesValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        extendedPropertiesValueElement.Value = extendedPropertiesValue;
                        extendedPropertiesElement.Add(extendedPropertiesValueElement);
                    }
                    updateHostedServiceElement.Add(extendedPropertiesDictionaryElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
