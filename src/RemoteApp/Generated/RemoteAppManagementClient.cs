// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.RemoteApp;
using Microsoft.WindowsAzure.Management.RemoteApp.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.RemoteApp.Models
{
    /// <summary>
    /// Paramer definition for AliasesList, used by remote app unpublishing
    /// operations.
    /// </summary>
    public partial class AliasesListParameter
    {
        private IList<string> _aliasesList;
        
        /// <summary>
        /// Optional. List of applications aliases (short unique names).
        /// </summary>
        public IList<string> AliasesList
        {
            get { return this._aliasesList; }
            set { this._aliasesList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AliasesListParameter class.
        /// </summary>
        public AliasesListParameter()
        {
            this.AliasesList = new List<string>();
        }
    }
    
    /// <summary>
    /// Parameter definition for ApplicatonDetailsList, used by publishing
    /// operaions.
    /// </summary>
    public partial class ApplicationDetailsListParameter
    {
        private IList<PublishedApplicationDetails> _detailsList;
        
        /// <summary>
        /// Optional. List of publishing details for remote applications.
        /// </summary>
        public IList<PublishedApplicationDetails> DetailsList
        {
            get { return this._detailsList; }
            set { this._detailsList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ApplicationDetailsListParameter
        /// class.
        /// </summary>
        public ApplicationDetailsListParameter()
        {
            this.DetailsList = new List<PublishedApplicationDetails>();
        }
    }
    
    /// <summary>
    /// Parameter definition for ApplicationDetails, used by publishing
    /// operations.
    /// </summary>
    public partial class ApplicationDetailsParameter
    {
        private PublishedApplicationDetails _details;
        
        /// <summary>
        /// Optional. Publishing details for remote applications.
        /// </summary>
        public PublishedApplicationDetails Details
        {
            get { return this._details; }
            set { this._details = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ApplicationDetailsParameter class.
        /// </summary>
        public ApplicationDetailsParameter()
        {
        }
    }
    
    public enum AppPublishingStatus
    {
        /// <summary>
        /// The application is being published.
        /// </summary>
        Publishing = 0,
        
        /// <summary>
        /// The application is published and ready to use.
        /// </summary>
        Published = 1,
        
        /// <summary>
        /// The application is being unpublished.
        /// </summary>
        Unpublishing = 2,
        
        /// <summary>
        /// The application is being modified.
        /// </summary>
        Modifying = 3,
        
        /// <summary>
        /// The application is in an invalid state. This may be due to an error
        /// state in application operation.
        /// </summary>
        Invalid = 4,
    }
    
    public enum ConsentStatus
    {
        /// <summary>
        /// Unknown consent status.
        /// </summary>
        Unknown = 0,
        
        /// <summary>
        /// The user consent status is not found.
        /// </summary>
        NotFound = 1,
        
        /// <summary>
        /// The user has not yet acted upon the consent request.
        /// </summary>
        Pending = 2,
        
        /// <summary>
        /// The user has accepted the consent request.
        /// </summary>
        Accepted = 3,
        
        /// <summary>
        /// The user has rejected the consent request.
        /// </summary>
        Rejected = 4,
        
        /// <summary>
        /// The user has ignored the consent request.
        /// </summary>
        Ignore = 5,
    }
    
    /// <summary>
    /// Response of the transaction overview.
    /// </summary>
    public partial class DiagnosticOverviewResult : OperationResponse
    {
        /// <summary>
        /// Initializes a new instance of the DiagnosticOverviewResult class.
        /// </summary>
        public DiagnosticOverviewResult()
        {
        }
    }
    
    /// <summary>
    /// Response of the transaction summary.
    /// </summary>
    public partial class DiagnosticSummaryResult : OperationResponse
    {
        /// <summary>
        /// Initializes a new instance of the DiagnosticSummaryResult class.
        /// </summary>
        public DiagnosticSummaryResult()
        {
        }
    }
    
    /// <summary>
    /// Operation response for OperationResultOperations.Get.
    /// </summary>
    public partial class GetOperationResultResponse : OperationResponse
    {
        private OperationResult _remoteAppOperationResult;
        
        /// <summary>
        /// Optional. Current status of the long-running operation.
        /// </summary>
        public OperationResult RemoteAppOperationResult
        {
            get { return this._remoteAppOperationResult; }
            set { this._remoteAppOperationResult = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetOperationResultResponse class.
        /// </summary>
        public GetOperationResultResponse()
        {
        }
    }
    
    /// <summary>
    /// Definition for result of GetPublishedApplicationList operation.
    /// </summary>
    public partial class GetPublishedApplicationListResult : OperationResponse
    {
        private IList<PublishedApplicationDetails> _resultList;
        
        /// <summary>
        /// Optional. List of published applications details.
        /// </summary>
        public IList<PublishedApplicationDetails> ResultList
        {
            get { return this._resultList; }
            set { this._resultList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetPublishedApplicationListResult
        /// class.
        /// </summary>
        public GetPublishedApplicationListResult()
        {
            this.ResultList = new List<PublishedApplicationDetails>();
        }
    }
    
    /// <summary>
    /// Definition for result of GetPublishedApplication operation.
    /// </summary>
    public partial class GetPublishedApplicationResult : OperationResponse
    {
        private PublishedApplicationDetails _result;
        
        /// <summary>
        /// Optional. Details of published application.
        /// </summary>
        public PublishedApplicationDetails Result
        {
            get { return this._result; }
            set { this._result = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetPublishedApplicationResult
        /// class.
        /// </summary>
        public GetPublishedApplicationResult()
        {
        }
    }
    
    /// <summary>
    /// The list of locations.
    /// </summary>
    public partial class GetRegionListResult : OperationResponse
    {
        private IList<string> _locations;
        
        /// <summary>
        /// Optional. The list of locations.
        /// </summary>
        public IList<string> Locations
        {
            get { return this._locations; }
            set { this._locations = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetRegionListResult class.
        /// </summary>
        public GetRegionListResult()
        {
            this.Locations = new List<string>();
        }
    }
    
    /// <summary>
    /// The response for the GetServiceList operation.
    /// </summary>
    public partial class GetServiceListResult : OperationResponse
    {
        private IList<Service> _services;
        
        /// <summary>
        /// Optional. The list of all the collections for the given customer
        /// subscription id.
        /// </summary>
        public IList<Service> Services
        {
            get { return this._services; }
            set { this._services = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetServiceListResult class.
        /// </summary>
        public GetServiceListResult()
        {
            this.Services = new List<Service>();
        }
    }
    
    /// <summary>
    /// The list of principals with consent status.
    /// </summary>
    public partial class GetServicePrincipalListResult : OperationResponse
    {
        private IList<ServiceUserConsentStatus> _users;
        
        /// <summary>
        /// Optional. The list of users and their consent status for this
        /// collection.
        /// </summary>
        public IList<ServiceUserConsentStatus> Users
        {
            get { return this._users; }
            set { this._users = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetServicePrincipalListResult
        /// class.
        /// </summary>
        public GetServicePrincipalListResult()
        {
            this.Users = new List<ServiceUserConsentStatus>();
        }
    }
    
    /// <summary>
    /// The response for the GetServiceList operation.
    /// </summary>
    public partial class GetServiceResult : OperationResponse
    {
        private Service _service;
        
        /// <summary>
        /// Optional. The collection details.
        /// </summary>
        public Service Service
        {
            get { return this._service; }
            set { this._service = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetServiceResult class.
        /// </summary>
        public GetServiceResult()
        {
        }
    }
    
    /// <summary>
    /// Definition for result of GetStartMenuApplicationList operation.
    /// </summary>
    public partial class GetStartMenuApplicationListResult : OperationResponse
    {
        private IList<StartMenuApplication> _resultList;
        
        /// <summary>
        /// Optional. List of details of start menu applications.
        /// </summary>
        public IList<StartMenuApplication> ResultList
        {
            get { return this._resultList; }
            set { this._resultList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetStartMenuApplicationListResult
        /// class.
        /// </summary>
        public GetStartMenuApplicationListResult()
        {
            this.ResultList = new List<StartMenuApplication>();
        }
    }
    
    /// <summary>
    /// Definition for result of GetStartMenuApplication operation.
    /// </summary>
    public partial class GetStartMenuApplicationResult : OperationResponse
    {
        private StartMenuApplication _result;
        
        /// <summary>
        /// Optional. Start menu application details.
        /// </summary>
        public StartMenuApplication Result
        {
            get { return this._result; }
            set { this._result = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the GetStartMenuApplicationResult
        /// class.
        /// </summary>
        public GetStartMenuApplicationResult()
        {
        }
    }
    
    /// <summary>
    /// Contains a map of URIs for application icons.
    /// </summary>
    public partial class IconPngUrisType
    {
        private Dictionary<int, string> _iconPngUris;
        
        /// <summary>
        /// Optional. The available map of icon PNG file URIs for different
        /// resolutions (e.g. 16x16, 32x32, 64x64). The key of the map is the
        /// first dimension of the PNG resolution.
        /// </summary>
        public Dictionary<int, string> IconPngUris
        {
            get { return this._iconPngUris; }
            set { this._iconPngUris = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the IconPngUrisType class.
        /// </summary>
        public IconPngUrisType()
        {
            this.IconPngUris = new Dictionary<int, string>();
        }
    }
    
    /// <summary>
    /// Operation response for TemplateImageOperations.List.
    /// </summary>
    public partial class ListTemplateImageResponse : OperationResponse, IEnumerable<TemplateImage>
    {
        private IList<TemplateImage> _remoteAppTemplateImageList;
        
        /// <summary>
        /// Optional. List of template images.
        /// </summary>
        public IList<TemplateImage> RemoteAppTemplateImageList
        {
            get { return this._remoteAppTemplateImageList; }
            set { this._remoteAppTemplateImageList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ListTemplateImageResponse class.
        /// </summary>
        public ListTemplateImageResponse()
        {
            this.RemoteAppTemplateImageList = new List<TemplateImage>();
        }
        
        /// <summary>
        /// Gets the sequence of RemoteAppTemplateImageList.
        /// </summary>
        public IEnumerator<TemplateImage> GetEnumerator()
        {
            return this.RemoteAppTemplateImageList.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of RemoteAppTemplateImageList.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Definition for result of ModifyApplicaton operation.
    /// </summary>
    public partial class ModifyApplicationResult : OperationResponse
    {
        private PublishingOperationResult _result;
        
        /// <summary>
        /// Optional. Publishing operation result.
        /// </summary>
        public PublishingOperationResult Result
        {
            get { return this._result; }
            set { this._result = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ModifyApplicationResult class.
        /// </summary>
        public ModifyApplicationResult()
        {
        }
    }
    
    /// <summary>
    /// Current status of a long-running operation.
    /// </summary>
    public partial class OperationResult
    {
        private string _description;
        
        /// <summary>
        /// Optional. Description of the current long-running operation status.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private string _errorDetails;
        
        /// <summary>
        /// Optional. Details for any errors from long-running operation.
        /// </summary>
        public string ErrorDetails
        {
            get { return this._errorDetails; }
            set { this._errorDetails = value; }
        }
        
        private RemoteAppOperationStatus _status;
        
        /// <summary>
        /// Optional. Current long-running operation status.
        /// </summary>
        public RemoteAppOperationStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the OperationResult class.
        /// </summary>
        public OperationResult()
        {
        }
    }
    
    /// <summary>
    /// The response containing the operation tracking id.
    /// </summary>
    public partial class OperationResultWithTrackingId : OperationResponse
    {
        private string _trackingId;
        
        /// <summary>
        /// Optional. The operation tracking id.
        /// </summary>
        public string TrackingId
        {
            get { return this._trackingId; }
            set { this._trackingId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the OperationResultWithTrackingId
        /// class.
        /// </summary>
        public OperationResultWithTrackingId()
        {
        }
    }
    
    public enum PrincipalProviderType
    {
        /// <summary>
        /// The orgranizational principal provider type.
        /// </summary>
        OrgId = 0,
        
        /// <summary>
        /// The Microsoft account (aka Live id) provider type.
        /// </summary>
        MicrosoftAccount = 1,
    }
    
    public enum PrincipalType
    {
        /// <summary>
        /// User type.
        /// </summary>
        User = 0,
        
        /// <summary>
        /// Group type.
        /// </summary>
        Group = 1,
    }
    
    /// <summary>
    /// Definition for result of PublishApplications operation.
    /// </summary>
    public partial class PublishApplicationsResult : OperationResponse
    {
        private IList<PublishingOperationResult> _resultList;
        
        /// <summary>
        /// Optional. List of publishing operations results.
        /// </summary>
        public IList<PublishingOperationResult> ResultList
        {
            get { return this._resultList; }
            set { this._resultList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PublishApplicationsResult class.
        /// </summary>
        public PublishApplicationsResult()
        {
            this.ResultList = new List<PublishingOperationResult>();
        }
    }
    
    /// <summary>
    /// Publishing details of remote application.
    /// </summary>
    public partial class PublishedApplicationDetails
    {
        private string _alias;
        
        /// <summary>
        /// Optional. A short unique name for the application.
        /// </summary>
        public string Alias
        {
            get { return this._alias; }
            set { this._alias = value; }
        }
        
        private bool _availableToUsers;
        
        /// <summary>
        /// Optional. A flag to denote if the application will be available to
        /// the end user.
        /// </summary>
        public bool AvailableToUsers
        {
            get { return this._availableToUsers; }
            set { this._availableToUsers = value; }
        }
        
        private string _commandLineArguments;
        
        /// <summary>
        /// Optional. The command line arguments to launch the application.
        /// </summary>
        public string CommandLineArguments
        {
            get { return this._commandLineArguments; }
            set { this._commandLineArguments = value; }
        }
        
        private IconPngUrisType _iconPngUris;
        
        /// <summary>
        /// Optional. The available map of icon PNG file URIs for different
        /// resolutions (e.g. 16x16, 32x32, 64x64). The key of the map is the
        /// first dimension of the PNG resolution.
        /// </summary>
        public IconPngUrisType IconPngUris
        {
            get { return this._iconPngUris; }
            set { this._iconPngUris = value; }
        }
        
        private string _iconUri;
        
        /// <summary>
        /// Optional. The URI for the application's default icon PNG file.
        /// </summary>
        public string IconUri
        {
            get { return this._iconUri; }
            set { this._iconUri = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. The application name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _remoteAppServiceId;
        
        /// <summary>
        /// Required. The associated RemoteApp collection id.
        /// </summary>
        public string RemoteAppServiceId
        {
            get { return this._remoteAppServiceId; }
            set { this._remoteAppServiceId = value; }
        }
        
        private AppPublishingStatus _status;
        
        /// <summary>
        /// Optional. The application status.
        /// </summary>
        public AppPublishingStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _subscriptionId;
        
        /// <summary>
        /// Optional. The customer subscription id.
        /// </summary>
        public string SubscriptionId
        {
            get { return this._subscriptionId; }
            set { this._subscriptionId = value; }
        }
        
        private string _virtualPath;
        
        /// <summary>
        /// Optional. The application image path on the destination machine
        /// specified with environment variables for the drive and known
        /// system path.
        /// </summary>
        public string VirtualPath
        {
            get { return this._virtualPath; }
            set { this._virtualPath = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PublishedApplicationDetails class.
        /// </summary>
        public PublishedApplicationDetails()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the PublishedApplicationDetails class
        /// with required arguments.
        /// </summary>
        public PublishedApplicationDetails(string name, string remoteAppServiceId)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (remoteAppServiceId == null)
            {
                throw new ArgumentNullException("remoteAppServiceId");
            }
            this.Name = name;
            this.RemoteAppServiceId = remoteAppServiceId;
        }
    }
    
    /// <summary>
    /// Details of publishing / unpublishing operation results
    /// </summary>
    public partial class PublishingOperationResult
    {
        private string _applicationAlias;
        
        /// <summary>
        /// Optional. The application alias.
        /// </summary>
        public string ApplicationAlias
        {
            get { return this._applicationAlias; }
            set { this._applicationAlias = value; }
        }
        
        private string _applicationVirtualPath;
        
        /// <summary>
        /// Optional. The application virtual path with respect to local
        /// machine.
        /// </summary>
        public string ApplicationVirtualPath
        {
            get { return this._applicationVirtualPath; }
            set { this._applicationVirtualPath = value; }
        }
        
        private string _errorMessage;
        
        /// <summary>
        /// Optional. Error message with respect to operation result.
        /// </summary>
        public string ErrorMessage
        {
            get { return this._errorMessage; }
            set { this._errorMessage = value; }
        }
        
        private bool _success;
        
        /// <summary>
        /// Optional. Whether operation was successful.
        /// </summary>
        public bool Success
        {
            get { return this._success; }
            set { this._success = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PublishingOperationResult class.
        /// </summary>
        public PublishingOperationResult()
        {
        }
    }
    
    /// <summary>
    /// Current status of a long-running operation.
    /// </summary>
    public enum RemoteAppOperationStatus
    {
        Pending = 0,
        
        InProgress = 1,
        
        Success = 2,
        
        Failed = 3,
    }
    
    /// <summary>
    /// The application security principal details.
    /// </summary>
    public partial class SecurityPrincipal
    {
        private string _aadObjectId;
        
        /// <summary>
        /// Optional. For OrgId principals, the principal's Azure
        /// ActiveDirectory object ID
        /// </summary>
        public string AadObjectId
        {
            get { return this._aadObjectId; }
            set { this._aadObjectId = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Optional. The security principal description.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. The security principal name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private PrincipalType _securityPrincipalType;
        
        /// <summary>
        /// Optional. The security principal type.
        /// </summary>
        public PrincipalType SecurityPrincipalType
        {
            get { return this._securityPrincipalType; }
            set { this._securityPrincipalType = value; }
        }
        
        private PrincipalProviderType _userIdType;
        
        /// <summary>
        /// Optional. The security principal provider type.
        /// </summary>
        public PrincipalProviderType UserIdType
        {
            get { return this._userIdType; }
            set { this._userIdType = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SecurityPrincipal class.
        /// </summary>
        public SecurityPrincipal()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the SecurityPrincipal class with
        /// required arguments.
        /// </summary>
        public SecurityPrincipal(string name)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            this.Name = name;
        }
    }
    
    /// <summary>
    /// The list of applications security principals.
    /// </summary>
    public partial class SecurityPrincipalList
    {
        private IList<SecurityPrincipal> _securityPrincipals;
        
        /// <summary>
        /// Optional. The list of applications security principals.
        /// </summary>
        public IList<SecurityPrincipal> SecurityPrincipals
        {
            get { return this._securityPrincipals; }
            set { this._securityPrincipals = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SecurityPrincipalList class.
        /// </summary>
        public SecurityPrincipalList()
        {
            this.SecurityPrincipals = new List<SecurityPrincipal>();
        }
    }
    
    public enum SecurityPrincipalOperationError
    {
        /// <summary>
        /// The security principal could not be resolved.
        /// </summary>
        CouldNotBeResolved = 0,
        
        /// <summary>
        /// The security principal is missing from the requested collection.
        /// </summary>
        NotFound = 1,
        
        /// <summary>
        /// The security principal already exists in the requested collection.
        /// </summary>
        AlreadyExists = 2,
        
        /// <summary>
        /// The security principal is not supported for this type of collection.
        /// </summary>
        NotSupported = 3,
    }
    
    /// <summary>
    /// The application collection user consent status information.
    /// </summary>
    public partial class SecurityPrincipalOperationErrorDetails
    {
        private SecurityPrincipalOperationError _error;
        
        /// <summary>
        /// Optional. The security principal operation result code.
        /// </summary>
        public SecurityPrincipalOperationError Error
        {
            get { return this._error; }
            set { this._error = value; }
        }
        
        private string _securityPrincipal;
        
        /// <summary>
        /// Optional. The security principal name.
        /// </summary>
        public string SecurityPrincipal
        {
            get { return this._securityPrincipal; }
            set { this._securityPrincipal = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// SecurityPrincipalOperationErrorDetails class.
        /// </summary>
        public SecurityPrincipalOperationErrorDetails()
        {
        }
    }
    
    /// <summary>
    /// The collection details.
    /// </summary>
    public partial class Service
    {
        private string _activeDirectoryConfigId;
        
        /// <summary>
        /// Optional. The unique identifier of the domain join information for
        /// this collection.
        /// </summary>
        public string ActiveDirectoryConfigId
        {
            get { return this._activeDirectoryConfigId; }
            set { this._activeDirectoryConfigId = value; }
        }
        
        private string _billingPlanId;
        
        /// <summary>
        /// Required. The unique identifier of the collection billing plan.
        /// </summary>
        public string BillingPlanId
        {
            get { return this._billingPlanId; }
            set { this._billingPlanId = value; }
        }
        
        private string _customRdpProperty;
        
        /// <summary>
        /// Optional. Optional customer-defined RDP properties of the
        /// collection.
        /// </summary>
        public string CustomRdpProperty
        {
            get { return this._customRdpProperty; }
            set { this._customRdpProperty = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Optional. The description of the collection.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// Optional. The collection unique identifier.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _lastErrorCode;
        
        /// <summary>
        /// Optional. The last operation error code on this collection.
        /// </summary>
        public string LastErrorCode
        {
            get { return this._lastErrorCode; }
            set { this._lastErrorCode = value; }
        }
        
        private DateTime _lastModifiedTimeUtc;
        
        /// <summary>
        /// Optional. UTC Date time of the last modification of this collection.
        /// </summary>
        public DateTime LastModifiedTimeUtc
        {
            get { return this._lastModifiedTimeUtc; }
            set { this._lastModifiedTimeUtc = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location of the collection (required for cloud-only
        /// collections, optional for hybrid collections)
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private int _maxSessions;
        
        /// <summary>
        /// Optional. The maximum number of concurrent users allowed for this
        /// collection.
        /// </summary>
        public int MaxSessions
        {
            get { return this._maxSessions; }
            set { this._maxSessions = value; }
        }
        
        private ServiceMode _mode;
        
        /// <summary>
        /// Optional. The collection mode.
        /// </summary>
        public ServiceMode Mode
        {
            get { return this._mode; }
            set { this._mode = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. The collection name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private bool _openForPublishing;
        
        /// <summary>
        /// Optional. A flag denoting if this collection is ready for
        /// publishing operations.
        /// </summary>
        public bool OpenForPublishing
        {
            get { return this._openForPublishing; }
            set { this._openForPublishing = value; }
        }
        
        private ServiceType _serviceType;
        
        /// <summary>
        /// Optional. The collection type.
        /// </summary>
        public ServiceType ServiceType
        {
            get { return this._serviceType; }
            set { this._serviceType = value; }
        }
        
        private int _sessionWarningThreshold;
        
        /// <summary>
        /// Optional. The end-user session limit warning threshold.  Reaching
        /// or crossing this threshold will cause a capacity warning message
        /// to be shown in the management portal.
        /// </summary>
        public int SessionWarningThreshold
        {
            get { return this._sessionWarningThreshold; }
            set { this._sessionWarningThreshold = value; }
        }
        
        private string _status;
        
        /// <summary>
        /// Optional. The collection status.
        /// </summary>
        public string Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _subscriptionId;
        
        /// <summary>
        /// Required. The customer subscription id to which this collection
        /// belongs to.
        /// </summary>
        public string SubscriptionId
        {
            get { return this._subscriptionId; }
            set { this._subscriptionId = value; }
        }
        
        private string _templateImageId;
        
        /// <summary>
        /// Optional. The ID of the template image associated with this
        /// collection.
        /// </summary>
        public string TemplateImageId
        {
            get { return this._templateImageId; }
            set { this._templateImageId = value; }
        }
        
        private string _vnetName;
        
        /// <summary>
        /// Optional. The Vnet name associated with this collection.
        /// </summary>
        public string VnetName
        {
            get { return this._vnetName; }
            set { this._vnetName = value; }
        }
        
        private int _waitBeforeShutdownInMinutes;
        
        /// <summary>
        /// Optional. Number of minutes to wait before logging off the end
        /// users when updating this collection.The value of -1 denotes
        /// immediate force logoff after the patching is successfully
        /// completed.The value of 0 denotes logoff after 60 minutes after the
        /// patching is successfully completed.Any other value less than 300
        /// minutes will be honored as is.
        /// </summary>
        public int WaitBeforeShutdownInMinutes
        {
            get { return this._waitBeforeShutdownInMinutes; }
            set { this._waitBeforeShutdownInMinutes = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Service class.
        /// </summary>
        public Service()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the Service class with required
        /// arguments.
        /// </summary>
        public Service(string name, string subscriptionId, string billingPlanId)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (subscriptionId == null)
            {
                throw new ArgumentNullException("subscriptionId");
            }
            if (billingPlanId == null)
            {
                throw new ArgumentNullException("billingPlanId");
            }
            this.Name = name;
            this.SubscriptionId = subscriptionId;
            this.BillingPlanId = billingPlanId;
        }
    }
    
    public partial class ServiceCreationDetails
    {
        private string _activeDirectoryConfigId;
        
        /// <summary>
        /// Optional. The unique identifier of the domain join information for
        /// this collection.
        /// </summary>
        public string ActiveDirectoryConfigId
        {
            get { return this._activeDirectoryConfigId; }
            set { this._activeDirectoryConfigId = value; }
        }
        
        private IList<SecurityPrincipal> _allowedPrincipals;
        
        /// <summary>
        /// Optional. The initial list of users to give access to after
        /// creation of the collection.
        /// </summary>
        public IList<SecurityPrincipal> AllowedPrincipals
        {
            get { return this._allowedPrincipals; }
            set { this._allowedPrincipals = value; }
        }
        
        private string _billingPlanId;
        
        /// <summary>
        /// Required. The unique identifier of the collection billing plan.
        /// </summary>
        public string BillingPlanId
        {
            get { return this._billingPlanId; }
            set { this._billingPlanId = value; }
        }
        
        private string _customRdpProperty;
        
        /// <summary>
        /// Optional. Optional customer-defined RDP properties of the
        /// collection.
        /// </summary>
        public string CustomRdpProperty
        {
            get { return this._customRdpProperty; }
            set { this._customRdpProperty = value; }
        }
        
        private string _description;
        
        /// <summary>
        /// Optional. The description of the collection.
        /// </summary>
        public string Description
        {
            get { return this._description; }
            set { this._description = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Optional. The location of the collection (required for cloud-only
        /// collections, optional for hybrid collections)
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private ServiceMode _mode;
        
        /// <summary>
        /// Optional. The collection mode.
        /// </summary>
        public ServiceMode Mode
        {
            get { return this._mode; }
            set { this._mode = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. The collection name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private bool _openForPublishing;
        
        /// <summary>
        /// Optional. A flag denoting if this collection is ready for
        /// publishing operations.
        /// </summary>
        public bool OpenForPublishing
        {
            get { return this._openForPublishing; }
            set { this._openForPublishing = value; }
        }
        
        private IList<PublishedApplicationDetails> _publishedApplications;
        
        /// <summary>
        /// Optional. The list of applications to be initially published after
        /// creation of the collection.
        /// </summary>
        public IList<PublishedApplicationDetails> PublishedApplications
        {
            get { return this._publishedApplications; }
            set { this._publishedApplications = value; }
        }
        
        private ServiceType _serviceType;
        
        /// <summary>
        /// Optional. The collection type.
        /// </summary>
        public ServiceType ServiceType
        {
            get { return this._serviceType; }
            set { this._serviceType = value; }
        }
        
        private string _templateImageId;
        
        /// <summary>
        /// Optional. The ID of the application template image associated with
        /// this collection.
        /// </summary>
        public string TemplateImageId
        {
            get { return this._templateImageId; }
            set { this._templateImageId = value; }
        }
        
        private string _vnetName;
        
        /// <summary>
        /// Optional. The Vnet name associated with this collection.
        /// </summary>
        public string VnetName
        {
            get { return this._vnetName; }
            set { this._vnetName = value; }
        }
        
        private int _waitBeforeShutdownInMinutes;
        
        /// <summary>
        /// Optional. Number of minutes to wait before logging off the end
        /// users when updating this collection.The value of -1 denotes
        /// immediate force logoff after the patching is successfully
        /// completed.The value of 0 denotes logoff after 60 minutes after the
        /// patching is successfully completed.Any other value less than 300
        /// minutes will be honored as is.
        /// </summary>
        public int WaitBeforeShutdownInMinutes
        {
            get { return this._waitBeforeShutdownInMinutes; }
            set { this._waitBeforeShutdownInMinutes = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServiceCreationDetails class.
        /// </summary>
        public ServiceCreationDetails()
        {
            this.AllowedPrincipals = new List<SecurityPrincipal>();
            this.PublishedApplications = new List<PublishedApplicationDetails>();
        }
        
        /// <summary>
        /// Initializes a new instance of the ServiceCreationDetails class with
        /// required arguments.
        /// </summary>
        public ServiceCreationDetails(string name, string billingPlanId)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            if (billingPlanId == null)
            {
                throw new ArgumentNullException("billingPlanId");
            }
            this.Name = name;
            this.BillingPlanId = billingPlanId;
        }
    }
    
    public enum ServiceMode
    {
        /// <summary>
        /// The collection mode is currently unassigned.
        /// </summary>
        Unassigned = 0,
        
        /// <summary>
        /// The collection is capable of publishing applications.
        /// </summary>
        Apps = 1,
        
        /// <summary>
        /// The collection is capable of publishing a desktop.
        /// </summary>
        Desktop = 2,
    }
    
    /// <summary>
    /// The response for the collection user operation.
    /// </summary>
    public partial class ServicePrincipalOperationsResult : OperationResultWithTrackingId
    {
        private IList<SecurityPrincipalOperationErrorDetails> _statuses;
        
        /// <summary>
        /// Optional. The list of the user operation statuses.
        /// </summary>
        public IList<SecurityPrincipalOperationErrorDetails> Statuses
        {
            get { return this._statuses; }
            set { this._statuses = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServicePrincipalOperationsResult
        /// class.
        /// </summary>
        public ServicePrincipalOperationsResult()
        {
            this.Statuses = new List<SecurityPrincipalOperationErrorDetails>();
        }
    }
    
    public enum ServiceType
    {
        /// <summary>
        /// The Hybrid collection.
        /// </summary>
        Hybrid = 0,
        
        /// <summary>
        /// The Cloud-only collection.
        /// </summary>
        CloudOnly = 1,
    }
    
    /// <summary>
    /// The collection user consent status information.
    /// </summary>
    public partial class ServiceUserConsentStatus
    {
        private SecurityPrincipal _securityPrincipal;
        
        /// <summary>
        /// Optional. The security principal information.
        /// </summary>
        public SecurityPrincipal SecurityPrincipal
        {
            get { return this._securityPrincipal; }
            set { this._securityPrincipal = value; }
        }
        
        private ConsentStatus _status;
        
        /// <summary>
        /// Optional. The user consent status.
        /// </summary>
        public ConsentStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServiceUserConsentStatus class.
        /// </summary>
        public ServiceUserConsentStatus()
        {
        }
    }
    
    /// <summary>
    /// Details required to create or set a template image.
    /// </summary>
    public partial class SetTemplateImageDetails
    {
        private string _id;
        
        /// <summary>
        /// Optional. The unique identifier for the image. This is only
        /// required to update an existing template image.  Leave this blank
        /// to create a new template image.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. The friendly name for the image.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _region;
        
        /// <summary>
        /// Optional. The region where the image will be used. The region can
        /// not be changed once a template image has been created.  Leave this
        /// blank if you want to update an existing template image.
        /// </summary>
        public string Region
        {
            get { return this._region; }
            set { this._region = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SetTemplateImageDetails class.
        /// </summary>
        public SetTemplateImageDetails()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the SetTemplateImageDetails class
        /// with required arguments.
        /// </summary>
        public SetTemplateImageDetails(string name)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            this.Name = name;
        }
    }
    
    /// <summary>
    /// Operation response for TemplateImageOperations.List.
    /// </summary>
    public partial class SetTemplateImageResponse : OperationResponse
    {
        private TemplateImage _remoteAppTemplateImage;
        
        /// <summary>
        /// Optional. Details for the template image that has been created or
        /// updated by this operation.
        /// </summary>
        public TemplateImage RemoteAppTemplateImage
        {
            get { return this._remoteAppTemplateImage; }
            set { this._remoteAppTemplateImage = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SetTemplateImageResponse class.
        /// </summary>
        public SetTemplateImageResponse()
        {
        }
    }
    
    /// <summary>
    /// Definition containing details of Start Menu Applications.
    /// </summary>
    public partial class StartMenuApplication
    {
        private string _commandLineArguments;
        
        /// <summary>
        /// Optional. The command line arguments to launch the application.
        /// </summary>
        public string CommandLineArguments
        {
            get { return this._commandLineArguments; }
            set { this._commandLineArguments = value; }
        }
        
        private Dictionary<int, string> _iconPngUris;
        
        /// <summary>
        /// Optional. The available map of icon PNG file URIs for different
        /// resolutions (e.g. 16x16, 32x32, 64x64). The key of the map is the
        /// first dimension of the PNG resolution.
        /// </summary>
        public Dictionary<int, string> IconPngUris
        {
            get { return this._iconPngUris; }
            set { this._iconPngUris = value; }
        }
        
        private string _iconUri;
        
        /// <summary>
        /// Optional. The default URI to the application icon png file.
        /// </summary>
        public string IconUri
        {
            get { return this._iconUri; }
            set { this._iconUri = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// Optional. The application id.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. The application name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _subscriptionId;
        
        /// <summary>
        /// Optional. The customer subscription id.
        /// </summary>
        public string SubscriptionId
        {
            get { return this._subscriptionId; }
            set { this._subscriptionId = value; }
        }
        
        private string _templateImageId;
        
        /// <summary>
        /// Optional. The application template image id.
        /// </summary>
        public string TemplateImageId
        {
            get { return this._templateImageId; }
            set { this._templateImageId = value; }
        }
        
        private string _virtualPath;
        
        /// <summary>
        /// Optional. The application image path on the destination machine
        /// specified with environment variables for the drive and known
        /// system path.
        /// </summary>
        public string VirtualPath
        {
            get { return this._virtualPath; }
            set { this._virtualPath = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StartMenuApplication class.
        /// </summary>
        public StartMenuApplication()
        {
            this.IconPngUris = new Dictionary<int, string>();
        }
        
        /// <summary>
        /// Initializes a new instance of the StartMenuApplication class with
        /// required arguments.
        /// </summary>
        public StartMenuApplication(string name)
            : this()
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }
            this.Name = name;
        }
    }
    
    /// <summary>
    /// Details of a template image.
    /// </summary>
    public partial class TemplateImage
    {
        private string _geo;
        
        /// <summary>
        /// Optional. The region where the image can be used.
        /// </summary>
        public string Geo
        {
            get { return this._geo; }
            set { this._geo = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// Optional. The unique identifier for the image.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private IList<string> _locationList;
        
        /// <summary>
        /// Optional. For platform images, a list of regions where the image
        /// can be used.
        /// </summary>
        public IList<string> LocationList
        {
            get { return this._locationList; }
            set { this._locationList = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The friendly name for the image.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private int _numberOfRemoteAppServicesUsingThisImage;
        
        /// <summary>
        /// Optional. The number of collections linking to the image.
        /// </summary>
        public int NumberOfRemoteAppServicesUsingThisImage
        {
            get { return this._numberOfRemoteAppServicesUsingThisImage; }
            set { this._numberOfRemoteAppServicesUsingThisImage = value; }
        }
        
        private string _pathOnClient;
        
        /// <summary>
        /// Optional. The path of the image on the client.
        /// </summary>
        public string PathOnClient
        {
            get { return this._pathOnClient; }
            set { this._pathOnClient = value; }
        }
        
        private string _sas;
        
        /// <summary>
        /// Optional. The image upload SAS key.
        /// </summary>
        public string Sas
        {
            get { return this._sas; }
            set { this._sas = value; }
        }
        
        private DateTime _sasExpiry;
        
        /// <summary>
        /// Optional. The time when the image upload SAS key will expire.
        /// </summary>
        public DateTime SasExpiry
        {
            get { return this._sasExpiry; }
            set { this._sasExpiry = value; }
        }
        
        private long _size;
        
        /// <summary>
        /// Optional. The image size in bytes.
        /// </summary>
        public long Size
        {
            get { return this._size; }
            set { this._size = value; }
        }
        
        private TemplateImageStatus _status;
        
        /// <summary>
        /// Optional. The image status.
        /// </summary>
        public TemplateImageStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _subscriptionId;
        
        /// <summary>
        /// Optional. The Azure subscription ID for the image.
        /// </summary>
        public string SubscriptionId
        {
            get { return this._subscriptionId; }
            set { this._subscriptionId = value; }
        }
        
        private TemplateImageType _type;
        
        /// <summary>
        /// Optional. The type of the template image.
        /// </summary>
        public TemplateImageType Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        private DateTime _uploadCompleteTime;
        
        /// <summary>
        /// Optional. The time when the image upload was completed.
        /// </summary>
        public DateTime UploadCompleteTime
        {
            get { return this._uploadCompleteTime; }
            set { this._uploadCompleteTime = value; }
        }
        
        private DateTime _uploadSetupTime;
        
        /// <summary>
        /// Optional. The time when the image upload parameters were set.
        /// </summary>
        public DateTime UploadSetupTime
        {
            get { return this._uploadSetupTime; }
            set { this._uploadSetupTime = value; }
        }
        
        private DateTime _uploadStartTime;
        
        /// <summary>
        /// Optional. The time when the image upload was started.
        /// </summary>
        public DateTime UploadStartTime
        {
            get { return this._uploadStartTime; }
            set { this._uploadStartTime = value; }
        }
        
        private string _uri;
        
        /// <summary>
        /// Optional. The image upload endpoint URI.
        /// </summary>
        public string Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TemplateImage class.
        /// </summary>
        public TemplateImage()
        {
            this.LocationList = new List<string>();
        }
    }
    
    /// <summary>
    /// The type of a template image.
    /// </summary>
    public enum TemplateImageStatus
    {
        /// <summary>
        /// The image upload is pending.
        /// </summary>
        UploadPending = 0,
        
        /// <summary>
        /// The image upload has started.
        /// </summary>
        UploadInProgress = 1,
        
        /// <summary>
        /// The image upload has completed succesfully.
        /// </summary>
        UploadComplete = 2,
        
        /// <summary>
        /// The image upload failed.
        /// </summary>
        UploadFailed = 3,
        
        /// <summary>
        /// The image import is in progress.
        /// </summary>
        ImportInProgress = 4,
        
        /// <summary>
        /// The image import failed.
        /// </summary>
        ImportFailed = 5,
        
        /// <summary>
        /// The image import has completed succesfully.
        /// </summary>
        ImportComplete = 6,
        
        /// <summary>
        /// The image validation failed.
        /// </summary>
        ValidationFailed = 7,
        
        /// <summary>
        /// The image is ready.
        /// </summary>
        Ready = 8,
        
        /// <summary>
        /// The image is corrupted.
        /// </summary>
        Corrupted = 9,
        
        /// <summary>
        /// The image is being deleted.
        /// </summary>
        Deleting = 10,
    }
    
    /// <summary>
    /// The type of a template image.
    /// </summary>
    public enum TemplateImageType
    {
        /// <summary>
        /// The image was uploaded from the subscription owner.
        /// </summary>
        CustomerImage = 0,
        
        /// <summary>
        /// The image was provided by the Azure RemoteApp service.
        /// </summary>
        PlatformImage = 1,
        
        /// <summary>
        /// The image type is not known.
        /// </summary>
        Unknown = 2,
    }
    
    /// <summary>
    /// Definition for result of UnpublishAllApplications operation.
    /// </summary>
    public partial class UnpublishAllApplicationsResult : OperationResponse
    {
        private IList<PublishingOperationResult> _resultList;
        
        /// <summary>
        /// Optional. List of unpublish operation results.
        /// </summary>
        public IList<PublishingOperationResult> ResultList
        {
            get { return this._resultList; }
            set { this._resultList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the UnpublishAllApplicationsResult
        /// class.
        /// </summary>
        public UnpublishAllApplicationsResult()
        {
            this.ResultList = new List<PublishingOperationResult>();
        }
    }
    
    /// <summary>
    /// Definition for result of UnpublishApplications operation.
    /// </summary>
    public partial class UnpublishApplicationsResult : OperationResponse
    {
        private IList<PublishingOperationResult> _resultList;
        
        /// <summary>
        /// Optional. List of unpublish operation results.
        /// </summary>
        public IList<PublishingOperationResult> ResultList
        {
            get { return this._resultList; }
            set { this._resultList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the UnpublishApplicationsResult class.
        /// </summary>
        public UnpublishApplicationsResult()
        {
            this.ResultList = new List<PublishingOperationResult>();
        }
    }
}

namespace Microsoft.WindowsAzure.Management.RemoteApp
{
    public static partial class RemoteAppManagementClientExtensions
    {
    }
    
    public partial interface IRemoteAppManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        string RdfeNamespace
        {
            get; set; 
        }
        
        /// <summary>
        /// Diagnostic logs.
        /// </summary>
        IDiagnosticOperations Logs
        {
            get; 
        }
        
        /// <summary>
        /// Operations for long-running operation results
        /// </summary>
        IOperationResultOperations OperationResults
        {
            get; 
        }
        
        /// <summary>
        /// Operations related to publishing.
        /// </summary>
        IPublishingOperations Publishing
        {
            get; 
        }
        
        /// <summary>
        /// RemoteApp principal operations.
        /// </summary>
        IRemoteAppPrincipalOperations Users
        {
            get; 
        }
        
        /// <summary>
        /// Operation specific documentations goes here.
        /// </summary>
        IRemoteAppServiceOperations Services
        {
            get; 
        }
        
        /// <summary>
        /// Operations to create, modify, list, and delete template images.
        /// </summary>
        ITemplateImageOperations TemplateImages
        {
            get; 
        }
    }
    
    public partial class RemoteAppManagementClient : ServiceClient<RemoteAppManagementClient>, IRemoteAppManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private string _rdfeNamespace;
        
        public string RdfeNamespace
        {
            get { return this._rdfeNamespace; }
            set { this._rdfeNamespace = value; }
        }
        
        private IDiagnosticOperations _logs;
        
        /// <summary>
        /// Diagnostic logs.
        /// </summary>
        public virtual IDiagnosticOperations Logs
        {
            get { return this._logs; }
        }
        
        private IOperationResultOperations _operationResults;
        
        /// <summary>
        /// Operations for long-running operation results
        /// </summary>
        public virtual IOperationResultOperations OperationResults
        {
            get { return this._operationResults; }
        }
        
        private IPublishingOperations _publishing;
        
        /// <summary>
        /// Operations related to publishing.
        /// </summary>
        public virtual IPublishingOperations Publishing
        {
            get { return this._publishing; }
        }
        
        private IRemoteAppPrincipalOperations _users;
        
        /// <summary>
        /// RemoteApp principal operations.
        /// </summary>
        public virtual IRemoteAppPrincipalOperations Users
        {
            get { return this._users; }
        }
        
        private IRemoteAppServiceOperations _services;
        
        /// <summary>
        /// Operation specific documentations goes here.
        /// </summary>
        public virtual IRemoteAppServiceOperations Services
        {
            get { return this._services; }
        }
        
        private ITemplateImageOperations _templateImages;
        
        /// <summary>
        /// Operations to create, modify, list, and delete template images.
        /// </summary>
        public virtual ITemplateImageOperations TemplateImages
        {
            get { return this._templateImages; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RemoteAppManagementClient class.
        /// </summary>
        private RemoteAppManagementClient()
            : base()
        {
            this._logs = new DiagnosticOperations(this);
            this._operationResults = new OperationResultOperations(this);
            this._publishing = new PublishingOperations(this);
            this._users = new RemoteAppPrincipalOperations(this);
            this._services = new RemoteAppServiceOperations(this);
            this._templateImages = new TemplateImageOperations(this);
            this._apiVersion = "2014-09-01";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the RemoteAppManagementClient class.
        /// </summary>
        /// <param name='rdfeNamespace'>
        /// Required.
        /// </param>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Required. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public RemoteAppManagementClient(string rdfeNamespace, SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (rdfeNamespace == null)
            {
                throw new ArgumentNullException("rdfeNamespace");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._rdfeNamespace = rdfeNamespace;
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the RemoteAppManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public RemoteAppManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._rdfeNamespace = "remoteapp";
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the RemoteAppManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        private RemoteAppManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._logs = new DiagnosticOperations(this);
            this._operationResults = new OperationResultOperations(this);
            this._publishing = new PublishingOperations(this);
            this._users = new RemoteAppPrincipalOperations(this);
            this._services = new RemoteAppServiceOperations(this);
            this._templateImages = new TemplateImageOperations(this);
            this._apiVersion = "2014-09-01";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the RemoteAppManagementClient class.
        /// </summary>
        /// <param name='rdfeNamespace'>
        /// Required.
        /// </param>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Required. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public RemoteAppManagementClient(string rdfeNamespace, SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (rdfeNamespace == null)
            {
                throw new ArgumentNullException("rdfeNamespace");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._rdfeNamespace = rdfeNamespace;
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the RemoteAppManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public RemoteAppManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._rdfeNamespace = "remoteapp";
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// RemoteAppManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of RemoteAppManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<RemoteAppManagementClient> client)
        {
            base.Clone(client);
            
            if (client is RemoteAppManagementClient)
            {
                RemoteAppManagementClient clonedClient = ((RemoteAppManagementClient)client);
                
                clonedClient._rdfeNamespace = this._rdfeNamespace;
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
    }
    
    public static partial class DiagnosticOperationsExtensions
    {
        /// <summary>
        /// Returns the summary of the operations related to the given
        /// parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IDiagnosticOperations.
        /// </param>
        /// <param name='startTime'>
        /// Required. Start date and time.
        /// </param>
        /// <param name='endTime'>
        /// Required. End date and time.
        /// </param>
        /// <returns>
        /// Response of the transaction overview.
        /// </returns>
        public static DiagnosticOverviewResult Overview(this IDiagnosticOperations operations, DateTime startTime, DateTime endTime)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDiagnosticOperations)s).OverviewAsync(startTime, endTime);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the summary of the operations related to the given
        /// parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IDiagnosticOperations.
        /// </param>
        /// <param name='startTime'>
        /// Required. Start date and time.
        /// </param>
        /// <param name='endTime'>
        /// Required. End date and time.
        /// </param>
        /// <returns>
        /// Response of the transaction overview.
        /// </returns>
        public static Task<DiagnosticOverviewResult> OverviewAsync(this IDiagnosticOperations operations, DateTime startTime, DateTime endTime)
        {
            return operations.OverviewAsync(startTime, endTime, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the summary of the operations related to the given
        /// parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IDiagnosticOperations.
        /// </param>
        /// <param name='userUpn'>
        /// Optional. A user upn.
        /// </param>
        /// <param name='startTime'>
        /// Required. Start date and time.
        /// </param>
        /// <param name='endTime'>
        /// Required. End date and time.
        /// </param>
        /// <returns>
        /// Response of the transaction summary.
        /// </returns>
        public static DiagnosticSummaryResult Summary(this IDiagnosticOperations operations, string userUpn, DateTime startTime, DateTime endTime)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDiagnosticOperations)s).SummaryAsync(userUpn, startTime, endTime);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the summary of the operations related to the given
        /// parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IDiagnosticOperations.
        /// </param>
        /// <param name='userUpn'>
        /// Optional. A user upn.
        /// </param>
        /// <param name='startTime'>
        /// Required. Start date and time.
        /// </param>
        /// <param name='endTime'>
        /// Required. End date and time.
        /// </param>
        /// <returns>
        /// Response of the transaction summary.
        /// </returns>
        public static Task<DiagnosticSummaryResult> SummaryAsync(this IDiagnosticOperations operations, string userUpn, DateTime startTime, DateTime endTime)
        {
            return operations.SummaryAsync(userUpn, startTime, endTime, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Diagnostic logs.
    /// </summary>
    public partial interface IDiagnosticOperations
    {
        /// <summary>
        /// Returns the summary of the operations related to the given
        /// parameters.
        /// </summary>
        /// <param name='startTime'>
        /// Start date and time.
        /// </param>
        /// <param name='endTime'>
        /// End date and time.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of the transaction overview.
        /// </returns>
        Task<DiagnosticOverviewResult> OverviewAsync(DateTime startTime, DateTime endTime, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns the summary of the operations related to the given
        /// parameters.
        /// </summary>
        /// <param name='userUpn'>
        /// A user upn.
        /// </param>
        /// <param name='startTime'>
        /// Start date and time.
        /// </param>
        /// <param name='endTime'>
        /// End date and time.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of the transaction summary.
        /// </returns>
        Task<DiagnosticSummaryResult> SummaryAsync(string userUpn, DateTime startTime, DateTime endTime, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Diagnostic logs.
    /// </summary>
    internal partial class DiagnosticOperations : IServiceOperations<RemoteAppManagementClient>, IDiagnosticOperations
    {
        /// <summary>
        /// Initializes a new instance of the DiagnosticOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DiagnosticOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Returns the summary of the operations related to the given
        /// parameters.
        /// </summary>
        /// <param name='startTime'>
        /// Required. Start date and time.
        /// </param>
        /// <param name='endTime'>
        /// Required. End date and time.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of the transaction overview.
        /// </returns>
        public async Task<DiagnosticOverviewResult> OverviewAsync(DateTime startTime, DateTime endTime, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("startTime", startTime);
                tracingParameters.Add("endTime", endTime);
                Tracing.Enter(invocationId, this, "OverviewAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/diagnostics/overview?";
            url = url + "StartTime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", startTime.ToUniversalTime()));
            url = url + "&EndTime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", endTime.ToUniversalTime()));
            url = url + "&api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DiagnosticOverviewResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DiagnosticOverviewResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the summary of the operations related to the given
        /// parameters.
        /// </summary>
        /// <param name='userUpn'>
        /// Optional. A user upn.
        /// </param>
        /// <param name='startTime'>
        /// Required. Start date and time.
        /// </param>
        /// <param name='endTime'>
        /// Required. End date and time.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of the transaction summary.
        /// </returns>
        public async Task<DiagnosticSummaryResult> SummaryAsync(string userUpn, DateTime startTime, DateTime endTime, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("userUpn", userUpn);
                tracingParameters.Add("startTime", startTime);
                tracingParameters.Add("endTime", endTime);
                Tracing.Enter(invocationId, this, "SummaryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/diagnostics/summary?";
            if (userUpn != null)
            {
                url = url + "userUpn=" + Uri.EscapeDataString(userUpn != null ? userUpn.Trim() : "");
            }
            url = url + "&StartTime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", startTime.ToUniversalTime()));
            url = url + "&EndTime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", endTime.ToUniversalTime()));
            url = url + "&api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DiagnosticSummaryResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DiagnosticSummaryResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class OperationResultOperationsExtensions
    {
        /// <summary>
        /// OperationResultOperations.Get retrieves the status of a
        /// long-running operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IOperationResultOperations.
        /// </param>
        /// <param name='trackingId'>
        /// Optional.
        /// </param>
        /// <returns>
        /// Operation response for OperationResultOperations.Get.
        /// </returns>
        public static GetOperationResultResponse Get(this IOperationResultOperations operations, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOperationResultOperations)s).GetAsync(trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// OperationResultOperations.Get retrieves the status of a
        /// long-running operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IOperationResultOperations.
        /// </param>
        /// <param name='trackingId'>
        /// Optional.
        /// </param>
        /// <returns>
        /// Operation response for OperationResultOperations.Get.
        /// </returns>
        public static Task<GetOperationResultResponse> GetAsync(this IOperationResultOperations operations, string trackingId)
        {
            return operations.GetAsync(trackingId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for long-running operation results
    /// </summary>
    public partial interface IOperationResultOperations
    {
        /// <summary>
        /// OperationResultOperations.Get retrieves the status of a
        /// long-running operation.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for OperationResultOperations.Get.
        /// </returns>
        Task<GetOperationResultResponse> GetAsync(string trackingId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for long-running operation results
    /// </summary>
    internal partial class OperationResultOperations : IServiceOperations<RemoteAppManagementClient>, IOperationResultOperations
    {
        /// <summary>
        /// Initializes a new instance of the OperationResultOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal OperationResultOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// OperationResultOperations.Get retrieves the status of a
        /// long-running operation.
        /// </summary>
        /// <param name='trackingId'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for OperationResultOperations.Get.
        /// </returns>
        public async Task<GetOperationResultResponse> GetAsync(string trackingId, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("trackingId", trackingId);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/RemoteApp/operationResults/" + (trackingId != null ? trackingId.Trim() : "");
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-09-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetOperationResultResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GetOperationResultResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        OperationResult remoteAppOperationResultInstance = new OperationResult();
                        result.RemoteAppOperationResult = remoteAppOperationResultInstance;
                        
                        JToken statusValue = responseDoc["Status"];
                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                        {
                            RemoteAppOperationStatus statusInstance = ((RemoteAppOperationStatus)Enum.Parse(typeof(RemoteAppOperationStatus), ((string)statusValue), true));
                            remoteAppOperationResultInstance.Status = statusInstance;
                        }
                        
                        JToken descriptionValue = responseDoc["Description"];
                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                        {
                            string descriptionInstance = ((string)descriptionValue);
                            remoteAppOperationResultInstance.Description = descriptionInstance;
                        }
                        
                        JToken errorDetailsValue = responseDoc["ErrorDetails"];
                        if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                        {
                            string errorDetailsInstance = ((string)errorDetailsValue);
                            remoteAppOperationResultInstance.ErrorDetails = errorDetailsInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class PublishingOperationsExtensions
    {
        /// <summary>
        /// Modifies a published application with given alias (short unique
        /// name).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='alias'>
        /// Required. Alias of published application
        /// </param>
        /// <param name='applicationDetails'>
        /// Required. New details for the application
        /// </param>
        /// <returns>
        /// Definition for result of ModifyApplicaton operation.
        /// </returns>
        public static ModifyApplicationResult ModifyApplication(this IPublishingOperations operations, string collectionId, string alias, ApplicationDetailsParameter applicationDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPublishingOperations)s).ModifyApplicationAsync(collectionId, alias, applicationDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Modifies a published application with given alias (short unique
        /// name).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='alias'>
        /// Required. Alias of published application
        /// </param>
        /// <param name='applicationDetails'>
        /// Required. New details for the application
        /// </param>
        /// <returns>
        /// Definition for result of ModifyApplicaton operation.
        /// </returns>
        public static Task<ModifyApplicationResult> ModifyApplicationAsync(this IPublishingOperations operations, string collectionId, string alias, ApplicationDetailsParameter applicationDetails)
        {
            return operations.ModifyApplicationAsync(collectionId, alias, applicationDetails, CancellationToken.None);
        }
        
        /// <summary>
        /// Publishes remote applications with given application details.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='applicationDetailsList'>
        /// Required. List of publishing details
        /// </param>
        /// <returns>
        /// Definition for result of PublishApplications operation.
        /// </returns>
        public static PublishApplicationsResult PublishApplications(this IPublishingOperations operations, string collectionId, ApplicationDetailsListParameter applicationDetailsList)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPublishingOperations)s).PublishApplicationsAsync(collectionId, applicationDetailsList);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Publishes remote applications with given application details.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='applicationDetailsList'>
        /// Required. List of publishing details
        /// </param>
        /// <returns>
        /// Definition for result of PublishApplications operation.
        /// </returns>
        public static Task<PublishApplicationsResult> PublishApplicationsAsync(this IPublishingOperations operations, string collectionId, ApplicationDetailsListParameter applicationDetailsList)
        {
            return operations.PublishApplicationsAsync(collectionId, applicationDetailsList, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the details of a published application with given alias
        /// (short unique name).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='alias'>
        /// Required. Alias of published application
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplication operation.
        /// </returns>
        public static GetPublishedApplicationResult PublishedApplication(this IPublishingOperations operations, string collectionId, string alias)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPublishingOperations)s).PublishedApplicationAsync(collectionId, alias);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the details of a published application with given alias
        /// (short unique name).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='alias'>
        /// Required. Alias of published application
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplication operation.
        /// </returns>
        public static Task<GetPublishedApplicationResult> PublishedApplicationAsync(this IPublishingOperations operations, string collectionId, string alias)
        {
            return operations.PublishedApplicationAsync(collectionId, alias, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns a list of details for all published applications.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplicationList operation.
        /// </returns>
        public static GetPublishedApplicationListResult PublishedApplicationList(this IPublishingOperations operations, string collectionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPublishingOperations)s).PublishedApplicationListAsync(collectionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns a list of details for all published applications.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplicationList operation.
        /// </returns>
        public static Task<GetPublishedApplicationListResult> PublishedApplicationListAsync(this IPublishingOperations operations, string collectionId)
        {
            return operations.PublishedApplicationListAsync(collectionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns start menu application with given application id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='applicationId'>
        /// Required. Start menu application Id
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplication operation.
        /// </returns>
        public static GetStartMenuApplicationResult StartMenuApplication(this IPublishingOperations operations, string collectionId, string applicationId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPublishingOperations)s).StartMenuApplicationAsync(collectionId, applicationId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns start menu application with given application id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='applicationId'>
        /// Required. Start menu application Id
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplication operation.
        /// </returns>
        public static Task<GetStartMenuApplicationResult> StartMenuApplicationAsync(this IPublishingOperations operations, string collectionId, string applicationId)
        {
            return operations.StartMenuApplicationAsync(collectionId, applicationId, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the list of all start menu applications.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplicationList operation.
        /// </returns>
        public static GetStartMenuApplicationListResult StartMenuApplicationList(this IPublishingOperations operations, string collectionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPublishingOperations)s).StartMenuApplicationListAsync(collectionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the list of all start menu applications.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplicationList operation.
        /// </returns>
        public static Task<GetStartMenuApplicationListResult> StartMenuApplicationListAsync(this IPublishingOperations operations, string collectionId)
        {
            return operations.StartMenuApplicationListAsync(collectionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Unpublishes published applications in given list of application
        /// aliases (short unique names).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='aliasesList'>
        /// Required. List of application aliases to be unpublished
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishApplications operation.
        /// </returns>
        public static UnpublishApplicationsResult Unpublish(this IPublishingOperations operations, string collectionId, AliasesListParameter aliasesList)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPublishingOperations)s).UnpublishAsync(collectionId, aliasesList);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Unpublishes published applications in given list of application
        /// aliases (short unique names).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='aliasesList'>
        /// Required. List of application aliases to be unpublished
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishApplications operation.
        /// </returns>
        public static Task<UnpublishApplicationsResult> UnpublishAsync(this IPublishingOperations operations, string collectionId, AliasesListParameter aliasesList)
        {
            return operations.UnpublishAsync(collectionId, aliasesList, CancellationToken.None);
        }
        
        /// <summary>
        /// Unpublishes all published applications.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishAllApplications operation.
        /// </returns>
        public static UnpublishAllApplicationsResult UnpublishAll(this IPublishingOperations operations, string collectionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IPublishingOperations)s).UnpublishAllAsync(collectionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Unpublishes all published applications.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IPublishingOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishAllApplications operation.
        /// </returns>
        public static Task<UnpublishAllApplicationsResult> UnpublishAllAsync(this IPublishingOperations operations, string collectionId)
        {
            return operations.UnpublishAllAsync(collectionId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations related to publishing.
    /// </summary>
    public partial interface IPublishingOperations
    {
        /// <summary>
        /// Modifies a published application with given alias (short unique
        /// name).
        /// </summary>
        /// <param name='collectionId'>
        /// Collection Id
        /// </param>
        /// <param name='alias'>
        /// Alias of published application
        /// </param>
        /// <param name='applicationDetails'>
        /// New details for the application
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of ModifyApplicaton operation.
        /// </returns>
        Task<ModifyApplicationResult> ModifyApplicationAsync(string collectionId, string alias, ApplicationDetailsParameter applicationDetails, CancellationToken cancellationToken);
        
        /// <summary>
        /// Publishes remote applications with given application details.
        /// </summary>
        /// <param name='collectionId'>
        /// Collection Id
        /// </param>
        /// <param name='applicationDetailsList'>
        /// List of publishing details
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of PublishApplications operation.
        /// </returns>
        Task<PublishApplicationsResult> PublishApplicationsAsync(string collectionId, ApplicationDetailsListParameter applicationDetailsList, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns the details of a published application with given alias
        /// (short unique name).
        /// </summary>
        /// <param name='collectionId'>
        /// Collection Id
        /// </param>
        /// <param name='alias'>
        /// Alias of published application
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplication operation.
        /// </returns>
        Task<GetPublishedApplicationResult> PublishedApplicationAsync(string collectionId, string alias, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns a list of details for all published applications.
        /// </summary>
        /// <param name='collectionId'>
        /// Collection Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplicationList operation.
        /// </returns>
        Task<GetPublishedApplicationListResult> PublishedApplicationListAsync(string collectionId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns start menu application with given application id.
        /// </summary>
        /// <param name='collectionId'>
        /// Collection Id
        /// </param>
        /// <param name='applicationId'>
        /// Start menu application Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplication operation.
        /// </returns>
        Task<GetStartMenuApplicationResult> StartMenuApplicationAsync(string collectionId, string applicationId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns the list of all start menu applications.
        /// </summary>
        /// <param name='collectionId'>
        /// Collection Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplicationList operation.
        /// </returns>
        Task<GetStartMenuApplicationListResult> StartMenuApplicationListAsync(string collectionId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Unpublishes published applications in given list of application
        /// aliases (short unique names).
        /// </summary>
        /// <param name='collectionId'>
        /// Collection Id
        /// </param>
        /// <param name='aliasesList'>
        /// List of application aliases to be unpublished
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishApplications operation.
        /// </returns>
        Task<UnpublishApplicationsResult> UnpublishAsync(string collectionId, AliasesListParameter aliasesList, CancellationToken cancellationToken);
        
        /// <summary>
        /// Unpublishes all published applications.
        /// </summary>
        /// <param name='collectionId'>
        /// Collection Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishAllApplications operation.
        /// </returns>
        Task<UnpublishAllApplicationsResult> UnpublishAllAsync(string collectionId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations related to publishing.
    /// </summary>
    internal partial class PublishingOperations : IServiceOperations<RemoteAppManagementClient>, IPublishingOperations
    {
        /// <summary>
        /// Initializes a new instance of the PublishingOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal PublishingOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Modifies a published application with given alias (short unique
        /// name).
        /// </summary>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='alias'>
        /// Required. Alias of published application
        /// </param>
        /// <param name='applicationDetails'>
        /// Required. New details for the application
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of ModifyApplicaton operation.
        /// </returns>
        public async Task<ModifyApplicationResult> ModifyApplicationAsync(string collectionId, string alias, ApplicationDetailsParameter applicationDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            if (alias == null)
            {
                throw new ArgumentNullException("alias");
            }
            if (applicationDetails == null)
            {
                throw new ArgumentNullException("applicationDetails");
            }
            if (applicationDetails.Details != null)
            {
                if (applicationDetails.Details.Name == null)
                {
                    throw new ArgumentNullException("applicationDetails.Details.Name");
                }
                if (applicationDetails.Details.RemoteAppServiceId == null)
                {
                    throw new ArgumentNullException("applicationDetails.Details.RemoteAppServiceId");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                tracingParameters.Add("alias", alias);
                tracingParameters.Add("applicationDetails", applicationDetails);
                Tracing.Enter(invocationId, this, "ModifyApplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/applications/" + alias.Trim() + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (applicationDetails.Details != null)
                {
                    requestDoc = new JObject();
                    requestDoc["AvailableToUsers"] = applicationDetails.Details.AvailableToUsers;
                    
                    if (applicationDetails.Details.Alias != null)
                    {
                        requestDoc["Alias"] = applicationDetails.Details.Alias;
                    }
                    
                    if (applicationDetails.Details.CommandLineArguments != null)
                    {
                        requestDoc["CommandLineArguments"] = applicationDetails.Details.CommandLineArguments;
                    }
                    
                    if (applicationDetails.Details.IconUri != null)
                    {
                        requestDoc["IconUri"] = applicationDetails.Details.IconUri;
                    }
                    
                    requestDoc["Name"] = applicationDetails.Details.Name;
                    
                    requestDoc["RemoteAppServiceId"] = applicationDetails.Details.RemoteAppServiceId;
                    
                    requestDoc["Status"] = ((int)applicationDetails.Details.Status);
                    
                    if (applicationDetails.Details.SubscriptionId != null)
                    {
                        requestDoc["SubscriptionId"] = applicationDetails.Details.SubscriptionId;
                    }
                    
                    if (applicationDetails.Details.VirtualPath != null)
                    {
                        requestDoc["VirtualPath"] = applicationDetails.Details.VirtualPath;
                    }
                    
                    if (applicationDetails.Details.IconPngUris != null)
                    {
                        JObject iconPngUriValue = new JObject();
                        requestDoc["IconPngUri"] = iconPngUriValue;
                        
                        JArray iconPngUrisDictionary = new JArray();
                        if (applicationDetails.Details.IconPngUris.IconPngUris != null)
                        {
                            foreach (KeyValuePair<int, string> pair in applicationDetails.Details.IconPngUris.IconPngUris)
                            {
                                int iconPngUrisKey = pair.Key;
                                string iconPngUrisValue = pair.Value;
                                JObject iconPngUrisItemObject = new JObject();
                                iconPngUrisItemObject["Key"] = iconPngUrisKey;
                                iconPngUrisItemObject["Value"] = iconPngUrisValue;
                                iconPngUrisDictionary.Add(iconPngUrisItemObject);
                            }
                        }
                        iconPngUriValue["IconPngUris"] = iconPngUrisDictionary;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ModifyApplicationResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ModifyApplicationResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        PublishingOperationResult publishingOpResultInstance = new PublishingOperationResult();
                        result.Result = publishingOpResultInstance;
                        
                        JToken applicationAliasValue = responseDoc["ApplicationAlias"];
                        if (applicationAliasValue != null && applicationAliasValue.Type != JTokenType.Null)
                        {
                            string applicationAliasInstance = ((string)applicationAliasValue);
                            publishingOpResultInstance.ApplicationAlias = applicationAliasInstance;
                        }
                        
                        JToken applicationVirtualPathValue = responseDoc["ApplicationVirtualPath"];
                        if (applicationVirtualPathValue != null && applicationVirtualPathValue.Type != JTokenType.Null)
                        {
                            string applicationVirtualPathInstance = ((string)applicationVirtualPathValue);
                            publishingOpResultInstance.ApplicationVirtualPath = applicationVirtualPathInstance;
                        }
                        
                        JToken successValue = responseDoc["Success"];
                        if (successValue != null && successValue.Type != JTokenType.Null)
                        {
                            bool successInstance = ((bool)successValue);
                            publishingOpResultInstance.Success = successInstance;
                        }
                        
                        JToken errorMessageValue = responseDoc["ErrorMessage"];
                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                        {
                            string errorMessageInstance = ((string)errorMessageValue);
                            publishingOpResultInstance.ErrorMessage = errorMessageInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Publishes remote applications with given application details.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='applicationDetailsList'>
        /// Required. List of publishing details
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of PublishApplications operation.
        /// </returns>
        public async Task<PublishApplicationsResult> PublishApplicationsAsync(string collectionId, ApplicationDetailsListParameter applicationDetailsList, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            if (applicationDetailsList == null)
            {
                throw new ArgumentNullException("applicationDetailsList");
            }
            if (applicationDetailsList.DetailsList != null)
            {
                foreach (PublishedApplicationDetails detailsListParameterItem in applicationDetailsList.DetailsList)
                {
                    if (detailsListParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("applicationDetailsList.DetailsList.Name");
                    }
                    if (detailsListParameterItem.RemoteAppServiceId == null)
                    {
                        throw new ArgumentNullException("applicationDetailsList.DetailsList.RemoteAppServiceId");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                tracingParameters.Add("applicationDetailsList", applicationDetailsList);
                Tracing.Enter(invocationId, this, "PublishApplicationsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/applications?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (applicationDetailsList.DetailsList != null)
                {
                    JArray detailsListArray = new JArray();
                    foreach (PublishedApplicationDetails detailsListItem in applicationDetailsList.DetailsList)
                    {
                        requestDoc = new JObject();
                        requestDoc["AvailableToUsers"] = detailsListItem.AvailableToUsers;
                        
                        if (detailsListItem.Alias != null)
                        {
                            requestDoc["Alias"] = detailsListItem.Alias;
                        }
                        
                        if (detailsListItem.CommandLineArguments != null)
                        {
                            requestDoc["CommandLineArguments"] = detailsListItem.CommandLineArguments;
                        }
                        
                        if (detailsListItem.IconUri != null)
                        {
                            requestDoc["IconUri"] = detailsListItem.IconUri;
                        }
                        
                        requestDoc["Name"] = detailsListItem.Name;
                        
                        requestDoc["RemoteAppServiceId"] = detailsListItem.RemoteAppServiceId;
                        
                        requestDoc["Status"] = ((int)detailsListItem.Status);
                        
                        if (detailsListItem.SubscriptionId != null)
                        {
                            requestDoc["SubscriptionId"] = detailsListItem.SubscriptionId;
                        }
                        
                        if (detailsListItem.VirtualPath != null)
                        {
                            requestDoc["VirtualPath"] = detailsListItem.VirtualPath;
                        }
                        
                        if (detailsListItem.IconPngUris != null)
                        {
                            JObject iconPngUriValue = new JObject();
                            requestDoc["IconPngUri"] = iconPngUriValue;
                            
                            JArray iconPngUrisDictionary = new JArray();
                            if (detailsListItem.IconPngUris.IconPngUris != null)
                            {
                                foreach (KeyValuePair<int, string> pair in detailsListItem.IconPngUris.IconPngUris)
                                {
                                    int iconPngUrisKey = pair.Key;
                                    string iconPngUrisValue = pair.Value;
                                    JObject iconPngUrisItemObject = new JObject();
                                    iconPngUrisItemObject["Key"] = iconPngUrisKey;
                                    iconPngUrisItemObject["Value"] = iconPngUrisValue;
                                    iconPngUrisDictionary.Add(iconPngUrisItemObject);
                                }
                            }
                            iconPngUriValue["IconPngUris"] = iconPngUrisDictionary;
                        }
                    }
                    requestDoc = detailsListArray;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PublishApplicationsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new PublishApplicationsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken resultListArray = responseDoc;
                        if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                        {
                            foreach (JToken resultListValue in ((JArray)resultListArray))
                            {
                                PublishingOperationResult publishingOperationResultInstance = new PublishingOperationResult();
                                result.ResultList.Add(publishingOperationResultInstance);
                                
                                JToken applicationAliasValue = resultListValue["ApplicationAlias"];
                                if (applicationAliasValue != null && applicationAliasValue.Type != JTokenType.Null)
                                {
                                    string applicationAliasInstance = ((string)applicationAliasValue);
                                    publishingOperationResultInstance.ApplicationAlias = applicationAliasInstance;
                                }
                                
                                JToken applicationVirtualPathValue = resultListValue["ApplicationVirtualPath"];
                                if (applicationVirtualPathValue != null && applicationVirtualPathValue.Type != JTokenType.Null)
                                {
                                    string applicationVirtualPathInstance = ((string)applicationVirtualPathValue);
                                    publishingOperationResultInstance.ApplicationVirtualPath = applicationVirtualPathInstance;
                                }
                                
                                JToken successValue = resultListValue["Success"];
                                if (successValue != null && successValue.Type != JTokenType.Null)
                                {
                                    bool successInstance = ((bool)successValue);
                                    publishingOperationResultInstance.Success = successInstance;
                                }
                                
                                JToken errorMessageValue = resultListValue["ErrorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    publishingOperationResultInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the details of a published application with given alias
        /// (short unique name).
        /// </summary>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='alias'>
        /// Required. Alias of published application
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplication operation.
        /// </returns>
        public async Task<GetPublishedApplicationResult> PublishedApplicationAsync(string collectionId, string alias, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            if (alias == null)
            {
                throw new ArgumentNullException("alias");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                tracingParameters.Add("alias", alias);
                Tracing.Enter(invocationId, this, "PublishedApplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/applications/" + alias.Trim() + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetPublishedApplicationResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GetPublishedApplicationResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken getPublishedApplicationResultValue = responseDoc["GetPublishedApplicationResult"];
                    if (getPublishedApplicationResultValue != null && getPublishedApplicationResultValue.Type != JTokenType.Null)
                    {
                        GetPublishedApplicationResult getPublishedApplicationResultInstance = new GetPublishedApplicationResult();
                        
                        PublishedApplicationDetails resultInstance = new PublishedApplicationDetails();
                        result.Result = resultInstance;
                        
                        JToken availableToUsersValue = getPublishedApplicationResultValue["AvailableToUsers"];
                        if (availableToUsersValue != null && availableToUsersValue.Type != JTokenType.Null)
                        {
                            bool availableToUsersInstance = ((bool)availableToUsersValue);
                            resultInstance.AvailableToUsers = availableToUsersInstance;
                        }
                        
                        JToken aliasValue = getPublishedApplicationResultValue["Alias"];
                        if (aliasValue != null && aliasValue.Type != JTokenType.Null)
                        {
                            string aliasInstance = ((string)aliasValue);
                            resultInstance.Alias = aliasInstance;
                        }
                        
                        JToken commandLineArgumentsValue = getPublishedApplicationResultValue["CommandLineArguments"];
                        if (commandLineArgumentsValue != null && commandLineArgumentsValue.Type != JTokenType.Null)
                        {
                            string commandLineArgumentsInstance = ((string)commandLineArgumentsValue);
                            resultInstance.CommandLineArguments = commandLineArgumentsInstance;
                        }
                        
                        JToken iconUriValue = getPublishedApplicationResultValue["IconUri"];
                        if (iconUriValue != null && iconUriValue.Type != JTokenType.Null)
                        {
                            string iconUriInstance = ((string)iconUriValue);
                            resultInstance.IconUri = iconUriInstance;
                        }
                        
                        JToken nameValue = getPublishedApplicationResultValue["Name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            resultInstance.Name = nameInstance;
                        }
                        
                        JToken remoteAppServiceIdValue = getPublishedApplicationResultValue["RemoteAppServiceId"];
                        if (remoteAppServiceIdValue != null && remoteAppServiceIdValue.Type != JTokenType.Null)
                        {
                            string remoteAppServiceIdInstance = ((string)remoteAppServiceIdValue);
                            resultInstance.RemoteAppServiceId = remoteAppServiceIdInstance;
                        }
                        
                        JToken statusValue = getPublishedApplicationResultValue["Status"];
                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                        {
                            AppPublishingStatus statusInstance = ((AppPublishingStatus)(((int)statusValue)));
                            resultInstance.Status = statusInstance;
                        }
                        
                        JToken subscriptionIdValue = getPublishedApplicationResultValue["SubscriptionId"];
                        if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                        {
                            string subscriptionIdInstance = ((string)subscriptionIdValue);
                            resultInstance.SubscriptionId = subscriptionIdInstance;
                        }
                        
                        JToken virtualPathValue = getPublishedApplicationResultValue["VirtualPath"];
                        if (virtualPathValue != null && virtualPathValue.Type != JTokenType.Null)
                        {
                            string virtualPathInstance = ((string)virtualPathValue);
                            resultInstance.VirtualPath = virtualPathInstance;
                        }
                        
                        JToken iconPngUriValue = getPublishedApplicationResultValue["IconPngUri"];
                        if (iconPngUriValue != null && iconPngUriValue.Type != JTokenType.Null)
                        {
                            IconPngUrisType iconPngUriInstance = new IconPngUrisType();
                            resultInstance.IconPngUris = iconPngUriInstance;
                            
                            JToken iconPngUrisSequenceElement = ((JToken)iconPngUriValue);
                            if (iconPngUrisSequenceElement != null && iconPngUrisSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JToken iconPngUrisElement in ((JArray)iconPngUrisSequenceElement))
                                {
                                    int iconPngUrisKey = ((int)iconPngUrisElement["Key"]);
                                    string iconPngUrisValue = ((string)iconPngUrisElement["Value"]);
                                    iconPngUriInstance.IconPngUris.Add(iconPngUrisKey, iconPngUrisValue);
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns a list of details for all published applications.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetPublishedApplicationList operation.
        /// </returns>
        public async Task<GetPublishedApplicationListResult> PublishedApplicationListAsync(string collectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                Tracing.Enter(invocationId, this, "PublishedApplicationListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/applications?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetPublishedApplicationListResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GetPublishedApplicationListResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken resultListArray = responseDoc;
                        if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                        {
                            foreach (JToken resultListValue in ((JArray)resultListArray))
                            {
                                PublishedApplicationDetails publishedApplicationDetailsInstance = new PublishedApplicationDetails();
                                result.ResultList.Add(publishedApplicationDetailsInstance);
                                
                                JToken availableToUsersValue = resultListValue["AvailableToUsers"];
                                if (availableToUsersValue != null && availableToUsersValue.Type != JTokenType.Null)
                                {
                                    bool availableToUsersInstance = ((bool)availableToUsersValue);
                                    publishedApplicationDetailsInstance.AvailableToUsers = availableToUsersInstance;
                                }
                                
                                JToken aliasValue = resultListValue["Alias"];
                                if (aliasValue != null && aliasValue.Type != JTokenType.Null)
                                {
                                    string aliasInstance = ((string)aliasValue);
                                    publishedApplicationDetailsInstance.Alias = aliasInstance;
                                }
                                
                                JToken commandLineArgumentsValue = resultListValue["CommandLineArguments"];
                                if (commandLineArgumentsValue != null && commandLineArgumentsValue.Type != JTokenType.Null)
                                {
                                    string commandLineArgumentsInstance = ((string)commandLineArgumentsValue);
                                    publishedApplicationDetailsInstance.CommandLineArguments = commandLineArgumentsInstance;
                                }
                                
                                JToken iconUriValue = resultListValue["IconUri"];
                                if (iconUriValue != null && iconUriValue.Type != JTokenType.Null)
                                {
                                    string iconUriInstance = ((string)iconUriValue);
                                    publishedApplicationDetailsInstance.IconUri = iconUriInstance;
                                }
                                
                                JToken nameValue = resultListValue["Name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    publishedApplicationDetailsInstance.Name = nameInstance;
                                }
                                
                                JToken remoteAppServiceIdValue = resultListValue["RemoteAppServiceId"];
                                if (remoteAppServiceIdValue != null && remoteAppServiceIdValue.Type != JTokenType.Null)
                                {
                                    string remoteAppServiceIdInstance = ((string)remoteAppServiceIdValue);
                                    publishedApplicationDetailsInstance.RemoteAppServiceId = remoteAppServiceIdInstance;
                                }
                                
                                JToken statusValue = resultListValue["Status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    AppPublishingStatus statusInstance = ((AppPublishingStatus)(((int)statusValue)));
                                    publishedApplicationDetailsInstance.Status = statusInstance;
                                }
                                
                                JToken subscriptionIdValue = resultListValue["SubscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    publishedApplicationDetailsInstance.SubscriptionId = subscriptionIdInstance;
                                }
                                
                                JToken virtualPathValue = resultListValue["VirtualPath"];
                                if (virtualPathValue != null && virtualPathValue.Type != JTokenType.Null)
                                {
                                    string virtualPathInstance = ((string)virtualPathValue);
                                    publishedApplicationDetailsInstance.VirtualPath = virtualPathInstance;
                                }
                                
                                JToken iconPngUriValue = resultListValue["IconPngUri"];
                                if (iconPngUriValue != null && iconPngUriValue.Type != JTokenType.Null)
                                {
                                    IconPngUrisType iconPngUriInstance = new IconPngUrisType();
                                    publishedApplicationDetailsInstance.IconPngUris = iconPngUriInstance;
                                    
                                    JToken iconPngUrisSequenceElement = ((JToken)iconPngUriValue);
                                    if (iconPngUrisSequenceElement != null && iconPngUrisSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JToken iconPngUrisElement in ((JArray)iconPngUrisSequenceElement))
                                        {
                                            int iconPngUrisKey = ((int)iconPngUrisElement["Key"]);
                                            string iconPngUrisValue = ((string)iconPngUrisElement["Value"]);
                                            iconPngUriInstance.IconPngUris.Add(iconPngUrisKey, iconPngUrisValue);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns start menu application with given application id.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='applicationId'>
        /// Required. Start menu application Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplication operation.
        /// </returns>
        public async Task<GetStartMenuApplicationResult> StartMenuApplicationAsync(string collectionId, string applicationId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                tracingParameters.Add("applicationId", applicationId);
                Tracing.Enter(invocationId, this, "StartMenuApplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/startMenuApplications/" + applicationId.Trim() + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetStartMenuApplicationResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GetStartMenuApplicationResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        StartMenuApplication resultInstance = new StartMenuApplication();
                        result.Result = resultInstance;
                        
                        JToken commandLineArgumentsValue = responseDoc["CommandLineArguments"];
                        if (commandLineArgumentsValue != null && commandLineArgumentsValue.Type != JTokenType.Null)
                        {
                            string commandLineArgumentsInstance = ((string)commandLineArgumentsValue);
                            resultInstance.CommandLineArguments = commandLineArgumentsInstance;
                        }
                        
                        JToken iconPngUrisSequenceElement = ((JToken)responseDoc["IconPngUris"]);
                        if (iconPngUrisSequenceElement != null && iconPngUrisSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JToken iconPngUrisElement in ((JArray)iconPngUrisSequenceElement))
                            {
                                int iconPngUrisKey = ((int)iconPngUrisElement["Key"]);
                                string iconPngUrisValue = ((string)iconPngUrisElement["Value"]);
                                resultInstance.IconPngUris.Add(iconPngUrisKey, iconPngUrisValue);
                            }
                        }
                        
                        JToken iconUriValue = responseDoc["IconUri"];
                        if (iconUriValue != null && iconUriValue.Type != JTokenType.Null)
                        {
                            string iconUriInstance = ((string)iconUriValue);
                            resultInstance.IconUri = iconUriInstance;
                        }
                        
                        JToken idValue = responseDoc["Id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            resultInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["Name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            resultInstance.Name = nameInstance;
                        }
                        
                        JToken subscriptionIdValue = responseDoc["SubscriptionId"];
                        if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                        {
                            string subscriptionIdInstance = ((string)subscriptionIdValue);
                            resultInstance.SubscriptionId = subscriptionIdInstance;
                        }
                        
                        JToken templateImageIdValue = responseDoc["TemplateImageId"];
                        if (templateImageIdValue != null && templateImageIdValue.Type != JTokenType.Null)
                        {
                            string templateImageIdInstance = ((string)templateImageIdValue);
                            resultInstance.TemplateImageId = templateImageIdInstance;
                        }
                        
                        JToken virtualPathValue = responseDoc["VirtualPath"];
                        if (virtualPathValue != null && virtualPathValue.Type != JTokenType.Null)
                        {
                            string virtualPathInstance = ((string)virtualPathValue);
                            resultInstance.VirtualPath = virtualPathInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the list of all start menu applications.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of GetStartMenuApplicationList operation.
        /// </returns>
        public async Task<GetStartMenuApplicationListResult> StartMenuApplicationListAsync(string collectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                Tracing.Enter(invocationId, this, "StartMenuApplicationListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/startMenuApplications?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetStartMenuApplicationListResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GetStartMenuApplicationListResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken resultListArray = responseDoc;
                        if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                        {
                            foreach (JToken resultListValue in ((JArray)resultListArray))
                            {
                                StartMenuApplication startMenuApplicationInstance = new StartMenuApplication();
                                result.ResultList.Add(startMenuApplicationInstance);
                                
                                JToken commandLineArgumentsValue = resultListValue["CommandLineArguments"];
                                if (commandLineArgumentsValue != null && commandLineArgumentsValue.Type != JTokenType.Null)
                                {
                                    string commandLineArgumentsInstance = ((string)commandLineArgumentsValue);
                                    startMenuApplicationInstance.CommandLineArguments = commandLineArgumentsInstance;
                                }
                                
                                JToken iconPngUrisSequenceElement = ((JToken)resultListValue["IconPngUris"]);
                                if (iconPngUrisSequenceElement != null && iconPngUrisSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JToken iconPngUrisElement in ((JArray)iconPngUrisSequenceElement))
                                    {
                                        int iconPngUrisKey = ((int)iconPngUrisElement["Key"]);
                                        string iconPngUrisValue = ((string)iconPngUrisElement["Value"]);
                                        startMenuApplicationInstance.IconPngUris.Add(iconPngUrisKey, iconPngUrisValue);
                                    }
                                }
                                
                                JToken iconUriValue = resultListValue["IconUri"];
                                if (iconUriValue != null && iconUriValue.Type != JTokenType.Null)
                                {
                                    string iconUriInstance = ((string)iconUriValue);
                                    startMenuApplicationInstance.IconUri = iconUriInstance;
                                }
                                
                                JToken idValue = resultListValue["Id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    startMenuApplicationInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = resultListValue["Name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    startMenuApplicationInstance.Name = nameInstance;
                                }
                                
                                JToken subscriptionIdValue = resultListValue["SubscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    startMenuApplicationInstance.SubscriptionId = subscriptionIdInstance;
                                }
                                
                                JToken templateImageIdValue = resultListValue["TemplateImageId"];
                                if (templateImageIdValue != null && templateImageIdValue.Type != JTokenType.Null)
                                {
                                    string templateImageIdInstance = ((string)templateImageIdValue);
                                    startMenuApplicationInstance.TemplateImageId = templateImageIdInstance;
                                }
                                
                                JToken virtualPathValue = resultListValue["VirtualPath"];
                                if (virtualPathValue != null && virtualPathValue.Type != JTokenType.Null)
                                {
                                    string virtualPathInstance = ((string)virtualPathValue);
                                    startMenuApplicationInstance.VirtualPath = virtualPathInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unpublishes published applications in given list of application
        /// aliases (short unique names).
        /// </summary>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='aliasesList'>
        /// Required. List of application aliases to be unpublished
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishApplications operation.
        /// </returns>
        public async Task<UnpublishApplicationsResult> UnpublishAsync(string collectionId, AliasesListParameter aliasesList, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            if (aliasesList == null)
            {
                throw new ArgumentNullException("aliasesList");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                tracingParameters.Add("aliasesList", aliasesList);
                Tracing.Enter(invocationId, this, "UnpublishAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/applications?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (aliasesList.AliasesList != null)
                {
                    JArray aliasesArray = new JArray();
                    foreach (string aliasesItem in aliasesList.AliasesList)
                    {
                        aliasesArray.Add(aliasesItem);
                    }
                    requestDoc = aliasesArray;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UnpublishApplicationsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new UnpublishApplicationsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken resultListArray = responseDoc;
                        if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                        {
                            foreach (JToken resultListValue in ((JArray)resultListArray))
                            {
                                PublishingOperationResult publishingOperationResultInstance = new PublishingOperationResult();
                                result.ResultList.Add(publishingOperationResultInstance);
                                
                                JToken applicationAliasValue = resultListValue["ApplicationAlias"];
                                if (applicationAliasValue != null && applicationAliasValue.Type != JTokenType.Null)
                                {
                                    string applicationAliasInstance = ((string)applicationAliasValue);
                                    publishingOperationResultInstance.ApplicationAlias = applicationAliasInstance;
                                }
                                
                                JToken applicationVirtualPathValue = resultListValue["ApplicationVirtualPath"];
                                if (applicationVirtualPathValue != null && applicationVirtualPathValue.Type != JTokenType.Null)
                                {
                                    string applicationVirtualPathInstance = ((string)applicationVirtualPathValue);
                                    publishingOperationResultInstance.ApplicationVirtualPath = applicationVirtualPathInstance;
                                }
                                
                                JToken successValue = resultListValue["Success"];
                                if (successValue != null && successValue.Type != JTokenType.Null)
                                {
                                    bool successInstance = ((bool)successValue);
                                    publishingOperationResultInstance.Success = successInstance;
                                }
                                
                                JToken errorMessageValue = resultListValue["ErrorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    publishingOperationResultInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unpublishes all published applications.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. Collection Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Definition for result of UnpublishAllApplications operation.
        /// </returns>
        public async Task<UnpublishAllApplicationsResult> UnpublishAllAsync(string collectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                Tracing.Enter(invocationId, this, "UnpublishAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/applications/unpublishAll?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UnpublishAllApplicationsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new UnpublishAllApplicationsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken resultListArray = responseDoc;
                        if (resultListArray != null && resultListArray.Type != JTokenType.Null)
                        {
                            foreach (JToken resultListValue in ((JArray)resultListArray))
                            {
                                PublishingOperationResult publishingOperationResultInstance = new PublishingOperationResult();
                                result.ResultList.Add(publishingOperationResultInstance);
                                
                                JToken applicationAliasValue = resultListValue["ApplicationAlias"];
                                if (applicationAliasValue != null && applicationAliasValue.Type != JTokenType.Null)
                                {
                                    string applicationAliasInstance = ((string)applicationAliasValue);
                                    publishingOperationResultInstance.ApplicationAlias = applicationAliasInstance;
                                }
                                
                                JToken applicationVirtualPathValue = resultListValue["ApplicationVirtualPath"];
                                if (applicationVirtualPathValue != null && applicationVirtualPathValue.Type != JTokenType.Null)
                                {
                                    string applicationVirtualPathInstance = ((string)applicationVirtualPathValue);
                                    publishingOperationResultInstance.ApplicationVirtualPath = applicationVirtualPathInstance;
                                }
                                
                                JToken successValue = resultListValue["Success"];
                                if (successValue != null && successValue.Type != JTokenType.Null)
                                {
                                    bool successInstance = ((bool)successValue);
                                    publishingOperationResultInstance.Success = successInstance;
                                }
                                
                                JToken errorMessageValue = resultListValue["ErrorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    publishingOperationResultInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class RemoteAppPrincipalOperationsExtensions
    {
        /// <summary>
        /// Add the list of principals to the given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppPrincipalOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The RemoteApp collection id.
        /// </param>
        /// <param name='securityPrincipalList'>
        /// Required. A list of RemoteApp principals to add.
        /// </param>
        /// <returns>
        /// The response for the collection user operation.
        /// </returns>
        public static ServicePrincipalOperationsResult Add(this IRemoteAppPrincipalOperations operations, string collectionId, SecurityPrincipalList securityPrincipalList)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRemoteAppPrincipalOperations)s).AddAsync(collectionId, securityPrincipalList);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Add the list of principals to the given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppPrincipalOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The RemoteApp collection id.
        /// </param>
        /// <param name='securityPrincipalList'>
        /// Required. A list of RemoteApp principals to add.
        /// </param>
        /// <returns>
        /// The response for the collection user operation.
        /// </returns>
        public static Task<ServicePrincipalOperationsResult> AddAsync(this IRemoteAppPrincipalOperations operations, string collectionId, SecurityPrincipalList securityPrincipalList)
        {
            return operations.AddAsync(collectionId, securityPrincipalList, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the list of principals from the given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppPrincipalOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The RemoteApp collection id.
        /// </param>
        /// <param name='securityPrincipalList'>
        /// Required. A list of RemoteApp principals to delete.
        /// </param>
        /// <returns>
        /// The response for the collection user operation.
        /// </returns>
        public static ServicePrincipalOperationsResult Delete(this IRemoteAppPrincipalOperations operations, string collectionId, SecurityPrincipalList securityPrincipalList)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRemoteAppPrincipalOperations)s).DeleteAsync(collectionId, securityPrincipalList);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the list of principals from the given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppPrincipalOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The RemoteApp collection id.
        /// </param>
        /// <param name='securityPrincipalList'>
        /// Required. A list of RemoteApp principals to delete.
        /// </param>
        /// <returns>
        /// The response for the collection user operation.
        /// </returns>
        public static Task<ServicePrincipalOperationsResult> DeleteAsync(this IRemoteAppPrincipalOperations operations, string collectionId, SecurityPrincipalList securityPrincipalList)
        {
            return operations.DeleteAsync(collectionId, securityPrincipalList, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the list of all RemoteApp principals associated with the
        /// given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppPrincipalOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The RemoteApp collection id.
        /// </param>
        /// <returns>
        /// The list of principals with consent status.
        /// </returns>
        public static GetServicePrincipalListResult List(this IRemoteAppPrincipalOperations operations, string collectionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRemoteAppPrincipalOperations)s).ListAsync(collectionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the list of all RemoteApp principals associated with the
        /// given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppPrincipalOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The RemoteApp collection id.
        /// </param>
        /// <returns>
        /// The list of principals with consent status.
        /// </returns>
        public static Task<GetServicePrincipalListResult> ListAsync(this IRemoteAppPrincipalOperations operations, string collectionId)
        {
            return operations.ListAsync(collectionId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// RemoteApp principal operations.
    /// </summary>
    public partial interface IRemoteAppPrincipalOperations
    {
        /// <summary>
        /// Add the list of principals to the given collection.
        /// </summary>
        /// <param name='collectionId'>
        /// The RemoteApp collection id.
        /// </param>
        /// <param name='securityPrincipalList'>
        /// A list of RemoteApp principals to add.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the collection user operation.
        /// </returns>
        Task<ServicePrincipalOperationsResult> AddAsync(string collectionId, SecurityPrincipalList securityPrincipalList, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes the list of principals from the given collection.
        /// </summary>
        /// <param name='collectionId'>
        /// The RemoteApp collection id.
        /// </param>
        /// <param name='securityPrincipalList'>
        /// A list of RemoteApp principals to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the collection user operation.
        /// </returns>
        Task<ServicePrincipalOperationsResult> DeleteAsync(string collectionId, SecurityPrincipalList securityPrincipalList, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns the list of all RemoteApp principals associated with the
        /// given collection.
        /// </summary>
        /// <param name='collectionId'>
        /// The RemoteApp collection id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of principals with consent status.
        /// </returns>
        Task<GetServicePrincipalListResult> ListAsync(string collectionId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// RemoteApp principal operations.
    /// </summary>
    internal partial class RemoteAppPrincipalOperations : IServiceOperations<RemoteAppManagementClient>, IRemoteAppPrincipalOperations
    {
        /// <summary>
        /// Initializes a new instance of the RemoteAppPrincipalOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RemoteAppPrincipalOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Add the list of principals to the given collection.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. The RemoteApp collection id.
        /// </param>
        /// <param name='securityPrincipalList'>
        /// Required. A list of RemoteApp principals to add.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the collection user operation.
        /// </returns>
        public async Task<ServicePrincipalOperationsResult> AddAsync(string collectionId, SecurityPrincipalList securityPrincipalList, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            if (securityPrincipalList == null)
            {
                throw new ArgumentNullException("securityPrincipalList");
            }
            if (securityPrincipalList.SecurityPrincipals != null)
            {
                foreach (SecurityPrincipal securityPrincipalsParameterItem in securityPrincipalList.SecurityPrincipals)
                {
                    if (securityPrincipalsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("securityPrincipalList.SecurityPrincipals.Name");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                tracingParameters.Add("securityPrincipalList", securityPrincipalList);
                Tracing.Enter(invocationId, this, "AddAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/securityPrincipals?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (securityPrincipalList.SecurityPrincipals != null)
                {
                    JArray securityPrincipalsArray = new JArray();
                    foreach (SecurityPrincipal securityPrincipalsItem in securityPrincipalList.SecurityPrincipals)
                    {
                        requestDoc = new JObject();
                        requestDoc["SecurityPrincipalType"] = ((int)securityPrincipalsItem.SecurityPrincipalType);
                        
                        requestDoc["UserIdType"] = ((int)securityPrincipalsItem.UserIdType);
                        
                        requestDoc["Name"] = securityPrincipalsItem.Name;
                        
                        if (securityPrincipalsItem.AadObjectId != null)
                        {
                            requestDoc["AadObjectId"] = securityPrincipalsItem.AadObjectId;
                        }
                        
                        if (securityPrincipalsItem.Description != null)
                        {
                            requestDoc["Description"] = securityPrincipalsItem.Description;
                        }
                    }
                    requestDoc = securityPrincipalsArray;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServicePrincipalOperationsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ServicePrincipalOperationsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken securityPrincipalOperationErrorDetailsArray = responseDoc["SecurityPrincipalOperationErrorDetails"];
                        if (securityPrincipalOperationErrorDetailsArray != null && securityPrincipalOperationErrorDetailsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken securityPrincipalOperationErrorDetailsValue in ((JArray)securityPrincipalOperationErrorDetailsArray))
                            {
                                SecurityPrincipalOperationErrorDetails securityPrincipalOperationErrorDetailsInstance = new SecurityPrincipalOperationErrorDetails();
                                result.Statuses.Add(securityPrincipalOperationErrorDetailsInstance);
                                
                                JToken securityPrincipalValue = securityPrincipalOperationErrorDetailsValue["SecurityPrincipal"];
                                if (securityPrincipalValue != null && securityPrincipalValue.Type != JTokenType.Null)
                                {
                                    string securityPrincipalInstance = ((string)securityPrincipalValue);
                                    securityPrincipalOperationErrorDetailsInstance.SecurityPrincipal = securityPrincipalInstance;
                                }
                                
                                JToken errorValue = securityPrincipalOperationErrorDetailsValue["Error"];
                                if (errorValue != null && errorValue.Type != JTokenType.Null)
                                {
                                    SecurityPrincipalOperationError errorInstance = ((SecurityPrincipalOperationError)(((int)errorValue)));
                                    securityPrincipalOperationErrorDetailsInstance.Error = errorInstance;
                                }
                            }
                        }
                        
                        JToken trackingIdValue = responseDoc["TrackingId"];
                        if (trackingIdValue != null && trackingIdValue.Type != JTokenType.Null)
                        {
                            string trackingIdInstance = ((string)trackingIdValue);
                            result.TrackingId = trackingIdInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the list of principals from the given collection.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. The RemoteApp collection id.
        /// </param>
        /// <param name='securityPrincipalList'>
        /// Required. A list of RemoteApp principals to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the collection user operation.
        /// </returns>
        public async Task<ServicePrincipalOperationsResult> DeleteAsync(string collectionId, SecurityPrincipalList securityPrincipalList, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            if (securityPrincipalList == null)
            {
                throw new ArgumentNullException("securityPrincipalList");
            }
            if (securityPrincipalList.SecurityPrincipals != null)
            {
                foreach (SecurityPrincipal securityPrincipalsParameterItem in securityPrincipalList.SecurityPrincipals)
                {
                    if (securityPrincipalsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("securityPrincipalList.SecurityPrincipals.Name");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                tracingParameters.Add("securityPrincipalList", securityPrincipalList);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/securityPrincipals?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (securityPrincipalList.SecurityPrincipals != null)
                {
                    JArray securityPrincipalsArray = new JArray();
                    foreach (SecurityPrincipal securityPrincipalsItem in securityPrincipalList.SecurityPrincipals)
                    {
                        requestDoc = new JObject();
                        requestDoc["SecurityPrincipalType"] = ((int)securityPrincipalsItem.SecurityPrincipalType);
                        
                        requestDoc["UserIdType"] = ((int)securityPrincipalsItem.UserIdType);
                        
                        requestDoc["Name"] = securityPrincipalsItem.Name;
                        
                        if (securityPrincipalsItem.AadObjectId != null)
                        {
                            requestDoc["AadObjectId"] = securityPrincipalsItem.AadObjectId;
                        }
                        
                        if (securityPrincipalsItem.Description != null)
                        {
                            requestDoc["Description"] = securityPrincipalsItem.Description;
                        }
                    }
                    requestDoc = securityPrincipalsArray;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServicePrincipalOperationsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ServicePrincipalOperationsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken securityPrincipalOperationErrorDetailsArray = responseDoc["SecurityPrincipalOperationErrorDetails"];
                        if (securityPrincipalOperationErrorDetailsArray != null && securityPrincipalOperationErrorDetailsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken securityPrincipalOperationErrorDetailsValue in ((JArray)securityPrincipalOperationErrorDetailsArray))
                            {
                                SecurityPrincipalOperationErrorDetails securityPrincipalOperationErrorDetailsInstance = new SecurityPrincipalOperationErrorDetails();
                                result.Statuses.Add(securityPrincipalOperationErrorDetailsInstance);
                                
                                JToken securityPrincipalValue = securityPrincipalOperationErrorDetailsValue["SecurityPrincipal"];
                                if (securityPrincipalValue != null && securityPrincipalValue.Type != JTokenType.Null)
                                {
                                    string securityPrincipalInstance = ((string)securityPrincipalValue);
                                    securityPrincipalOperationErrorDetailsInstance.SecurityPrincipal = securityPrincipalInstance;
                                }
                                
                                JToken errorValue = securityPrincipalOperationErrorDetailsValue["Error"];
                                if (errorValue != null && errorValue.Type != JTokenType.Null)
                                {
                                    SecurityPrincipalOperationError errorInstance = ((SecurityPrincipalOperationError)(((int)errorValue)));
                                    securityPrincipalOperationErrorDetailsInstance.Error = errorInstance;
                                }
                            }
                        }
                        
                        JToken trackingIdValue = responseDoc["TrackingId"];
                        if (trackingIdValue != null && trackingIdValue.Type != JTokenType.Null)
                        {
                            string trackingIdInstance = ((string)trackingIdValue);
                            result.TrackingId = trackingIdInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the list of all RemoteApp principals associated with the
        /// given collection.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. The RemoteApp collection id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of principals with consent status.
        /// </returns>
        public async Task<GetServicePrincipalListResult> ListAsync(string collectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "/securityPrincipals?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetServicePrincipalListResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GetServicePrincipalListResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken serviceUserConsentStatusListArray = responseDoc["ServiceUserConsentStatusList"];
                        if (serviceUserConsentStatusListArray != null && serviceUserConsentStatusListArray.Type != JTokenType.Null)
                        {
                            foreach (JToken serviceUserConsentStatusListValue in ((JArray)serviceUserConsentStatusListArray))
                            {
                                ServiceUserConsentStatus serviceUserConsentStatusInstance = new ServiceUserConsentStatus();
                                result.Users.Add(serviceUserConsentStatusInstance);
                                
                                JToken securityPrincipalValue = serviceUserConsentStatusListValue["SecurityPrincipal"];
                                if (securityPrincipalValue != null && securityPrincipalValue.Type != JTokenType.Null)
                                {
                                    SecurityPrincipal securityPrincipalInstance = new SecurityPrincipal();
                                    serviceUserConsentStatusInstance.SecurityPrincipal = securityPrincipalInstance;
                                    
                                    JToken securityPrincipalTypeValue = securityPrincipalValue["SecurityPrincipalType"];
                                    if (securityPrincipalTypeValue != null && securityPrincipalTypeValue.Type != JTokenType.Null)
                                    {
                                        PrincipalType securityPrincipalTypeInstance = ((PrincipalType)(((int)securityPrincipalTypeValue)));
                                        securityPrincipalInstance.SecurityPrincipalType = securityPrincipalTypeInstance;
                                    }
                                    
                                    JToken userIdTypeValue = securityPrincipalValue["UserIdType"];
                                    if (userIdTypeValue != null && userIdTypeValue.Type != JTokenType.Null)
                                    {
                                        PrincipalProviderType userIdTypeInstance = ((PrincipalProviderType)(((int)userIdTypeValue)));
                                        securityPrincipalInstance.UserIdType = userIdTypeInstance;
                                    }
                                    
                                    JToken nameValue = securityPrincipalValue["Name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        securityPrincipalInstance.Name = nameInstance;
                                    }
                                    
                                    JToken aadObjectIdValue = securityPrincipalValue["AadObjectId"];
                                    if (aadObjectIdValue != null && aadObjectIdValue.Type != JTokenType.Null)
                                    {
                                        string aadObjectIdInstance = ((string)aadObjectIdValue);
                                        securityPrincipalInstance.AadObjectId = aadObjectIdInstance;
                                    }
                                    
                                    JToken descriptionValue = securityPrincipalValue["Description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        securityPrincipalInstance.Description = descriptionInstance;
                                    }
                                }
                                
                                JToken statusValue = serviceUserConsentStatusListValue["Status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    ConsentStatus statusInstance = ((ConsentStatus)(((int)statusValue)));
                                    serviceUserConsentStatusInstance.Status = statusInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class RemoteAppServiceOperationsExtensions
    {
        /// <summary>
        /// Request to create a collection with the given information.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// creation details of the collection or update and deploy (true for
        /// populate only).
        /// </param>
        /// <param name='serviceDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId Create(this IRemoteAppServiceOperations operations, bool populateOnly, ServiceCreationDetails serviceDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRemoteAppServiceOperations)s).CreateAsync(populateOnly, serviceDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Request to create a collection with the given information.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// creation details of the collection or update and deploy (true for
        /// populate only).
        /// </param>
        /// <param name='serviceDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> CreateAsync(this IRemoteAppServiceOperations operations, bool populateOnly, ServiceCreationDetails serviceDetails)
        {
            return operations.CreateAsync(populateOnly, serviceDetails, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId Delete(this IRemoteAppServiceOperations operations, string collectionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRemoteAppServiceOperations)s).DeleteAsync(collectionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the given collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> DeleteAsync(this IRemoteAppServiceOperations operations, string collectionId)
        {
            return operations.DeleteAsync(collectionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the result for a given collection
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public static GetServiceResult Get(this IRemoteAppServiceOperations operations, string collectionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRemoteAppServiceOperations)s).GetAsync(collectionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the result for a given collection
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public static Task<GetServiceResult> GetAsync(this IRemoteAppServiceOperations operations, string collectionId)
        {
            return operations.GetAsync(collectionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the list of all collection currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public static GetServiceListResult List(this IRemoteAppServiceOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRemoteAppServiceOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the list of all collection currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public static Task<GetServiceListResult> ListAsync(this IRemoteAppServiceOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the list of all regions currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <returns>
        /// The list of locations.
        /// </returns>
        public static GetRegionListResult RegionList(this IRemoteAppServiceOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRemoteAppServiceOperations)s).RegionListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the list of all regions currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <returns>
        /// The list of locations.
        /// </returns>
        public static Task<GetRegionListResult> RegionListAsync(this IRemoteAppServiceOperations operations)
        {
            return operations.RegionListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Returns the collection information for the given collectionId for
        /// the subscription Id
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <param name='forceRedeploy'>
        /// Required. A flag denoting if the request is to re-deploy the
        /// collection after it is updated.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// collection details(true for populate only).
        /// </param>
        /// <param name='serviceDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static OperationResultWithTrackingId Set(this IRemoteAppServiceOperations operations, bool collectionId, bool forceRedeploy, bool populateOnly, ServiceCreationDetails serviceDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRemoteAppServiceOperations)s).SetAsync(collectionId, forceRedeploy, populateOnly, serviceDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns the collection information for the given collectionId for
        /// the subscription Id
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.IRemoteAppServiceOperations.
        /// </param>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <param name='forceRedeploy'>
        /// Required. A flag denoting if the request is to re-deploy the
        /// collection after it is updated.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// collection details(true for populate only).
        /// </param>
        /// <param name='serviceDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public static Task<OperationResultWithTrackingId> SetAsync(this IRemoteAppServiceOperations operations, bool collectionId, bool forceRedeploy, bool populateOnly, ServiceCreationDetails serviceDetails)
        {
            return operations.SetAsync(collectionId, forceRedeploy, populateOnly, serviceDetails, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operation specific documentations goes here.
    /// </summary>
    public partial interface IRemoteAppServiceOperations
    {
        /// <summary>
        /// Request to create a collection with the given information.
        /// </summary>
        /// <param name='populateOnly'>
        /// A flag denoting if the request is to populate the creation details
        /// of the collection or update and deploy (true for populate only).
        /// </param>
        /// <param name='serviceDetails'>
        /// Details for the collection to be created.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        Task<OperationResultWithTrackingId> CreateAsync(bool populateOnly, ServiceCreationDetails serviceDetails, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes the given collection.
        /// </summary>
        /// <param name='collectionId'>
        /// The collection id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        Task<OperationResultWithTrackingId> DeleteAsync(string collectionId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns the result for a given collection
        /// </summary>
        /// <param name='collectionId'>
        /// The collection id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        Task<GetServiceResult> GetAsync(string collectionId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns the list of all collection currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        Task<GetServiceListResult> ListAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns the list of all regions currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of locations.
        /// </returns>
        Task<GetRegionListResult> RegionListAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns the collection information for the given collectionId for
        /// the subscription Id
        /// </summary>
        /// <param name='collectionId'>
        /// The collection id.
        /// </param>
        /// <param name='forceRedeploy'>
        /// A flag denoting if the request is to re-deploy the collection after
        /// it is updated.
        /// </param>
        /// <param name='populateOnly'>
        /// A flag denoting if the request is to populate the collection
        /// details(true for populate only).
        /// </param>
        /// <param name='serviceDetails'>
        /// Details for the collection to be created.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        Task<OperationResultWithTrackingId> SetAsync(bool collectionId, bool forceRedeploy, bool populateOnly, ServiceCreationDetails serviceDetails, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operation specific documentations goes here.
    /// </summary>
    internal partial class RemoteAppServiceOperations : IServiceOperations<RemoteAppManagementClient>, IRemoteAppServiceOperations
    {
        /// <summary>
        /// Initializes a new instance of the RemoteAppServiceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RemoteAppServiceOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Request to create a collection with the given information.
        /// </summary>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// creation details of the collection or update and deploy (true for
        /// populate only).
        /// </param>
        /// <param name='serviceDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> CreateAsync(bool populateOnly, ServiceCreationDetails serviceDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceDetails == null)
            {
                throw new ArgumentNullException("serviceDetails");
            }
            if (serviceDetails.AllowedPrincipals != null)
            {
                foreach (SecurityPrincipal allowedPrincipalsParameterItem in serviceDetails.AllowedPrincipals)
                {
                    if (allowedPrincipalsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("serviceDetails.AllowedPrincipals.Name");
                    }
                }
            }
            if (serviceDetails.BillingPlanId == null)
            {
                throw new ArgumentNullException("serviceDetails.BillingPlanId");
            }
            if (serviceDetails.Name == null)
            {
                throw new ArgumentNullException("serviceDetails.Name");
            }
            if (serviceDetails.PublishedApplications != null)
            {
                foreach (PublishedApplicationDetails publishedApplicationsParameterItem in serviceDetails.PublishedApplications)
                {
                    if (publishedApplicationsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("serviceDetails.PublishedApplications.Name");
                    }
                    if (publishedApplicationsParameterItem.RemoteAppServiceId == null)
                    {
                        throw new ArgumentNullException("serviceDetails.PublishedApplications.RemoteAppServiceId");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("populateOnly", populateOnly);
                tracingParameters.Add("serviceDetails", serviceDetails);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices?";
            url = url + "PopulateOnly=" + Uri.EscapeDataString(populateOnly.ToString().ToLower());
            url = url + "&api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject serviceCreationDetailsValue = new JObject();
                requestDoc = serviceCreationDetailsValue;
                
                serviceCreationDetailsValue["Name"] = serviceDetails.Name;
                
                if (serviceDetails.Description != null)
                {
                    serviceCreationDetailsValue["Description"] = serviceDetails.Description;
                }
                
                if (serviceDetails.TemplateImageId != null)
                {
                    serviceCreationDetailsValue["TemplateImageId"] = serviceDetails.TemplateImageId;
                }
                
                if (serviceDetails.VnetName != null)
                {
                    serviceCreationDetailsValue["VnetName"] = serviceDetails.VnetName;
                }
                
                if (serviceDetails.ActiveDirectoryConfigId != null)
                {
                    serviceCreationDetailsValue["ActiveDirectoryConfigId"] = serviceDetails.ActiveDirectoryConfigId;
                }
                
                serviceCreationDetailsValue["BillingPlanId"] = serviceDetails.BillingPlanId;
                
                if (serviceDetails.CustomRdpProperty != null)
                {
                    serviceCreationDetailsValue["CustomRdpProperty"] = serviceDetails.CustomRdpProperty;
                }
                
                serviceCreationDetailsValue["OpenForPublishing"] = serviceDetails.OpenForPublishing;
                
                serviceCreationDetailsValue["ServiceMode"] = ((int)serviceDetails.Mode);
                
                serviceCreationDetailsValue["WaitBeforeShutdownInMinutes"] = serviceDetails.WaitBeforeShutdownInMinutes;
                
                if (serviceDetails.Location != null)
                {
                    serviceCreationDetailsValue["Location"] = serviceDetails.Location;
                }
                
                serviceCreationDetailsValue["ServiceType"] = ((int)serviceDetails.ServiceType);
                
                if (serviceDetails.PublishedApplications != null)
                {
                    JArray publishedApplicationsArray = new JArray();
                    foreach (PublishedApplicationDetails publishedApplicationsItem in serviceDetails.PublishedApplications)
                    {
                        requestDoc["AvailableToUsers"] = publishedApplicationsItem.AvailableToUsers;
                        
                        if (publishedApplicationsItem.Alias != null)
                        {
                            requestDoc["Alias"] = publishedApplicationsItem.Alias;
                        }
                        
                        if (publishedApplicationsItem.CommandLineArguments != null)
                        {
                            requestDoc["CommandLineArguments"] = publishedApplicationsItem.CommandLineArguments;
                        }
                        
                        if (publishedApplicationsItem.IconUri != null)
                        {
                            requestDoc["IconUri"] = publishedApplicationsItem.IconUri;
                        }
                        
                        requestDoc["Name"] = publishedApplicationsItem.Name;
                        
                        requestDoc["RemoteAppServiceId"] = publishedApplicationsItem.RemoteAppServiceId;
                        
                        requestDoc["Status"] = ((int)publishedApplicationsItem.Status);
                        
                        if (publishedApplicationsItem.SubscriptionId != null)
                        {
                            requestDoc["SubscriptionId"] = publishedApplicationsItem.SubscriptionId;
                        }
                        
                        if (publishedApplicationsItem.VirtualPath != null)
                        {
                            requestDoc["VirtualPath"] = publishedApplicationsItem.VirtualPath;
                        }
                        
                        if (publishedApplicationsItem.IconPngUris != null)
                        {
                            JObject iconPngUriValue = new JObject();
                            requestDoc["IconPngUri"] = iconPngUriValue;
                            
                            JArray iconPngUrisDictionary = new JArray();
                            if (publishedApplicationsItem.IconPngUris.IconPngUris != null)
                            {
                                foreach (KeyValuePair<int, string> pair in publishedApplicationsItem.IconPngUris.IconPngUris)
                                {
                                    int iconPngUrisKey = pair.Key;
                                    string iconPngUrisValue = pair.Value;
                                    JObject iconPngUrisItemObject = new JObject();
                                    iconPngUrisItemObject["Key"] = iconPngUrisKey;
                                    iconPngUrisItemObject["Value"] = iconPngUrisValue;
                                    iconPngUrisDictionary.Add(iconPngUrisItemObject);
                                }
                            }
                            iconPngUriValue["IconPngUris"] = iconPngUrisDictionary;
                        }
                    }
                    serviceCreationDetailsValue["PublishedApplications"] = publishedApplicationsArray;
                }
                
                if (serviceDetails.AllowedPrincipals != null)
                {
                    JArray allowedPrincipalsArray = new JArray();
                    foreach (SecurityPrincipal allowedPrincipalsItem in serviceDetails.AllowedPrincipals)
                    {
                        requestDoc["SecurityPrincipalType"] = ((int)allowedPrincipalsItem.SecurityPrincipalType);
                        
                        requestDoc["UserIdType"] = ((int)allowedPrincipalsItem.UserIdType);
                        
                        requestDoc["Name"] = allowedPrincipalsItem.Name;
                        
                        if (allowedPrincipalsItem.AadObjectId != null)
                        {
                            requestDoc["AadObjectId"] = allowedPrincipalsItem.AadObjectId;
                        }
                        
                        if (allowedPrincipalsItem.Description != null)
                        {
                            requestDoc["Description"] = allowedPrincipalsItem.Description;
                        }
                    }
                    serviceCreationDetailsValue["AllowedPrincipals"] = allowedPrincipalsArray;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the given collection.
        /// </summary>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> DeleteAsync(string collectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the result for a given collection
        /// </summary>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public async Task<GetServiceResult> GetAsync(string collectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (collectionId == null)
            {
                throw new ArgumentNullException("collectionId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId.Trim() + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetServiceResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GetServiceResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Service serviceInstance = new Service();
                        result.Service = serviceInstance;
                        
                        JToken nameValue = responseDoc["Name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            serviceInstance.Name = nameInstance;
                        }
                        
                        JToken idValue = responseDoc["Id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            serviceInstance.Id = idInstance;
                        }
                        
                        JToken subscriptionIdValue = responseDoc["SubscriptionId"];
                        if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                        {
                            string subscriptionIdInstance = ((string)subscriptionIdValue);
                            serviceInstance.SubscriptionId = subscriptionIdInstance;
                        }
                        
                        JToken descriptionValue = responseDoc["Description"];
                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                        {
                            string descriptionInstance = ((string)descriptionValue);
                            serviceInstance.Description = descriptionInstance;
                        }
                        
                        JToken templateImageIdValue = responseDoc["TemplateImageId"];
                        if (templateImageIdValue != null && templateImageIdValue.Type != JTokenType.Null)
                        {
                            string templateImageIdInstance = ((string)templateImageIdValue);
                            serviceInstance.TemplateImageId = templateImageIdInstance;
                        }
                        
                        JToken statusValue = responseDoc["Status"];
                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                        {
                            string statusInstance = ((string)statusValue);
                            serviceInstance.Status = statusInstance;
                        }
                        
                        JToken lastErrorCodeValue = responseDoc["LastErrorCode"];
                        if (lastErrorCodeValue != null && lastErrorCodeValue.Type != JTokenType.Null)
                        {
                            string lastErrorCodeInstance = ((string)lastErrorCodeValue);
                            serviceInstance.LastErrorCode = lastErrorCodeInstance;
                        }
                        
                        JToken vnetNameValue = responseDoc["VnetName"];
                        if (vnetNameValue != null && vnetNameValue.Type != JTokenType.Null)
                        {
                            string vnetNameInstance = ((string)vnetNameValue);
                            serviceInstance.VnetName = vnetNameInstance;
                        }
                        
                        JToken activeDirectoryConfigIdValue = responseDoc["ActiveDirectoryConfigId"];
                        if (activeDirectoryConfigIdValue != null && activeDirectoryConfigIdValue.Type != JTokenType.Null)
                        {
                            string activeDirectoryConfigIdInstance = ((string)activeDirectoryConfigIdValue);
                            serviceInstance.ActiveDirectoryConfigId = activeDirectoryConfigIdInstance;
                        }
                        
                        JToken billingPlanIdValue = responseDoc["BillingPlanId"];
                        if (billingPlanIdValue != null && billingPlanIdValue.Type != JTokenType.Null)
                        {
                            string billingPlanIdInstance = ((string)billingPlanIdValue);
                            serviceInstance.BillingPlanId = billingPlanIdInstance;
                        }
                        
                        JToken customRdpPropertyValue = responseDoc["CustomRdpProperty"];
                        if (customRdpPropertyValue != null && customRdpPropertyValue.Type != JTokenType.Null)
                        {
                            string customRdpPropertyInstance = ((string)customRdpPropertyValue);
                            serviceInstance.CustomRdpProperty = customRdpPropertyInstance;
                        }
                        
                        JToken openForPublishingValue = responseDoc["OpenForPublishing"];
                        if (openForPublishingValue != null && openForPublishingValue.Type != JTokenType.Null)
                        {
                            bool openForPublishingInstance = ((bool)openForPublishingValue);
                            serviceInstance.OpenForPublishing = openForPublishingInstance;
                        }
                        
                        JToken lastModifiedTimeUtcValue = responseDoc["LastModifiedTimeUtc"];
                        if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                        {
                            DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                            serviceInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                        }
                        
                        JToken serviceModeValue = responseDoc["ServiceMode"];
                        if (serviceModeValue != null && serviceModeValue.Type != JTokenType.Null)
                        {
                            ServiceMode serviceModeInstance = ((ServiceMode)(((int)serviceModeValue)));
                            serviceInstance.Mode = serviceModeInstance;
                        }
                        
                        JToken waitBeforeShutdownInMinutesValue = responseDoc["WaitBeforeShutdownInMinutes"];
                        if (waitBeforeShutdownInMinutesValue != null && waitBeforeShutdownInMinutesValue.Type != JTokenType.Null)
                        {
                            int waitBeforeShutdownInMinutesInstance = ((int)waitBeforeShutdownInMinutesValue);
                            serviceInstance.WaitBeforeShutdownInMinutes = waitBeforeShutdownInMinutesInstance;
                        }
                        
                        JToken locationValue = responseDoc["Location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            serviceInstance.Location = locationInstance;
                        }
                        
                        JToken maxSessionsValue = responseDoc["MaxSessions"];
                        if (maxSessionsValue != null && maxSessionsValue.Type != JTokenType.Null)
                        {
                            int maxSessionsInstance = ((int)maxSessionsValue);
                            serviceInstance.MaxSessions = maxSessionsInstance;
                        }
                        
                        JToken sessionWarningThresholdValue = responseDoc["SessionWarningThreshold"];
                        if (sessionWarningThresholdValue != null && sessionWarningThresholdValue.Type != JTokenType.Null)
                        {
                            int sessionWarningThresholdInstance = ((int)sessionWarningThresholdValue);
                            serviceInstance.SessionWarningThreshold = sessionWarningThresholdInstance;
                        }
                        
                        JToken serviceTypeValue = responseDoc["ServiceType"];
                        if (serviceTypeValue != null && serviceTypeValue.Type != JTokenType.Null)
                        {
                            ServiceType serviceTypeInstance = ((ServiceType)(((int)serviceTypeValue)));
                            serviceInstance.ServiceType = serviceTypeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the list of all collection currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the GetServiceList operation.
        /// </returns>
        public async Task<GetServiceListResult> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetServiceListResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GetServiceListResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken servicesArray = responseDoc;
                        if (servicesArray != null && servicesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken servicesValue in ((JArray)servicesArray))
                            {
                                Service serviceInstance = new Service();
                                result.Services.Add(serviceInstance);
                                
                                JToken nameValue = servicesValue["Name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    serviceInstance.Name = nameInstance;
                                }
                                
                                JToken idValue = servicesValue["Id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    serviceInstance.Id = idInstance;
                                }
                                
                                JToken subscriptionIdValue = servicesValue["SubscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    serviceInstance.SubscriptionId = subscriptionIdInstance;
                                }
                                
                                JToken descriptionValue = servicesValue["Description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    serviceInstance.Description = descriptionInstance;
                                }
                                
                                JToken templateImageIdValue = servicesValue["TemplateImageId"];
                                if (templateImageIdValue != null && templateImageIdValue.Type != JTokenType.Null)
                                {
                                    string templateImageIdInstance = ((string)templateImageIdValue);
                                    serviceInstance.TemplateImageId = templateImageIdInstance;
                                }
                                
                                JToken statusValue = servicesValue["Status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    string statusInstance = ((string)statusValue);
                                    serviceInstance.Status = statusInstance;
                                }
                                
                                JToken lastErrorCodeValue = servicesValue["LastErrorCode"];
                                if (lastErrorCodeValue != null && lastErrorCodeValue.Type != JTokenType.Null)
                                {
                                    string lastErrorCodeInstance = ((string)lastErrorCodeValue);
                                    serviceInstance.LastErrorCode = lastErrorCodeInstance;
                                }
                                
                                JToken vnetNameValue = servicesValue["VnetName"];
                                if (vnetNameValue != null && vnetNameValue.Type != JTokenType.Null)
                                {
                                    string vnetNameInstance = ((string)vnetNameValue);
                                    serviceInstance.VnetName = vnetNameInstance;
                                }
                                
                                JToken activeDirectoryConfigIdValue = servicesValue["ActiveDirectoryConfigId"];
                                if (activeDirectoryConfigIdValue != null && activeDirectoryConfigIdValue.Type != JTokenType.Null)
                                {
                                    string activeDirectoryConfigIdInstance = ((string)activeDirectoryConfigIdValue);
                                    serviceInstance.ActiveDirectoryConfigId = activeDirectoryConfigIdInstance;
                                }
                                
                                JToken billingPlanIdValue = servicesValue["BillingPlanId"];
                                if (billingPlanIdValue != null && billingPlanIdValue.Type != JTokenType.Null)
                                {
                                    string billingPlanIdInstance = ((string)billingPlanIdValue);
                                    serviceInstance.BillingPlanId = billingPlanIdInstance;
                                }
                                
                                JToken customRdpPropertyValue = servicesValue["CustomRdpProperty"];
                                if (customRdpPropertyValue != null && customRdpPropertyValue.Type != JTokenType.Null)
                                {
                                    string customRdpPropertyInstance = ((string)customRdpPropertyValue);
                                    serviceInstance.CustomRdpProperty = customRdpPropertyInstance;
                                }
                                
                                JToken openForPublishingValue = servicesValue["OpenForPublishing"];
                                if (openForPublishingValue != null && openForPublishingValue.Type != JTokenType.Null)
                                {
                                    bool openForPublishingInstance = ((bool)openForPublishingValue);
                                    serviceInstance.OpenForPublishing = openForPublishingInstance;
                                }
                                
                                JToken lastModifiedTimeUtcValue = servicesValue["LastModifiedTimeUtc"];
                                if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                    serviceInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                                }
                                
                                JToken serviceModeValue = servicesValue["ServiceMode"];
                                if (serviceModeValue != null && serviceModeValue.Type != JTokenType.Null)
                                {
                                    ServiceMode serviceModeInstance = ((ServiceMode)(((int)serviceModeValue)));
                                    serviceInstance.Mode = serviceModeInstance;
                                }
                                
                                JToken waitBeforeShutdownInMinutesValue = servicesValue["WaitBeforeShutdownInMinutes"];
                                if (waitBeforeShutdownInMinutesValue != null && waitBeforeShutdownInMinutesValue.Type != JTokenType.Null)
                                {
                                    int waitBeforeShutdownInMinutesInstance = ((int)waitBeforeShutdownInMinutesValue);
                                    serviceInstance.WaitBeforeShutdownInMinutes = waitBeforeShutdownInMinutesInstance;
                                }
                                
                                JToken locationValue = servicesValue["Location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    serviceInstance.Location = locationInstance;
                                }
                                
                                JToken maxSessionsValue = servicesValue["MaxSessions"];
                                if (maxSessionsValue != null && maxSessionsValue.Type != JTokenType.Null)
                                {
                                    int maxSessionsInstance = ((int)maxSessionsValue);
                                    serviceInstance.MaxSessions = maxSessionsInstance;
                                }
                                
                                JToken sessionWarningThresholdValue = servicesValue["SessionWarningThreshold"];
                                if (sessionWarningThresholdValue != null && sessionWarningThresholdValue.Type != JTokenType.Null)
                                {
                                    int sessionWarningThresholdInstance = ((int)sessionWarningThresholdValue);
                                    serviceInstance.SessionWarningThreshold = sessionWarningThresholdInstance;
                                }
                                
                                JToken serviceTypeValue = servicesValue["ServiceType"];
                                if (serviceTypeValue != null && serviceTypeValue.Type != JTokenType.Null)
                                {
                                    ServiceType serviceTypeInstance = ((ServiceType)(((int)serviceTypeValue)));
                                    serviceInstance.ServiceType = serviceTypeInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the list of all regions currently available for the
        /// subscription Id
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of locations.
        /// </returns>
        public async Task<GetRegionListResult> RegionListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "RegionListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/locations?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetRegionListResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new GetRegionListResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken locationsArray = responseDoc["Locations"];
                        if (locationsArray != null && locationsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken locationsValue in ((JArray)locationsArray))
                            {
                                result.Locations.Add(((string)locationsValue));
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns the collection information for the given collectionId for
        /// the subscription Id
        /// </summary>
        /// <param name='collectionId'>
        /// Required. The collection id.
        /// </param>
        /// <param name='forceRedeploy'>
        /// Required. A flag denoting if the request is to re-deploy the
        /// collection after it is updated.
        /// </param>
        /// <param name='populateOnly'>
        /// Required. A flag denoting if the request is to populate the
        /// collection details(true for populate only).
        /// </param>
        /// <param name='serviceDetails'>
        /// Required. Details for the collection to be created.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response containing the operation tracking id.
        /// </returns>
        public async Task<OperationResultWithTrackingId> SetAsync(bool collectionId, bool forceRedeploy, bool populateOnly, ServiceCreationDetails serviceDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (serviceDetails == null)
            {
                throw new ArgumentNullException("serviceDetails");
            }
            if (serviceDetails.AllowedPrincipals != null)
            {
                foreach (SecurityPrincipal allowedPrincipalsParameterItem in serviceDetails.AllowedPrincipals)
                {
                    if (allowedPrincipalsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("serviceDetails.AllowedPrincipals.Name");
                    }
                }
            }
            if (serviceDetails.BillingPlanId == null)
            {
                throw new ArgumentNullException("serviceDetails.BillingPlanId");
            }
            if (serviceDetails.Name == null)
            {
                throw new ArgumentNullException("serviceDetails.Name");
            }
            if (serviceDetails.PublishedApplications != null)
            {
                foreach (PublishedApplicationDetails publishedApplicationsParameterItem in serviceDetails.PublishedApplications)
                {
                    if (publishedApplicationsParameterItem.Name == null)
                    {
                        throw new ArgumentNullException("serviceDetails.PublishedApplications.Name");
                    }
                    if (publishedApplicationsParameterItem.RemoteAppServiceId == null)
                    {
                        throw new ArgumentNullException("serviceDetails.PublishedApplications.RemoteAppServiceId");
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("collectionId", collectionId);
                tracingParameters.Add("forceRedeploy", forceRedeploy);
                tracingParameters.Add("populateOnly", populateOnly);
                tracingParameters.Add("serviceDetails", serviceDetails);
                Tracing.Enter(invocationId, this, "SetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/remoteappServices/" + collectionId + "?";
            url = url + "ForceRedeploy=" + Uri.EscapeDataString(forceRedeploy.ToString().ToLower());
            url = url + "&PopulateOnly=" + Uri.EscapeDataString(populateOnly.ToString().ToLower());
            url = url + "&api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject serviceCreationDetailsValue = new JObject();
                requestDoc = serviceCreationDetailsValue;
                
                serviceCreationDetailsValue["Name"] = serviceDetails.Name;
                
                if (serviceDetails.Description != null)
                {
                    serviceCreationDetailsValue["Description"] = serviceDetails.Description;
                }
                
                if (serviceDetails.TemplateImageId != null)
                {
                    serviceCreationDetailsValue["TemplateImageId"] = serviceDetails.TemplateImageId;
                }
                
                if (serviceDetails.VnetName != null)
                {
                    serviceCreationDetailsValue["VnetName"] = serviceDetails.VnetName;
                }
                
                if (serviceDetails.ActiveDirectoryConfigId != null)
                {
                    serviceCreationDetailsValue["ActiveDirectoryConfigId"] = serviceDetails.ActiveDirectoryConfigId;
                }
                
                serviceCreationDetailsValue["BillingPlanId"] = serviceDetails.BillingPlanId;
                
                if (serviceDetails.CustomRdpProperty != null)
                {
                    serviceCreationDetailsValue["CustomRdpProperty"] = serviceDetails.CustomRdpProperty;
                }
                
                serviceCreationDetailsValue["OpenForPublishing"] = serviceDetails.OpenForPublishing;
                
                serviceCreationDetailsValue["ServiceMode"] = ((int)serviceDetails.Mode);
                
                serviceCreationDetailsValue["WaitBeforeShutdownInMinutes"] = serviceDetails.WaitBeforeShutdownInMinutes;
                
                if (serviceDetails.Location != null)
                {
                    serviceCreationDetailsValue["Location"] = serviceDetails.Location;
                }
                
                serviceCreationDetailsValue["ServiceType"] = ((int)serviceDetails.ServiceType);
                
                if (serviceDetails.PublishedApplications != null)
                {
                    JArray publishedApplicationsArray = new JArray();
                    foreach (PublishedApplicationDetails publishedApplicationsItem in serviceDetails.PublishedApplications)
                    {
                        requestDoc["AvailableToUsers"] = publishedApplicationsItem.AvailableToUsers;
                        
                        if (publishedApplicationsItem.Alias != null)
                        {
                            requestDoc["Alias"] = publishedApplicationsItem.Alias;
                        }
                        
                        if (publishedApplicationsItem.CommandLineArguments != null)
                        {
                            requestDoc["CommandLineArguments"] = publishedApplicationsItem.CommandLineArguments;
                        }
                        
                        if (publishedApplicationsItem.IconUri != null)
                        {
                            requestDoc["IconUri"] = publishedApplicationsItem.IconUri;
                        }
                        
                        requestDoc["Name"] = publishedApplicationsItem.Name;
                        
                        requestDoc["RemoteAppServiceId"] = publishedApplicationsItem.RemoteAppServiceId;
                        
                        requestDoc["Status"] = ((int)publishedApplicationsItem.Status);
                        
                        if (publishedApplicationsItem.SubscriptionId != null)
                        {
                            requestDoc["SubscriptionId"] = publishedApplicationsItem.SubscriptionId;
                        }
                        
                        if (publishedApplicationsItem.VirtualPath != null)
                        {
                            requestDoc["VirtualPath"] = publishedApplicationsItem.VirtualPath;
                        }
                        
                        if (publishedApplicationsItem.IconPngUris != null)
                        {
                            JObject iconPngUriValue = new JObject();
                            requestDoc["IconPngUri"] = iconPngUriValue;
                            
                            JArray iconPngUrisDictionary = new JArray();
                            if (publishedApplicationsItem.IconPngUris.IconPngUris != null)
                            {
                                foreach (KeyValuePair<int, string> pair in publishedApplicationsItem.IconPngUris.IconPngUris)
                                {
                                    int iconPngUrisKey = pair.Key;
                                    string iconPngUrisValue = pair.Value;
                                    JObject iconPngUrisItemObject = new JObject();
                                    iconPngUrisItemObject["Key"] = iconPngUrisKey;
                                    iconPngUrisItemObject["Value"] = iconPngUrisValue;
                                    iconPngUrisDictionary.Add(iconPngUrisItemObject);
                                }
                            }
                            iconPngUriValue["IconPngUris"] = iconPngUrisDictionary;
                        }
                    }
                    serviceCreationDetailsValue["PublishedApplications"] = publishedApplicationsArray;
                }
                
                if (serviceDetails.AllowedPrincipals != null)
                {
                    JArray allowedPrincipalsArray = new JArray();
                    foreach (SecurityPrincipal allowedPrincipalsItem in serviceDetails.AllowedPrincipals)
                    {
                        requestDoc["SecurityPrincipalType"] = ((int)allowedPrincipalsItem.SecurityPrincipalType);
                        
                        requestDoc["UserIdType"] = ((int)allowedPrincipalsItem.UserIdType);
                        
                        requestDoc["Name"] = allowedPrincipalsItem.Name;
                        
                        if (allowedPrincipalsItem.AadObjectId != null)
                        {
                            requestDoc["AadObjectId"] = allowedPrincipalsItem.AadObjectId;
                        }
                        
                        if (allowedPrincipalsItem.Description != null)
                        {
                            requestDoc["Description"] = allowedPrincipalsItem.Description;
                        }
                    }
                    serviceCreationDetailsValue["AllowedPrincipals"] = allowedPrincipalsArray;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResultWithTrackingId result = null;
                    result = new OperationResultWithTrackingId();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-clouddv-tracking-id"))
                    {
                        result.TrackingId = httpResponse.Headers.GetValues("x-clouddv-tracking-id").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public static partial class TemplateImageOperationsExtensions
    {
        /// <summary>
        /// TemplateImageOperations.Delete deletes an existing template image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageId'>
        /// Required. The template image id.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this ITemplateImageOperations operations, string imageId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).DeleteAsync(imageId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// TemplateImageOperations.Delete deletes an existing template image.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageId'>
        /// Required. The template image id.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this ITemplateImageOperations operations, string imageId)
        {
            return operations.DeleteAsync(imageId, CancellationToken.None);
        }
        
        /// <summary>
        /// TemplateImageOperations.List retrieves the template images for the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public static ListTemplateImageResponse List(this ITemplateImageOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// TemplateImageOperations.List retrieves the template images for the
        /// subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public static Task<ListTemplateImageResponse> ListAsync(this ITemplateImageOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// TemplateImageOperations.Set creates or updates an existing template
        /// image.  If the template image already exists, only the Name can be
        /// changed.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageDetails'>
        /// Required. Details for the template image to be created or updated.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public static SetTemplateImageResponse Set(this ITemplateImageOperations operations, SetTemplateImageDetails imageDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITemplateImageOperations)s).SetAsync(imageDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// TemplateImageOperations.Set creates or updates an existing template
        /// image.  If the template image already exists, only the Name can be
        /// changed.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.ITemplateImageOperations.
        /// </param>
        /// <param name='imageDetails'>
        /// Required. Details for the template image to be created or updated.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public static Task<SetTemplateImageResponse> SetAsync(this ITemplateImageOperations operations, SetTemplateImageDetails imageDetails)
        {
            return operations.SetAsync(imageDetails, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations to create, modify, list, and delete template images.
    /// </summary>
    public partial interface ITemplateImageOperations
    {
        /// <summary>
        /// TemplateImageOperations.Delete deletes an existing template image.
        /// </summary>
        /// <param name='imageId'>
        /// The template image id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string imageId, CancellationToken cancellationToken);
        
        /// <summary>
        /// TemplateImageOperations.List retrieves the template images for the
        /// subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        Task<ListTemplateImageResponse> ListAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// TemplateImageOperations.Set creates or updates an existing template
        /// image.  If the template image already exists, only the Name can be
        /// changed.
        /// </summary>
        /// <param name='imageDetails'>
        /// Details for the template image to be created or updated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        Task<SetTemplateImageResponse> SetAsync(SetTemplateImageDetails imageDetails, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations to create, modify, list, and delete template images.
    /// </summary>
    internal partial class TemplateImageOperations : IServiceOperations<RemoteAppManagementClient>, ITemplateImageOperations
    {
        /// <summary>
        /// Initializes a new instance of the TemplateImageOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TemplateImageOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.RemoteApp.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// TemplateImageOperations.Delete deletes an existing template image.
        /// </summary>
        /// <param name='imageId'>
        /// Required. The template image id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string imageId, CancellationToken cancellationToken)
        {
            // Validate
            if (imageId == null)
            {
                throw new ArgumentNullException("imageId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageId", imageId);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/templateImages/" + imageId.Trim() + "?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TemplateImageOperations.List retrieves the template images for the
        /// subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public async Task<ListTemplateImageResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/templateImages?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListTemplateImageResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ListTemplateImageResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken remoteAppTemplateImageListArray = responseDoc;
                        if (remoteAppTemplateImageListArray != null && remoteAppTemplateImageListArray.Type != JTokenType.Null)
                        {
                            foreach (JToken remoteAppTemplateImageListValue in ((JArray)remoteAppTemplateImageListArray))
                            {
                                TemplateImage templateImageInstance = new TemplateImage();
                                result.RemoteAppTemplateImageList.Add(templateImageInstance);
                                
                                JToken idValue = remoteAppTemplateImageListValue["Id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    templateImageInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = remoteAppTemplateImageListValue["Name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    templateImageInstance.Name = nameInstance;
                                }
                                
                                JToken pathOnClientValue = remoteAppTemplateImageListValue["PathOnClient"];
                                if (pathOnClientValue != null && pathOnClientValue.Type != JTokenType.Null)
                                {
                                    string pathOnClientInstance = ((string)pathOnClientValue);
                                    templateImageInstance.PathOnClient = pathOnClientInstance;
                                }
                                
                                JToken statusValue = remoteAppTemplateImageListValue["Status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    TemplateImageStatus statusInstance = ((TemplateImageStatus)Enum.Parse(typeof(TemplateImageStatus), ((string)statusValue), true));
                                    templateImageInstance.Status = statusInstance;
                                }
                                
                                JToken sizeValue = remoteAppTemplateImageListValue["Size"];
                                if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                                {
                                    long sizeInstance = ((long)sizeValue);
                                    templateImageInstance.Size = sizeInstance;
                                }
                                
                                JToken geoValue = remoteAppTemplateImageListValue["Geo"];
                                if (geoValue != null && geoValue.Type != JTokenType.Null)
                                {
                                    string geoInstance = ((string)geoValue);
                                    templateImageInstance.Geo = geoInstance;
                                }
                                
                                JToken uriValue = remoteAppTemplateImageListValue["Uri"];
                                if (uriValue != null && uriValue.Type != JTokenType.Null)
                                {
                                    string uriInstance = ((string)uriValue);
                                    templateImageInstance.Uri = uriInstance;
                                }
                                
                                JToken sasValue = remoteAppTemplateImageListValue["Sas"];
                                if (sasValue != null && sasValue.Type != JTokenType.Null)
                                {
                                    string sasInstance = ((string)sasValue);
                                    templateImageInstance.Sas = sasInstance;
                                }
                                
                                JToken sasExpiryValue = remoteAppTemplateImageListValue["SasExpiry"];
                                if (sasExpiryValue != null && sasExpiryValue.Type != JTokenType.Null)
                                {
                                    DateTime sasExpiryInstance = ((DateTime)sasExpiryValue);
                                    templateImageInstance.SasExpiry = sasExpiryInstance;
                                }
                                
                                JToken uploadSetupTimeValue = remoteAppTemplateImageListValue["UploadSetupTime"];
                                if (uploadSetupTimeValue != null && uploadSetupTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime uploadSetupTimeInstance = ((DateTime)uploadSetupTimeValue);
                                    templateImageInstance.UploadSetupTime = uploadSetupTimeInstance;
                                }
                                
                                JToken uploadStartTimeValue = remoteAppTemplateImageListValue["UploadStartTime"];
                                if (uploadStartTimeValue != null && uploadStartTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime uploadStartTimeInstance = ((DateTime)uploadStartTimeValue);
                                    templateImageInstance.UploadStartTime = uploadStartTimeInstance;
                                }
                                
                                JToken uploadCompleteTimeValue = remoteAppTemplateImageListValue["UploadCompleteTime"];
                                if (uploadCompleteTimeValue != null && uploadCompleteTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime uploadCompleteTimeInstance = ((DateTime)uploadCompleteTimeValue);
                                    templateImageInstance.UploadCompleteTime = uploadCompleteTimeInstance;
                                }
                                
                                JToken subscriptionIdValue = remoteAppTemplateImageListValue["SubscriptionId"];
                                if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string subscriptionIdInstance = ((string)subscriptionIdValue);
                                    templateImageInstance.SubscriptionId = subscriptionIdInstance;
                                }
                                
                                JToken numberOfRemoteAppServicesUsingThisImageValue = remoteAppTemplateImageListValue["NumberOfRemoteAppServicesUsingThisImage"];
                                if (numberOfRemoteAppServicesUsingThisImageValue != null && numberOfRemoteAppServicesUsingThisImageValue.Type != JTokenType.Null)
                                {
                                    int numberOfRemoteAppServicesUsingThisImageInstance = ((int)numberOfRemoteAppServicesUsingThisImageValue);
                                    templateImageInstance.NumberOfRemoteAppServicesUsingThisImage = numberOfRemoteAppServicesUsingThisImageInstance;
                                }
                                
                                JToken typeValue = remoteAppTemplateImageListValue["Type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    TemplateImageType typeInstance = ((TemplateImageType)Enum.Parse(typeof(TemplateImageType), ((string)typeValue), true));
                                    templateImageInstance.Type = typeInstance;
                                }
                                
                                JToken locationListArray = remoteAppTemplateImageListValue["LocationList"];
                                if (locationListArray != null && locationListArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken locationListValue in ((JArray)locationListArray))
                                    {
                                        templateImageInstance.LocationList.Add(((string)locationListValue));
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TemplateImageOperations.Set creates or updates an existing template
        /// image.  If the template image already exists, only the Name can be
        /// changed.
        /// </summary>
        /// <param name='imageDetails'>
        /// Required. Details for the template image to be created or updated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Operation response for TemplateImageOperations.List.
        /// </returns>
        public async Task<SetTemplateImageResponse> SetAsync(SetTemplateImageDetails imageDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (imageDetails == null)
            {
                throw new ArgumentNullException("imageDetails");
            }
            if (imageDetails.Name == null)
            {
                throw new ArgumentNullException("imageDetails.Name");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("imageDetails", imageDetails);
                Tracing.Enter(invocationId, this, "SetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/services/" + (this.Client.RdfeNamespace != null ? this.Client.RdfeNamespace.Trim() : "") + "/templateImages?";
            url = url + "api-version=2014-09-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json; charset=utf-8");
                httpRequest.Headers.Add("x-ms-version", "2014-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject setTemplateImageDetailsValue = new JObject();
                requestDoc = setTemplateImageDetailsValue;
                
                if (imageDetails.Id != null)
                {
                    setTemplateImageDetailsValue["Id"] = imageDetails.Id;
                }
                
                setTemplateImageDetailsValue["Name"] = imageDetails.Name;
                
                if (imageDetails.Region != null)
                {
                    setTemplateImageDetailsValue["Region"] = imageDetails.Region;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SetTemplateImageResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new SetTemplateImageResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        TemplateImage remoteAppTemplateImageInstance = new TemplateImage();
                        result.RemoteAppTemplateImage = remoteAppTemplateImageInstance;
                        
                        JToken idValue = responseDoc["Id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            remoteAppTemplateImageInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["Name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            remoteAppTemplateImageInstance.Name = nameInstance;
                        }
                        
                        JToken pathOnClientValue = responseDoc["PathOnClient"];
                        if (pathOnClientValue != null && pathOnClientValue.Type != JTokenType.Null)
                        {
                            string pathOnClientInstance = ((string)pathOnClientValue);
                            remoteAppTemplateImageInstance.PathOnClient = pathOnClientInstance;
                        }
                        
                        JToken statusValue = responseDoc["Status"];
                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                        {
                            TemplateImageStatus statusInstance = ((TemplateImageStatus)Enum.Parse(typeof(TemplateImageStatus), ((string)statusValue), true));
                            remoteAppTemplateImageInstance.Status = statusInstance;
                        }
                        
                        JToken sizeValue = responseDoc["Size"];
                        if (sizeValue != null && sizeValue.Type != JTokenType.Null)
                        {
                            long sizeInstance = ((long)sizeValue);
                            remoteAppTemplateImageInstance.Size = sizeInstance;
                        }
                        
                        JToken geoValue = responseDoc["Geo"];
                        if (geoValue != null && geoValue.Type != JTokenType.Null)
                        {
                            string geoInstance = ((string)geoValue);
                            remoteAppTemplateImageInstance.Geo = geoInstance;
                        }
                        
                        JToken uriValue = responseDoc["Uri"];
                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                        {
                            string uriInstance = ((string)uriValue);
                            remoteAppTemplateImageInstance.Uri = uriInstance;
                        }
                        
                        JToken sasValue = responseDoc["Sas"];
                        if (sasValue != null && sasValue.Type != JTokenType.Null)
                        {
                            string sasInstance = ((string)sasValue);
                            remoteAppTemplateImageInstance.Sas = sasInstance;
                        }
                        
                        JToken sasExpiryValue = responseDoc["SasExpiry"];
                        if (sasExpiryValue != null && sasExpiryValue.Type != JTokenType.Null)
                        {
                            DateTime sasExpiryInstance = ((DateTime)sasExpiryValue);
                            remoteAppTemplateImageInstance.SasExpiry = sasExpiryInstance;
                        }
                        
                        JToken uploadSetupTimeValue = responseDoc["UploadSetupTime"];
                        if (uploadSetupTimeValue != null && uploadSetupTimeValue.Type != JTokenType.Null)
                        {
                            DateTime uploadSetupTimeInstance = ((DateTime)uploadSetupTimeValue);
                            remoteAppTemplateImageInstance.UploadSetupTime = uploadSetupTimeInstance;
                        }
                        
                        JToken uploadStartTimeValue = responseDoc["UploadStartTime"];
                        if (uploadStartTimeValue != null && uploadStartTimeValue.Type != JTokenType.Null)
                        {
                            DateTime uploadStartTimeInstance = ((DateTime)uploadStartTimeValue);
                            remoteAppTemplateImageInstance.UploadStartTime = uploadStartTimeInstance;
                        }
                        
                        JToken uploadCompleteTimeValue = responseDoc["UploadCompleteTime"];
                        if (uploadCompleteTimeValue != null && uploadCompleteTimeValue.Type != JTokenType.Null)
                        {
                            DateTime uploadCompleteTimeInstance = ((DateTime)uploadCompleteTimeValue);
                            remoteAppTemplateImageInstance.UploadCompleteTime = uploadCompleteTimeInstance;
                        }
                        
                        JToken subscriptionIdValue = responseDoc["SubscriptionId"];
                        if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                        {
                            string subscriptionIdInstance = ((string)subscriptionIdValue);
                            remoteAppTemplateImageInstance.SubscriptionId = subscriptionIdInstance;
                        }
                        
                        JToken numberOfRemoteAppServicesUsingThisImageValue = responseDoc["NumberOfRemoteAppServicesUsingThisImage"];
                        if (numberOfRemoteAppServicesUsingThisImageValue != null && numberOfRemoteAppServicesUsingThisImageValue.Type != JTokenType.Null)
                        {
                            int numberOfRemoteAppServicesUsingThisImageInstance = ((int)numberOfRemoteAppServicesUsingThisImageValue);
                            remoteAppTemplateImageInstance.NumberOfRemoteAppServicesUsingThisImage = numberOfRemoteAppServicesUsingThisImageInstance;
                        }
                        
                        JToken typeValue = responseDoc["Type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            TemplateImageType typeInstance = ((TemplateImageType)Enum.Parse(typeof(TemplateImageType), ((string)typeValue), true));
                            remoteAppTemplateImageInstance.Type = typeInstance;
                        }
                        
                        JToken locationListArray = responseDoc["LocationList"];
                        if (locationListArray != null && locationListArray.Type != JTokenType.Null)
                        {
                            foreach (JToken locationListValue in ((JArray)locationListArray))
                            {
                                remoteAppTemplateImageInstance.LocationList.Add(((string)locationListValue));
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
