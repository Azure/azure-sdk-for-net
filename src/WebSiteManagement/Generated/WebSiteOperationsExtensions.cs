// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Management.WebSites;
using Microsoft.WindowsAzure.Management.WebSites.Models;

namespace Microsoft.WindowsAzure.Management.WebSites
{
    /// <summary>
    /// Operations for managing the web sites in a web space.
    /// </summary>
    public static partial class WebSiteOperationsExtensions
    {
        /// <summary>
        /// You can swap a web site from one slot to the production slot.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the web site slot to swap with the production slot.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified long-running
        /// operation, indicating whether it has succeeded, is inprogress, has
        /// time dout, or has failed. Note that this status is distinct from
        /// the HTTP status code returned for the Get Operation Status
        /// operation itself.  If the long-running operation failed, the
        /// response body includes error information regarding the failure.
        /// </returns>
        public static WebSiteOperationStatusResponse BeginSwapingSlots(this IWebSiteOperations operations, string webSpaceName, string webSiteName, string slotName)
        {
            try
            {
                return operations.BeginSwapingSlotsAsync(webSpaceName, webSiteName, slotName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can swap a web site from one slot to the production slot.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the web site slot to swap with the production slot.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified long-running
        /// operation, indicating whether it has succeeded, is inprogress, has
        /// time dout, or has failed. Note that this status is distinct from
        /// the HTTP status code returned for the Get Operation Status
        /// operation itself.  If the long-running operation failed, the
        /// response body includes error information regarding the failure.
        /// </returns>
        public static Task<WebSiteOperationStatusResponse> BeginSwapingSlotsAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, string slotName)
        {
            return operations.BeginSwapingSlotsAsync(webSpaceName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static WebSiteCreateResponse Create(this IWebSiteOperations operations, string webSpaceName, WebSiteCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(webSpaceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static Task<WebSiteCreateResponse> CreateAsync(this IWebSiteOperations operations, string webSpaceName, WebSiteCreateParameters parameters)
        {
            return operations.CreateAsync(webSpaceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateRepository(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.CreateRepositoryAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateRepositoryAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.CreateRepositoryAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can delete a web site by issuing an HTTP DELETE request. If the
        /// web site being deleted is the only site remaining in a server
        /// farm, you can optionally delete the server farm as well by using
        /// the deleteEmptyServerFarm parameter.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The parameters to delete a web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteDeleteParameters parameters)
        {
            try
            {
                return operations.DeleteAsync(webSpaceName, webSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can delete a web site by issuing an HTTP DELETE request. If the
        /// web site being deleted is the only site remaining in a server
        /// farm, you can optionally delete the server farm as well by using
        /// the deleteEmptyServerFarm parameter.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The parameters to delete a web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteDeleteParameters parameters)
        {
            return operations.DeleteAsync(webSpaceName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static WebSiteDeleteRepositoryResponse DeleteRepository(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.DeleteRepositoryAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.DeleteRepositoryAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse GeneratePassword(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GeneratePasswordAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> GeneratePasswordAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GeneratePasswordAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static WebSiteGetResponse Get(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteGetParameters parameters)
        {
            try
            {
                return operations.GetAsync(webSpaceName, webSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static Task<WebSiteGetResponse> GetAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteGetParameters parameters)
        {
            return operations.GetAsync(webSpaceName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public static WebSiteGetConfigurationResponse GetConfiguration(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GetConfigurationAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public static Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GetConfigurationAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetHistoricalUsageMetricsResponse GetHistoricalUsageMetrics(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            try
            {
                return operations.GetHistoricalUsageMetricsAsync(webSpaceName, webSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            return operations.GetHistoricalUsageMetricsAsync(webSpaceName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the publish settings information for a web site by
        /// issuing an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static WebSiteGetPublishProfileResponse GetPublishProfile(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GetPublishProfileAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the publish settings information for a web site by
        /// issuing an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GetPublishProfileAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static WebSiteGetRepositoryResponse GetRepository(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GetRepositoryAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GetRepositoryAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve a site's current usage metrics by issuing an HTTP
        /// GET request. The metrics returned include CPU Time, Data In, Data
        /// Out, Local bytes read, Local bytes written, Network bytes read,
        /// Network bytes written, WP stop requests, Memory Usage, CPU Time -
        /// Minute Limit, and File System Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetUsageMetricsResponse GetUsageMetrics(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GetUsageMetricsAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve a site's current usage metrics by issuing an HTTP
        /// GET request. The metrics returned include CPU Time, Data In, Data
        /// Out, Local bytes read, Local bytes written, Network bytes read,
        /// Network bytes written, WP stop requests, Memory Usage, CPU Time -
        /// Minute Limit, and File System Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GetUsageMetricsAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// Determines if a hostname is available
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Is Hostname Available operation response.
        /// </returns>
        public static WebSiteIsHostnameAvailableResponse IsHostnameAvailable(this IWebSiteOperations operations, string webSiteName)
        {
            try
            {
                return operations.IsHostnameAvailableAsync(webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Determines if a hostname is available
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Is Hostname Available operation response.
        /// </returns>
        public static Task<WebSiteIsHostnameAvailableResponse> IsHostnameAvailableAsync(this IWebSiteOperations operations, string webSiteName)
        {
            return operations.IsHostnameAvailableAsync(webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can restart a web site by issuing an HTTP POST request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Restart(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.RestartAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can restart a web site by issuing an HTTP POST request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RestartAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.RestartAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can swap a web site from one slot to the production slot.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the web site slot to swap with the production slot.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified long-running
        /// operation, indicating whether it has succeeded, is inprogress, has
        /// time dout, or has failed. Note that this status is distinct from
        /// the HTTP status code returned for the Get Operation Status
        /// operation itself.  If the long-running operation failed, the
        /// response body includes error information regarding the failure.
        /// </returns>
        public static WebSiteOperationStatusResponse SwapSlots(this IWebSiteOperations operations, string webSpaceName, string webSiteName, string slotName)
        {
            try
            {
                return operations.SwapSlotsAsync(webSpaceName, webSiteName, slotName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can swap a web site from one slot to the production slot.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the web site slot to swap with the production slot.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified long-running
        /// operation, indicating whether it has succeeded, is inprogress, has
        /// time dout, or has failed. Note that this status is distinct from
        /// the HTTP status code returned for the Get Operation Status
        /// operation itself.  If the long-running operation failed, the
        /// response body includes error information regarding the failure.
        /// </returns>
        public static Task<WebSiteOperationStatusResponse> SwapSlotsAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, string slotName)
        {
            return operations.SwapSlotsAsync(webSpaceName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. This API executes a repository sync operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse SyncRepository(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.SyncRepositoryAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. This API executes a repository sync operation.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> SyncRepositoryAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.SyncRepositoryAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can update the settings for a web site by using the HTTP PUT
        /// method and by specifying the settings in the request body.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Web Site operation.
        /// </param>
        /// <returns>
        /// The Update Web Site operation response.
        /// </returns>
        public static WebSiteUpdateResponse Update(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteUpdateParameters parameters)
        {
            try
            {
                return operations.UpdateAsync(webSpaceName, webSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can update the settings for a web site by using the HTTP PUT
        /// method and by specifying the settings in the request body.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Web Site operation.
        /// </param>
        /// <returns>
        /// The Update Web Site operation response.
        /// </returns>
        public static Task<WebSiteUpdateResponse> UpdateAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteUpdateParameters parameters)
        {
            return operations.UpdateAsync(webSpaceName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateConfiguration(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteUpdateConfigurationParameters parameters)
        {
            try
            {
                return operations.UpdateConfigurationAsync(webSpaceName, webSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateConfigurationAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteUpdateConfigurationParameters parameters)
        {
            return operations.UpdateConfigurationAsync(webSpaceName, webSiteName, parameters, CancellationToken.None);
        }
    }
}
