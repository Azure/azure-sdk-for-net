// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.WebSitesExtensions.Models;

namespace Microsoft.WindowsAzure.WebSitesExtensions
{
    /// <summary>
    /// Operations for managing the jobs.
    /// </summary>
    public partial interface IWebJobOperations
    {
        /// <summary>
        /// Delete a continuous job.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='recursive'>
        /// Removing the specified directory and all its files and
        /// subdirectories. The value must be set to true.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteContinuousAsync(string jobName, bool recursive, CancellationToken cancellationToken);
        
        /// <summary>
        /// Delete a triggered job.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='recursive'>
        /// Removing the specified directory and all its files and
        /// subdirectories. The value must be set to true.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteTriggeredAsync(string jobName, bool recursive, CancellationToken cancellationToken);
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        Task<WebJobGetResponse> GetAsync(string jobName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get a continuous web job.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        Task<WebJobGetResponse> GetContinuousAsync(string jobName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get a web job run.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='jobRunId'>
        /// The job run identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Job Run operation response.
        /// </returns>
        Task<WebJobGetRunResponse> GetRunAsync(string jobName, string jobRunId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get a triggered web job.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        Task<WebJobGetResponse> GetTriggeredAsync(string jobName, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the web jobs.
        /// </summary>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        Task<WebJobListResponse> ListAsync(WebJobListParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the continuous web jobs.
        /// </summary>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        Task<WebJobListResponse> ListContinuousAsync(WebJobListParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the web job runs.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Web Job run list operation response.
        /// </returns>
        Task<WebJobRunListResponse> ListRunsAsync(string jobName, WebJobRunListParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the triggered web jobs.
        /// </summary>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        Task<WebJobListResponse> ListTriggeredAsync(WebJobListParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Run a triggered web job.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> RunTriggeredAsync(string jobName, CancellationToken cancellationToken);
        
        /// <summary>
        /// If a continuous job is set as singleton it'll run only on a single
        /// instance opposed to running on all instances.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='isSingleton'>
        /// Boolean value indicating if the job is singleton or not.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> SetSingletonAsync(string jobName, bool isSingleton, CancellationToken cancellationToken);
        
        /// <summary>
        /// Start a continuous web job.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> StartContinuousAsync(string jobName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Stop a continuous web job.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> StopContinuousAsync(string jobName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Upload a continuous web job.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='jobContent'>
        /// The job content.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UploadContinuousAsync(string jobName, Stream jobContent, CancellationToken cancellationToken);
        
        /// <summary>
        /// Upload a triggered web job.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='jobContent'>
        /// The job content.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UploadTriggeredAsync(string jobName, Stream jobContent, CancellationToken cancellationToken);
    }
}
