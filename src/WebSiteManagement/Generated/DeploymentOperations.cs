// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.WebSitesExtensions;
using Microsoft.WindowsAzure.WebSitesExtensions.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.WebSitesExtensions
{
    /// <summary>
    /// Operations for managing the repositories.
    /// </summary>
    internal partial class DeploymentOperations : IServiceOperations<WebSiteExtensionsClient>, IDeploymentOperations
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DeploymentOperations(WebSiteExtensionsClient client)
        {
            this._client = client;
        }
        
        private WebSiteExtensionsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.WebSiteExtensionsClient.
        /// </summary>
        public WebSiteExtensionsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Gets a deployment for a website.
        /// </summary>
        /// <param name='deploymentId'>
        /// The deployment identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The deployment information operation response.
        /// </returns>
        public async Task<DeploymentGetResponse> GetAsync(string deploymentId, CancellationToken cancellationToken)
        {
            // Validate
            if (deploymentId == null)
            {
                throw new ArgumentNullException("deploymentId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deploymentId", deploymentId);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/deployments/").ToString() + deploymentId + "?";
            url = url + "version=2";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DeploymentGetResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Deployment deploymentInstance = new Deployment();
                        result.Deployment = deploymentInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = (string)idValue;
                            deploymentInstance.Id = idInstance;
                        }
                        
                        JToken statusValue = responseDoc["status"];
                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                        {
                            DeployStatus statusInstance = (DeployStatus)Enum.Parse(typeof(DeployStatus), (string)statusValue, false);
                            deploymentInstance.Status = statusInstance;
                        }
                        
                        JToken statusTextValue = responseDoc["status_text"];
                        if (statusTextValue != null && statusTextValue.Type != JTokenType.Null)
                        {
                            string statusTextInstance = (string)statusTextValue;
                            deploymentInstance.StatusText = statusTextInstance;
                        }
                        
                        JToken authorEmailValue = responseDoc["author_email"];
                        if (authorEmailValue != null && authorEmailValue.Type != JTokenType.Null)
                        {
                            string authorEmailInstance = (string)authorEmailValue;
                            deploymentInstance.AuthorEmail = authorEmailInstance;
                        }
                        
                        JToken authorValue = responseDoc["author"];
                        if (authorValue != null && authorValue.Type != JTokenType.Null)
                        {
                            string authorInstance = (string)authorValue;
                            deploymentInstance.Author = authorInstance;
                        }
                        
                        JToken deployerValue = responseDoc["deployer"];
                        if (deployerValue != null && deployerValue.Type != JTokenType.Null)
                        {
                            string deployerInstance = (string)deployerValue;
                            deploymentInstance.Deployer = deployerInstance;
                        }
                        
                        JToken messageValue = responseDoc["message"];
                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                        {
                            string messageInstance = (string)messageValue;
                            deploymentInstance.Message = messageInstance;
                        }
                        
                        JToken progressValue = responseDoc["progress"];
                        if (progressValue != null && progressValue.Type != JTokenType.Null)
                        {
                            string progressInstance = (string)progressValue;
                            deploymentInstance.Progress = progressInstance;
                        }
                        
                        JToken receivedTimeValue = responseDoc["received_time"];
                        if (receivedTimeValue != null && receivedTimeValue.Type != JTokenType.Null)
                        {
                            DateTime receivedTimeInstance = (DateTime)receivedTimeValue;
                            deploymentInstance.ReceivedTime = receivedTimeInstance;
                        }
                        
                        JToken startTimeValue = responseDoc["start_time"];
                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                        {
                            DateTime startTimeInstance = (DateTime)startTimeValue;
                            deploymentInstance.StartTime = startTimeInstance;
                        }
                        
                        JToken endTimeValue = responseDoc["end_time"];
                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                        {
                            DateTime endTimeInstance = (DateTime)endTimeValue;
                            deploymentInstance.EndTime = endTimeInstance;
                        }
                        
                        JToken lastSuccessEndTimeValue = responseDoc["last_success_end_time"];
                        if (lastSuccessEndTimeValue != null && lastSuccessEndTimeValue.Type != JTokenType.Null)
                        {
                            DateTime lastSuccessEndTimeInstance = (DateTime)lastSuccessEndTimeValue;
                            deploymentInstance.LastSuccessEndTime = lastSuccessEndTimeInstance;
                        }
                        
                        JToken completeValue = responseDoc["complete"];
                        if (completeValue != null && completeValue.Type != JTokenType.Null)
                        {
                            bool completeInstance = (bool)completeValue;
                            deploymentInstance.Complete = completeInstance;
                        }
                        
                        JToken activeValue = responseDoc["active"];
                        if (activeValue != null && activeValue.Type != JTokenType.Null)
                        {
                            bool activeInstance = (bool)activeValue;
                            deploymentInstance.Active = activeInstance;
                        }
                        
                        JToken isTempValue = responseDoc["is_temp"];
                        if (isTempValue != null && isTempValue.Type != JTokenType.Null)
                        {
                            bool isTempInstance = (bool)isTempValue;
                            deploymentInstance.IsTemp = isTempInstance;
                        }
                        
                        JToken isReadonlyValue = responseDoc["is_readonly"];
                        if (isReadonlyValue != null && isReadonlyValue.Type != JTokenType.Null)
                        {
                            bool isReadonlyInstance = (bool)isReadonlyValue;
                            deploymentInstance.IsReadOnly = isReadonlyInstance;
                        }
                        
                        JToken urlValue = responseDoc["url"];
                        if (urlValue != null && urlValue.Type != JTokenType.Null)
                        {
                            Uri urlInstance = TypeConversion.TryParseUri((string)urlValue);
                            deploymentInstance.Url = urlInstance;
                        }
                        
                        JToken logUrlValue = responseDoc["log_url"];
                        if (logUrlValue != null && logUrlValue.Type != JTokenType.Null)
                        {
                            Uri logUrlInstance = TypeConversion.TryParseUri((string)logUrlValue);
                            deploymentInstance.LogUrl = logUrlInstance;
                        }
                        
                        JToken siteNameValue = responseDoc["site_name"];
                        if (siteNameValue != null && siteNameValue.Type != JTokenType.Null)
                        {
                            string siteNameInstance = (string)siteNameValue;
                            deploymentInstance.SiteName = siteNameInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the deployments for a website.
        /// </summary>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of deployments operation response.
        /// </returns>
        public async Task<DeploymentListResponse> ListAsync(DeploymentListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/deployments/").ToString() + "?";
            url = url + "version=2";
            if (parameters != null && parameters.Top != null)
            {
                url = url + "&$top=" + Uri.EscapeUriString(parameters.Top);
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                url = url + "&$orderBy=" + Uri.EscapeUriString(parameters.OrderBy);
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DeploymentListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JArray deploymentsArray = (JArray)responseDoc;
                        if (deploymentsArray != null && deploymentsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken deploymentsValue in deploymentsArray)
                            {
                                Deployment deploymentInstance = new Deployment();
                                result.Deployments.Add(deploymentInstance);
                                
                                JToken idValue = deploymentsValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = (string)idValue;
                                    deploymentInstance.Id = idInstance;
                                }
                                
                                JToken statusValue = deploymentsValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    DeployStatus statusInstance = (DeployStatus)Enum.Parse(typeof(DeployStatus), (string)statusValue, false);
                                    deploymentInstance.Status = statusInstance;
                                }
                                
                                JToken statusTextValue = deploymentsValue["status_text"];
                                if (statusTextValue != null && statusTextValue.Type != JTokenType.Null)
                                {
                                    string statusTextInstance = (string)statusTextValue;
                                    deploymentInstance.StatusText = statusTextInstance;
                                }
                                
                                JToken authorEmailValue = deploymentsValue["author_email"];
                                if (authorEmailValue != null && authorEmailValue.Type != JTokenType.Null)
                                {
                                    string authorEmailInstance = (string)authorEmailValue;
                                    deploymentInstance.AuthorEmail = authorEmailInstance;
                                }
                                
                                JToken authorValue = deploymentsValue["author"];
                                if (authorValue != null && authorValue.Type != JTokenType.Null)
                                {
                                    string authorInstance = (string)authorValue;
                                    deploymentInstance.Author = authorInstance;
                                }
                                
                                JToken deployerValue = deploymentsValue["deployer"];
                                if (deployerValue != null && deployerValue.Type != JTokenType.Null)
                                {
                                    string deployerInstance = (string)deployerValue;
                                    deploymentInstance.Deployer = deployerInstance;
                                }
                                
                                JToken messageValue = deploymentsValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = (string)messageValue;
                                    deploymentInstance.Message = messageInstance;
                                }
                                
                                JToken progressValue = deploymentsValue["progress"];
                                if (progressValue != null && progressValue.Type != JTokenType.Null)
                                {
                                    string progressInstance = (string)progressValue;
                                    deploymentInstance.Progress = progressInstance;
                                }
                                
                                JToken receivedTimeValue = deploymentsValue["received_time"];
                                if (receivedTimeValue != null && receivedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime receivedTimeInstance = (DateTime)receivedTimeValue;
                                    deploymentInstance.ReceivedTime = receivedTimeInstance;
                                }
                                
                                JToken startTimeValue = deploymentsValue["start_time"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = (DateTime)startTimeValue;
                                    deploymentInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = deploymentsValue["end_time"];
                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime endTimeInstance = (DateTime)endTimeValue;
                                    deploymentInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken lastSuccessEndTimeValue = deploymentsValue["last_success_end_time"];
                                if (lastSuccessEndTimeValue != null && lastSuccessEndTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessEndTimeInstance = (DateTime)lastSuccessEndTimeValue;
                                    deploymentInstance.LastSuccessEndTime = lastSuccessEndTimeInstance;
                                }
                                
                                JToken completeValue = deploymentsValue["complete"];
                                if (completeValue != null && completeValue.Type != JTokenType.Null)
                                {
                                    bool completeInstance = (bool)completeValue;
                                    deploymentInstance.Complete = completeInstance;
                                }
                                
                                JToken activeValue = deploymentsValue["active"];
                                if (activeValue != null && activeValue.Type != JTokenType.Null)
                                {
                                    bool activeInstance = (bool)activeValue;
                                    deploymentInstance.Active = activeInstance;
                                }
                                
                                JToken isTempValue = deploymentsValue["is_temp"];
                                if (isTempValue != null && isTempValue.Type != JTokenType.Null)
                                {
                                    bool isTempInstance = (bool)isTempValue;
                                    deploymentInstance.IsTemp = isTempInstance;
                                }
                                
                                JToken isReadonlyValue = deploymentsValue["is_readonly"];
                                if (isReadonlyValue != null && isReadonlyValue.Type != JTokenType.Null)
                                {
                                    bool isReadonlyInstance = (bool)isReadonlyValue;
                                    deploymentInstance.IsReadOnly = isReadonlyInstance;
                                }
                                
                                JToken urlValue = deploymentsValue["url"];
                                if (urlValue != null && urlValue.Type != JTokenType.Null)
                                {
                                    Uri urlInstance = TypeConversion.TryParseUri((string)urlValue);
                                    deploymentInstance.Url = urlInstance;
                                }
                                
                                JToken logUrlValue = deploymentsValue["log_url"];
                                if (logUrlValue != null && logUrlValue.Type != JTokenType.Null)
                                {
                                    Uri logUrlInstance = TypeConversion.TryParseUri((string)logUrlValue);
                                    deploymentInstance.LogUrl = logUrlInstance;
                                }
                                
                                JToken siteNameValue = deploymentsValue["site_name"];
                                if (siteNameValue != null && siteNameValue.Type != JTokenType.Null)
                                {
                                    string siteNameInstance = (string)siteNameValue;
                                    deploymentInstance.SiteName = siteNameInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the logs for a deployment for a website.
        /// </summary>
        /// <param name='deploymentId'>
        /// The deployment identifier.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of deployments operation response.
        /// </returns>
        public async Task<DeploymentListLogsResponse> ListLogsAsync(string deploymentId, DeploymentListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (deploymentId == null)
            {
                throw new ArgumentNullException("deploymentId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deploymentId", deploymentId);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListLogsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/deployments/").ToString() + "?";
            url = url + "version=2";
            if (parameters != null && parameters.Top != null)
            {
                url = url + "&$top=" + Uri.EscapeUriString(parameters.Top);
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                url = url + "&$orderBy=" + Uri.EscapeUriString(parameters.OrderBy);
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentListLogsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DeploymentListLogsResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JArray deploymentsArray = (JArray)responseDoc;
                        if (deploymentsArray != null && deploymentsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken deploymentsValue in deploymentsArray)
                            {
                                Deployment deploymentInstance = new Deployment();
                                result.Deployments.Add(deploymentInstance);
                                
                                JToken idValue = deploymentsValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = (string)idValue;
                                    deploymentInstance.Id = idInstance;
                                }
                                
                                JToken statusValue = deploymentsValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    DeployStatus statusInstance = (DeployStatus)Enum.Parse(typeof(DeployStatus), (string)statusValue, false);
                                    deploymentInstance.Status = statusInstance;
                                }
                                
                                JToken statusTextValue = deploymentsValue["status_text"];
                                if (statusTextValue != null && statusTextValue.Type != JTokenType.Null)
                                {
                                    string statusTextInstance = (string)statusTextValue;
                                    deploymentInstance.StatusText = statusTextInstance;
                                }
                                
                                JToken authorEmailValue = deploymentsValue["author_email"];
                                if (authorEmailValue != null && authorEmailValue.Type != JTokenType.Null)
                                {
                                    string authorEmailInstance = (string)authorEmailValue;
                                    deploymentInstance.AuthorEmail = authorEmailInstance;
                                }
                                
                                JToken authorValue = deploymentsValue["author"];
                                if (authorValue != null && authorValue.Type != JTokenType.Null)
                                {
                                    string authorInstance = (string)authorValue;
                                    deploymentInstance.Author = authorInstance;
                                }
                                
                                JToken deployerValue = deploymentsValue["deployer"];
                                if (deployerValue != null && deployerValue.Type != JTokenType.Null)
                                {
                                    string deployerInstance = (string)deployerValue;
                                    deploymentInstance.Deployer = deployerInstance;
                                }
                                
                                JToken messageValue = deploymentsValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = (string)messageValue;
                                    deploymentInstance.Message = messageInstance;
                                }
                                
                                JToken progressValue = deploymentsValue["progress"];
                                if (progressValue != null && progressValue.Type != JTokenType.Null)
                                {
                                    string progressInstance = (string)progressValue;
                                    deploymentInstance.Progress = progressInstance;
                                }
                                
                                JToken receivedTimeValue = deploymentsValue["received_time"];
                                if (receivedTimeValue != null && receivedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime receivedTimeInstance = (DateTime)receivedTimeValue;
                                    deploymentInstance.ReceivedTime = receivedTimeInstance;
                                }
                                
                                JToken startTimeValue = deploymentsValue["start_time"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = (DateTime)startTimeValue;
                                    deploymentInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = deploymentsValue["end_time"];
                                if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime endTimeInstance = (DateTime)endTimeValue;
                                    deploymentInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken lastSuccessEndTimeValue = deploymentsValue["last_success_end_time"];
                                if (lastSuccessEndTimeValue != null && lastSuccessEndTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSuccessEndTimeInstance = (DateTime)lastSuccessEndTimeValue;
                                    deploymentInstance.LastSuccessEndTime = lastSuccessEndTimeInstance;
                                }
                                
                                JToken completeValue = deploymentsValue["complete"];
                                if (completeValue != null && completeValue.Type != JTokenType.Null)
                                {
                                    bool completeInstance = (bool)completeValue;
                                    deploymentInstance.Complete = completeInstance;
                                }
                                
                                JToken activeValue = deploymentsValue["active"];
                                if (activeValue != null && activeValue.Type != JTokenType.Null)
                                {
                                    bool activeInstance = (bool)activeValue;
                                    deploymentInstance.Active = activeInstance;
                                }
                                
                                JToken isTempValue = deploymentsValue["is_temp"];
                                if (isTempValue != null && isTempValue.Type != JTokenType.Null)
                                {
                                    bool isTempInstance = (bool)isTempValue;
                                    deploymentInstance.IsTemp = isTempInstance;
                                }
                                
                                JToken isReadonlyValue = deploymentsValue["is_readonly"];
                                if (isReadonlyValue != null && isReadonlyValue.Type != JTokenType.Null)
                                {
                                    bool isReadonlyInstance = (bool)isReadonlyValue;
                                    deploymentInstance.IsReadOnly = isReadonlyInstance;
                                }
                                
                                JToken urlValue = deploymentsValue["url"];
                                if (urlValue != null && urlValue.Type != JTokenType.Null)
                                {
                                    Uri urlInstance = TypeConversion.TryParseUri((string)urlValue);
                                    deploymentInstance.Url = urlInstance;
                                }
                                
                                JToken logUrlValue = deploymentsValue["log_url"];
                                if (logUrlValue != null && logUrlValue.Type != JTokenType.Null)
                                {
                                    Uri logUrlInstance = TypeConversion.TryParseUri((string)logUrlValue);
                                    deploymentInstance.LogUrl = logUrlInstance;
                                }
                                
                                JToken siteNameValue = deploymentsValue["site_name"];
                                if (siteNameValue != null && siteNameValue.Type != JTokenType.Null)
                                {
                                    string siteNameInstance = (string)siteNameValue;
                                    deploymentInstance.SiteName = siteNameInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Redeploys a specific website deployment.
        /// </summary>
        /// <param name='deploymentId'>
        /// The deployment identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The deployment information operation response.
        /// </returns>
        public async Task<DeploymentUpdateResponse> ReployAsync(string deploymentId, CancellationToken cancellationToken)
        {
            // Validate
            if (deploymentId == null)
            {
                throw new ArgumentNullException("deploymentId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("deploymentId", deploymentId);
                Tracing.Enter(invocationId, this, "ReployAsync", tracingParameters);
            }
            
            // Construct URL
            string url = new Uri(this.Client.BaseUri, "/deployments/").ToString() + deploymentId + "?";
            url = url + "version=2";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DeploymentUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new DeploymentUpdateResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        Deployment deploymentInstance = new Deployment();
                        result.Deployment = deploymentInstance;
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = (string)idValue;
                            deploymentInstance.Id = idInstance;
                        }
                        
                        JToken statusValue = responseDoc["status"];
                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                        {
                            DeployStatus statusInstance = (DeployStatus)Enum.Parse(typeof(DeployStatus), (string)statusValue, false);
                            deploymentInstance.Status = statusInstance;
                        }
                        
                        JToken statusTextValue = responseDoc["status_text"];
                        if (statusTextValue != null && statusTextValue.Type != JTokenType.Null)
                        {
                            string statusTextInstance = (string)statusTextValue;
                            deploymentInstance.StatusText = statusTextInstance;
                        }
                        
                        JToken authorEmailValue = responseDoc["author_email"];
                        if (authorEmailValue != null && authorEmailValue.Type != JTokenType.Null)
                        {
                            string authorEmailInstance = (string)authorEmailValue;
                            deploymentInstance.AuthorEmail = authorEmailInstance;
                        }
                        
                        JToken authorValue = responseDoc["author"];
                        if (authorValue != null && authorValue.Type != JTokenType.Null)
                        {
                            string authorInstance = (string)authorValue;
                            deploymentInstance.Author = authorInstance;
                        }
                        
                        JToken deployerValue = responseDoc["deployer"];
                        if (deployerValue != null && deployerValue.Type != JTokenType.Null)
                        {
                            string deployerInstance = (string)deployerValue;
                            deploymentInstance.Deployer = deployerInstance;
                        }
                        
                        JToken messageValue = responseDoc["message"];
                        if (messageValue != null && messageValue.Type != JTokenType.Null)
                        {
                            string messageInstance = (string)messageValue;
                            deploymentInstance.Message = messageInstance;
                        }
                        
                        JToken progressValue = responseDoc["progress"];
                        if (progressValue != null && progressValue.Type != JTokenType.Null)
                        {
                            string progressInstance = (string)progressValue;
                            deploymentInstance.Progress = progressInstance;
                        }
                        
                        JToken receivedTimeValue = responseDoc["received_time"];
                        if (receivedTimeValue != null && receivedTimeValue.Type != JTokenType.Null)
                        {
                            DateTime receivedTimeInstance = (DateTime)receivedTimeValue;
                            deploymentInstance.ReceivedTime = receivedTimeInstance;
                        }
                        
                        JToken startTimeValue = responseDoc["start_time"];
                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                        {
                            DateTime startTimeInstance = (DateTime)startTimeValue;
                            deploymentInstance.StartTime = startTimeInstance;
                        }
                        
                        JToken endTimeValue = responseDoc["end_time"];
                        if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                        {
                            DateTime endTimeInstance = (DateTime)endTimeValue;
                            deploymentInstance.EndTime = endTimeInstance;
                        }
                        
                        JToken lastSuccessEndTimeValue = responseDoc["last_success_end_time"];
                        if (lastSuccessEndTimeValue != null && lastSuccessEndTimeValue.Type != JTokenType.Null)
                        {
                            DateTime lastSuccessEndTimeInstance = (DateTime)lastSuccessEndTimeValue;
                            deploymentInstance.LastSuccessEndTime = lastSuccessEndTimeInstance;
                        }
                        
                        JToken completeValue = responseDoc["complete"];
                        if (completeValue != null && completeValue.Type != JTokenType.Null)
                        {
                            bool completeInstance = (bool)completeValue;
                            deploymentInstance.Complete = completeInstance;
                        }
                        
                        JToken activeValue = responseDoc["active"];
                        if (activeValue != null && activeValue.Type != JTokenType.Null)
                        {
                            bool activeInstance = (bool)activeValue;
                            deploymentInstance.Active = activeInstance;
                        }
                        
                        JToken isTempValue = responseDoc["is_temp"];
                        if (isTempValue != null && isTempValue.Type != JTokenType.Null)
                        {
                            bool isTempInstance = (bool)isTempValue;
                            deploymentInstance.IsTemp = isTempInstance;
                        }
                        
                        JToken isReadonlyValue = responseDoc["is_readonly"];
                        if (isReadonlyValue != null && isReadonlyValue.Type != JTokenType.Null)
                        {
                            bool isReadonlyInstance = (bool)isReadonlyValue;
                            deploymentInstance.IsReadOnly = isReadonlyInstance;
                        }
                        
                        JToken urlValue = responseDoc["url"];
                        if (urlValue != null && urlValue.Type != JTokenType.Null)
                        {
                            Uri urlInstance = TypeConversion.TryParseUri((string)urlValue);
                            deploymentInstance.Url = urlInstance;
                        }
                        
                        JToken logUrlValue = responseDoc["log_url"];
                        if (logUrlValue != null && logUrlValue.Type != JTokenType.Null)
                        {
                            Uri logUrlInstance = TypeConversion.TryParseUri((string)logUrlValue);
                            deploymentInstance.LogUrl = logUrlInstance;
                        }
                        
                        JToken siteNameValue = responseDoc["site_name"];
                        if (siteNameValue != null && siteNameValue.Type != JTokenType.Null)
                        {
                            string siteNameInstance = (string)siteNameValue;
                            deploymentInstance.SiteName = siteNameInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
