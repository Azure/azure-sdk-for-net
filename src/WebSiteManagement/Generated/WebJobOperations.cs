// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.WebSitesExtensions;
using Microsoft.WindowsAzure.WebSitesExtensions.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.WebSitesExtensions
{
    /// <summary>
    /// Operations for managing the jobs.
    /// </summary>
    internal partial class WebJobOperations : IServiceOperations<WebSiteExtensionsClient>, IWebJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the WebJobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal WebJobOperations(WebSiteExtensionsClient client)
        {
            this._client = client;
        }
        
        private WebSiteExtensionsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.WebSiteExtensionsClient.
        /// </summary>
        public WebSiteExtensionsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='recursive'>
        /// The recursive flag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteContinuousAsync(string jobId, string recursive, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            if (recursive == null)
            {
                throw new ArgumentNullException("recursive");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("recursive", recursive);
                Tracing.Enter(invocationId, this, "DeleteContinuousAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/continuous/" + jobId + "?";
            url = url + "version=2";
            url = url + "&recursive=" + Uri.EscapeUriString(recursive);
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='recursive'>
        /// The recursive flag.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteTriggeredAsync(string jobId, string recursive, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            if (recursive == null)
            {
                throw new ArgumentNullException("recursive");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("recursive", recursive);
                Tracing.Enter(invocationId, this, "DeleteTriggeredAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/triggered/" + jobId + "?";
            url = url + "version=2";
            url = url + "&recursive=" + Uri.EscapeUriString(recursive);
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        public async Task<WebJobGetResponse> GetAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/" + jobId + "?";
            url = url + "version=2";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebJobGetResponse result = null;
                    result = new WebJobGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobId'>
        /// The deployment identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        public async Task<WebJobGetResponse> GetContinuousAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                Tracing.Enter(invocationId, this, "GetContinuousAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/continuous/" + jobId + "?";
            url = url + "version=2";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebJobGetResponse result = null;
                    result = new WebJobGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='jobRunId'>
        /// The job run identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Job Run operation response.
        /// </returns>
        public async Task<WebJobGetRunResponse> GetRunAsync(string jobId, string jobRunId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            if (jobRunId == null)
            {
                throw new ArgumentNullException("jobRunId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("jobRunId", jobRunId);
                Tracing.Enter(invocationId, this, "GetRunAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/triggered/" + jobId + "/history/" + jobRunId + "?";
            url = url + "version=2";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebJobGetRunResponse result = null;
                    result = new WebJobGetRunResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobId'>
        /// The deployment identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        public async Task<WebJobGetResponse> GetTriggeredAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                Tracing.Enter(invocationId, this, "GetTriggeredAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/triggered/" + jobId + "?";
            url = url + "version=2";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebJobGetResponse result = null;
                    result = new WebJobGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        public async Task<WebJobListResponse> ListAsync(WebJobListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs?";
            url = url + "version=2";
            if (parameters != null && parameters.Top != null)
            {
                url = url + "&$top=" + Uri.EscapeUriString(parameters.Top);
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                url = url + "&$orderBy=" + Uri.EscapeUriString(parameters.OrderBy);
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebJobListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebJobListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        JArray jobsArray = (JArray)responseDoc;
                        if (jobsArray != null)
                        {
                            foreach (JToken jobsValue in jobsArray)
                            {
                                WebJob webJobInstance = new WebJob();
                                result.Jobs.Add(webJobInstance);
                                
                                JToken nameValue = jobsValue["name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    webJobInstance.Name = nameInstance;
                                }
                                
                                JToken runCommandValue = jobsValue["runCommand"];
                                if (runCommandValue != null)
                                {
                                    string runCommandInstance = (string)runCommandValue;
                                    webJobInstance.RunCommand = runCommandInstance;
                                }
                                
                                JToken typeValue = jobsValue["type"];
                                if (typeValue != null)
                                {
                                    string typeInstance = (string)typeValue;
                                    webJobInstance.Type = typeInstance;
                                }
                                
                                JToken urlValue = jobsValue["url"];
                                if (urlValue != null)
                                {
                                    // how
                                    Uri urlInstance = TypeConversion.TryParseUri((string)urlValue);
                                    webJobInstance.Url = urlInstance;
                                }
                                
                                JToken historyUrlValue = jobsValue["history_url"];
                                if (historyUrlValue != null)
                                {
                                    string historyUrlInstance = (string)historyUrlValue;
                                    webJobInstance.HistoryUrl = historyUrlInstance;
                                }
                                
                                JToken extraInfoUrlValue = jobsValue["extra_info_url"];
                                if (extraInfoUrlValue != null)
                                {
                                    string extraInfoUrlInstance = (string)extraInfoUrlValue;
                                    webJobInstance.ExtraInfoUrl = extraInfoUrlInstance;
                                }
                                
                                JToken latestRunValue = jobsValue["latest_run"];
                                if (latestRunValue != null)
                                {
                                    WebJobRun latestRunInstance = new WebJobRun();
                                    webJobInstance.LatestRun = latestRunInstance;
                                    
                                    JToken idValue = latestRunValue["id"];
                                    if (idValue != null)
                                    {
                                        string idInstance = (string)idValue;
                                        latestRunInstance.Id = idInstance;
                                    }
                                    
                                    JToken statusValue = latestRunValue["status"];
                                    if (statusValue != null)
                                    {
                                        string statusInstance = (string)statusValue;
                                        latestRunInstance.Status = statusInstance;
                                    }
                                    
                                    JToken startTimeValue = latestRunValue["start_time"];
                                    if (startTimeValue != null)
                                    {
                                        DateTime startTimeInstance = (DateTime)startTimeValue;
                                        latestRunInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = latestRunValue["end_time"];
                                    if (endTimeValue != null)
                                    {
                                        DateTime endTimeInstance = (DateTime)endTimeValue;
                                        latestRunInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken durationValue = latestRunValue["duration"];
                                    if (durationValue != null)
                                    {
                                        // how
                                        TimeSpan durationInstance = TimeSpan.Parse((string)durationValue, CultureInfo.InvariantCulture);
                                        latestRunInstance.Duration = durationInstance;
                                    }
                                    
                                    JToken outputUrlValue = latestRunValue["output_url"];
                                    if (outputUrlValue != null)
                                    {
                                        // how
                                        Uri outputUrlInstance = TypeConversion.TryParseUri((string)outputUrlValue);
                                        latestRunInstance.OutputUrl = outputUrlInstance;
                                    }
                                    
                                    JToken errorUrlValue = latestRunValue["error_url"];
                                    if (errorUrlValue != null)
                                    {
                                        // how
                                        Uri errorUrlInstance = TypeConversion.TryParseUri((string)errorUrlValue);
                                        latestRunInstance.ErrorUrl = errorUrlInstance;
                                    }
                                    
                                    JToken urlValue2 = latestRunValue["url"];
                                    if (urlValue2 != null)
                                    {
                                        // how
                                        Uri urlInstance2 = TypeConversion.TryParseUri((string)urlValue2);
                                        latestRunInstance.Url = urlInstance2;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        public async Task<WebJobListResponse> ListContinuousAsync(WebJobListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListContinuousAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/continuous?";
            url = url + "version=2";
            if (parameters != null && parameters.Top != null)
            {
                url = url + "&$top=" + Uri.EscapeUriString(parameters.Top);
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                url = url + "&$orderBy=" + Uri.EscapeUriString(parameters.OrderBy);
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebJobListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebJobListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        JArray jobsArray = (JArray)responseDoc;
                        if (jobsArray != null)
                        {
                            foreach (JToken jobsValue in jobsArray)
                            {
                                WebJob webJobInstance = new WebJob();
                                result.Jobs.Add(webJobInstance);
                                
                                JToken nameValue = jobsValue["name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    webJobInstance.Name = nameInstance;
                                }
                                
                                JToken runCommandValue = jobsValue["runCommand"];
                                if (runCommandValue != null)
                                {
                                    string runCommandInstance = (string)runCommandValue;
                                    webJobInstance.RunCommand = runCommandInstance;
                                }
                                
                                JToken typeValue = jobsValue["type"];
                                if (typeValue != null)
                                {
                                    string typeInstance = (string)typeValue;
                                    webJobInstance.Type = typeInstance;
                                }
                                
                                JToken urlValue = jobsValue["url"];
                                if (urlValue != null)
                                {
                                    // how
                                    Uri urlInstance = TypeConversion.TryParseUri((string)urlValue);
                                    webJobInstance.Url = urlInstance;
                                }
                                
                                JToken historyUrlValue = jobsValue["history_url"];
                                if (historyUrlValue != null)
                                {
                                    string historyUrlInstance = (string)historyUrlValue;
                                    webJobInstance.HistoryUrl = historyUrlInstance;
                                }
                                
                                JToken extraInfoUrlValue = jobsValue["extra_info_url"];
                                if (extraInfoUrlValue != null)
                                {
                                    string extraInfoUrlInstance = (string)extraInfoUrlValue;
                                    webJobInstance.ExtraInfoUrl = extraInfoUrlInstance;
                                }
                                
                                JToken latestRunValue = jobsValue["latest_run"];
                                if (latestRunValue != null)
                                {
                                    WebJobRun latestRunInstance = new WebJobRun();
                                    webJobInstance.LatestRun = latestRunInstance;
                                    
                                    JToken idValue = latestRunValue["id"];
                                    if (idValue != null)
                                    {
                                        string idInstance = (string)idValue;
                                        latestRunInstance.Id = idInstance;
                                    }
                                    
                                    JToken statusValue = latestRunValue["status"];
                                    if (statusValue != null)
                                    {
                                        string statusInstance = (string)statusValue;
                                        latestRunInstance.Status = statusInstance;
                                    }
                                    
                                    JToken startTimeValue = latestRunValue["start_time"];
                                    if (startTimeValue != null)
                                    {
                                        DateTime startTimeInstance = (DateTime)startTimeValue;
                                        latestRunInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = latestRunValue["end_time"];
                                    if (endTimeValue != null)
                                    {
                                        DateTime endTimeInstance = (DateTime)endTimeValue;
                                        latestRunInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken durationValue = latestRunValue["duration"];
                                    if (durationValue != null)
                                    {
                                        // how
                                        TimeSpan durationInstance = TimeSpan.Parse((string)durationValue, CultureInfo.InvariantCulture);
                                        latestRunInstance.Duration = durationInstance;
                                    }
                                    
                                    JToken outputUrlValue = latestRunValue["output_url"];
                                    if (outputUrlValue != null)
                                    {
                                        // how
                                        Uri outputUrlInstance = TypeConversion.TryParseUri((string)outputUrlValue);
                                        latestRunInstance.OutputUrl = outputUrlInstance;
                                    }
                                    
                                    JToken errorUrlValue = latestRunValue["error_url"];
                                    if (errorUrlValue != null)
                                    {
                                        // how
                                        Uri errorUrlInstance = TypeConversion.TryParseUri((string)errorUrlValue);
                                        latestRunInstance.ErrorUrl = errorUrlInstance;
                                    }
                                    
                                    JToken urlValue2 = latestRunValue["url"];
                                    if (urlValue2 != null)
                                    {
                                        // how
                                        Uri urlInstance2 = TypeConversion.TryParseUri((string)urlValue2);
                                        latestRunInstance.Url = urlInstance2;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Web Job run list operation response.
        /// </returns>
        public async Task<WebJobRunListResponse> ListRunsAsync(string jobName, WebJobRunListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListRunsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/triggered/" + jobName + "/history?";
            url = url + "version=2";
            if (parameters != null && parameters.Top != null)
            {
                url = url + "&$top=" + Uri.EscapeUriString(parameters.Top);
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                url = url + "&$orderBy=" + Uri.EscapeUriString(parameters.OrderBy);
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebJobRunListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebJobRunListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        JArray jobRunsArray = (JArray)responseDoc;
                        if (jobRunsArray != null)
                        {
                            foreach (JToken jobRunsValue in jobRunsArray)
                            {
                                WebJobRun webJobRunInstance = new WebJobRun();
                                result.JobRuns.Add(webJobRunInstance);
                                
                                JToken idValue = jobRunsValue["id"];
                                if (idValue != null)
                                {
                                    string idInstance = (string)idValue;
                                    webJobRunInstance.Id = idInstance;
                                }
                                
                                JToken statusValue = jobRunsValue["status"];
                                if (statusValue != null)
                                {
                                    string statusInstance = (string)statusValue;
                                    webJobRunInstance.Status = statusInstance;
                                }
                                
                                JToken startTimeValue = jobRunsValue["start_time"];
                                if (startTimeValue != null)
                                {
                                    DateTime startTimeInstance = (DateTime)startTimeValue;
                                    webJobRunInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = jobRunsValue["end_time"];
                                if (endTimeValue != null)
                                {
                                    DateTime endTimeInstance = (DateTime)endTimeValue;
                                    webJobRunInstance.EndTime = endTimeInstance;
                                }
                                
                                JToken durationValue = jobRunsValue["duration"];
                                if (durationValue != null)
                                {
                                    // how
                                    TimeSpan durationInstance = TimeSpan.Parse((string)durationValue, CultureInfo.InvariantCulture);
                                    webJobRunInstance.Duration = durationInstance;
                                }
                                
                                JToken outputUrlValue = jobRunsValue["output_url"];
                                if (outputUrlValue != null)
                                {
                                    // how
                                    Uri outputUrlInstance = TypeConversion.TryParseUri((string)outputUrlValue);
                                    webJobRunInstance.OutputUrl = outputUrlInstance;
                                }
                                
                                JToken errorUrlValue = jobRunsValue["error_url"];
                                if (errorUrlValue != null)
                                {
                                    // how
                                    Uri errorUrlInstance = TypeConversion.TryParseUri((string)errorUrlValue);
                                    webJobRunInstance.ErrorUrl = errorUrlInstance;
                                }
                                
                                JToken urlValue = jobRunsValue["url"];
                                if (urlValue != null)
                                {
                                    // how
                                    Uri urlInstance = TypeConversion.TryParseUri((string)urlValue);
                                    webJobRunInstance.Url = urlInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        public async Task<WebJobListResponse> ListTriggeredAsync(WebJobListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListTriggeredAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/triggered?";
            url = url + "version=2";
            if (parameters != null && parameters.Top != null)
            {
                url = url + "&$top=" + Uri.EscapeUriString(parameters.Top);
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                url = url + "&$orderBy=" + Uri.EscapeUriString(parameters.OrderBy);
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Json);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebJobListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebJobListResponse();
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        JArray jobsArray = (JArray)responseDoc;
                        if (jobsArray != null)
                        {
                            foreach (JToken jobsValue in jobsArray)
                            {
                                WebJob webJobInstance = new WebJob();
                                result.Jobs.Add(webJobInstance);
                                
                                JToken nameValue = jobsValue["name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    webJobInstance.Name = nameInstance;
                                }
                                
                                JToken runCommandValue = jobsValue["runCommand"];
                                if (runCommandValue != null)
                                {
                                    string runCommandInstance = (string)runCommandValue;
                                    webJobInstance.RunCommand = runCommandInstance;
                                }
                                
                                JToken typeValue = jobsValue["type"];
                                if (typeValue != null)
                                {
                                    string typeInstance = (string)typeValue;
                                    webJobInstance.Type = typeInstance;
                                }
                                
                                JToken urlValue = jobsValue["url"];
                                if (urlValue != null)
                                {
                                    // how
                                    Uri urlInstance = TypeConversion.TryParseUri((string)urlValue);
                                    webJobInstance.Url = urlInstance;
                                }
                                
                                JToken historyUrlValue = jobsValue["history_url"];
                                if (historyUrlValue != null)
                                {
                                    string historyUrlInstance = (string)historyUrlValue;
                                    webJobInstance.HistoryUrl = historyUrlInstance;
                                }
                                
                                JToken extraInfoUrlValue = jobsValue["extra_info_url"];
                                if (extraInfoUrlValue != null)
                                {
                                    string extraInfoUrlInstance = (string)extraInfoUrlValue;
                                    webJobInstance.ExtraInfoUrl = extraInfoUrlInstance;
                                }
                                
                                JToken latestRunValue = jobsValue["latest_run"];
                                if (latestRunValue != null)
                                {
                                    WebJobRun latestRunInstance = new WebJobRun();
                                    webJobInstance.LatestRun = latestRunInstance;
                                    
                                    JToken idValue = latestRunValue["id"];
                                    if (idValue != null)
                                    {
                                        string idInstance = (string)idValue;
                                        latestRunInstance.Id = idInstance;
                                    }
                                    
                                    JToken statusValue = latestRunValue["status"];
                                    if (statusValue != null)
                                    {
                                        string statusInstance = (string)statusValue;
                                        latestRunInstance.Status = statusInstance;
                                    }
                                    
                                    JToken startTimeValue = latestRunValue["start_time"];
                                    if (startTimeValue != null)
                                    {
                                        DateTime startTimeInstance = (DateTime)startTimeValue;
                                        latestRunInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = latestRunValue["end_time"];
                                    if (endTimeValue != null)
                                    {
                                        DateTime endTimeInstance = (DateTime)endTimeValue;
                                        latestRunInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken durationValue = latestRunValue["duration"];
                                    if (durationValue != null)
                                    {
                                        // how
                                        TimeSpan durationInstance = TimeSpan.Parse((string)durationValue, CultureInfo.InvariantCulture);
                                        latestRunInstance.Duration = durationInstance;
                                    }
                                    
                                    JToken outputUrlValue = latestRunValue["output_url"];
                                    if (outputUrlValue != null)
                                    {
                                        // how
                                        Uri outputUrlInstance = TypeConversion.TryParseUri((string)outputUrlValue);
                                        latestRunInstance.OutputUrl = outputUrlInstance;
                                    }
                                    
                                    JToken errorUrlValue = latestRunValue["error_url"];
                                    if (errorUrlValue != null)
                                    {
                                        // how
                                        Uri errorUrlInstance = TypeConversion.TryParseUri((string)errorUrlValue);
                                        latestRunInstance.ErrorUrl = errorUrlInstance;
                                    }
                                    
                                    JToken urlValue2 = latestRunValue["url"];
                                    if (urlValue2 != null)
                                    {
                                        // how
                                        Uri urlInstance2 = TypeConversion.TryParseUri((string)urlValue2);
                                        latestRunInstance.Url = urlInstance2;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RunTriggeredAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                Tracing.Enter(invocationId, this, "RunTriggeredAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/triggered/" + jobId + "/run?";
            url = url + "version=2";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> StartContinousAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                Tracing.Enter(invocationId, this, "StartContinousAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/continuous/" + jobId + "/start?";
            url = url + "version=2";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> StopContinousAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                Tracing.Enter(invocationId, this, "StopContinousAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "jobs/continuous/" + jobId + "/stop?";
            url = url + "version=2";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
