// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.WebSites;
using Microsoft.WindowsAzure.Management.WebSites.Models;

namespace Microsoft.WindowsAzure.Management.WebSites
{
    /// <summary>
    /// Operations for managing the web sites in a web space.
    /// </summary>
    internal partial class WebSiteOperations : IServiceOperations<WebSiteManagementClient>, IWebSiteOperations
    {
        /// <summary>
        /// Initializes a new instance of the WebSiteOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal WebSiteOperations(WebSiteManagementClient client)
        {
            this._client = client;
        }
        
        private WebSiteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.WebSiteManagementClient.
        /// </summary>
        public WebSiteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public async Task<WebSiteCreateResponse> CreateAsync(string webSpaceName, WebSiteCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.HostNames == null)
            {
                throw new ArgumentNullException("parameters.HostNames");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.WebSpace != null)
            {
                if (parameters.WebSpace.GeoRegion == null)
                {
                    throw new ArgumentNullException("parameters.WebSpace.GeoRegion");
                }
                if (parameters.WebSpace.Name == null)
                {
                    throw new ArgumentNullException("parameters.WebSpace.Name");
                }
                if (parameters.WebSpace.Plan == null)
                {
                    throw new ArgumentNullException("parameters.WebSpace.Plan");
                }
            }
            if (parameters.WebSpaceName == null)
            {
                throw new ArgumentNullException("parameters.WebSpaceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement siteElement = new XElement(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(siteElement);
                
                XElement hostNamesSequenceElement = new XElement(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                foreach (string hostNamesItem in parameters.HostNames)
                {
                    XElement hostNamesItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                    hostNamesItemElement.Value = hostNamesItem;
                    hostNamesSequenceElement.Add(hostNamesItemElement);
                }
                siteElement.Add(hostNamesSequenceElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                siteElement.Add(nameElement);
                
                if (parameters.ComputeMode != null)
                {
                    XElement computeModeElement = new XElement(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                    computeModeElement.Value = parameters.ComputeMode.ToString();
                    siteElement.Add(computeModeElement);
                }
                
                if (parameters.ServerFarm != null)
                {
                    XElement serverFarmElement = new XElement(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                    serverFarmElement.Value = parameters.ServerFarm;
                    siteElement.Add(serverFarmElement);
                }
                
                if (parameters.SiteMode != null)
                {
                    XElement siteModeElement = new XElement(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                    siteModeElement.Value = parameters.SiteMode.ToString();
                    siteElement.Add(siteModeElement);
                }
                
                XElement webSpaceElement = new XElement(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                webSpaceElement.Value = parameters.WebSpaceName;
                siteElement.Add(webSpaceElement);
                
                if (parameters.WebSpace != null)
                {
                    XElement webSpaceToCreateElement = new XElement(XName.Get("WebSpaceToCreate", "http://schemas.microsoft.com/windowsazure"));
                    siteElement.Add(webSpaceToCreateElement);
                    
                    XElement geoRegionElement = new XElement(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure"));
                    geoRegionElement.Value = parameters.WebSpace.GeoRegion;
                    webSpaceToCreateElement.Add(geoRegionElement);
                    
                    XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                    nameElement2.Value = parameters.WebSpace.Name;
                    webSpaceToCreateElement.Add(nameElement2);
                    
                    XElement planElement = new XElement(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                    planElement.Value = parameters.WebSpace.Plan;
                    webSpaceToCreateElement.Add(planElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteCreateResponse result = new WebSiteCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement siteElement2 = responseDoc.Element(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                    if (siteElement2 != null)
                    {
                        WebSite webSiteInstance = new WebSite();
                        result.WebSite = webSiteInstance;
                        
                        XElement adminEnabledElement = siteElement2.Element(XName.Get("AdminEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (adminEnabledElement != null)
                        {
                            bool adminEnabledInstance = bool.Parse(adminEnabledElement.Value);
                            webSiteInstance.AdminEnabled = adminEnabledInstance;
                        }
                        
                        XElement availabilityStateElement = siteElement2.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (availabilityStateElement != null)
                        {
                            WebSpaceAvailabilityState availabilityStateInstance = (WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, false);
                            webSiteInstance.AvailabilityState = availabilityStateInstance;
                        }
                        
                        XElement computeModeElement2 = siteElement2.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                        if (computeModeElement2 != null)
                        {
                            WebSiteComputeMode computeModeInstance = (WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement2.Value, false);
                            webSiteInstance.ComputeMode = computeModeInstance;
                        }
                        
                        XElement enabledElement = siteElement2.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledElement != null)
                        {
                            bool enabledInstance = bool.Parse(enabledElement.Value);
                            webSiteInstance.Enabled = enabledInstance;
                        }
                        
                        XElement enabledHostNamesSequenceElement = siteElement2.Element(XName.Get("EnabledHostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledHostNamesSequenceElement != null)
                        {
                            foreach (XElement enabledHostNamesElement in enabledHostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.EnabledHostNames.Add(enabledHostNamesElement.Value);
                            }
                        }
                        
                        XElement hostNameSslStatesSequenceElement = siteElement2.Element(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNameSslStatesSequenceElement != null)
                        {
                            foreach (XElement hostNameSslStatesElement in hostNameSslStatesSequenceElement.Elements(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                webSiteInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                
                                XElement nameElement3 = hostNameSslStatesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement3 != null)
                                {
                                    string nameInstance = nameElement3.Value;
                                    webSiteHostNameSslStateInstance.Name = nameInstance;
                                }
                                
                                XElement sslStateElement = hostNameSslStatesElement.Element(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                                if (sslStateElement != null)
                                {
                                    WebSiteSslState sslStateInstance = (WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), sslStateElement.Value, false);
                                    webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                }
                                
                                XElement thumbprintElement = hostNameSslStatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement != null)
                                {
                                    bool isNil = false;
                                    XAttribute nilAttribute = thumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute != null)
                                    {
                                        isNil = nilAttribute.Value == "true";
                                    }
                                    if (isNil == false)
                                    {
                                        string thumbprintInstance = thumbprintElement.Value;
                                        webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                    }
                                }
                                
                                XElement virtualIPElement = hostNameSslStatesElement.Element(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualIPElement != null)
                                {
                                    bool isNil2 = false;
                                    XAttribute nilAttribute2 = virtualIPElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute2 != null)
                                    {
                                        isNil2 = nilAttribute2.Value == "true";
                                    }
                                    if (isNil2 == false)
                                    {
                                        string virtualIPInstance = virtualIPElement.Value;
                                        webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                    }
                                }
                            }
                        }
                        
                        XElement hostNamesSequenceElement2 = siteElement2.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNamesSequenceElement2 != null)
                        {
                            foreach (XElement hostNamesElement in hostNamesSequenceElement2.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.HostNames.Add(hostNamesElement.Value);
                            }
                        }
                        
                        XElement lastModifiedTimeUtcElement = siteElement2.Element(XName.Get("LastModifiedTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                        if (lastModifiedTimeUtcElement != null)
                        {
                            DateTime lastModifiedTimeUtcInstance = DateTime.Parse(lastModifiedTimeUtcElement.Value, CultureInfo.InvariantCulture);
                            webSiteInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                        }
                        
                        XElement nameElement4 = siteElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement4 != null)
                        {
                            string nameInstance2 = nameElement4.Value;
                            webSiteInstance.Name = nameInstance2;
                        }
                        
                        XElement ownerElement = siteElement2.Element(XName.Get("Owner", "http://schemas.microsoft.com/windowsazure"));
                        if (ownerElement != null)
                        {
                            bool isNil3 = false;
                            XAttribute nilAttribute3 = ownerElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute3 != null)
                            {
                                isNil3 = nilAttribute3.Value == "true";
                            }
                            if (isNil3 == false)
                            {
                                string ownerInstance = ownerElement.Value;
                                webSiteInstance.Owner = ownerInstance;
                            }
                        }
                        
                        XElement repositorySiteNameElement = siteElement2.Element(XName.Get("RepositorySiteName", "http://schemas.microsoft.com/windowsazure"));
                        if (repositorySiteNameElement != null)
                        {
                            string repositorySiteNameInstance = repositorySiteNameElement.Value;
                            webSiteInstance.RepositorySiteName = repositorySiteNameInstance;
                        }
                        
                        XElement runtimeAvailabilityStateElement = siteElement2.Element(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (runtimeAvailabilityStateElement != null)
                        {
                            WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = (WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), runtimeAvailabilityStateElement.Value, false);
                            webSiteInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                        }
                        
                        XElement sSLCertificatesSequenceElement = siteElement2.Element(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                        if (sSLCertificatesSequenceElement != null)
                        {
                            foreach (XElement sSLCertificatesElement in sSLCertificatesSequenceElement.Elements(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                webSiteInstance.SslCertificates.Add(certificateInstance);
                                
                                XElement expirationDateElement = sSLCertificatesElement.Element(XName.Get("ExpirationDate", "http://schemas.microsoft.com/windowsazure"));
                                if (expirationDateElement != null)
                                {
                                    DateTime expirationDateInstance = DateTime.Parse(expirationDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.ExpirationDate = expirationDateInstance;
                                }
                                
                                XElement friendlyNameElement = sSLCertificatesElement.Element(XName.Get("FriendlyName", "http://schemas.microsoft.com/windowsazure"));
                                if (friendlyNameElement != null)
                                {
                                    string friendlyNameInstance = friendlyNameElement.Value;
                                    certificateInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                XElement hostNamesSequenceElement3 = sSLCertificatesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                                if (hostNamesSequenceElement3 != null)
                                {
                                    foreach (XElement hostNamesElement2 in hostNamesSequenceElement3.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        certificateInstance.HostNames.Add(hostNamesElement2.Value);
                                    }
                                }
                                
                                XElement issueDateElement = sSLCertificatesElement.Element(XName.Get("IssueDate", "http://schemas.microsoft.com/windowsazure"));
                                if (issueDateElement != null)
                                {
                                    DateTime issueDateInstance = DateTime.Parse(issueDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.IssueDate = issueDateInstance;
                                }
                                
                                XElement issuerElement = sSLCertificatesElement.Element(XName.Get("Issuer", "http://schemas.microsoft.com/windowsazure"));
                                if (issuerElement != null)
                                {
                                    string issuerInstance = issuerElement.Value;
                                    certificateInstance.Issuer = issuerInstance;
                                }
                                
                                XElement passwordElement = sSLCertificatesElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                if (passwordElement != null)
                                {
                                    string passwordInstance = passwordElement.Value;
                                    certificateInstance.Password = passwordInstance;
                                }
                                
                                XElement pfxBlobElement = sSLCertificatesElement.Element(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                                if (pfxBlobElement != null)
                                {
                                    byte[] pfxBlobInstance = Convert.FromBase64String(pfxBlobElement.Value);
                                    certificateInstance.PfxBlob = pfxBlobInstance;
                                }
                                
                                XElement selfLinkElement = sSLCertificatesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                if (selfLinkElement != null)
                                {
                                    Uri selfLinkInstance = TypeConversion.TryParseUri(selfLinkElement.Value);
                                    certificateInstance.SelfLinkUri = selfLinkInstance;
                                }
                                
                                XElement siteNameElement = sSLCertificatesElement.Element(XName.Get("SiteName", "http://schemas.microsoft.com/windowsazure"));
                                if (siteNameElement != null)
                                {
                                    string siteNameInstance = siteNameElement.Value;
                                    certificateInstance.SiteName = siteNameInstance;
                                }
                                
                                XElement subjectNameElement = sSLCertificatesElement.Element(XName.Get("SubjectName", "http://schemas.microsoft.com/windowsazure"));
                                if (subjectNameElement != null)
                                {
                                    string subjectNameInstance = subjectNameElement.Value;
                                    certificateInstance.SubjectName = subjectNameInstance;
                                }
                                
                                XElement thumbprintElement2 = sSLCertificatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement2 != null)
                                {
                                    string thumbprintInstance2 = thumbprintElement2.Value;
                                    certificateInstance.Thumbprint = thumbprintInstance2;
                                }
                                
                                XElement toDeleteElement = sSLCertificatesElement.Element(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                                if (toDeleteElement != null)
                                {
                                    bool toDeleteInstance = bool.Parse(toDeleteElement.Value);
                                    certificateInstance.IsToBeDeleted = toDeleteInstance;
                                }
                                
                                XElement validElement = sSLCertificatesElement.Element(XName.Get("Valid", "http://schemas.microsoft.com/windowsazure"));
                                if (validElement != null)
                                {
                                    bool validInstance = bool.Parse(validElement.Value);
                                    certificateInstance.IsValid = validInstance;
                                }
                            }
                        }
                        
                        XElement selfLinkElement2 = siteElement2.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                        if (selfLinkElement2 != null)
                        {
                            Uri selfLinkInstance2 = TypeConversion.TryParseUri(selfLinkElement2.Value);
                            webSiteInstance.Uri = selfLinkInstance2;
                        }
                        
                        XElement serverFarmElement2 = siteElement2.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                        if (serverFarmElement2 != null)
                        {
                            string serverFarmInstance = serverFarmElement2.Value;
                            webSiteInstance.ServerFarm = serverFarmInstance;
                        }
                        
                        XElement siteModeElement2 = siteElement2.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                        if (siteModeElement2 != null)
                        {
                            WebSiteMode siteModeInstance = (WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement2.Value, false);
                            webSiteInstance.SiteMode = siteModeInstance;
                        }
                        
                        XElement sitePropertiesElement = siteElement2.Element(XName.Get("SiteProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (sitePropertiesElement != null)
                        {
                            WebSite.WebSiteProperties sitePropertiesInstance = new WebSite.WebSiteProperties();
                            webSiteInstance.SiteProperties = sitePropertiesInstance;
                            
                            XElement appSettingsSequenceElement = sitePropertiesElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (appSettingsSequenceElement != null)
                            {
                                foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                }
                            }
                            
                            XElement metadataSequenceElement = sitePropertiesElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                            if (metadataSequenceElement != null)
                            {
                                foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                }
                            }
                            
                            XElement propertiesSequenceElement = sitePropertiesElement.Element(XName.Get("Properties", "http://schemas.microsoft.com/windowsazure"));
                            if (propertiesSequenceElement != null)
                            {
                                foreach (XElement propertiesElement in propertiesSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string propertiesKey = propertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string propertiesValue = propertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue);
                                }
                            }
                        }
                        
                        XElement stateElement = siteElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            WebSiteState stateInstance = (WebSiteState)Enum.Parse(typeof(WebSiteState), stateElement.Value, false);
                            webSiteInstance.State = stateInstance;
                        }
                        
                        XElement usageStateElement = siteElement2.Element(XName.Get("UsageState", "http://schemas.microsoft.com/windowsazure"));
                        if (usageStateElement != null)
                        {
                            WebSiteUsageState usageStateInstance = (WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), usageStateElement.Value, false);
                            webSiteInstance.UsageState = usageStateInstance;
                        }
                        
                        XElement webSpaceElement2 = siteElement2.Element(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                        if (webSpaceElement2 != null)
                        {
                            string webSpaceInstance = webSpaceElement2.Value;
                            webSiteInstance.WebSpace = webSpaceInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateRepositoryAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "CreateRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/repository";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can delete a web site by issuing an HTTP DELETE request. If the
        /// web site being deleted is the only site remaining in a server
        /// farm, you can optionally delete the server farm as well by using
        /// the deleteEmptyServerFarm parameter.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='deleteEmptyServerFarm'>
        /// If the site being deleted is the last web site in a server farm,
        /// you can delete the server farm.
        /// </param>
        /// <param name='deleteMetrics'>
        /// Delete the metrics for the site that you are deleting
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string webSpaceName, string webSiteName, bool deleteEmptyServerFarm, bool deleteMetrics, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("deleteEmptyServerFarm", deleteEmptyServerFarm);
                tracingParameters.Add("deleteMetrics", deleteMetrics);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "?";
            url = url + "&deleteEmptyServerFarm=" + Uri.EscapeUriString(deleteEmptyServerFarm.ToString().ToLower());
            url = url + "&deleteMetrics=" + Uri.EscapeUriString(deleteMetrics.ToString().ToLower());
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public async Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "DeleteRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/repository";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteDeleteRepositoryResponse result = new WebSiteDeleteRepositoryResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement anyURIElement = responseDoc.Element(XName.Get("anyURI", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (anyURIElement != null)
                    {
                        result.Uri = TypeConversion.TryParseUri(anyURIElement.Value);
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> GeneratePasswordAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GeneratePasswordAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/newpassword";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public async Task<WebSiteGetResponse> GetAsync(string webSpaceName, string webSiteName, WebSiteGetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "?";
            if (parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeUriString(string.Join(",", parameters.PropertiesToInclude));
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetResponse result = new WebSiteGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement siteElement = responseDoc.Element(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                    if (siteElement != null)
                    {
                        WebSite webSiteInstance = new WebSite();
                        result.WebSite = webSiteInstance;
                        
                        XElement adminEnabledElement = siteElement.Element(XName.Get("AdminEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (adminEnabledElement != null)
                        {
                            bool adminEnabledInstance = bool.Parse(adminEnabledElement.Value);
                            webSiteInstance.AdminEnabled = adminEnabledInstance;
                        }
                        
                        XElement availabilityStateElement = siteElement.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (availabilityStateElement != null)
                        {
                            WebSpaceAvailabilityState availabilityStateInstance = (WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, false);
                            webSiteInstance.AvailabilityState = availabilityStateInstance;
                        }
                        
                        XElement computeModeElement = siteElement.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                        if (computeModeElement != null)
                        {
                            WebSiteComputeMode computeModeInstance = (WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement.Value, false);
                            webSiteInstance.ComputeMode = computeModeInstance;
                        }
                        
                        XElement enabledElement = siteElement.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledElement != null)
                        {
                            bool enabledInstance = bool.Parse(enabledElement.Value);
                            webSiteInstance.Enabled = enabledInstance;
                        }
                        
                        XElement enabledHostNamesSequenceElement = siteElement.Element(XName.Get("EnabledHostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledHostNamesSequenceElement != null)
                        {
                            foreach (XElement enabledHostNamesElement in enabledHostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.EnabledHostNames.Add(enabledHostNamesElement.Value);
                            }
                        }
                        
                        XElement hostNameSslStatesSequenceElement = siteElement.Element(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNameSslStatesSequenceElement != null)
                        {
                            foreach (XElement hostNameSslStatesElement in hostNameSslStatesSequenceElement.Elements(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                webSiteInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                
                                XElement nameElement = hostNameSslStatesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    webSiteHostNameSslStateInstance.Name = nameInstance;
                                }
                                
                                XElement sslStateElement = hostNameSslStatesElement.Element(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                                if (sslStateElement != null)
                                {
                                    WebSiteSslState sslStateInstance = (WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), sslStateElement.Value, false);
                                    webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                }
                                
                                XElement thumbprintElement = hostNameSslStatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement != null)
                                {
                                    bool isNil = false;
                                    XAttribute nilAttribute = thumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute != null)
                                    {
                                        isNil = nilAttribute.Value == "true";
                                    }
                                    if (isNil == false)
                                    {
                                        string thumbprintInstance = thumbprintElement.Value;
                                        webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                    }
                                }
                                
                                XElement virtualIPElement = hostNameSslStatesElement.Element(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualIPElement != null)
                                {
                                    bool isNil2 = false;
                                    XAttribute nilAttribute2 = virtualIPElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute2 != null)
                                    {
                                        isNil2 = nilAttribute2.Value == "true";
                                    }
                                    if (isNil2 == false)
                                    {
                                        string virtualIPInstance = virtualIPElement.Value;
                                        webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                    }
                                }
                            }
                        }
                        
                        XElement hostNamesSequenceElement = siteElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNamesSequenceElement != null)
                        {
                            foreach (XElement hostNamesElement in hostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.HostNames.Add(hostNamesElement.Value);
                            }
                        }
                        
                        XElement lastModifiedTimeUtcElement = siteElement.Element(XName.Get("LastModifiedTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                        if (lastModifiedTimeUtcElement != null)
                        {
                            DateTime lastModifiedTimeUtcInstance = DateTime.Parse(lastModifiedTimeUtcElement.Value, CultureInfo.InvariantCulture);
                            webSiteInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                        }
                        
                        XElement nameElement2 = siteElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance2 = nameElement2.Value;
                            webSiteInstance.Name = nameInstance2;
                        }
                        
                        XElement ownerElement = siteElement.Element(XName.Get("Owner", "http://schemas.microsoft.com/windowsazure"));
                        if (ownerElement != null)
                        {
                            bool isNil3 = false;
                            XAttribute nilAttribute3 = ownerElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute3 != null)
                            {
                                isNil3 = nilAttribute3.Value == "true";
                            }
                            if (isNil3 == false)
                            {
                                string ownerInstance = ownerElement.Value;
                                webSiteInstance.Owner = ownerInstance;
                            }
                        }
                        
                        XElement repositorySiteNameElement = siteElement.Element(XName.Get("RepositorySiteName", "http://schemas.microsoft.com/windowsazure"));
                        if (repositorySiteNameElement != null)
                        {
                            string repositorySiteNameInstance = repositorySiteNameElement.Value;
                            webSiteInstance.RepositorySiteName = repositorySiteNameInstance;
                        }
                        
                        XElement runtimeAvailabilityStateElement = siteElement.Element(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (runtimeAvailabilityStateElement != null)
                        {
                            WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = (WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), runtimeAvailabilityStateElement.Value, false);
                            webSiteInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                        }
                        
                        XElement sSLCertificatesSequenceElement = siteElement.Element(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                        if (sSLCertificatesSequenceElement != null)
                        {
                            foreach (XElement sSLCertificatesElement in sSLCertificatesSequenceElement.Elements(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                webSiteInstance.SslCertificates.Add(certificateInstance);
                                
                                XElement expirationDateElement = sSLCertificatesElement.Element(XName.Get("ExpirationDate", "http://schemas.microsoft.com/windowsazure"));
                                if (expirationDateElement != null)
                                {
                                    DateTime expirationDateInstance = DateTime.Parse(expirationDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.ExpirationDate = expirationDateInstance;
                                }
                                
                                XElement friendlyNameElement = sSLCertificatesElement.Element(XName.Get("FriendlyName", "http://schemas.microsoft.com/windowsazure"));
                                if (friendlyNameElement != null)
                                {
                                    string friendlyNameInstance = friendlyNameElement.Value;
                                    certificateInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                XElement hostNamesSequenceElement2 = sSLCertificatesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                                if (hostNamesSequenceElement2 != null)
                                {
                                    foreach (XElement hostNamesElement2 in hostNamesSequenceElement2.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        certificateInstance.HostNames.Add(hostNamesElement2.Value);
                                    }
                                }
                                
                                XElement issueDateElement = sSLCertificatesElement.Element(XName.Get("IssueDate", "http://schemas.microsoft.com/windowsazure"));
                                if (issueDateElement != null)
                                {
                                    DateTime issueDateInstance = DateTime.Parse(issueDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.IssueDate = issueDateInstance;
                                }
                                
                                XElement issuerElement = sSLCertificatesElement.Element(XName.Get("Issuer", "http://schemas.microsoft.com/windowsazure"));
                                if (issuerElement != null)
                                {
                                    string issuerInstance = issuerElement.Value;
                                    certificateInstance.Issuer = issuerInstance;
                                }
                                
                                XElement passwordElement = sSLCertificatesElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                if (passwordElement != null)
                                {
                                    string passwordInstance = passwordElement.Value;
                                    certificateInstance.Password = passwordInstance;
                                }
                                
                                XElement pfxBlobElement = sSLCertificatesElement.Element(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                                if (pfxBlobElement != null)
                                {
                                    byte[] pfxBlobInstance = Convert.FromBase64String(pfxBlobElement.Value);
                                    certificateInstance.PfxBlob = pfxBlobInstance;
                                }
                                
                                XElement selfLinkElement = sSLCertificatesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                if (selfLinkElement != null)
                                {
                                    Uri selfLinkInstance = TypeConversion.TryParseUri(selfLinkElement.Value);
                                    certificateInstance.SelfLinkUri = selfLinkInstance;
                                }
                                
                                XElement siteNameElement = sSLCertificatesElement.Element(XName.Get("SiteName", "http://schemas.microsoft.com/windowsazure"));
                                if (siteNameElement != null)
                                {
                                    string siteNameInstance = siteNameElement.Value;
                                    certificateInstance.SiteName = siteNameInstance;
                                }
                                
                                XElement subjectNameElement = sSLCertificatesElement.Element(XName.Get("SubjectName", "http://schemas.microsoft.com/windowsazure"));
                                if (subjectNameElement != null)
                                {
                                    string subjectNameInstance = subjectNameElement.Value;
                                    certificateInstance.SubjectName = subjectNameInstance;
                                }
                                
                                XElement thumbprintElement2 = sSLCertificatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement2 != null)
                                {
                                    string thumbprintInstance2 = thumbprintElement2.Value;
                                    certificateInstance.Thumbprint = thumbprintInstance2;
                                }
                                
                                XElement toDeleteElement = sSLCertificatesElement.Element(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                                if (toDeleteElement != null)
                                {
                                    bool toDeleteInstance = bool.Parse(toDeleteElement.Value);
                                    certificateInstance.IsToBeDeleted = toDeleteInstance;
                                }
                                
                                XElement validElement = sSLCertificatesElement.Element(XName.Get("Valid", "http://schemas.microsoft.com/windowsazure"));
                                if (validElement != null)
                                {
                                    bool validInstance = bool.Parse(validElement.Value);
                                    certificateInstance.IsValid = validInstance;
                                }
                            }
                        }
                        
                        XElement selfLinkElement2 = siteElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                        if (selfLinkElement2 != null)
                        {
                            Uri selfLinkInstance2 = TypeConversion.TryParseUri(selfLinkElement2.Value);
                            webSiteInstance.Uri = selfLinkInstance2;
                        }
                        
                        XElement serverFarmElement = siteElement.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                        if (serverFarmElement != null)
                        {
                            string serverFarmInstance = serverFarmElement.Value;
                            webSiteInstance.ServerFarm = serverFarmInstance;
                        }
                        
                        XElement siteModeElement = siteElement.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                        if (siteModeElement != null)
                        {
                            WebSiteMode siteModeInstance = (WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement.Value, false);
                            webSiteInstance.SiteMode = siteModeInstance;
                        }
                        
                        XElement sitePropertiesElement = siteElement.Element(XName.Get("SiteProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (sitePropertiesElement != null)
                        {
                            WebSite.WebSiteProperties sitePropertiesInstance = new WebSite.WebSiteProperties();
                            webSiteInstance.SiteProperties = sitePropertiesInstance;
                            
                            XElement appSettingsSequenceElement = sitePropertiesElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (appSettingsSequenceElement != null)
                            {
                                foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                }
                            }
                            
                            XElement metadataSequenceElement = sitePropertiesElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                            if (metadataSequenceElement != null)
                            {
                                foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                }
                            }
                            
                            XElement propertiesSequenceElement = sitePropertiesElement.Element(XName.Get("Properties", "http://schemas.microsoft.com/windowsazure"));
                            if (propertiesSequenceElement != null)
                            {
                                foreach (XElement propertiesElement in propertiesSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string propertiesKey = propertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string propertiesValue = propertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue);
                                }
                            }
                        }
                        
                        XElement stateElement = siteElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            WebSiteState stateInstance = (WebSiteState)Enum.Parse(typeof(WebSiteState), stateElement.Value, false);
                            webSiteInstance.State = stateInstance;
                        }
                        
                        XElement usageStateElement = siteElement.Element(XName.Get("UsageState", "http://schemas.microsoft.com/windowsazure"));
                        if (usageStateElement != null)
                        {
                            WebSiteUsageState usageStateInstance = (WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), usageStateElement.Value, false);
                            webSiteInstance.UsageState = usageStateInstance;
                        }
                        
                        XElement webSpaceElement = siteElement.Element(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                        if (webSpaceElement != null)
                        {
                            string webSpaceInstance = webSpaceElement.Value;
                            webSiteInstance.WebSpace = webSpaceInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public async Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/config";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetConfigurationResponse result = new WebSiteGetConfigurationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement siteConfigElement = responseDoc.Element(XName.Get("SiteConfig", "http://schemas.microsoft.com/windowsazure"));
                    if (siteConfigElement != null)
                    {
                        XElement appSettingsSequenceElement = siteConfigElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                        if (appSettingsSequenceElement != null)
                        {
                            foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                            {
                                string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                result.AppSettings.Add(appSettingsKey, appSettingsValue);
                            }
                        }
                        
                        XElement connectionStringsSequenceElement = siteConfigElement.Element(XName.Get("ConnectionStrings", "http://schemas.microsoft.com/windowsazure"));
                        if (connectionStringsSequenceElement != null)
                        {
                            foreach (XElement connectionStringsElement in connectionStringsSequenceElement.Elements(XName.Get("ConnStringInfo", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSiteGetConfigurationResponse.ConnectionStringInfo connStringInfoInstance = new WebSiteGetConfigurationResponse.ConnectionStringInfo();
                                result.ConnectionStrings.Add(connStringInfoInstance);
                                
                                XElement connectionStringElement = connectionStringsElement.Element(XName.Get("ConnectionString", "http://schemas.microsoft.com/windowsazure"));
                                if (connectionStringElement != null)
                                {
                                    string connectionStringInstance = connectionStringElement.Value;
                                    connStringInfoInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                XElement nameElement = connectionStringsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    connStringInfoInstance.Name = nameInstance;
                                }
                                
                                XElement typeElement = connectionStringsElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement != null)
                                {
                                    string typeInstance = typeElement.Value;
                                    connStringInfoInstance.Type = typeInstance;
                                }
                            }
                        }
                        
                        XElement defaultDocumentsSequenceElement = siteConfigElement.Element(XName.Get("DefaultDocuments", "http://schemas.microsoft.com/windowsazure"));
                        if (defaultDocumentsSequenceElement != null)
                        {
                            foreach (XElement defaultDocumentsElement in defaultDocumentsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                result.DefaultDocuments.Add(defaultDocumentsElement.Value);
                            }
                        }
                        
                        XElement detailedErrorLoggingEnabledElement = siteConfigElement.Element(XName.Get("DetailedErrorLoggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (detailedErrorLoggingEnabledElement != null && string.IsNullOrEmpty(detailedErrorLoggingEnabledElement.Value) == false)
                        {
                            bool detailedErrorLoggingEnabledInstance = bool.Parse(detailedErrorLoggingEnabledElement.Value);
                            result.DetailedErrorLoggingEnabled = detailedErrorLoggingEnabledInstance;
                        }
                        
                        XElement documentRootElement = siteConfigElement.Element(XName.Get("DocumentRoot", "http://schemas.microsoft.com/windowsazure"));
                        if (documentRootElement != null)
                        {
                            string documentRootInstance = documentRootElement.Value;
                            result.DocumentRoot = documentRootInstance;
                        }
                        
                        XElement handlerMappingsSequenceElement = siteConfigElement.Element(XName.Get("HandlerMappings", "http://schemas.microsoft.com/windowsazure"));
                        if (handlerMappingsSequenceElement != null)
                        {
                            foreach (XElement handlerMappingsElement in handlerMappingsSequenceElement.Elements(XName.Get("HandlerMapping", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSiteGetConfigurationResponse.HandlerMapping handlerMappingInstance = new WebSiteGetConfigurationResponse.HandlerMapping();
                                result.HandlerMappings.Add(handlerMappingInstance);
                                
                                XElement argumentsElement = handlerMappingsElement.Element(XName.Get("Arguments", "http://schemas.microsoft.com/windowsazure"));
                                if (argumentsElement != null)
                                {
                                    string argumentsInstance = argumentsElement.Value;
                                    handlerMappingInstance.Arguments = argumentsInstance;
                                }
                                
                                XElement extensionElement = handlerMappingsElement.Element(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                if (extensionElement != null)
                                {
                                    string extensionInstance = extensionElement.Value;
                                    handlerMappingInstance.Extension = extensionInstance;
                                }
                                
                                XElement scriptProcessorElement = handlerMappingsElement.Element(XName.Get("ScriptProcessor", "http://schemas.microsoft.com/windowsazure"));
                                if (scriptProcessorElement != null)
                                {
                                    string scriptProcessorInstance = scriptProcessorElement.Value;
                                    handlerMappingInstance.ScriptProcessor = scriptProcessorInstance;
                                }
                            }
                        }
                        
                        XElement httpLoggingEnabledElement = siteConfigElement.Element(XName.Get("HttpLoggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (httpLoggingEnabledElement != null && string.IsNullOrEmpty(httpLoggingEnabledElement.Value) == false)
                        {
                            bool httpLoggingEnabledInstance = bool.Parse(httpLoggingEnabledElement.Value);
                            result.HttpLoggingEnabled = httpLoggingEnabledInstance;
                        }
                        
                        XElement logsDirectorySizeLimitElement = siteConfigElement.Element(XName.Get("LogsDirectorySizeLimit", "http://schemas.microsoft.com/windowsazure"));
                        if (logsDirectorySizeLimitElement != null && string.IsNullOrEmpty(logsDirectorySizeLimitElement.Value) == false)
                        {
                            int logsDirectorySizeLimitInstance = int.Parse(logsDirectorySizeLimitElement.Value, CultureInfo.InvariantCulture);
                            result.LogsDirectorySizeLimit = logsDirectorySizeLimitInstance;
                        }
                        
                        XElement managedPipelineModeElement = siteConfigElement.Element(XName.Get("ManagedPipelineMode", "http://schemas.microsoft.com/windowsazure"));
                        if (managedPipelineModeElement != null && string.IsNullOrEmpty(managedPipelineModeElement.Value) == false)
                        {
                            ManagedPipelineMode managedPipelineModeInstance = (ManagedPipelineMode)Enum.Parse(typeof(ManagedPipelineMode), managedPipelineModeElement.Value, false);
                            result.ManagedPipelineMode = managedPipelineModeInstance;
                        }
                        
                        XElement metadataSequenceElement = siteConfigElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                        if (metadataSequenceElement != null)
                        {
                            foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                            {
                                string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                result.Metadata.Add(metadataKey, metadataValue);
                            }
                        }
                        
                        XElement netFrameworkVersionElement = siteConfigElement.Element(XName.Get("NetFrameworkVersion", "http://schemas.microsoft.com/windowsazure"));
                        if (netFrameworkVersionElement != null)
                        {
                            string netFrameworkVersionInstance = netFrameworkVersionElement.Value;
                            result.NetFrameworkVersion = netFrameworkVersionInstance;
                        }
                        
                        XElement numberOfWorkersElement = siteConfigElement.Element(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (numberOfWorkersElement != null && string.IsNullOrEmpty(numberOfWorkersElement.Value) == false)
                        {
                            int numberOfWorkersInstance = int.Parse(numberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                            result.NumberOfWorkers = numberOfWorkersInstance;
                        }
                        
                        XElement phpVersionElement = siteConfigElement.Element(XName.Get("PhpVersion", "http://schemas.microsoft.com/windowsazure"));
                        if (phpVersionElement != null)
                        {
                            string phpVersionInstance = phpVersionElement.Value;
                            result.PhpVersion = phpVersionInstance;
                        }
                        
                        XElement publishingPasswordElement = siteConfigElement.Element(XName.Get("PublishingPassword", "http://schemas.microsoft.com/windowsazure"));
                        if (publishingPasswordElement != null)
                        {
                            string publishingPasswordInstance = publishingPasswordElement.Value;
                            result.PublishingPassword = publishingPasswordInstance;
                        }
                        
                        XElement publishingUsernameElement = siteConfigElement.Element(XName.Get("PublishingUsername", "http://schemas.microsoft.com/windowsazure"));
                        if (publishingUsernameElement != null)
                        {
                            string publishingUsernameInstance = publishingUsernameElement.Value;
                            result.PublishingUserName = publishingUsernameInstance;
                        }
                        
                        XElement remoteDebuggingEnabledElement = siteConfigElement.Element(XName.Get("RemoteDebuggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (remoteDebuggingEnabledElement != null && string.IsNullOrEmpty(remoteDebuggingEnabledElement.Value) == false)
                        {
                            bool remoteDebuggingEnabledInstance = bool.Parse(remoteDebuggingEnabledElement.Value);
                            result.RemoteDebuggingEnabled = remoteDebuggingEnabledInstance;
                        }
                        
                        XElement remoteDebuggingVersionElement = siteConfigElement.Element(XName.Get("RemoteDebuggingVersion", "http://schemas.microsoft.com/windowsazure"));
                        if (remoteDebuggingVersionElement != null)
                        {
                            bool isNil = false;
                            XAttribute nilAttribute = remoteDebuggingVersionElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute != null)
                            {
                                isNil = nilAttribute.Value == "true";
                            }
                            if (isNil == false)
                            {
                                RemoteDebuggingVersion remoteDebuggingVersionInstance = (RemoteDebuggingVersion)Enum.Parse(typeof(RemoteDebuggingVersion), remoteDebuggingVersionElement.Value, false);
                                result.RemoteDebuggingVersion = remoteDebuggingVersionInstance;
                            }
                        }
                        
                        XElement requestTracingEnabledElement = siteConfigElement.Element(XName.Get("RequestTracingEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (requestTracingEnabledElement != null && string.IsNullOrEmpty(requestTracingEnabledElement.Value) == false)
                        {
                            bool requestTracingEnabledInstance = bool.Parse(requestTracingEnabledElement.Value);
                            result.RequestTracingEnabled = requestTracingEnabledInstance;
                        }
                        
                        XElement requestTracingExpirationTimeElement = siteConfigElement.Element(XName.Get("RequestTracingExpirationTime", "http://schemas.microsoft.com/windowsazure"));
                        if (requestTracingExpirationTimeElement != null && string.IsNullOrEmpty(requestTracingExpirationTimeElement.Value) == false)
                        {
                            bool isNil2 = false;
                            XAttribute nilAttribute2 = requestTracingExpirationTimeElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute2 != null)
                            {
                                isNil2 = nilAttribute2.Value == "true";
                            }
                            if (isNil2 == false)
                            {
                                DateTime requestTracingExpirationTimeInstance = DateTime.Parse(requestTracingExpirationTimeElement.Value, CultureInfo.InvariantCulture);
                                result.RequestTracingExpirationTime = requestTracingExpirationTimeInstance;
                            }
                        }
                        
                        XElement scmTypeElement = siteConfigElement.Element(XName.Get("ScmType", "http://schemas.microsoft.com/windowsazure"));
                        if (scmTypeElement != null)
                        {
                            string scmTypeInstance = scmTypeElement.Value;
                            result.ScmType = scmTypeInstance;
                        }
                        
                        XElement use32BitWorkerProcessElement = siteConfigElement.Element(XName.Get("Use32BitWorkerProcess", "http://schemas.microsoft.com/windowsazure"));
                        if (use32BitWorkerProcessElement != null && string.IsNullOrEmpty(use32BitWorkerProcessElement.Value) == false)
                        {
                            bool use32BitWorkerProcessInstance = bool.Parse(use32BitWorkerProcessElement.Value);
                            result.Use32BitWorkerProcess = use32BitWorkerProcessInstance;
                        }
                        
                        XElement webSocketsEnabledElement = siteConfigElement.Element(XName.Get("WebSocketsEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (webSocketsEnabledElement != null && string.IsNullOrEmpty(webSocketsEnabledElement.Value) == false)
                        {
                            bool webSocketsEnabledInstance = bool.Parse(webSocketsEnabledElement.Value);
                            result.WebSocketsEnabled = webSocketsEnabledInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public async Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(string webSpaceName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetHistoricalUsageMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/metrics?";
            if (parameters.MetricNames != null && parameters.MetricNames.Count > 0)
            {
                url = url + "&names=" + Uri.EscapeUriString(string.Join(",", parameters.MetricNames));
            }
            if (parameters.StartTime != null)
            {
                url = url + "&StartTime=" + Uri.EscapeUriString(parameters.StartTime.Value.ToString());
            }
            if (parameters.EndTime != null)
            {
                url = url + "&EndTime=" + Uri.EscapeUriString(parameters.EndTime.Value.ToString());
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetHistoricalUsageMetricsResponse result = new WebSiteGetHistoricalUsageMetricsResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement metricResponsesElement = responseDoc.Element(XName.Get("MetricResponses", "http://schemas.microsoft.com/windowsazure"));
                    if (metricResponsesElement != null)
                    {
                        if (metricResponsesElement != null)
                        {
                            foreach (XElement usageMetricsElement in metricResponsesElement.Elements(XName.Get("MetricResponse", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric metricResponseInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric();
                                result.UsageMetrics.Add(metricResponseInstance);
                                
                                XElement codeElement = usageMetricsElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                if (codeElement != null)
                                {
                                    string codeInstance = codeElement.Value;
                                    metricResponseInstance.Code = codeInstance;
                                }
                                
                                XElement dataElement = usageMetricsElement.Element(XName.Get("Data", "http://schemas.microsoft.com/windowsazure"));
                                if (dataElement != null)
                                {
                                    WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData dataInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData();
                                    metricResponseInstance.Data = dataInstance;
                                    
                                    XElement displayNameElement = dataElement.Element(XName.Get("DisplayName", "http://schemas.microsoft.com/windowsazure"));
                                    if (displayNameElement != null)
                                    {
                                        string displayNameInstance = displayNameElement.Value;
                                        dataInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    XElement endTimeElement = dataElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (endTimeElement != null)
                                    {
                                        DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture);
                                        dataInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    XElement nameElement = dataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        dataInstance.Name = nameInstance;
                                    }
                                    
                                    XElement primaryAggregationTypeElement = dataElement.Element(XName.Get("PrimaryAggregationType", "http://schemas.microsoft.com/windowsazure"));
                                    if (primaryAggregationTypeElement != null)
                                    {
                                        string primaryAggregationTypeInstance = primaryAggregationTypeElement.Value;
                                        dataInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    XElement startTimeElement = dataElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (startTimeElement != null)
                                    {
                                        DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                        dataInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    XElement timeGrainElement = dataElement.Element(XName.Get("TimeGrain", "http://schemas.microsoft.com/windowsazure"));
                                    if (timeGrainElement != null)
                                    {
                                        string timeGrainInstance = timeGrainElement.Value;
                                        dataInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    XElement unitElement = dataElement.Element(XName.Get("Unit", "http://schemas.microsoft.com/windowsazure"));
                                    if (unitElement != null)
                                    {
                                        string unitInstance = unitElement.Value;
                                        dataInstance.Unit = unitInstance;
                                    }
                                    
                                    XElement valuesSequenceElement = dataElement.Element(XName.Get("Values", "http://schemas.microsoft.com/windowsazure"));
                                    if (valuesSequenceElement != null)
                                    {
                                        foreach (XElement valuesElement in valuesSequenceElement.Elements(XName.Get("MetricSample", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample metricSampleInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample();
                                            dataInstance.Values.Add(metricSampleInstance);
                                            
                                            XElement countElement = valuesElement.Element(XName.Get("Count", "http://schemas.microsoft.com/windowsazure"));
                                            if (countElement != null)
                                            {
                                                int countInstance = int.Parse(countElement.Value, CultureInfo.InvariantCulture);
                                                metricSampleInstance.Count = countInstance;
                                            }
                                            
                                            XElement maximumElement = valuesElement.Element(XName.Get("Maximum", "http://schemas.microsoft.com/windowsazure"));
                                            if (maximumElement != null)
                                            {
                                                bool isNil = false;
                                                XAttribute nilAttribute = maximumElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                                if (nilAttribute != null)
                                                {
                                                    isNil = nilAttribute.Value == "true";
                                                }
                                                if (isNil == false)
                                                {
                                                    string maximumInstance = maximumElement.Value;
                                                    metricSampleInstance.Maximum = maximumInstance;
                                                }
                                            }
                                            
                                            XElement minimumElement = valuesElement.Element(XName.Get("Minimum", "http://schemas.microsoft.com/windowsazure"));
                                            if (minimumElement != null)
                                            {
                                                bool isNil2 = false;
                                                XAttribute nilAttribute2 = minimumElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                                if (nilAttribute2 != null)
                                                {
                                                    isNil2 = nilAttribute2.Value == "true";
                                                }
                                                if (isNil2 == false)
                                                {
                                                    string minimumInstance = minimumElement.Value;
                                                    metricSampleInstance.Minimum = minimumInstance;
                                                }
                                            }
                                            
                                            XElement timeCreatedElement = valuesElement.Element(XName.Get("TimeCreated", "http://schemas.microsoft.com/windowsazure"));
                                            if (timeCreatedElement != null)
                                            {
                                                DateTime timeCreatedInstance = DateTime.Parse(timeCreatedElement.Value, CultureInfo.InvariantCulture);
                                                metricSampleInstance.TimeCreated = timeCreatedInstance;
                                            }
                                            
                                            XElement totalElement = valuesElement.Element(XName.Get("Total", "http://schemas.microsoft.com/windowsazure"));
                                            if (totalElement != null)
                                            {
                                                string totalInstance = totalElement.Value;
                                                metricSampleInstance.Total = totalInstance;
                                            }
                                        }
                                    }
                                }
                                
                                XElement messageElement = usageMetricsElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                if (messageElement != null)
                                {
                                    string messageInstance = messageElement.Value;
                                    metricResponseInstance.Message = messageInstance;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the publish settings information for a web site by
        /// issuing an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public async Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetPublishProfileAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/publishxml";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetPublishProfileResponse result = new WebSiteGetPublishProfileResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement publishDataElement = responseDoc.Element(XName.Get("publishData", ""));
                    if (publishDataElement != null)
                    {
                        if (publishDataElement != null)
                        {
                            foreach (XElement publishProfilesElement in publishDataElement.Elements(XName.Get("publishProfile", "")))
                            {
                                WebSiteGetPublishProfileResponse.PublishProfile publishProfileInstance = new WebSiteGetPublishProfileResponse.PublishProfile();
                                result.PublishProfiles.Add(publishProfileInstance);
                                
                                XAttribute profileNameAttribute = publishProfilesElement.Attribute(XName.Get("profileName", ""));
                                if (profileNameAttribute != null)
                                {
                                    publishProfileInstance.ProfileName = profileNameAttribute.Value;
                                }
                                
                                XAttribute publishMethodAttribute = publishProfilesElement.Attribute(XName.Get("publishMethod", ""));
                                if (publishMethodAttribute != null)
                                {
                                    publishProfileInstance.PublishMethod = publishMethodAttribute.Value;
                                }
                                
                                XAttribute publishUrlAttribute = publishProfilesElement.Attribute(XName.Get("publishUrl", ""));
                                if (publishUrlAttribute != null)
                                {
                                    publishProfileInstance.PublishUrl = publishUrlAttribute.Value;
                                }
                                
                                XAttribute msdeploySiteAttribute = publishProfilesElement.Attribute(XName.Get("msdeploySite", ""));
                                if (msdeploySiteAttribute != null)
                                {
                                    publishProfileInstance.MSDeploySite = msdeploySiteAttribute.Value;
                                }
                                
                                XAttribute ftpPassiveModeAttribute = publishProfilesElement.Attribute(XName.Get("ftpPassiveMode", ""));
                                if (ftpPassiveModeAttribute != null)
                                {
                                    publishProfileInstance.FtpPassiveMode = bool.Parse(ftpPassiveModeAttribute.Value);
                                }
                                
                                XAttribute userNameAttribute = publishProfilesElement.Attribute(XName.Get("userName", ""));
                                if (userNameAttribute != null)
                                {
                                    publishProfileInstance.UserName = userNameAttribute.Value;
                                }
                                
                                XAttribute userPWDAttribute = publishProfilesElement.Attribute(XName.Get("userPWD", ""));
                                if (userPWDAttribute != null)
                                {
                                    publishProfileInstance.UserPassword = userPWDAttribute.Value;
                                }
                                
                                XAttribute destinationAppUrlAttribute = publishProfilesElement.Attribute(XName.Get("destinationAppUrl", ""));
                                if (destinationAppUrlAttribute != null)
                                {
                                    publishProfileInstance.DestinationAppUri = TypeConversion.TryParseUri(destinationAppUrlAttribute.Value);
                                }
                                
                                XAttribute sQLServerDBConnectionStringAttribute = publishProfilesElement.Attribute(XName.Get("SQLServerDBConnectionString", ""));
                                if (sQLServerDBConnectionStringAttribute != null)
                                {
                                    publishProfileInstance.SqlServerConnectionString = sQLServerDBConnectionStringAttribute.Value;
                                }
                                
                                XAttribute mySQLDBConnectionStringAttribute = publishProfilesElement.Attribute(XName.Get("mySQLDBConnectionString", ""));
                                if (mySQLDBConnectionStringAttribute != null)
                                {
                                    publishProfileInstance.MySqlConnectionString = mySQLDBConnectionStringAttribute.Value;
                                }
                                
                                XAttribute hostingProviderForumLinkAttribute = publishProfilesElement.Attribute(XName.Get("hostingProviderForumLink", ""));
                                if (hostingProviderForumLinkAttribute != null)
                                {
                                    publishProfileInstance.HostingProviderForumUri = TypeConversion.TryParseUri(hostingProviderForumLinkAttribute.Value);
                                }
                                
                                XAttribute controlPanelLinkAttribute = publishProfilesElement.Attribute(XName.Get("controlPanelLink", ""));
                                if (controlPanelLinkAttribute != null)
                                {
                                    publishProfileInstance.ControlPanelUri = TypeConversion.TryParseUri(controlPanelLinkAttribute.Value);
                                }
                                
                                XElement databasesSequenceElement = publishProfilesElement.Element(XName.Get("databases", ""));
                                if (databasesSequenceElement != null)
                                {
                                    foreach (XElement databasesElement in databasesSequenceElement.Elements(XName.Get("add", "")))
                                    {
                                        WebSiteGetPublishProfileResponse.Database addInstance = new WebSiteGetPublishProfileResponse.Database();
                                        publishProfileInstance.Databases.Add(addInstance);
                                        
                                        XAttribute nameAttribute = databasesElement.Attribute(XName.Get("name", ""));
                                        if (nameAttribute != null)
                                        {
                                            addInstance.Name = nameAttribute.Value;
                                        }
                                        
                                        XAttribute connectionStringAttribute = databasesElement.Attribute(XName.Get("connectionString", ""));
                                        if (connectionStringAttribute != null)
                                        {
                                            addInstance.ConnectionString = connectionStringAttribute.Value;
                                        }
                                        
                                        XAttribute providerNameAttribute = databasesElement.Attribute(XName.Get("providerName", ""));
                                        if (providerNameAttribute != null)
                                        {
                                            addInstance.ProviderName = providerNameAttribute.Value;
                                        }
                                        
                                        XAttribute typeAttribute = databasesElement.Attribute(XName.Get("type", ""));
                                        if (typeAttribute != null)
                                        {
                                            addInstance.Type = typeAttribute.Value;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public async Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/repository";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetRepositoryResponse result = new WebSiteGetRepositoryResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement anyURIElement = responseDoc.Element(XName.Get("anyURI", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (anyURIElement != null)
                    {
                        result.Uri = TypeConversion.TryParseUri(anyURIElement.Value);
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve a site's current usage metrics by issuing an HTTP
        /// GET request. The metrics returned include CPU Time, Data In, Data
        /// Out, Local bytes read, Local bytes written, Network bytes read,
        /// Network bytes written, WP stop requests, Memory Usage, CPU Time -
        /// Minute Limit, and File System Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public async Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetUsageMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/usages";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetUsageMetricsResponse result = new WebSiteGetUsageMetricsResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement usagesElement = responseDoc.Element(XName.Get("Usages", "http://schemas.microsoft.com/windowsazure"));
                    if (usagesElement != null)
                    {
                        if (usagesElement != null)
                        {
                            foreach (XElement usageMetricsElement in usagesElement.Elements(XName.Get("Usage", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSiteGetUsageMetricsResponse.UsageMetric usageInstance = new WebSiteGetUsageMetricsResponse.UsageMetric();
                                result.UsageMetrics.Add(usageInstance);
                                
                                XElement computeModeElement = usageMetricsElement.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                                if (computeModeElement != null)
                                {
                                    WebSiteComputeMode computeModeInstance = (WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement.Value, false);
                                    usageInstance.ComputeMode = computeModeInstance;
                                }
                                
                                XElement currentValueElement = usageMetricsElement.Element(XName.Get("CurrentValue", "http://schemas.microsoft.com/windowsazure"));
                                if (currentValueElement != null)
                                {
                                    string currentValueInstance = currentValueElement.Value;
                                    usageInstance.CurrentValue = currentValueInstance;
                                }
                                
                                XElement displayNameElement = usageMetricsElement.Element(XName.Get("DisplayName", "http://schemas.microsoft.com/windowsazure"));
                                if (displayNameElement != null)
                                {
                                    string displayNameInstance = displayNameElement.Value;
                                    usageInstance.DisplayName = displayNameInstance;
                                }
                                
                                XElement limitElement = usageMetricsElement.Element(XName.Get("Limit", "http://schemas.microsoft.com/windowsazure"));
                                if (limitElement != null)
                                {
                                    string limitInstance = limitElement.Value;
                                    usageInstance.Limit = limitInstance;
                                }
                                
                                XElement nameElement = usageMetricsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    usageInstance.Name = nameInstance;
                                }
                                
                                XElement nextResetTimeElement = usageMetricsElement.Element(XName.Get("NextResetTime", "http://schemas.microsoft.com/windowsazure"));
                                if (nextResetTimeElement != null)
                                {
                                    DateTime nextResetTimeInstance = DateTime.Parse(nextResetTimeElement.Value, CultureInfo.InvariantCulture);
                                    usageInstance.NextResetTime = nextResetTimeInstance;
                                }
                                
                                XElement resourceNameElement = usageMetricsElement.Element(XName.Get("ResourceName", "http://schemas.microsoft.com/windowsazure"));
                                if (resourceNameElement != null)
                                {
                                    string resourceNameInstance = resourceNameElement.Value;
                                    usageInstance.ResourceName = resourceNameInstance;
                                }
                                
                                XElement siteModeElement = usageMetricsElement.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                                if (siteModeElement != null)
                                {
                                    WebSiteMode siteModeInstance = (WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement.Value, false);
                                    usageInstance.SiteMode = siteModeInstance;
                                }
                                
                                XElement unitElement = usageMetricsElement.Element(XName.Get("Unit", "http://schemas.microsoft.com/windowsazure"));
                                if (unitElement != null)
                                {
                                    string unitInstance = unitElement.Value;
                                    usageInstance.Unit = unitInstance;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can restart a web site by issuing an HTTP POST request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RestartAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/restart";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can update the settings for a web site by using the HTTP PUT
        /// method and by specifying the settings in the request body.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Web Site operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Web Site operation response.
        /// </returns>
        public async Task<WebSiteUpdateResponse> UpdateAsync(string webSpaceName, string webSiteName, WebSiteUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement siteElement = new XElement(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(siteElement);
                
                if (parameters.AvailabilityState != null)
                {
                    XElement availabilityStateElement = new XElement(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                    availabilityStateElement.Value = parameters.AvailabilityState.ToString();
                    siteElement.Add(availabilityStateElement);
                }
                
                if (parameters.ComputeMode != null)
                {
                    XElement computeModeElement = new XElement(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                    computeModeElement.Value = parameters.ComputeMode.ToString();
                    siteElement.Add(computeModeElement);
                }
                
                if (parameters.Enabled != null)
                {
                    XElement enabledElement = new XElement(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                    enabledElement.Value = parameters.Enabled.ToString().ToLower();
                    siteElement.Add(enabledElement);
                }
                
                if (parameters.HostNameSslStates != null)
                {
                    XElement hostNameSslStatesSequenceElement = new XElement(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                    foreach (WebSiteUpdateParameters.WebSiteHostNameSslState hostNameSslStatesItem in parameters.HostNameSslStates)
                    {
                        XElement webSiteHostNameSslStateElement = new XElement(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure"));
                        hostNameSslStatesSequenceElement.Add(webSiteHostNameSslStateElement);
                        
                        if (hostNameSslStatesItem.SslState != null)
                        {
                            XElement sslStateElement = new XElement(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                            sslStateElement.Value = hostNameSslStatesItem.SslState.ToString();
                            webSiteHostNameSslStateElement.Add(sslStateElement);
                        }
                        
                        if (hostNameSslStatesItem.Thumbprint != null)
                        {
                            XElement thumbprintElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                            thumbprintElement.Value = hostNameSslStatesItem.Thumbprint;
                            webSiteHostNameSslStateElement.Add(thumbprintElement);
                        }
                        else
                        {
                            XElement emptyElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                            XAttribute nilAttribute = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                            nilAttribute.Value = "true";
                            emptyElement.Add(nilAttribute);
                            webSiteHostNameSslStateElement.Add(emptyElement);
                        }
                        
                        if (hostNameSslStatesItem.ToUpdate != null)
                        {
                            XElement toUpdateElement = new XElement(XName.Get("ToUpdate", "http://schemas.microsoft.com/windowsazure"));
                            toUpdateElement.Value = hostNameSslStatesItem.ToUpdate.ToString().ToLower();
                            webSiteHostNameSslStateElement.Add(toUpdateElement);
                        }
                    }
                    siteElement.Add(hostNameSslStatesSequenceElement);
                }
                
                if (parameters.HostNames != null)
                {
                    XElement hostNamesSequenceElement = new XElement(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                    foreach (string hostNamesItem in parameters.HostNames)
                    {
                        XElement hostNamesItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                        hostNamesItemElement.Value = hostNamesItem;
                        hostNamesSequenceElement.Add(hostNamesItemElement);
                    }
                    siteElement.Add(hostNamesSequenceElement);
                }
                
                if (parameters.RuntimeAvailabilityState != null)
                {
                    XElement runtimeAvailabilityStateElement = new XElement(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                    runtimeAvailabilityStateElement.Value = parameters.RuntimeAvailabilityState.ToString();
                    siteElement.Add(runtimeAvailabilityStateElement);
                }
                
                if (parameters.SslCertificates != null)
                {
                    XElement sSLCertificatesSequenceElement = new XElement(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                    foreach (WebSiteUpdateParameters.WebSiteSslCertificate sSLCertificatesItem in parameters.SslCertificates)
                    {
                        XElement certificateElement = new XElement(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure"));
                        sSLCertificatesSequenceElement.Add(certificateElement);
                        
                        if (sSLCertificatesItem.Password != null)
                        {
                            XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                            passwordElement.Value = sSLCertificatesItem.Password;
                            certificateElement.Add(passwordElement);
                        }
                        
                        if (sSLCertificatesItem.PfxBlob != null)
                        {
                            XElement pfxBlobElement = new XElement(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                            pfxBlobElement.Value = Convert.ToBase64String(sSLCertificatesItem.PfxBlob);
                            certificateElement.Add(pfxBlobElement);
                        }
                        
                        if (sSLCertificatesItem.Thumbprint != null)
                        {
                            XElement thumbprintElement2 = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                            thumbprintElement2.Value = sSLCertificatesItem.Thumbprint;
                            certificateElement.Add(thumbprintElement2);
                        }
                        
                        if (sSLCertificatesItem.IsToBeDeleted != null)
                        {
                            XElement toDeleteElement = new XElement(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                            toDeleteElement.Value = sSLCertificatesItem.IsToBeDeleted.ToString().ToLower();
                            certificateElement.Add(toDeleteElement);
                        }
                    }
                    siteElement.Add(sSLCertificatesSequenceElement);
                }
                
                if (parameters.ServerFarm != null)
                {
                    XElement serverFarmElement = new XElement(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                    serverFarmElement.Value = parameters.ServerFarm;
                    siteElement.Add(serverFarmElement);
                }
                
                if (parameters.SiteMode != null)
                {
                    XElement siteModeElement = new XElement(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                    siteModeElement.Value = parameters.SiteMode.ToString();
                    siteElement.Add(siteModeElement);
                }
                
                if (parameters.State != null)
                {
                    XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                    stateElement.Value = parameters.State.ToString();
                    siteElement.Add(stateElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteUpdateResponse result = new WebSiteUpdateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement siteElement2 = responseDoc.Element(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                    if (siteElement2 != null)
                    {
                        WebSite webSiteInstance = new WebSite();
                        result.WebSite = webSiteInstance;
                        
                        XElement adminEnabledElement = siteElement2.Element(XName.Get("AdminEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (adminEnabledElement != null)
                        {
                            bool adminEnabledInstance = bool.Parse(adminEnabledElement.Value);
                            webSiteInstance.AdminEnabled = adminEnabledInstance;
                        }
                        
                        XElement availabilityStateElement2 = siteElement2.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (availabilityStateElement2 != null)
                        {
                            WebSpaceAvailabilityState availabilityStateInstance = (WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement2.Value, false);
                            webSiteInstance.AvailabilityState = availabilityStateInstance;
                        }
                        
                        XElement computeModeElement2 = siteElement2.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                        if (computeModeElement2 != null)
                        {
                            WebSiteComputeMode computeModeInstance = (WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement2.Value, false);
                            webSiteInstance.ComputeMode = computeModeInstance;
                        }
                        
                        XElement enabledElement2 = siteElement2.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledElement2 != null)
                        {
                            bool enabledInstance = bool.Parse(enabledElement2.Value);
                            webSiteInstance.Enabled = enabledInstance;
                        }
                        
                        XElement enabledHostNamesSequenceElement = siteElement2.Element(XName.Get("EnabledHostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledHostNamesSequenceElement != null)
                        {
                            foreach (XElement enabledHostNamesElement in enabledHostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.EnabledHostNames.Add(enabledHostNamesElement.Value);
                            }
                        }
                        
                        XElement hostNameSslStatesSequenceElement2 = siteElement2.Element(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNameSslStatesSequenceElement2 != null)
                        {
                            foreach (XElement hostNameSslStatesElement in hostNameSslStatesSequenceElement2.Elements(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                webSiteInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                
                                XElement nameElement = hostNameSslStatesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    webSiteHostNameSslStateInstance.Name = nameInstance;
                                }
                                
                                XElement sslStateElement2 = hostNameSslStatesElement.Element(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                                if (sslStateElement2 != null)
                                {
                                    WebSiteSslState sslStateInstance = (WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), sslStateElement2.Value, false);
                                    webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                }
                                
                                XElement thumbprintElement3 = hostNameSslStatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement3 != null)
                                {
                                    bool isNil = false;
                                    XAttribute nilAttribute2 = thumbprintElement3.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute2 != null)
                                    {
                                        isNil = nilAttribute2.Value == "true";
                                    }
                                    if (isNil == false)
                                    {
                                        string thumbprintInstance = thumbprintElement3.Value;
                                        webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                    }
                                }
                                
                                XElement virtualIPElement = hostNameSslStatesElement.Element(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualIPElement != null)
                                {
                                    bool isNil2 = false;
                                    XAttribute nilAttribute3 = virtualIPElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute3 != null)
                                    {
                                        isNil2 = nilAttribute3.Value == "true";
                                    }
                                    if (isNil2 == false)
                                    {
                                        string virtualIPInstance = virtualIPElement.Value;
                                        webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                    }
                                }
                            }
                        }
                        
                        XElement hostNamesSequenceElement2 = siteElement2.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNamesSequenceElement2 != null)
                        {
                            foreach (XElement hostNamesElement in hostNamesSequenceElement2.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.HostNames.Add(hostNamesElement.Value);
                            }
                        }
                        
                        XElement lastModifiedTimeUtcElement = siteElement2.Element(XName.Get("LastModifiedTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                        if (lastModifiedTimeUtcElement != null)
                        {
                            DateTime lastModifiedTimeUtcInstance = DateTime.Parse(lastModifiedTimeUtcElement.Value, CultureInfo.InvariantCulture);
                            webSiteInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                        }
                        
                        XElement nameElement2 = siteElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance2 = nameElement2.Value;
                            webSiteInstance.Name = nameInstance2;
                        }
                        
                        XElement ownerElement = siteElement2.Element(XName.Get("Owner", "http://schemas.microsoft.com/windowsazure"));
                        if (ownerElement != null)
                        {
                            bool isNil3 = false;
                            XAttribute nilAttribute4 = ownerElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute4 != null)
                            {
                                isNil3 = nilAttribute4.Value == "true";
                            }
                            if (isNil3 == false)
                            {
                                string ownerInstance = ownerElement.Value;
                                webSiteInstance.Owner = ownerInstance;
                            }
                        }
                        
                        XElement repositorySiteNameElement = siteElement2.Element(XName.Get("RepositorySiteName", "http://schemas.microsoft.com/windowsazure"));
                        if (repositorySiteNameElement != null)
                        {
                            string repositorySiteNameInstance = repositorySiteNameElement.Value;
                            webSiteInstance.RepositorySiteName = repositorySiteNameInstance;
                        }
                        
                        XElement runtimeAvailabilityStateElement2 = siteElement2.Element(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (runtimeAvailabilityStateElement2 != null)
                        {
                            WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = (WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), runtimeAvailabilityStateElement2.Value, false);
                            webSiteInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                        }
                        
                        XElement sSLCertificatesSequenceElement2 = siteElement2.Element(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                        if (sSLCertificatesSequenceElement2 != null)
                        {
                            foreach (XElement sSLCertificatesElement in sSLCertificatesSequenceElement2.Elements(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                webSiteInstance.SslCertificates.Add(certificateInstance);
                                
                                XElement expirationDateElement = sSLCertificatesElement.Element(XName.Get("ExpirationDate", "http://schemas.microsoft.com/windowsazure"));
                                if (expirationDateElement != null)
                                {
                                    DateTime expirationDateInstance = DateTime.Parse(expirationDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.ExpirationDate = expirationDateInstance;
                                }
                                
                                XElement friendlyNameElement = sSLCertificatesElement.Element(XName.Get("FriendlyName", "http://schemas.microsoft.com/windowsazure"));
                                if (friendlyNameElement != null)
                                {
                                    string friendlyNameInstance = friendlyNameElement.Value;
                                    certificateInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                XElement hostNamesSequenceElement3 = sSLCertificatesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                                if (hostNamesSequenceElement3 != null)
                                {
                                    foreach (XElement hostNamesElement2 in hostNamesSequenceElement3.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        certificateInstance.HostNames.Add(hostNamesElement2.Value);
                                    }
                                }
                                
                                XElement issueDateElement = sSLCertificatesElement.Element(XName.Get("IssueDate", "http://schemas.microsoft.com/windowsazure"));
                                if (issueDateElement != null)
                                {
                                    DateTime issueDateInstance = DateTime.Parse(issueDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.IssueDate = issueDateInstance;
                                }
                                
                                XElement issuerElement = sSLCertificatesElement.Element(XName.Get("Issuer", "http://schemas.microsoft.com/windowsazure"));
                                if (issuerElement != null)
                                {
                                    string issuerInstance = issuerElement.Value;
                                    certificateInstance.Issuer = issuerInstance;
                                }
                                
                                XElement passwordElement2 = sSLCertificatesElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                if (passwordElement2 != null)
                                {
                                    string passwordInstance = passwordElement2.Value;
                                    certificateInstance.Password = passwordInstance;
                                }
                                
                                XElement pfxBlobElement2 = sSLCertificatesElement.Element(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                                if (pfxBlobElement2 != null)
                                {
                                    byte[] pfxBlobInstance = Convert.FromBase64String(pfxBlobElement2.Value);
                                    certificateInstance.PfxBlob = pfxBlobInstance;
                                }
                                
                                XElement selfLinkElement = sSLCertificatesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                if (selfLinkElement != null)
                                {
                                    Uri selfLinkInstance = TypeConversion.TryParseUri(selfLinkElement.Value);
                                    certificateInstance.SelfLinkUri = selfLinkInstance;
                                }
                                
                                XElement siteNameElement = sSLCertificatesElement.Element(XName.Get("SiteName", "http://schemas.microsoft.com/windowsazure"));
                                if (siteNameElement != null)
                                {
                                    string siteNameInstance = siteNameElement.Value;
                                    certificateInstance.SiteName = siteNameInstance;
                                }
                                
                                XElement subjectNameElement = sSLCertificatesElement.Element(XName.Get("SubjectName", "http://schemas.microsoft.com/windowsazure"));
                                if (subjectNameElement != null)
                                {
                                    string subjectNameInstance = subjectNameElement.Value;
                                    certificateInstance.SubjectName = subjectNameInstance;
                                }
                                
                                XElement thumbprintElement4 = sSLCertificatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement4 != null)
                                {
                                    string thumbprintInstance2 = thumbprintElement4.Value;
                                    certificateInstance.Thumbprint = thumbprintInstance2;
                                }
                                
                                XElement toDeleteElement2 = sSLCertificatesElement.Element(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                                if (toDeleteElement2 != null)
                                {
                                    bool toDeleteInstance = bool.Parse(toDeleteElement2.Value);
                                    certificateInstance.IsToBeDeleted = toDeleteInstance;
                                }
                                
                                XElement validElement = sSLCertificatesElement.Element(XName.Get("Valid", "http://schemas.microsoft.com/windowsazure"));
                                if (validElement != null)
                                {
                                    bool validInstance = bool.Parse(validElement.Value);
                                    certificateInstance.IsValid = validInstance;
                                }
                            }
                        }
                        
                        XElement selfLinkElement2 = siteElement2.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                        if (selfLinkElement2 != null)
                        {
                            Uri selfLinkInstance2 = TypeConversion.TryParseUri(selfLinkElement2.Value);
                            webSiteInstance.Uri = selfLinkInstance2;
                        }
                        
                        XElement serverFarmElement2 = siteElement2.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                        if (serverFarmElement2 != null)
                        {
                            string serverFarmInstance = serverFarmElement2.Value;
                            webSiteInstance.ServerFarm = serverFarmInstance;
                        }
                        
                        XElement siteModeElement2 = siteElement2.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                        if (siteModeElement2 != null)
                        {
                            WebSiteMode siteModeInstance = (WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement2.Value, false);
                            webSiteInstance.SiteMode = siteModeInstance;
                        }
                        
                        XElement sitePropertiesElement = siteElement2.Element(XName.Get("SiteProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (sitePropertiesElement != null)
                        {
                            WebSite.WebSiteProperties sitePropertiesInstance = new WebSite.WebSiteProperties();
                            webSiteInstance.SiteProperties = sitePropertiesInstance;
                            
                            XElement appSettingsSequenceElement = sitePropertiesElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (appSettingsSequenceElement != null)
                            {
                                foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                }
                            }
                            
                            XElement metadataSequenceElement = sitePropertiesElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                            if (metadataSequenceElement != null)
                            {
                                foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                }
                            }
                            
                            XElement propertiesSequenceElement = sitePropertiesElement.Element(XName.Get("Properties", "http://schemas.microsoft.com/windowsazure"));
                            if (propertiesSequenceElement != null)
                            {
                                foreach (XElement propertiesElement in propertiesSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string propertiesKey = propertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string propertiesValue = propertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue);
                                }
                            }
                        }
                        
                        XElement stateElement2 = siteElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement2 != null)
                        {
                            WebSiteState stateInstance = (WebSiteState)Enum.Parse(typeof(WebSiteState), stateElement2.Value, false);
                            webSiteInstance.State = stateInstance;
                        }
                        
                        XElement usageStateElement = siteElement2.Element(XName.Get("UsageState", "http://schemas.microsoft.com/windowsazure"));
                        if (usageStateElement != null)
                        {
                            WebSiteUsageState usageStateInstance = (WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), usageStateElement.Value, false);
                            webSiteInstance.UsageState = usageStateInstance;
                        }
                        
                        XElement webSpaceElement = siteElement2.Element(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                        if (webSpaceElement != null)
                        {
                            string webSpaceInstance = webSpaceElement.Value;
                            webSiteInstance.WebSpace = webSpaceInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site Configuration parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateConfigurationAsync(string webSpaceName, string webSiteName, WebSiteUpdateConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/config";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement siteConfigElement = new XElement(XName.Get("SiteConfig", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(siteConfigElement);
                
                if (parameters.AppSettings != null)
                {
                    XElement appSettingsDictionaryElement = new XElement(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair in parameters.AppSettings)
                    {
                        string appSettingsKey = pair.Key;
                        string appSettingsValue = pair.Value;
                        XElement appSettingsElement = new XElement(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure"));
                        appSettingsDictionaryElement.Add(appSettingsElement);
                        
                        XElement appSettingsKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        appSettingsKeyElement.Value = appSettingsKey;
                        appSettingsElement.Add(appSettingsKeyElement);
                        
                        XElement appSettingsValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        appSettingsValueElement.Value = appSettingsValue;
                        appSettingsElement.Add(appSettingsValueElement);
                    }
                    siteConfigElement.Add(appSettingsDictionaryElement);
                }
                
                if (parameters.ConnectionStrings != null)
                {
                    XElement connectionStringsSequenceElement = new XElement(XName.Get("ConnectionStrings", "http://schemas.microsoft.com/windowsazure"));
                    foreach (WebSiteUpdateConfigurationParameters.ConnectionStringInfo connectionStringsItem in parameters.ConnectionStrings)
                    {
                        XElement connStringInfoElement = new XElement(XName.Get("ConnStringInfo", "http://schemas.microsoft.com/windowsazure"));
                        connectionStringsSequenceElement.Add(connStringInfoElement);
                        
                        if (connectionStringsItem.ConnectionString != null)
                        {
                            XElement connectionStringElement = new XElement(XName.Get("ConnectionString", "http://schemas.microsoft.com/windowsazure"));
                            connectionStringElement.Value = connectionStringsItem.ConnectionString;
                            connStringInfoElement.Add(connectionStringElement);
                        }
                        
                        if (connectionStringsItem.Name != null)
                        {
                            XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            nameElement.Value = connectionStringsItem.Name;
                            connStringInfoElement.Add(nameElement);
                        }
                        
                        if (connectionStringsItem.Type != null)
                        {
                            XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            typeElement.Value = connectionStringsItem.Type;
                            connStringInfoElement.Add(typeElement);
                        }
                    }
                    siteConfigElement.Add(connectionStringsSequenceElement);
                }
                
                if (parameters.DefaultDocuments != null)
                {
                    XElement defaultDocumentsSequenceElement = new XElement(XName.Get("DefaultDocuments", "http://schemas.microsoft.com/windowsazure"));
                    foreach (string defaultDocumentsItem in parameters.DefaultDocuments)
                    {
                        XElement defaultDocumentsItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                        defaultDocumentsItemElement.Value = defaultDocumentsItem;
                        defaultDocumentsSequenceElement.Add(defaultDocumentsItemElement);
                    }
                    siteConfigElement.Add(defaultDocumentsSequenceElement);
                }
                
                if (parameters.DetailedErrorLoggingEnabled != null)
                {
                    XElement detailedErrorLoggingEnabledElement = new XElement(XName.Get("DetailedErrorLoggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                    detailedErrorLoggingEnabledElement.Value = parameters.DetailedErrorLoggingEnabled.ToString().ToLower();
                    siteConfigElement.Add(detailedErrorLoggingEnabledElement);
                }
                
                if (parameters.DocumentRoot != null)
                {
                    XElement documentRootElement = new XElement(XName.Get("DocumentRoot", "http://schemas.microsoft.com/windowsazure"));
                    documentRootElement.Value = parameters.DocumentRoot;
                    siteConfigElement.Add(documentRootElement);
                }
                
                if (parameters.HandlerMappings != null)
                {
                    XElement handlerMappingsSequenceElement = new XElement(XName.Get("HandlerMappings", "http://schemas.microsoft.com/windowsazure"));
                    foreach (WebSiteUpdateConfigurationParameters.HandlerMapping handlerMappingsItem in parameters.HandlerMappings)
                    {
                        XElement handlerMappingElement = new XElement(XName.Get("HandlerMapping", "http://schemas.microsoft.com/windowsazure"));
                        handlerMappingsSequenceElement.Add(handlerMappingElement);
                        
                        if (handlerMappingsItem.Arguments != null)
                        {
                            XElement argumentsElement = new XElement(XName.Get("Arguments", "http://schemas.microsoft.com/windowsazure"));
                            argumentsElement.Value = handlerMappingsItem.Arguments;
                            handlerMappingElement.Add(argumentsElement);
                        }
                        
                        if (handlerMappingsItem.Extension != null)
                        {
                            XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                            extensionElement.Value = handlerMappingsItem.Extension;
                            handlerMappingElement.Add(extensionElement);
                        }
                        
                        if (handlerMappingsItem.ScriptProcessor != null)
                        {
                            XElement scriptProcessorElement = new XElement(XName.Get("ScriptProcessor", "http://schemas.microsoft.com/windowsazure"));
                            scriptProcessorElement.Value = handlerMappingsItem.ScriptProcessor;
                            handlerMappingElement.Add(scriptProcessorElement);
                        }
                    }
                    siteConfigElement.Add(handlerMappingsSequenceElement);
                }
                
                if (parameters.HttpLoggingEnabled != null)
                {
                    XElement httpLoggingEnabledElement = new XElement(XName.Get("HttpLoggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                    httpLoggingEnabledElement.Value = parameters.HttpLoggingEnabled.ToString().ToLower();
                    siteConfigElement.Add(httpLoggingEnabledElement);
                }
                
                if (parameters.LogsDirectorySizeLimit != null)
                {
                    XElement logsDirectorySizeLimitElement = new XElement(XName.Get("LogsDirectorySizeLimit", "http://schemas.microsoft.com/windowsazure"));
                    logsDirectorySizeLimitElement.Value = parameters.LogsDirectorySizeLimit.ToString();
                    siteConfigElement.Add(logsDirectorySizeLimitElement);
                }
                
                if (parameters.ManagedPipelineMode != null)
                {
                    XElement managedPipelineModeElement = new XElement(XName.Get("ManagedPipelineMode", "http://schemas.microsoft.com/windowsazure"));
                    managedPipelineModeElement.Value = parameters.ManagedPipelineMode.ToString();
                    siteConfigElement.Add(managedPipelineModeElement);
                }
                
                if (parameters.Metadata != null)
                {
                    XElement metadataDictionaryElement = new XElement(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair2 in parameters.Metadata)
                    {
                        string metadataKey = pair2.Key;
                        string metadataValue = pair2.Value;
                        XElement metadataElement = new XElement(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure"));
                        metadataDictionaryElement.Add(metadataElement);
                        
                        XElement metadataKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        metadataKeyElement.Value = metadataKey;
                        metadataElement.Add(metadataKeyElement);
                        
                        XElement metadataValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        metadataValueElement.Value = metadataValue;
                        metadataElement.Add(metadataValueElement);
                    }
                    siteConfigElement.Add(metadataDictionaryElement);
                }
                
                if (parameters.NetFrameworkVersion != null)
                {
                    XElement netFrameworkVersionElement = new XElement(XName.Get("NetFrameworkVersion", "http://schemas.microsoft.com/windowsazure"));
                    netFrameworkVersionElement.Value = parameters.NetFrameworkVersion;
                    siteConfigElement.Add(netFrameworkVersionElement);
                }
                
                if (parameters.NumberOfWorkers != null)
                {
                    XElement numberOfWorkersElement = new XElement(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                    numberOfWorkersElement.Value = parameters.NumberOfWorkers.ToString();
                    siteConfigElement.Add(numberOfWorkersElement);
                }
                
                if (parameters.PhpVersion != null)
                {
                    XElement phpVersionElement = new XElement(XName.Get("PhpVersion", "http://schemas.microsoft.com/windowsazure"));
                    phpVersionElement.Value = parameters.PhpVersion;
                    siteConfigElement.Add(phpVersionElement);
                }
                
                if (parameters.PublishingPassword != null)
                {
                    XElement publishingPasswordElement = new XElement(XName.Get("PublishingPassword", "http://schemas.microsoft.com/windowsazure"));
                    publishingPasswordElement.Value = parameters.PublishingPassword;
                    siteConfigElement.Add(publishingPasswordElement);
                }
                
                if (parameters.PublishingUserName != null)
                {
                    XElement publishingUsernameElement = new XElement(XName.Get("PublishingUsername", "http://schemas.microsoft.com/windowsazure"));
                    publishingUsernameElement.Value = parameters.PublishingUserName;
                    siteConfigElement.Add(publishingUsernameElement);
                }
                
                if (parameters.RemoteDebuggingEnabled != null)
                {
                    XElement remoteDebuggingEnabledElement = new XElement(XName.Get("RemoteDebuggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                    remoteDebuggingEnabledElement.Value = parameters.RemoteDebuggingEnabled.ToString().ToLower();
                    siteConfigElement.Add(remoteDebuggingEnabledElement);
                }
                
                XElement remoteDebuggingVersionElement = new XElement(XName.Get("RemoteDebuggingVersion", "http://schemas.microsoft.com/windowsazure"));
                remoteDebuggingVersionElement.Value = parameters.RemoteDebuggingVersion.ToString();
                siteConfigElement.Add(remoteDebuggingVersionElement);
                
                if (parameters.RequestTracingEnabled != null)
                {
                    XElement requestTracingEnabledElement = new XElement(XName.Get("RequestTracingEnabled", "http://schemas.microsoft.com/windowsazure"));
                    requestTracingEnabledElement.Value = parameters.RequestTracingEnabled.ToString().ToLower();
                    siteConfigElement.Add(requestTracingEnabledElement);
                }
                
                if (parameters.RequestTracingExpirationTime != null)
                {
                    XElement requestTracingExpirationTimeElement = new XElement(XName.Get("RequestTracingExpirationTime", "http://schemas.microsoft.com/windowsazure"));
                    requestTracingExpirationTimeElement.Value = parameters.RequestTracingExpirationTime.ToString();
                    siteConfigElement.Add(requestTracingExpirationTimeElement);
                }
                
                if (parameters.ScmType != null)
                {
                    XElement scmTypeElement = new XElement(XName.Get("ScmType", "http://schemas.microsoft.com/windowsazure"));
                    scmTypeElement.Value = parameters.ScmType;
                    siteConfigElement.Add(scmTypeElement);
                }
                
                if (parameters.Use32BitWorkerProcess != null)
                {
                    XElement use32BitWorkerProcessElement = new XElement(XName.Get("Use32BitWorkerProcess", "http://schemas.microsoft.com/windowsazure"));
                    use32BitWorkerProcessElement.Value = parameters.Use32BitWorkerProcess.ToString().ToLower();
                    siteConfigElement.Add(use32BitWorkerProcessElement);
                }
                
                if (parameters.WebSocketsEnabled != null)
                {
                    XElement webSocketsEnabledElement = new XElement(XName.Get("WebSocketsEnabled", "http://schemas.microsoft.com/windowsazure"));
                    webSocketsEnabledElement.Value = parameters.WebSocketsEnabled.ToString().ToLower();
                    siteConfigElement.Add(webSocketsEnabledElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
