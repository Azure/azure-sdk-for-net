// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.WebSitesExtensions;
using Microsoft.WindowsAzure.WebSitesExtensions.Models;

namespace Microsoft.WindowsAzure.WebSitesExtensions
{
    /// <summary>
    /// Operations for managing the jobs.
    /// </summary>
    public static partial class WebJobOperationsExtensions
    {
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='recursive'>
        /// The recursive flag.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse DeleteContinuous(this IWebJobOperations operations, string jobId, string recursive)
        {
            try
            {
                return operations.DeleteContinuousAsync(jobId, recursive).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='recursive'>
        /// The recursive flag.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteContinuousAsync(this IWebJobOperations operations, string jobId, string recursive)
        {
            return operations.DeleteContinuousAsync(jobId, recursive, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='recursive'>
        /// The recursive flag.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse DeleteTriggered(this IWebJobOperations operations, string jobId, string recursive)
        {
            try
            {
                return operations.DeleteTriggeredAsync(jobId, recursive).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='recursive'>
        /// The recursive flag.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteTriggeredAsync(this IWebJobOperations operations, string jobId, string recursive)
        {
            return operations.DeleteTriggeredAsync(jobId, recursive, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        public static WebJobGetResponse Get(this IWebJobOperations operations, string jobId)
        {
            try
            {
                return operations.GetAsync(jobId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        public static Task<WebJobGetResponse> GetAsync(this IWebJobOperations operations, string jobId)
        {
            return operations.GetAsync(jobId, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The deployment identifier.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        public static WebJobGetResponse GetContinuous(this IWebJobOperations operations, string jobId)
        {
            try
            {
                return operations.GetContinuousAsync(jobId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The deployment identifier.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        public static Task<WebJobGetResponse> GetContinuousAsync(this IWebJobOperations operations, string jobId)
        {
            return operations.GetContinuousAsync(jobId, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='jobRunId'>
        /// The job run identifier.
        /// </param>
        /// <returns>
        /// The Get Web Job Run operation response.
        /// </returns>
        public static WebJobGetRunResponse GetRun(this IWebJobOperations operations, string jobId, string jobRunId)
        {
            try
            {
                return operations.GetRunAsync(jobId, jobRunId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <param name='jobRunId'>
        /// The job run identifier.
        /// </param>
        /// <returns>
        /// The Get Web Job Run operation response.
        /// </returns>
        public static Task<WebJobGetRunResponse> GetRunAsync(this IWebJobOperations operations, string jobId, string jobRunId)
        {
            return operations.GetRunAsync(jobId, jobRunId, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The deployment identifier.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        public static WebJobGetResponse GetTriggered(this IWebJobOperations operations, string jobId)
        {
            try
            {
                return operations.GetTriggeredAsync(jobId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The deployment identifier.
        /// </param>
        /// <returns>
        /// The get Web Job Operation Response.
        /// </returns>
        public static Task<WebJobGetResponse> GetTriggeredAsync(this IWebJobOperations operations, string jobId)
        {
            return operations.GetTriggeredAsync(jobId, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        public static WebJobListResponse List(this IWebJobOperations operations, WebJobListParameters parameters)
        {
            try
            {
                return operations.ListAsync(parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        public static Task<WebJobListResponse> ListAsync(this IWebJobOperations operations, WebJobListParameters parameters)
        {
            return operations.ListAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        public static WebJobListResponse ListContinuous(this IWebJobOperations operations, WebJobListParameters parameters)
        {
            try
            {
                return operations.ListContinuousAsync(parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        public static Task<WebJobListResponse> ListContinuousAsync(this IWebJobOperations operations, WebJobListParameters parameters)
        {
            return operations.ListContinuousAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The Web Job run list operation response.
        /// </returns>
        public static WebJobRunListResponse ListRuns(this IWebJobOperations operations, string jobName, WebJobRunListParameters parameters)
        {
            try
            {
                return operations.ListRunsAsync(jobName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobName'>
        /// The job name.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The Web Job run list operation response.
        /// </returns>
        public static Task<WebJobRunListResponse> ListRunsAsync(this IWebJobOperations operations, string jobName, WebJobRunListParameters parameters)
        {
            return operations.ListRunsAsync(jobName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        public static WebJobListResponse ListTriggered(this IWebJobOperations operations, WebJobListParameters parameters)
        {
            try
            {
                return operations.ListTriggeredAsync(parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <returns>
        /// The list of jobs operation response.
        /// </returns>
        public static Task<WebJobListResponse> ListTriggeredAsync(this IWebJobOperations operations, WebJobListParameters parameters)
        {
            return operations.ListTriggeredAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RunTriggered(this IWebJobOperations operations, string jobId)
        {
            try
            {
                return operations.RunTriggeredAsync(jobId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RunTriggeredAsync(this IWebJobOperations operations, string jobId)
        {
            return operations.RunTriggeredAsync(jobId, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse StartContinous(this IWebJobOperations operations, string jobId)
        {
            try
            {
                return operations.StartContinousAsync(jobId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> StartContinousAsync(this IWebJobOperations operations, string jobId)
        {
            return operations.StartContinousAsync(jobId, CancellationToken.None);
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse StopContinous(this IWebJobOperations operations, string jobId)
        {
            try
            {
                return operations.StopContinousAsync(jobId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// TBD.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.WebSitesExtensions.IWebJobOperations.
        /// </param>
        /// <param name='jobId'>
        /// The job identifier.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> StopContinousAsync(this IWebJobOperations operations, string jobId)
        {
            return operations.StopContinousAsync(jobId, CancellationToken.None);
        }
    }
}
