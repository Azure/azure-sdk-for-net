// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.WebSites;
using Microsoft.WindowsAzure.Management.WebSites.Models;

namespace Microsoft.WindowsAzure.Management.WebSites
{
    /// <summary>
    /// Operations for managing web spaces beneath your subscription.
    /// </summary>
    internal partial class WebSpaceOperations : IServiceOperations<WebSiteManagementClient>, Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations
    {
        /// <summary>
        /// Initializes a new instance of the WebSpaceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal WebSpaceOperations(WebSiteManagementClient client)
        {
            this._client = client;
        }
        
        private WebSiteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.WebSiteManagementClient.
        /// </summary>
        public WebSiteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a source control user with permissions to publish to this
        /// web space.
        /// </summary>
        /// <param name='username'>
        /// Required. The user name.
        /// </param>
        /// <param name='password'>
        /// Required. The user password.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Parameters supplied to the Create Publishing User
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Publishing User operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.WebSites.Models.WebSpacesCreatePublishingUserResponse> CreatePublishingUserAsync(string username, string password, WebSpacesCreatePublishingUserParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (username == null)
            {
                throw new ArgumentNullException("username");
            }
            if (password == null)
            {
                throw new ArgumentNullException("password");
            }
            if (parameters != null)
            {
                if (parameters.PublishingPassword == null)
                {
                    throw new ArgumentNullException("parameters.PublishingPassword");
                }
                if (parameters.PublishingUserName == null)
                {
                    throw new ArgumentNullException("parameters.PublishingUserName");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("username", username);
                tracingParameters.Add("password", password);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreatePublishingUserAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces?properties=publishingCredentials";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (parameters != null)
                {
                    XElement userElement = new XElement(XName.Get("User", "http://schemas.microsoft.com/windowsazure"));
                    requestDoc.Add(userElement);
                    
                    if (parameters.Name != null)
                    {
                        XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        nameElement.Value = parameters.Name;
                        userElement.Add(nameElement);
                    }
                    
                    XElement publishingPasswordElement = new XElement(XName.Get("PublishingPassword", "http://schemas.microsoft.com/windowsazure"));
                    publishingPasswordElement.Value = parameters.PublishingPassword;
                    userElement.Add(publishingPasswordElement);
                    
                    XElement publishingUserNameElement = new XElement(XName.Get("PublishingUserName", "http://schemas.microsoft.com/windowsazure"));
                    publishingUserNameElement.Value = parameters.PublishingUserName;
                    userElement.Add(publishingUserNameElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesCreatePublishingUserResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSpacesCreatePublishingUserResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement userElement2 = responseDoc.Element(XName.Get("User", "http://schemas.microsoft.com/windowsazure"));
                    if (userElement2 != null && userElement2.IsEmpty == false)
                    {
                        XElement nameElement2 = userElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null && nameElement2.IsEmpty == false)
                        {
                            string nameInstance = nameElement2.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement publishingPasswordElement2 = userElement2.Element(XName.Get("PublishingPassword", "http://schemas.microsoft.com/windowsazure"));
                        if (publishingPasswordElement2 != null && publishingPasswordElement2.IsEmpty == false)
                        {
                            string publishingPasswordInstance = publishingPasswordElement2.Value;
                            result.PublishingPassword = publishingPasswordInstance;
                        }
                        
                        XElement publishingUserNameElement2 = userElement2.Element(XName.Get("PublishingUserName", "http://schemas.microsoft.com/windowsazure"));
                        if (publishingUserNameElement2 != null && publishingUserNameElement2.IsEmpty == false)
                        {
                            string publishingUserNameInstance = publishingUserNameElement2.Value;
                            result.PublishingUserName = publishingUserNameInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve details for a specified web space name by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167017.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Space Details operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.WebSites.Models.WebSpacesGetResponse> GetAsync(string webSpaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSpacesGetResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement webSpacesElement = responseDoc.Element(XName.Get("WebSpaces", "http://schemas.microsoft.com/windowsazure"));
                    if (webSpacesElement != null && webSpacesElement.IsEmpty == false)
                    {
                        XElement availabilityStateElement = webSpacesElement.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (availabilityStateElement != null && availabilityStateElement.IsEmpty == false)
                        {
                            WebSpaceAvailabilityState availabilityStateInstance = ((WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, true));
                            result.AvailabilityState = availabilityStateInstance;
                        }
                        
                        XElement currentNumberOfWorkersElement = webSpacesElement.Element(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (currentNumberOfWorkersElement != null && currentNumberOfWorkersElement.IsEmpty == false && string.IsNullOrEmpty(currentNumberOfWorkersElement.Value) == false)
                        {
                            bool isNil = false;
                            XAttribute nilAttribute = currentNumberOfWorkersElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute != null)
                            {
                                isNil = nilAttribute.Value == "true";
                            }
                            if (isNil == false)
                            {
                                int currentNumberOfWorkersInstance = int.Parse(currentNumberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                                result.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                            }
                        }
                        
                        XElement currentWorkerSizeElement = webSpacesElement.Element(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (currentWorkerSizeElement != null && currentWorkerSizeElement.IsEmpty == false && string.IsNullOrEmpty(currentWorkerSizeElement.Value) == false)
                        {
                            bool isNil2 = false;
                            XAttribute nilAttribute2 = currentWorkerSizeElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute2 != null)
                            {
                                isNil2 = nilAttribute2.Value == "true";
                            }
                            if (isNil2 == false)
                            {
                                WebSpaceWorkerSize currentWorkerSizeInstance = ((WebSpaceWorkerSize)Enum.Parse(typeof(WebSpaceWorkerSize), currentWorkerSizeElement.Value, true));
                                result.CurrentWorkerSize = currentWorkerSizeInstance;
                            }
                        }
                        
                        XElement geoLocationElement = webSpacesElement.Element(XName.Get("GeoLocation", "http://schemas.microsoft.com/windowsazure"));
                        if (geoLocationElement != null && geoLocationElement.IsEmpty == false)
                        {
                            string geoLocationInstance = geoLocationElement.Value;
                            result.GeoLocation = geoLocationInstance;
                        }
                        
                        XElement geoRegionElement = webSpacesElement.Element(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure"));
                        if (geoRegionElement != null && geoRegionElement.IsEmpty == false)
                        {
                            string geoRegionInstance = geoRegionElement.Value;
                            result.GeoRegion = geoRegionInstance;
                        }
                        
                        XElement nameElement = webSpacesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null && nameElement.IsEmpty == false)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement planElement = webSpacesElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                        if (planElement != null && planElement.IsEmpty == false)
                        {
                            string planInstance = planElement.Value;
                            result.Plan = planInstance;
                        }
                        
                        XElement statusElement = webSpacesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement != null && statusElement.IsEmpty == false)
                        {
                            WebSpaceStatus statusInstance = ((WebSpaceStatus)Enum.Parse(typeof(WebSpaceStatus), statusElement.Value, true));
                            result.Status = statusInstance;
                        }
                        
                        XElement subscriptionElement = webSpacesElement.Element(XName.Get("Subscription", "http://schemas.microsoft.com/windowsazure"));
                        if (subscriptionElement != null && subscriptionElement.IsEmpty == false)
                        {
                            string subscriptionInstance = subscriptionElement.Value;
                            result.Subscription = subscriptionInstance;
                        }
                        
                        XElement workerSizeElement = webSpacesElement.Element(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (workerSizeElement != null && workerSizeElement.IsEmpty == false && string.IsNullOrEmpty(workerSizeElement.Value) == false)
                        {
                            WebSpaceWorkerSize workerSizeInstance = ((WebSpaceWorkerSize)Enum.Parse(typeof(WebSpaceWorkerSize), workerSizeElement.Value, true));
                            result.WorkerSize = workerSizeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the DNS Suffix for this subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get DNS Suffix operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.WebSites.Models.WebSpacesGetDnsSuffixResponse> GetDnsSuffixAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "GetDnsSuffixAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces?properties=dnssuffix";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesGetDnsSuffixResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSpacesGetDnsSuffixResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (stringElement != null && stringElement.IsEmpty == false)
                    {
                        result.DnsSuffix = stringElement.Value;
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can list the web spaces under the current subscription by
        /// issuing a GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166961.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Spaces operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.WebSites.Models.WebSpacesListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSpacesListResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement webSpacesSequenceElement = responseDoc.Element(XName.Get("WebSpaces", "http://schemas.microsoft.com/windowsazure"));
                    if (webSpacesSequenceElement != null && webSpacesSequenceElement.IsEmpty == false)
                    {
                        foreach (XElement webSpacesElement in webSpacesSequenceElement.Elements(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure")))
                        {
                            WebSpacesListResponse.WebSpace webSpaceInstance = new WebSpacesListResponse.WebSpace();
                            result.WebSpaces.Add(webSpaceInstance);
                            
                            XElement availabilityStateElement = webSpacesElement.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                            if (availabilityStateElement != null && availabilityStateElement.IsEmpty == false)
                            {
                                WebSpaceAvailabilityState availabilityStateInstance = ((WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, true));
                                webSpaceInstance.AvailabilityState = availabilityStateInstance;
                            }
                            
                            XElement currentNumberOfWorkersElement = webSpacesElement.Element(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                            if (currentNumberOfWorkersElement != null && currentNumberOfWorkersElement.IsEmpty == false && string.IsNullOrEmpty(currentNumberOfWorkersElement.Value) == false)
                            {
                                bool isNil = false;
                                XAttribute nilAttribute = currentNumberOfWorkersElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (nilAttribute != null)
                                {
                                    isNil = nilAttribute.Value == "true";
                                }
                                if (isNil == false)
                                {
                                    int currentNumberOfWorkersInstance = int.Parse(currentNumberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                                    webSpaceInstance.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                                }
                            }
                            
                            XElement currentWorkerSizeElement = webSpacesElement.Element(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                            if (currentWorkerSizeElement != null && currentWorkerSizeElement.IsEmpty == false && string.IsNullOrEmpty(currentWorkerSizeElement.Value) == false)
                            {
                                bool isNil2 = false;
                                XAttribute nilAttribute2 = currentWorkerSizeElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (nilAttribute2 != null)
                                {
                                    isNil2 = nilAttribute2.Value == "true";
                                }
                                if (isNil2 == false)
                                {
                                    WebSpaceWorkerSize currentWorkerSizeInstance = ((WebSpaceWorkerSize)Enum.Parse(typeof(WebSpaceWorkerSize), currentWorkerSizeElement.Value, true));
                                    webSpaceInstance.CurrentWorkerSize = currentWorkerSizeInstance;
                                }
                            }
                            
                            XElement geoLocationElement = webSpacesElement.Element(XName.Get("GeoLocation", "http://schemas.microsoft.com/windowsazure"));
                            if (geoLocationElement != null && geoLocationElement.IsEmpty == false)
                            {
                                string geoLocationInstance = geoLocationElement.Value;
                                webSpaceInstance.GeoLocation = geoLocationInstance;
                            }
                            
                            XElement geoRegionElement = webSpacesElement.Element(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure"));
                            if (geoRegionElement != null && geoRegionElement.IsEmpty == false)
                            {
                                string geoRegionInstance = geoRegionElement.Value;
                                webSpaceInstance.GeoRegion = geoRegionInstance;
                            }
                            
                            XElement nameElement = webSpacesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null && nameElement.IsEmpty == false)
                            {
                                string nameInstance = nameElement.Value;
                                webSpaceInstance.Name = nameInstance;
                            }
                            
                            XElement planElement = webSpacesElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                            if (planElement != null && planElement.IsEmpty == false)
                            {
                                string planInstance = planElement.Value;
                                webSpaceInstance.Plan = planInstance;
                            }
                            
                            XElement statusElement = webSpacesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null && statusElement.IsEmpty == false)
                            {
                                WebSpaceStatus statusInstance = ((WebSpaceStatus)Enum.Parse(typeof(WebSpaceStatus), statusElement.Value, true));
                                webSpaceInstance.Status = statusInstance;
                            }
                            
                            XElement subscriptionElement = webSpacesElement.Element(XName.Get("Subscription", "http://schemas.microsoft.com/windowsazure"));
                            if (subscriptionElement != null && subscriptionElement.IsEmpty == false)
                            {
                                string subscriptionInstance = subscriptionElement.Value;
                                webSpaceInstance.Subscription = subscriptionInstance;
                            }
                            
                            XElement workerSizeElement = webSpacesElement.Element(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                            if (workerSizeElement != null && workerSizeElement.IsEmpty == false && string.IsNullOrEmpty(workerSizeElement.Value) == false)
                            {
                                WebSpaceWorkerSize workerSizeInstance = ((WebSpaceWorkerSize)Enum.Parse(typeof(WebSpaceWorkerSize), workerSizeElement.Value, true));
                                webSpaceInstance.WorkerSize = workerSizeInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the available geo regions for this web space.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Geo Regions operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.WebSites.Models.WebSpacesListGeoRegionsResponse> ListGeoRegionsAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListGeoRegionsAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces?properties=georegions";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesListGeoRegionsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSpacesListGeoRegionsResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement geoRegionsSequenceElement = responseDoc.Element(XName.Get("GeoRegions", "http://schemas.microsoft.com/windowsazure"));
                    if (geoRegionsSequenceElement != null && geoRegionsSequenceElement.IsEmpty == false)
                    {
                        foreach (XElement geoRegionsElement in geoRegionsSequenceElement.Elements(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure")))
                        {
                            WebSpacesListGeoRegionsResponse.GeoRegion geoRegionInstance = new WebSpacesListGeoRegionsResponse.GeoRegion();
                            result.GeoRegions.Add(geoRegionInstance);
                            
                            XElement descriptionElement = geoRegionsElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null && descriptionElement.IsEmpty == false)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                geoRegionInstance.Description = descriptionInstance;
                            }
                            
                            XElement nameElement = geoRegionsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null && nameElement.IsEmpty == false)
                            {
                                string nameInstance = nameElement.Value;
                                geoRegionInstance.Name = nameInstance;
                            }
                            
                            XElement sortOrderElement = geoRegionsElement.Element(XName.Get("SortOrder", "http://schemas.microsoft.com/windowsazure"));
                            if (sortOrderElement != null && sortOrderElement.IsEmpty == false)
                            {
                                bool isNil = false;
                                XAttribute nilAttribute = sortOrderElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (nilAttribute != null)
                                {
                                    isNil = nilAttribute.Value == "true";
                                }
                                if (isNil == false)
                                {
                                    int sortOrderInstance = int.Parse(sortOrderElement.Value, CultureInfo.InvariantCulture);
                                    geoRegionInstance.SortOrder = sortOrderInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the source control users allowed to publish to this web space.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Publishing Users operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.WebSites.Models.WebSpacesListPublishingUsersResponse> ListPublishingUsersAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListPublishingUsersAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces?properties=publishingUsers";
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesListPublishingUsersResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSpacesListPublishingUsersResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement arrayOfstringSequenceElement = responseDoc.Element(XName.Get("ArrayOfstring", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                    if (arrayOfstringSequenceElement != null && arrayOfstringSequenceElement.IsEmpty == false)
                    {
                        foreach (XElement arrayOfstringElement in arrayOfstringSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                        {
                            WebSpacesListPublishingUsersResponse.User stringInstance = new WebSpacesListPublishingUsersResponse.User();
                            result.Users.Add(stringInstance);
                            
                            string stringInstance2 = arrayOfstringElement.Value;
                            stringInstance.Name = stringInstance2;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve a list of all web sites in a web space by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236429.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public async System.Threading.Tasks.Task<Microsoft.WindowsAzure.Management.WebSites.Models.WebSpacesListWebSitesResponse> ListWebSitesAsync(string webSpaceName, WebSiteListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListWebSitesAsync", tracingParameters);
            }
            
            // Construct URL
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            string url = "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites?";
            if (parameters != null && parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeUriString(string.Join(",", parameters.PropertiesToInclude));
            }
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false), CloudExceptionType.Xml);
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesListWebSitesResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSpacesListWebSitesResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement sitesSequenceElement = responseDoc.Element(XName.Get("Sites", "http://schemas.microsoft.com/windowsazure"));
                    if (sitesSequenceElement != null && sitesSequenceElement.IsEmpty == false)
                    {
                        foreach (XElement sitesElement in sitesSequenceElement.Elements(XName.Get("Site", "http://schemas.microsoft.com/windowsazure")))
                        {
                            WebSite siteInstance = new WebSite();
                            result.WebSites.Add(siteInstance);
                            
                            XElement adminEnabledElement = sitesElement.Element(XName.Get("AdminEnabled", "http://schemas.microsoft.com/windowsazure"));
                            if (adminEnabledElement != null && adminEnabledElement.IsEmpty == false)
                            {
                                bool adminEnabledInstance = bool.Parse(adminEnabledElement.Value);
                                siteInstance.AdminEnabled = adminEnabledInstance;
                            }
                            
                            XElement availabilityStateElement = sitesElement.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                            if (availabilityStateElement != null && availabilityStateElement.IsEmpty == false)
                            {
                                WebSpaceAvailabilityState availabilityStateInstance = ((WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, true));
                                siteInstance.AvailabilityState = availabilityStateInstance;
                            }
                            
                            XElement computeModeElement = sitesElement.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                            if (computeModeElement != null && computeModeElement.IsEmpty == false)
                            {
                                WebSiteComputeMode computeModeInstance = ((WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement.Value, true));
                                siteInstance.ComputeMode = computeModeInstance;
                            }
                            
                            XElement enabledElement = sitesElement.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                            if (enabledElement != null && enabledElement.IsEmpty == false)
                            {
                                bool enabledInstance = bool.Parse(enabledElement.Value);
                                siteInstance.Enabled = enabledInstance;
                            }
                            
                            XElement enabledHostNamesSequenceElement = sitesElement.Element(XName.Get("EnabledHostNames", "http://schemas.microsoft.com/windowsazure"));
                            if (enabledHostNamesSequenceElement != null && enabledHostNamesSequenceElement.IsEmpty == false)
                            {
                                foreach (XElement enabledHostNamesElement in enabledHostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                {
                                    siteInstance.EnabledHostNames.Add(enabledHostNamesElement.Value);
                                }
                            }
                            
                            XElement hostNameSslStatesSequenceElement = sitesElement.Element(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                            if (hostNameSslStatesSequenceElement != null && hostNameSslStatesSequenceElement.IsEmpty == false)
                            {
                                foreach (XElement hostNameSslStatesElement in hostNameSslStatesSequenceElement.Elements(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                    siteInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                    
                                    XElement nameElement = hostNameSslStatesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null && nameElement.IsEmpty == false)
                                    {
                                        string nameInstance = nameElement.Value;
                                        webSiteHostNameSslStateInstance.Name = nameInstance;
                                    }
                                    
                                    XElement sslStateElement = hostNameSslStatesElement.Element(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                                    if (sslStateElement != null && sslStateElement.IsEmpty == false)
                                    {
                                        WebSiteSslState sslStateInstance = ((WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), sslStateElement.Value, true));
                                        webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                    }
                                    
                                    XElement thumbprintElement = hostNameSslStatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                    if (thumbprintElement != null && thumbprintElement.IsEmpty == false)
                                    {
                                        bool isNil = false;
                                        XAttribute nilAttribute = thumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                        if (nilAttribute != null)
                                        {
                                            isNil = nilAttribute.Value == "true";
                                        }
                                        if (isNil == false)
                                        {
                                            string thumbprintInstance = thumbprintElement.Value;
                                            webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                        }
                                    }
                                    
                                    XElement virtualIPElement = hostNameSslStatesElement.Element(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure"));
                                    if (virtualIPElement != null && virtualIPElement.IsEmpty == false)
                                    {
                                        bool isNil2 = false;
                                        XAttribute nilAttribute2 = virtualIPElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                        if (nilAttribute2 != null)
                                        {
                                            isNil2 = nilAttribute2.Value == "true";
                                        }
                                        if (isNil2 == false)
                                        {
                                            string virtualIPInstance = virtualIPElement.Value;
                                            webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                        }
                                    }
                                }
                            }
                            
                            XElement hostNamesSequenceElement = sitesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                            if (hostNamesSequenceElement != null && hostNamesSequenceElement.IsEmpty == false)
                            {
                                foreach (XElement hostNamesElement in hostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                {
                                    siteInstance.HostNames.Add(hostNamesElement.Value);
                                }
                            }
                            
                            XElement lastModifiedTimeUtcElement = sitesElement.Element(XName.Get("LastModifiedTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                            if (lastModifiedTimeUtcElement != null && lastModifiedTimeUtcElement.IsEmpty == false)
                            {
                                DateTime lastModifiedTimeUtcInstance = DateTime.Parse(lastModifiedTimeUtcElement.Value, CultureInfo.InvariantCulture);
                                siteInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                            }
                            
                            XElement nameElement2 = sitesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null && nameElement2.IsEmpty == false)
                            {
                                string nameInstance2 = nameElement2.Value;
                                siteInstance.Name = nameInstance2;
                            }
                            
                            XElement ownerElement = sitesElement.Element(XName.Get("Owner", "http://schemas.microsoft.com/windowsazure"));
                            if (ownerElement != null && ownerElement.IsEmpty == false)
                            {
                                bool isNil3 = false;
                                XAttribute nilAttribute3 = ownerElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (nilAttribute3 != null)
                                {
                                    isNil3 = nilAttribute3.Value == "true";
                                }
                                if (isNil3 == false)
                                {
                                    string ownerInstance = ownerElement.Value;
                                    siteInstance.Owner = ownerInstance;
                                }
                            }
                            
                            XElement repositorySiteNameElement = sitesElement.Element(XName.Get("RepositorySiteName", "http://schemas.microsoft.com/windowsazure"));
                            if (repositorySiteNameElement != null && repositorySiteNameElement.IsEmpty == false)
                            {
                                string repositorySiteNameInstance = repositorySiteNameElement.Value;
                                siteInstance.RepositorySiteName = repositorySiteNameInstance;
                            }
                            
                            XElement runtimeAvailabilityStateElement = sitesElement.Element(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                            if (runtimeAvailabilityStateElement != null && runtimeAvailabilityStateElement.IsEmpty == false)
                            {
                                WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = ((WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), runtimeAvailabilityStateElement.Value, true));
                                siteInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                            }
                            
                            XElement sSLCertificatesSequenceElement = sitesElement.Element(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                            if (sSLCertificatesSequenceElement != null && sSLCertificatesSequenceElement.IsEmpty == false)
                            {
                                bool isNil4 = false;
                                XAttribute nilAttribute4 = sSLCertificatesSequenceElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (nilAttribute4 != null)
                                {
                                    isNil4 = nilAttribute4.Value == "true";
                                }
                                if (isNil4 == false)
                                {
                                    foreach (XElement sSLCertificatesElement in sSLCertificatesSequenceElement.Elements(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                        siteInstance.SslCertificates.Add(certificateInstance);
                                        
                                        XElement expirationDateElement = sSLCertificatesElement.Element(XName.Get("ExpirationDate", "http://schemas.microsoft.com/windowsazure"));
                                        if (expirationDateElement != null && expirationDateElement.IsEmpty == false && string.IsNullOrEmpty(expirationDateElement.Value) == false)
                                        {
                                            bool isNil5 = false;
                                            XAttribute nilAttribute5 = expirationDateElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute5 != null)
                                            {
                                                isNil5 = nilAttribute5.Value == "true";
                                            }
                                            if (isNil5 == false)
                                            {
                                                DateTime expirationDateInstance = DateTime.Parse(expirationDateElement.Value, CultureInfo.InvariantCulture);
                                                certificateInstance.ExpirationDate = expirationDateInstance;
                                            }
                                        }
                                        
                                        XElement friendlyNameElement = sSLCertificatesElement.Element(XName.Get("FriendlyName", "http://schemas.microsoft.com/windowsazure"));
                                        if (friendlyNameElement != null && friendlyNameElement.IsEmpty == false)
                                        {
                                            bool isNil6 = false;
                                            XAttribute nilAttribute6 = friendlyNameElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute6 != null)
                                            {
                                                isNil6 = nilAttribute6.Value == "true";
                                            }
                                            if (isNil6 == false)
                                            {
                                                string friendlyNameInstance = friendlyNameElement.Value;
                                                certificateInstance.FriendlyName = friendlyNameInstance;
                                            }
                                        }
                                        
                                        XElement hostNamesSequenceElement2 = sSLCertificatesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                                        if (hostNamesSequenceElement2 != null && hostNamesSequenceElement2.IsEmpty == false)
                                        {
                                            bool isNil7 = false;
                                            XAttribute nilAttribute7 = hostNamesSequenceElement2.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute7 != null)
                                            {
                                                isNil7 = nilAttribute7.Value == "true";
                                            }
                                            if (isNil7 == false)
                                            {
                                                foreach (XElement hostNamesElement2 in hostNamesSequenceElement2.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                                {
                                                    certificateInstance.HostNames.Add(hostNamesElement2.Value);
                                                }
                                            }
                                        }
                                        
                                        XElement issueDateElement = sSLCertificatesElement.Element(XName.Get("IssueDate", "http://schemas.microsoft.com/windowsazure"));
                                        if (issueDateElement != null && issueDateElement.IsEmpty == false && string.IsNullOrEmpty(issueDateElement.Value) == false)
                                        {
                                            bool isNil8 = false;
                                            XAttribute nilAttribute8 = issueDateElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute8 != null)
                                            {
                                                isNil8 = nilAttribute8.Value == "true";
                                            }
                                            if (isNil8 == false)
                                            {
                                                DateTime issueDateInstance = DateTime.Parse(issueDateElement.Value, CultureInfo.InvariantCulture);
                                                certificateInstance.IssueDate = issueDateInstance;
                                            }
                                        }
                                        
                                        XElement issuerElement = sSLCertificatesElement.Element(XName.Get("Issuer", "http://schemas.microsoft.com/windowsazure"));
                                        if (issuerElement != null && issuerElement.IsEmpty == false)
                                        {
                                            bool isNil9 = false;
                                            XAttribute nilAttribute9 = issuerElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute9 != null)
                                            {
                                                isNil9 = nilAttribute9.Value == "true";
                                            }
                                            if (isNil9 == false)
                                            {
                                                string issuerInstance = issuerElement.Value;
                                                certificateInstance.Issuer = issuerInstance;
                                            }
                                        }
                                        
                                        XElement passwordElement = sSLCertificatesElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                        if (passwordElement != null && passwordElement.IsEmpty == false)
                                        {
                                            bool isNil10 = false;
                                            XAttribute nilAttribute10 = passwordElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute10 != null)
                                            {
                                                isNil10 = nilAttribute10.Value == "true";
                                            }
                                            if (isNil10 == false)
                                            {
                                                string passwordInstance = passwordElement.Value;
                                                certificateInstance.Password = passwordInstance;
                                            }
                                        }
                                        
                                        XElement pfxBlobElement = sSLCertificatesElement.Element(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                                        if (pfxBlobElement != null && pfxBlobElement.IsEmpty == false)
                                        {
                                            bool isNil11 = false;
                                            XAttribute nilAttribute11 = pfxBlobElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute11 != null)
                                            {
                                                isNil11 = nilAttribute11.Value == "true";
                                            }
                                            if (isNil11 == false)
                                            {
                                                byte[] pfxBlobInstance = Convert.FromBase64String(pfxBlobElement.Value);
                                                certificateInstance.PfxBlob = pfxBlobInstance;
                                            }
                                        }
                                        
                                        XElement selfLinkElement = sSLCertificatesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                        if (selfLinkElement != null && selfLinkElement.IsEmpty == false)
                                        {
                                            bool isNil12 = false;
                                            XAttribute nilAttribute12 = selfLinkElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute12 != null)
                                            {
                                                isNil12 = nilAttribute12.Value == "true";
                                            }
                                            if (isNil12 == false)
                                            {
                                                Uri selfLinkInstance = TypeConversion.TryParseUri(selfLinkElement.Value);
                                                certificateInstance.SelfLinkUri = selfLinkInstance;
                                            }
                                        }
                                        
                                        XElement siteNameElement = sSLCertificatesElement.Element(XName.Get("SiteName", "http://schemas.microsoft.com/windowsazure"));
                                        if (siteNameElement != null && siteNameElement.IsEmpty == false)
                                        {
                                            bool isNil13 = false;
                                            XAttribute nilAttribute13 = siteNameElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute13 != null)
                                            {
                                                isNil13 = nilAttribute13.Value == "true";
                                            }
                                            if (isNil13 == false)
                                            {
                                                string siteNameInstance = siteNameElement.Value;
                                                certificateInstance.SiteName = siteNameInstance;
                                            }
                                        }
                                        
                                        XElement subjectNameElement = sSLCertificatesElement.Element(XName.Get("SubjectName", "http://schemas.microsoft.com/windowsazure"));
                                        if (subjectNameElement != null && subjectNameElement.IsEmpty == false)
                                        {
                                            bool isNil14 = false;
                                            XAttribute nilAttribute14 = subjectNameElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute14 != null)
                                            {
                                                isNil14 = nilAttribute14.Value == "true";
                                            }
                                            if (isNil14 == false)
                                            {
                                                string subjectNameInstance = subjectNameElement.Value;
                                                certificateInstance.SubjectName = subjectNameInstance;
                                            }
                                        }
                                        
                                        XElement thumbprintElement2 = sSLCertificatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                        if (thumbprintElement2 != null && thumbprintElement2.IsEmpty == false)
                                        {
                                            bool isNil15 = false;
                                            XAttribute nilAttribute15 = thumbprintElement2.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute15 != null)
                                            {
                                                isNil15 = nilAttribute15.Value == "true";
                                            }
                                            if (isNil15 == false)
                                            {
                                                string thumbprintInstance2 = thumbprintElement2.Value;
                                                certificateInstance.Thumbprint = thumbprintInstance2;
                                            }
                                        }
                                        
                                        XElement toDeleteElement = sSLCertificatesElement.Element(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                                        if (toDeleteElement != null && toDeleteElement.IsEmpty == false && string.IsNullOrEmpty(toDeleteElement.Value) == false)
                                        {
                                            bool isNil16 = false;
                                            XAttribute nilAttribute16 = toDeleteElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute16 != null)
                                            {
                                                isNil16 = nilAttribute16.Value == "true";
                                            }
                                            if (isNil16 == false)
                                            {
                                                bool toDeleteInstance = bool.Parse(toDeleteElement.Value);
                                                certificateInstance.IsToBeDeleted = toDeleteInstance;
                                            }
                                        }
                                        
                                        XElement validElement = sSLCertificatesElement.Element(XName.Get("Valid", "http://schemas.microsoft.com/windowsazure"));
                                        if (validElement != null && validElement.IsEmpty == false && string.IsNullOrEmpty(validElement.Value) == false)
                                        {
                                            bool isNil17 = false;
                                            XAttribute nilAttribute17 = validElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                            if (nilAttribute17 != null)
                                            {
                                                isNil17 = nilAttribute17.Value == "true";
                                            }
                                            if (isNil17 == false)
                                            {
                                                bool validInstance = bool.Parse(validElement.Value);
                                                certificateInstance.IsValid = validInstance;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            XElement selfLinkElement2 = sitesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                            if (selfLinkElement2 != null && selfLinkElement2.IsEmpty == false)
                            {
                                Uri selfLinkInstance2 = TypeConversion.TryParseUri(selfLinkElement2.Value);
                                siteInstance.Uri = selfLinkInstance2;
                            }
                            
                            XElement serverFarmElement = sitesElement.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                            if (serverFarmElement != null && serverFarmElement.IsEmpty == false)
                            {
                                string serverFarmInstance = serverFarmElement.Value;
                                siteInstance.ServerFarm = serverFarmInstance;
                            }
                            
                            XElement siteModeElement = sitesElement.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                            if (siteModeElement != null && siteModeElement.IsEmpty == false)
                            {
                                WebSiteMode siteModeInstance = ((WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement.Value, true));
                                siteInstance.SiteMode = siteModeInstance;
                            }
                            
                            XElement sitePropertiesElement = sitesElement.Element(XName.Get("SiteProperties", "http://schemas.microsoft.com/windowsazure"));
                            if (sitePropertiesElement != null && sitePropertiesElement.IsEmpty == false)
                            {
                                WebSite.WebSiteProperties sitePropertiesInstance = new WebSite.WebSiteProperties();
                                siteInstance.SiteProperties = sitePropertiesInstance;
                                
                                XElement appSettingsSequenceElement = sitePropertiesElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                                if (appSettingsSequenceElement != null && appSettingsSequenceElement.IsEmpty == false)
                                {
                                    foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                    }
                                }
                                
                                XElement metadataSequenceElement = sitePropertiesElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                                if (metadataSequenceElement != null && metadataSequenceElement.IsEmpty == false)
                                {
                                    foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                    }
                                }
                                
                                XElement propertiesSequenceElement = sitePropertiesElement.Element(XName.Get("Properties", "http://schemas.microsoft.com/windowsazure"));
                                if (propertiesSequenceElement != null && propertiesSequenceElement.IsEmpty == false)
                                {
                                    foreach (XElement propertiesElement in propertiesSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string propertiesKey = propertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string propertiesValue = propertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                            }
                            
                            XElement stateElement = sitesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null && stateElement.IsEmpty == false)
                            {
                                string stateInstance = stateElement.Value;
                                siteInstance.State = stateInstance;
                            }
                            
                            XElement usageStateElement = sitesElement.Element(XName.Get("UsageState", "http://schemas.microsoft.com/windowsazure"));
                            if (usageStateElement != null && usageStateElement.IsEmpty == false)
                            {
                                WebSiteUsageState usageStateInstance = ((WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), usageStateElement.Value, true));
                                siteInstance.UsageState = usageStateInstance;
                            }
                            
                            XElement webSpaceElement = sitesElement.Element(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                            if (webSpaceElement != null && webSpaceElement.IsEmpty == false)
                            {
                                string webSpaceInstance = webSpaceElement.Value;
                                siteInstance.WebSpace = webSpaceInstance;
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
