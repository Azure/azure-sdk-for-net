<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--<Import Project="common.targets"/>-->
  <!--
  <Import Project="$(MSBuildExtensionsPath)\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets"/>
  <Import Condition=" $(OnPremiseBuild) " Project="$(CIToolsPath)\Microsoft.WindowsAzure.Build.OnPremise.msbuild" />
  <Import Project="$(MSBuildExtensionsPath)\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets" />
  <Import Project="$(MSBuildExtensionsPath)\Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets" />
  -->
  <!--<Target Name="PreBuildStaticAnalysis" DependsOnTargets="$(PreBuildStaticAnalysisTargets)">-->
    <!--
    <MSBuild Targets="GetPackageReferences"
            Projects="@(ProjectToBuild)"
            ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="OtherProjectReferences" />
    </MSBuild>
    
    <MSBuild Targets="GetOutputPath"
            Projects="@(SDKProject)"
            ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="OutPutFilesToSign" />
    </MSBuild>
  
    <ItemGroup>
      <FilesToSign Include="@(OutPutFilesToSign)"/>
    </ItemGroup>
    
    <Message Text="@(OutPutFilesToSign)" />
    <Message Text="@(OtherProjectReferences)" />
    -->
    <!--<Error Condition=" '@(OtherProjectReferences)' != '' " Text="Contains Project References, build cannot continue. Please remove all Project references from CI builds" />-->


    <!--
    <Properties="GeneratePackageOnBuild=true;IncludeSymbols=true">
    $(MSBuildProjectDefaultTargets)
    
    <CreateItem Include="$(TargetFrameworks)">
      <Output ItemName="Fl" TaskParameter="Include" />
    </CreateItem>
    
    <CreateItem Include="@(SDKProject.Identity)" AdditionalMetadata="FxList=%(Fl.Identity)">
      <Output TaskParameter="Include" ItemName="ProjMeta"/>
    </CreateItem>
    Include="%(Fl.Identity)"
    
     
<Message Text="%(TargetFx.Identity)"/>
    <PropertyGroup>
      <TargetToCall><CallTarget Targets="PrintStuff"/></TargetToCall>
    </PropertyGroup>

    Properties="PreBuildEvent=$(TargetToCall);
    Properties="TargetFramework=$(NetFx452);DelaySign=$(DelaySign);AssemblyOriginatorKeyFile=$(AssemblyOriginatorKeyFile);SignAssembly=true 
    -->
  <!--</Target>-->

  <Target Name="GetPackageReferences" Returns="@(ProjectReference)" />
  <Target Name="GetFxList" Returns="$(TargetFrameworks)" />
  <Target Name="GetOutputPath" Returns="$(OutputPath)\$(AssemblyName).dll" />

  <!--<Target Name="GetProjMetaData" Inputs="@(SDKProject)" Returns="@(ProjMeta)" Outputs="@(ProjMeta)">-->

    <!--<Target Name="GetProjMetaData" Returns="@(ProjMeta)">-->
  
  <Target Name="GetPmd" Inputs="@(SDKProject)" Outputs="%(SDKProject.Identity)" Returns="@(FxName)">
    <Message Text="In GetPmd....... @(SDKProject)"/>
    
    <CreateItem Include="$(TargetFrameworks)">
      <Output ItemName="Fl" TaskParameter="Include" />
    </CreateItem>
 
    <ItemGroup>
      
        <FxName Include="%(Fl.Identity)" />
      
    </ItemGroup>

    <Copy SourceFiles="@(someFiles)" DestinationFolder="@(destiDir)" />

  </Target>


  <Target Name="MyCustomTarget1">
    <Message Text="Custom 11   1111  111111"/>
  </Target>

  <Target Name="MyCustomTarget2">
    <Message Text="Custom 22222222222222"/>
  </Target>
  
  <Target Name="md">

    <Message Text="@(ProjectToBuild)"/>
    <Message Text="@(Project)"/>

    <Message Text="$(Scope)"/>
    <DebugTask/>

    <!--pItems="@(ProjectToBuild)"-->
    <CategorizeProjects    
      SourceRootDirPath="$(LibrarySourceFolder)"
      BuildScope="$(Scope)"
      ProjectCol="@(ProjectToBuild)">
      <Output TaskParameter="SDKProjectsToBuild" ItemName="MProj" />
    </CategorizeProjects>

    <!--<Message Text="%(MProj.Identity) .... %(MProj.TargetFx1)" Condition=" '%(MProj.TargetFx1)' != '' "/>-->
    <Message Text="%(MProj.Identity) .... %(MProj.TargetFx2)" Condition=" '%(MProj.TargetFx2)' != '' "/>

        
<!--
    <Message Text="TargetFx1 ...... %(MProj.TargetFx1)"  Condition="'%(MProj.TargetFx1)' != ''"/>
    <Message Text="Fx2 ..... %(MProj.TargetFx2)" Condition="'%(MProj.TargetFx2)' != ''" />
    -->
    
    <!--
    <MSBuild Targets="GetPmd" Projects="@(SDKProject)">
      <Output TaskParameter="TargetOutputs" ItemName="modifiedSDKProject" />
    </MSBuild>
    
    <Message Text="in md.... %(modifiedSDKProject.Identity)"/>

    <Message Text="in md.... %(SDKProject.FxName)"/>
    -->
  </Target>

  <Target Name="PrintStuff">
    <Message Text="###******(((((())))))))) PrintStuff ...... ProgFiles .... $(ProgramFiles)" />
    <Message Text="$(MSBuildExtensionsPath)" />
    <!--
    <Message Text="%(VsIDENugetPackageReference.Identity) and %(VsIDENugetPackageReference.Version) "/>
    <Message Text="%(VsIDEProjectReference.Identity) "/>
-->

  </Target>

  <Target Name="Foo">
    <Message Text="%(SDKProject.Identity)" />

    <Message Text="%(SDKProject.Identity)" />
    <Message Text="%(SDKProject.RootDir)%(SDKProject.Directory)::TrimEnd('\')" />
  </Target>

  <!--
  <Target Name="_SplitProjectReferencesByFileExistence">
	
</Target>
-->
	
  <Target Name="Publi" DependsOnTargets="PrepareForAutoRestLibraries">
    <Error Condition=" ('$(PackageName)' == '') AND ('$(Scope)' == '' OR '$(Scope)' == 'all') " Text="Publishing nuget package without specifying scope or packageName has now been disabled" />
    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />
    <Message Text="Trying to Create directory $(NuGetPublishingSource)" Condition="!Exists($(NuGetPublishingSource))" />
    <MakeDir Directories="$(NuGetPublishingSource)" Condition="!Exists($(NuGetPublishingSource)) AND !$([System.Text.RegularExpressions.Regex]::IsMatch('$(NuGetPublishingSource)', '^(?i)http'))" />
    <Message Text="Publishing directory detected $(NuGetPublishingSource)" Condition="Exists($(NuGetPublishingSource))" />
    <PropertyGroup>
      <ActualSource Condition=" '$(NuGetPublishingSource)' == '' "></ActualSource>
      <ActualSource Condition=" '$(NuGetPublishingSource)' != '' "> -Source $(NuGetPublishingSource)</ActualSource>
    </PropertyGroup>

    <!--Ran 'nuget push' on the main package, will automatically push the symbol package at the same time-->
    <Message Importance="high" Text="Publishing main and symbols packages to the cloud at $(NuGetPublishingSource)" />
    <Exec Command="$(NuGetCommand) push &quot;$(PackageOutputDir)\%(SdkNuGetPackage.Identity).%(SdkNuGetPackage.PackageVersion).nupkg&quot; $(NuGetKey)$(ActualSource)"
			  IgnoreExitCode="true"
			  Condition=" '%(SdkNuGetPackage.Publish)' != 'false' " />

    <Message Text="Not publishing package %(SdkNuGetPackage.Identity) as Publish is set to 'false' for the component."
				 Condition=" '%(SdkNuGetPackage.Publish)' == 'false' " />

    <MSBuild Projects="$(MSBuildProjectFullPath)"
				 Properties="NuGetKey=$(NuGetKey);NetCorePackageName=%(NetCore_AutoRestLibraries.PackageName);PackageOutputDir=$(PackageOutputDir)"
				 Targets="PublishNetCorePackage" Condition=" %(NetCore_AutoRestLibraries.PackageName) != '' " />
  </Target>


<!--
  <Target Name="CategorizeProjects">
    <Message Text="Categorizing...."/>
    <ItemGroup>
      <ProductProjects Include="%(ProjectToBuild.Identity)" Condition=" '%(ProjectToBuild.ProjectType)' != 'Test' and '%(ProjectToBuild.ExcludeFromBuild)' != 'true' "/>
      <TestProjects Include="%(ProjectToBuild.Identity)" Condition=" ('%(ProjectToBuild.ProjectType)' == 'Test' and '%(ProjectToBuild.ExcludeFromBuild)' != 'true') "/>
    </ItemGroup>
    <ItemGroup Condition=" '$(Scope)' == 'All'">
      <SDKProject Include="@(ProductProjects)" />
      <SDKTestProject Include="@(TestProjects)" />
    </ItemGroup>
    <ItemGroup>
      <KVSamples Include="$(LibrarySourceFolder)\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\**\*.*csproj"/>
    </ItemGroup>

    <ItemGroup Condition=" '$(Scope)' != 'All'">
      <ScopedProjects Include="$(LibrarySourceFolder)\$(Scope)\**\*.csproj" Exclude="$(LibrarySourceFolder)\$(Scope)\*Tests*\*.Test*.csproj" />
      <ScopedTestProjects Include="$(LibrarySourceFolder)\$(Scope)\*Test*\*.Test*.csproj" />
    </ItemGroup>
    <ItemGroup Condition=" '$(Scope)' != 'All'">
      <SDKProject Include="%(ScopedProjects.Identity)" />
      <SDKTestProject Include="%(ScopedTestProjects.Identity)" />
    </ItemGroup>

    <Message Text="Categorized SDK Scoped Projects ..... @(ScopedProjects)" Condition=" '$(Scope)' != 'All'" />
    <Message Text="Categorized Test Scoped Projects ..... @(ScopedTestProjects)" Condition=" '$(Scope)' != 'All'" />
    <Message Text="Categorized SDK Projects ..... @(SDKProject)" Condition=" '$(Scope)' == 'All'" />
    <Message Text="Categorized Test Projects ..... @(SDKTestProject)" Condition=" '$(Scope)' == 'All'" />
    <Message Text="SDKProjects ....... @(SDKProject->Count())"/>
    <Message Text="TestSDKProjects ....... @(SDKTestProject->Count())"/>



  </Target>

  <Target Name="FilterUniTargetProjects">
    <ItemGroup>
      <SDKProject Remove="@(UniTargetSDKProject)"/>
    </ItemGroup>
  </Target>



  <Target Name="GetScopedProjects" Condition=" '$(Scope)' != 'All'">
    <ItemGroup>
      <SDKProject Include="@(ScopedProjects)" />
      <SDKTestProject Include="@(ScopedTestProjects)" />
    </ItemGroup>
    <Message Text="Scoped SDK Projects ..... @(SDKProject)" Condition=" '$(Scope)' != 'All'" />
    <Message Text="Scoped Test Projects ..... @(SDKTestProject)" Condition=" '$(Scope)' != 'All'" />
  </Target>

  <Target Name="CPP">
    
    <Message Text="Categorizing Projects....."/>
    <SDKCategorizeProjects
      SourceRootDirPath="$(LibrarySourceFolder)"
      BuildScope="$(Scope)"
      IgnoreDirNameForSearchingProjects="$(DefaultPathTokenToIgnore)"
      >
      <Output TaskParameter="SDKProjectsToBuild" ItemName="SDKProj" />
      <Output TaskParameter="SDKTestProjectsToBuild" ItemName="TestSDKProj" />
      <Output TaskParameter="WellKnowSDKNet452Projects" ItemName="Net452SdkProj" />
      <Output TaskParameter="WellKnowTestSDKNet452Projects" ItemName="Net452TestSdkProj" />
    </SDKCategorizeProjects>

    <Message Text="SDKProjects ....... @(SDKProj->Count())"/>
    <Message Text="TestSDKProjects ....... @(TestSDKProj->Count())"/>

    <Message Text="Net45SDK ....... @(Net452SdkProj->Count())"/>
    <Message Text="Net45TestSDK ....... @(Net452TestSdkProj->Count())"/>

    <Message Text="SDKProjects...... %(SDKProj.Identity)"/>
    <Message Text="Test SDKProjects.... %(TestSDKProj.Identity)"/>

    <ItemGroup>
      <SDKProject Include="@(SDKProj)"/>
      <SDKTestProject Include="@(TestSDKProj)"/>
      <Net452SDKProj Include="@(Net452SdkProj)"/>
      <TestNet452SDKProj Include="@(Net452TestSdkProj)"/>

    </ItemGroup>

  </Target>
  <PropertyGroup>
    <NetFx452>net452</NetFx452>
    <NetStd14>netstandard1.4</NetStd14>
    <NetCore11>netcoreapp1.1</NetCore11>
  </PropertyGroup>  
  $(PackageNugetDependsOn);
  

<SDKProject Include="%(ScopedProjects.Identity)" Condition=" '%(ScopedProjects.ProjectType)' != 'Test' and '%(ScopedProjects.ExcludeFromBuild)' != 'true' "/>
      <ScopedTestProjects Include="%(ScopedTestProjects.Identity)" Condition=" ('%(ScopedTestProjects.ProjectType)' == 'Test' and '%(ScopedTestProjects.ExcludeFromBuild)' != 'true') "/>

-->

  <Target Name="DumpDirs">
    <PropertyGroup>
      <Foo>%(net452SDKProj.RootDir)%(net452SDKProj.Directory)</Foo>
      <!--<Foo>@(net452SDKProj)</Foo>-->
    </PropertyGroup>

    <!--<Message Text="$(CIToolsPath)"/>-->
    <Message Text="$(Foo)"/>
    
  </Target>
</Project>