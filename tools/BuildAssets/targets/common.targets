<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <NetFx452>net452</NetFx452>
	  <NetFx461>net461</NetFx461>
    <NetFx472>net472</NetFx472>
    <NetStd14>netstandard1.4</NetStd14>
    <NetStd20>netstandard2.0</NetStd20>
    <NetCore11>netcoreapp1.1</NetCore11>
    <NetCore20>netcoreapp2.0</NetCore20>
  </PropertyGroup>
  <PropertyGroup>
    <PreBuildStaticAnalysisTargets>
	    GetBuildEnv;
      <!-- BuildCiSign; -->
      CategorizeProjects;
    </PreBuildStaticAnalysisTargets>
    <PreBuildCategorizePrjectTargets>
      CategorizeProjects;
    </PreBuildCategorizePrjectTargets>
    <RestoreTraversedProjectsDependsOn>
      CategorizeProjects;
      RestoreLatestProjects;
    </RestoreTraversedProjectsDependsOn>
    <CleanTraversedProjectsDependsOn>
      CategorizeProjects;
      CleanLatestProjects;
      CleanSDKPackageFiles
    </CleanTraversedProjectsDependsOn>
	  <CoreAzSdkBuildDependsOn>
		  BuildAzSdkProjects;
	  </CoreAzSdkBuildDependsOn>
    <BuildTraversedProjectsDependsOn>
      $(PreBuildStaticAnalysisTargets);
      RestoreLatestProjects;
      $(CoreAzSdkBuildDependsOn);
    </BuildTraversedProjectsDependsOn>
  </PropertyGroup>
  <PropertyGroup>
    <RunTestProjectsDependsOn>
      $(BuildTraversedProjectsDependsOn);
      Test
    </RunTestProjectsDependsOn>
    <SignDependsOn>
      $(RunTestProjectsDependsOn);
      RunSignTargets;
      Package;
    </SignDependsOn>
    <SignNugetDependsOn>
      $(SignDependsOn);
      SignNugetPackage;
    </SignNugetDependsOn>
    <PackageNugetDependsOn>
      $(SignDependsOn);
      Package;
    </PackageNugetDependsOn>
    <PublishNugetDependsOn>
	    <!-- SignNugetPackage; -->
      $(SignNugetDependsOn);
      PublishingNuget;
      ArchiveSymbolsTarget
    </PublishNugetDependsOn>
    <ArchiveSymbolsDependsOn>
      <!-- Currently running this target independently will archive the pdbs but are not gurantee to match with dll during debugging.
      Because this will rebuild the binaries -->
      $(BuildTraversedProjectsDependsOn);
      ArchiveSymbolsTarget;
    </ArchiveSymbolsDependsOn>
    <HelpDependsOn>
      DisplayHelp
    </HelpDependsOn>
  </PropertyGroup>
  <PropertyGroup>
      <ProjectRootDir/>
  </PropertyGroup>

  <Target Name="GetBuildEnv">
    
    <Message Text="CISignRepo......$(CISignRepo)" Importance="Low" />
    <Message Text="OnPremiseBuild .... $(OnPremiseBuild)" Importance="Low" />
    <!--<Message Text="OnPremiseBuildTasks .... $(OnPremiseBuildTasks)"/>-->
    <Message Text="CIToolsPath .... $(CIToolsPath)"  Importance="Low" />
    <Message Text="CodeSign .... $(CodeSign)"  Importance="Low" />
    <Message Text="PackageOutputPath .... $(PackageOutputPath)" Importance="Low" />
    <Message Text="Scope .... $(Scope)"  Importance="Low" />
    <Message Text="BuildInParallel .... $(BuildInParallel)"  Importance="Low" />
    <Message Text="LocalPublishNugetDir .... $(LocalPublishNugetDir)"  Importance="Low" />

    <Message Text="NetSdkBuildTargetsDir .... $(NetSdkBuildTargetsDir)"  Importance="Low" />
    <Message Text="NetSdkBuildToolsDir .... $(NetSdkBuildToolsDir)" Importance="Low" />
  </Target>

  <Target Name="CleanLatestProjects" Condition=" '$(SkipClean)' != 'true' ">
    <PropertyGroup>
      <LatestProjectDefaultCleanTarget Condition=" '$(LatestProjectDefaultCleanTarget)' == '' ">Clean</LatestProjectDefaultCleanTarget>
    </PropertyGroup>
    <Message Text="Cleaning Initiated....." />
	  <Message Text="Cleaning @(SDKProject);@(SDKTestProject);@(nonSdkProj);@(unsupportedProj)" Condition=" '$(SkipRestore)' != 'true' "/>

    <MSBuild Targets="$(LatestProjectDefaultCleanTarget)"
        Projects="@(SDKProject);@(SDKTestProject);@(nonSdkProj);@(unsupportedProj)"
        Properties="PackageOutputPath=$(PackageOutputPath);Configuration=$(Configuration)"
        BuildInParallel="$(BuildInParallel)"
        ContinueOnError="ErrorAndStop" />
  </Target>
  <!--
  <MSBuild Targets="$(LatestProjectDefaultCleanTarget)"
        Projects="@(FilteredSupportedSdkProjects);@(FilteredSupportedTestProjects);@(nonSdkProj);@(unsupportedProj)"
        Properties="PackageOutputPath=$(PackageOutputPath);Configuration=$(Configuration)"
        BuildInParallel="$(BuildInParallel)"
        ContinueOnError="ErrorAndStop" />
  </Target>
  -->

  <Target Name="CleanSDKPackageFiles">
    <ItemGroup>
      <_SDKPackageFilesToDelete Include="$(PackageOutputPath)\*.nupkg"/>
      <_SDKPackageFilesToDelete Include="$(BaseIntermediateOutputPath)\*.nuspec"/>
    </ItemGroup>
    <Message Text="Cleaning..... @(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " />
    <Delete Files="@(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " ContinueOnError="true"/>
    <DebugTask Condition=" '$(DebugMode)' == 'true' "/>
    <CleanPackagesTask 
            RestoreCacheLocations="$(RestorePackagesPath)" 
            PackageReferences="@(SdkProjPackageList)" 
            PackageSearchPattern="$(PackageSearchPattern)" 
            NupkgOutputDir="$(BuiltPackageOutputDir)"
            DebugTrace="$(DebugTrace)" 
            WhatIf="$(WhatIf)"/>
  </Target>

  <Target Name="RestoreLatestProjects" Condition=" '$(SkipRestore)' != 'true' ">
    <PropertyGroup>
      <LatestProjectDefaultRestoreTarget Condition=" '$(LatestProjectDefaultRestoreTarget)' == '' ">Restore</LatestProjectDefaultRestoreTarget>
    </PropertyGroup>
	  <Message Text="Restoring Initiated....." />
    <Message Text="Now Restoring @(SDKProject);@(SDKTestProject);@(nonSdkProj);@(unsupportedProj)" Condition=" '$(SkipRestore)' != 'true' "/>

    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
            Projects="@(SDKProject);@(SDKTestProject)"
            BuildInParallel="$(BuildInParallel)"
            ContinueOnError="ErrorAndStop" />

    <!--
    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
            Projects="@(FilteredSupportedSdkProjects);@(FilteredSupportedTestProjects)"
            BuildInParallel="$(BuildInParallel)"
            ContinueOnError="ErrorAndStop" />
    -->
    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
            Projects="@(nonSdkProj);@(unsupportedProj)"
            BuildInParallel="$(BuildInParallel)"
            ContinueOnError="ErrorAndStop" />
  </Target>

  <Target Name="BuildAzSdkProjects" Condition=" '$(SkipBuild)' != 'true' ">
    <Message Text="IsBuildingInVS: $(AddProjectReferenceForDebuggingPurpose)"/>
    <Message Text="IsCIBuild: $(AddNugetReferenceForCIandCmdlineBuild)"/>
    <Message Text="CmdLineBuild status ... $(CmdLineBuild)"/> 
    
    <PropertyGroup>
      <LatestProjectDefaultBuildTarget Condition=" '$(LatestProjectDefaultBuildTarget)' == '' ">Build</LatestProjectDefaultBuildTarget>
    </PropertyGroup>

    <!--
    <ItemGroup>
      <SdkTargetFxList Include="@(FilteredSupportedSdkProjects->'%(FxMonikerString)')" />
      <TestTargetFxList Include="@(FilteredSupportedTestProjects->'%(FxMonikerString)')" />
    </ItemGroup>

    <RemoveDuplicates Inputs="@(SdkTargetFxList)">
      <Output TaskParameter="Filtered" ItemName="DeDupeSdkTargetFx"/>
    </RemoveDuplicates>
    <RemoveDuplicates Inputs="@(TestTargetFxList)">
      <Output TaskParameter="Filtered" ItemName="DeDupeTestTargetFx"/>
    </RemoveDuplicates>

    <PropertyGroup>
      <SdkTargetFx>@(DeDupeSdkTargetFx)</SdkTargetFx>
      <TestTargetFx>@(DeDupeTestTargetFx)</TestTargetFx>
    </PropertyGroup>

    <Message Text="SdkTargetFx...... $(SdkTargetFx)"/>
    <Message Text="TestTargetFx...... $(TestTargetFx)"/>
    <DebugTask Condition=" '$(DebugMode)' == 'true' "/>

     <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(FilteredSupportedSdkProjects)"
             Properties="TargetFrameworks=$(SdkTargetFx)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="supportedSdkAssemblies" />
    </MSBuild>

        <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(FilteredSupportedTestProjects)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="supportedTestAssemblies" />
    </MSBuild>
-->

    <!-- Build Filtered Projects -->

    <Message Text="Building SDK Projects ..... @(net452SDKProj) for $(NetFx452)" Condition=" '@(net452SDKProj)' != '' " />

    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(net452SDKProj)"
             Properties="TargetFramework=$(NetFx452)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="net452Assemblies" />
    </MSBuild>
	
	  <Message Text="Building SDK Projects ..... @(net461SDKProj) for $(NetFx461)" Condition=" '@(net461SDKProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(net461SDKProj)"
             Properties="TargetFramework=$(NetFx461)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="net461Assemblies" />
    </MSBuild>
    
    <Message Text="Building SDK Projects ..... @(net472SDKProj) for $(NetFx472)" Condition=" '@(net472SDKProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(net472SDKProj)"
             Properties="TargetFramework=$(NetFx472)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="net472Assemblies" />
    </MSBuild>

    <Message Text="Building SDK Projects ..... @(netStd14SDKProj) for $(NetStd14)" Condition=" '@(netStd14SDKProj)' != '' " />
    <MSBuild Targets="Build"
             Projects="@(netStd14SDKProj)"
             Properties="TargetFramework=$(NetStd14)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="netStd14Assemblies" />
    </MSBuild>

    <Message Text="Building SDK Projects ..... @(netStd20SDKProj) for $(NetStd20)" Condition=" '@(netStd20SDKProj)' != '' " />
    <MSBuild Targets="Build"
             Projects="@(netStd20SDKProj)"
             Properties="TargetFramework=$(NetStd20)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="netStd20Assemblies" />
    </MSBuild>

    <Message Text="Building SDK Projects ..... @(netCore11SDKProjects) for $(NetCore11)" Condition=" '@(netCore11SDKProjects)' != '' " />
    <MSBuild Targets="Build"
             Projects="@(netCore11SDKProjects)"
             Properties="TargetFramework=$(NetCore11)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="netCore11Assemblies" />
    </MSBuild>

    <Message Text="Building SDK Projects ..... @(netCore20SDKProjects) for $(NetCore20)" Condition=" '@(netCore20SDKProjects)' != '' " />
    <MSBuild Targets="Build"
             Projects="@(netCore20SDKProjects)"
             Properties="TargetFramework=$(NetCore20)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="netCore20Assemblies" />
    </MSBuild>

    <!--Test Project-->

	  <!-- <Message Text="Building Test Projects ..... @(netCore11TestProj) for $(NetCore11)" Condition=" '@(netCore11TestProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(netCore11TestProj)"
             Properties="TargetFramework=$(NetCore11)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="true">
    </MSBuild> -->

    <Message Text="Building Test Projects ..... @(netCore20TestProj) for $(NetCore20)" Condition=" '@(netCore20TestProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(netCore20TestProj)"
             Properties="TargetFramework=$(NetCore20)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
    </MSBuild>

	  <Message Text="Building SDK Projects ..... @(net452TestProj) for $(net452TestProj)"  Condition=" '@(net452TestProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
              Projects="@(net452TestProj)"
              Properties="TargetFramework=$(NetFx452)"
              BuildInParallel="$(BuildInParallel)"
              ContinueOnError="ErrorAndStop">
    </MSBuild>
	
	  <Message Text="Building SDK Projects ..... @(net461TestProj) for $(net461TestProj)"  Condition=" '@(net461TestProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
              Projects="@(net461TestProj)"
              Properties="TargetFramework=$(NetFx461)"
              BuildInParallel="$(BuildInParallel)"
              ContinueOnError="ErrorAndStop">
    </MSBuild>

	  <Message Text="Building SDK Projects ..... @(net472TestProj) for $(net472TestProj)"  Condition=" '@(net472TestProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
              Projects="@(net472TestProj)"
              Properties="TargetFramework=$(NetFx472)"
              BuildInParallel="$(BuildInParallel)"
              ContinueOnError="ErrorAndStop">
    </MSBuild>

    <!--UnSupported Projects-->

    <Message Text="Building UnSupported projects ..... @(unsupportedProj)" Condition=" '@(unsupportedProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
            Projects="@(unsupportedProj)"
            BuildInParallel="$(BuildInParallel)"
            ContinueOnError="ErrorAndStop">
    </MSBuild>

    <Message Text="Building NonSdk projects ..... @(nonSdkProj)" Condition=" '@(nonSdkProj)' != '' " />       
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
            Projects="@(nonSdkProj)"
            Properties="CmdLineBuild=$(CmdLineBuild)"
            BuildInParallel="$(BuildInParallel)"
            ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="nonSdkAssemblies"/>
    </MSBuild>

    <ItemGroup>
    <!--
      <FilesToSign Include="@(supportedSdkAssemblies);@(supportedTestAssemblies);@(nonSdkAssemblies)" />
    -->
      <FilesToSign Include="@(net452Assemblies);@(net461Assemblies);@(net472Assemblies);@(netStd14Assemblies);@(netStd20Assemblies);@(netCore11Assemblies);@(nonSdkAssemblies)" />

    </ItemGroup>

    <Message Text="BuiltFiles ........ @(FilesToSign)" />
  </Target>

  <Target Name="Test" Condition=" '$(SkipTests)' != 'true' ">
    <Message Text="Executing Tests......"/>
    <Message Text="Running .NET Core Tests .... @(FilteredSupportedTestProjects)" Condition=" '@(FilteredSupportedTestProjects)' != '' " />
    <!--    
    <Exec Command="dotnet test %(FilteredSupportedTestProjects.Identity) -l trx;LogFileName=$(LibraryRoot)TestResults\%(FilteredSupportedTestProjects.Filename).trx " 
          Condition="@(FilteredSupportedTestProjects) != ''" ContinueOnError="false" WorkingDirectory="%(FilteredSupportedTestProjects.RootDir)%(FilteredSupportedTestProjects.Directory)" />
    -->
    <Message Text="Running .NET Core 2.0 Tests .... @(netCore20TestProj)" Condition=" '@(netCore20TestProj)' != '' " />
    <Exec Command="dotnet test -f $(NetCore20) %(netCore20TestProj.Identity) -l trx;LogFileName=$(LibraryRoot)TestResults\$(NetCore20)\%(netCore20TestProj.Filename).trx /nodeReuse:false" 
        Condition="@(netCore20TestProj) != ''" ContinueOnError="false" WorkingDirectory="%(netCore20TestProj.RootDir)%(netCore20TestProj.Directory)" />

    <Message Text="Running .NET 4.5.2 Tests .... @(net452TestProj)" Condition=" '@(net452TestProj)' != '' " />
    <Exec Command="dotnet test -f $(NetFx452) %(net452TestProj.Identity) -l trx;LogFileName=$(LibraryRoot)TestResults\$(NetFx452)\%(net452TestProj.Filename).trx /nodeReuse:false" 
        Condition="@(net452TestProj) != ''" ContinueOnError="false" WorkingDirectory="%(net452TestProj.RootDir)%(net452TestProj.Directory)" />
	
	  <Message Text="Running .NET 4.6.1 Tests .... @(net461TestProj)" Condition=" '@(net461TestProj)' != '' " />
    <Exec Command="dotnet test -f $(NetFx461) %(net452TestProj.Identity) -l trx;LogFileName=$(LibraryRoot)TestResults\$(NetFx461)\%(net461TestProj.Filename).trx /nodeReuse:false" 
        Condition="@(net461TestProj) != ''" ContinueOnError="false" WorkingDirectory="%(net461TestProj.RootDir)%(net461TestProj.Directory)" />
    
    <Message Text="Running .NET 4.7.2 Tests .... @(net472TestProj)" Condition=" '@(net472TestProj)' != '' " />
    <Exec Command="dotnet test -f $(NetFx472) %(net472TestProj.Identity) -l trx;LogFileName=$(LibraryRoot)TestResults\$(NetFx472)\%(net472TestProj.Filename).trx /nodeReuse:false" 
          Condition="@(net472TestProj) != ''" ContinueOnError="false" WorkingDirectory="%(net472TestProj.RootDir)%(net472TestProj.Directory)" />
    

  </Target>

  <!--
    This target is primarily being used by DevOps pipeline scenario for data plan which is using VSO tasks to sign.
    So this target assumes build outputs are already generated and would simply like to package the
    signed artificats (without rebuilding)
    NOTE: This package cannot be used independently, will get an error as build outputs are not generated.
  -->
  <Target Name="PackageNoBuild" DependsOnTargets="CategorizeProjects;Package" />
  
  <Target Name="Package">
    <Message Text="Packaging..... @(net452SDKProj);@(net461SDKProj);@(net472SDKProj);@(netStd14SDKProj);@(netStd20SDKProj);@(nonSdkProject)" />
    <Message Text="PackageOutputDir....... $(BuiltPackageOutputDir)" />
    <PropertyGroup>
      <!-- <SkipPublishingForNonSdkPackages Condition=" '@(nonSdkProj)' != '' ">true</SkipPublishingForNonSdkPackages> -->
      <NonSdkPackageOutputPath>$(PackageOutputPath)\ToolsPackage</NonSdkPackageOutputPath>
    </PropertyGroup>
    <ItemGroup>    
      <ProjectsToPackage Include="@(SDKProject)" />      
      <NonSdkProjectsToPackage Include="@(nonSdkProject)" />
      <!--
      <ProjectsToPackage Include="@(FilteredSupportedSdkProjects)" />
      -->
    </ItemGroup>
    <MSBuild
        Projects="@(ProjectsToPackage)"
        Targets="Pack"
        Properties="Configuration=$(Configuration);
        VisualStudioVersion=$(VisualStudioVersion); 
        PackageOutputPath=$(PackageOutputPath); 
        NoPackageAnalysis=true; 
        IncludeSymbols=true;
        SymbolPackageFormat=snupkg;
        NoBuild=true;" Condition=" '@(ProjectsToPackage)' != '' ">
      <Output TaskParameter="TargetOutputs" ItemName="SdkNuGetPackages" />
    </MSBuild>

    <MSBuild
        Projects="@(NonSdkProjectsToPackage)"
        Targets="Pack"
        Properties="Configuration=$(Configuration);
        VisualStudioVersion=$(VisualStudioVersion); 
        PackageOutputPath=$(NonSdkPackageOutputPath); 
        NoPackageAnalysis=true; 
        IncludeSymbols=true;
        SymbolPackageFormat=snupkg;
        NoBuild=true;" Condition=" '@(NonSdkProjectsToPackage)' != '' ">
      <Output TaskParameter="TargetOutputs" ItemName="NonSdkNuGetPackages" />
    </MSBuild>

    <!-- <Message Text="Built Nugets @(SdkNuGetPackages);@(NonSdkNugetPackages)"/> -->
  </Target>
  
  <Target Name="PublishingNuget">
    <Error Condition=" ('$(NugetPackageName)' == '') AND '$(MultiPackagePublish)' != 'true' " Text="Please Provide Package Name that has to be published /p:NugetPackageName=[packagename]" />
    <Error Condition="( ('$(Scope)' == '' OR '$(Scope)' == 'all' OR '$(Scope)' == 'All') AND '$(MultiPackagePublish)' != 'true' )" 
                        Text="Publishing nuget package without specifying scope and packageName has now been disabled (e.g /p:NugetPackageName=Microsoft.Azure.Management.Compute /p:Scope=SDKs\Compute )" />
                    <!-- Condition=" ('$(NugetPackageName)' == '') OR ('$(Scope)' == '' OR '$(Scope)' == 'all' OR '$(Scope)' == 'All') AND '$(PublishMultiPackage)' != 'true' "  -->
    <PropertyGroup>
      <PublishNugetToDir Condition=" '$(PublishNugetToDir)' == '' ">$(LibraryRoot)PublishedNugets</PublishNugetToDir>
      <TaskDebugOutput Condition=" '$(TaskDebugOutput)' == '' ">false</TaskDebugOutput>
      <SkipNugetPublishing Condition=" '$(SkipNugetPublishing)' == '' ">false</SkipNugetPublishing>
      <SkipSymbolPublishing Condition=" '$(SkipSymbolPublishing)' == '' ">true</SkipSymbolPublishing>
    </PropertyGroup>
	
    <Message Text="NugetPackageName...... $(NugetPackageName)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="PackageOutputPath...... $(PackageOutputPath)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="PublishNugetToDir...... $(PublishNugetToDir)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="NuGetCommand...... $(NuGetCommand)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="UserId...... $(CIUserId)" Condition=" '$(DebugTrace)' == 'true' "/>
    <DebugTask Condition=" '$(DebugMode)' == 'true' "/>
	
    <MakeDir Directories="$(PublishNugetToDir)" Condition="!Exists($(PublishNugetToDir)) AND !$([System.Text.RegularExpressions.Regex]::IsMatch('$(PublishNugetToDir)', '^(?i)http'))" />
    <PublishSDKNugetTask 
      NugetPackageName="$(NugetPackageName)" 
      PackageOutputPath="$(PackageOutputPath)" 
      PublishNugetToPath="$(PublishNugetToDir)" 
      NugetExePath="$(NuGetCommand)"
      CIUserId="$(CIUserId)"
      SkipNugetPublishing="$(SkipNugetPublishing)"
      SkipSymbolPublishing="$(SkipSymbolPublishing)"
      TaskDebugOutput="$(TaskDebugOutput)"
      ApiKey="$(ApiKey)"
      MultiPackagePublish="$(MultiPackagePublish)" 
      ScopePath="$(Scope)"
      />
  </Target>

  <Target Name="ArchiveSymbolsTarget" Condition=" '$(CodeSign)' == 'true'         
        AND '$(Configuration)' == 'Release' AND '$(SkipArchiveSymbols)' != 'true' ">
    <Message Text="Archiving Symbols......." />
    <Message Text="AssemblyFileList ==== @(FilesToSign)" Importance="Normal" />
    <Message Text="ArchiveSymbolsRootDir ==== $(ArchiveSymbolsRootDir)" Importance="Normal" />
    <!--  -->
    <ArchiveSymbolsTask
      BuiltAssemblyFileCollection="@(FilesToSign)"
      ArchiveSymbolsRootDir="$(ArchiveSymbolsRootDir)"
      BuildJobId="$(JenkinsJobId)"
      ArchiveSymbolsRequestStatusEmail="$(ArchiveSymbolsRequestStatusEmail)"
      ArchiveSymbolsRequestProjectName="$(ArchiveSymbolsRequestProjectName)"      
      SkipExecuteSymbolsRequest="$(SkipExecuteSymbolsRequest)"
    >
    </ArchiveSymbolsTask>
  </Target>

  <Target Name="CategorizeProjects">
    <DebugTask Condition=" '$(DebugMode)' == 'true'"/>
    <SDKCategorizeProjects
      SourceRootDirPath="$(LibrarySourceFolder)"
      BuildScope="$(Scope)"
      IgnorePathTokens="$(DefaultPathTokenToIgnore)"
	    IncludePathTokens="$(IncludePathTokens)"
      >
      <Output TaskParameter="net452SdkProjectsToBuild" ItemName="net452SDKProj" />
	    <Output TaskParameter="net461SdkProjectsToBuild" ItemName="net461SDKProj" />
      <Output TaskParameter="net472SdkProjectsToBuild" ItemName="net472SDKProj" />
      <Output TaskParameter="netStd14SdkProjectsToBuild" ItemName="netStd14SDKProj" />
      <Output TaskParameter="netStd20SdkProjectsToBuild" ItemName="netStd20SDKProj" />
      <Output TaskParameter="netCore11SdkProjectsToBuild" ItemName="netCore11SDKProj" />
      <Output TaskParameter="netCore20SdkProjectsToBuild" ItemName="netCore20SDKProj" />
      <Output TaskParameter="netCore11TestProjectsToBuild" ItemName="netCore11TestProj" />
      <Output TaskParameter="netCore20TestProjectsToBuild" ItemName="netCore20TestProj" />
      <Output TaskParameter="net452TestProjectsToBuild" ItemName="net452TestProj" />
	    <Output TaskParameter="net461TestProjectsToBuild" ItemName="net461TestProj" />
      <Output TaskParameter="net472TestProjectsToBuild" ItemName="net472TestProj" />
      <Output TaskParameter="unSupportedProjectsToBuild" ItemName="unsupportedProj" />
      <Output TaskParameter="nonSdkProjectToBuild" ItemName="nonSdkProj" />
      <Output TaskParameter="ProjectRootDir" PropertyName="ProjRootDir" />
      <Output TaskParameter="AzSdkPackageList" ItemName="SdkProjPkgList" />
      <!--
      <Output TaskParameter="supportedSdkProjectsToBuild" ItemName="supportedSdkProj" />
      <Output TaskParameter="supportedTestProjectsToBuild" ItemName="supportedTestProj" />
      -->
    <!--
      <Output TaskParameter="SuppSdkProjectMetaData" ItemName="SuppSdkProjectMetaData" />
      <Output TaskParameter="SuppTestProjectMetaData" ItemName="SuppTestProjectMetaData" />
    -->
    </SDKCategorizeProjects>

    <Message Text="Categorizing Projects....."/>
    <ItemGroup>
      <TotalSdkProjects Include="@(net452SDKProj);@(net461SDKProj);@(net472SDKProj);@(netStd14SDKProj);@(netStd20SDKProj);@(netCore11SDKProj);@(netCore20SDKProj)"/>
      <TotalTestProjects Include="@(netCore11TestProj);@(netCore20TestProj);@(net452TestProj);@(net461TestProj);@(net472TestProj)"/>
      <!--
      <TotalSupportedSdkProjects Include="@(supportedSdkProj)" />
      <TotalSupportedTestProjects Include="@(supportedTestProj)" />
      -->
    </ItemGroup>
    <!--
    <ItemGroup>
      <FilteredSupportedSdkProjects Include="@(supportedSdkProj)" />
      <FilteredSupportedTestProjects Include="@(supportedTestProj)" />
    </ItemGroup>
    -->

    <RemoveDuplicates Inputs="@(TotalSdkProjects)">
      <Output TaskParameter="Filtered" ItemName="FilteredSdkProjects"/>
    </RemoveDuplicates>

    <RemoveDuplicates Inputs="@(TotalTestProjects)">
      <Output TaskParameter="Filtered" ItemName="FilteredTestProjects"/>
    </RemoveDuplicates>

	  <!-- Output List -->
	  <Message Text="Supported SDKProjects ....... @(FilteredSupportedSdkProjects->Count())" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="%(FilteredSupportedSdkProjects.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text=" "/>
	
	  <Message Text="Supported TestProjects ....... @(FilteredSupportedTestProjects->Count())" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="%(FilteredSupportedTestProjects.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text=" "/>
		  
    <Message Text="SDKProjects ....... @(FilteredSdkProjects->Count())"/>
    <Message Text="%(FilteredSdkProjects.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text=" "/>
    <Message Text="TestSDKProjects ....... @(FilteredTestProjects->Count())"/>
    <Message Text="%(FilteredTestProjects.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text=" "/>
    <Message Text="UnSupported Projects ....... @(unsupportedProj->Count())" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="%(unsupportedProj.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text=" "/>
    <Message Text="NonSdk Projects......... @(nonSdkProj->Count())" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="%(nonSdkProj.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    

    <PropertyGroup>
      <ProjectRootDir>$(ProjRootDir)</ProjectRootDir>
    </PropertyGroup>
    <ItemGroup>
      <net452SDKProjects Include="@(net452SDKProj)"/>
	    <net461SDKProjects Include="@(net461SDKProj)"/>
      <net472SDKProjects Include="@(net472SDKProj)"/>
      <netStd14SDKProjects Include="@(netStd14SDKProj)"/>
      <netStd20SDKProjects Include="@(netStd20SDKProj)"/>
      <netCore11SDKProjects Include="@(netCore11SDKProj)"/>
      <netCore20SDKProjects Include="@(netCore20SDKProj)"/>
      <netCore11TestProjects Include="@(netCore11TestProj)"/>
      <netCore20TestProjects Include="@(netCore20TestProj)"/>
      <net452TestProjects Include="@(net452TestProj)"/>
	    <net461TestProjects Include="@(net461TestProj)"/>
      <net472TestProjects Include="@(net472TestProj)"/>
      <unSupportedProject Include="@(unsupportedProj)"/>
      <nonSdkProject Include="@(nonSdkProj)"/>
      <SdkProjPackageList Include="@(SdkProjPkgList)" />
    </ItemGroup>

    <ItemGroup>
      <SDKProject Include="@(FilteredSdkProjects)"/>
      <SDKTestProject Include="@(FilteredTestProjects)"/>
      
      <ProjectToScanDirs Include="%(FilteredSdkProjects.RootDir)%(FilteredSdkProjects.Directory)"/>
      <ProjectToScanDirs Include="%(FilteredTestProjects.RootDir)%(FilteredTestProjects.Directory)"/>
      <!--
      <ProjectToScanDirs Include="%(FilteredSupportedSdkProjects.RootDir)%(FilteredSupportedSdkProjects.Directory)"/>
      <ProjectToScanDirs Include="%(FilteredSupportedTestProjects.RootDir)%(FilteredSupportedTestProjects.Directory)"/>
      -->
    </ItemGroup>

    <Message Text=" "/>
    <Message Text="Package List....... @(SdkProjPackageList->Count())" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="%(SdkProjPackageList.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text=" "/>
    <Message Text="ProjectRootDir......... $(ProjectRootDir)" Condition=" '$(DebugTrace)' == 'true' "/>

    <!--
    <Message Text=" "/>
    <Message Text="FilteredSupportedSdkProjects ....... @(FilteredSupportedSdkProjects->Count())"/>
    <Message Text="FilteredSupportedTestProjects ....... @(FilteredSupportedTestProjects->Count())"/>
    <Message Text="%(FilteredSupportedSdkProjects.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="%(FilteredSupportedSdkProjects.FxMonikerString)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="%(FilteredSupportedTestProjects.Identity) ......... %(FilteredSupportedTestProjects.FxMonikerString)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="@(FilteredSupportedSdkProjects->'%(FxMonikerString)')" Condition=" '$(DebugTrace)' == 'true' "/>

    <ItemGroup>
      <FxMoniker Include="@(FilteredSupportedSdkProjects->'%(FxMonikerString)')" />
    </ItemGroup>

    <Message Text="FxMonikers ....... @(FxMoniker)" />
    <DebugTask Condition=" '$(DebugMode)' == 'true'"/>
    -->
  </Target>
  
  <Target Name="UpdateTools">
    <PropertyGroup>
    <RemoteRootDir Condition=" '$(RemoteRootDir)' == '' ">D:\myFork\SdkBuildTools</RemoteRootDir>
    </PropertyGroup>
    <Message Text="Updating tools ...."/>
    <!-- https://raw.githubusercontent.com/shahabhijeet/azure-sdk-for-net/addSep/ -->
    <GetBuildTools LocalBranchRootDir="$(LibraryRoot)" RemoteRootDir="$(RemoteRootDir)" DebugTrace="$(DebugTrace)"/>
  </Target>

  <Target Name="DisplayHelp">
    <Message Text="msbuild build.proj /t:Build"/>
    <Message Text="---- will build and create nuget pacakge for the entire repo"/>

    <Message Text="msbuild build.proj /t:Build /p:Scope=SDKs\Compute" />
    <Message Text="---- will build Microsoft.Azure.Management.Compute and Compute.Tests project and create nuget pacakge for Compute"/>

    <Message Text="msbuild build.proj /t:RunTests" />
    <Message Text="----- will Build and Run tests for the entire repo" />

    <Message Text="msbuild build.proj /t:RunTests /p:Scope=SDKs\Compute" />
    <Message Text="----- will Build Compute nuget package and run compute test" />
	
	<!--
    <Message Text="msbuild build.proj /t:PublishNuget /p:NugetPackageName={Nuget package name} /p:PackageOutputPath={Package output path} /p:PublishNugetToPath={Nuget publish path}" />
    
    <Message Text="NugetPackageName Name Of Package from .csproj under ProjectId xml tag"/>
    /p:PackageOutputPath=<Defaulted to build output if not provided> /p:PublishNugetToPath=<Defaulted to https://www.nuget.org if not provided, or provide local path /p:Scope=SDKs\Compute" />
    <Message Text=" will Build Compute nuget package and run compute test" />
	-->
  </Target>
  
  <!--Do not delete-->
  <Target Name="PreBuildStaticAnalysis" DependsOnTargets="$(PreBuildStaticAnalysisTargets)"/>
  <Import Project="signing.targets"/>  
  <Import Project="additional.targets"/>
  <Import Project="utility.targets"/>
  <Import Project="..\tasks\common.tasks"/>  
</Project>