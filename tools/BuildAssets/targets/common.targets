<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <NetFx452>net452</NetFx452>
    <NetStd14>netstandard1.4</NetStd14>
    <NetCore11>netcoreapp1.1</NetCore11>
  </PropertyGroup>
  <PropertyGroup>
    <PreBuildStaticAnalysisTargets>
	    GetBuildEnv;
      BuildCiSign;
      CategorizeProjects;
    </PreBuildStaticAnalysisTargets>
    <PreBuildCategorizePrjectTargets>
      CategorizeProjects;
    </PreBuildCategorizePrjectTargets>
    <RestoreTraversedProjectsDependsOn>
      CategorizeProjects;
      RestoreLatestProjects;
    </RestoreTraversedProjectsDependsOn>
    <CleanTraversedProjectsDependsOn>
      CategorizeProjects;
      CleanLatestProjects;
      CleanSDKPackageFiles
    </CleanTraversedProjectsDependsOn>
	<CoreAzSdkBuildDependsOn>
		BuildAzSdkProjects;
	</CoreAzSdkBuildDependsOn>
    <BuildTraversedProjectsDependsOn>
      $(PreBuildStaticAnalysisTargets);
      RestoreLatestProjects;
      $(CoreAzSdkBuildDependsOn);
    </BuildTraversedProjectsDependsOn>
  </PropertyGroup>
  <PropertyGroup>
    <RunTestProjectsDependsOn>
      $(BuildTraversedProjectsDependsOn);
      Test
    </RunTestProjectsDependsOn>
    <SignNugetDependsOn>
      $(RunTestProjectsDependsOn);
      RunSignTargets;
      Package;
    </SignNugetDependsOn>
    <PackageNugetDependsOn>
      $(RunTestProjectsDependsOn);
      RunSignTargets;
      Package
    </PackageNugetDependsOn>
    <PublishNugetDependsOn>
      $(PackageNugetDependsOn);
      PublishingNuget
    </PublishNugetDependsOn>
    <HelpDependsOn>
      DisplayHelp
    </HelpDependsOn>
  </PropertyGroup>
  <PropertyGroup>
      <ProjectRootDir/>
  </PropertyGroup>

  <Target Name="GetBuildEnv" Condition=" '$(BuildWideDebugTrace)' == 'true' ">
    <Message Text="OnPremiseBuild .... $(OnPremiseBuild)" Condition=" '$(BuildWideDebugTrace)' == 'true' "/>
    <!--<Message Text="OnPremiseBuildTasks .... $(OnPremiseBuildTasks)"/>-->
    <Message Text="CIToolsPath .... $(CIToolsPath)" Condition=" '$(BuildWideDebugTrace)' == 'true' "/>
    <Message Text="CodeSign .... $(CodeSign)" Condition=" '$(BuildWideDebugTrace)' == 'true' "/>
    <Message Text="PackageOutputPath .... $(PackageOutputPath)" Condition=" '$(BuildWideDebugTrace)' == 'true' "/>
    <Message Text="Scope .... $(Scope)" Condition=" '$(BuildWideDebugTrace)' == 'true' "/>
    <Message Text="BuildInParallel .... $(BuildInParallel)" Condition=" '$(BuildWideDebugTrace)' == 'true' "/>

    <Message Text="NetSdkBuildTargetsDir .... $(NetSdkBuildTargetsDir)" Condition=" '$(BuildWideDebugTrace)' == 'true' "/>
    <Message Text="NetSdkBuildToolsDir .... $(NetSdkBuildToolsDir)" Condition=" '$(BuildWideDebugTrace)' == 'true' "/>
  </Target>

  <Target Name="CleanLatestProjects" Condition=" '$(SkipClean)' != 'true' ">
    <PropertyGroup>
      <LatestProjectDefaultCleanTarget Condition=" '$(LatestProjectDefaultCleanTarget)' == '' ">Clean</LatestProjectDefaultCleanTarget>
    </PropertyGroup>
    <Message Text="Cleaning Initiated....." />
    <MSBuild Targets="$(LatestProjectDefaultCleanTarget)"
        Projects="@(SDKProject);@(SDKTestProject);@(unsupportedProj)"
        Properties="PackageOutputPath=$(PackageOutputPath)"
        BuildInParallel="$(BuildInParallel)"
        ContinueOnError="ErrorAndStop" />
  </Target>

  <Target Name="CleanSDKPackageFiles">
    <ItemGroup>
      <_SDKPackageFilesToDelete Include="$(PackageOutputPath)\*.nupkg"/>
      <_SDKPackageFilesToDelete Include="$(BaseIntermediateOutputPath)\*.nuspec"/>
    </ItemGroup>
    <Message Text="Cleaning..... @(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " />
    <Delete Files="@(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " ContinueOnError="true"/>
  </Target>

  <Target Name="RestoreLatestProjects" Condition=" '$(SkipRestore)' != 'true' ">
    <PropertyGroup>
      <LatestProjectDefaultRestoreTarget Condition=" '$(LatestProjectDefaultRestoreTarget)' == '' ">Restore</LatestProjectDefaultRestoreTarget>
    </PropertyGroup>
    <Message Text="Now Restoring @(SDKProject);@(SDKTestProject);@(unsupportedProj)" />

    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
            Projects="@(SDKProject);@(SDKTestProject)"
            BuildInParallel="$(BuildInParallel)"
            ContinueOnError="ErrorAndStop" />
	
    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
              Projects="@(unsupportedProj)"
              BuildInParallel="$(BuildInParallel)"
              ContinueOnError="ErrorAndStop" />
        
  </Target>

  <Target Name="BuildAzSdkProjects" Condition=" '$(SkipBuild)' != 'true' ">
    <Message Text="IsBuildingInVS: $(AddProjectReferenceForDebuggingPurpose)"/>
    <Message Text="IsCIBuild: $(AddNugetReferenceForCIandCmdlineBuild)"/>
    <Message Text="CmdLineBuild status ... $(CmdLineBuild)"/> 
    
    <PropertyGroup>
      <LatestProjectDefaultBuildTarget Condition=" '$(LatestProjectDefaultBuildTarget)' == '' ">Build</LatestProjectDefaultBuildTarget>
    </PropertyGroup>

    <Message Text="Building SDK Projects ..... @(net452SDKProj) for $(NetFx452)" Condition=" '@(net452SDKProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(net452SDKProj)"
             Properties="TargetFramework=$(NetFx452)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="net452Assemblies" />
    </MSBuild>

    <Message Text="Building SDK Projects ..... @(netStd14SDKProj) for $(NetStd14)" Condition=" '@(netStd14SDKProj)' != '' " />
    <MSBuild Targets="Build"
             Projects="@(netStd14SDKProj)"
             Properties="TargetFramework=$(NetStd14)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="netStd14Assemblies" />
    </MSBuild>

    <Message Text="Building SDK Projects ..... @(netCore11SDKProjects) for $(NetCore11)" Condition=" '@(netCore11SDKProjects)' != '' " />
    <MSBuild Targets="Build"
             Projects="@(netCore11SDKProjects)"
             Properties="TargetFramework=$(NetCore11)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="netCore11Assemblies" />
    </MSBuild>

    <!--Test Project-->
	  <Message Text="Building Test Projects ..... @(netCore11TestProj) for $(NetCore11)" Condition=" '@(netCore11TestProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
             Projects="@(netCore11TestProj)"
             Properties="TargetFramework=$(NetCore11)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="true">
    </MSBuild>

	  <Message Text="Building SDK Projects ..... @(net452TestProj) for $(net452TestProj)"  Condition=" '@(net452TestProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
              Projects="@(net452TestProj)"
              Properties="TargetFramework=$(NetFx452)"
              BuildInParallel="$(BuildInParallel)"
              ContinueOnError="true">
    </MSBuild>

    <!--UnSupported Projects-->

    <Message Text="Building UnSupported projects ..... @(unsupportedProj)" Condition=" '@(unsupportedProj)' != '' " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
            Projects="@(unsupportedProj)"
            BuildInParallel="$(BuildInParallel)"
            ContinueOnError="ErrorAndStop">
    </MSBuild>

    <Message Text="Building NonSdk projects ..... @(nonSdkProj)" Condition=" '@(nonSdkProj)' != '' " />       
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
            Projects="@(unsupportedProj)"
            Properties="CmdLineBuild=$(CmdLineBuild)"
            BuildInParallel="$(BuildInParallel)"
            ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="nonSdkAssemblies"/>
    </MSBuild>

    <ItemGroup>
      <FilesToSign Include="@(net452Assemblies);@(netStd14Assemblies);@(netCore11Assemblies);@(nonSdkAssemblies)" />
    </ItemGroup>
  </Target>

  <Target Name="Test" Condition=" '$(SkipTests)' != 'true' ">
    <Message Text="Executing Tests......"/>
    <Message Text="Running .NET Core 1.1 Tests .... @(netCore11TestProj)" Condition=" '@(netCore11TestProj)' != '' " />
    <Exec Command="dotnet test -f $(NetCore11) %(netCore11TestProj.Identity) -l trx;LogFileName=$(LibraryRoot)TestResults\netCore11\%(netCore11TestProj.Filename).trx " Condition="@(netCore11TestProj) != ''" ContinueOnError="false" WorkingDirectory="%(netCore11TestProj.RootDir)%(netCore11TestProj.Directory)" />

    <Message Text="Running .NET 4.5.2 Tests .... @(net452TestProj)" Condition=" '@(net452TestProj)' != '' " />
    <Exec Command="dotnet test -f $(NetFx452) %(net452TestProj.Identity) -l trx;LogFileName=$(LibraryRoot)TestResults\net452\%(net452TestProj.Filename).trx " Condition="@(net452TestProj) != ''" ContinueOnError="false" WorkingDirectory="%(net452TestProj.RootDir)%(net452TestProj.Directory)" />
  </Target>

  <Target Name="Package">
    <Message Text="Packaging..... @(net452SDKProj);@(netStd14SDKProj);@(nonSdkProject)" />
    <PropertyGroup>
      <!-- <SkipPublishingForNonSdkPackages Condition=" '@(nonSdkProj)' != '' ">true</SkipPublishingForNonSdkPackages> -->
      <NonSdkPackageOutputPath>$(PackageOutputPath)\ToolsPackage</NonSdkPackageOutputPath>
    </PropertyGroup>
    <ItemGroup>
      <ProjectsToPackage Include="@(SDKProject)" />
      <NonSdkProjectsToPackage Include="@(nonSdkProject)" />
    </ItemGroup>
    <MSBuild
        Projects="@(ProjectsToPackage)"
        Targets="Pack"
        Properties="Configuration=$(Configuration);
        VisualStudioVersion=$(VisualStudioVersion); 
        PackageOutputPath=$(PackageOutputPath); 
        NoPackageAnalysis=true; 
        IncludeSymbols=true;
        NoBuild=true;">
      <Output TaskParameter="TargetOutputs" ItemName="SdkNuGetPackages" />
    </MSBuild>

    <MSBuild
        Projects="@(NonSdkProjectsToPackage)"
        Targets="Pack"
        Properties="Configuration=$(Configuration);
        VisualStudioVersion=$(VisualStudioVersion); 
        PackageOutputPath=$(NonSdkPackageOutputPath); 
        NoPackageAnalysis=true; 
        IncludeSymbols=true;
        NoBuild=true;" Condition=" '@(NonSdkProjectsToPackage)' != '' ">
      <Output TaskParameter="TargetOutputs" ItemName="NonSdkNuGetPackages" />
    </MSBuild>

    <Message Text="Built Nugets @(SdkNuGetPackages);@(NonSdkNugetPackages)"/>
  </Target>
  
  <Target Name="PublishingNuget">
    <Error Condition=" ('$(NugetPackageName)' == '') " Text="Please Provide Package Name that has to be published /p:NugetPackagename=[packagename]" />
    <Error Condition=" ('$(NugetPackageName)' == '') AND ('$(Scope)' == '' OR '$(Scope)' == 'all') " Text="Publishing nuget package without specifying scope or packageName has now been disabled" />
    <PropertyGroup>
      <PublishNugetToDir Condition=" '$(PublishNugetToDir)' == '' ">$(LibraryRoot)PublishedNugets</PublishNugetToDir>
      <TaskDebugOutput Condition=" '$(TaskDebugOutput)' == '' ">false</TaskDebugOutput>
      <SkipNugetPublishing Condition=" '$(SkipNugetPublishing)' == '' ">false</SkipNugetPublishing>
      <SkipSymbolPublishing Condition=" '$(SkipSymbolPublishing)' == '' ">false</SkipSymbolPublishing>
    </PropertyGroup>
    
    <MakeDir Directories="$(PublishNugetToDir)" Condition="!Exists($(PublishNugetToDir)) AND !$([System.Text.RegularExpressions.Regex]::IsMatch('$(PublishNugetToDir)', '^(?i)http'))" />
    <PublishSDKNuget 
      NugetPackageName="$(NugetPackageName)" 
      PackageOutputPath="$(PackageOutputPath)" 
      PublishNugetToPath="$(PublishNugetToDir)" 
      NugetExePath="$(NuGetCommand)"
      UserId="$(UserId)"
      SkipNugetPublishing="$(SkipNugetPublishing)"
      SkipSymbolPublishing="$(SkipSymbolPublishing)"
      TaskDebugOutput="$(TaskDebugOutput)"
      ApiKey="$(ApiKey)"
      />
  </Target>

  <Target Name="PublishingNuget_Original">
    <Error Condition=" ('$(NugetPackageName)' == '') " Text="Please Provide Package Name that has to be published /p:NugetPackagename=[packagename]" />
    <Error Condition=" ('$(NugetPackageName)' == '') AND ('$(Scope)' == '' OR '$(Scope)' == 'all') " Text="Publishing nuget package without specifying scope or packageName has now been disabled" />
    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />
    <PropertyGroup>
      <PublishNugetToDir Condition=" '$(PublishNugetToDir)' == '' ">$(LibraryRoot)PublishedNugets</PublishNugetToDir>
    </PropertyGroup>

    <Message Text="Trying to Create directory $(PublishNugetToDir)" Condition="!Exists($(PublishNugetToDir))" />
    <MakeDir Directories="$(PublishNugetToDir)" Condition="!Exists($(PublishNugetToDir)) AND !$([System.Text.RegularExpressions.Regex]::IsMatch('$(PublishNugetToDir)', '^(?i)http'))" />
    <Message Text="Publishing directory detected $(PublishNugetToDir)" Condition="Exists($(PublishNugetToDir))" />
    <PropertyGroup>
      <PublishDestination Condition=" '$(PublishNugetToDir)' != '' "> -Source $(PublishNugetToDir)</PublishDestination>
    </PropertyGroup>

    <Message Importance="high" Text="Publishing main and symbols packages to the cloud at $(NuGetPublishingSource)" />
    <Exec Command="$(NuGetCommand) push &quot;$(PackageOutputPath)\*$(NugetPackageName)*.nupkg&quot; $(NuGetKey)$(PublishDestination)"
			  IgnoreExitCode="true" />
    <!--Condition=" '%(SdkNuGetPackage.Publish)' != 'false' " />-->
  </Target>

  <Target Name="CategorizeProjects">
    <DebugTask Condition=" '$(DebugMode)' == 'true'"/>
    <SDKCategorizeProjects
      SourceRootDirPath="$(LibrarySourceFolder)"
      BuildScope="$(Scope)"
      IgnoreDirNameForSearchingProjects="$(DefaultPathTokenToIgnore)"
      >
      <Output TaskParameter="net452SdkProjectsToBuild" ItemName="net452SDKProj" />
      <Output TaskParameter="netStd14SdkProjectsToBuild" ItemName="netStd14SDKProj" />
      <Output TaskParameter="netCore11SdkProjectsToBuild" ItemName="netCore11SDKProj" />
      <Output TaskParameter="netCore11TestProjectsToBuild" ItemName="netCore11TestProj" />
      <Output TaskParameter="net452TestProjectsToBuild" ItemName="net452TestProj" />
      <Output TaskParameter="unSupportedProjectsToBuild" ItemName="unsupportedProj" />
      <Output TaskParameter="nonSdkProjectToBuild" ItemName="nonSdkProj" />
      <Output TaskParameter="ProjectRootDir" PropertyName="ProjRootDir" />
    </SDKCategorizeProjects>

    <Message Text="Categorizing Projects....."/>
    <ItemGroup>
      <TotalSdkProjects Include="@(net452SDKProj);@(netStd14SDKProj);@(netCore11SDKProj)"/>
      <TotalTestProjects Include="@(netCore11TestProj);@(net452TestProj)"/>
    </ItemGroup>

    <RemoveDuplicates Inputs="@(TotalSdkProjects)">
      <Output TaskParameter="Filtered" ItemName="FilteredSdkProjects"/>
    </RemoveDuplicates>

    <RemoveDuplicates Inputs="@(TotalTestProjects)">
      <Output TaskParameter="Filtered" ItemName="FilteredTestProjects"/>
    </RemoveDuplicates>

    <Message Text="SDKProjects ....... @(FilteredSdkProjects->Count())"/>
    <Message Text="%(FilteredSdkProjects.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text=" "/>
    <Message Text="TestSDKProjects ....... @(FilteredTestProjects->Count())"/>
    <Message Text="%(FilteredTestProjects.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text=" "/>
    <Message Text="UnSupported Projects ....... @(unsupportedProj->Count())"/>
    <Message Text="%(unsupportedProj.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text=" "/>
    <Message Text="NonSdk Projects......... @(nonSdkProj->Count())" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="%(nonSdkProj.Identity)" Condition=" '$(DebugTrace)' == 'true' "/>

    <PropertyGroup>
      <ProjectRootDir>$(ProjRootDir)</ProjectRootDir>
    </PropertyGroup>
    <ItemGroup>
      <net452SDKProjects Include="@(net452SDKProj)"/>
      <netStd14SDKProjects Include="@(netStd14SDKProj)"/>
      <netCore11SDKProjects Include="@(netCore11SDKProj)"/>
      <netCore11TestProjects Include="@(netCore11TestProj)"/>
      <net452TestProjects Include="@(net452TestProj)"/>
      <unSupportedProject Include="@(unsupportedProj)"/>
      <nonSdkProject Include="@(nonSdkProj)"/>
    </ItemGroup>

    <ItemGroup>
      <SDKProject Include="@(FilteredSdkProjects)"/>
      <SDKTestProject Include="@(FilteredTestProjects)"/>
      <ProjectToScanDirs Include="%(FilteredSdkProjects.RootDir)%(FilteredSdkProjects.Directory)"/>
      <ProjectToScanDirs Include="%(FilteredTestProjects.RootDir)%(FilteredTestProjects.Directory)"/>
    </ItemGroup>

    <Message Text=" "/>
    <Message Text="ProjectRootDir......... $(ProjectRootDir)" Condition=" '$(DebugTrace)' == 'true' "/>
  </Target>
  
  <Target Name="UpdateTools">
    <PropertyGroup>
    <RemoteRootDir Condition=" '$(RemoteRootDir)' == '' ">D:\myFork\SdkBuildTools</RemoteRootDir>
    </PropertyGroup>
    <Message Text="Updating tools ...."/>
    <!-- https://raw.githubusercontent.com/shahabhijeet/azure-sdk-for-net/addSep/ -->
    <GetBuildTools LocalBranchRootDir="$(LibraryRoot)" RemoteRootDir="$(RemoteRootDir)" DebugTrace="$(DebugTrace)"/>
  </Target>

  <Target Name="DisplayHelp">
    <Message Text="msbuild build.proj /t:Build"/>
    <Message Text="---- will build and create nuget pacakge for the entire repo"/>

    <Message Text="msbuild build.proj /t:Build /p:Scope=SDKs\Compute" />
    <Message Text="---- will build Microsoft.Azure.Management.Compute and Compute.Tests project and create nuget pacakge for Compute"/>

    <Message Text="msbuild build.proj /t:RunTests" />
    <Message Text="----- will Build and Run tests for the entire repo" />

    <Message Text="msbuild build.proj /t:RunTests /p:Scope=SDKs\Compute" />
    <Message Text="----- will Build Compute nuget package and run compute test" />
	
	<!--
    <Message Text="msbuild build.proj /t:PublishNuget /p:NugetPackageName={Nuget package name} /p:PackageOutputPath={Package output path} /p:PublishNugetToPath={Nuget publish path}" />
    
    <Message Text="NugetPackageName Name Of Package from .csproj under ProjectId xml tag"/>
    /p:PackageOutputPath=<Defaulted to build output if not provided> /p:PublishNugetToPath=<Defaulted to https://www.nuget.org if not provided, or provide local path /p:Scope=SDKs\Compute" />
    <Message Text=" will Build Compute nuget package and run compute test" />
	-->
  </Target>
  
  <!--Do not delete-->
  <Target Name="PreBuildStaticAnalysis" DependsOnTargets="$(PreBuildStaticAnalysisTargets)"/>
  <Import Project="signing.targets"/>  
  <Import Project="additional.targets"/>
  <Import Project="..\tasks\common.tasks"/>  
</Project>