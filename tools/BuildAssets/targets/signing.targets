<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="PreSign" DependsOnTargets="GlobalReadinessTools">
    <PropertyGroup>
      <StrongNameToken Condition=" '$(StrongNameToken)' == '' ">31bf3856ad364e35</StrongNameToken>
    </PropertyGroup>
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="WindowsSdkPath"/>
    </GetFrameworkSdkPath>

    <ItemGroup>
      <DelaySignedAssembliesToValidate Include="@(FilesToSign)" />
    </ItemGroup>
    <Message Text="Unsigned files .... @(DelaySignedAssembliesToValidate)" />

    <Message Importance="high" Text="Contains no files. Code sign will skip."
				 Condition="'@(DelaySignedAssembliesToValidate)' == ''" />
         
    <ValidateStrongNameSignatureTask
			WindowsSdkPath="$(WindowsSdkPath)"
			Assembly="%(DelaySignedAssembliesToValidate.Identity)"
			ExpectedTokenSignature="$(StrongNameToken)"
			ExpectedDelaySigned="true"
			ContinueOnError="false"
			Condition="'@(DelaySignedAssembliesToValidate)' != ''"/>
  </Target>

  <Target Name="GlobalReadinessTools" Condition=" '$(RunGlobalReadinessTools)' == 'true'" DependsOnTargets="GlobalReadinessToolsInfo;RunPoliCheck">
    <Message Text="Global Readiness Tools execution complete..."/>
  </Target>
  <Target Name="RunPoliCheck" Condition=" '$(OnPremiseBuild)' == 'true' AND '$(RunGlobalReadinessTools)' == 'true' " DependsOnTargets="CorporateValidation"/>
  <Target Name="GlobalReadinessToolsInfo">
    <PropertyGroup>
      <StrongNameToken Condition=" '$(StrongNameToken)' == '' ">31bf3856ad364e35</StrongNameToken>
      <ScopeScanPath Condition=" '$(Scope)' != 'All' ">$(ProjectRootDir)</ScopeScanPath>
      <ScopeScanPath Condition=" '$(ScopeScanPath)' == '' AND '$(Scope)' != 'All' ">$(LibrarySourceFolder)\$(Scope.TrimEnd('\'))</ScopeScanPath>
      <ScopeScanPath Condition=" '$(ScopeScanPath)' == '' AND '$(Scope)' != 'All' ">$(LibraryRoot)\$(Scope.TrimEnd('\'))</ScopeScanPath>
      <CorporateScanPaths Condition=" Exists($(ScopeScanPath))">$(ScopeScanPath)</CorporateScanPaths>
    </PropertyGroup>
    <Message Text="Scope..... $(Scope)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="ProjectRootDir..... $(ProjectRootDir)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="ScopeScanPath ..... $(ScopeScanPath)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="ProjectRootDir ..... $(ProjectRootDir)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="CorporateScanPaths ..... $(CorporateScanPaths)" Condition=" '$(DebugTrace)' == 'true' "/>
    <Message Text="Running PoliCheck on ..... $(CorporateScanPaths)" Condition=" '$(CorporateScanPaths)' != '' and '$(RunGlobalReadinessTools)' == 'true'"/>
  </Target>

  <Target Name="Sign" Condition=" '$(CodeSign)' == 'true' AND '$(AuthenticodeSign)' == 'true' ">
    <CodeSigningTask
			Description="Microsoft Azure SDK"
			Keywords="Microsoft Azure .NET SDK"
			UnsignedFiles="@(DelaySignedAssembliesToValidate)"
			DestinationPath="%(DelaySignedAssembliesToValidate.RootDir)%(DelaySignedAssembliesToValidate.Directory)"
			SigningLogPath="$(LibraryRoot)\binaries"
			ToolsPath="$(CIToolsPath)"
			Condition="'$(CodeSign)' == 'true' and '@(DelaySignedAssembliesToValidate)' != ''" />
			
	<!-- <NugetSigningTask GeneratedManifestDir="$(SignManifestRootDir)"> -->
		<!-- <Output TaskParameter="SigningOutput" PropertyName="signOutput"/> -->
	<!-- </NugetSigningTask> -->
  </Target>

  <Target Name="PostSign" Condition=" '$(CodeSign)' == 'true' AND '$(AuthenticodeSign)' == 'true'">
    <ValidateStrongNameSignatureTask
		WindowsSdkPath="$(WindowsSdkPath)"
		Assembly="%(DelaySignedAssembliesToValidate.Identity)"
		ExpectedTokenSignature="$(StrongNameToken)"
		ExpectedDelaySigned="false"
		ContinueOnError="false"
		Condition="'$(CodeSign)' == 'true' and '@(DelaySignedAssembliesToValidate)' != ''"/>
  </Target>
  
  <Target Name="SignNugetPackage" Condition=" '$(CodeSign)' == 'true' AND '$(SkipSignNugetPackage)' != 'true' AND '$(SkipNugetSigning)' != 'true' ">
  
  <Message Text="Generating nuget manifest for Nuget Signing....."/>
	<Message Text="SignManifestRootDir - $(SignManifestRootDir)" Condition=" '$(DebugTrace)' == 'true' "/>
	<Message Text="BinariesFolder - $(BinariesFolder)" Condition=" '$(DebugTrace)' == 'true' "/>
	<Message Text="PackageOutputPath - $(PackageOutputPath)" Condition=" '$(DebugTrace)' == 'true' "/>
	<Message Text="CurrentUser $(USERNAME)" Condition=" '$(DebugTrace)' == 'true' "/>
	<Message Text="CodeSign=$(CodeSign), AuthenticodeSign=$(AuthenticodeSign)" Condition=" '$(DebugTrace)' == 'true' "/>
	
	<!-- InSignedFilesRootDirPath="$(PackageOutputPath)"  -->
	<SignNugetTask 
		InSignedFilesRootDirPath="$(BinariesFolder)" 
		InSigningOperation="nuget" 
		InSearchExtensionToSearch=".nupkg" 
		InNugetPackageRootDir="$(PackageOutputPath)" 
		InSignManifestDirPath="$(SignManifestRootDir)"
		InSignBuildName="$(BuildNameLabel)"
		CiToolsRootDir="$(CIToolsPath)" ContinueOnError="ErrorAndStop" >
	</SignNugetTask>
	
  </Target>

  <Target Name="RunSignTargets" DependsOnTargets="PreSign;Sign;PostSign"/>

  <Target Name="BuildMsBuildTask">
    <!---PackagesDirectory $(LibraryToolsFolder)\Microsoft.WindowsAzure.Build.Tasks\packages-->
    <Exec Command="dotnet restore $(LibraryToolsFolder)\Microsoft.WindowsAzure.Build.Tasks\Microsoft.WindowsAzure.Build.Tasks.sln"/>
    <MSBuild Projects="$(LibraryToolsFolder)\Microsoft.WindowsAzure.Build.Tasks\Build.Tasks\Microsoft.WindowsAzure.Build.Tasks.csproj"
				 Targets="Build"
				 Properties="Configuration=Debug;Platform=AnyCPU" />
  </Target>

  <Target Name="BuildCiSign" Condition=" '$(CodeSign)' == 'true' ">
    <ItemGroup>
      <OnPremiseBuildProj Include="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise\*.csproj" />
      <OnPremiseBuildFile Include="$(CIToolsPath)\*Tools.Build.*.dll" />
    </ItemGroup>

    <MSBuild Targets="Restore"
      Projects="@(OnPremiseBuildProj)"
      ContinueOnError="ErrorAndStop" />

    <MSBuild Targets="Build"
         Projects="@(OnPremiseBuildProj)"
         Condition="'$(OnPremiseBuild)' == 'true'"
         ContinueOnError="ErrorAndStop" Properties="" />
    <Error Condition="!Exists('@(OnPremiseBuildFile)')" Text="Unable to Create CI Sign binaries ...." ContinueOnError="false"/>
    <Message Condition="Exists('@(OnPremiseBuildFile)')" Text="Successfully created CI Sign binaries ...."/>
  </Target>

  <Target Name="DisableSN" >
    <!-- Check for admin privs -->
    <Exec Command="net session" IgnoreExitCode="true" StandardErrorImportance="Low">
      <Output PropertyName="isadmin" TaskParameter="ExitCode" />
    </Exec>

    <!-- Disable strong name checking -->
    <Exec Command='"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\sn.exe" -Vr *' Condition="$(isadmin) != 0"/>
    <Exec Command='"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\x64\sn.exe" -Vr *' Condition="$(isadmin) != 0"/>
  </Target>

  <Target Name="EnableSN" >
    <!-- Check for admin privs -->
    <Exec Command="net session" IgnoreExitCode="true" StandardErrorImportance="Low">
      <Output PropertyName="isadmin" TaskParameter="ExitCode" />
    </Exec>

    <!-- Enable strong name checking -->
    <Exec Command='$(WindowsSDK_ExecutablePath_x86)\sn.exe -Vx *' Condition="$(isadmin) != 0"/>
    <Exec Command='$(WindowsSDK_ExecutablePath_x64)\sn.exe -Vx *' Condition="$(isadmin) != 0"/>
  </Target>
  
  <Import Condition=" $(OnPremiseBuild) " Project="$(OnPremiseBuildTasks)\Microsoft.WindowsAzure.Build.OnPremise.msbuild" />
</Project>