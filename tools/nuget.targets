<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <BaselineReleaseNotes>PREVIEW RELEASE</BaselineReleaseNotes>
  </PropertyGroup>
  
  <Import Project="$(LibrarySourceFolder)\$(Scope)\**\*$(PackageName).nuget.proj"
          Condition=" '$(Scope)' != 'all' " />

  <!--TODO: remove when we convert them to be NetCore based-->
  <Import Project="$(LibrarySourceFolder)\Authentication\Common.Authentication\*.nuget.proj"
          Condition=" '$(Scope)' == 'all' "/>
  <Import Project="$(LibrarySourceFolder)\Batch\Client\Src\*.nuget.proj"
          Condition=" '$(Scope)' == 'all' "/>
  <Import Project="$(LibrarySourceFolder)\Batch\FileConventions\Src\AzureBatchFileConventions\*.nuget.proj"
          Condition=" '$(Scope)' == 'all' "/>
  
  <PropertyGroup>
    <NuGetVerbosity>normal</NuGetVerbosity>
  </PropertyGroup>

  <ItemGroup>
    <NuSpecReplacementTokens Include="BASELINE_RELEASE_NOTES">
      <Value>$(BaselineReleaseNotes)</Value>
    </NuSpecReplacementTokens>
  </ItemGroup>
  
  <Target Name="EnsureBinariesFolderExists">
    <MakeDir Directories="binaries" Condition="!Exists('binaries')" />
    <MakeDir Directories="binaries\packages" Condition="!Exists('binaries\packages')" />
    <MakeDir Directories="binaries\packages\specs" Condition="!Exists('binaries\packages\specs')" />
  </Target>
  
  <UsingTask TaskName="RegexReplacementTask" AssemblyFile="$(LibraryToolsFolder)\Microsoft.WindowsAzure.Build.Tasks.dll" />
  <!-- Replacing version token dependency. -->
  <Target Name="BuildDynamicNuSpecs"
          DependsOnTargets="EnsureBinariesFolderExists">
    <!-- First we copy nuspec files to binaries folder -->
    <ItemGroup>
      <NuspecFilesToUpdate Include="%(SdkNuGetPackage.Folder)%(SdkNuGetPackage.Identity).nuspec" />
    </ItemGroup>
	
    <PropertyGroup>
      <PowerShellExe Condition=" '$(PowerShellExe)'=='' ">%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShellExe>   
      <NuSpecSyncScript>$(MSBuildProjectDirectory)\tools\Sync-NuspecDependencies.ps1</NuSpecSyncScript>	  
    </PropertyGroup>
	
    <Error Text="NuGet specification %(NuspecFilesToUpdate.Identity) not found."
           Condition="!Exists(%(NuspecFilesToUpdate.Identity))" />

    <!-- First replace any string tokens, storing the output in the binaries 
         folder instead of doing a destructive replacement. -->
    <RegexReplacementTask Files="@(NuspecFilesToUpdate)"
                          OutputDir="binaries\packages\specs\"
                          Find="__%(NuSpecReplacementTokens.Identity)__"
                          Replace="%(NuSpecReplacementTokens.Value)"
                          LogReplacement="false" />

    <!-- Update all explicit references to dependent versions. -->
    <Exec Command="$(PowerShellExe) -NonInteractive -ExecutionPolicy bypass -Command &quot;&amp; { &amp;&apos;$(NuSpecSyncScript)&apos; &apos;%(NuspecFilesToUpdate.RootDir)%(NuspecFilesToUpdate.Directory)&apos; }&quot;" />

    <!-- Second, use the new files as destructive replacement targets. -->
    <ItemGroup>
      <NuspecFilesToUpdate2 Include="binaries\packages\specs\*.nuspec" />
    </ItemGroup>
    <RegexReplacementTask Files="@(NuspecFilesToUpdate2)"
                          Find="__VERSION_%(SdkNuGetPackage.Identity)__"
                          Replace="%(SdkNuGetPackage.PackageVersion)"
                          LogReplacement="false" />

    <Message Text="Created dynamic nuspec %(NuspecFilesToUpdate2.Identity)" />
  </Target>

  <Target Name="ListPackages">
    <Message Text="%(SdkNuGetPackage.Identity) %(SdkNuGetPackage.PackageVersion) %(SdkNuGetPackage.Folder)" />
  </Target>

  <!--
  Build NuGet packages
  -->
  <Target Name="Package" DependsOnTargets="PrepareForAutoRestLibraries">
    <CallTarget Targets="BuildDynamicNuSpecs" Condition=" @(Non_NetCore_AutoRestLibraries) != '' or @(NonAutoRestLibraries) != ''" />
    
    <Message Text="Generating NuGet library" Importance="high" />
    <Exec Condition=" '%(SdkNuGetPackage.Identity)' != '' "
          Command="$(NuGetCommand) pack -BasePath .\src\ -Verbosity $(NuGetVerbosity) &quot;binaries\packages\specs\%(SdkNuGetPackage.Identity).nuspec&quot; -Version %(SdkNuGetPackage.PackageVersion) -OutputDirectory &quot;$(PackageOutputDir)&quot; -Symbols" />

    <Exec Command="dotnet pack --configuration $(Configuration)" WorkingDirectory="%(NetCore_AutoRestLibraries.Library)" Condition=" @(NetCore_AutoRestLibraries) != '' "/>
    <ItemGroup>
      <_NetCorePackages Include="%(NetCore_AutoRestLibraries.Library)\bin\$(Configuration)\%(NetCore_AutoRestLibraries.PackageName)*.nupkg" />
    </ItemGroup>
    <Copy SourceFiles="@(_NetCorePackages)" DestinationFolder="$(PackageOutputDir)" Condition=" @(NetCore_AutoRestLibraries) != '' " />
    <CallTarget Targets="SignAssembliesInNetCorePackages" Condition=" @(NetCore_AutoRestLibraries) != '' and '$(CodeSign)' == 'true' " />
  </Target>
 
  <Target Name="Publish" DependsOnTargets="PrepareForAutoRestLibraries">
    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />

    <PropertyGroup>
      <ActualSource Condition=" '$(NuGetPublishingSource)' == '' "></ActualSource>
      <ActualSource Condition=" '$(NuGetPublishingSource)' != '' "> -Source $(NuGetPublishingSource)</ActualSource>
    </PropertyGroup>

    <!--Ran 'nuget push' on the main package, will automatically push the symbol package at the same time-->
    <Message Importance="high" Text="Publishing main and symbols packages to the cloud at $(NuGetPublishingSource)" />
    <Exec Command="$(NuGetCommand) push &quot;$(PackageOutputDir)\%(SdkNuGetPackage.Identity).%(SdkNuGetPackage.PackageVersion).nupkg&quot; $(NuGetKey)$(ActualSource)"
          IgnoreExitCode="true"
          Condition=" '%(SdkNuGetPackage.Publish)' != 'false' " />

    <Message Text="Not publishing package %(SdkNuGetPackage.Identity) as Publish is set to 'false' for the component."
             Condition=" '%(SdkNuGetPackage.Publish)' == 'false' " />

    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Properties="NuGetKey=$(NuGetKey);NetCorePackageName=%(NetCore_AutoRestLibraries.PackageName);PackageOutputDir=$(PackageOutputDir)"
             Targets="PublishNetCorePackage" Condition=" %(NetCore_AutoRestLibraries.PackageName) != '' " />
  </Target>

  <Target Name="PublishNetCorePackage">
    <ItemGroup>
      <_NetCorePackagesToPublish Include="$(PackageOutputDir)\$(NetCorePackageName)*.nupkg"
                             Exclude="$(PackageOutputDir)\$(NetCorePackageName)*.symbols.nupkg">
      </_NetCorePackagesToPublish>
    </ItemGroup>

    <PropertyGroup>
      <ActualSource Condition=" '$(NuGetPublishingSource)' == '' "></ActualSource>
      <ActualSource Condition=" '$(NuGetPublishingSource)' != '' "> -Source $(NuGetPublishingSource)</ActualSource>
    </PropertyGroup>
    
    <Exec Command="$(NuGetCommand) push &quot;%(_NetCorePackagesToPublish.Identity)&quot; $(NuGetKey)$(ActualSource)"
          IgnoreExitCode="true" />
  </Target>
  
</Project>