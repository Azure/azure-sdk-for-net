<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="common.tasks"/>
  <Import Project="signing.targets"/>
  <PropertyGroup>
    <NetFx452>net452</NetFx452>
    <NetStd14>netstandard1.4</NetStd14>
  </PropertyGroup>  
  <PropertyGroup>
    <PreBuildStaticAnalysisTargets>
      BuildCiSign;
      BuildMsBuildTask;
      CategorizeProjects;
      GetScopedProjects;
	  <!-- GetProjectReferences; -->
    </PreBuildStaticAnalysisTargets>
  </PropertyGroup>
  <PropertyGroup>
    <PreBuildCategorizePrjectTargets>
      CategorizeProjects;
      GetScopedProjects;
    </PreBuildCategorizePrjectTargets>
  </PropertyGroup>
  <PropertyGroup>
    <BuildTraversedProjectsDependsOn>
      PreBuildStaticAnalysis;
      RestoreLatestProjects;
      BuildLatestProjects;
      PreSign;
    </BuildTraversedProjectsDependsOn>	
	  <RestoreTraversedProjectsDependsOn>
		  RestoreLatestProjects;
	  </RestoreTraversedProjectsDependsOn>
    <CleanTraversedProjectsDependsOn>
      CleanLatestProjects;
      CleanSDKPackageFiles
    </CleanTraversedProjectsDependsOn>
  </PropertyGroup>
  <PropertyGroup>
	<RunTestProjectsDependsOn>
		Test
	</RunTestProjectsDependsOn>
  </PropertyGroup>
  
  <Target Name="CleanLatestProjects" DependsOnTargets="$(PreBuildCategorizePrjectTargets)">
    <PropertyGroup>
      <LatestProjectDefaultCleanTarget Condition=" '$(LatestProjectDefaultCleanTarget)' == '' ">Clean</LatestProjectDefaultCleanTarget>
    </PropertyGroup>
    <Message Text="Cleaning Initiated....." />
    <MSBuild Targets="$(LatestProjectDefaultCleanTarget)"
         Projects="@(SDKProject);@(SDKTestProject)"
             Properties="PackageOutputPath=$(PackageOutputPath)"
         ContinueOnError="ErrorAndStop" />
  </Target>

  <Target Name="CleanSDKPackageFiles">
    <ItemGroup>
      <_SDKPackageFilesToDelete Include="$(PackageOutputPath)\*.nupkg"/>
      <_SDKPackageFilesToDelete Include="$(BaseIntermediateOutputPath)\*.nuspec"/>
    </ItemGroup>
    <Message Text="Cleaning..... @(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " />
    <Delete Files="@(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " ContinueOnError="true"/>
  </Target>

  <Target Name="RestoreLatestProjects">
    <PropertyGroup>
      <LatestProjectDefaultRestoreTarget Condition=" '$(LatestProjectDefaultRestoreTarget)' == '' ">Restore</LatestProjectDefaultRestoreTarget>
    </PropertyGroup>	
	  <Message Text="Now Restoring @(ProjectToBuild)" Condition="$(Scope) == 'All'" />
    <Message Text="Now Restoring @(SDKProject);@(SDKTestProject)" Condition="$(Scope) != 'All'" />	
    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
         Projects="@(ProjectToBuild)"
         ContinueOnError="ErrorAndStop" Condition="$(Scope) == 'All'" />

    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
     Projects="@(SDKProject);@(SDKTestProject)"
     ContinueOnError="ErrorAndStop" Condition="$(Scope) != 'All'" />
  </Target>
  
  <Target Name="BuildLatestProjects">  
    <Message Text="IsBuildingInVS: $(AddProjectReferenceForDebuggingPurpose)"/>
    <Message Text="IsCIBuild: $(AddNugetReferenceForCIandCmdlineBuild)"/>
    <PropertyGroup>
      <LatestProjectDefaultBuildTarget Condition=" '$(LatestProjectDefaultBuildTarget)' == '' ">Build</LatestProjectDefaultBuildTarget>
    </PropertyGroup>
	  
	  <Message Text="Building SDK Projects ..... @(SDKProject)" />    
    <MSBuild Targets="Build"
             Projects="@(SDKProject)"
             Properties="TargetFramework=$(NetFx452);DelaySign=$(DelaySign);AssemblyOriginatorKeyFile=$(AssemblyOriginatorKeyFile);SignAssembly=true"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="net452Assemblies" />
    </MSBuild>

    <MSBuild Targets="Build" 
             Projects="@(SDKProject)" 
             Properties="TargetFramework=$(NetStd14)"
             BuildInParallel="$(BuildInParallel)" 
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="netStd14Assemblies" />
    </MSBuild>
    <ItemGroup>
      <FilesToSign Include="@(net452Assemblies);@(netStd14Assemblies)" />
    </ItemGroup>    
    
    <Message Text="Building SDKTest Projects ....... @(SDKTestProject)" />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
         Projects="@(SDKTestProject)"
         Condition=" '$(SkipBuildingTestProjects)' != 'false' "
         ContinueOnError="ErrorAndStop">
    </MSBuild>         
  </Target>

  <Target Name="Test">
    <Message Text="Executing Tests......"/>
    <ItemGroup>
      <FinalTestsToRun Include="@(SDKTestProject)" />
      <FinalTestsToRun Remove="@(DoNotRunTests)" />
    </ItemGroup>
    
    <Message Text="Final Tests to run.... @(FinalTestsToRun)" />    
    <Exec Command="dotnet test %(FinalTestsToRun.Identity) -l trx;LogFileName=$(LibraryRoot)TestResults\%(FinalTestsToRun.Filename).trx --no-build" Condition="@(FinalTestsToRun) != ''" ContinueOnError="false" WorkingDirectory="%(FinalTestsToRun.RootDir)%(FinalTestsToRun.Directory)" />
  </Target>
  
  <Target Name="Package">
    <Message Text="Packaging..... @(SDKProject)"/>
    <MSBuild
        Projects="@(SDKProject)"
        Targets="Pack"
        Properties="Configuration=$(Configuration);
        VisualStudioVersion=$(VisualStudioVersion); 
        PackageOutputPath=$(PackageOutputPath); 
        NoPackageAnalysis=true; 
        IncludeSymbols=true;
        NoBuild=true;">
      <Output TaskParameter="TargetOutputs" ItemName="SdkNuGetPackages" />
    </MSBuild>

    <Message Text="Built Nugets @(SdkNuGetPackages)"/>
  </Target>

  <Target Name="PublishNuget">
    <Error Condition=" ('$(NugetPackageName)' == '') " Text="Please Provide Package Name that has to be published" />
    <Error Condition=" ('$(NugetPackageName)' == '') AND ('$(Scope)' == '' OR '$(Scope)' == 'all') " Text="Publishing nuget package without specifying scope or packageName has now been disabled" />
    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />
    <PropertyGroup>
      <PublishNugetToDir Condition=" '$(PublishNugetToDir)' == '' ">$(LibraryRoot)PublishedNugets</PublishNugetToDir>
    </PropertyGroup>

    <Message Text="Trying to Create directory $(PublishNugetToDir)" Condition="!Exists($(PublishNugetToDir))" />
    <MakeDir Directories="$(PublishNugetToDir)" Condition="!Exists($(PublishNugetToDir)) AND !$([System.Text.RegularExpressions.Regex]::IsMatch('$(PublishNugetToDir)', '^(?i)http'))" />
    <Message Text="Publishing directory detected $(PublishNugetToDir)" Condition="Exists($(PublishNugetToDir))" />
    <PropertyGroup>
      <PublishDestination Condition=" '$(PublishNugetToDir)' != '' "> -Source $(PublishNugetToDir)</PublishDestination>
    </PropertyGroup>

    <Message Importance="high" Text="Publishing main and symbols packages to the cloud at $(NuGetPublishingSource)" />
    <Exec Command="$(NuGetCommand) push &quot;$(PackageOutputPath)\*$(NugetPackageName)*.nupkg&quot; $(NuGetKey)$(PublishDestination)"
			  IgnoreExitCode="true" />    
			  <!--Condition=" '%(SdkNuGetPackage.Publish)' != 'false' " />-->
  </Target>
  
  <Target Name="CategorizeProjects">
    <Message Text="Categorizing...."/>
    <ItemGroup>
      <ProductProjects Include="%(ProjectToBuild.Identity)" Condition=" '%(ProjectToBuild.ProjectType)' != 'Test' "/>
      <TestProjects Include="%(ProjectToBuild.Identity)" Condition=" '%(ProjectToBuild.ProjectType)' == 'Test' "/>
    </ItemGroup>    
      <ItemGroup Condition=" '$(Scope)' == 'All'">
        <SDKProject Include="@(ProductProjects)" />
        <SDKTestProject Include="@(TestProjects)" />
      </ItemGroup>
    <Message Text="Product...... $(LibrarySourceFolder)\$(Scope)\**\*.csproj" />
    <Message Text="Test.... $(LibrarySourceFolder)\$(Scope)\**\*.Test*.csproj" />    
    <ItemGroup Condition=" '$(Scope)' != 'All'">
      <ScopedProjects Include="$(LibrarySourceFolder)\$(Scope)\**\*.csproj" Exclude="$(LibrarySourceFolder)\$(Scope)\**\*.Test*.csproj" />
      <ScopedTestProjects Include="$(LibrarySourceFolder)\$(Scope)\**\*.Test*.csproj" />
    </ItemGroup>	  
		<Message Text="Categorized SDK Scoped Projects ..... @(ScopedProjects)" Condition=" '$(Scope)' != 'All'" />
	  <Message Text="Categorized Test Scoped Projects ..... @(ScopedTestProjects)" Condition=" '$(Scope)' != 'All'" />
    <Message Text="Categorized SDK Projects ..... @(SDKProject)" Condition=" '$(Scope)' == 'All'" />
    <Message Text="Categorized Test Projects ..... @(SDKTestProject)" Condition=" '$(Scope)' == 'All'" />
  </Target>
  <Target Name="GetScopedProjects" Condition=" '$(Scope)' != 'All'">
    <ItemGroup>
      <SDKProject Include="@(ScopedProjects)" />
      <SDKTestProject Include="@(ScopedTestProjects)" />
    </ItemGroup>
    <Message Text="Scoped SDK Projects ..... @(SDKProject)" Condition=" '$(Scope)' != 'All'" />
    <Message Text="Scoped Test Projects ..... @(SDKTestProject)" Condition=" '$(Scope)' != 'All'" />
  </Target>
  <!--Do not delete-->
  <Target Name="PreBuildStaticAnalysis" DependsOnTargets="$(PreBuildStaticAnalysisTargets)"/>
</Project>
