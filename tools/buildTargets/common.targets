<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="common.tasks"/>
  <Import Project="signing.targets"/>
  <Import Project="additional.targets"/>
  
  <!--<ItemGroup>
	  <TargetFx Include="net452;netstandard1.4" />
	</ItemGroup>-->
  <PropertyGroup>
    <NetFx452>net452</NetFx452>
    <NetStd14>netstandard1.4</NetStd14>
  </PropertyGroup>  
  <PropertyGroup>
    <PreBuildStaticAnalysisTargets>
      BuildCiSign;
      BuildMsBuildTask;
      CPP;
      <!--CategorizeProjects;-->
      <!--GetScopedProjects;-->
      <!-- GetProjectReferences; -->
    </PreBuildStaticAnalysisTargets>
    <PreBuildCategorizePrjectTargets>
      <!--CategorizeProjects;-->
      CPP;
      GetScopedProjects;
    </PreBuildCategorizePrjectTargets>
    <BuildTraversedProjectsDependsOn>
      PreBuildStaticAnalysis;
      RestoreLatestProjects;
      BuildLatestProjects;
      Package;
    </BuildTraversedProjectsDependsOn>	
	  <RestoreTraversedProjectsDependsOn>
      <!--CategorizeProjects;-->
      CPP;
		  RestoreLatestProjects;
	  </RestoreTraversedProjectsDependsOn>
    <CleanTraversedProjectsDependsOn>
      <!--CategorizeProjects;-->
      CPP;
      CleanLatestProjects;
      CleanSDKPackageFiles
    </CleanTraversedProjectsDependsOn>
  </PropertyGroup>
  <PropertyGroup>
	<RunTestProjectsDependsOn>
    PreBuildStaticAnalysis;
    RestoreLatestProjects;
    BuildLatestProjects;
		Test
	</RunTestProjectsDependsOn>
    
    <SignNugetDependsOn>
      PreBuildStaticAnalysis;
      RestoreLatestProjects;
      BuildLatestProjects;
      Test;
      PreSign;
      Package;
    </SignNugetDependsOn>

    <PublishNugetDependsOn>
      PreBuildStaticAnalysis;
      RestoreLatestProjects;
      BuildLatestProjects;
      Test;
      PreSign;
      Package;
      PublishingNuget
    </PublishNugetDependsOn>

    <HelpDependsOn>
      DisplayHelp
    </HelpDependsOn>
    
  </PropertyGroup>
  
  <Target Name="CleanLatestProjects" >
    <PropertyGroup>
      <LatestProjectDefaultCleanTarget Condition=" '$(LatestProjectDefaultCleanTarget)' == '' ">Clean</LatestProjectDefaultCleanTarget>
    </PropertyGroup>
    <Message Text="Cleaning Initiated....." />
    <MSBuild Targets="$(LatestProjectDefaultCleanTarget)"
         Projects="@(SDKProject);@(SDKTestProject)"
             Properties="PackageOutputPath=$(PackageOutputPath)"
         ContinueOnError="ErrorAndStop" />
  </Target>

  <Target Name="CleanSDKPackageFiles">
    <ItemGroup>
      <_SDKPackageFilesToDelete Include="$(PackageOutputPath)\*.nupkg"/>
      <_SDKPackageFilesToDelete Include="$(BaseIntermediateOutputPath)\*.nuspec"/>
    </ItemGroup>
    <Message Text="Cleaning..... @(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " />
    <Delete Files="@(_SDKPackageFilesToDelete)" Condition=" '@(_SDKPackageFilesToDelete)' != '' " ContinueOnError="true"/>
  </Target>

  <Target Name="RestoreLatestProjects">
    <PropertyGroup>
      <LatestProjectDefaultRestoreTarget Condition=" '$(LatestProjectDefaultRestoreTarget)' == '' ">Restore</LatestProjectDefaultRestoreTarget>
    </PropertyGroup>	
	  <Message Text="Now Restoring @(SDKProject);@(SDKTestProject);@(Net452SdkProj);@(Net452TestSdkProj)" />

    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
         Projects="@(SDKProject);@(SDKTestProject);@(Net452SdkProj);@(Net452TestSdkProj)"
         ContinueOnError="ErrorAndStop" />
         
<!--
    <MSBuild Targets="$(LatestProjectDefaultRestoreTarget)"
     Projects="@(SDKProject);@(SDKTestProject)"
     ContinueOnError="ErrorAndStop" Condition="$(Scope) != 'All'" />
     -->
  </Target>
  
  <Target Name="BuildLatestProjects">  
    <Message Text="IsBuildingInVS: $(AddProjectReferenceForDebuggingPurpose)"/>
    <Message Text="IsCIBuild: $(AddNugetReferenceForCIandCmdlineBuild)"/>
    <Message Text="RuntimeIdentifier: $(RuntimeIdentifier)"/>
    <Message Text="MSBuildRuntimeType: $(MSBuildRuntimeType)"/>
    <PropertyGroup>
      <LatestProjectDefaultBuildTarget Condition=" '$(LatestProjectDefaultBuildTarget)' == '' ">Build</LatestProjectDefaultBuildTarget>
    </PropertyGroup>
    
    <!--
          <SDKProject Include="@(SDKProj)"/>
      <SDKTestProject Include="@(TestSDKProj)"/>
      <Net452SDKProj Include="@(Net452SdkProj)"/>
      <TestNet452SDKProj Include="@(Net452TestSdkProj)"/>
    -->
 <Message Text="Building SDK Projects ..... @(SDKProject)" />
    
    <MSBuild Targets="Build"
             Projects="@(SDKProject)"
             Properties="TargetFramework=$(NetFx452)"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="net452Assemblies" />
    </MSBuild>

    <Message Text="Building SDK Projects ..... @(SDKProject)" />
     <MSBuild Targets="Build"  
              Projects="@(SDKProject)"  
              Properties="TargetFramework=$(NetStd14)" 
              BuildInParallel="$(BuildInParallel)"  
              ContinueOnError="ErrorAndStop"> 
       <Output TaskParameter="TargetOutputs" ItemName="netStd14Assemblies" /> 
     </MSBuild> 
    
	
      <Message Text="Building Non-Multi Targeted projects ..... @(Net452SDKProj)"/>
      <MSBuild Targets="Build"  
              Projects="@(Net452SDKProj)"
              BuildInParallel="$(BuildInParallel)"
              ContinueOnError="ErrorAndStop"
              Condition=" '$(MSBuildRuntimeType)' != 'Core' and $(RuntimeIdentifier.StartsWith('win'))"> 
       <Output TaskParameter="TargetOutputs" ItemName="Net452SDKAssemblies" /> 
     </MSBuild>
	
    
    <ItemGroup>
      <FilesToSign Include="@(net452Assemblies);@(netStd14Assemblies);@(Net452SDKAssemblies)" />
    </ItemGroup>
    
    <Message Text="Building SDKTest Projects ....... %(SDKTestProject.Identity)" />
    
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
         Projects="@(SDKTestProject)"
         Condition=" '$(SkipBuildingTestProjects)' != 'false' "
         ContinueOnError="ErrorAndStop">
    </MSBuild>

    <Message Text="Building net452Test Projects ....... %(TestNet452SDKProj.Identity)" 
          Condition=" $(MSBuildRuntimeType)' != 'Core' and $(RuntimeIdentifier.StartsWith('win')) " />
    <MSBuild Targets="$(LatestProjectDefaultBuildTarget)"
     Projects="@(TestNet452SDKProj)"
     Condition=" ('$(SkipBuildingTestProjects)' != 'false') and ('$(MSBuildRuntimeType)' != 'Core' and $(RuntimeIdentifier.StartsWith('win')))"
     ContinueOnError="ErrorAndStop">
    </MSBuild>
    <!--Projects="@(SDKTestProject);@(TestNet452SDKProj)" -->
  </Target>
  
  <Target Name="Test">
    <Message Text="Executing Tests......"/>
      
    <ItemGroup>
      <FinalTestsToRun Include="@(SDKTestProject)" />
      <FinalTestsToRun Remove="@(DoNotRunTests)" />
    </ItemGroup>
    
    <Message Text="Final Tests to run.... @(FinalTestsToRun)" />    
    <Exec Command="dotnet test %(FinalTestsToRun.Identity) -l trx;LogFileName=$(LibraryRoot)TestResults\%(FinalTestsToRun.Filename).trx " Condition="@(FinalTestsToRun) != ''" ContinueOnError="false" WorkingDirectory="%(FinalTestsToRun.RootDir)%(FinalTestsToRun.Directory)" />
  </Target>
  
  <Target Name="Package">
    <Message Text="Packaging..... @(SDKProject);@(UniTargetSDKProject)"/>
    <ItemGroup>
      <ProjectsToPackage Include="@(SDKProject);@(UniTargetSDKProject)"/>
    </ItemGroup>
    <MSBuild
        Projects="@(SDKProject)"
        Targets="Pack"
        Properties="Configuration=$(Configuration);
        VisualStudioVersion=$(VisualStudioVersion); 
        PackageOutputPath=$(PackageOutputPath); 
        NoPackageAnalysis=true; 
        IncludeSymbols=true;
        NoBuild=true;">
      <Output TaskParameter="TargetOutputs" ItemName="SdkNuGetPackages" />
    </MSBuild>

    <Message Text="Built Nugets @(SdkNuGetPackages)"/>
  </Target>

  <Target Name="PublishingNuget">
    <Error Condition=" ('$(NugetPackageName)' == '') " Text="Please Provide Package Name that has to be published /p:NugetPackagename=[packagename]" />
    <Error Condition=" ('$(NugetPackageName)' == '') AND ('$(Scope)' == '' OR '$(Scope)' == 'all') " Text="Publishing nuget package without specifying scope or packageName has now been disabled" />
    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />
    <PropertyGroup>
      <PublishNugetToDir Condition=" '$(PublishNugetToDir)' == '' ">$(LibraryRoot)PublishedNugets</PublishNugetToDir>
    </PropertyGroup>

    <Message Text="Trying to Create directory $(PublishNugetToDir)" Condition="!Exists($(PublishNugetToDir))" />
    <MakeDir Directories="$(PublishNugetToDir)" Condition="!Exists($(PublishNugetToDir)) AND !$([System.Text.RegularExpressions.Regex]::IsMatch('$(PublishNugetToDir)', '^(?i)http'))" />
    <Message Text="Publishing directory detected $(PublishNugetToDir)" Condition="Exists($(PublishNugetToDir))" />
    <PropertyGroup>
      <PublishDestination Condition=" '$(PublishNugetToDir)' != '' "> -Source $(PublishNugetToDir)</PublishDestination>
    </PropertyGroup>

    <Message Importance="high" Text="Publishing main and symbols packages to the cloud at $(NuGetPublishingSource)" />
    <Exec Command="$(NuGetCommand) push &quot;$(PackageOutputPath)\*$(NugetPackageName)*.nupkg&quot; $(NuGetKey)$(PublishDestination)"
			  IgnoreExitCode="true" />    
			  <!--Condition=" '%(SdkNuGetPackage.Publish)' != 'false' " />-->
  </Target>
  
  <Target Name="CategorizeProjects">
    <Message Text="Categorizing...."/>
    <ItemGroup>
      <ProductProjects Include="%(ProjectToBuild.Identity)" Condition=" '%(ProjectToBuild.ProjectType)' != 'Test' and '%(ProjectToBuild.ExcludeFromBuild)' != 'true' "/>      
      <TestProjects Include="%(ProjectToBuild.Identity)" Condition=" ('%(ProjectToBuild.ProjectType)' == 'Test' and '%(ProjectToBuild.ExcludeFromBuild)' != 'true') "/>
    </ItemGroup>    
      <ItemGroup Condition=" '$(Scope)' == 'All'">
        <SDKProject Include="@(ProductProjects)" />
        <SDKTestProject Include="@(TestProjects)" />
      </ItemGroup>
	<ItemGroup>
		<KVSamples Include="$(LibrarySourceFolder)\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\**\*.*csproj"/>
	</ItemGroup>
    
    <ItemGroup Condition=" '$(Scope)' != 'All'">
      <ScopedProjects Include="$(LibrarySourceFolder)\$(Scope)\**\*.csproj" Exclude="$(LibrarySourceFolder)\$(Scope)\*Tests*\*.Test*.csproj" />	    
      <ScopedTestProjects Include="$(LibrarySourceFolder)\$(Scope)\*Test*\*.Test*.csproj" />
    </ItemGroup>
    <ItemGroup Condition=" '$(Scope)' != 'All'">
      <SDKProject Include="%(ScopedProjects.Identity)" />
      <SDKTestProject Include="%(ScopedTestProjects.Identity)" />
    </ItemGroup>

		<Message Text="Categorized SDK Scoped Projects ..... @(ScopedProjects)" Condition=" '$(Scope)' != 'All'" />
	  <Message Text="Categorized Test Scoped Projects ..... @(ScopedTestProjects)" Condition=" '$(Scope)' != 'All'" />
    <Message Text="Categorized SDK Projects ..... @(SDKProject)" Condition=" '$(Scope)' == 'All'" />
    <Message Text="Categorized Test Projects ..... @(SDKTestProject)" Condition=" '$(Scope)' == 'All'" />
    <Message Text="SDKProjects ....... @(SDKProject->Count())"/>
    <Message Text="TestSDKProjects ....... @(SDKTestProject->Count())"/>
    
    <!--
    <ScopedProjects Remove="@(KVSamples)"/>
    -->
    
  </Target>
  
  <Target Name="FilterUniTargetProjects">
    <ItemGroup>
      <SDKProject Remove="@(UniTargetSDKProject)"/>
    </ItemGroup>
  </Target>
    
  <Target Name="DisplayHelp">
    <Message Text="msbuild build.proj /t:Build"/>
    <Message Text="---- will build and create nuget pacakge for the entire repo"/>
  
    <Message Text="msbuild build.proj /t:Build /p:Scope=SDKs\Compute" />
    <Message Text="---- will build Microsoft.Azure.Management.Compute and Compute.Tests project and create nuget pacakge for Compute"/>
  
  <Message Text="msbuild build.proj /t:RunTests" />
  <Message Text="----- will Build and Run tests for the entire repo" />
  
  <Message Text="msbuild build.proj /t:RunTests /p:Scope=SDKs\Compute" />
  <Message Text="----- will Build Compute nuget package and run compute test" />
  </Target>
    
  <Target Name="GetScopedProjects" Condition=" '$(Scope)' != 'All'">
    <ItemGroup>
      <SDKProject Include="@(ScopedProjects)" />
      <SDKTestProject Include="@(ScopedTestProjects)" />
    </ItemGroup>
    <Message Text="Scoped SDK Projects ..... @(SDKProject)" Condition=" '$(Scope)' != 'All'" />
    <Message Text="Scoped Test Projects ..... @(SDKTestProject)" Condition=" '$(Scope)' != 'All'" />
  </Target>

  <Target Name="CPP">
    <!--<Message Text="Ignored Project Tokens ...... $(DefaultPathTokenToIgnore)"/>-->
    <Message Text="Categorizing Projects....."/>
    <SDKCategorizeProjects
      SourceRootDirPath="$(LibrarySourceFolder)"
      BuildScope="$(Scope)"
      IgnoreDirNameForSearchingProjects="$(DefaultPathTokenToIgnore)"
      >
      <Output TaskParameter="SDKProjectsToBuild" ItemName="SDKProj" />
      <Output TaskParameter="SDKTestProjectsToBuild" ItemName="TestSDKProj" />
      <Output TaskParameter="WellKnowSDKNet452Projects" ItemName="Net452SdkProj" />
      <Output TaskParameter="WellKnowTestSDKNet452Projects" ItemName="Net452TestSdkProj" />
    </SDKCategorizeProjects>

    <Message Text="SDKProjects ....... @(SDKProj->Count())"/>
    <Message Text="TestSDKProjects ....... @(TestSDKProj->Count())"/>

    <Message Text="Net45SDK ....... @(Net452SdkProj->Count())"/>
    <Message Text="Net45TestSDK ....... @(Net452TestSdkProj->Count())"/>

    <Message Text="SDKProjects...... %(SDKProj.Identity)"/>
    <Message Text="Test SDKProjects.... %(TestSDKProj.Identity)"/>

    <ItemGroup>
      <SDKProject Include="@(SDKProj)"/>
      <SDKTestProject Include="@(TestSDKProj)"/>
      <Net452SDKProj Include="@(Net452SdkProj)"/>
      <TestNet452SDKProj Include="@(Net452TestSdkProj)"/>
    
    </ItemGroup>
    
  </Target>
  <!--Do not delete-->
  <Target Name="PreBuildStaticAnalysis" DependsOnTargets="$(PreBuildStaticAnalysisTargets)"/>
</Project>

<!--
<SDKProject Include="%(ScopedProjects.Identity)" Condition=" '%(ScopedProjects.ProjectType)' != 'Test' and '%(ScopedProjects.ExcludeFromBuild)' != 'true' "/>
      <ScopedTestProjects Include="%(ScopedTestProjects.Identity)" Condition=" ('%(ScopedTestProjects.ProjectType)' == 'Test' and '%(ScopedTestProjects.ExcludeFromBuild)' != 'true') "/>
  -->