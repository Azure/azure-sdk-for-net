<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
  <Import Project="$(MSBuildExtensionsPath)\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets"/>
  <Import Condition=" $(OnPremiseBuild) " Project="$(CIToolsPath)\Microsoft.WindowsAzure.Build.OnPremise.msbuild" />
  <Import Project="$(MSBuildExtensionsPath)\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets" />
  <Import Project="$(MSBuildExtensionsPath)\Sdks\NuGet.Build.Tasks.Pack\build\NuGet.Build.Tasks.Pack.targets" />
  -->
  <Target Name="PreBuildStaticAnalysis" DependsOnTargets="$(PreBuildStaticAnalysisTargets)">
    <!--
    <MSBuild Targets="GetPackageReferences"
            Projects="@(ProjectToBuild)"
            ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="OtherProjectReferences" />
    </MSBuild>
    
    <MSBuild Targets="GetOutputPath"
            Projects="@(SDKProject)"
            ContinueOnError="ErrorAndStop">
      <Output TaskParameter="TargetOutputs" ItemName="OutPutFilesToSign" />
    </MSBuild>
  
    <ItemGroup>
      <FilesToSign Include="@(OutPutFilesToSign)"/>
    </ItemGroup>
    
    <Message Text="@(OutPutFilesToSign)" />
    <Message Text="@(OtherProjectReferences)" />
    -->
    <!--<Error Condition=" '@(OtherProjectReferences)' != '' " Text="Contains Project References, build cannot continue. Please remove all Project references from CI builds" />-->


    <!--
    <Properties="GeneratePackageOnBuild=true;IncludeSymbols=true">
    $(MSBuildProjectDefaultTargets)
    -->
  </Target>

  <Target Name="GetPackageReferences" Returns="@(ProjectReference)" />
  <Target Name="GetOutputPath" Returns="$(OutputPath)\$(AssemblyName).dll" />


  <Target Name="PrintStuff">
    <Message Text="ProgFiles .... $(ProgramFiles)" />
    <Message Text="$(MSBuildExtensionsPath)" />
    <!--
    <Message Text="%(VsIDENugetPackageReference.Identity) and %(VsIDENugetPackageReference.Version) "/>
    <Message Text="%(VsIDEProjectReference.Identity) "/>
-->

  </Target>

  <Target Name="Foo">
    <Message Text="%(SDKProject.Identity)" />

    <Message Text="%(SDKProject.Identity)" />
    <Message Text="%(SDKProject.RootDir)%(SDKProject.Directory)::TrimEnd('\')" />
  </Target>

  <!--
  <Target Name="_SplitProjectReferencesByFileExistence">
	
</Target>
-->
	
  <Target Name="Publi" DependsOnTargets="PrepareForAutoRestLibraries">
    <Error Condition=" ('$(PackageName)' == '') AND ('$(Scope)' == '' OR '$(Scope)' == 'all') " Text="Publishing nuget package without specifying scope or packageName has now been disabled" />
    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />
    <Message Text="Trying to Create directory $(NuGetPublishingSource)" Condition="!Exists($(NuGetPublishingSource))" />
    <MakeDir Directories="$(NuGetPublishingSource)" Condition="!Exists($(NuGetPublishingSource)) AND !$([System.Text.RegularExpressions.Regex]::IsMatch('$(NuGetPublishingSource)', '^(?i)http'))" />
    <Message Text="Publishing directory detected $(NuGetPublishingSource)" Condition="Exists($(NuGetPublishingSource))" />
    <PropertyGroup>
      <ActualSource Condition=" '$(NuGetPublishingSource)' == '' "></ActualSource>
      <ActualSource Condition=" '$(NuGetPublishingSource)' != '' "> -Source $(NuGetPublishingSource)</ActualSource>
    </PropertyGroup>

    <!--Ran 'nuget push' on the main package, will automatically push the symbol package at the same time-->
    <Message Importance="high" Text="Publishing main and symbols packages to the cloud at $(NuGetPublishingSource)" />
    <Exec Command="$(NuGetCommand) push &quot;$(PackageOutputDir)\%(SdkNuGetPackage.Identity).%(SdkNuGetPackage.PackageVersion).nupkg&quot; $(NuGetKey)$(ActualSource)"
			  IgnoreExitCode="true"
			  Condition=" '%(SdkNuGetPackage.Publish)' != 'false' " />

    <Message Text="Not publishing package %(SdkNuGetPackage.Identity) as Publish is set to 'false' for the component."
				 Condition=" '%(SdkNuGetPackage.Publish)' == 'false' " />

    <MSBuild Projects="$(MSBuildProjectFullPath)"
				 Properties="NuGetKey=$(NuGetKey);NetCorePackageName=%(NetCore_AutoRestLibraries.PackageName);PackageOutputDir=$(PackageOutputDir)"
				 Targets="PublishNetCorePackage" Condition=" %(NetCore_AutoRestLibraries.PackageName) != '' " />
  </Target>

</Project>