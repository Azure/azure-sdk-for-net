<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="RunPublishTest" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask TaskName="DebugTask" AssemblyFile="$(LibraryToolsFolder)\Microsoft.WindowsAzure.Build.Tasks.dll"  />
	<PropertyGroup>
		<LibrarySourceFolder Condition="'$(PublishTestProjects)' == 'true'">$(LibraryToolsFolder)\Microsoft.WindowsAzure.Build.Tasks\Build.Tasks.Tests\TestPublishProjects</LibrarySourceFolder>
		<LibraryNugetPackageFolder>$(LibraryRoot)\packages</LibraryNugetPackageFolder>
		<FxTargetList>portable;net40;net45</FxTargetList>
		<NuGetPublishingSource Condition="'$(NuGetPublishingSource)' == ''">$(LibraryRoot)\testPackages\nugetPublish</NuGetPublishingSource>
		<NuGetKey>1234</NuGetKey>
	</PropertyGroup>
	<PropertyGroup>
		<TestInit>
			CommonInit;
			prepareforautorestlibraries;
			BuildTestPackages;
			Package;
			Publish
		</TestInit>
	</PropertyGroup>
	<ItemGroup>
		<LibrariesToBuild Include="$(LibrarySourceFolder)\$(Scope)\**\*.sln" Condition=" '$(Scope)' != 'All' Or '$(Scope)' == '' " />
		<LibrariesToBuild Include="$(LibrarySourceFolder)\**\*.sln" Condition=" '$(Scope)' == 'All' Or '$(Scope)' == '' " />		
		<LibraryFxTargetList Include="$(FxTargetList)" />
		<AutoRestLibraryFxTargetList Include="portable;net45" />	
	</ItemGroup>
	
	<Target Name="CommonInit" >
		<Message Text="Executing 'CommonInit'" />
		<Message Text="Trying to Create directory $(NuGetPublishingSource)" Condition="!Exists($(NuGetPublishingSource))" />
		<MakeDir Directories="$(NuGetPublishingSource)" Condition="!Exists($(NuGetPublishingSource))" />
		<Message Text="Test Publishing directory detected $(NuGetPublishingSource)" Condition="Exists($(NuGetPublishingSource))" />
		<Error Text="Directory creation failed for '$(NuGetPublishingSource)'" Condition="!Exists($(NuGetPublishingSource))" />
	</Target>	
	<Target  Name="BuildTestPackages">
		<Message Text="Non-NetCore Test Packages Libs to be built:  @(Non_NetCore_AutoRestLibraries)" />
		<MSBuild Projects="@(Non_NetCore_AutoRestLibraries)"             
				 Targets="Build" />

		<Message Text="NetCore Test Packages Libs to be built:  @(Non_NetCore_AutoRestLibraries)" />
		<Exec Command="dotnet restore" WorkingDirectory="%(NetCore_AutoRestLibraries.Library)" Condition=" @(NetCore_AutoRestLibraries) != '' "/>
		<Exec Command="dotnet build --configuration $(Configuration)" WorkingDirectory="%(NetCore_AutoRestLibraries.Library)" Condition=" '%(NetCore_AutoRestLibraries.Library)'!= '' "/>

		<Message Text="Building packages completed. Publishing not done" />
  </Target>

  	<Target Name="OnePackageInit">	
		<Message Text="Executing 'OnePackageInit'" />
		<PropertyGroup>
		  <Scope>MultiProjectMultiSln</Scope>
		  <PackageName>CSProjTestPublish</PackageName>
		</PropertyGroup>
		<ItemGroup>
			<LibrariesToBuild Remove="@(LibrariesToBuild)" Condition=" '@(LibrariesToBuild)' != '' " />
			<LibrariesToBuild Include="$(LibrarySourceFolder)\$(Scope)\**\*.sln" />
		</ItemGroup>
		<Message Text="Scope: '$(Scope)', PackageName: '$(PackageName)'"/>
		<Error Text="No Project found to be built." Condition=" '@(LibrariesToBuild)' == '' " />
	</Target>
	<Target Name="AllPackageInit">
		<Message Text="Executing 'AllPackageInit'" />
		<PropertyGroup>
		  <Scope>MultiProjectSingleSln</Scope>
		  <!-- <PackageName>Sdk RP1_MgmtPlane RP2_SDK.Test</PackageName> -->
		</PropertyGroup>
		<ItemGroup>
			<LibrariesToBuild Remove="@(LibrariesToBuild)" Condition=" '@(LibrariesToBuild)' != '' " />
			<LibrariesToBuild Include="$(LibrarySourceFolder)\$(Scope)\**\*.sln" />
		</ItemGroup>
		<Error Text="No Project found to be built." Condition=" '@(LibrariesToBuild)' == '' " />
	</Target>	
	<Target Name="MultiSelectedPackagesInit">
		<Message Text="Executing 'MultiSelectedPackagesInit'" />
		<ItemGroup>
			<LibrariesToBuild Remove="@(LibrariesToBuild)" Condition=" '@(LibrariesToBuild)' != '' " />
			<LibrariesToBuild Include="$(LibrarySourceFolder)\$(Scope)\**\*.sln" />
		</ItemGroup>
		<Error Text="No Project found to be built." Condition=" '@(LibrariesToBuild)' == '' " />
	</Target>
	<Target Name="OnePackageNoScopeInit">	
		<Message Text="Executing 'OnePackageNoScopeInit'" />
		<PropertyGroup>
		  <Scope/>
		  <PackageName Condition=" '$(PackageName)' == '' ">RP1_MgmtPlane</PackageName>
		</PropertyGroup>
		<Message Text="Scope: '$(Scope)', PackageName: '$(PackageName)'"/>
		<Error Text="No Project found to be built." Condition=" '@(LibrariesToBuild)' == '' " />
		<DebugTask />
	</Target>
	<Target Name="RandomMultiPackageNoScopeInit">	
		<Message Text="Executing 'RandomMultiPackageNoScopeInit'" />
		<PropertyGroup>
		  <Scope/>
		  <PackageName Condition=" '$(PackageName)' == '' ">RP1_MgmtPlane NetCoreTestPublish</PackageName>
		</PropertyGroup>
		<Message Text="Scope: '$(Scope)', PackageName: '$(PackageName)'"/>
		<Error Text="No Project found to be built." Condition=" '@(LibrariesToBuild)' == '' " />
	</Target>
	<Target Name="ScopePriorityOverPackageNameInit">	
		<Message Text="Executing 'ScopePriorityOverPackageNameInit'" />
		<PropertyGroup>
		  <Scope Condition=" '$(Scope)' == '' ">MultiProjectSingleSln</Scope>
		  <PackageName Condition=" '$(PackageName)' == '' ">RP1_MgmtPlane NetCoreTestPublish</PackageName>
		</PropertyGroup>
		<Message Text="Scope: '$(Scope)', PackageName: '$(PackageName)'"/>
		<Error Text="No Project found to be built." Condition=" '@(LibrariesToBuild)' == '' " />
	</Target>
	
  <!-- TEST CASES -->
  
  <!-- Job commandline args
  /t:Clean;Build;Package;Publish /p:CodeSign=true;Configuration=Release /p:NuGetKey=<key> 
  /p:NuGetPublishingSource=https://www.nuget.org/api/v2/package/ /fl /flp:logfile=build.out;verbosity=normal 
  /p:Scope=$Scope /p:PackageName="$PackageName" /p:PublishTestProjects=true
  -->
  <!-- Use Case:
		msbuild build.proj /p:PublishTestProjects=true /t:Publish_MultipleSelectedPackage /p:Scope=MultiProjectSingleSln /p:PackageName="Sdk RP1_MgmtPlane"
    msbuild build.proj /t:Build;Package;Publish /p:PublishTestProjects=true /p:Scope=MultiProjectSingleSln /p:PackageName="Sdk RP1_MgmtPlane"
	-->
	<Target Name="Publish_MultipleSelectedPackage" DependsOnTargets="MultiSelectedPackagesInit;$(TestInit)">
		<Message Text="'Publish_MultipleSelectedPackage' completed"/>
	</Target>
	
	<!-- Use Case:
		msbuild build.proj /p:PublishTestProjects=true /t:Publish_AllPackage
	-->
	<Target Name="Publish_AllPackage" DependsOnTargets="AllPackageInit;$(TestInit)">
		<Message Text="'Publish_MultiplePackage' completed"/>
	</Target>

	<!-- Use Case: You have to provide scope here, the way msbuild builds it's build graph for imports
		and the way we have authored our DynamicNuSpec targets
		msbuild build.proj /p:PublishTestProjects=true /t:Publish_OnePackage /p:Scope=MultiProjectMultiSln
	-->
	<Target Name="Publish_OnePackage" DependsOnTargets="OnePackageInit;$(TestInit)">
		<Message Text="'Publish_OnePackage' succeeded" Condition="Exists('$(NuGetPublishingSource)\CSProjTestPublish.0.0.1.nupkg')" />
		<Error Text="'Publish_OnePackage' failed" Condition="!Exists('$(NuGetPublishingSource)\CSProjTestPublish.0.0.1.nupkg')" />
	</Target>
  
	<!-- Use Case: You have to provide scope here, the way msbuild builds it's build graph for imports
		and the way we have authored our DynamicNuSpec targets
		msbuild build.proj /p:PublishTestProjects=true /t:Publish_OnePackageNoScope /p:PackageName=RP1_DataPlane
	-->
	<Target Name="Publish_OnePackageNoScope" DependsOnTargets="OnePackageNoScopeInit;$(TestInit)">
		<Message Text="'Publish_OnePackageNoScope' succeeded" Condition="Exists('$(NuGetPublishingSource)\RP1_DataPlane.1.0.0.nupkg')" />
		<Error Text="'Publish_OnePackageNoScope' failed" Condition="!Exists('$(NuGetPublishingSource)\RP1_DataPlane.1.0.0.nupkg')" />
	</Target>
	
	<!-- Use Case: You have to provide scope here, the way msbuild builds it's build graph for imports
		and the way we have authored our DynamicNuSpec targets
		msbuild build.proj /p:PublishTestProjects=true /t:Publish_RandomMultiPackageNoScope
	-->
	<Target Name="Publish_RandomMultiPackageNoScope" DependsOnTargets="RandomMultiPackageNoScopeInit;$(TestInit)">
		<Message Text="'Publish_RandomMultiPackageNoScope' succeeded" Condition="Exists('$(NuGetPublishingSource)\RP1_MgmtPlane.1.0.0.nupkg')" />
		<Error Text="'Publish_RandomMultiPackageNoScope' failed" Condition="!Exists('$(NuGetPublishingSource)\RP1_MgmtPlane.1.0.0.nupkg')" />
	</Target>
	
	<!-- Use Case: You have to provide scope here, the way msbuild builds it's build graph for imports
		and the way we have authored our DynamicNuSpec targets
		msbuild build.proj /p:PublishTestProjects=true /p:Scope=MultiProjectSingleSln /t:Publish_ScopePriorityOverPackageName /p:PackageName="RP1_MgmtPlane NetCoreTestPublish"
	-->
	<Target Name="Publish_ScopePriorityOverPackageName" DependsOnTargets="ScopePriorityOverPackageNameInit;$(TestInit)">
		<Message Text="'Publish_ScopePriorityOverPackageName' succeeded" Condition="Exists('$(NuGetPublishingSource)\RP1_MgmtPlane.1.0.0.nupkg')" />
		<Error Text="'Publish_ScopePriorityOverPackageName' failed" Condition="!Exists('$(NuGetPublishingSource)\RP1_MgmtPlane.1.0.0.nupkg')" />
	</Target>
	
  <!-- END OF TEST CASES -->
  </Project>