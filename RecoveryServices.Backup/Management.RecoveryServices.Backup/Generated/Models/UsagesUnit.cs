// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for UsagesUnit.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(UsagesUnitConverter))]
    public struct UsagesUnit : System.IEquatable<UsagesUnit>
    {
        private UsagesUnit(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly UsagesUnit Count = "Count";

        public static readonly UsagesUnit Bytes = "Bytes";

        public static readonly UsagesUnit Seconds = "Seconds";

        public static readonly UsagesUnit Percent = "Percent";

        public static readonly UsagesUnit CountPerSecond = "CountPerSecond";

        public static readonly UsagesUnit BytesPerSecond = "BytesPerSecond";


        /// <summary>
        /// Underlying value of enum UsagesUnit
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for UsagesUnit
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type UsagesUnit
        /// </summary>
        public bool Equals(UsagesUnit e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to UsagesUnit
        /// </summary>
        public static implicit operator UsagesUnit(string value)
        {
            return new UsagesUnit(value);
        }

        /// <summary>
        /// Implicit operator to convert UsagesUnit to string
        /// </summary>
        public static implicit operator string(UsagesUnit e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum UsagesUnit
        /// </summary>
        public static bool operator == (UsagesUnit e1, UsagesUnit e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum UsagesUnit
        /// </summary>
        public static bool operator != (UsagesUnit e1, UsagesUnit e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for UsagesUnit
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is UsagesUnit && Equals((UsagesUnit)obj);
        }

        /// <summary>
        /// Returns for hashCode UsagesUnit
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
