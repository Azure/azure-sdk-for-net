// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for WorkloadItemType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(WorkloadItemTypeConverter))]
    public struct WorkloadItemType : System.IEquatable<WorkloadItemType>
    {
        private WorkloadItemType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly WorkloadItemType Invalid = "Invalid";

        public static readonly WorkloadItemType SQLInstance = "SQLInstance";

        public static readonly WorkloadItemType SQLDataBase = "SQLDataBase";

        public static readonly WorkloadItemType SAPHanaSystem = "SAPHanaSystem";

        public static readonly WorkloadItemType SAPHanaDatabase = "SAPHanaDatabase";


        /// <summary>
        /// Underlying value of enum WorkloadItemType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for WorkloadItemType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type WorkloadItemType
        /// </summary>
        public bool Equals(WorkloadItemType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to WorkloadItemType
        /// </summary>
        public static implicit operator WorkloadItemType(string value)
        {
            return new WorkloadItemType(value);
        }

        /// <summary>
        /// Implicit operator to convert WorkloadItemType to string
        /// </summary>
        public static implicit operator string(WorkloadItemType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum WorkloadItemType
        /// </summary>
        public static bool operator == (WorkloadItemType e1, WorkloadItemType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum WorkloadItemType
        /// </summary>
        public static bool operator != (WorkloadItemType e1, WorkloadItemType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for WorkloadItemType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is WorkloadItemType && Equals((WorkloadItemType)obj);
        }

        /// <summary>
        /// Returns for hashCode WorkloadItemType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
