// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// .
    /// </summary>
    public partial class ClientEncryptionIncludedPath
    {
        /// <summary>
        /// Initializes a new instance of the ClientEncryptionIncludedPath
        /// class.
        /// </summary>
        public ClientEncryptionIncludedPath()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClientEncryptionIncludedPath
        /// class.
        /// </summary>
        /// <param name="path">Path that needs to be encrypted.</param>
        /// <param name="clientEncryptionKeyId">The identifier of the Client
        /// Encryption Key to be used to encrypt the path.</param>
        /// <param name="encryptionType">The type of encryption to be
        /// performed. Eg - Deterministic, Randomized.</param>
        /// <param name="encryptionAlgorithm">The encryption algorithm which
        /// will be used. Eg - AEAD_AES_256_CBC_HMAC_SHA256.</param>
        public ClientEncryptionIncludedPath(string path, string clientEncryptionKeyId, string encryptionType, string encryptionAlgorithm)
        {
            Path = path;
            ClientEncryptionKeyId = clientEncryptionKeyId;
            EncryptionType = encryptionType;
            EncryptionAlgorithm = encryptionAlgorithm;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets path that needs to be encrypted.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the Client Encryption Key to be used
        /// to encrypt the path.
        /// </summary>
        [JsonProperty(PropertyName = "clientEncryptionKeyId")]
        public string ClientEncryptionKeyId { get; set; }

        /// <summary>
        /// Gets or sets the type of encryption to be performed. Eg -
        /// Deterministic, Randomized.
        /// </summary>
        [JsonProperty(PropertyName = "encryptionType")]
        public string EncryptionType { get; set; }

        /// <summary>
        /// Gets or sets the encryption algorithm which will be used. Eg -
        /// AEAD_AES_256_CBC_HMAC_SHA256.
        /// </summary>
        [JsonProperty(PropertyName = "encryptionAlgorithm")]
        public string EncryptionAlgorithm { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
            if (ClientEncryptionKeyId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientEncryptionKeyId");
            }
            if (EncryptionType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EncryptionType");
            }
            if (EncryptionAlgorithm == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EncryptionAlgorithm");
            }
        }
    }
}
