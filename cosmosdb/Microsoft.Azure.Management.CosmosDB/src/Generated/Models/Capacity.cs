// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The object that represents all properties related to capacity
    /// enforcement on an account.
    /// </summary>
    public partial class Capacity
    {
        /// <summary>
        /// Initializes a new instance of the Capacity class.
        /// </summary>
        public Capacity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Capacity class.
        /// </summary>
        /// <param name="totalThroughputLimit">The total throughput limit
        /// imposed on the account. A totalThroughputLimit of 2000 imposes a
        /// strict limit of max throughput that can be provisioned on that
        /// account to be 2000. A totalThroughputLimit of -1 indicates no
        /// limits on provisioning of throughput.</param>
        public Capacity(int? totalThroughputLimit = default(int?))
        {
            TotalThroughputLimit = totalThroughputLimit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the total throughput limit imposed on the account. A
        /// totalThroughputLimit of 2000 imposes a strict limit of max
        /// throughput that can be provisioned on that account to be 2000. A
        /// totalThroughputLimit of -1 indicates no limits on provisioning of
        /// throughput.
        /// </summary>
        [JsonProperty(PropertyName = "totalThroughputLimit")]
        public int? TotalThroughputLimit { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TotalThroughputLimit < -1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TotalThroughputLimit", -1);
            }
        }
    }
}
