// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters to create and update an Azure Cosmos DB Mongo User
    /// Definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class MongoUserDefinitionCreateUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MongoUserDefinitionCreateUpdateParameters class.
        /// </summary>
        public MongoUserDefinitionCreateUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MongoUserDefinitionCreateUpdateParameters class.
        /// </summary>
        /// <param name="userName">The user name for User Definition.</param>
        /// <param name="password">The password for User Definition. Response
        /// does not contain user password.</param>
        /// <param name="databaseName">The database name for which access is
        /// being granted for this User Definition.</param>
        /// <param name="customData">A custom definition for the USer
        /// Definition.</param>
        /// <param name="roles">The set of roles inherited by the User
        /// Definition.</param>
        /// <param name="mechanisms">The Mongo Auth mechanism. For now, we only
        /// support auth mechanism SCRAM-SHA-256.</param>
        public MongoUserDefinitionCreateUpdateParameters(string userName = default(string), string password = default(string), string databaseName = default(string), string customData = default(string), IList<Role> roles = default(IList<Role>), string mechanisms = default(string))
        {
            UserName = userName;
            Password = password;
            DatabaseName = databaseName;
            CustomData = customData;
            Roles = roles;
            Mechanisms = mechanisms;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the user name for User Definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets the password for User Definition. Response does not
        /// contain user password.
        /// </summary>
        [JsonProperty(PropertyName = "properties.password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the database name for which access is being granted
        /// for this User Definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseName")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets a custom definition for the USer Definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customData")]
        public string CustomData { get; set; }

        /// <summary>
        /// Gets or sets the set of roles inherited by the User Definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.roles")]
        public IList<Role> Roles { get; set; }

        /// <summary>
        /// Gets or sets the Mongo Auth mechanism. For now, we only support
        /// auth mechanism SCRAM-SHA-256.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mechanisms")]
        public string Mechanisms { get; set; }

    }
}
