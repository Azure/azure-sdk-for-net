// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MongoDBCollectionGetPropertiesResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MongoDBCollectionGetPropertiesResource class.
        /// </summary>
        public MongoDBCollectionGetPropertiesResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MongoDBCollectionGetPropertiesResource class.
        /// </summary>
        /// <param name="id">Name of the Cosmos DB MongoDB collection</param>
        /// <param name="shardKey">A key-value pair of shard keys to be applied
        /// for the request.</param>
        /// <param name="indexes">List of index keys</param>
        /// <param name="analyticalStorageTtl">Analytical TTL.</param>
        /// <param name="_rid">A system generated property. A unique
        /// identifier.</param>
        /// <param name="_ts">A system generated property that denotes the last
        /// updated timestamp of the resource.</param>
        /// <param name="_etag">A system generated property representing the
        /// resource etag required for optimistic concurrency control.</param>
        public MongoDBCollectionGetPropertiesResource(string id, IDictionary<string, string> shardKey = default(IDictionary<string, string>), IList<MongoIndex> indexes = default(IList<MongoIndex>), int? analyticalStorageTtl = default(int?), string _rid = default(string), double? _ts = default(double?), string _etag = default(string))
        {
            Id = id;
            ShardKey = shardKey;
            Indexes = indexes;
            AnalyticalStorageTtl = analyticalStorageTtl;
            this._rid = _rid;
            this._ts = _ts;
            this._etag = _etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the Cosmos DB MongoDB collection
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets a key-value pair of shard keys to be applied for the
        /// request.
        /// </summary>
        [JsonProperty(PropertyName = "shardKey")]
        public IDictionary<string, string> ShardKey { get; set; }

        /// <summary>
        /// Gets or sets list of index keys
        /// </summary>
        [JsonProperty(PropertyName = "indexes")]
        public IList<MongoIndex> Indexes { get; set; }

        /// <summary>
        /// Gets or sets analytical TTL.
        /// </summary>
        [JsonProperty(PropertyName = "analyticalStorageTtl")]
        public int? AnalyticalStorageTtl { get; set; }

        /// <summary>
        /// Gets a system generated property. A unique identifier.
        /// </summary>
        [JsonProperty(PropertyName = "_rid")]
        public string _rid { get; private set; }

        /// <summary>
        /// Gets a system generated property that denotes the last updated
        /// timestamp of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "_ts")]
        public double? _ts { get; private set; }

        /// <summary>
        /// Gets a system generated property representing the resource etag
        /// required for optimistic concurrency control.
        /// </summary>
        [JsonProperty(PropertyName = "_etag")]
        public string _etag { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
