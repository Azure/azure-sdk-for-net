// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections;
using System.Collections.Generic;
using Azure.Core;

namespace OperationalInsightsManagementClient.Models
{
    /// <summary> Workspace features. </summary>
    internal partial class WorkspaceFeatures : IReadOnlyDictionary<string, object>
    {
        /// <summary> Initializes a new instance of WorkspaceFeatures. </summary>
        internal WorkspaceFeatures()
        {
            AdditionalProperties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Flag that indicate if data should be exported. </summary>
        public bool? EnableDataExport { get; }
        /// <summary> Flag that describes if we want to remove the data after 30 days. </summary>
        public bool? ImmediatePurgeDataOn30Days { get; }
        /// <summary> Flag that indicate which permission to use - resource or workspace or both. </summary>
        public bool? EnableLogAccessUsingOnlyResourcePermissions { get; }
        /// <summary> Dedicated LA cluster resourceId that is linked to the workspaces. </summary>
        public string ClusterResourceId { get; }
        internal IReadOnlyDictionary<string, object> AdditionalProperties { get; }
        /// <inheritdoc />
        public IEnumerator<KeyValuePair<string, object>> GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        public bool TryGetValue(string key, out object value) => AdditionalProperties.TryGetValue(key, out value);
        /// <inheritdoc />
        public bool ContainsKey(string key) => AdditionalProperties.ContainsKey(key);
        /// <inheritdoc />
        public IEnumerable<string> Keys => AdditionalProperties.Keys;
        /// <inheritdoc />
        public IEnumerable<object> Values => AdditionalProperties.Values;
        /// <inheritdoc cref="IReadOnlyCollection{T}.Count"/>
        int IReadOnlyCollection<KeyValuePair<string, object>>.Count => AdditionalProperties.Count;
        /// <inheritdoc />
        public object this[string key]
        {
            get => AdditionalProperties[key];
        }
    }
}
