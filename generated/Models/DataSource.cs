// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace OperationalInsightsManagementClient.Models
{
    /// <summary> Datasources under OMS Workspace. </summary>
    public partial class DataSource : ProxyResource
    {
        /// <summary> Initializes a new instance of DataSource. </summary>
        /// <param name="properties"> The data source properties in raw json format, each kind of data source have it&apos;s own schema. </param>
        /// <param name="kind"> The kind of the DataSource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="properties"/> is null. </exception>
        public DataSource(object properties, DataSourceKind kind)
        {
            if (properties == null)
            {
                throw new ArgumentNullException(nameof(properties));
            }

            Properties = properties;
            Kind = kind;
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of DataSource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="properties"> The data source properties in raw json format, each kind of data source have it&apos;s own schema. </param>
        /// <param name="etag"> The ETag of the data source. </param>
        /// <param name="kind"> The kind of the DataSource. </param>
        /// <param name="tags"> Resource tags. </param>
        internal DataSource(string id, string name, string type, object properties, string etag, DataSourceKind kind, IDictionary<string, string> tags) : base(id, name, type)
        {
            Properties = properties;
            Etag = etag;
            Kind = kind;
            Tags = tags;
        }

        /// <summary> The data source properties in raw json format, each kind of data source have it&apos;s own schema. </summary>
        public object Properties { get; set; }
        /// <summary> The ETag of the data source. </summary>
        public string Etag { get; set; }
        /// <summary> The kind of the DataSource. </summary>
        public DataSourceKind Kind { get; set; }
        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
    }
}
