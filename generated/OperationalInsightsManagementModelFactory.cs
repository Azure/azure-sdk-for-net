// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using OperationalInsightsManagementClient.Models;

namespace OperationalInsightsManagementClient
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class OperationalInsightsManagementModelFactory
    {
        /// <summary> Initializes new instance of Resource class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <returns> A new <see cref="Models.Resource"/> instance for mocking. </returns>
        public static Resource Resource(string id = default, string name = default, string type = default)
        {
            return new Resource(id, name, type);
        }

        /// <summary> Initializes new instance of DataExport class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="dataExportId"> The data export rule ID. </param>
        /// <param name="tableNames"> An array of tables to export, for example: [“Heartbeat, SecurityEvent”]. </param>
        /// <param name="enable"> Active when enabled. </param>
        /// <param name="createdDate"> The latest data export rule modification time. </param>
        /// <param name="lastModifiedDate"> Date and time when the export was last modified. </param>
        /// <param name="resourceId"> The destination resource ID. This can be copied from the Properties entry of the destination resource in Azure. </param>
        /// <param name="typePropertiesDestinationType"> The type of the destination resource. </param>
        /// <param name="eventHubName"> Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account. </param>
        /// <returns> A new <see cref="Models.DataExport"/> instance for mocking. </returns>
        public static DataExport DataExport(string id = default, string name = default, string type = default, string dataExportId = default, IList<string> tableNames = default, bool? enable = default, string createdDate = default, string lastModifiedDate = default, string resourceId = default, Models.Type? typePropertiesDestinationType = default, string eventHubName = default)
        {
            tableNames ??= new List<string>();
            return new DataExport(id, name, type, dataExportId, tableNames, enable, createdDate, lastModifiedDate, resourceId, typePropertiesDestinationType, eventHubName);
        }

        /// <summary> Initializes new instance of ErrorResponse class. </summary>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.ErrorResponse"/> instance for mocking. </returns>
        public static ErrorResponse ErrorResponse(ErrorDetail error = default)
        {
            return new ErrorResponse(error);
        }

        /// <summary> Initializes new instance of ErrorDetail class. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="details"> The error details. </param>
        /// <param name="additionalInfo"> The error additional info. </param>
        /// <returns> A new <see cref="Models.ErrorDetail"/> instance for mocking. </returns>
        public static ErrorDetail ErrorDetail(string code = default, string message = default, string target = default, IReadOnlyList<ErrorDetail> details = default, IReadOnlyList<ErrorAdditionalInfo> additionalInfo = default)
        {
            details ??= new List<ErrorDetail>();
            additionalInfo ??= new List<ErrorAdditionalInfo>();
            return new ErrorDetail(code, message, target, details, additionalInfo);
        }

        /// <summary> Initializes new instance of ErrorAdditionalInfo class. </summary>
        /// <param name="type"> The additional info type. </param>
        /// <param name="info"> The additional info. </param>
        /// <returns> A new <see cref="Models.ErrorAdditionalInfo"/> instance for mocking. </returns>
        public static ErrorAdditionalInfo ErrorAdditionalInfo(string type = default, object info = default)
        {
            return new ErrorAdditionalInfo(type, info);
        }

        /// <summary> Initializes new instance of IntelligencePack class. </summary>
        /// <param name="name"> The name of the intelligence pack. </param>
        /// <param name="enabled"> The enabled boolean for the intelligence pack. </param>
        /// <param name="displayName"> The display name of the intelligence pack. </param>
        /// <returns> A new <see cref="Models.IntelligencePack"/> instance for mocking. </returns>
        public static IntelligencePack IntelligencePack(string name = default, bool? enabled = default, string displayName = default)
        {
            return new IntelligencePack(name, enabled, displayName);
        }

        /// <summary> Initializes new instance of LinkedStorageAccountsResource class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="dataSourceType"> Linked storage accounts type. </param>
        /// <param name="storageAccountIds"> Linked storage accounts resources ids. </param>
        /// <returns> A new <see cref="Models.LinkedStorageAccountsResource"/> instance for mocking. </returns>
        public static LinkedStorageAccountsResource LinkedStorageAccountsResource(string id = default, string name = default, string type = default, DataSourceType? dataSourceType = default, IList<string> storageAccountIds = default)
        {
            storageAccountIds ??= new List<string>();
            return new LinkedStorageAccountsResource(id, name, type, dataSourceType, storageAccountIds);
        }

        /// <summary> Initializes new instance of ManagementGroup class. </summary>
        /// <param name="serverCount"> The number of servers connected to the management group. </param>
        /// <param name="isGateway"> Gets or sets a value indicating whether the management group is a gateway. </param>
        /// <param name="name"> The name of the management group. </param>
        /// <param name="id"> The unique ID of the management group. </param>
        /// <param name="created"> The datetime that the management group was created. </param>
        /// <param name="dataReceived"> The last datetime that the management group received data. </param>
        /// <param name="version"> The version of System Center that is managing the management group. </param>
        /// <param name="sku"> The SKU of System Center that is managing the management group. </param>
        /// <returns> A new <see cref="Models.ManagementGroup"/> instance for mocking. </returns>
        public static ManagementGroup ManagementGroup(int? serverCount = default, bool? isGateway = default, string name = default, string id = default, DateTimeOffset? created = default, DateTimeOffset? dataReceived = default, string version = default, string sku = default)
        {
            return new ManagementGroup(serverCount, isGateway, name, id, created, dataReceived, version, sku);
        }

        /// <summary> Initializes new instance of OperationStatus class. </summary>
        /// <param name="id"> The operation Id. </param>
        /// <param name="name"> The operation name. </param>
        /// <param name="startTime"> The start time of the operation. </param>
        /// <param name="endTime"> The end time of the operation. </param>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="error"> The error detail of the operation if any. </param>
        /// <returns> A new <see cref="Models.OperationStatus"/> instance for mocking. </returns>
        public static OperationStatus OperationStatus(string id = default, string name = default, string startTime = default, string endTime = default, string status = default, ErrorResponse error = default)
        {
            return new OperationStatus(id, name, startTime, endTime, status, error);
        }

        /// <summary> Initializes new instance of SharedKeys class. </summary>
        /// <param name="primarySharedKey"> The primary shared key of a workspace. </param>
        /// <param name="secondarySharedKey"> The secondary shared key of a workspace. </param>
        /// <returns> A new <see cref="Models.SharedKeys"/> instance for mocking. </returns>
        public static SharedKeys SharedKeys(string primarySharedKey = default, string secondarySharedKey = default)
        {
            return new SharedKeys(primarySharedKey, secondarySharedKey);
        }

        /// <summary> Initializes new instance of UsageMetric class. </summary>
        /// <param name="name"> The name of the metric. </param>
        /// <param name="unit"> The units used for the metric. </param>
        /// <param name="currentValue"> The current value of the metric. </param>
        /// <param name="limit"> The quota limit for the metric. </param>
        /// <param name="nextResetTime"> The time that the metric&apos;s value will reset. </param>
        /// <param name="quotaPeriod"> The quota period that determines the length of time between value resets. </param>
        /// <returns> A new <see cref="Models.UsageMetric"/> instance for mocking. </returns>
        public static UsageMetric UsageMetric(MetricName name = default, string unit = default, double? currentValue = default, double? limit = default, DateTimeOffset? nextResetTime = default, string quotaPeriod = default)
        {
            return new UsageMetric(name, unit, currentValue, limit, nextResetTime, quotaPeriod);
        }

        /// <summary> Initializes new instance of MetricName class. </summary>
        /// <param name="value"> The system name of the metric. </param>
        /// <param name="localizedValue"> The localized name of the metric. </param>
        /// <returns> A new <see cref="Models.MetricName"/> instance for mocking. </returns>
        public static MetricName MetricName(string value = default, string localizedValue = default)
        {
            return new MetricName(value, localizedValue);
        }

        /// <summary> Initializes new instance of StorageInsight class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="eTag"> The ETag of the storage insight. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="containers"> The names of the blob containers that the workspace should read. </param>
        /// <param name="tables"> The names of the Azure tables that the workspace should read. </param>
        /// <param name="storageAccount"> The storage account connection details. </param>
        /// <param name="status"> The status of the storage insight. </param>
        /// <returns> A new <see cref="Models.StorageInsight"/> instance for mocking. </returns>
        public static StorageInsight StorageInsight(string id = default, string name = default, string type = default, string eTag = default, IDictionary<string, string> tags = default, IList<string> containers = default, IList<string> tables = default, StorageAccount storageAccount = default, StorageInsightStatus status = default)
        {
            tags ??= new Dictionary<string, string>();
            containers ??= new List<string>();
            tables ??= new List<string>();
            return new StorageInsight(id, name, type, eTag, tags, containers, tables, storageAccount, status);
        }

        /// <summary> Initializes new instance of StorageInsightStatus class. </summary>
        /// <param name="state"> The state of the storage insight connection to the workspace. </param>
        /// <param name="description"> Description of the state of the storage insight. </param>
        /// <returns> A new <see cref="Models.StorageInsightStatus"/> instance for mocking. </returns>
        public static StorageInsightStatus StorageInsightStatus(StorageInsightState state = default, string description = default)
        {
            return new StorageInsightStatus(state, description);
        }

        /// <summary> Initializes new instance of SavedSearchesListResult class. </summary>
        /// <param name="value"> The array of result values. </param>
        /// <returns> A new <see cref="Models.SavedSearchesListResult"/> instance for mocking. </returns>
        public static SavedSearchesListResult SavedSearchesListResult(IReadOnlyList<SavedSearch> value = default)
        {
            value ??= new List<SavedSearch>();
            return new SavedSearchesListResult(value);
        }

        /// <summary> Initializes new instance of AvailableServiceTier class. </summary>
        /// <param name="serviceTier"> The name of the Service Tier. </param>
        /// <param name="enabled"> True if the Service Tier is enabled for the workspace. </param>
        /// <param name="minimumRetention"> The minimum retention for the Service Tier, in days. </param>
        /// <param name="maximumRetention"> The maximum retention for the Service Tier, in days. </param>
        /// <param name="defaultRetention"> The default retention for the Service Tier, in days. </param>
        /// <param name="capacityReservationLevel"> The capacity reservation level in GB per day. Returned for the Capacity Reservation Service Tier. </param>
        /// <param name="lastSkuUpdate"> Time when the sku was last updated for the workspace. Returned for the Capacity Reservation Service Tier. </param>
        /// <returns> A new <see cref="Models.AvailableServiceTier"/> instance for mocking. </returns>
        public static AvailableServiceTier AvailableServiceTier(SkuNameEnum? serviceTier = default, bool? enabled = default, long? minimumRetention = default, long? maximumRetention = default, long? defaultRetention = default, long? capacityReservationLevel = default, string lastSkuUpdate = default)
        {
            return new AvailableServiceTier(serviceTier, enabled, minimumRetention, maximumRetention, defaultRetention, capacityReservationLevel, lastSkuUpdate);
        }

        /// <summary> Initializes new instance of SearchGetSchemaResponse class. </summary>
        /// <param name="metadata"> The metadata from search results. </param>
        /// <param name="value"> The array of result values. </param>
        /// <returns> A new <see cref="Models.SearchGetSchemaResponse"/> instance for mocking. </returns>
        public static SearchGetSchemaResponse SearchGetSchemaResponse(SearchMetadata metadata = default, IReadOnlyList<SearchSchemaValue> value = default)
        {
            value ??= new List<SearchSchemaValue>();
            return new SearchGetSchemaResponse(metadata, value);
        }

        /// <summary> Initializes new instance of SearchMetadata class. </summary>
        /// <param name="searchId"> The request id of the search. </param>
        /// <param name="resultType"> The search result type. </param>
        /// <param name="total"> The total number of search results. </param>
        /// <param name="top"> The number of top search results. </param>
        /// <param name="id"> The id of the search results request. </param>
        /// <param name="coreSummaries"> The core summaries. </param>
        /// <param name="status"> The status of the search results. </param>
        /// <param name="startTime"> The start time for the search. </param>
        /// <param name="lastUpdated"> The time of last update. </param>
        /// <param name="eTag"> The ETag of the search results. </param>
        /// <param name="sort"> How the results are sorted. </param>
        /// <param name="requestTime"> The request time. </param>
        /// <param name="aggregatedValueField"> The aggregated value field. </param>
        /// <param name="aggregatedGroupingFields"> The aggregated grouping fields. </param>
        /// <param name="sum"> The sum of all aggregates returned in the result set. </param>
        /// <param name="max"> The max of all aggregates returned in the result set. </param>
        /// <param name="schema"> The schema. </param>
        /// <returns> A new <see cref="Models.SearchMetadata"/> instance for mocking. </returns>
        public static SearchMetadata SearchMetadata(string searchId = default, string resultType = default, long? total = default, long? top = default, string id = default, IReadOnlyList<CoreSummary> coreSummaries = default, string status = default, DateTimeOffset? startTime = default, DateTimeOffset? lastUpdated = default, string eTag = default, IReadOnlyList<SearchSort> sort = default, long? requestTime = default, string aggregatedValueField = default, string aggregatedGroupingFields = default, long? sum = default, long? max = default, SearchMetadataSchema schema = default)
        {
            coreSummaries ??= new List<CoreSummary>();
            sort ??= new List<SearchSort>();
            return new SearchMetadata(searchId, resultType, total, top, id, coreSummaries, status, startTime, lastUpdated, eTag, sort, requestTime, aggregatedValueField, aggregatedGroupingFields, sum, max, schema);
        }

        /// <summary> Initializes new instance of CoreSummary class. </summary>
        /// <param name="status"> The status of a core summary. </param>
        /// <param name="numberOfDocuments"> The number of documents of a core summary. </param>
        /// <returns> A new <see cref="Models.CoreSummary"/> instance for mocking. </returns>
        public static CoreSummary CoreSummary(string status = default, long numberOfDocuments = default)
        {
            return new CoreSummary(status, numberOfDocuments);
        }

        /// <summary> Initializes new instance of SearchSort class. </summary>
        /// <param name="name"> The name of the field the search query is sorted on. </param>
        /// <param name="order"> The sort order of the search. </param>
        /// <returns> A new <see cref="Models.SearchSort"/> instance for mocking. </returns>
        public static SearchSort SearchSort(string name = default, SearchSortEnum? order = default)
        {
            return new SearchSort(name, order);
        }

        /// <summary> Initializes new instance of SearchMetadataSchema class. </summary>
        /// <param name="name"> The name of the metadata schema. </param>
        /// <param name="version"> The version of the metadata schema. </param>
        /// <returns> A new <see cref="Models.SearchMetadataSchema"/> instance for mocking. </returns>
        public static SearchMetadataSchema SearchMetadataSchema(string name = default, int? version = default)
        {
            return new SearchMetadataSchema(name, version);
        }

        /// <summary> Initializes new instance of SearchSchemaValue class. </summary>
        /// <param name="name"> The name of the schema. </param>
        /// <param name="displayName"> The display name of the schema. </param>
        /// <param name="type"> The type. </param>
        /// <param name="indexed"> The boolean that indicates the field is searchable as free text. </param>
        /// <param name="stored"> The boolean that indicates whether or not the field is stored. </param>
        /// <param name="facet"> The boolean that indicates whether or not the field is a facet. </param>
        /// <param name="ownerType"> The array of workflows containing the field. </param>
        /// <returns> A new <see cref="Models.SearchSchemaValue"/> instance for mocking. </returns>
        public static SearchSchemaValue SearchSchemaValue(string name = default, string displayName = default, string type = default, bool indexed = default, bool stored = default, bool facet = default, IReadOnlyList<string> ownerType = default)
        {
            ownerType ??= new List<string>();
            return new SearchSchemaValue(name, displayName, type, indexed, stored, facet, ownerType);
        }

        /// <summary> Initializes new instance of WorkspacePurgeResponse class. </summary>
        /// <param name="operationId"> Id to use when querying for status for a particular purge operation. </param>
        /// <returns> A new <see cref="Models.WorkspacePurgeResponse"/> instance for mocking. </returns>
        public static WorkspacePurgeResponse WorkspacePurgeResponse(string operationId = default)
        {
            return new WorkspacePurgeResponse(operationId);
        }

        /// <summary> Initializes new instance of WorkspacePurgeStatusResponse class. </summary>
        /// <param name="status"> Status of the operation represented by the requested Id. </param>
        /// <returns> A new <see cref="Models.WorkspacePurgeStatusResponse"/> instance for mocking. </returns>
        public static WorkspacePurgeStatusResponse WorkspacePurgeStatusResponse(PurgeState status = default)
        {
            return new WorkspacePurgeStatusResponse(status);
        }

        /// <summary> Initializes new instance of Cluster class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="identity"> The identity of the resource. </param>
        /// <param name="sku"> The sku properties. </param>
        /// <param name="clusterId"> The ID associated with the cluster. </param>
        /// <param name="provisioningState"> The provisioning state of the cluster. </param>
        /// <param name="isDoubleEncryptionEnabled"> Configures whether cluster will use double encryption. This Property can not be modified after cluster creation. Default value is &apos;true&apos;. </param>
        /// <param name="isAvailabilityZonesEnabled"> Sets whether the cluster will support availability zones. This can be set as true only in regions where Azure Data Explorer support Availability Zones. This Property can not be modified after cluster creation. Default value is &apos;true&apos; if region supports Availability Zones. </param>
        /// <param name="billingType"> The cluster&apos;s billing type. </param>
        /// <param name="keyVaultProperties"> The associated key properties. </param>
        /// <param name="lastModifiedDate"> The last time the cluster was updated. </param>
        /// <param name="createdDate"> The cluster creation time. </param>
        /// <param name="associatedWorkspaces"> The list of Log Analytics workspaces associated with the cluster. </param>
        /// <param name="capacityReservationProperties"> Additional properties for capacity reservation. </param>
        /// <returns> A new <see cref="Models.Cluster"/> instance for mocking. </returns>
        public static Cluster Cluster(string id = default, string name = default, string type = default, IDictionary<string, string> tags = default, string location = default, Identity identity = default, ClusterSku sku = default, string clusterId = default, ClusterEntityStatus? provisioningState = default, bool? isDoubleEncryptionEnabled = default, bool? isAvailabilityZonesEnabled = default, BillingType? billingType = default, KeyVaultProperties keyVaultProperties = default, string lastModifiedDate = default, string createdDate = default, IList<AssociatedWorkspace> associatedWorkspaces = default, CapacityReservationProperties capacityReservationProperties = default)
        {
            tags ??= new Dictionary<string, string>();
            associatedWorkspaces ??= new List<AssociatedWorkspace>();
            return new Cluster(id, name, type, tags, location, identity, sku, clusterId, provisioningState, isDoubleEncryptionEnabled, isAvailabilityZonesEnabled, billingType, keyVaultProperties, lastModifiedDate, createdDate, associatedWorkspaces, capacityReservationProperties);
        }

        /// <summary> Initializes new instance of Identity class. </summary>
        /// <param name="principalId"> The principal ID of resource identity. </param>
        /// <param name="tenantId"> The tenant ID of resource. </param>
        /// <param name="type"> Type of managed service identity. </param>
        /// <param name="userAssignedIdentities"> The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&apos;. </param>
        /// <returns> A new <see cref="Models.Identity"/> instance for mocking. </returns>
        public static Identity Identity(string principalId = default, string tenantId = default, IdentityType type = default, IDictionary<string, UserIdentityProperties> userAssignedIdentities = default)
        {
            userAssignedIdentities ??= new Dictionary<string, UserIdentityProperties>();
            return new Identity(principalId, tenantId, type, userAssignedIdentities);
        }

        /// <summary> Initializes new instance of UserIdentityProperties class. </summary>
        /// <param name="principalId"> The principal id of user assigned identity. </param>
        /// <param name="clientId"> The client id of user assigned identity. </param>
        /// <returns> A new <see cref="Models.UserIdentityProperties"/> instance for mocking. </returns>
        public static UserIdentityProperties UserIdentityProperties(string principalId = default, string clientId = default)
        {
            return new UserIdentityProperties(principalId, clientId);
        }

        /// <summary> Initializes new instance of AssociatedWorkspace class. </summary>
        /// <param name="workspaceId"> The id of the assigned workspace. </param>
        /// <param name="workspaceName"> The name id the assigned workspace. </param>
        /// <param name="resourceId"> The ResourceId id the assigned workspace. </param>
        /// <param name="associateDate"> The time of workspace association. </param>
        /// <returns> A new <see cref="Models.AssociatedWorkspace"/> instance for mocking. </returns>
        public static AssociatedWorkspace AssociatedWorkspace(string workspaceId = default, string workspaceName = default, string resourceId = default, string associateDate = default)
        {
            return new AssociatedWorkspace(workspaceId, workspaceName, resourceId, associateDate);
        }

        /// <summary> Initializes new instance of CapacityReservationProperties class. </summary>
        /// <param name="lastSkuUpdate"> The last time Sku was updated. </param>
        /// <param name="minCapacity"> Minimum CapacityReservation value in GB. </param>
        /// <param name="maxCapacity"> Maximum CapacityReservation value in GB. </param>
        /// <returns> A new <see cref="Models.CapacityReservationProperties"/> instance for mocking. </returns>
        public static CapacityReservationProperties CapacityReservationProperties(string lastSkuUpdate = default, long? minCapacity = default, long? maxCapacity = default)
        {
            return new CapacityReservationProperties(lastSkuUpdate, minCapacity, maxCapacity);
        }

        /// <summary> Initializes new instance of Operation class. </summary>
        /// <param name="name"> Operation name: {provider}/{resource}/{operation}. </param>
        /// <param name="display"> Display metadata associated with the operation. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = default, OperationDisplay display = default)
        {
            return new Operation(name, display);
        }

        /// <summary> Initializes new instance of OperationDisplay class. </summary>
        /// <param name="provider"> Service provider: Microsoft OperationsManagement. </param>
        /// <param name="resource"> Resource on which the operation is performed etc. </param>
        /// <param name="operation"> Type of operation: get, read, delete, etc. </param>
        /// <param name="description"> Description of operation. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = default, string resource = default, string operation = default, string description = default)
        {
            return new OperationDisplay(provider, resource, operation, description);
        }

        /// <summary> Initializes new instance of Workspace class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="eTag"> The ETag of the workspace. </param>
        /// <param name="provisioningState"> The provisioning state of the workspace. </param>
        /// <param name="customerId"> This is a read-only property. Represents the ID associated with the workspace. </param>
        /// <param name="sku"> The SKU of the workspace. </param>
        /// <param name="retentionInDays"> The workspace data retention in days. Allowed values are per pricing plan. See pricing tiers documentation for details. </param>
        /// <param name="workspaceCapping"> The daily volume cap for ingestion. </param>
        /// <param name="createdDate"> Workspace creation date. </param>
        /// <param name="modifiedDate"> Workspace modification date. </param>
        /// <param name="publicNetworkAccessForIngestion"> The network access type for accessing Log Analytics ingestion. </param>
        /// <param name="publicNetworkAccessForQuery"> The network access type for accessing Log Analytics query. </param>
        /// <param name="forceCmkForQuery"> Indicates whether customer managed storage is mandatory for query management. </param>
        /// <param name="privateLinkScopedResources"> List of linked private link scope resources. </param>
        /// <param name="enableDataExport"> Flag that indicate if data should be exported. </param>
        /// <param name="immediatePurgeDataOn30Days"> Flag that describes if we want to remove the data after 30 days. </param>
        /// <param name="enableLogAccessUsingOnlyResourcePermissions"> Flag that indicate which permission to use - resource or workspace or both. </param>
        /// <param name="clusterResourceId"> Dedicated LA cluster resourceId that is linked to the workspaces. </param>
        /// <returns> A new <see cref="Models.Workspace"/> instance for mocking. </returns>
        public static Workspace Workspace(string id = default, string name = default, string type = default, IDictionary<string, string> tags = default, string location = default, string eTag = default, WorkspaceEntityStatus? provisioningState = default, string customerId = default, WorkspaceSku sku = default, int? retentionInDays = default, WorkspaceCapping workspaceCapping = default, string createdDate = default, string modifiedDate = default, PublicNetworkAccessType? publicNetworkAccessForIngestion = default, PublicNetworkAccessType? publicNetworkAccessForQuery = default, bool? forceCmkForQuery = default, IReadOnlyList<PrivateLinkScopedResource> privateLinkScopedResources = default, bool? enableDataExport = default, bool? immediatePurgeDataOn30Days = default, bool? enableLogAccessUsingOnlyResourcePermissions = default, string clusterResourceId = default)
        {
            tags ??= new Dictionary<string, string>();
            privateLinkScopedResources ??= new List<PrivateLinkScopedResource>();
            return new Workspace(id, name, type, tags, location, eTag, provisioningState, customerId, sku, retentionInDays, workspaceCapping, createdDate, modifiedDate, publicNetworkAccessForIngestion, publicNetworkAccessForQuery, forceCmkForQuery, privateLinkScopedResources, enableDataExport, immediatePurgeDataOn30Days, enableLogAccessUsingOnlyResourcePermissions, clusterResourceId);
        }

        /// <summary> Initializes new instance of WorkspaceSku class. </summary>
        /// <param name="name"> The name of the SKU. </param>
        /// <param name="capacityReservationLevel"> The capacity reservation level for this workspace, when CapacityReservation sku is selected. </param>
        /// <param name="lastSkuUpdate"> The last time when the sku was updated. </param>
        /// <returns> A new <see cref="Models.WorkspaceSku"/> instance for mocking. </returns>
        public static WorkspaceSku WorkspaceSku(WorkspaceSkuNameEnum name = default, int? capacityReservationLevel = default, string lastSkuUpdate = default)
        {
            return new WorkspaceSku(name, capacityReservationLevel, lastSkuUpdate);
        }

        /// <summary> Initializes new instance of WorkspaceCapping class. </summary>
        /// <param name="dailyQuotaGb"> The workspace daily quota for ingestion. </param>
        /// <param name="quotaNextResetTime"> The time when the quota will be rest. </param>
        /// <param name="dataIngestionStatus"> The status of data ingestion for this workspace. </param>
        /// <returns> A new <see cref="Models.WorkspaceCapping"/> instance for mocking. </returns>
        public static WorkspaceCapping WorkspaceCapping(double? dailyQuotaGb = default, string quotaNextResetTime = default, DataIngestionStatus? dataIngestionStatus = default)
        {
            return new WorkspaceCapping(dailyQuotaGb, quotaNextResetTime, dataIngestionStatus);
        }

        /// <summary> Initializes new instance of PrivateLinkScopedResource class. </summary>
        /// <param name="resourceId"> The full resource Id of the private link scope resource. </param>
        /// <param name="scopeId"> The private link scope unique Identifier. </param>
        /// <returns> A new <see cref="Models.PrivateLinkScopedResource"/> instance for mocking. </returns>
        public static PrivateLinkScopedResource PrivateLinkScopedResource(string resourceId = default, string scopeId = default)
        {
            return new PrivateLinkScopedResource(resourceId, scopeId);
        }

        /// <summary> Initializes new instance of AzureEntityResource class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <returns> A new <see cref="Models.AzureEntityResource"/> instance for mocking. </returns>
        public static AzureEntityResource AzureEntityResource(string id = default, string name = default, string type = default, string etag = default)
        {
            return new AzureEntityResource(id, name, type, etag);
        }

        /// <summary> Initializes new instance of WorkspacePatch class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="tags"> Resource tags. Optional. </param>
        /// <param name="provisioningState"> The provisioning state of the workspace. </param>
        /// <param name="customerId"> This is a read-only property. Represents the ID associated with the workspace. </param>
        /// <param name="sku"> The SKU of the workspace. </param>
        /// <param name="retentionInDays"> The workspace data retention in days. Allowed values are per pricing plan. See pricing tiers documentation for details. </param>
        /// <param name="workspaceCapping"> The daily volume cap for ingestion. </param>
        /// <param name="createdDate"> Workspace creation date. </param>
        /// <param name="modifiedDate"> Workspace modification date. </param>
        /// <param name="publicNetworkAccessForIngestion"> The network access type for accessing Log Analytics ingestion. </param>
        /// <param name="publicNetworkAccessForQuery"> The network access type for accessing Log Analytics query. </param>
        /// <param name="forceCmkForQuery"> Indicates whether customer managed storage is mandatory for query management. </param>
        /// <param name="privateLinkScopedResources"> List of linked private link scope resources. </param>
        /// <param name="enableDataExport"> Flag that indicate if data should be exported. </param>
        /// <param name="immediatePurgeDataOn30Days"> Flag that describes if we want to remove the data after 30 days. </param>
        /// <param name="enableLogAccessUsingOnlyResourcePermissions"> Flag that indicate which permission to use - resource or workspace or both. </param>
        /// <param name="clusterResourceId"> Dedicated LA cluster resourceId that is linked to the workspaces. </param>
        /// <returns> A new <see cref="Models.WorkspacePatch"/> instance for mocking. </returns>
        public static WorkspacePatch WorkspacePatch(string id = default, string name = default, string type = default, string etag = default, IDictionary<string, string> tags = default, WorkspaceEntityStatus? provisioningState = default, string customerId = default, WorkspaceSku sku = default, int? retentionInDays = default, WorkspaceCapping workspaceCapping = default, string createdDate = default, string modifiedDate = default, PublicNetworkAccessType? publicNetworkAccessForIngestion = default, PublicNetworkAccessType? publicNetworkAccessForQuery = default, bool? forceCmkForQuery = default, IReadOnlyList<PrivateLinkScopedResource> privateLinkScopedResources = default, bool? enableDataExport = default, bool? immediatePurgeDataOn30Days = default, bool? enableLogAccessUsingOnlyResourcePermissions = default, string clusterResourceId = default)
        {
            tags ??= new Dictionary<string, string>();
            privateLinkScopedResources ??= new List<PrivateLinkScopedResource>();
            return new WorkspacePatch(id, name, type, etag, tags, provisioningState, customerId, sku, retentionInDays, workspaceCapping, createdDate, modifiedDate, publicNetworkAccessForIngestion, publicNetworkAccessForQuery, forceCmkForQuery, privateLinkScopedResources, enableDataExport, immediatePurgeDataOn30Days, enableLogAccessUsingOnlyResourcePermissions, clusterResourceId);
        }
    }
}
