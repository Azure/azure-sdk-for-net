// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.WebSites;
using Microsoft.WindowsAzure.Management.WebSites.Models;

namespace Microsoft.WindowsAzure.Management.WebSites
{
    /// <summary>
    /// In addition to standard HTTP status codes, the Windows Azure Web Sites
    /// Management REST API returns extended error codes and error messages.
    /// The extended codes do not replace the standard HTTP status codes, but
    /// provide additional, actionable information that can be used in
    /// conjunction with the standard HTTP status codes. For example, an HTTP
    /// 404 error can occur for numerous reasons, so having the additional
    /// information in the extended message can assist with problem
    /// resolution. (For more information on the standard HTTP codes returned
    /// by the REST API, see Service Management Status and Error Codes.)  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166968.aspx for
    /// more information)
    /// </summary>
    public static partial class WebSiteExtendedErrorCodes
    {
        /// <summary>
        /// Access is denied.
        /// </summary>
        public const string AccessDenied = "01001";
        
        /// <summary>
        /// Command resource object is not present in the request body.
        /// </summary>
        public const string CommandResourceNotPresent = "01002";
        
        /// <summary>
        /// Invalid name {0}.
        /// </summary>
        public const string InvalidName = "01003";
        
        /// <summary>
        /// Cannot understand command verb {0}.
        /// </summary>
        public const string UnknownCommandVerb = "01004";
        
        /// <summary>
        /// The service is currently in read only mode.
        /// </summary>
        public const string IsInReadOnlyMode = "01005";
        
        /// <summary>
        /// The {0} parameter is not specified.
        /// </summary>
        public const string ParameterIsNotSpecified = "01006";
        
        /// <summary>
        /// Parameter {0} has invalid value.
        /// </summary>
        public const string InvalidParameterValue = "01007";
        
        /// <summary>
        /// {0} object is not present in the request body.
        /// </summary>
        public const string InvalidRequest = "01008";
        
        /// <summary>
        /// The from value in the query string is bigger than or equal to the
        /// to value.
        /// </summary>
        public const string IncorrectDateTimeRange = "01009";
        
        /// <summary>
        /// Required parameter {0} is missing.
        /// </summary>
        public const string RequiredParameterMissing = "01010";
        
        /// <summary>
        /// Name of the web quota cannot change.
        /// </summary>
        public const string ResourceNameCannotChange = "01011";
        
        /// <summary>
        /// The value of the query string parameter cannot be converted to
        /// Boolean.
        /// </summary>
        public const string FailedToConvertParameterValue = "01012";
        
        /// <summary>
        /// Parameter with name {0} already exists in the request.
        /// </summary>
        public const string ParameterNameAlreadyExists = "01013";
        
        /// <summary>
        /// Parameter name cannot be empty.
        /// </summary>
        public const string ParameterNameIsEmpty = "01014";
        
        /// <summary>
        /// Not ready
        /// </summary>
        public const string NotReady = "01015";
        
        /// <summary>
        /// Ready
        /// </summary>
        public const string Ready = "01016";
        
        /// <summary>
        /// Update is not allowed for the {0} field.
        /// </summary>
        public const string UpdateForFieldNotAllowed = "01017";
        
        /// <summary>
        /// Web Service does not support Command {0}. Only supported command(s)
        /// is {1}.
        /// </summary>
        public const string NotSupportedCommand = "01018";
        
        /// <summary>
        /// Invalid data ({0}).
        /// </summary>
        public const string InvalidData = "01019";
        
        /// <summary>
        /// There was a conflict. {0}
        /// </summary>
        public const string GenericConflict = "01020";
        
        /// <summary>
        /// Internal server error occurred. {0}
        /// </summary>
        public const string InternalServerError = "01021";
        
        /// <summary>
        /// Number of sites exceeds the maximum allowed.
        /// </summary>
        public const string NumberOfSitesLimit = "03001";
        
        /// <summary>
        /// NumberOfWorkers exceeds the maximum allowed.
        /// </summary>
        public const string NumberOfWorkersLimit = "03002";
        
        /// <summary>
        /// There is not enough space on the disk.
        /// </summary>
        public const string NoStorageVolumeAvailable = "03003";
        
        /// <summary>
        /// WebSpace with name {0} already exists for subscription {1}.
        /// </summary>
        public const string WebSpaceAlreadyExists = "03004";
        
        /// <summary>
        /// Cannot find webspace {0} for subscription {1}
        /// </summary>
        public const string WebSpaceNotFound = "03005";
        
        /// <summary>
        /// Web space contains resources.
        /// </summary>
        public const string WebSpaceContainsResources = "03006";
        
        /// <summary>
        /// The file storage capacity exceeds the limit.
        /// </summary>
        public const string FileStorageLimit = "03007";
        
        /// <summary>
        /// Failed to delete web space {0}: {1}
        /// </summary>
        public const string WebSpaceDeleteError = "03008";
        
        /// <summary>
        /// Not enough available Standard Instance servers to satisfy this
        /// request.
        /// </summary>
        public const string NoWorkersAvailable = "03009";
        
        /// <summary>
        /// Failed to create web space {0} on storage volume {1}: {2}
        /// </summary>
        public const string WebSpaceCreateError = "03010";
        
        /// <summary>
        /// Directory already exists for site {0}.
        /// </summary>
        public const string DirectoryAlreadyExists = "04001";
        
        /// <summary>
        /// Failed to delete directory {0}.
        /// </summary>
        public const string DirectoryDeleteError = "04002";
        
        /// <summary>
        /// Invalid host name {0}.
        /// </summary>
        public const string InvalidHostName = "04003";
        
        /// <summary>
        /// NumberOfWorkers value must be more than zero.
        /// </summary>
        public const string InvalidNumberOfWorkers = "04004";
        
        /// <summary>
        /// Hostname '{0}' already exists.
        /// </summary>
        public const string HostNameAlreadyExists = "04005";
        
        /// <summary>
        /// No CNAME pointing from {0} to a site in a default DNS zone (or too
        /// many).
        /// </summary>
        public const string InvalidCustomHostNameValidation = "04006";
        
        /// <summary>
        /// There are no hostnames which could be used for validation.
        /// </summary>
        public const string InvalidCustomHostNameValidationNoBaseHostName = "04007";
        
        /// <summary>
        /// Site with name {0} already exists.
        /// </summary>
        public const string SiteAlreadyExists = "04008";
        
        /// <summary>
        /// Cannot find site {0}.
        /// </summary>
        public const string SiteNotFound = "04009";
        
        /// <summary>
        /// The external URL "{0}" specified on request header "{1}" is invalid.
        /// </summary>
        public const string InvalidExternalUriHeader = "04010";
        
        /// <summary>
        /// Failed to delete file {0}.
        /// </summary>
        public const string FileDeleteError = "04011";
        
        /// <summary>
        /// Number of workers for this site exceeds the maximum allowed.
        /// </summary>
        public const string NumberOfWorkersPerSiteLimit = "04012";
        
        /// <summary>
        /// WebSiteManager.CreateWebSite: Creating Site using storageVolume {0}.
        /// </summary>
        public const string TraceWebSiteStorageVolume = "04013";
        
        /// <summary>
        /// Cannot delete repository with name {0}.
        /// </summary>
        public const string RepositoryDeleteError = "05001";
        
        /// <summary>
        /// Development site already exists in the repository for site {0}.
        /// </summary>
        public const string RepositoryDevSiteAlreadyExists = "05002";
        
        /// <summary>
        /// Development site does not exist in the repository for site {0}.
        /// </summary>
        public const string RepositoryDevSiteNotExist = "05003";
        
        /// <summary>
        /// Site {0} already has repository created for it.
        /// </summary>
        public const string RepositorySiteAlreadyExists = "05004";
        
        /// <summary>
        /// Repository does not exist for site {0}.
        /// </summary>
        public const string RepositorySiteNotExist = "05005";
        
        /// <summary>
        /// Failed to create a development site.
        /// </summary>
        public const string TraceFailedToCreateDevSite = "05006";
        
        /// <summary>
        /// User {0} has been rejected.
        /// </summary>
        public const string AuthenticatedFailed = "06001";
        
        /// <summary>
        /// User {0} has been successfully authenticated.
        /// </summary>
        public const string AuthenticatedPassed = "06002";
        
        /// <summary>
        /// User {0} has been rejected.
        /// </summary>
        public const string AuthorizationFailed = "06003";
        
        /// <summary>
        /// User {0} has been authorized.
        /// </summary>
        public const string AuthorizationPassed = "06004";
        
        /// <summary>
        /// Publishing credentials have to be trimmed from white characters.
        /// </summary>
        public const string PublishingCredentialsNotTrimmed = "06005";
        
        /// <summary>
        /// Publishing password cannot be empty.
        /// </summary>
        public const string PublishingPasswordIsEmpty = "06006";
        
        /// <summary>
        /// Publishing password must be specified.
        /// </summary>
        public const string PublishingPasswordNotSpecified = "06007";
        
        /// <summary>
        /// Publishing username {0} is already used. Specify a different
        /// publishing username.
        /// </summary>
        public const string PublishingUserNameAlreadyExists = "06008";
        
        /// <summary>
        /// Publishing user name cannot be empty.
        /// </summary>
        public const string PublishingUserNameIsEmpty = "06009";
        
        /// <summary>
        /// An error occurred when adding the {0} entry: {1}
        /// </summary>
        public const string ErrorAdding = "51001";
        
        /// <summary>
        /// An error occurred when deleting the {0} entry: {1}
        /// </summary>
        public const string ErrorDeleting = "51002";
        
        /// <summary>
        /// An error occurred when updating the {0} entry: {1}
        /// </summary>
        public const string ErrorUpdating = "51003";
        
        /// <summary>
        /// Cannot find {0} with name {1}.
        /// </summary>
        public const string CannotFindEntity = "51004";
        
        /// <summary>
        /// Subscription with specified name already exists.
        /// </summary>
        public const string SubscriptionConflict = "52001";
        
        /// <summary>
        /// Subscripton Name cannot be null or empty.
        /// </summary>
        public const string SubscriptionNonEmpty = "52002";
        
        /// <summary>
        /// Subscription {0} not found.
        /// </summary>
        public const string SubscriptionNotFound = "52003";
        
        /// <summary>
        /// Subscription {0} is Suspended.
        /// </summary>
        public const string SubscriptionSuspended = "52004";
        
        /// <summary>
        /// Subscription contains WebSpaces.
        /// </summary>
        public const string NonEmptySubscription = "52005";
        
        /// <summary>
        /// WebSpace with specified name already exists.
        /// </summary>
        public const string WebSpaceConflict = "53001";
        
        /// <summary>
        /// WebSpace Name cannot be null or empty.
        /// </summary>
        public const string WebSpaceNonEmpty = "53002";
        
        /// <summary>
        /// WebSpace contains web sites.
        /// </summary>
        public const string NonEmptyWebSpace = "53003";
        
        /// <summary>
        /// An Error occurred when picking Stamp for WebSpace {0}.
        /// </summary>
        public const string ErrorPickingStamp = "53004";
        
        /// <summary>
        /// Web site with given name {0} already exists in the specified
        /// Subscription and Webspace.
        /// </summary>
        public const string WebSiteConflict = "54001";
        
        /// <summary>
        /// WebSiteName cannot be null or empty.
        /// </summary>
        public const string WebSiteNonEmpty = "54002";
        
        /// <summary>
        /// Specified Host Name {0} is already taken by another site.
        /// </summary>
        public const string HostNameConflict = "54003";
    }
}

namespace Microsoft.WindowsAzure.Management.WebSites.Models
{
    public static partial class GeoRegionNames
    {
        public const string EastUS = "East US";
        
        public const string WestUS = "West US";
        
        public const string NorthCentralUS = "North Central US";
        
        public const string NorthEurope = "North Europe";
        
        public const string WestEurope = "West Europe";
        
        public const string EastAsia = "East Asia";
    }
    
    /// <summary>
    /// Supported historical usage metric names.
    /// </summary>
    public static partial class HistoricalUsageMetricNames
    {
        public const string CpuTime = "CpuTime";
        
        public const string BytesReceived = "BytesReceived";
        
        public const string BytesSent = "BytesSent";
        
        public const string IncomingRequestBytes = "IncomingRequestBytes";
        
        public const string IncomingRequestResponseBytes = "IncomingRequestResponseBytes";
        
        public const string OutgoingRequestBytes = "OutgoingRequestBytes";
        
        public const string OutgoingRequestResponseBytes = "OutgoingRequestResponseBytes";
        
        public const string LocalReadBytes = "LocalReadBytes";
        
        public const string LocalWrittenBytes = "LocalWrittenBytes";
        
        public const string NetworkReadBytes = "NetworkReadBytes";
        
        public const string NetworkWrittenBytes = "NetworkWrittenBytes";
        
        public const string Requests = "Requests";
        
        public const string Http2xx = "Http2xx";
        
        public const string Http3xx = "Http3xx";
        
        public const string Http401 = "Http401";
        
        public const string Http403 = "Http403";
        
        public const string Http404 = "Http404";
        
        public const string Http406 = "Http406";
        
        public const string Http4xx = "Http4xx";
        
        public const string Http5xx = "Http5xx";
    }
    
    /// <summary>
    /// The managed pipeline mode of a website.
    /// </summary>
    public enum ManagedPipelineMode
    {
        /// <summary>
        /// Integrated Managed Pipeline Mode.
        /// </summary>
        Integrated = 0,
        
        /// <summary>
        /// Classic Managed Pipeline Mode.
        /// </summary>
        Classic = 1,
    }
    
    /// <summary>
    /// Parameters supplied to the Create Server Farm operation.
    /// </summary>
    public partial class ServerFarmCreateParameters
    {
        private int? _currentNumberOfWorkers;
        
        /// <summary>
        /// The current number of Virtual Machines (VMs) in the server farm.
        /// </summary>
        public int? CurrentNumberOfWorkers
        {
            get { return this._currentNumberOfWorkers; }
            set { this._currentNumberOfWorkers = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.ServerFarmWorkerSize? _currentWorkerSize;
        
        /// <summary>
        /// The current worker size Possible values are Small, Medium, or Large.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.ServerFarmWorkerSize? CurrentWorkerSize
        {
            get { return this._currentWorkerSize; }
            set { this._currentWorkerSize = value; }
        }
        
        private int _numberOfWorkers;
        
        /// <summary>
        /// The instance count, which is the number of virtual machines
        /// dedicated to the farm. Supported values are 1-10.
        /// </summary>
        public int NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.ServerFarmStatus? _status;
        
        /// <summary>
        /// Server farm status. Possible values are Ready or Pending.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.ServerFarmStatus? Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private ServerFarmWorkerSize _workerSize;
        
        /// <summary>
        /// The instance size. Possible values are Small, Medium, or Large.
        /// </summary>
        public ServerFarmWorkerSize WorkerSize
        {
            get { return this._workerSize; }
            set { this._workerSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServerFarmCreateParameters class.
        /// </summary>
        public ServerFarmCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// The Create Server Farm operation response.
    /// </summary>
    public partial class ServerFarmCreateResponse : OperationResponse
    {
        private int _currentNumberOfWorkers;
        
        /// <summary>
        /// The current number of Virtual Machines (VMs) in the server farm.
        /// </summary>
        public int CurrentNumberOfWorkers
        {
            get { return this._currentNumberOfWorkers; }
            set { this._currentNumberOfWorkers = value; }
        }
        
        private ServerFarmWorkerSize _currentWorkerSize;
        
        /// <summary>
        /// The current worker size Possible values are Small, Medium, or Large.
        /// </summary>
        public ServerFarmWorkerSize CurrentWorkerSize
        {
            get { return this._currentWorkerSize; }
            set { this._currentWorkerSize = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the server farm.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private int _numberOfWorkers;
        
        /// <summary>
        /// The instance count, which is the number of virtual machines
        /// dedicated to the farm. Supported values are 1-10.
        /// </summary>
        public int NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private ServerFarmStatus _status;
        
        /// <summary>
        /// Server farm status. Possible values are Ready or Pending.
        /// </summary>
        public ServerFarmStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private ServerFarmWorkerSize _workerSize;
        
        /// <summary>
        /// The instance size. Possible values are Small, Medium, or Large.
        /// </summary>
        public ServerFarmWorkerSize WorkerSize
        {
            get { return this._workerSize; }
            set { this._workerSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServerFarmCreateResponse class.
        /// </summary>
        public ServerFarmCreateResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Server Farm operation response.
    /// </summary>
    public partial class ServerFarmGetResponse : OperationResponse
    {
        private int _currentNumberOfWorkers;
        
        /// <summary>
        /// The current number of Virtual Machines (VMs) in the server farm.
        /// </summary>
        public int CurrentNumberOfWorkers
        {
            get { return this._currentNumberOfWorkers; }
            set { this._currentNumberOfWorkers = value; }
        }
        
        private ServerFarmWorkerSize _currentWorkerSize;
        
        /// <summary>
        /// The current worker size Possible values are Small, Medium, or Large.
        /// </summary>
        public ServerFarmWorkerSize CurrentWorkerSize
        {
            get { return this._currentWorkerSize; }
            set { this._currentWorkerSize = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the server farm.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private int _numberOfWorkers;
        
        /// <summary>
        /// The instance count, which is the number of virtual machines
        /// dedicated to the farm. Supported values are 1-10.
        /// </summary>
        public int NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private ServerFarmStatus _status;
        
        /// <summary>
        /// Server farm status. Possible values are Ready or Pending.
        /// </summary>
        public ServerFarmStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private ServerFarmWorkerSize _workerSize;
        
        /// <summary>
        /// The instance size. Possible values are Small, Medium, or Large.
        /// </summary>
        public ServerFarmWorkerSize WorkerSize
        {
            get { return this._workerSize; }
            set { this._workerSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServerFarmGetResponse class.
        /// </summary>
        public ServerFarmGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The List Server Farm operation response.
    /// </summary>
    public partial class ServerFarmListResponse : OperationResponse, IEnumerable<ServerFarmListResponse.ServerFarm>
    {
        private IList<ServerFarmListResponse.ServerFarm> _serverFarms;
        
        /// <summary>
        /// The server farms associated with the specified subscription.
        /// </summary>
        public IList<ServerFarmListResponse.ServerFarm> ServerFarms
        {
            get { return this._serverFarms; }
            set { this._serverFarms = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServerFarmListResponse class.
        /// </summary>
        public ServerFarmListResponse()
        {
            this._serverFarms = new List<ServerFarmListResponse.ServerFarm>();
        }
        
        /// <summary>
        /// Gets the sequence of ServerFarms.
        /// </summary>
        public IEnumerator<ServerFarmListResponse.ServerFarm> GetEnumerator()
        {
            return this.ServerFarms.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of ServerFarms.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// A server farm associated with the specified subscription.
        /// </summary>
        public partial class ServerFarm
        {
            private int _currentNumberOfWorkers;
            
            /// <summary>
            /// The current number of Virtual Machines (VMs) in the server farm.
            /// </summary>
            public int CurrentNumberOfWorkers
            {
                get { return this._currentNumberOfWorkers; }
                set { this._currentNumberOfWorkers = value; }
            }
            
            private ServerFarmWorkerSize _currentWorkerSize;
            
            /// <summary>
            /// The current worker size Possible values are Small, Medium, or
            /// Large.
            /// </summary>
            public ServerFarmWorkerSize CurrentWorkerSize
            {
                get { return this._currentWorkerSize; }
                set { this._currentWorkerSize = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the server farm.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private int _numberOfWorkers;
            
            /// <summary>
            /// The instance count, which is the number of virtual machines
            /// dedicated to the farm. Supported values are 1-10.
            /// </summary>
            public int NumberOfWorkers
            {
                get { return this._numberOfWorkers; }
                set { this._numberOfWorkers = value; }
            }
            
            private ServerFarmStatus _status;
            
            /// <summary>
            /// Server farm status. Possible values are Ready or Pending.
            /// </summary>
            public ServerFarmStatus Status
            {
                get { return this._status; }
                set { this._status = value; }
            }
            
            private ServerFarmWorkerSize _workerSize;
            
            /// <summary>
            /// The instance size. Possible values are Small, Medium, or Large.
            /// </summary>
            public ServerFarmWorkerSize WorkerSize
            {
                get { return this._workerSize; }
                set { this._workerSize = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ServerFarm class.
            /// </summary>
            public ServerFarm()
            {
            }
        }
    }
    
    public enum ServerFarmStatus
    {
        Ready = 0,
        
        Pending = 1,
    }
    
    /// <summary>
    /// Parameters supplied to the Update Server Farm operation.
    /// </summary>
    public partial class ServerFarmUpdateParameters
    {
        private int? _currentNumberOfWorkers;
        
        /// <summary>
        /// The current number of Virtual Machines (VMs) in the server farm.
        /// </summary>
        public int? CurrentNumberOfWorkers
        {
            get { return this._currentNumberOfWorkers; }
            set { this._currentNumberOfWorkers = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.ServerFarmWorkerSize? _currentWorkerSize;
        
        /// <summary>
        /// The current worker size Possible values are Small, Medium, or Large.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.ServerFarmWorkerSize? CurrentWorkerSize
        {
            get { return this._currentWorkerSize; }
            set { this._currentWorkerSize = value; }
        }
        
        private int _numberOfWorkers;
        
        /// <summary>
        /// The instance count, which is the number of virtual machines
        /// dedicated to the farm. Supported values are 1-10.
        /// </summary>
        public int NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.ServerFarmStatus? _status;
        
        /// <summary>
        /// Server farm status. Possible values are Ready or Pending.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.ServerFarmStatus? Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private ServerFarmWorkerSize _workerSize;
        
        /// <summary>
        /// The instance size. Possible values are Small, Medium, or Large.
        /// </summary>
        public ServerFarmWorkerSize WorkerSize
        {
            get { return this._workerSize; }
            set { this._workerSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServerFarmUpdateParameters class.
        /// </summary>
        public ServerFarmUpdateParameters()
        {
        }
    }
    
    /// <summary>
    /// The Update Server Farm operation response.
    /// </summary>
    public partial class ServerFarmUpdateResponse : OperationResponse
    {
        private int _currentNumberOfWorkers;
        
        /// <summary>
        /// The current number of Virtual Machines (VMs) in the server farm.
        /// </summary>
        public int CurrentNumberOfWorkers
        {
            get { return this._currentNumberOfWorkers; }
            set { this._currentNumberOfWorkers = value; }
        }
        
        private ServerFarmWorkerSize _currentWorkerSize;
        
        /// <summary>
        /// The current worker size Possible values are Small, Medium, or Large.
        /// </summary>
        public ServerFarmWorkerSize CurrentWorkerSize
        {
            get { return this._currentWorkerSize; }
            set { this._currentWorkerSize = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the server farm.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private int _numberOfWorkers;
        
        /// <summary>
        /// The instance count, which is the number of virtual machines
        /// dedicated to the farm. Supported values are 1-10.
        /// </summary>
        public int NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private ServerFarmStatus _status;
        
        /// <summary>
        /// Server farm status. Possible values are Ready or Pending.
        /// </summary>
        public ServerFarmStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private ServerFarmWorkerSize _workerSize;
        
        /// <summary>
        /// The instance size. Possible values are Small, Medium, or Large.
        /// </summary>
        public ServerFarmWorkerSize WorkerSize
        {
            get { return this._workerSize; }
            set { this._workerSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ServerFarmUpdateResponse class.
        /// </summary>
        public ServerFarmUpdateResponse()
        {
        }
    }
    
    public enum ServerFarmWorkerSize
    {
        Small = 0,
        
        Medium = 1,
        
        Large = 2,
    }
    
    /// <summary>
    /// Describes a website.
    /// </summary>
    public partial class WebSite
    {
        private bool _adminEnabled;
        
        /// <summary>
        /// Read-only. This value is always true.
        /// </summary>
        public bool AdminEnabled
        {
            get { return this._adminEnabled; }
            set { this._adminEnabled = value; }
        }
        
        private WebSpaceAvailabilityState _availabilityState;
        
        /// <summary>
        /// The state of the availability of management information for the
        /// site. Possible values are Normal or Limited. Normal means that the
        /// site is running correctly and that management information for the
        /// site is available. Limited means that only partial management
        /// information for the site is available and that detailed site
        /// information is unavailable.
        /// </summary>
        public WebSpaceAvailabilityState AvailabilityState
        {
            get { return this._availabilityState; }
            set { this._availabilityState = value; }
        }
        
        private WebSiteComputeMode _computeMode;
        
        /// <summary>
        /// The Compute Mode for the web site. Possible values are Shared or
        /// Dedicated.
        /// </summary>
        public WebSiteComputeMode ComputeMode
        {
            get { return this._computeMode; }
            set { this._computeMode = value; }
        }
        
        private bool _enabled;
        
        /// <summary>
        /// true if the site is enabled; otherwise, false. Setting this value
        /// to false disables the site (takes the site off line).
        /// </summary>
        public bool Enabled
        {
            get { return this._enabled; }
            set { this._enabled = value; }
        }
        
        private IList<string> _enabledHostNames;
        
        /// <summary>
        /// An array of strings that contains enabled hostnames for the site.
        /// By default, these are [SiteName].azurewebsites.net and
        /// [SiteName].scm.azurewebsites.net.
        /// </summary>
        public IList<string> EnabledHostNames
        {
            get { return this._enabledHostNames; }
            set { this._enabledHostNames = value; }
        }
        
        private IList<string> _hostNames;
        
        /// <summary>
        /// An array of strings that contains the public hostnames for the
        /// site, including custom domains. Important: When you add a custom
        /// domain in a PUT operation, be sure to include every hostname that
        /// you want for the web site. To delete a custom domain name in a PUT
        /// operation, include all of the hostnames for the site that you want
        /// to keep, but leave out the one that you wangt to delete.
        /// </summary>
        public IList<string> HostNames
        {
            get { return this._hostNames; }
            set { this._hostNames = value; }
        }
        
        private IList<WebSite.WebSiteHostNameSslState> _hostNameSslStates;
        
        /// <summary>
        /// SSL states bound to the website.
        /// </summary>
        public IList<WebSite.WebSiteHostNameSslState> HostNameSslStates
        {
            get { return this._hostNameSslStates; }
            set { this._hostNameSslStates = value; }
        }
        
        private DateTime _lastModifiedTimeUtc;
        
        /// <summary>
        /// A dateTime value that contains, in Coordinated Universal Time, the
        /// last time the web site was modified.
        /// </summary>
        public DateTime LastModifiedTimeUtc
        {
            get { return this._lastModifiedTimeUtc; }
            set { this._lastModifiedTimeUtc = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the web site.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _owner;
        
        /// <summary>
        /// Owner of the web site.
        /// </summary>
        public string Owner
        {
            get { return this._owner; }
            set { this._owner = value; }
        }
        
        private string _repositorySiteName;
        
        /// <summary>
        /// The name of the repository web site.
        /// </summary>
        public string RepositorySiteName
        {
            get { return this._repositorySiteName; }
            set { this._repositorySiteName = value; }
        }
        
        private WebSiteRuntimeAvailabilityState _runtimeAvailabilityState;
        
        /// <summary>
        /// Possible values are Normal, Degraded, or NotAvailable. Normal: the
        /// web site is running correctly. Degraded: the web site is running
        /// temporarily in a degraded mode (typically with less memory and a
        /// shared instance.) Not Available: due to an unexpected issue, the
        /// site has been excluded from provisioning. This typically occurs
        /// only for free sites.
        /// </summary>
        public WebSiteRuntimeAvailabilityState RuntimeAvailabilityState
        {
            get { return this._runtimeAvailabilityState; }
            set { this._runtimeAvailabilityState = value; }
        }
        
        private string _serverFarm;
        
        /// <summary>
        /// String. If a server farm exists, this value is DefaultServerFarm.
        /// </summary>
        public string ServerFarm
        {
            get { return this._serverFarm; }
            set { this._serverFarm = value; }
        }
        
        private WebSiteMode _siteMode;
        
        /// <summary>
        /// String that represents the web site mode. If the web site mode is
        /// Free, this value is Limited. If the web site mode is Shared, this
        /// value is Basic.  Note: The SiteMode value is not used for Reserved
        /// mode. Reserved mode uses the ComputeMode setting.
        /// </summary>
        public WebSiteMode SiteMode
        {
            get { return this._siteMode; }
            set { this._siteMode = value; }
        }
        
        private WebSite.WebSiteProperties _siteProperties;
        
        /// <summary>
        /// Contains AppSettings, Metadata, and Properties for a site.
        /// </summary>
        public WebSite.WebSiteProperties SiteProperties
        {
            get { return this._siteProperties; }
            set { this._siteProperties = value; }
        }
        
        private IList<WebSite.WebSiteSslCertificate> _sslCertificates;
        
        /// <summary>
        /// SSL certificates bound to the web site.
        /// </summary>
        public IList<WebSite.WebSiteSslCertificate> SslCertificates
        {
            get { return this._sslCertificates; }
            set { this._sslCertificates = value; }
        }
        
        private WebSiteState _state;
        
        /// <summary>
        /// A string that describes the state of the web site. Possible values
        /// are Stopped or Running.
        /// </summary>
        public WebSiteState State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private Uri _uri;
        
        /// <summary>
        /// Direct URL to the web site endpoint on Windows Azure Web Sites,
        /// including the subscription ID, webspace name, and site name.
        /// </summary>
        public Uri Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }
        
        private WebSiteUsageState _usageState;
        
        /// <summary>
        /// Possible values are Normal or Exceeded. If any quota is exceeded,
        /// the UsageState value changes to Exceeded and the site goes off
        /// line.
        /// </summary>
        public WebSiteUsageState UsageState
        {
            get { return this._usageState; }
            set { this._usageState = value; }
        }
        
        private string _webSpace;
        
        /// <summary>
        /// The name of the webspace in which the web site is located. This
        /// property is read-only.
        /// </summary>
        public string WebSpace
        {
            get { return this._webSpace; }
            set { this._webSpace = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSite class.
        /// </summary>
        public WebSite()
        {
            this._enabledHostNames = new List<string>();
            this._hostNames = new List<string>();
            this._hostNameSslStates = new List<WebSite.WebSiteHostNameSslState>();
            this._sslCertificates = new List<WebSite.WebSiteSslCertificate>();
        }
        
        /// <summary>
        /// SSL states bound to a website.
        /// </summary>
        public partial class WebSiteHostNameSslState
        {
            private string _name;
            
            /// <summary>
            /// The URL of the web site.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private WebSiteSslState _sslState;
            
            /// <summary>
            /// The SSL state. Possible values are Disabled, SniEnabled, or
            /// IpBasedEnabled.
            /// </summary>
            public WebSiteSslState SslState
            {
                get { return this._sslState; }
                set { this._sslState = value; }
            }
            
            private string _thumbprint;
            
            /// <summary>
            /// A string that contains the thumbprint of the SSL certificate.
            /// </summary>
            public string Thumbprint
            {
                get { return this._thumbprint; }
                set { this._thumbprint = value; }
            }
            
            private string _virtualIP;
            
            /// <summary>
            /// String. The IP address assigned to the hostname if the hostname
            /// uses IP SSL.
            /// </summary>
            public string VirtualIP
            {
                get { return this._virtualIP; }
                set { this._virtualIP = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the WebSiteHostNameSslState class.
            /// </summary>
            public WebSiteHostNameSslState()
            {
            }
        }
        
        public partial class WebSiteProperties
        {
            private IDictionary<string, string> _appSettings;
            
            /// <summary>
            /// A set of name/value pairs that contain application settings for
            /// a site.
            /// </summary>
            public IDictionary<string, string> AppSettings
            {
                get { return this._appSettings; }
                set { this._appSettings = value; }
            }
            
            private IDictionary<string, string> _metadata;
            
            /// <summary>
            /// A set of name/value pairs that contain metadata information for
            /// a site.
            /// </summary>
            public IDictionary<string, string> Metadata
            {
                get { return this._metadata; }
                set { this._metadata = value; }
            }
            
            private IDictionary<string, string> _properties;
            
            /// <summary>
            /// A set of name/value pairs that contain properties for a site.
            /// </summary>
            public IDictionary<string, string> Properties
            {
                get { return this._properties; }
                set { this._properties = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the WebSiteProperties class.
            /// </summary>
            public WebSiteProperties()
            {
                this._appSettings = new Dictionary<string, string>();
                this._metadata = new Dictionary<string, string>();
                this._properties = new Dictionary<string, string>();
            }
        }
        
        /// <summary>
        /// Contains SSL certificate properties.
        /// </summary>
        public partial class WebSiteSslCertificate
        {
            private DateTime _expirationDate;
            
            /// <summary>
            /// A dateTime value that contains the expiration date of the
            /// certificate.
            /// </summary>
            public DateTime ExpirationDate
            {
                get { return this._expirationDate; }
                set { this._expirationDate = value; }
            }
            
            private string _friendlyName;
            
            /// <summary>
            /// A string that contains the friendly name of the certificate.
            /// </summary>
            public string FriendlyName
            {
                get { return this._friendlyName; }
                set { this._friendlyName = value; }
            }
            
            private IList<string> _hostNames;
            
            /// <summary>
            /// An array of strings that contain the hostnames to which the
            /// certificate is bound.
            /// </summary>
            public IList<string> HostNames
            {
                get { return this._hostNames; }
                set { this._hostNames = value; }
            }
            
            private DateTime _issueDate;
            
            /// <summary>
            /// A dateTime value that contains the date that the certificate
            /// was issued.
            /// </summary>
            public DateTime IssueDate
            {
                get { return this._issueDate; }
                set { this._issueDate = value; }
            }
            
            private string _issuer;
            
            /// <summary>
            /// A string that identifies the issuer of the certificate.
            /// </summary>
            public string Issuer
            {
                get { return this._issuer; }
                set { this._issuer = value; }
            }
            
            private bool _isToBeDeleted;
            
            /// <summary>
            /// Boolean. true if the certificate is to be deleted.
            /// </summary>
            public bool IsToBeDeleted
            {
                get { return this._isToBeDeleted; }
                set { this._isToBeDeleted = value; }
            }
            
            private bool _isValid;
            
            /// <summary>
            /// Boolean. true if the certificate is valid; otherwise, false.
            /// </summary>
            public bool IsValid
            {
                get { return this._isValid; }
                set { this._isValid = value; }
            }
            
            private string _password;
            
            /// <summary>
            /// A string that contains the password for the certificate.
            /// </summary>
            public string Password
            {
                get { return this._password; }
                set { this._password = value; }
            }
            
            private byte[] _pfxBlob;
            
            /// <summary>
            /// A base64Binary value that contains the PfxBlob of the
            /// certificate.
            /// </summary>
            public byte[] PfxBlob
            {
                get { return this._pfxBlob; }
                set { this._pfxBlob = value; }
            }
            
            private Uri _selfLinkUri;
            
            /// <summary>
            /// An anyURI value that contains the endpoint of the site to which
            /// the certificate is bound.
            /// </summary>
            public Uri SelfLinkUri
            {
                get { return this._selfLinkUri; }
                set { this._selfLinkUri = value; }
            }
            
            private string _siteName;
            
            /// <summary>
            /// A string that contains the name of the site to which the
            /// certificate is bound.
            /// </summary>
            public string SiteName
            {
                get { return this._siteName; }
                set { this._siteName = value; }
            }
            
            private string _subjectName;
            
            /// <summary>
            /// A string that contains the name of the entity to whom the
            /// certificate was issued.
            /// </summary>
            public string SubjectName
            {
                get { return this._subjectName; }
                set { this._subjectName = value; }
            }
            
            private string _thumbprint;
            
            /// <summary>
            /// A string that contains the certificate thumbprint.
            /// </summary>
            public string Thumbprint
            {
                get { return this._thumbprint; }
                set { this._thumbprint = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the WebSiteSslCertificate class.
            /// </summary>
            public WebSiteSslCertificate()
            {
                this._hostNames = new List<string>();
            }
        }
    }
    
    /// <summary>
    /// The compute mode for a website.
    /// </summary>
    public enum WebSiteComputeMode
    {
        Shared = 0,
        
        Dedicated = 1,
    }
    
    /// <summary>
    /// Parameters supplied to the Create Web Site operation.
    /// </summary>
    public partial class WebSiteCreateParameters
    {
        private Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteComputeMode? _computeMode;
        
        /// <summary>
        /// This value should be Shared for the Free or Paid Shared offerings,
        /// or Dedicated for the Standard offering. The default value is
        /// Shared. If you set ComputeMode to Dedicated, you must specify a
        /// value for the ServerFarm element.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteComputeMode? ComputeMode
        {
            get { return this._computeMode; }
            set { this._computeMode = value; }
        }
        
        private IList<string> _hostNames;
        
        /// <summary>
        /// Required. The fully qualified domain name for website. Only one
        /// hostname can be specified in the azurewebsites.net domain. The
        /// hostname should match the name of the website. Custom domains can
        /// only be specified for Shared or Standard websites.
        /// </summary>
        public IList<string> HostNames
        {
            get { return this._hostNames; }
            set { this._hostNames = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Required. The name of the website. This should match the hostname
        /// in the default domain.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _serverFarm;
        
        /// <summary>
        /// The name of the Server Farm associated with this website. This is a
        /// required value for Standard mode.
        /// </summary>
        public string ServerFarm
        {
            get { return this._serverFarm; }
            set { this._serverFarm = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteMode? _siteMode;
        
        /// <summary>
        /// This value is limited for the Free offering Basic for the Paid
        /// Shared offering. The default value is Limited. Note: Standard mode
        /// does not use the SiteMode setting; it uses the ComputeMode
        /// setting. For more information, see Upgrade or Downgrade a Web Site.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteMode? SiteMode
        {
            get { return this._siteMode; }
            set { this._siteMode = value; }
        }
        
        private WebSiteCreateParameters.WebSpaceDetails _webSpace;
        
        /// <summary>
        /// Information about the web space to create.
        /// </summary>
        public WebSiteCreateParameters.WebSpaceDetails WebSpace
        {
            get { return this._webSpace; }
            set { this._webSpace = value; }
        }
        
        private string _webSpaceName;
        
        /// <summary>
        /// The name of the webspace
        /// </summary>
        public string WebSpaceName
        {
            get { return this._webSpaceName; }
            set { this._webSpaceName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteCreateParameters class.
        /// </summary>
        public WebSiteCreateParameters()
        {
            this._hostNames = new List<string>();
        }
        
        /// <summary>
        /// Information about the web space to create.
        /// </summary>
        public partial class WebSpaceDetails
        {
            private string _geoRegion;
            
            /// <summary>
            /// Required. The geographical region of the webspace that will be
            /// created.
            /// </summary>
            public string GeoRegion
            {
                get { return this._geoRegion; }
                set { this._geoRegion = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// Required. The name of the webspace.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _plan;
            
            /// <summary>
            /// Required. This value must be VirtualDedicatedPlan.
            /// </summary>
            public string Plan
            {
                get { return this._plan; }
                set { this._plan = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the WebSpaceDetails class.
            /// </summary>
            public WebSpaceDetails()
            {
            }
        }
    }
    
    /// <summary>
    /// The Create Web Space operation response.
    /// </summary>
    public partial class WebSiteCreateResponse : OperationResponse
    {
        private WebSite _webSite;
        
        /// <summary>
        /// Details of the created website.
        /// </summary>
        public WebSite WebSite
        {
            get { return this._webSite; }
            set { this._webSite = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteCreateResponse class.
        /// </summary>
        public WebSiteCreateResponse()
        {
        }
    }
    
    /// <summary>
    /// The Delete Web Site Repository operation response.
    /// </summary>
    public partial class WebSiteDeleteRepositoryResponse : OperationResponse
    {
        private Uri _uri;
        
        /// <summary>
        /// Contains the URI of the web site repository.
        /// </summary>
        public Uri Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteDeleteRepositoryResponse
        /// class.
        /// </summary>
        public WebSiteDeleteRepositoryResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Web Site Configuration operation response.
    /// </summary>
    public partial class WebSiteGetConfigurationResponse : OperationResponse
    {
        private IDictionary<string, string> _appSettings;
        
        /// <summary>
        /// A set of name/value pairs that contain application settings for a
        /// site.
        /// </summary>
        public IDictionary<string, string> AppSettings
        {
            get { return this._appSettings; }
            set { this._appSettings = value; }
        }
        
        private IList<WebSiteGetConfigurationResponse.ConnectionStringInfo> _connectionStrings;
        
        /// <summary>
        /// Contains connection strings for database and other external
        /// resources.
        /// </summary>
        public IList<WebSiteGetConfigurationResponse.ConnectionStringInfo> ConnectionStrings
        {
            get { return this._connectionStrings; }
            set { this._connectionStrings = value; }
        }
        
        private IList<string> _defaultDocuments;
        
        /// <summary>
        /// Contains one or more string elements that list, in order of
        /// preference, the name of the file that a web site returns when the
        /// web site's domain name is requested by itself. For example, if the
        /// default document for http://contoso.com is default.htm, the page
        /// http://www.contoso.com/default.htm is returned when the browser is
        /// pointed to http://www.contoso.com.
        /// </summary>
        public IList<string> DefaultDocuments
        {
            get { return this._defaultDocuments; }
            set { this._defaultDocuments = value; }
        }
        
        private bool _detailedErrorLoggingEnabled;
        
        /// <summary>
        /// True if detailed error logging is enabled; otherwise, false.
        /// </summary>
        public bool DetailedErrorLoggingEnabled
        {
            get { return this._detailedErrorLoggingEnabled; }
            set { this._detailedErrorLoggingEnabled = value; }
        }
        
        private IList<WebSiteGetConfigurationResponse.HandlerMapping> _handlerMappings;
        
        /// <summary>
        /// Specifies custom executable programs for handling requests for
        /// specific file name extensions.
        /// </summary>
        public IList<WebSiteGetConfigurationResponse.HandlerMapping> HandlerMappings
        {
            get { return this._handlerMappings; }
            set { this._handlerMappings = value; }
        }
        
        private bool _httpLoggingEnabled;
        
        /// <summary>
        /// True if HTTP error logging is enabled; otherwise, false.
        /// </summary>
        public bool HttpLoggingEnabled
        {
            get { return this._httpLoggingEnabled; }
            set { this._httpLoggingEnabled = value; }
        }
        
        private ManagedPipelineMode _managedPipelineMode;
        
        /// <summary>
        /// Managed pipeline modes.
        /// </summary>
        public ManagedPipelineMode ManagedPipelineMode
        {
            get { return this._managedPipelineMode; }
            set { this._managedPipelineMode = value; }
        }
        
        private IDictionary<string, string> _metadata;
        
        /// <summary>
        /// Contains name/value pairs for source control or other information.
        /// </summary>
        public IDictionary<string, string> Metadata
        {
            get { return this._metadata; }
            set { this._metadata = value; }
        }
        
        private string _netFrameworkVersion;
        
        /// <summary>
        /// The .NET Framework version. Supported values are v2.0 and v4.0.
        /// </summary>
        public string NetFrameworkVersion
        {
            get { return this._netFrameworkVersion; }
            set { this._netFrameworkVersion = value; }
        }
        
        private int _numberOfWorkers;
        
        /// <summary>
        /// The number of web workers allotted to the web site. If the site
        /// mode is Free, this value is 1. If the site mode is Shared, this
        /// value can range from 1 through 6. If the site mode is Standard,
        /// this value can range from 1 through 10.
        /// </summary>
        public int NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private string _phpVersion;
        
        /// <summary>
        /// Supported values are an empty string (an empty string disables
        /// PHP), 5.3, and 5.4.
        /// </summary>
        public string PhpVersion
        {
            get { return this._phpVersion; }
            set { this._phpVersion = value; }
        }
        
        private string _publishingPassword;
        
        /// <summary>
        /// Hash value of the password used for publishing the web site.
        /// </summary>
        public string PublishingPassword
        {
            get { return this._publishingPassword; }
            set { this._publishingPassword = value; }
        }
        
        private string _publishingUserName;
        
        /// <summary>
        /// The username used for publishing the web site. This is normally a
        /// dollar sign prepended to the web site name (for example,
        /// “$contoso”).
        /// </summary>
        public string PublishingUserName
        {
            get { return this._publishingUserName; }
            set { this._publishingUserName = value; }
        }
        
        private bool _remoteDebuggingEnabled;
        
        /// <summary>
        /// True remote debugging is enabled; otherwise, false.
        /// </summary>
        public bool RemoteDebuggingEnabled
        {
            get { return this._remoteDebuggingEnabled; }
            set { this._remoteDebuggingEnabled = value; }
        }
        
        private string _remoteDebuggingVersion;
        
        /// <summary>
        /// True remote debugging version.
        /// </summary>
        public string RemoteDebuggingVersion
        {
            get { return this._remoteDebuggingVersion; }
            set { this._remoteDebuggingVersion = value; }
        }
        
        private bool _requestTracingEnabled;
        
        /// <summary>
        /// True if request tracing is enabled; otherwise, false.
        /// </summary>
        public bool RequestTracingEnabled
        {
            get { return this._requestTracingEnabled; }
            set { this._requestTracingEnabled = value; }
        }
        
        private System.DateTime? _requestTracingExpirationTime;
        
        /// <summary>
        /// Time remaining until request tracing expires.
        /// </summary>
        public System.DateTime? RequestTracingExpirationTime
        {
            get { return this._requestTracingExpirationTime; }
            set { this._requestTracingExpirationTime = value; }
        }
        
        private string _scmType;
        
        /// <summary>
        /// The source control method that the web site is using (for example,
        /// Local Git). If deployment from source control has not been set up
        /// for the web site, this value is None.
        /// </summary>
        public string ScmType
        {
            get { return this._scmType; }
            set { this._scmType = value; }
        }
        
        private bool _use32BitWorkerProcess;
        
        /// <summary>
        /// True if 32-bit mode is enabled; otherwise, false.
        /// </summary>
        public bool Use32BitWorkerProcess
        {
            get { return this._use32BitWorkerProcess; }
            set { this._use32BitWorkerProcess = value; }
        }
        
        private bool _webSocketsEnabled;
        
        /// <summary>
        /// True if Web Sockets are enabled; otherwise, false.
        /// </summary>
        public bool WebSocketsEnabled
        {
            get { return this._webSocketsEnabled; }
            set { this._webSocketsEnabled = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetConfigurationResponse
        /// class.
        /// </summary>
        public WebSiteGetConfigurationResponse()
        {
            this._appSettings = new Dictionary<string, string>();
            this._connectionStrings = new List<WebSiteGetConfigurationResponse.ConnectionStringInfo>();
            this._defaultDocuments = new List<string>();
            this._handlerMappings = new List<WebSiteGetConfigurationResponse.HandlerMapping>();
            this._metadata = new Dictionary<string, string>();
        }
        
        /// <summary>
        /// Connection string for database and other external resources.
        /// </summary>
        public partial class ConnectionStringInfo
        {
            private string _connectionString;
            
            /// <summary>
            /// A database connection string.
            /// </summary>
            public string ConnectionString
            {
                get { return this._connectionString; }
                set { this._connectionString = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the connection string.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// The type of the connection string (for example, "MySQL").
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ConnectionStringInfo class.
            /// </summary>
            public ConnectionStringInfo()
            {
            }
        }
        
        /// <summary>
        /// Specifies a custom executable program for handling requests for
        /// specific file name extensions.
        /// </summary>
        public partial class HandlerMapping
        {
            private string _arguments;
            
            /// <summary>
            /// A string that contains optional arguments for the script
            /// processor specified by the
            /// SiteConfig.HandlerMappings.HandlerMapping.ScriptProcessor
            /// element.
            /// </summary>
            public string Arguments
            {
                get { return this._arguments; }
                set { this._arguments = value; }
            }
            
            private string _extension;
            
            /// <summary>
            /// A string that specifies the extension of the file type that the
            /// script processor will handle (for example, *.php).
            /// </summary>
            public string Extension
            {
                get { return this._extension; }
                set { this._extension = value; }
            }
            
            private string _scriptProcessor;
            
            /// <summary>
            /// The absolute path to the location of the executable file that
            /// will handle the files specified in the
            /// SiteConfig.HandlerMappings.HandlerMapping.Extension element.
            /// </summary>
            public string ScriptProcessor
            {
                get { return this._scriptProcessor; }
                set { this._scriptProcessor = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the HandlerMapping class.
            /// </summary>
            public HandlerMapping()
            {
            }
        }
    }
    
    /// <summary>
    /// The Get Web Site Historical Usage Metrics parameters.
    /// </summary>
    public partial class WebSiteGetHistoricalUsageMetricsParameters
    {
        private System.DateTime? _endTime;
        
        /// <summary>
        /// The ending time of the metrics to return. If this parameter is not
        /// specified, the current time is used.
        /// </summary>
        public System.DateTime? EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private IList<string> _metricNames;
        
        /// <summary>
        /// Specifies a comma-separated list of the names of the metrics to
        /// return. If the names parameter is not specified, then all
        /// available metrics are returned.
        /// </summary>
        public IList<string> MetricNames
        {
            get { return this._metricNames; }
            set { this._metricNames = value; }
        }
        
        private System.DateTime? _startTime;
        
        /// <summary>
        /// The starting time of the metrics to return. If this parameter is
        /// not specified, the beginning of the current hour is used.
        /// </summary>
        public System.DateTime? StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSiteGetHistoricalUsageMetricsParameters class.
        /// </summary>
        public WebSiteGetHistoricalUsageMetricsParameters()
        {
            this._metricNames = new List<string>();
        }
    }
    
    /// <summary>
    /// The Get Web Site Historical Usage Metrics operation response.
    /// </summary>
    public partial class WebSiteGetHistoricalUsageMetricsResponse : OperationResponse, IEnumerable<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric>
    {
        private IList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric> _usageMetrics;
        
        /// <summary>
        /// Historical metric snapshots for the web site.
        /// </summary>
        public IList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric> UsageMetrics
        {
            get { return this._usageMetrics; }
            set { this._usageMetrics = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSiteGetHistoricalUsageMetricsResponse class.
        /// </summary>
        public WebSiteGetHistoricalUsageMetricsResponse()
        {
            this._usageMetrics = new List<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric>();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        public IEnumerator<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric> GetEnumerator()
        {
            return this.UsageMetrics.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Historical metric snapshot for the web site.
        /// </summary>
        public partial class HistoricalUsageMetric
        {
            private string _code;
            
            /// <summary>
            /// Reports whether the metric data was returned successfully.
            /// </summary>
            public string Code
            {
                get { return this._code; }
                set { this._code = value; }
            }
            
            private WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData _data;
            
            /// <summary>
            /// Historical metric snapshot data for the web site.
            /// </summary>
            public WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData Data
            {
                get { return this._data; }
                set { this._data = value; }
            }
            
            private string _message;
            
            /// <summary>
            /// A string for optional message content.
            /// </summary>
            public string Message
            {
                get { return this._message; }
                set { this._message = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the HistoricalUsageMetric class.
            /// </summary>
            public HistoricalUsageMetric()
            {
            }
        }
        
        /// <summary>
        /// Historical metric snapshot data for the web site.
        /// </summary>
        public partial class HistoricalUsageMetricData
        {
            private string _displayName;
            
            /// <summary>
            /// The display name of the metric, including spaces.
            /// </summary>
            public string DisplayName
            {
                get { return this._displayName; }
                set { this._displayName = value; }
            }
            
            private DateTime _endTime;
            
            /// <summary>
            /// The end time of the data reported.
            /// </summary>
            public DateTime EndTime
            {
                get { return this._endTime; }
                set { this._endTime = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the metric.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _primaryAggregationType;
            
            /// <summary>
            /// The primary data aggregation type. This value is usually Total.
            /// </summary>
            public string PrimaryAggregationType
            {
                get { return this._primaryAggregationType; }
                set { this._primaryAggregationType = value; }
            }
            
            private DateTime _startTime;
            
            /// <summary>
            /// The start time of the data reported.
            /// </summary>
            public DateTime StartTime
            {
                get { return this._startTime; }
                set { this._startTime = value; }
            }
            
            private string _timeGrain;
            
            /// <summary>
            /// Length of time (rollup) during which the information was
            /// gathered. For more information, see Supported Rollups.
            /// </summary>
            public string TimeGrain
            {
                get { return this._timeGrain; }
                set { this._timeGrain = value; }
            }
            
            private string _unit;
            
            /// <summary>
            /// The unit of measurement for the metric (for example,
            /// milliseconds, bytes, or count).
            /// </summary>
            public string Unit
            {
                get { return this._unit; }
                set { this._unit = value; }
            }
            
            private IList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample> _values;
            
            /// <summary>
            /// One or more MetricSample elements.
            /// </summary>
            public IList<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample> Values
            {
                get { return this._values; }
                set { this._values = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the HistoricalUsageMetricData
            /// class.
            /// </summary>
            public HistoricalUsageMetricData()
            {
                this._values = new List<WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample>();
            }
        }
        
        /// <summary>
        /// Historical metric snapshot data sample.
        /// </summary>
        public partial class HistoricalUsageMetricSample
        {
            private int _count;
            
            /// <summary>
            /// The metric sample count. This value is usually 1.
            /// </summary>
            public int Count
            {
                get { return this._count; }
                set { this._count = value; }
            }
            
            private string _maximum;
            
            /// <summary>
            /// Maximum value recorded.
            /// </summary>
            public string Maximum
            {
                get { return this._maximum; }
                set { this._maximum = value; }
            }
            
            private string _minimum;
            
            /// <summary>
            /// Minimum value recorded.
            /// </summary>
            public string Minimum
            {
                get { return this._minimum; }
                set { this._minimum = value; }
            }
            
            private DateTime _timeCreated;
            
            /// <summary>
            /// Time the metric was taken.
            /// </summary>
            public DateTime TimeCreated
            {
                get { return this._timeCreated; }
                set { this._timeCreated = value; }
            }
            
            private string _total;
            
            /// <summary>
            /// Value of the metric sample for the time taken.
            /// </summary>
            public string Total
            {
                get { return this._total; }
                set { this._total = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the HistoricalUsageMetricSample
            /// class.
            /// </summary>
            public HistoricalUsageMetricSample()
            {
            }
        }
    }
    
    /// <summary>
    /// The Get Web Site operation parameters.
    /// </summary>
    public partial class WebSiteGetParameters
    {
        private IList<string> _propertiesToInclude;
        
        /// <summary>
        /// Specifies a list of the names of any addtional parameters to return
        /// </summary>
        public IList<string> PropertiesToInclude
        {
            get { return this._propertiesToInclude; }
            set { this._propertiesToInclude = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetParameters class.
        /// </summary>
        public WebSiteGetParameters()
        {
            this._propertiesToInclude = new List<string>();
        }
    }
    
    /// <summary>
    /// The Get Web Site Publish Profile operation response.
    /// </summary>
    public partial class WebSiteGetPublishProfileResponse : OperationResponse, IEnumerable<WebSiteGetPublishProfileResponse.PublishProfile>
    {
        private IList<WebSiteGetPublishProfileResponse.PublishProfile> _publishProfiles;
        
        /// <summary>
        /// Contains one or more publish profiles.
        /// </summary>
        public IList<WebSiteGetPublishProfileResponse.PublishProfile> PublishProfiles
        {
            get { return this._publishProfiles; }
            set { this._publishProfiles = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetPublishProfileResponse
        /// class.
        /// </summary>
        public WebSiteGetPublishProfileResponse()
        {
            this._publishProfiles = new List<WebSiteGetPublishProfileResponse.PublishProfile>();
        }
        
        /// <summary>
        /// Gets the sequence of PublishProfiles.
        /// </summary>
        public IEnumerator<WebSiteGetPublishProfileResponse.PublishProfile> GetEnumerator()
        {
            return this.PublishProfiles.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of PublishProfiles.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Contains attributes that contain information for a single database
        /// connection.
        /// </summary>
        public partial class Database
        {
            private string _connectionString;
            
            /// <summary>
            /// Contains a database connection string.
            /// </summary>
            public string ConnectionString
            {
                get { return this._connectionString; }
                set { this._connectionString = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// Contains the friendly name of the connection string.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _providerName;
            
            /// <summary>
            /// Contains the type of database provider (for example, "SQL" or
            /// "MySQL").
            /// </summary>
            public string ProviderName
            {
                get { return this._providerName; }
                set { this._providerName = value; }
            }
            
            private string _type;
            
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Database class.
            /// </summary>
            public Database()
            {
            }
        }
        
        /// <summary>
        /// Contains attributes that hold publish profile values.
        /// </summary>
        public partial class PublishProfile
        {
            private Uri _controlPanelUri;
            
            /// <summary>
            /// The URL of the control panel for the web site.
            /// </summary>
            public Uri ControlPanelUri
            {
                get { return this._controlPanelUri; }
                set { this._controlPanelUri = value; }
            }
            
            private IList<WebSiteGetPublishProfileResponse.Database> _databases;
            
            /// <summary>
            /// Contains connection information for the databases used by the
            /// web site application.
            /// </summary>
            public IList<WebSiteGetPublishProfileResponse.Database> Databases
            {
                get { return this._databases; }
                set { this._databases = value; }
            }
            
            private Uri _destinationAppUri;
            
            /// <summary>
            /// The URL of the website that will be published to.
            /// </summary>
            public Uri DestinationAppUri
            {
                get { return this._destinationAppUri; }
                set { this._destinationAppUri = value; }
            }
            
            private bool _ftpPassiveMode;
            
            /// <summary>
            /// True or False depending on whether FTP passive mode is being
            /// used. This attribute applies only if publishMethod is set to
            /// FTP.
            /// </summary>
            public bool FtpPassiveMode
            {
                get { return this._ftpPassiveMode; }
                set { this._ftpPassiveMode = value; }
            }
            
            private Uri _hostingProviderForumUri;
            
            /// <summary>
            /// The URL of the forum of the hosting provider.
            /// </summary>
            public Uri HostingProviderForumUri
            {
                get { return this._hostingProviderForumUri; }
                set { this._hostingProviderForumUri = value; }
            }
            
            private string _mSDeploySite;
            
            /// <summary>
            /// The name of the site that will be published to. This attribute
            /// applies only if publishMethod is set to MSDeploy.
            /// </summary>
            public string MSDeploySite
            {
                get { return this._mSDeploySite; }
                set { this._mSDeploySite = value; }
            }
            
            private string _mySqlConnectionString;
            
            /// <summary>
            /// The MySQL database connection string for the web site
            /// application, if the web site connects to a MySQL database.
            /// </summary>
            public string MySqlConnectionString
            {
                get { return this._mySqlConnectionString; }
                set { this._mySqlConnectionString = value; }
            }
            
            private string _profileName;
            
            /// <summary>
            /// The unique name of the publish profile.
            /// </summary>
            public string ProfileName
            {
                get { return this._profileName; }
                set { this._profileName = value; }
            }
            
            private string _publishMethod;
            
            /// <summary>
            /// The publish method, such as MSDeploy or FTP.
            /// </summary>
            public string PublishMethod
            {
                get { return this._publishMethod; }
                set { this._publishMethod = value; }
            }
            
            private string _publishUrl;
            
            /// <summary>
            /// The URL to which content will be uploaded.
            /// </summary>
            public string PublishUrl
            {
                get { return this._publishUrl; }
                set { this._publishUrl = value; }
            }
            
            private string _sqlServerConnectionString;
            
            /// <summary>
            /// The SQL Server database connection string for the web site
            /// application, if the web site connects to a SQL Server database.
            /// </summary>
            public string SqlServerConnectionString
            {
                get { return this._sqlServerConnectionString; }
                set { this._sqlServerConnectionString = value; }
            }
            
            private string _userName;
            
            /// <summary>
            /// The name for the identity that will be used for publishing.
            /// </summary>
            public string UserName
            {
                get { return this._userName; }
                set { this._userName = value; }
            }
            
            private string _userPassword;
            
            /// <summary>
            /// Hash value of the password that will be used for publishing.
            /// </summary>
            public string UserPassword
            {
                get { return this._userPassword; }
                set { this._userPassword = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the PublishProfile class.
            /// </summary>
            public PublishProfile()
            {
                this._databases = new List<WebSiteGetPublishProfileResponse.Database>();
            }
        }
    }
    
    /// <summary>
    /// The Get Web Site Repository operation response.
    /// </summary>
    public partial class WebSiteGetRepositoryResponse : OperationResponse
    {
        private Uri _uri;
        
        /// <summary>
        /// Contains the URI of the web site repository.
        /// </summary>
        public Uri Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetRepositoryResponse
        /// class.
        /// </summary>
        public WebSiteGetRepositoryResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Web Site Details operation response.
    /// </summary>
    public partial class WebSiteGetResponse : OperationResponse
    {
        private WebSite _webSite;
        
        /// <summary>
        /// Details for the requested website.
        /// </summary>
        public WebSite WebSite
        {
            get { return this._webSite; }
            set { this._webSite = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetResponse class.
        /// </summary>
        public WebSiteGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Web Site Usage Metrics operation response.
    /// </summary>
    public partial class WebSiteGetUsageMetricsResponse : OperationResponse, IEnumerable<WebSiteGetUsageMetricsResponse.UsageMetric>
    {
        private IList<WebSiteGetUsageMetricsResponse.UsageMetric> _usageMetrics;
        
        /// <summary>
        /// The usage metrics for the web site.
        /// </summary>
        public IList<WebSiteGetUsageMetricsResponse.UsageMetric> UsageMetrics
        {
            get { return this._usageMetrics; }
            set { this._usageMetrics = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetUsageMetricsResponse
        /// class.
        /// </summary>
        public WebSiteGetUsageMetricsResponse()
        {
            this._usageMetrics = new List<WebSiteGetUsageMetricsResponse.UsageMetric>();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        public IEnumerator<WebSiteGetUsageMetricsResponse.UsageMetric> GetEnumerator()
        {
            return this.UsageMetrics.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// A specific usage metric.
        /// </summary>
        public partial class UsageMetric
        {
            private WebSiteComputeMode _computeMode;
            
            /// <summary>
            /// The compute mode of the web site. For web sites in Standard
            /// Mode, the return value is Dedicated. For web sites in Free or
            /// Shared mode, the return value is Shared.
            /// </summary>
            public WebSiteComputeMode ComputeMode
            {
                get { return this._computeMode; }
                set { this._computeMode = value; }
            }
            
            private string _currentValue;
            
            /// <summary>
            /// The current value of the metric specified, expressed in terms
            /// of the measurement specified by the Unit element.
            /// </summary>
            public string CurrentValue
            {
                get { return this._currentValue; }
                set { this._currentValue = value; }
            }
            
            private string _displayName;
            
            /// <summary>
            /// The display name of the metric (includes spaces).
            /// </summary>
            public string DisplayName
            {
                get { return this._displayName; }
                set { this._displayName = value; }
            }
            
            private string _limit;
            
            /// <summary>
            /// The maximum point that the given metric can reach. The limit
            /// resets at the time specified by the NextResetTime element. If
            /// the limit is reached before the reset time, the site will be
            /// stopped. A value of -1 means unlimited. Resources with limits
            /// typically include CPU Time, Memory Usage, and File System
            /// Storage. Important: Site level Limits information is only
            /// meaningful for Shared and Standard web sites. For free web
            /// sites, limits are enforced at the webspace level.
            /// </summary>
            public string Limit
            {
                get { return this._limit; }
                set { this._limit = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the metric, without spaces. The value is usually
            /// the same as that of the ResourceName element.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private DateTime _nextResetTime;
            
            /// <summary>
            /// The time at which the metric will be reset.
            /// </summary>
            public DateTime NextResetTime
            {
                get { return this._nextResetTime; }
                set { this._nextResetTime = value; }
            }
            
            private string _resourceName;
            
            /// <summary>
            /// The name of the resource being measured.
            /// </summary>
            public string ResourceName
            {
                get { return this._resourceName; }
                set { this._resourceName = value; }
            }
            
            private WebSiteMode _siteMode;
            
            /// <summary>
            /// The scaling for the web site. Web sites in Free Mode return a
            /// value of Limited. Web sites in Shared Mode return a value of
            /// Basic. Sites in Standard Mode return null.
            /// </summary>
            public WebSiteMode SiteMode
            {
                get { return this._siteMode; }
                set { this._siteMode = value; }
            }
            
            private string _unit;
            
            /// <summary>
            /// The unit of measure for the given metric.
            /// </summary>
            public string Unit
            {
                get { return this._unit; }
                set { this._unit = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the UsageMetric class.
            /// </summary>
            public UsageMetric()
            {
            }
        }
    }
    
    /// <summary>
    /// The List Web Sites operation parameters.
    /// </summary>
    public partial class WebSiteListParameters
    {
        private IList<string> _propertiesToInclude;
        
        /// <summary>
        /// Specifies a list of the names of any addtional parameters to return
        /// </summary>
        public IList<string> PropertiesToInclude
        {
            get { return this._propertiesToInclude; }
            set { this._propertiesToInclude = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteListParameters class.
        /// </summary>
        public WebSiteListParameters()
        {
            this._propertiesToInclude = new List<string>();
        }
    }
    
    /// <summary>
    /// The operation mode of a website.
    /// </summary>
    public enum WebSiteMode
    {
        /// <summary>
        /// This value is Limited for the Free offering.  The default value is
        /// Limited.
        /// </summary>
        Limited = 0,
        
        /// <summary>
        /// Basic for the Paid Shared offering.
        /// </summary>
        Basic = 1,
    }
    
    /// <summary>
    /// The runtime availability of a website.
    /// </summary>
    public enum WebSiteRuntimeAvailabilityState
    {
        /// <summary>
        /// The web site is running correctly.
        /// </summary>
        Normal = 0,
        
        /// <summary>
        /// The web site is running temporarily in a degraded mode (typically
        /// with less memory and a shared instance).
        /// </summary>
        Degraded = 1,
        
        /// <summary>
        /// Due to an unexpected issue, the site has been excluded from
        /// provisioning. This typically occurs only for free sites.
        /// </summary>
        NotAvailable = 2,
    }
    
    /// <summary>
    /// A web site's SSL state.
    /// </summary>
    public enum WebSiteSslState
    {
        Disabled = 0,
        
        SniEnabled = 1,
        
        IpBasedEnabled = 2,
    }
    
    /// <summary>
    /// The state of the website.
    /// </summary>
    public enum WebSiteState
    {
        Stopped = 0,
        
        Running = 1,
    }
    
    /// <summary>
    /// The Update Web Site Configuration parameters.
    /// </summary>
    public partial class WebSiteUpdateConfigurationParameters
    {
        private IDictionary<string, string> _appSettings;
        
        /// <summary>
        /// A set of name/value pairs that contain application settings for a
        /// site.
        /// </summary>
        public IDictionary<string, string> AppSettings
        {
            get { return this._appSettings; }
            set { this._appSettings = value; }
        }
        
        private IList<WebSiteUpdateConfigurationParameters.ConnectionStringInfo> _connectionStrings;
        
        /// <summary>
        /// Contains connection strings for database and other external
        /// resources.
        /// </summary>
        public IList<WebSiteUpdateConfigurationParameters.ConnectionStringInfo> ConnectionStrings
        {
            get { return this._connectionStrings; }
            set { this._connectionStrings = value; }
        }
        
        private IList<string> _defaultDocuments;
        
        /// <summary>
        /// Contains one or more string elements that list, in order of
        /// preference, the name of the file that a web site returns when the
        /// web site's domain name is requested by itself. For example, if the
        /// default document for http://contoso.com is default.htm, the page
        /// http://www.contoso.com/default.htm is returned when the browser is
        /// pointed to http://www.contoso.com.
        /// </summary>
        public IList<string> DefaultDocuments
        {
            get { return this._defaultDocuments; }
            set { this._defaultDocuments = value; }
        }
        
        private bool? _detailedErrorLoggingEnabled;
        
        /// <summary>
        /// True if detailed error logging is enabled; otherwise, false.
        /// </summary>
        public bool? DetailedErrorLoggingEnabled
        {
            get { return this._detailedErrorLoggingEnabled; }
            set { this._detailedErrorLoggingEnabled = value; }
        }
        
        private IList<WebSiteUpdateConfigurationParameters.HandlerMapping> _handlerMappings;
        
        /// <summary>
        /// Specifies custom executable programs for handling requests for
        /// specific file name extensions.
        /// </summary>
        public IList<WebSiteUpdateConfigurationParameters.HandlerMapping> HandlerMappings
        {
            get { return this._handlerMappings; }
            set { this._handlerMappings = value; }
        }
        
        private bool? _httpLoggingEnabled;
        
        /// <summary>
        /// True if HTTP error logging is enabled; otherwise, false.
        /// </summary>
        public bool? HttpLoggingEnabled
        {
            get { return this._httpLoggingEnabled; }
            set { this._httpLoggingEnabled = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.ManagedPipelineMode? _managedPipelineMode;
        
        /// <summary>
        /// Managed pipeline modes.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.ManagedPipelineMode? ManagedPipelineMode
        {
            get { return this._managedPipelineMode; }
            set { this._managedPipelineMode = value; }
        }
        
        private IDictionary<string, string> _metadata;
        
        /// <summary>
        /// Contains name/value pairs for source control or other information.
        /// </summary>
        public IDictionary<string, string> Metadata
        {
            get { return this._metadata; }
            set { this._metadata = value; }
        }
        
        private string _netFrameworkVersion;
        
        /// <summary>
        /// The .NET Framework version. Supported values are v2.0 and v4.0.
        /// </summary>
        public string NetFrameworkVersion
        {
            get { return this._netFrameworkVersion; }
            set { this._netFrameworkVersion = value; }
        }
        
        private int? _numberOfWorkers;
        
        /// <summary>
        /// The number of web workers allotted to the web site. If the site
        /// mode is Free, this value is 1. If the site mode is Shared, this
        /// value can range from 1 through 6. If the site mode is Standard,
        /// this value can range from 1 through 10.
        /// </summary>
        public int? NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private string _phpVersion;
        
        /// <summary>
        /// Supported values are an empty string (an empty string disables
        /// PHP), 5.3, and 5.4.
        /// </summary>
        public string PhpVersion
        {
            get { return this._phpVersion; }
            set { this._phpVersion = value; }
        }
        
        private string _publishingPassword;
        
        /// <summary>
        /// Hash value of the password used for publishing the web site.
        /// </summary>
        public string PublishingPassword
        {
            get { return this._publishingPassword; }
            set { this._publishingPassword = value; }
        }
        
        private string _publishingUserName;
        
        /// <summary>
        /// The username used for publishing the web site. This is normally a
        /// dollar sign prepended to the web site name (for example,
        /// “$contoso”).
        /// </summary>
        public string PublishingUserName
        {
            get { return this._publishingUserName; }
            set { this._publishingUserName = value; }
        }
        
        private bool? _remoteDebuggingEnabled;
        
        /// <summary>
        /// True remote debugging is enabled; otherwise, false.
        /// </summary>
        public bool? RemoteDebuggingEnabled
        {
            get { return this._remoteDebuggingEnabled; }
            set { this._remoteDebuggingEnabled = value; }
        }
        
        private string _remoteDebuggingVersion;
        
        /// <summary>
        /// True remote debugging version.
        /// </summary>
        public string RemoteDebuggingVersion
        {
            get { return this._remoteDebuggingVersion; }
            set { this._remoteDebuggingVersion = value; }
        }
        
        private bool? _requestTracingEnabled;
        
        /// <summary>
        /// True if request tracing is enabled; otherwise, false.
        /// </summary>
        public bool? RequestTracingEnabled
        {
            get { return this._requestTracingEnabled; }
            set { this._requestTracingEnabled = value; }
        }
        
        private System.DateTime? _requestTracingExpirationTime;
        
        /// <summary>
        /// Time remaining until request tracing expires.
        /// </summary>
        public System.DateTime? RequestTracingExpirationTime
        {
            get { return this._requestTracingExpirationTime; }
            set { this._requestTracingExpirationTime = value; }
        }
        
        private string _scmType;
        
        /// <summary>
        /// The source control method that the web site is using (for example,
        /// Local Git). If deployment from source control has not been set up
        /// for the web site, this value is None.
        /// </summary>
        public string ScmType
        {
            get { return this._scmType; }
            set { this._scmType = value; }
        }
        
        private bool? _use32BitWorkerProcess;
        
        /// <summary>
        /// True if 32-bit mode is enabled; otherwise, false.
        /// </summary>
        public bool? Use32BitWorkerProcess
        {
            get { return this._use32BitWorkerProcess; }
            set { this._use32BitWorkerProcess = value; }
        }
        
        private bool? _webSocketsEnabled;
        
        /// <summary>
        /// True if Web Sockets are enabled; otherwise, false.
        /// </summary>
        public bool? WebSocketsEnabled
        {
            get { return this._webSocketsEnabled; }
            set { this._webSocketsEnabled = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSiteUpdateConfigurationParameters class.
        /// </summary>
        public WebSiteUpdateConfigurationParameters()
        {
            this._appSettings = new Dictionary<string, string>();
            this._connectionStrings = new List<WebSiteUpdateConfigurationParameters.ConnectionStringInfo>();
            this._defaultDocuments = new List<string>();
            this._handlerMappings = new List<WebSiteUpdateConfigurationParameters.HandlerMapping>();
            this._metadata = new Dictionary<string, string>();
        }
        
        /// <summary>
        /// Connection string for database and other external resources.
        /// </summary>
        public partial class ConnectionStringInfo
        {
            private string _connectionString;
            
            /// <summary>
            /// A database connection string.
            /// </summary>
            public string ConnectionString
            {
                get { return this._connectionString; }
                set { this._connectionString = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the connection string.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// The type of the connection string (for example, "MySQL").
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ConnectionStringInfo class.
            /// </summary>
            public ConnectionStringInfo()
            {
            }
        }
        
        /// <summary>
        /// Specifies a custom executable program for handling requests for
        /// specific file name extensions.
        /// </summary>
        public partial class HandlerMapping
        {
            private string _arguments;
            
            /// <summary>
            /// A string that contains optional arguments for the script
            /// processor specified by the
            /// SiteConfig.HandlerMappings.HandlerMapping.ScriptProcessor
            /// element.
            /// </summary>
            public string Arguments
            {
                get { return this._arguments; }
                set { this._arguments = value; }
            }
            
            private string _extension;
            
            /// <summary>
            /// A string that specifies the extension of the file type that the
            /// script processor will handle (for example, *.php).
            /// </summary>
            public string Extension
            {
                get { return this._extension; }
                set { this._extension = value; }
            }
            
            private string _scriptProcessor;
            
            /// <summary>
            /// The absolute path to the location of the executable file that
            /// will handle the files specified in the
            /// SiteConfig.HandlerMappings.HandlerMapping.Extension element.
            /// </summary>
            public string ScriptProcessor
            {
                get { return this._scriptProcessor; }
                set { this._scriptProcessor = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the HandlerMapping class.
            /// </summary>
            public HandlerMapping()
            {
            }
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Update Web Site operation.
    /// </summary>
    public partial class WebSiteUpdateParameters
    {
        private Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceAvailabilityState? _availabilityState;
        
        /// <summary>
        /// The state of the availability of management information for the
        /// site. Possible values are Normal or Limited. Normal means that the
        /// site is running correctly and that management information for the
        /// site is available. Limited means that only partial management
        /// information for the site is available and that detailed site
        /// information is unavailable.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceAvailabilityState? AvailabilityState
        {
            get { return this._availabilityState; }
            set { this._availabilityState = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteComputeMode? _computeMode;
        
        /// <summary>
        /// The Compute Mode for the web site. Possible values are Shared or
        /// Dedicated.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteComputeMode? ComputeMode
        {
            get { return this._computeMode; }
            set { this._computeMode = value; }
        }
        
        private bool? _enabled;
        
        /// <summary>
        /// true if the site is enabled; otherwise, false. Setting this value
        /// to false disables the site (takes the site off line).
        /// </summary>
        public bool? Enabled
        {
            get { return this._enabled; }
            set { this._enabled = value; }
        }
        
        private IList<string> _hostNames;
        
        /// <summary>
        /// An array of strings that contains the public hostnames for the
        /// site, including custom domains. Important: When you add a custom
        /// domain in a PUT operation, be sure to include every hostname that
        /// you want for the web site. To delete a custom domain name in a PUT
        /// operation, include all of the hostnames for the site that you want
        /// to keep, but leave out the one that you wangt to delete.
        /// </summary>
        public IList<string> HostNames
        {
            get { return this._hostNames; }
            set { this._hostNames = value; }
        }
        
        private IList<WebSiteUpdateParameters.WebSiteHostNameSslState> _hostNameSslStates;
        
        /// <summary>
        /// SSL states bound to the website.
        /// </summary>
        public IList<WebSiteUpdateParameters.WebSiteHostNameSslState> HostNameSslStates
        {
            get { return this._hostNameSslStates; }
            set { this._hostNameSslStates = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteRuntimeAvailabilityState? _runtimeAvailabilityState;
        
        /// <summary>
        /// Possible values are Normal, Degraded, or NotAvailable. Normal: the
        /// web site is running correctly. Degraded: the web site is running
        /// temporarily in a degraded mode (typically with less memory and a
        /// shared instance.) Not Available: due to an unexpected issue, the
        /// site has been excluded from provisioning. This typically occurs
        /// only for free sites.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteRuntimeAvailabilityState? RuntimeAvailabilityState
        {
            get { return this._runtimeAvailabilityState; }
            set { this._runtimeAvailabilityState = value; }
        }
        
        private string _serverFarm;
        
        /// <summary>
        /// String. If a server farm exists, this value is DefaultServerFarm.
        /// </summary>
        public string ServerFarm
        {
            get { return this._serverFarm; }
            set { this._serverFarm = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteMode? _siteMode;
        
        /// <summary>
        /// String that represents the web site mode. If the web site mode is
        /// Free, this value is Limited. If the web site mode is Shared, this
        /// value is Basic.  Note: The SiteMode value is not used for Reserved
        /// mode. Reserved mode uses the ComputeMode setting.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteMode? SiteMode
        {
            get { return this._siteMode; }
            set { this._siteMode = value; }
        }
        
        private IList<WebSiteUpdateParameters.WebSiteSslCertificate> _sslCertificates;
        
        /// <summary>
        /// SSL certificates bound to the web site.
        /// </summary>
        public IList<WebSiteUpdateParameters.WebSiteSslCertificate> SslCertificates
        {
            get { return this._sslCertificates; }
            set { this._sslCertificates = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteState? _state;
        
        /// <summary>
        /// A string that describes the state of the web site. Possible values
        /// are Stopped or Running.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteState? State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteUpdateParameters class.
        /// </summary>
        public WebSiteUpdateParameters()
        {
            this._hostNames = new List<string>();
            this._hostNameSslStates = new List<WebSiteUpdateParameters.WebSiteHostNameSslState>();
            this._sslCertificates = new List<WebSiteUpdateParameters.WebSiteSslCertificate>();
        }
        
        /// <summary>
        /// SSL states bound to a website.
        /// </summary>
        public partial class WebSiteHostNameSslState
        {
            private Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteSslState? _sslState;
            
            /// <summary>
            /// The SSL state. Possible values are Disabled, SniEnabled, or
            /// IpBasedEnabled.
            /// </summary>
            public Microsoft.WindowsAzure.Management.WebSites.Models.WebSiteSslState? SslState
            {
                get { return this._sslState; }
                set { this._sslState = value; }
            }
            
            private string _thumbprint;
            
            /// <summary>
            /// A string that contains the thumbprint of the SSL certificate.
            /// </summary>
            public string Thumbprint
            {
                get { return this._thumbprint; }
                set { this._thumbprint = value; }
            }
            
            private bool? _toUpdate;
            
            public bool? ToUpdate
            {
                get { return this._toUpdate; }
                set { this._toUpdate = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the WebSiteHostNameSslState class.
            /// </summary>
            public WebSiteHostNameSslState()
            {
            }
        }
        
        /// <summary>
        /// Contains SSL certificate properties.
        /// </summary>
        public partial class WebSiteSslCertificate
        {
            private bool? _isToBeDeleted;
            
            /// <summary>
            /// Boolean. true if the certificate is to be deleted.
            /// </summary>
            public bool? IsToBeDeleted
            {
                get { return this._isToBeDeleted; }
                set { this._isToBeDeleted = value; }
            }
            
            private string _password;
            
            /// <summary>
            /// A string that contains the password for the certificate.
            /// </summary>
            public string Password
            {
                get { return this._password; }
                set { this._password = value; }
            }
            
            private byte[] _pfxBlob;
            
            /// <summary>
            /// A base64Binary value that contains the PfxBlob of the
            /// certificate.
            /// </summary>
            public byte[] PfxBlob
            {
                get { return this._pfxBlob; }
                set { this._pfxBlob = value; }
            }
            
            private string _thumbprint;
            
            /// <summary>
            /// A string that contains the certificate thumbprint.
            /// </summary>
            public string Thumbprint
            {
                get { return this._thumbprint; }
                set { this._thumbprint = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the WebSiteSslCertificate class.
            /// </summary>
            public WebSiteSslCertificate()
            {
            }
        }
    }
    
    /// <summary>
    /// The Update Web Site operation response.
    /// </summary>
    public partial class WebSiteUpdateResponse : OperationResponse
    {
        private WebSite _webSite;
        
        /// <summary>
        /// Details of the updated website.
        /// </summary>
        public WebSite WebSite
        {
            get { return this._webSite; }
            set { this._webSite = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteUpdateResponse class.
        /// </summary>
        public WebSiteUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// Usage of a website's quota.
    /// </summary>
    public enum WebSiteUsageState
    {
        Normal = 0,
        
        Exceeded = 1,
    }
    
    /// <summary>
    /// The availability of a web space.
    /// </summary>
    public enum WebSpaceAvailabilityState
    {
        Normal = 0,
        
        Limited = 1,
    }
    
    public static partial class WebSpaceNames
    {
        public const string EastUSWebSpace = "eastuswebspace";
        
        public const string WestUSWebSpace = "westuswebspace";
        
        public const string NorthCentralUSWebSpace = "northcentraluswebspace";
        
        public const string NorthEuropeWebSpace = "northeuropewebspace";
        
        public const string WestEuropeWebSpace = "westeuropewebspace";
        
        public const string EastAsiaWebSpace = "eastasiawebspace";
    }
    
    /// <summary>
    /// A web space plan.
    /// </summary>
    public static partial class WebSpacePlanNames
    {
        public const string VirtualDedicatedPlan = "VirtualDedicatedPlan";
    }
    
    /// <summary>
    /// Parameters supplied to the Create Publishing User operation.
    /// </summary>
    public partial class WebSpacesCreatePublishingUserParameters
    {
        private string _name;
        
        /// <summary>
        /// Optional. The publishing user name
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _publishingPassword;
        
        /// <summary>
        /// Required. The publishing user password
        /// </summary>
        public string PublishingPassword
        {
            get { return this._publishingPassword; }
            set { this._publishingPassword = value; }
        }
        
        private string _publishingUserName;
        
        /// <summary>
        /// Required. The publishing user username
        /// </summary>
        public string PublishingUserName
        {
            get { return this._publishingUserName; }
            set { this._publishingUserName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSpacesCreatePublishingUserParameters class.
        /// </summary>
        public WebSpacesCreatePublishingUserParameters()
        {
        }
    }
    
    /// <summary>
    /// The Create Publishing User operation response.
    /// </summary>
    public partial class WebSpacesCreatePublishingUserResponse : OperationResponse
    {
        private string _name;
        
        /// <summary>
        /// The publishing user name
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _publishingPassword;
        
        /// <summary>
        /// The publishing user password
        /// </summary>
        public string PublishingPassword
        {
            get { return this._publishingPassword; }
            set { this._publishingPassword = value; }
        }
        
        private string _publishingUserName;
        
        /// <summary>
        /// The publishing user username
        /// </summary>
        public string PublishingUserName
        {
            get { return this._publishingUserName; }
            set { this._publishingUserName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSpacesCreatePublishingUserResponse class.
        /// </summary>
        public WebSpacesCreatePublishingUserResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get DNS Suffix operation response.
    /// </summary>
    public partial class WebSpacesGetDnsSuffixResponse : OperationResponse
    {
        private string _dnsSuffix;
        
        /// <summary>
        /// The DNS Suffix used for the web space
        /// </summary>
        public string DnsSuffix
        {
            get { return this._dnsSuffix; }
            set { this._dnsSuffix = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSpacesGetDnsSuffixResponse
        /// class.
        /// </summary>
        public WebSpacesGetDnsSuffixResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Web Space Details operation response.
    /// </summary>
    public partial class WebSpacesGetResponse : OperationResponse
    {
        private WebSpaceAvailabilityState _availabilityState;
        
        /// <summary>
        /// Possible values are Normal or Limited.
        /// </summary>
        public WebSpaceAvailabilityState AvailabilityState
        {
            get { return this._availabilityState; }
            set { this._availabilityState = value; }
        }
        
        private int? _currentNumberOfWorkers;
        
        /// <summary>
        /// The current number of workers.
        /// </summary>
        public int? CurrentNumberOfWorkers
        {
            get { return this._currentNumberOfWorkers; }
            set { this._currentNumberOfWorkers = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceWorkerSize? _currentWorkerSize;
        
        /// <summary>
        /// The current worker size. Possible values are Small, Medium, or
        /// Large.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceWorkerSize? CurrentWorkerSize
        {
            get { return this._currentWorkerSize; }
            set { this._currentWorkerSize = value; }
        }
        
        private string _geoLocation;
        
        /// <summary>
        /// The location of the datacenter for the web space.
        /// </summary>
        public string GeoLocation
        {
            get { return this._geoLocation; }
            set { this._geoLocation = value; }
        }
        
        private string _geoRegion;
        
        /// <summary>
        /// The geographical region where the webspace is located.
        /// </summary>
        public string GeoRegion
        {
            get { return this._geoRegion; }
            set { this._geoRegion = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the webspace.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _plan;
        
        /// <summary>
        /// The name of the webspace.
        /// </summary>
        public string Plan
        {
            get { return this._plan; }
            set { this._plan = value; }
        }
        
        private WebSpaceStatus _status;
        
        /// <summary>
        /// The status of the Web Space. Possible values are Ready or Limited.
        /// Note: The Limited status occurs only if the datacenter is
        /// encountering an operational issue.
        /// </summary>
        public WebSpaceStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _subscription;
        
        /// <summary>
        /// The subscription ID.
        /// </summary>
        public string Subscription
        {
            get { return this._subscription; }
            set { this._subscription = value; }
        }
        
        private Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceWorkerSize? _workerSize;
        
        /// <summary>
        /// The worker size. Possible values are Small, Medium, and Large. For
        /// JSON, the equivalents are 0 = Small, 1 = Medium, 2 = Large.
        /// </summary>
        public Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceWorkerSize? WorkerSize
        {
            get { return this._workerSize; }
            set { this._workerSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSpacesGetResponse class.
        /// </summary>
        public WebSpacesGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get DNS Suffix operation response.
    /// </summary>
    public partial class WebSpacesListGeoRegionsResponse : OperationResponse, IEnumerable<WebSpacesListGeoRegionsResponse.GeoRegion>
    {
        private IList<WebSpacesListGeoRegionsResponse.GeoRegion> _geoRegions;
        
        /// <summary>
        /// The available geo regions
        /// </summary>
        public IList<WebSpacesListGeoRegionsResponse.GeoRegion> GeoRegions
        {
            get { return this._geoRegions; }
            set { this._geoRegions = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSpacesListGeoRegionsResponse
        /// class.
        /// </summary>
        public WebSpacesListGeoRegionsResponse()
        {
            this._geoRegions = new List<WebSpacesListGeoRegionsResponse.GeoRegion>();
        }
        
        /// <summary>
        /// Gets the sequence of GeoRegions.
        /// </summary>
        public IEnumerator<WebSpacesListGeoRegionsResponse.GeoRegion> GetEnumerator()
        {
            return this.GeoRegions.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of GeoRegions.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// An available geo region for a web space
        /// </summary>
        public partial class GeoRegion
        {
            private string _description;
            
            /// <summary>
            /// Geo Region description
            /// </summary>
            public string Description
            {
                get { return this._description; }
                set { this._description = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// Name of the region
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private int _sortOrder;
            
            /// <summary>
            /// Sort order
            /// </summary>
            public int SortOrder
            {
                get { return this._sortOrder; }
                set { this._sortOrder = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the GeoRegion class.
            /// </summary>
            public GeoRegion()
            {
            }
        }
    }
    
    /// <summary>
    /// The List Publishing Users operation response.
    /// </summary>
    public partial class WebSpacesListPublishingUsersResponse : OperationResponse, IEnumerable<WebSpacesListPublishingUsersResponse.User>
    {
        private IList<WebSpacesListPublishingUsersResponse.User> _users;
        
        /// <summary>
        /// The publishing users
        /// </summary>
        public IList<WebSpacesListPublishingUsersResponse.User> Users
        {
            get { return this._users; }
            set { this._users = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSpacesListPublishingUsersResponse class.
        /// </summary>
        public WebSpacesListPublishingUsersResponse()
        {
            this._users = new List<WebSpacesListPublishingUsersResponse.User>();
        }
        
        /// <summary>
        /// Gets the sequence of Users.
        /// </summary>
        public IEnumerator<WebSpacesListPublishingUsersResponse.User> GetEnumerator()
        {
            return this.Users.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of Users.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Information about a single publishing user
        /// </summary>
        public partial class User
        {
            private string _name;
            
            /// <summary>
            /// The publishing user name
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the User class.
            /// </summary>
            public User()
            {
            }
        }
    }
    
    /// <summary>
    /// The List Web Spaces operation response.
    /// </summary>
    public partial class WebSpacesListResponse : OperationResponse, IEnumerable<WebSpacesListResponse.WebSpace>
    {
        private IList<WebSpacesListResponse.WebSpace> _webSpaces;
        
        /// <summary>
        /// The web spaces associated with the specified subscription.
        /// </summary>
        public IList<WebSpacesListResponse.WebSpace> WebSpaces
        {
            get { return this._webSpaces; }
            set { this._webSpaces = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSpacesListResponse class.
        /// </summary>
        public WebSpacesListResponse()
        {
            this._webSpaces = new List<WebSpacesListResponse.WebSpace>();
        }
        
        /// <summary>
        /// Gets the sequence of WebSpaces.
        /// </summary>
        public IEnumerator<WebSpacesListResponse.WebSpace> GetEnumerator()
        {
            return this.WebSpaces.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of WebSpaces.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// A web space associated with the specified subscription.
        /// </summary>
        public partial class WebSpace
        {
            private WebSpaceAvailabilityState _availabilityState;
            
            /// <summary>
            /// Possible values are Normal or Limited.
            /// </summary>
            public WebSpaceAvailabilityState AvailabilityState
            {
                get { return this._availabilityState; }
                set { this._availabilityState = value; }
            }
            
            private int? _currentNumberOfWorkers;
            
            /// <summary>
            /// The current number of workers.
            /// </summary>
            public int? CurrentNumberOfWorkers
            {
                get { return this._currentNumberOfWorkers; }
                set { this._currentNumberOfWorkers = value; }
            }
            
            private Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceWorkerSize? _currentWorkerSize;
            
            /// <summary>
            /// The current worker size. Possible values are Small, Medium, or
            /// Large.
            /// </summary>
            public Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceWorkerSize? CurrentWorkerSize
            {
                get { return this._currentWorkerSize; }
                set { this._currentWorkerSize = value; }
            }
            
            private string _geoLocation;
            
            /// <summary>
            /// The location of the datacenter for the web space.
            /// </summary>
            public string GeoLocation
            {
                get { return this._geoLocation; }
                set { this._geoLocation = value; }
            }
            
            private string _geoRegion;
            
            /// <summary>
            /// The geographical region where the webspace is located.
            /// </summary>
            public string GeoRegion
            {
                get { return this._geoRegion; }
                set { this._geoRegion = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// The name of the webspace.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _plan;
            
            /// <summary>
            /// The name of the webspace.
            /// </summary>
            public string Plan
            {
                get { return this._plan; }
                set { this._plan = value; }
            }
            
            private WebSpaceStatus _status;
            
            /// <summary>
            /// The status of the Web Space. Possible values are Ready or
            /// Limited.  Note: The Limited status occurs only if the
            /// datacenter is encountering an operational issue.
            /// </summary>
            public WebSpaceStatus Status
            {
                get { return this._status; }
                set { this._status = value; }
            }
            
            private string _subscription;
            
            /// <summary>
            /// The subscription ID.
            /// </summary>
            public string Subscription
            {
                get { return this._subscription; }
                set { this._subscription = value; }
            }
            
            private Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceWorkerSize? _workerSize;
            
            /// <summary>
            /// The worker size. Possible values are Small, Medium, and Large.
            /// For JSON, the equivalents are 0 = Small, 1 = Medium, 2 = Large.
            /// </summary>
            public Microsoft.WindowsAzure.Management.WebSites.Models.WebSpaceWorkerSize? WorkerSize
            {
                get { return this._workerSize; }
                set { this._workerSize = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the WebSpace class.
            /// </summary>
            public WebSpace()
            {
            }
        }
    }
    
    /// <summary>
    /// The List Web Sites operation response.
    /// </summary>
    public partial class WebSpacesListWebSitesResponse : OperationResponse, IEnumerable<WebSite>
    {
        private IList<WebSite> _webSites;
        
        /// <summary>
        /// The websites associated with the specified web space.
        /// </summary>
        public IList<WebSite> WebSites
        {
            get { return this._webSites; }
            set { this._webSites = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSpacesListWebSitesResponse
        /// class.
        /// </summary>
        public WebSpacesListWebSitesResponse()
        {
            this._webSites = new List<WebSite>();
        }
        
        /// <summary>
        /// Gets the sequence of WebSites.
        /// </summary>
        public IEnumerator<WebSite> GetEnumerator()
        {
            return this.WebSites.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of WebSites.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The status of a web space.
    /// </summary>
    public enum WebSpaceStatus
    {
        Ready = 0,
        
        Limited = 1,
    }
    
    /// <summary>
    /// The size of a web space worker.
    /// </summary>
    public enum WebSpaceWorkerSize
    {
        Small = 0,
        
        Medium = 1,
        
        Large = 2,
    }
}

namespace Microsoft.WindowsAzure.Management.WebSites
{
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public partial interface IWebSiteManagementClient
    {
        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the server farm in a web space.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        IServerFarmOperations ServerFarms
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the web sites in a web space.
        /// </summary>
        IWebSiteOperations WebSites
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing web spaces beneath your subscription.
        /// </summary>
        IWebSpaceOperations WebSpaces
        {
            get; 
        }
        
        /// <summary>
        /// Register your subscription to use Windows Azure Web Sites.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> RegisterSubscriptionAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Unregister your subscription to use Windows Azure Web Sites.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UnregisterSubscriptionAsync(CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public static partial class WebSiteManagementClientExtensions
    {
        /// <summary>
        /// Register your subscription to use Windows Azure Web Sites.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RegisterSubscription(this IWebSiteManagementClient operations)
        {
            try
            {
                return operations.RegisterSubscriptionAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Register your subscription to use Windows Azure Web Sites.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RegisterSubscriptionAsync(this IWebSiteManagementClient operations)
        {
            return operations.RegisterSubscriptionAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Unregister your subscription to use Windows Azure Web Sites.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UnregisterSubscription(this IWebSiteManagementClient operations)
        {
            try
            {
                return operations.UnregisterSubscriptionAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Unregister your subscription to use Windows Azure Web Sites.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UnregisterSubscriptionAsync(this IWebSiteManagementClient operations)
        {
            return operations.UnregisterSubscriptionAsync(CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public partial class WebSiteManagementClient : ServiceClient<WebSiteManagementClient>, IWebSiteManagementClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// The URI used as the base for all Service Management requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IServerFarmOperations _serverFarms;
        
        /// <summary>
        /// Operations for managing the server farm in a web space.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        public virtual IServerFarmOperations ServerFarms
        {
            get { return this._serverFarms; }
        }
        
        private IWebSiteOperations _webSites;
        
        /// <summary>
        /// Operations for managing the web sites in a web space.
        /// </summary>
        public virtual IWebSiteOperations WebSites
        {
            get { return this._webSites; }
        }
        
        private IWebSpaceOperations _webSpaces;
        
        /// <summary>
        /// Operations for managing web spaces beneath your subscription.
        /// </summary>
        public virtual IWebSpaceOperations WebSpaces
        {
            get { return this._webSpaces; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteManagementClient class.
        /// </summary>
        private WebSiteManagementClient()
            : base()
        {
            this._serverFarms = new ServerFarmOperations(this);
            this._webSites = new WebSiteOperations(this);
            this._webSpaces = new WebSpaceOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// The URI used as the base for all Service Management requests.
        /// </param>
        public WebSiteManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        public WebSiteManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Register your subscription to use Windows Azure Web Sites.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RegisterSubscriptionAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "RegisterSubscriptionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.BaseUri + "/" + this.Credentials.SubscriptionId + "/services?service=website&action=register";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unregister your subscription to use Windows Azure Web Sites.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UnregisterSubscriptionAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "UnregisterSubscriptionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.BaseUri + "/" + this.Credentials.SubscriptionId + "/services?service=website&action=unregister";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Operations for managing the server farm in a web space.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    /// more information)
    /// </summary>
    public partial interface IServerFarmOperations
    {
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Server Farm operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Server Farm operation response.
        /// </returns>
        Task<ServerFarmCreateResponse> CreateAsync(string webSpaceName, ServerFarmCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string webSpaceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='serverFarmName'>
        /// The name of the server farm.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Server Farm operation response.
        /// </returns>
        Task<ServerFarmGetResponse> GetAsync(string webSpaceName, string serverFarmName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Server Farm operation response.
        /// </returns>
        Task<ServerFarmListResponse> ListAsync(string webSpaceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Server Farm operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Server Farm operation response.
        /// </returns>
        Task<ServerFarmUpdateResponse> UpdateAsync(string webSpaceName, ServerFarmUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the server farm in a web space.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    /// more information)
    /// </summary>
    public static partial class ServerFarmOperationsExtensions
    {
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Server Farm operation.
        /// </param>
        /// <returns>
        /// The Create Server Farm operation response.
        /// </returns>
        public static ServerFarmCreateResponse Create(this IServerFarmOperations operations, string webSpaceName, ServerFarmCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(webSpaceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Server Farm operation.
        /// </param>
        /// <returns>
        /// The Create Server Farm operation response.
        /// </returns>
        public static Task<ServerFarmCreateResponse> CreateAsync(this IServerFarmOperations operations, string webSpaceName, ServerFarmCreateParameters parameters)
        {
            return operations.CreateAsync(webSpaceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IServerFarmOperations operations, string webSpaceName)
        {
            try
            {
                return operations.DeleteAsync(webSpaceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IServerFarmOperations operations, string webSpaceName)
        {
            return operations.DeleteAsync(webSpaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='serverFarmName'>
        /// The name of the server farm.
        /// </param>
        /// <returns>
        /// The Get Server Farm operation response.
        /// </returns>
        public static ServerFarmGetResponse Get(this IServerFarmOperations operations, string webSpaceName, string serverFarmName)
        {
            try
            {
                return operations.GetAsync(webSpaceName, serverFarmName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='serverFarmName'>
        /// The name of the server farm.
        /// </param>
        /// <returns>
        /// The Get Server Farm operation response.
        /// </returns>
        public static Task<ServerFarmGetResponse> GetAsync(this IServerFarmOperations operations, string webSpaceName, string serverFarmName)
        {
            return operations.GetAsync(webSpaceName, serverFarmName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <returns>
        /// The List Server Farm operation response.
        /// </returns>
        public static ServerFarmListResponse List(this IServerFarmOperations operations, string webSpaceName)
        {
            try
            {
                return operations.ListAsync(webSpaceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <returns>
        /// The List Server Farm operation response.
        /// </returns>
        public static Task<ServerFarmListResponse> ListAsync(this IServerFarmOperations operations, string webSpaceName)
        {
            return operations.ListAsync(webSpaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Server Farm operation.
        /// </param>
        /// <returns>
        /// The Update Server Farm operation response.
        /// </returns>
        public static ServerFarmUpdateResponse Update(this IServerFarmOperations operations, string webSpaceName, ServerFarmUpdateParameters parameters)
        {
            try
            {
                return operations.UpdateAsync(webSpaceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IServerFarmOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Server Farm operation.
        /// </param>
        /// <returns>
        /// The Update Server Farm operation response.
        /// </returns>
        public static Task<ServerFarmUpdateResponse> UpdateAsync(this IServerFarmOperations operations, string webSpaceName, ServerFarmUpdateParameters parameters)
        {
            return operations.UpdateAsync(webSpaceName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the server farm in a web space.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
    /// more information)
    /// </summary>
    internal partial class ServerFarmOperations : IServiceOperations<WebSiteManagementClient>, IServerFarmOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServerFarmOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ServerFarmOperations(WebSiteManagementClient client)
        {
            this._client = client;
        }
        
        private WebSiteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.WebSiteManagementClient.
        /// </summary>
        public WebSiteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Server Farm operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Server Farm operation response.
        /// </returns>
        public async Task<ServerFarmCreateResponse> CreateAsync(string webSpaceName, ServerFarmCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/ServerFarms";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serverFarmElement = new XElement(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(serverFarmElement);
                
                if (parameters.CurrentNumberOfWorkers != null)
                {
                    XElement currentNumberOfWorkersElement = new XElement(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                    currentNumberOfWorkersElement.Value = parameters.CurrentNumberOfWorkers.ToString();
                    serverFarmElement.Add(currentNumberOfWorkersElement);
                }
                
                if (parameters.CurrentWorkerSize != null)
                {
                    XElement currentWorkerSizeElement = new XElement(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                    currentWorkerSizeElement.Value = parameters.CurrentWorkerSize.ToString();
                    serverFarmElement.Add(currentWorkerSizeElement);
                }
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = "DefaultServerFarm";
                serverFarmElement.Add(nameElement);
                
                XElement numberOfWorkersElement = new XElement(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                numberOfWorkersElement.Value = parameters.NumberOfWorkers.ToString();
                serverFarmElement.Add(numberOfWorkersElement);
                
                XElement workerSizeElement = new XElement(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                workerSizeElement.Value = parameters.WorkerSize.ToString();
                serverFarmElement.Add(workerSizeElement);
                
                if (parameters.Status != null)
                {
                    XElement statusElement = new XElement(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                    statusElement.Value = parameters.Status.ToString();
                    serverFarmElement.Add(statusElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerFarmCreateResponse result = new ServerFarmCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serverFarmElement2 = responseDoc.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                    if (serverFarmElement2 != null)
                    {
                        XElement currentNumberOfWorkersElement2 = serverFarmElement2.Element(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (currentNumberOfWorkersElement2 != null)
                        {
                            int currentNumberOfWorkersInstance = int.Parse(currentNumberOfWorkersElement2.Value, CultureInfo.InvariantCulture);
                            result.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                        }
                        
                        XElement currentWorkerSizeElement2 = serverFarmElement2.Element(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (currentWorkerSizeElement2 != null)
                        {
                            ServerFarmWorkerSize currentWorkerSizeInstance = (ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), currentWorkerSizeElement2.Value, false);
                            result.CurrentWorkerSize = currentWorkerSizeInstance;
                        }
                        
                        XElement nameElement2 = serverFarmElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance = nameElement2.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement numberOfWorkersElement2 = serverFarmElement2.Element(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (numberOfWorkersElement2 != null)
                        {
                            int numberOfWorkersInstance = int.Parse(numberOfWorkersElement2.Value, CultureInfo.InvariantCulture);
                            result.NumberOfWorkers = numberOfWorkersInstance;
                        }
                        
                        XElement workerSizeElement2 = serverFarmElement2.Element(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (workerSizeElement2 != null)
                        {
                            ServerFarmWorkerSize workerSizeInstance = (ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), workerSizeElement2.Value, false);
                            result.WorkerSize = workerSizeInstance;
                        }
                        
                        XElement statusElement2 = serverFarmElement2.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement2 != null)
                        {
                            ServerFarmStatus statusInstance = (ServerFarmStatus)Enum.Parse(typeof(ServerFarmStatus), statusElement2.Value, false);
                            result.Status = statusInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string webSpaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/ServerFarms/DefaultServerFarm";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='serverFarmName'>
        /// The name of the server farm.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Server Farm operation response.
        /// </returns>
        public async Task<ServerFarmGetResponse> GetAsync(string webSpaceName, string serverFarmName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (serverFarmName == null)
            {
                throw new ArgumentNullException("serverFarmName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("serverFarmName", serverFarmName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/ServerFarms/" + serverFarmName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerFarmGetResponse result = new ServerFarmGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serverFarmElement = responseDoc.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                    if (serverFarmElement != null)
                    {
                        XElement currentNumberOfWorkersElement = serverFarmElement.Element(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (currentNumberOfWorkersElement != null)
                        {
                            int currentNumberOfWorkersInstance = int.Parse(currentNumberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                            result.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                        }
                        
                        XElement currentWorkerSizeElement = serverFarmElement.Element(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (currentWorkerSizeElement != null)
                        {
                            ServerFarmWorkerSize currentWorkerSizeInstance = (ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), currentWorkerSizeElement.Value, false);
                            result.CurrentWorkerSize = currentWorkerSizeInstance;
                        }
                        
                        XElement nameElement = serverFarmElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement numberOfWorkersElement = serverFarmElement.Element(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (numberOfWorkersElement != null)
                        {
                            int numberOfWorkersInstance = int.Parse(numberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                            result.NumberOfWorkers = numberOfWorkersInstance;
                        }
                        
                        XElement workerSizeElement = serverFarmElement.Element(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (workerSizeElement != null)
                        {
                            ServerFarmWorkerSize workerSizeInstance = (ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), workerSizeElement.Value, false);
                            result.WorkerSize = workerSizeInstance;
                        }
                        
                        XElement statusElement = serverFarmElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement != null)
                        {
                            ServerFarmStatus statusInstance = (ServerFarmStatus)Enum.Parse(typeof(ServerFarmStatus), statusElement.Value, false);
                            result.Status = statusInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Server Farm operation response.
        /// </returns>
        public async Task<ServerFarmListResponse> ListAsync(string webSpaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/ServerFarms";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerFarmListResponse result = new ServerFarmListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serverFarmsSequenceElement = responseDoc.Element(XName.Get("ServerFarms", "http://schemas.microsoft.com/windowsazure"));
                    if (serverFarmsSequenceElement != null)
                    {
                        foreach (XElement serverFarmsElement in serverFarmsSequenceElement.Elements(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure")))
                        {
                            ServerFarmListResponse.ServerFarm serverFarmInstance = new ServerFarmListResponse.ServerFarm();
                            result.ServerFarms.Add(serverFarmInstance);
                            
                            XElement currentNumberOfWorkersElement = serverFarmsElement.Element(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                            if (currentNumberOfWorkersElement != null)
                            {
                                int currentNumberOfWorkersInstance = int.Parse(currentNumberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                                serverFarmInstance.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                            }
                            
                            XElement currentWorkerSizeElement = serverFarmsElement.Element(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                            if (currentWorkerSizeElement != null)
                            {
                                ServerFarmWorkerSize currentWorkerSizeInstance = (ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), currentWorkerSizeElement.Value, false);
                                serverFarmInstance.CurrentWorkerSize = currentWorkerSizeInstance;
                            }
                            
                            XElement nameElement = serverFarmsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                serverFarmInstance.Name = nameInstance;
                            }
                            
                            XElement numberOfWorkersElement = serverFarmsElement.Element(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                            if (numberOfWorkersElement != null)
                            {
                                int numberOfWorkersInstance = int.Parse(numberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                                serverFarmInstance.NumberOfWorkers = numberOfWorkersInstance;
                            }
                            
                            XElement workerSizeElement = serverFarmsElement.Element(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                            if (workerSizeElement != null)
                            {
                                ServerFarmWorkerSize workerSizeInstance = (ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), workerSizeElement.Value, false);
                                serverFarmInstance.WorkerSize = workerSizeInstance;
                            }
                            
                            XElement statusElement = serverFarmsElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null)
                            {
                                ServerFarmStatus statusInstance = (ServerFarmStatus)Enum.Parse(typeof(ServerFarmStatus), statusElement.Value, false);
                                serverFarmInstance.Status = statusInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can create a server farm by issuing an HTTP POST request. Only
        /// one server farm per webspace is permitted. You can retrieve server
        /// farm details by using HTTP GET, change server farm properties by
        /// using HTTP PUT, and delete a server farm by using HTTP DELETE. A
        /// request body is required for server farm creation (HTTP POST) and
        /// server farm update (HTTP PUT).  Warning: Creating a server farm
        /// changes your webspace’s Compute Mode from Shared to Dedicated. You
        /// will be charged from the moment the server farm is created, even
        /// if all your sites are still running in Free mode.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Server Farm operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Server Farm operation response.
        /// </returns>
        public async Task<ServerFarmUpdateResponse> UpdateAsync(string webSpaceName, ServerFarmUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/ServerFarms/DefaultServerFarm";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement serverFarmElement = new XElement(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(serverFarmElement);
                
                if (parameters.CurrentNumberOfWorkers != null)
                {
                    XElement currentNumberOfWorkersElement = new XElement(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                    currentNumberOfWorkersElement.Value = parameters.CurrentNumberOfWorkers.ToString();
                    serverFarmElement.Add(currentNumberOfWorkersElement);
                }
                
                if (parameters.CurrentWorkerSize != null)
                {
                    XElement currentWorkerSizeElement = new XElement(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                    currentWorkerSizeElement.Value = parameters.CurrentWorkerSize.ToString();
                    serverFarmElement.Add(currentWorkerSizeElement);
                }
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = "DefaultServerFarm";
                serverFarmElement.Add(nameElement);
                
                XElement numberOfWorkersElement = new XElement(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                numberOfWorkersElement.Value = parameters.NumberOfWorkers.ToString();
                serverFarmElement.Add(numberOfWorkersElement);
                
                XElement workerSizeElement = new XElement(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                workerSizeElement.Value = parameters.WorkerSize.ToString();
                serverFarmElement.Add(workerSizeElement);
                
                if (parameters.Status != null)
                {
                    XElement statusElement = new XElement(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                    statusElement.Value = parameters.Status.ToString();
                    serverFarmElement.Add(statusElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerFarmUpdateResponse result = new ServerFarmUpdateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement serverFarmElement2 = responseDoc.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                    if (serverFarmElement2 != null)
                    {
                        XElement currentNumberOfWorkersElement2 = serverFarmElement2.Element(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (currentNumberOfWorkersElement2 != null)
                        {
                            int currentNumberOfWorkersInstance = int.Parse(currentNumberOfWorkersElement2.Value, CultureInfo.InvariantCulture);
                            result.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                        }
                        
                        XElement currentWorkerSizeElement2 = serverFarmElement2.Element(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (currentWorkerSizeElement2 != null)
                        {
                            ServerFarmWorkerSize currentWorkerSizeInstance = (ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), currentWorkerSizeElement2.Value, false);
                            result.CurrentWorkerSize = currentWorkerSizeInstance;
                        }
                        
                        XElement nameElement2 = serverFarmElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance = nameElement2.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement numberOfWorkersElement2 = serverFarmElement2.Element(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (numberOfWorkersElement2 != null)
                        {
                            int numberOfWorkersInstance = int.Parse(numberOfWorkersElement2.Value, CultureInfo.InvariantCulture);
                            result.NumberOfWorkers = numberOfWorkersInstance;
                        }
                        
                        XElement workerSizeElement2 = serverFarmElement2.Element(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (workerSizeElement2 != null)
                        {
                            ServerFarmWorkerSize workerSizeInstance = (ServerFarmWorkerSize)Enum.Parse(typeof(ServerFarmWorkerSize), workerSizeElement2.Value, false);
                            result.WorkerSize = workerSizeInstance;
                        }
                        
                        XElement statusElement2 = serverFarmElement2.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement2 != null)
                        {
                            ServerFarmStatus statusInstance = (ServerFarmStatus)Enum.Parse(typeof(ServerFarmStatus), statusElement2.Value, false);
                            result.Status = statusInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Operations for managing the web sites in a web space.
    /// </summary>
    public partial interface IWebSiteOperations
    {
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        Task<WebSiteCreateResponse> CreateAsync(string webSpaceName, WebSiteCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateRepositoryAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can delete a web site by issuing an HTTP DELETE request. If the
        /// web site being deleted is the only site remaining in a server
        /// farm, you can optionally delete the server farm as well by using
        /// the deleteEmptyServerFarm parameter.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='deleteEmptyServerFarm'>
        /// If the site being deleted is the last web site in a server farm,
        /// you can delete the server farm.
        /// </param>
        /// <param name='deleteMetrics'>
        /// Delete the metrics for the site that you are deleting
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string webSpaceName, string webSiteName, bool deleteEmptyServerFarm, bool deleteMetrics, CancellationToken cancellationToken);
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> GeneratePasswordAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        Task<WebSiteGetResponse> GetAsync(string webSpaceName, string webSiteName, WebSiteGetParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(string webSpaceName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve the publish settings information for a web site by
        /// issuing an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken);
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve a site's current usage metrics by issuing an HTTP
        /// GET request. The metrics returned include CPU Time, Data In, Data
        /// Out, Local bytes read, Local bytes written, Network bytes read,
        /// Network bytes written, WP stop requests, Memory Usage, CPU Time -
        /// Minute Limit, and File System Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can restart a web site by issuing an HTTP POST request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> RestartAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can update the settings for a web site by using the HTTP PUT
        /// method and by specifying the settings in the request body.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Web Site operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Web Site operation response.
        /// </returns>
        Task<WebSiteUpdateResponse> UpdateAsync(string webSpaceName, string webSiteName, WebSiteUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site Configuration parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UpdateConfigurationAsync(string webSpaceName, string webSiteName, WebSiteUpdateConfigurationParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the web sites in a web space.
    /// </summary>
    public static partial class WebSiteOperationsExtensions
    {
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static WebSiteCreateResponse Create(this IWebSiteOperations operations, string webSpaceName, WebSiteCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(webSpaceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static Task<WebSiteCreateResponse> CreateAsync(this IWebSiteOperations operations, string webSpaceName, WebSiteCreateParameters parameters)
        {
            return operations.CreateAsync(webSpaceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateRepository(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.CreateRepositoryAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateRepositoryAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.CreateRepositoryAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can delete a web site by issuing an HTTP DELETE request. If the
        /// web site being deleted is the only site remaining in a server
        /// farm, you can optionally delete the server farm as well by using
        /// the deleteEmptyServerFarm parameter.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='deleteEmptyServerFarm'>
        /// If the site being deleted is the last web site in a server farm,
        /// you can delete the server farm.
        /// </param>
        /// <param name='deleteMetrics'>
        /// Delete the metrics for the site that you are deleting
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IWebSiteOperations operations, string webSpaceName, string webSiteName, bool deleteEmptyServerFarm, bool deleteMetrics)
        {
            try
            {
                return operations.DeleteAsync(webSpaceName, webSiteName, deleteEmptyServerFarm, deleteMetrics).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can delete a web site by issuing an HTTP DELETE request. If the
        /// web site being deleted is the only site remaining in a server
        /// farm, you can optionally delete the server farm as well by using
        /// the deleteEmptyServerFarm parameter.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='deleteEmptyServerFarm'>
        /// If the site being deleted is the last web site in a server farm,
        /// you can delete the server farm.
        /// </param>
        /// <param name='deleteMetrics'>
        /// Delete the metrics for the site that you are deleting
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, bool deleteEmptyServerFarm, bool deleteMetrics)
        {
            return operations.DeleteAsync(webSpaceName, webSiteName, deleteEmptyServerFarm, deleteMetrics, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static WebSiteDeleteRepositoryResponse DeleteRepository(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.DeleteRepositoryAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.DeleteRepositoryAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse GeneratePassword(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GeneratePasswordAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> GeneratePasswordAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GeneratePasswordAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static WebSiteGetResponse Get(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteGetParameters parameters)
        {
            try
            {
                return operations.GetAsync(webSpaceName, webSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static Task<WebSiteGetResponse> GetAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteGetParameters parameters)
        {
            return operations.GetAsync(webSpaceName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public static WebSiteGetConfigurationResponse GetConfiguration(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GetConfigurationAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public static Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GetConfigurationAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetHistoricalUsageMetricsResponse GetHistoricalUsageMetrics(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            try
            {
                return operations.GetHistoricalUsageMetricsAsync(webSpaceName, webSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            return operations.GetHistoricalUsageMetricsAsync(webSpaceName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the publish settings information for a web site by
        /// issuing an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static WebSiteGetPublishProfileResponse GetPublishProfile(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GetPublishProfileAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the publish settings information for a web site by
        /// issuing an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GetPublishProfileAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static WebSiteGetRepositoryResponse GetRepository(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GetRepositoryAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GetRepositoryAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve a site's current usage metrics by issuing an HTTP
        /// GET request. The metrics returned include CPU Time, Data In, Data
        /// Out, Local bytes read, Local bytes written, Network bytes read,
        /// Network bytes written, WP stop requests, Memory Usage, CPU Time -
        /// Minute Limit, and File System Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetUsageMetricsResponse GetUsageMetrics(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.GetUsageMetricsAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve a site's current usage metrics by issuing an HTTP
        /// GET request. The metrics returned include CPU Time, Data In, Data
        /// Out, Local bytes read, Local bytes written, Network bytes read,
        /// Network bytes written, WP stop requests, Memory Usage, CPU Time -
        /// Minute Limit, and File System Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.GetUsageMetricsAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can restart a web site by issuing an HTTP POST request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Restart(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            try
            {
                return operations.RestartAsync(webSpaceName, webSiteName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can restart a web site by issuing an HTTP POST request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RestartAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName)
        {
            return operations.RestartAsync(webSpaceName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can update the settings for a web site by using the HTTP PUT
        /// method and by specifying the settings in the request body.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Web Site operation.
        /// </param>
        /// <returns>
        /// The Update Web Site operation response.
        /// </returns>
        public static WebSiteUpdateResponse Update(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteUpdateParameters parameters)
        {
            try
            {
                return operations.UpdateAsync(webSpaceName, webSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can update the settings for a web site by using the HTTP PUT
        /// method and by specifying the settings in the request body.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Web Site operation.
        /// </param>
        /// <returns>
        /// The Update Web Site operation response.
        /// </returns>
        public static Task<WebSiteUpdateResponse> UpdateAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteUpdateParameters parameters)
        {
            return operations.UpdateAsync(webSpaceName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateConfiguration(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteUpdateConfigurationParameters parameters)
        {
            try
            {
                return operations.UpdateConfigurationAsync(webSpaceName, webSiteName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateConfigurationAsync(this IWebSiteOperations operations, string webSpaceName, string webSiteName, WebSiteUpdateConfigurationParameters parameters)
        {
            return operations.UpdateConfigurationAsync(webSpaceName, webSiteName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the web sites in a web space.
    /// </summary>
    internal partial class WebSiteOperations : IServiceOperations<WebSiteManagementClient>, IWebSiteOperations
    {
        /// <summary>
        /// Initializes a new instance of the WebSiteOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal WebSiteOperations(WebSiteManagementClient client)
        {
            this._client = client;
        }
        
        private WebSiteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.WebSiteManagementClient.
        /// </summary>
        public WebSiteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public async Task<WebSiteCreateResponse> CreateAsync(string webSpaceName, WebSiteCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.HostNames == null)
            {
                throw new ArgumentNullException("parameters.HostNames");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.WebSpace != null)
            {
                if (parameters.WebSpace.GeoRegion == null)
                {
                    throw new ArgumentNullException("parameters.WebSpace.GeoRegion");
                }
                if (parameters.WebSpace.Name == null)
                {
                    throw new ArgumentNullException("parameters.WebSpace.Name");
                }
                if (parameters.WebSpace.Plan == null)
                {
                    throw new ArgumentNullException("parameters.WebSpace.Plan");
                }
            }
            if (parameters.WebSpaceName == null)
            {
                throw new ArgumentNullException("parameters.WebSpaceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement siteElement = new XElement(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(siteElement);
                
                XElement hostNamesSequenceElement = new XElement(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                foreach (string hostNamesItem in parameters.HostNames)
                {
                    XElement hostNamesItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                    hostNamesItemElement.Value = hostNamesItem;
                    hostNamesSequenceElement.Add(hostNamesItemElement);
                }
                siteElement.Add(hostNamesSequenceElement);
                
                XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                nameElement.Value = parameters.Name;
                siteElement.Add(nameElement);
                
                if (parameters.ComputeMode != null)
                {
                    XElement computeModeElement = new XElement(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                    computeModeElement.Value = parameters.ComputeMode.ToString();
                    siteElement.Add(computeModeElement);
                }
                
                if (parameters.ServerFarm != null)
                {
                    XElement serverFarmElement = new XElement(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                    serverFarmElement.Value = parameters.ServerFarm;
                    siteElement.Add(serverFarmElement);
                }
                
                if (parameters.SiteMode != null)
                {
                    XElement siteModeElement = new XElement(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                    siteModeElement.Value = parameters.SiteMode.ToString();
                    siteElement.Add(siteModeElement);
                }
                
                XElement webSpaceElement = new XElement(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                webSpaceElement.Value = parameters.WebSpaceName;
                siteElement.Add(webSpaceElement);
                
                if (parameters.WebSpace != null)
                {
                    XElement webSpaceToCreateElement = new XElement(XName.Get("WebSpaceToCreate", "http://schemas.microsoft.com/windowsazure"));
                    siteElement.Add(webSpaceToCreateElement);
                    
                    XElement geoRegionElement = new XElement(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure"));
                    geoRegionElement.Value = parameters.WebSpace.GeoRegion;
                    webSpaceToCreateElement.Add(geoRegionElement);
                    
                    XElement nameElement2 = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                    nameElement2.Value = parameters.WebSpace.Name;
                    webSpaceToCreateElement.Add(nameElement2);
                    
                    XElement planElement = new XElement(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                    planElement.Value = parameters.WebSpace.Plan;
                    webSpaceToCreateElement.Add(planElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteCreateResponse result = new WebSiteCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement siteElement2 = responseDoc.Element(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                    if (siteElement2 != null)
                    {
                        WebSite webSiteInstance = new WebSite();
                        result.WebSite = webSiteInstance;
                        
                        XElement adminEnabledElement = siteElement2.Element(XName.Get("AdminEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (adminEnabledElement != null)
                        {
                            bool adminEnabledInstance = bool.Parse(adminEnabledElement.Value);
                            webSiteInstance.AdminEnabled = adminEnabledInstance;
                        }
                        
                        XElement availabilityStateElement = siteElement2.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (availabilityStateElement != null)
                        {
                            WebSpaceAvailabilityState availabilityStateInstance = (WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, false);
                            webSiteInstance.AvailabilityState = availabilityStateInstance;
                        }
                        
                        XElement computeModeElement2 = siteElement2.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                        if (computeModeElement2 != null)
                        {
                            WebSiteComputeMode computeModeInstance = (WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement2.Value, false);
                            webSiteInstance.ComputeMode = computeModeInstance;
                        }
                        
                        XElement enabledElement = siteElement2.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledElement != null)
                        {
                            bool enabledInstance = bool.Parse(enabledElement.Value);
                            webSiteInstance.Enabled = enabledInstance;
                        }
                        
                        XElement enabledHostNamesSequenceElement = siteElement2.Element(XName.Get("EnabledHostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledHostNamesSequenceElement != null)
                        {
                            foreach (XElement enabledHostNamesElement in enabledHostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.EnabledHostNames.Add(enabledHostNamesElement.Value);
                            }
                        }
                        
                        XElement hostNameSslStatesSequenceElement = siteElement2.Element(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNameSslStatesSequenceElement != null)
                        {
                            foreach (XElement hostNameSslStatesElement in hostNameSslStatesSequenceElement.Elements(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                webSiteInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                
                                XElement nameElement3 = hostNameSslStatesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement3 != null)
                                {
                                    string nameInstance = nameElement3.Value;
                                    webSiteHostNameSslStateInstance.Name = nameInstance;
                                }
                                
                                XElement sslStateElement = hostNameSslStatesElement.Element(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                                if (sslStateElement != null)
                                {
                                    WebSiteSslState sslStateInstance = (WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), sslStateElement.Value, false);
                                    webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                }
                                
                                XElement thumbprintElement = hostNameSslStatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement != null)
                                {
                                    bool isNil = false;
                                    XAttribute nilAttribute = thumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute != null)
                                    {
                                        isNil = nilAttribute.Value == "true";
                                    }
                                    if (isNil == false)
                                    {
                                        string thumbprintInstance = thumbprintElement.Value;
                                        webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                    }
                                }
                                
                                XElement virtualIPElement = hostNameSslStatesElement.Element(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualIPElement != null)
                                {
                                    bool isNil2 = false;
                                    XAttribute nilAttribute2 = virtualIPElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute2 != null)
                                    {
                                        isNil2 = nilAttribute2.Value == "true";
                                    }
                                    if (isNil2 == false)
                                    {
                                        string virtualIPInstance = virtualIPElement.Value;
                                        webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                    }
                                }
                            }
                        }
                        
                        XElement hostNamesSequenceElement2 = siteElement2.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNamesSequenceElement2 != null)
                        {
                            foreach (XElement hostNamesElement in hostNamesSequenceElement2.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.HostNames.Add(hostNamesElement.Value);
                            }
                        }
                        
                        XElement lastModifiedTimeUtcElement = siteElement2.Element(XName.Get("LastModifiedTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                        if (lastModifiedTimeUtcElement != null)
                        {
                            DateTime lastModifiedTimeUtcInstance = DateTime.Parse(lastModifiedTimeUtcElement.Value, CultureInfo.InvariantCulture);
                            webSiteInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                        }
                        
                        XElement nameElement4 = siteElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement4 != null)
                        {
                            string nameInstance2 = nameElement4.Value;
                            webSiteInstance.Name = nameInstance2;
                        }
                        
                        XElement ownerElement = siteElement2.Element(XName.Get("Owner", "http://schemas.microsoft.com/windowsazure"));
                        if (ownerElement != null)
                        {
                            bool isNil3 = false;
                            XAttribute nilAttribute3 = ownerElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute3 != null)
                            {
                                isNil3 = nilAttribute3.Value == "true";
                            }
                            if (isNil3 == false)
                            {
                                string ownerInstance = ownerElement.Value;
                                webSiteInstance.Owner = ownerInstance;
                            }
                        }
                        
                        XElement repositorySiteNameElement = siteElement2.Element(XName.Get("RepositorySiteName", "http://schemas.microsoft.com/windowsazure"));
                        if (repositorySiteNameElement != null)
                        {
                            string repositorySiteNameInstance = repositorySiteNameElement.Value;
                            webSiteInstance.RepositorySiteName = repositorySiteNameInstance;
                        }
                        
                        XElement runtimeAvailabilityStateElement = siteElement2.Element(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (runtimeAvailabilityStateElement != null)
                        {
                            WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = (WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), runtimeAvailabilityStateElement.Value, false);
                            webSiteInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                        }
                        
                        XElement sSLCertificatesSequenceElement = siteElement2.Element(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                        if (sSLCertificatesSequenceElement != null)
                        {
                            foreach (XElement sSLCertificatesElement in sSLCertificatesSequenceElement.Elements(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                webSiteInstance.SslCertificates.Add(certificateInstance);
                                
                                XElement expirationDateElement = sSLCertificatesElement.Element(XName.Get("ExpirationDate", "http://schemas.microsoft.com/windowsazure"));
                                if (expirationDateElement != null)
                                {
                                    DateTime expirationDateInstance = DateTime.Parse(expirationDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.ExpirationDate = expirationDateInstance;
                                }
                                
                                XElement friendlyNameElement = sSLCertificatesElement.Element(XName.Get("FriendlyName", "http://schemas.microsoft.com/windowsazure"));
                                if (friendlyNameElement != null)
                                {
                                    string friendlyNameInstance = friendlyNameElement.Value;
                                    certificateInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                XElement hostNamesSequenceElement3 = sSLCertificatesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                                if (hostNamesSequenceElement3 != null)
                                {
                                    foreach (XElement hostNamesElement2 in hostNamesSequenceElement3.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        certificateInstance.HostNames.Add(hostNamesElement2.Value);
                                    }
                                }
                                
                                XElement issueDateElement = sSLCertificatesElement.Element(XName.Get("IssueDate", "http://schemas.microsoft.com/windowsazure"));
                                if (issueDateElement != null)
                                {
                                    DateTime issueDateInstance = DateTime.Parse(issueDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.IssueDate = issueDateInstance;
                                }
                                
                                XElement issuerElement = sSLCertificatesElement.Element(XName.Get("Issuer", "http://schemas.microsoft.com/windowsazure"));
                                if (issuerElement != null)
                                {
                                    string issuerInstance = issuerElement.Value;
                                    certificateInstance.Issuer = issuerInstance;
                                }
                                
                                XElement passwordElement = sSLCertificatesElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                if (passwordElement != null)
                                {
                                    string passwordInstance = passwordElement.Value;
                                    certificateInstance.Password = passwordInstance;
                                }
                                
                                XElement pfxBlobElement = sSLCertificatesElement.Element(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                                if (pfxBlobElement != null)
                                {
                                    byte[] pfxBlobInstance = Convert.FromBase64String(pfxBlobElement.Value);
                                    certificateInstance.PfxBlob = pfxBlobInstance;
                                }
                                
                                XElement selfLinkElement = sSLCertificatesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                if (selfLinkElement != null)
                                {
                                    Uri selfLinkInstance = TypeConversion.TryParseUri(selfLinkElement.Value);
                                    certificateInstance.SelfLinkUri = selfLinkInstance;
                                }
                                
                                XElement siteNameElement = sSLCertificatesElement.Element(XName.Get("SiteName", "http://schemas.microsoft.com/windowsazure"));
                                if (siteNameElement != null)
                                {
                                    string siteNameInstance = siteNameElement.Value;
                                    certificateInstance.SiteName = siteNameInstance;
                                }
                                
                                XElement subjectNameElement = sSLCertificatesElement.Element(XName.Get("SubjectName", "http://schemas.microsoft.com/windowsazure"));
                                if (subjectNameElement != null)
                                {
                                    string subjectNameInstance = subjectNameElement.Value;
                                    certificateInstance.SubjectName = subjectNameInstance;
                                }
                                
                                XElement thumbprintElement2 = sSLCertificatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement2 != null)
                                {
                                    string thumbprintInstance2 = thumbprintElement2.Value;
                                    certificateInstance.Thumbprint = thumbprintInstance2;
                                }
                                
                                XElement toDeleteElement = sSLCertificatesElement.Element(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                                if (toDeleteElement != null)
                                {
                                    bool toDeleteInstance = bool.Parse(toDeleteElement.Value);
                                    certificateInstance.IsToBeDeleted = toDeleteInstance;
                                }
                                
                                XElement validElement = sSLCertificatesElement.Element(XName.Get("Valid", "http://schemas.microsoft.com/windowsazure"));
                                if (validElement != null)
                                {
                                    bool validInstance = bool.Parse(validElement.Value);
                                    certificateInstance.IsValid = validInstance;
                                }
                            }
                        }
                        
                        XElement selfLinkElement2 = siteElement2.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                        if (selfLinkElement2 != null)
                        {
                            Uri selfLinkInstance2 = TypeConversion.TryParseUri(selfLinkElement2.Value);
                            webSiteInstance.Uri = selfLinkInstance2;
                        }
                        
                        XElement serverFarmElement2 = siteElement2.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                        if (serverFarmElement2 != null)
                        {
                            string serverFarmInstance = serverFarmElement2.Value;
                            webSiteInstance.ServerFarm = serverFarmInstance;
                        }
                        
                        XElement siteModeElement2 = siteElement2.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                        if (siteModeElement2 != null)
                        {
                            WebSiteMode siteModeInstance = (WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement2.Value, false);
                            webSiteInstance.SiteMode = siteModeInstance;
                        }
                        
                        XElement sitePropertiesElement = siteElement2.Element(XName.Get("SiteProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (sitePropertiesElement != null)
                        {
                            WebSite.WebSiteProperties sitePropertiesInstance = new WebSite.WebSiteProperties();
                            webSiteInstance.SiteProperties = sitePropertiesInstance;
                            
                            XElement appSettingsSequenceElement = sitePropertiesElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (appSettingsSequenceElement != null)
                            {
                                foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                }
                            }
                            
                            XElement metadataSequenceElement = sitePropertiesElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                            if (metadataSequenceElement != null)
                            {
                                foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                }
                            }
                            
                            XElement propertiesSequenceElement = sitePropertiesElement.Element(XName.Get("Properties", "http://schemas.microsoft.com/windowsazure"));
                            if (propertiesSequenceElement != null)
                            {
                                foreach (XElement propertiesElement in propertiesSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string propertiesKey = propertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string propertiesValue = propertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue);
                                }
                            }
                        }
                        
                        XElement stateElement = siteElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            WebSiteState stateInstance = (WebSiteState)Enum.Parse(typeof(WebSiteState), stateElement.Value, false);
                            webSiteInstance.State = stateInstance;
                        }
                        
                        XElement usageStateElement = siteElement2.Element(XName.Get("UsageState", "http://schemas.microsoft.com/windowsazure"));
                        if (usageStateElement != null)
                        {
                            WebSiteUsageState usageStateInstance = (WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), usageStateElement.Value, false);
                            webSiteInstance.UsageState = usageStateInstance;
                        }
                        
                        XElement webSpaceElement2 = siteElement2.Element(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                        if (webSpaceElement2 != null)
                        {
                            string webSpaceInstance = webSpaceElement2.Value;
                            webSiteInstance.WebSpace = webSpaceInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateRepositoryAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "CreateRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/repository";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can delete a web site by issuing an HTTP DELETE request. If the
        /// web site being deleted is the only site remaining in a server
        /// farm, you can optionally delete the server farm as well by using
        /// the deleteEmptyServerFarm parameter.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236430.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='deleteEmptyServerFarm'>
        /// If the site being deleted is the last web site in a server farm,
        /// you can delete the server farm.
        /// </param>
        /// <param name='deleteMetrics'>
        /// Delete the metrics for the site that you are deleting
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string webSpaceName, string webSiteName, bool deleteEmptyServerFarm, bool deleteMetrics, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("deleteEmptyServerFarm", deleteEmptyServerFarm);
                tracingParameters.Add("deleteMetrics", deleteMetrics);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "?";
            url = url + "&deleteEmptyServerFarm=" + Uri.EscapeUriString(deleteEmptyServerFarm.ToString().ToLower());
            url = url + "&deleteMetrics=" + Uri.EscapeUriString(deleteMetrics.ToString().ToLower());
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public async Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "DeleteRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/repository";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteDeleteRepositoryResponse result = new WebSiteDeleteRepositoryResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement anyURIElement = responseDoc.Element(XName.Get("anyURI", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (anyURIElement != null)
                    {
                        result.Uri = TypeConversion.TryParseUri(anyURIElement.Value);
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> GeneratePasswordAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GeneratePasswordAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/newpassword";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public async Task<WebSiteGetResponse> GetAsync(string webSpaceName, string webSiteName, WebSiteGetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "?";
            if (parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeUriString(string.Join(",", parameters.PropertiesToInclude));
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetResponse result = new WebSiteGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement siteElement = responseDoc.Element(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                    if (siteElement != null)
                    {
                        WebSite webSiteInstance = new WebSite();
                        result.WebSite = webSiteInstance;
                        
                        XElement adminEnabledElement = siteElement.Element(XName.Get("AdminEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (adminEnabledElement != null)
                        {
                            bool adminEnabledInstance = bool.Parse(adminEnabledElement.Value);
                            webSiteInstance.AdminEnabled = adminEnabledInstance;
                        }
                        
                        XElement availabilityStateElement = siteElement.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (availabilityStateElement != null)
                        {
                            WebSpaceAvailabilityState availabilityStateInstance = (WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, false);
                            webSiteInstance.AvailabilityState = availabilityStateInstance;
                        }
                        
                        XElement computeModeElement = siteElement.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                        if (computeModeElement != null)
                        {
                            WebSiteComputeMode computeModeInstance = (WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement.Value, false);
                            webSiteInstance.ComputeMode = computeModeInstance;
                        }
                        
                        XElement enabledElement = siteElement.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledElement != null)
                        {
                            bool enabledInstance = bool.Parse(enabledElement.Value);
                            webSiteInstance.Enabled = enabledInstance;
                        }
                        
                        XElement enabledHostNamesSequenceElement = siteElement.Element(XName.Get("EnabledHostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledHostNamesSequenceElement != null)
                        {
                            foreach (XElement enabledHostNamesElement in enabledHostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.EnabledHostNames.Add(enabledHostNamesElement.Value);
                            }
                        }
                        
                        XElement hostNameSslStatesSequenceElement = siteElement.Element(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNameSslStatesSequenceElement != null)
                        {
                            foreach (XElement hostNameSslStatesElement in hostNameSslStatesSequenceElement.Elements(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                webSiteInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                
                                XElement nameElement = hostNameSslStatesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    webSiteHostNameSslStateInstance.Name = nameInstance;
                                }
                                
                                XElement sslStateElement = hostNameSslStatesElement.Element(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                                if (sslStateElement != null)
                                {
                                    WebSiteSslState sslStateInstance = (WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), sslStateElement.Value, false);
                                    webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                }
                                
                                XElement thumbprintElement = hostNameSslStatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement != null)
                                {
                                    bool isNil = false;
                                    XAttribute nilAttribute = thumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute != null)
                                    {
                                        isNil = nilAttribute.Value == "true";
                                    }
                                    if (isNil == false)
                                    {
                                        string thumbprintInstance = thumbprintElement.Value;
                                        webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                    }
                                }
                                
                                XElement virtualIPElement = hostNameSslStatesElement.Element(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualIPElement != null)
                                {
                                    bool isNil2 = false;
                                    XAttribute nilAttribute2 = virtualIPElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute2 != null)
                                    {
                                        isNil2 = nilAttribute2.Value == "true";
                                    }
                                    if (isNil2 == false)
                                    {
                                        string virtualIPInstance = virtualIPElement.Value;
                                        webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                    }
                                }
                            }
                        }
                        
                        XElement hostNamesSequenceElement = siteElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNamesSequenceElement != null)
                        {
                            foreach (XElement hostNamesElement in hostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.HostNames.Add(hostNamesElement.Value);
                            }
                        }
                        
                        XElement lastModifiedTimeUtcElement = siteElement.Element(XName.Get("LastModifiedTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                        if (lastModifiedTimeUtcElement != null)
                        {
                            DateTime lastModifiedTimeUtcInstance = DateTime.Parse(lastModifiedTimeUtcElement.Value, CultureInfo.InvariantCulture);
                            webSiteInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                        }
                        
                        XElement nameElement2 = siteElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance2 = nameElement2.Value;
                            webSiteInstance.Name = nameInstance2;
                        }
                        
                        XElement ownerElement = siteElement.Element(XName.Get("Owner", "http://schemas.microsoft.com/windowsazure"));
                        if (ownerElement != null)
                        {
                            bool isNil3 = false;
                            XAttribute nilAttribute3 = ownerElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute3 != null)
                            {
                                isNil3 = nilAttribute3.Value == "true";
                            }
                            if (isNil3 == false)
                            {
                                string ownerInstance = ownerElement.Value;
                                webSiteInstance.Owner = ownerInstance;
                            }
                        }
                        
                        XElement repositorySiteNameElement = siteElement.Element(XName.Get("RepositorySiteName", "http://schemas.microsoft.com/windowsazure"));
                        if (repositorySiteNameElement != null)
                        {
                            string repositorySiteNameInstance = repositorySiteNameElement.Value;
                            webSiteInstance.RepositorySiteName = repositorySiteNameInstance;
                        }
                        
                        XElement runtimeAvailabilityStateElement = siteElement.Element(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (runtimeAvailabilityStateElement != null)
                        {
                            WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = (WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), runtimeAvailabilityStateElement.Value, false);
                            webSiteInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                        }
                        
                        XElement sSLCertificatesSequenceElement = siteElement.Element(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                        if (sSLCertificatesSequenceElement != null)
                        {
                            foreach (XElement sSLCertificatesElement in sSLCertificatesSequenceElement.Elements(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                webSiteInstance.SslCertificates.Add(certificateInstance);
                                
                                XElement expirationDateElement = sSLCertificatesElement.Element(XName.Get("ExpirationDate", "http://schemas.microsoft.com/windowsazure"));
                                if (expirationDateElement != null)
                                {
                                    DateTime expirationDateInstance = DateTime.Parse(expirationDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.ExpirationDate = expirationDateInstance;
                                }
                                
                                XElement friendlyNameElement = sSLCertificatesElement.Element(XName.Get("FriendlyName", "http://schemas.microsoft.com/windowsazure"));
                                if (friendlyNameElement != null)
                                {
                                    string friendlyNameInstance = friendlyNameElement.Value;
                                    certificateInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                XElement hostNamesSequenceElement2 = sSLCertificatesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                                if (hostNamesSequenceElement2 != null)
                                {
                                    foreach (XElement hostNamesElement2 in hostNamesSequenceElement2.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        certificateInstance.HostNames.Add(hostNamesElement2.Value);
                                    }
                                }
                                
                                XElement issueDateElement = sSLCertificatesElement.Element(XName.Get("IssueDate", "http://schemas.microsoft.com/windowsazure"));
                                if (issueDateElement != null)
                                {
                                    DateTime issueDateInstance = DateTime.Parse(issueDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.IssueDate = issueDateInstance;
                                }
                                
                                XElement issuerElement = sSLCertificatesElement.Element(XName.Get("Issuer", "http://schemas.microsoft.com/windowsazure"));
                                if (issuerElement != null)
                                {
                                    string issuerInstance = issuerElement.Value;
                                    certificateInstance.Issuer = issuerInstance;
                                }
                                
                                XElement passwordElement = sSLCertificatesElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                if (passwordElement != null)
                                {
                                    string passwordInstance = passwordElement.Value;
                                    certificateInstance.Password = passwordInstance;
                                }
                                
                                XElement pfxBlobElement = sSLCertificatesElement.Element(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                                if (pfxBlobElement != null)
                                {
                                    byte[] pfxBlobInstance = Convert.FromBase64String(pfxBlobElement.Value);
                                    certificateInstance.PfxBlob = pfxBlobInstance;
                                }
                                
                                XElement selfLinkElement = sSLCertificatesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                if (selfLinkElement != null)
                                {
                                    Uri selfLinkInstance = TypeConversion.TryParseUri(selfLinkElement.Value);
                                    certificateInstance.SelfLinkUri = selfLinkInstance;
                                }
                                
                                XElement siteNameElement = sSLCertificatesElement.Element(XName.Get("SiteName", "http://schemas.microsoft.com/windowsazure"));
                                if (siteNameElement != null)
                                {
                                    string siteNameInstance = siteNameElement.Value;
                                    certificateInstance.SiteName = siteNameInstance;
                                }
                                
                                XElement subjectNameElement = sSLCertificatesElement.Element(XName.Get("SubjectName", "http://schemas.microsoft.com/windowsazure"));
                                if (subjectNameElement != null)
                                {
                                    string subjectNameInstance = subjectNameElement.Value;
                                    certificateInstance.SubjectName = subjectNameInstance;
                                }
                                
                                XElement thumbprintElement2 = sSLCertificatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement2 != null)
                                {
                                    string thumbprintInstance2 = thumbprintElement2.Value;
                                    certificateInstance.Thumbprint = thumbprintInstance2;
                                }
                                
                                XElement toDeleteElement = sSLCertificatesElement.Element(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                                if (toDeleteElement != null)
                                {
                                    bool toDeleteInstance = bool.Parse(toDeleteElement.Value);
                                    certificateInstance.IsToBeDeleted = toDeleteInstance;
                                }
                                
                                XElement validElement = sSLCertificatesElement.Element(XName.Get("Valid", "http://schemas.microsoft.com/windowsazure"));
                                if (validElement != null)
                                {
                                    bool validInstance = bool.Parse(validElement.Value);
                                    certificateInstance.IsValid = validInstance;
                                }
                            }
                        }
                        
                        XElement selfLinkElement2 = siteElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                        if (selfLinkElement2 != null)
                        {
                            Uri selfLinkInstance2 = TypeConversion.TryParseUri(selfLinkElement2.Value);
                            webSiteInstance.Uri = selfLinkInstance2;
                        }
                        
                        XElement serverFarmElement = siteElement.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                        if (serverFarmElement != null)
                        {
                            string serverFarmInstance = serverFarmElement.Value;
                            webSiteInstance.ServerFarm = serverFarmInstance;
                        }
                        
                        XElement siteModeElement = siteElement.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                        if (siteModeElement != null)
                        {
                            WebSiteMode siteModeInstance = (WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement.Value, false);
                            webSiteInstance.SiteMode = siteModeInstance;
                        }
                        
                        XElement sitePropertiesElement = siteElement.Element(XName.Get("SiteProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (sitePropertiesElement != null)
                        {
                            WebSite.WebSiteProperties sitePropertiesInstance = new WebSite.WebSiteProperties();
                            webSiteInstance.SiteProperties = sitePropertiesInstance;
                            
                            XElement appSettingsSequenceElement = sitePropertiesElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (appSettingsSequenceElement != null)
                            {
                                foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                }
                            }
                            
                            XElement metadataSequenceElement = sitePropertiesElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                            if (metadataSequenceElement != null)
                            {
                                foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                }
                            }
                            
                            XElement propertiesSequenceElement = sitePropertiesElement.Element(XName.Get("Properties", "http://schemas.microsoft.com/windowsazure"));
                            if (propertiesSequenceElement != null)
                            {
                                foreach (XElement propertiesElement in propertiesSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string propertiesKey = propertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string propertiesValue = propertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue);
                                }
                            }
                        }
                        
                        XElement stateElement = siteElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            WebSiteState stateInstance = (WebSiteState)Enum.Parse(typeof(WebSiteState), stateElement.Value, false);
                            webSiteInstance.State = stateInstance;
                        }
                        
                        XElement usageStateElement = siteElement.Element(XName.Get("UsageState", "http://schemas.microsoft.com/windowsazure"));
                        if (usageStateElement != null)
                        {
                            WebSiteUsageState usageStateInstance = (WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), usageStateElement.Value, false);
                            webSiteInstance.UsageState = usageStateInstance;
                        }
                        
                        XElement webSpaceElement = siteElement.Element(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                        if (webSpaceElement != null)
                        {
                            string webSpaceInstance = webSpaceElement.Value;
                            webSiteInstance.WebSpace = webSpaceInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public async Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/config";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetConfigurationResponse result = new WebSiteGetConfigurationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement siteConfigElement = responseDoc.Element(XName.Get("SiteConfig", "http://schemas.microsoft.com/windowsazure"));
                    if (siteConfigElement != null)
                    {
                        XElement appSettingsSequenceElement = siteConfigElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                        if (appSettingsSequenceElement != null)
                        {
                            foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                            {
                                string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                result.AppSettings.Add(appSettingsKey, appSettingsValue);
                            }
                        }
                        
                        XElement connectionStringsSequenceElement = siteConfigElement.Element(XName.Get("ConnectionStrings", "http://schemas.microsoft.com/windowsazure"));
                        if (connectionStringsSequenceElement != null)
                        {
                            foreach (XElement connectionStringsElement in connectionStringsSequenceElement.Elements(XName.Get("ConnStringInfo", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSiteGetConfigurationResponse.ConnectionStringInfo connStringInfoInstance = new WebSiteGetConfigurationResponse.ConnectionStringInfo();
                                result.ConnectionStrings.Add(connStringInfoInstance);
                                
                                XElement connectionStringElement = connectionStringsElement.Element(XName.Get("ConnectionString", "http://schemas.microsoft.com/windowsazure"));
                                if (connectionStringElement != null)
                                {
                                    string connectionStringInstance = connectionStringElement.Value;
                                    connStringInfoInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                XElement nameElement = connectionStringsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    connStringInfoInstance.Name = nameInstance;
                                }
                                
                                XElement typeElement = connectionStringsElement.Element(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                                if (typeElement != null)
                                {
                                    string typeInstance = typeElement.Value;
                                    connStringInfoInstance.Type = typeInstance;
                                }
                            }
                        }
                        
                        XElement defaultDocumentsSequenceElement = siteConfigElement.Element(XName.Get("DefaultDocuments", "http://schemas.microsoft.com/windowsazure"));
                        if (defaultDocumentsSequenceElement != null)
                        {
                            foreach (XElement defaultDocumentsElement in defaultDocumentsSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                result.DefaultDocuments.Add(defaultDocumentsElement.Value);
                            }
                        }
                        
                        XElement detailedErrorLoggingEnabledElement = siteConfigElement.Element(XName.Get("DetailedErrorLoggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (detailedErrorLoggingEnabledElement != null)
                        {
                            bool detailedErrorLoggingEnabledInstance = bool.Parse(detailedErrorLoggingEnabledElement.Value);
                            result.DetailedErrorLoggingEnabled = detailedErrorLoggingEnabledInstance;
                        }
                        
                        XElement handlerMappingsSequenceElement = siteConfigElement.Element(XName.Get("HandlerMappings", "http://schemas.microsoft.com/windowsazure"));
                        if (handlerMappingsSequenceElement != null)
                        {
                            foreach (XElement handlerMappingsElement in handlerMappingsSequenceElement.Elements(XName.Get("HandlerMapping", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSiteGetConfigurationResponse.HandlerMapping handlerMappingInstance = new WebSiteGetConfigurationResponse.HandlerMapping();
                                result.HandlerMappings.Add(handlerMappingInstance);
                                
                                XElement argumentsElement = handlerMappingsElement.Element(XName.Get("Arguments", "http://schemas.microsoft.com/windowsazure"));
                                if (argumentsElement != null)
                                {
                                    string argumentsInstance = argumentsElement.Value;
                                    handlerMappingInstance.Arguments = argumentsInstance;
                                }
                                
                                XElement extensionElement = handlerMappingsElement.Element(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                                if (extensionElement != null)
                                {
                                    string extensionInstance = extensionElement.Value;
                                    handlerMappingInstance.Extension = extensionInstance;
                                }
                                
                                XElement scriptProcessorElement = handlerMappingsElement.Element(XName.Get("ScriptProcessor", "http://schemas.microsoft.com/windowsazure"));
                                if (scriptProcessorElement != null)
                                {
                                    string scriptProcessorInstance = scriptProcessorElement.Value;
                                    handlerMappingInstance.ScriptProcessor = scriptProcessorInstance;
                                }
                            }
                        }
                        
                        XElement httpLoggingEnabledElement = siteConfigElement.Element(XName.Get("HttpLoggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (httpLoggingEnabledElement != null)
                        {
                            bool httpLoggingEnabledInstance = bool.Parse(httpLoggingEnabledElement.Value);
                            result.HttpLoggingEnabled = httpLoggingEnabledInstance;
                        }
                        
                        XElement metadataSequenceElement = siteConfigElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                        if (metadataSequenceElement != null)
                        {
                            foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                            {
                                string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                result.Metadata.Add(metadataKey, metadataValue);
                            }
                        }
                        
                        XElement netFrameworkVersionElement = siteConfigElement.Element(XName.Get("NetFrameworkVersion", "http://schemas.microsoft.com/windowsazure"));
                        if (netFrameworkVersionElement != null)
                        {
                            string netFrameworkVersionInstance = netFrameworkVersionElement.Value;
                            result.NetFrameworkVersion = netFrameworkVersionInstance;
                        }
                        
                        XElement numberOfWorkersElement = siteConfigElement.Element(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (numberOfWorkersElement != null)
                        {
                            int numberOfWorkersInstance = int.Parse(numberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                            result.NumberOfWorkers = numberOfWorkersInstance;
                        }
                        
                        XElement phpVersionElement = siteConfigElement.Element(XName.Get("PhpVersion", "http://schemas.microsoft.com/windowsazure"));
                        if (phpVersionElement != null)
                        {
                            string phpVersionInstance = phpVersionElement.Value;
                            result.PhpVersion = phpVersionInstance;
                        }
                        
                        XElement publishingPasswordElement = siteConfigElement.Element(XName.Get("PublishingPassword", "http://schemas.microsoft.com/windowsazure"));
                        if (publishingPasswordElement != null)
                        {
                            string publishingPasswordInstance = publishingPasswordElement.Value;
                            result.PublishingPassword = publishingPasswordInstance;
                        }
                        
                        XElement publishingUserNameElement = siteConfigElement.Element(XName.Get("PublishingUserName", "http://schemas.microsoft.com/windowsazure"));
                        if (publishingUserNameElement != null)
                        {
                            string publishingUserNameInstance = publishingUserNameElement.Value;
                            result.PublishingUserName = publishingUserNameInstance;
                        }
                        
                        XElement requestTracingEnabledElement = siteConfigElement.Element(XName.Get("RequestTracingEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (requestTracingEnabledElement != null)
                        {
                            bool requestTracingEnabledInstance = bool.Parse(requestTracingEnabledElement.Value);
                            result.RequestTracingEnabled = requestTracingEnabledInstance;
                        }
                        
                        XElement requestTracingExpirationTimeElement = siteConfigElement.Element(XName.Get("RequestTracingExpirationTime", "http://schemas.microsoft.com/windowsazure"));
                        if (requestTracingExpirationTimeElement != null && string.IsNullOrEmpty(requestTracingExpirationTimeElement.Value) == false)
                        {
                            DateTime requestTracingExpirationTimeInstance = DateTime.Parse(requestTracingExpirationTimeElement.Value, CultureInfo.InvariantCulture);
                            result.RequestTracingExpirationTime = requestTracingExpirationTimeInstance;
                        }
                        
                        XElement scmTypeElement = siteConfigElement.Element(XName.Get("ScmType", "http://schemas.microsoft.com/windowsazure"));
                        if (scmTypeElement != null)
                        {
                            string scmTypeInstance = scmTypeElement.Value;
                            result.ScmType = scmTypeInstance;
                        }
                        
                        XElement use32BitWorkerProcessElement = siteConfigElement.Element(XName.Get("Use32BitWorkerProcess", "http://schemas.microsoft.com/windowsazure"));
                        if (use32BitWorkerProcessElement != null)
                        {
                            bool use32BitWorkerProcessInstance = bool.Parse(use32BitWorkerProcessElement.Value);
                            result.Use32BitWorkerProcess = use32BitWorkerProcessInstance;
                        }
                        
                        XElement webSocketsEnabledElement = siteConfigElement.Element(XName.Get("WebSocketsEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (webSocketsEnabledElement != null)
                        {
                            bool webSocketsEnabledInstance = bool.Parse(webSocketsEnabledElement.Value);
                            result.WebSocketsEnabled = webSocketsEnabledInstance;
                        }
                        
                        XElement remoteDebuggingEnabledElement = siteConfigElement.Element(XName.Get("RemoteDebuggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (remoteDebuggingEnabledElement != null)
                        {
                            bool remoteDebuggingEnabledInstance = bool.Parse(remoteDebuggingEnabledElement.Value);
                            result.RemoteDebuggingEnabled = remoteDebuggingEnabledInstance;
                        }
                        
                        XElement remoteDebuggingVersionElement = siteConfigElement.Element(XName.Get("RemoteDebuggingVersion", "http://schemas.microsoft.com/windowsazure"));
                        if (remoteDebuggingVersionElement != null)
                        {
                            string remoteDebuggingVersionInstance = remoteDebuggingVersionElement.Value;
                            result.RemoteDebuggingVersion = remoteDebuggingVersionInstance;
                        }
                        
                        XElement managedPipelineModeElement = siteConfigElement.Element(XName.Get("ManagedPipelineMode", "http://schemas.microsoft.com/windowsazure"));
                        if (managedPipelineModeElement != null)
                        {
                            ManagedPipelineMode managedPipelineModeInstance = (ManagedPipelineMode)Enum.Parse(typeof(ManagedPipelineMode), managedPipelineModeElement.Value, false);
                            result.ManagedPipelineMode = managedPipelineModeInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public async Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(string webSpaceName, string webSiteName, WebSiteGetHistoricalUsageMetricsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetHistoricalUsageMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/metrics?";
            if (parameters.MetricNames != null && parameters.MetricNames.Count > 0)
            {
                url = url + "&names=" + Uri.EscapeUriString(string.Join(",", parameters.MetricNames));
            }
            if (parameters.StartTime != null)
            {
                url = url + "&StartTime=" + Uri.EscapeUriString(parameters.StartTime.Value.ToString());
            }
            if (parameters.EndTime != null)
            {
                url = url + "&EndTime=" + Uri.EscapeUriString(parameters.EndTime.Value.ToString());
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetHistoricalUsageMetricsResponse result = new WebSiteGetHistoricalUsageMetricsResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement metricResponsesElement = responseDoc.Element(XName.Get("MetricResponses", "http://schemas.microsoft.com/windowsazure"));
                    if (metricResponsesElement != null)
                    {
                        if (metricResponsesElement != null)
                        {
                            foreach (XElement usageMetricsElement in metricResponsesElement.Elements(XName.Get("MetricResponse", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric metricResponseInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetric();
                                result.UsageMetrics.Add(metricResponseInstance);
                                
                                XElement codeElement = usageMetricsElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                                if (codeElement != null)
                                {
                                    string codeInstance = codeElement.Value;
                                    metricResponseInstance.Code = codeInstance;
                                }
                                
                                XElement dataElement = usageMetricsElement.Element(XName.Get("Data", "http://schemas.microsoft.com/windowsazure"));
                                if (dataElement != null)
                                {
                                    WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData dataInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricData();
                                    metricResponseInstance.Data = dataInstance;
                                    
                                    XElement displayNameElement = dataElement.Element(XName.Get("DisplayName", "http://schemas.microsoft.com/windowsazure"));
                                    if (displayNameElement != null)
                                    {
                                        string displayNameInstance = displayNameElement.Value;
                                        dataInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    XElement endTimeElement = dataElement.Element(XName.Get("EndTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (endTimeElement != null)
                                    {
                                        DateTime endTimeInstance = DateTime.Parse(endTimeElement.Value, CultureInfo.InvariantCulture);
                                        dataInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    XElement nameElement = dataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        dataInstance.Name = nameInstance;
                                    }
                                    
                                    XElement primaryAggregationTypeElement = dataElement.Element(XName.Get("PrimaryAggregationType", "http://schemas.microsoft.com/windowsazure"));
                                    if (primaryAggregationTypeElement != null)
                                    {
                                        string primaryAggregationTypeInstance = primaryAggregationTypeElement.Value;
                                        dataInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    XElement startTimeElement = dataElement.Element(XName.Get("StartTime", "http://schemas.microsoft.com/windowsazure"));
                                    if (startTimeElement != null)
                                    {
                                        DateTime startTimeInstance = DateTime.Parse(startTimeElement.Value, CultureInfo.InvariantCulture);
                                        dataInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    XElement timeGrainElement = dataElement.Element(XName.Get("TimeGrain", "http://schemas.microsoft.com/windowsazure"));
                                    if (timeGrainElement != null)
                                    {
                                        string timeGrainInstance = timeGrainElement.Value;
                                        dataInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    XElement unitElement = dataElement.Element(XName.Get("Unit", "http://schemas.microsoft.com/windowsazure"));
                                    if (unitElement != null)
                                    {
                                        string unitInstance = unitElement.Value;
                                        dataInstance.Unit = unitInstance;
                                    }
                                    
                                    XElement valuesSequenceElement = dataElement.Element(XName.Get("Values", "http://schemas.microsoft.com/windowsazure"));
                                    if (valuesSequenceElement != null)
                                    {
                                        foreach (XElement valuesElement in valuesSequenceElement.Elements(XName.Get("MetricSample", "http://schemas.microsoft.com/windowsazure")))
                                        {
                                            WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample metricSampleInstance = new WebSiteGetHistoricalUsageMetricsResponse.HistoricalUsageMetricSample();
                                            dataInstance.Values.Add(metricSampleInstance);
                                            
                                            XElement countElement = valuesElement.Element(XName.Get("Count", "http://schemas.microsoft.com/windowsazure"));
                                            if (countElement != null)
                                            {
                                                int countInstance = int.Parse(countElement.Value, CultureInfo.InvariantCulture);
                                                metricSampleInstance.Count = countInstance;
                                            }
                                            
                                            XElement maximumElement = valuesElement.Element(XName.Get("Maximum", "http://schemas.microsoft.com/windowsazure"));
                                            if (maximumElement != null)
                                            {
                                                bool isNil = false;
                                                XAttribute nilAttribute = maximumElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                                if (nilAttribute != null)
                                                {
                                                    isNil = nilAttribute.Value == "true";
                                                }
                                                if (isNil == false)
                                                {
                                                    string maximumInstance = maximumElement.Value;
                                                    metricSampleInstance.Maximum = maximumInstance;
                                                }
                                            }
                                            
                                            XElement minimumElement = valuesElement.Element(XName.Get("Minimum", "http://schemas.microsoft.com/windowsazure"));
                                            if (minimumElement != null)
                                            {
                                                bool isNil2 = false;
                                                XAttribute nilAttribute2 = minimumElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                                if (nilAttribute2 != null)
                                                {
                                                    isNil2 = nilAttribute2.Value == "true";
                                                }
                                                if (isNil2 == false)
                                                {
                                                    string minimumInstance = minimumElement.Value;
                                                    metricSampleInstance.Minimum = minimumInstance;
                                                }
                                            }
                                            
                                            XElement timeCreatedElement = valuesElement.Element(XName.Get("TimeCreated", "http://schemas.microsoft.com/windowsazure"));
                                            if (timeCreatedElement != null)
                                            {
                                                DateTime timeCreatedInstance = DateTime.Parse(timeCreatedElement.Value, CultureInfo.InvariantCulture);
                                                metricSampleInstance.TimeCreated = timeCreatedInstance;
                                            }
                                            
                                            XElement totalElement = valuesElement.Element(XName.Get("Total", "http://schemas.microsoft.com/windowsazure"));
                                            if (totalElement != null)
                                            {
                                                string totalInstance = totalElement.Value;
                                                metricSampleInstance.Total = totalInstance;
                                            }
                                        }
                                    }
                                }
                                
                                XElement messageElement = usageMetricsElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                if (messageElement != null)
                                {
                                    string messageInstance = messageElement.Value;
                                    metricResponseInstance.Message = messageInstance;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the publish settings information for a web site by
        /// issuing an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public async Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetPublishProfileAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/publishxml";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetPublishProfileResponse result = new WebSiteGetPublishProfileResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement publishDataElement = responseDoc.Element(XName.Get("publishData", ""));
                    if (publishDataElement != null)
                    {
                        if (publishDataElement != null)
                        {
                            foreach (XElement publishProfilesElement in publishDataElement.Elements(XName.Get("publishProfile", "")))
                            {
                                WebSiteGetPublishProfileResponse.PublishProfile publishProfileInstance = new WebSiteGetPublishProfileResponse.PublishProfile();
                                result.PublishProfiles.Add(publishProfileInstance);
                                
                                XAttribute profileNameAttribute = publishProfilesElement.Attribute(XName.Get("profileName", ""));
                                if (profileNameAttribute != null)
                                {
                                    publishProfileInstance.ProfileName = profileNameAttribute.Value;
                                }
                                
                                XAttribute publishMethodAttribute = publishProfilesElement.Attribute(XName.Get("publishMethod", ""));
                                if (publishMethodAttribute != null)
                                {
                                    publishProfileInstance.PublishMethod = publishMethodAttribute.Value;
                                }
                                
                                XAttribute publishUrlAttribute = publishProfilesElement.Attribute(XName.Get("publishUrl", ""));
                                if (publishUrlAttribute != null)
                                {
                                    publishProfileInstance.PublishUrl = publishUrlAttribute.Value;
                                }
                                
                                XAttribute msdeploySiteAttribute = publishProfilesElement.Attribute(XName.Get("msdeploySite", ""));
                                if (msdeploySiteAttribute != null)
                                {
                                    publishProfileInstance.MSDeploySite = msdeploySiteAttribute.Value;
                                }
                                
                                XAttribute ftpPassiveModeAttribute = publishProfilesElement.Attribute(XName.Get("ftpPassiveMode", ""));
                                if (ftpPassiveModeAttribute != null)
                                {
                                    publishProfileInstance.FtpPassiveMode = bool.Parse(ftpPassiveModeAttribute.Value);
                                }
                                
                                XAttribute userNameAttribute = publishProfilesElement.Attribute(XName.Get("userName", ""));
                                if (userNameAttribute != null)
                                {
                                    publishProfileInstance.UserName = userNameAttribute.Value;
                                }
                                
                                XAttribute userPWDAttribute = publishProfilesElement.Attribute(XName.Get("userPWD", ""));
                                if (userPWDAttribute != null)
                                {
                                    publishProfileInstance.UserPassword = userPWDAttribute.Value;
                                }
                                
                                XAttribute destinationAppUrlAttribute = publishProfilesElement.Attribute(XName.Get("destinationAppUrl", ""));
                                if (destinationAppUrlAttribute != null)
                                {
                                    publishProfileInstance.DestinationAppUri = TypeConversion.TryParseUri(destinationAppUrlAttribute.Value);
                                }
                                
                                XAttribute sQLServerDBConnectionStringAttribute = publishProfilesElement.Attribute(XName.Get("SQLServerDBConnectionString", ""));
                                if (sQLServerDBConnectionStringAttribute != null)
                                {
                                    publishProfileInstance.SqlServerConnectionString = sQLServerDBConnectionStringAttribute.Value;
                                }
                                
                                XAttribute mySQLDBConnectionStringAttribute = publishProfilesElement.Attribute(XName.Get("mySQLDBConnectionString", ""));
                                if (mySQLDBConnectionStringAttribute != null)
                                {
                                    publishProfileInstance.MySqlConnectionString = mySQLDBConnectionStringAttribute.Value;
                                }
                                
                                XAttribute hostingProviderForumLinkAttribute = publishProfilesElement.Attribute(XName.Get("hostingProviderForumLink", ""));
                                if (hostingProviderForumLinkAttribute != null)
                                {
                                    publishProfileInstance.HostingProviderForumUri = TypeConversion.TryParseUri(hostingProviderForumLinkAttribute.Value);
                                }
                                
                                XAttribute controlPanelLinkAttribute = publishProfilesElement.Attribute(XName.Get("controlPanelLink", ""));
                                if (controlPanelLinkAttribute != null)
                                {
                                    publishProfileInstance.ControlPanelUri = TypeConversion.TryParseUri(controlPanelLinkAttribute.Value);
                                }
                                
                                XElement databasesSequenceElement = publishProfilesElement.Element(XName.Get("databases", ""));
                                if (databasesSequenceElement != null)
                                {
                                    foreach (XElement databasesElement in databasesSequenceElement.Elements(XName.Get("add", "")))
                                    {
                                        WebSiteGetPublishProfileResponse.Database addInstance = new WebSiteGetPublishProfileResponse.Database();
                                        publishProfileInstance.Databases.Add(addInstance);
                                        
                                        XAttribute nameAttribute = databasesElement.Attribute(XName.Get("name", ""));
                                        if (nameAttribute != null)
                                        {
                                            addInstance.Name = nameAttribute.Value;
                                        }
                                        
                                        XAttribute connectionStringAttribute = databasesElement.Attribute(XName.Get("connectionString", ""));
                                        if (connectionStringAttribute != null)
                                        {
                                            addInstance.ConnectionString = connectionStringAttribute.Value;
                                        }
                                        
                                        XAttribute providerNameAttribute = databasesElement.Attribute(XName.Get("providerName", ""));
                                        if (providerNameAttribute != null)
                                        {
                                            addInstance.ProviderName = providerNameAttribute.Value;
                                        }
                                        
                                        XAttribute typeAttribute = databasesElement.Attribute(XName.Get("type", ""));
                                        if (typeAttribute != null)
                                        {
                                            addInstance.Type = typeAttribute.Value;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public async Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/repository";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetRepositoryResponse result = new WebSiteGetRepositoryResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement anyURIElement = responseDoc.Element(XName.Get("anyURI", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (anyURIElement != null)
                    {
                        result.Uri = TypeConversion.TryParseUri(anyURIElement.Value);
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve a site's current usage metrics by issuing an HTTP
        /// GET request. The metrics returned include CPU Time, Data In, Data
        /// Out, Local bytes read, Local bytes written, Network bytes read,
        /// Network bytes written, WP stop requests, Memory Usage, CPU Time -
        /// Minute Limit, and File System Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public async Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "GetUsageMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/usages";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetUsageMetricsResponse result = new WebSiteGetUsageMetricsResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement usagesElement = responseDoc.Element(XName.Get("Usages", "http://schemas.microsoft.com/windowsazure"));
                    if (usagesElement != null)
                    {
                        if (usagesElement != null)
                        {
                            foreach (XElement usageMetricsElement in usagesElement.Elements(XName.Get("Usage", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSiteGetUsageMetricsResponse.UsageMetric usageInstance = new WebSiteGetUsageMetricsResponse.UsageMetric();
                                result.UsageMetrics.Add(usageInstance);
                                
                                XElement computeModeElement = usageMetricsElement.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                                if (computeModeElement != null)
                                {
                                    WebSiteComputeMode computeModeInstance = (WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement.Value, false);
                                    usageInstance.ComputeMode = computeModeInstance;
                                }
                                
                                XElement currentValueElement = usageMetricsElement.Element(XName.Get("CurrentValue", "http://schemas.microsoft.com/windowsazure"));
                                if (currentValueElement != null)
                                {
                                    string currentValueInstance = currentValueElement.Value;
                                    usageInstance.CurrentValue = currentValueInstance;
                                }
                                
                                XElement displayNameElement = usageMetricsElement.Element(XName.Get("DisplayName", "http://schemas.microsoft.com/windowsazure"));
                                if (displayNameElement != null)
                                {
                                    string displayNameInstance = displayNameElement.Value;
                                    usageInstance.DisplayName = displayNameInstance;
                                }
                                
                                XElement limitElement = usageMetricsElement.Element(XName.Get("Limit", "http://schemas.microsoft.com/windowsazure"));
                                if (limitElement != null)
                                {
                                    string limitInstance = limitElement.Value;
                                    usageInstance.Limit = limitInstance;
                                }
                                
                                XElement nameElement = usageMetricsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    usageInstance.Name = nameInstance;
                                }
                                
                                XElement nextResetTimeElement = usageMetricsElement.Element(XName.Get("NextResetTime", "http://schemas.microsoft.com/windowsazure"));
                                if (nextResetTimeElement != null)
                                {
                                    DateTime nextResetTimeInstance = DateTime.Parse(nextResetTimeElement.Value, CultureInfo.InvariantCulture);
                                    usageInstance.NextResetTime = nextResetTimeInstance;
                                }
                                
                                XElement resourceNameElement = usageMetricsElement.Element(XName.Get("ResourceName", "http://schemas.microsoft.com/windowsazure"));
                                if (resourceNameElement != null)
                                {
                                    string resourceNameInstance = resourceNameElement.Value;
                                    usageInstance.ResourceName = resourceNameInstance;
                                }
                                
                                XElement siteModeElement = usageMetricsElement.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                                if (siteModeElement != null)
                                {
                                    WebSiteMode siteModeInstance = (WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement.Value, false);
                                    usageInstance.SiteMode = siteModeInstance;
                                }
                                
                                XElement unitElement = usageMetricsElement.Element(XName.Get("Unit", "http://schemas.microsoft.com/windowsazure"));
                                if (unitElement != null)
                                {
                                    string unitInstance = unitElement.Value;
                                    usageInstance.Unit = unitInstance;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can restart a web site by issuing an HTTP POST request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236425.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RestartAsync(string webSpaceName, string webSiteName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                Tracing.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/restart";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can update the settings for a web site by using the HTTP PUT
        /// method and by specifying the settings in the request body.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167005.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Web Site operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Web Site operation response.
        /// </returns>
        public async Task<WebSiteUpdateResponse> UpdateAsync(string webSpaceName, string webSiteName, WebSiteUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement siteElement = new XElement(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(siteElement);
                
                if (parameters.AvailabilityState != null)
                {
                    XElement availabilityStateElement = new XElement(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                    availabilityStateElement.Value = parameters.AvailabilityState.ToString();
                    siteElement.Add(availabilityStateElement);
                }
                
                if (parameters.ComputeMode != null)
                {
                    XElement computeModeElement = new XElement(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                    computeModeElement.Value = parameters.ComputeMode.ToString();
                    siteElement.Add(computeModeElement);
                }
                
                if (parameters.Enabled != null)
                {
                    XElement enabledElement = new XElement(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                    enabledElement.Value = parameters.Enabled.ToString().ToLower();
                    siteElement.Add(enabledElement);
                }
                
                if (parameters.HostNameSslStates != null)
                {
                    XElement hostNameSslStatesSequenceElement = new XElement(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                    foreach (WebSiteUpdateParameters.WebSiteHostNameSslState hostNameSslStatesItem in parameters.HostNameSslStates)
                    {
                        XElement webSiteHostNameSslStateElement = new XElement(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure"));
                        hostNameSslStatesSequenceElement.Add(webSiteHostNameSslStateElement);
                        
                        if (hostNameSslStatesItem.SslState != null)
                        {
                            XElement sslStateElement = new XElement(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                            sslStateElement.Value = hostNameSslStatesItem.SslState.ToString();
                            webSiteHostNameSslStateElement.Add(sslStateElement);
                        }
                        
                        if (hostNameSslStatesItem.Thumbprint != null)
                        {
                            XElement thumbprintElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                            thumbprintElement.Value = hostNameSslStatesItem.Thumbprint;
                            webSiteHostNameSslStateElement.Add(thumbprintElement);
                        }
                        else
                        {
                            XElement emptyElement = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                            XAttribute nilAttribute = new XAttribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"), "");
                            nilAttribute.Value = "true";
                            emptyElement.Add(nilAttribute);
                            webSiteHostNameSslStateElement.Add(emptyElement);
                        }
                        
                        if (hostNameSslStatesItem.ToUpdate != null)
                        {
                            XElement toUpdateElement = new XElement(XName.Get("ToUpdate", "http://schemas.microsoft.com/windowsazure"));
                            toUpdateElement.Value = hostNameSslStatesItem.ToUpdate.ToString().ToLower();
                            webSiteHostNameSslStateElement.Add(toUpdateElement);
                        }
                    }
                    siteElement.Add(hostNameSslStatesSequenceElement);
                }
                
                if (parameters.HostNames != null)
                {
                    XElement hostNamesSequenceElement = new XElement(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                    foreach (string hostNamesItem in parameters.HostNames)
                    {
                        XElement hostNamesItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                        hostNamesItemElement.Value = hostNamesItem;
                        hostNamesSequenceElement.Add(hostNamesItemElement);
                    }
                    siteElement.Add(hostNamesSequenceElement);
                }
                
                if (parameters.RuntimeAvailabilityState != null)
                {
                    XElement runtimeAvailabilityStateElement = new XElement(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                    runtimeAvailabilityStateElement.Value = parameters.RuntimeAvailabilityState.ToString();
                    siteElement.Add(runtimeAvailabilityStateElement);
                }
                
                if (parameters.SslCertificates != null)
                {
                    XElement sSLCertificatesSequenceElement = new XElement(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                    foreach (WebSiteUpdateParameters.WebSiteSslCertificate sSLCertificatesItem in parameters.SslCertificates)
                    {
                        XElement certificateElement = new XElement(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure"));
                        sSLCertificatesSequenceElement.Add(certificateElement);
                        
                        if (sSLCertificatesItem.Password != null)
                        {
                            XElement passwordElement = new XElement(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                            passwordElement.Value = sSLCertificatesItem.Password;
                            certificateElement.Add(passwordElement);
                        }
                        
                        if (sSLCertificatesItem.PfxBlob != null)
                        {
                            XElement pfxBlobElement = new XElement(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                            pfxBlobElement.Value = Convert.ToBase64String(sSLCertificatesItem.PfxBlob);
                            certificateElement.Add(pfxBlobElement);
                        }
                        
                        if (sSLCertificatesItem.Thumbprint != null)
                        {
                            XElement thumbprintElement2 = new XElement(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                            thumbprintElement2.Value = sSLCertificatesItem.Thumbprint;
                            certificateElement.Add(thumbprintElement2);
                        }
                        
                        if (sSLCertificatesItem.IsToBeDeleted != null)
                        {
                            XElement toDeleteElement = new XElement(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                            toDeleteElement.Value = sSLCertificatesItem.IsToBeDeleted.ToString().ToLower();
                            certificateElement.Add(toDeleteElement);
                        }
                    }
                    siteElement.Add(sSLCertificatesSequenceElement);
                }
                
                if (parameters.ServerFarm != null)
                {
                    XElement serverFarmElement = new XElement(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                    serverFarmElement.Value = parameters.ServerFarm;
                    siteElement.Add(serverFarmElement);
                }
                
                if (parameters.SiteMode != null)
                {
                    XElement siteModeElement = new XElement(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                    siteModeElement.Value = parameters.SiteMode.ToString();
                    siteElement.Add(siteModeElement);
                }
                
                if (parameters.State != null)
                {
                    XElement stateElement = new XElement(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                    stateElement.Value = parameters.State.ToString();
                    siteElement.Add(stateElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteUpdateResponse result = new WebSiteUpdateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement siteElement2 = responseDoc.Element(XName.Get("Site", "http://schemas.microsoft.com/windowsazure"));
                    if (siteElement2 != null)
                    {
                        WebSite webSiteInstance = new WebSite();
                        result.WebSite = webSiteInstance;
                        
                        XElement adminEnabledElement = siteElement2.Element(XName.Get("AdminEnabled", "http://schemas.microsoft.com/windowsazure"));
                        if (adminEnabledElement != null)
                        {
                            bool adminEnabledInstance = bool.Parse(adminEnabledElement.Value);
                            webSiteInstance.AdminEnabled = adminEnabledInstance;
                        }
                        
                        XElement availabilityStateElement2 = siteElement2.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (availabilityStateElement2 != null)
                        {
                            WebSpaceAvailabilityState availabilityStateInstance = (WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement2.Value, false);
                            webSiteInstance.AvailabilityState = availabilityStateInstance;
                        }
                        
                        XElement computeModeElement2 = siteElement2.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                        if (computeModeElement2 != null)
                        {
                            WebSiteComputeMode computeModeInstance = (WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement2.Value, false);
                            webSiteInstance.ComputeMode = computeModeInstance;
                        }
                        
                        XElement enabledElement2 = siteElement2.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledElement2 != null)
                        {
                            bool enabledInstance = bool.Parse(enabledElement2.Value);
                            webSiteInstance.Enabled = enabledInstance;
                        }
                        
                        XElement enabledHostNamesSequenceElement = siteElement2.Element(XName.Get("EnabledHostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (enabledHostNamesSequenceElement != null)
                        {
                            foreach (XElement enabledHostNamesElement in enabledHostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.EnabledHostNames.Add(enabledHostNamesElement.Value);
                            }
                        }
                        
                        XElement hostNameSslStatesSequenceElement2 = siteElement2.Element(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNameSslStatesSequenceElement2 != null)
                        {
                            foreach (XElement hostNameSslStatesElement in hostNameSslStatesSequenceElement2.Elements(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                webSiteInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                
                                XElement nameElement = hostNameSslStatesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                if (nameElement != null)
                                {
                                    string nameInstance = nameElement.Value;
                                    webSiteHostNameSslStateInstance.Name = nameInstance;
                                }
                                
                                XElement sslStateElement2 = hostNameSslStatesElement.Element(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                                if (sslStateElement2 != null)
                                {
                                    WebSiteSslState sslStateInstance = (WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), sslStateElement2.Value, false);
                                    webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                }
                                
                                XElement thumbprintElement3 = hostNameSslStatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement3 != null)
                                {
                                    bool isNil = false;
                                    XAttribute nilAttribute2 = thumbprintElement3.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute2 != null)
                                    {
                                        isNil = nilAttribute2.Value == "true";
                                    }
                                    if (isNil == false)
                                    {
                                        string thumbprintInstance = thumbprintElement3.Value;
                                        webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                    }
                                }
                                
                                XElement virtualIPElement = hostNameSslStatesElement.Element(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure"));
                                if (virtualIPElement != null)
                                {
                                    bool isNil2 = false;
                                    XAttribute nilAttribute3 = virtualIPElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                    if (nilAttribute3 != null)
                                    {
                                        isNil2 = nilAttribute3.Value == "true";
                                    }
                                    if (isNil2 == false)
                                    {
                                        string virtualIPInstance = virtualIPElement.Value;
                                        webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                    }
                                }
                            }
                        }
                        
                        XElement hostNamesSequenceElement2 = siteElement2.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                        if (hostNamesSequenceElement2 != null)
                        {
                            foreach (XElement hostNamesElement in hostNamesSequenceElement2.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                            {
                                webSiteInstance.HostNames.Add(hostNamesElement.Value);
                            }
                        }
                        
                        XElement lastModifiedTimeUtcElement = siteElement2.Element(XName.Get("LastModifiedTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                        if (lastModifiedTimeUtcElement != null)
                        {
                            DateTime lastModifiedTimeUtcInstance = DateTime.Parse(lastModifiedTimeUtcElement.Value, CultureInfo.InvariantCulture);
                            webSiteInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                        }
                        
                        XElement nameElement2 = siteElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance2 = nameElement2.Value;
                            webSiteInstance.Name = nameInstance2;
                        }
                        
                        XElement ownerElement = siteElement2.Element(XName.Get("Owner", "http://schemas.microsoft.com/windowsazure"));
                        if (ownerElement != null)
                        {
                            bool isNil3 = false;
                            XAttribute nilAttribute4 = ownerElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute4 != null)
                            {
                                isNil3 = nilAttribute4.Value == "true";
                            }
                            if (isNil3 == false)
                            {
                                string ownerInstance = ownerElement.Value;
                                webSiteInstance.Owner = ownerInstance;
                            }
                        }
                        
                        XElement repositorySiteNameElement = siteElement2.Element(XName.Get("RepositorySiteName", "http://schemas.microsoft.com/windowsazure"));
                        if (repositorySiteNameElement != null)
                        {
                            string repositorySiteNameInstance = repositorySiteNameElement.Value;
                            webSiteInstance.RepositorySiteName = repositorySiteNameInstance;
                        }
                        
                        XElement runtimeAvailabilityStateElement2 = siteElement2.Element(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (runtimeAvailabilityStateElement2 != null)
                        {
                            WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = (WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), runtimeAvailabilityStateElement2.Value, false);
                            webSiteInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                        }
                        
                        XElement sSLCertificatesSequenceElement2 = siteElement2.Element(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                        if (sSLCertificatesSequenceElement2 != null)
                        {
                            foreach (XElement sSLCertificatesElement in sSLCertificatesSequenceElement2.Elements(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure")))
                            {
                                WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                webSiteInstance.SslCertificates.Add(certificateInstance);
                                
                                XElement expirationDateElement = sSLCertificatesElement.Element(XName.Get("ExpirationDate", "http://schemas.microsoft.com/windowsazure"));
                                if (expirationDateElement != null)
                                {
                                    DateTime expirationDateInstance = DateTime.Parse(expirationDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.ExpirationDate = expirationDateInstance;
                                }
                                
                                XElement friendlyNameElement = sSLCertificatesElement.Element(XName.Get("FriendlyName", "http://schemas.microsoft.com/windowsazure"));
                                if (friendlyNameElement != null)
                                {
                                    string friendlyNameInstance = friendlyNameElement.Value;
                                    certificateInstance.FriendlyName = friendlyNameInstance;
                                }
                                
                                XElement hostNamesSequenceElement3 = sSLCertificatesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                                if (hostNamesSequenceElement3 != null)
                                {
                                    foreach (XElement hostNamesElement2 in hostNamesSequenceElement3.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                    {
                                        certificateInstance.HostNames.Add(hostNamesElement2.Value);
                                    }
                                }
                                
                                XElement issueDateElement = sSLCertificatesElement.Element(XName.Get("IssueDate", "http://schemas.microsoft.com/windowsazure"));
                                if (issueDateElement != null)
                                {
                                    DateTime issueDateInstance = DateTime.Parse(issueDateElement.Value, CultureInfo.InvariantCulture);
                                    certificateInstance.IssueDate = issueDateInstance;
                                }
                                
                                XElement issuerElement = sSLCertificatesElement.Element(XName.Get("Issuer", "http://schemas.microsoft.com/windowsazure"));
                                if (issuerElement != null)
                                {
                                    string issuerInstance = issuerElement.Value;
                                    certificateInstance.Issuer = issuerInstance;
                                }
                                
                                XElement passwordElement2 = sSLCertificatesElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                if (passwordElement2 != null)
                                {
                                    string passwordInstance = passwordElement2.Value;
                                    certificateInstance.Password = passwordInstance;
                                }
                                
                                XElement pfxBlobElement2 = sSLCertificatesElement.Element(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                                if (pfxBlobElement2 != null)
                                {
                                    byte[] pfxBlobInstance = Convert.FromBase64String(pfxBlobElement2.Value);
                                    certificateInstance.PfxBlob = pfxBlobInstance;
                                }
                                
                                XElement selfLinkElement = sSLCertificatesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                if (selfLinkElement != null)
                                {
                                    Uri selfLinkInstance = TypeConversion.TryParseUri(selfLinkElement.Value);
                                    certificateInstance.SelfLinkUri = selfLinkInstance;
                                }
                                
                                XElement siteNameElement = sSLCertificatesElement.Element(XName.Get("SiteName", "http://schemas.microsoft.com/windowsazure"));
                                if (siteNameElement != null)
                                {
                                    string siteNameInstance = siteNameElement.Value;
                                    certificateInstance.SiteName = siteNameInstance;
                                }
                                
                                XElement subjectNameElement = sSLCertificatesElement.Element(XName.Get("SubjectName", "http://schemas.microsoft.com/windowsazure"));
                                if (subjectNameElement != null)
                                {
                                    string subjectNameInstance = subjectNameElement.Value;
                                    certificateInstance.SubjectName = subjectNameInstance;
                                }
                                
                                XElement thumbprintElement4 = sSLCertificatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                if (thumbprintElement4 != null)
                                {
                                    string thumbprintInstance2 = thumbprintElement4.Value;
                                    certificateInstance.Thumbprint = thumbprintInstance2;
                                }
                                
                                XElement toDeleteElement2 = sSLCertificatesElement.Element(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                                if (toDeleteElement2 != null)
                                {
                                    bool toDeleteInstance = bool.Parse(toDeleteElement2.Value);
                                    certificateInstance.IsToBeDeleted = toDeleteInstance;
                                }
                                
                                XElement validElement = sSLCertificatesElement.Element(XName.Get("Valid", "http://schemas.microsoft.com/windowsazure"));
                                if (validElement != null)
                                {
                                    bool validInstance = bool.Parse(validElement.Value);
                                    certificateInstance.IsValid = validInstance;
                                }
                            }
                        }
                        
                        XElement selfLinkElement2 = siteElement2.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                        if (selfLinkElement2 != null)
                        {
                            Uri selfLinkInstance2 = TypeConversion.TryParseUri(selfLinkElement2.Value);
                            webSiteInstance.Uri = selfLinkInstance2;
                        }
                        
                        XElement serverFarmElement2 = siteElement2.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                        if (serverFarmElement2 != null)
                        {
                            string serverFarmInstance = serverFarmElement2.Value;
                            webSiteInstance.ServerFarm = serverFarmInstance;
                        }
                        
                        XElement siteModeElement2 = siteElement2.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                        if (siteModeElement2 != null)
                        {
                            WebSiteMode siteModeInstance = (WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement2.Value, false);
                            webSiteInstance.SiteMode = siteModeInstance;
                        }
                        
                        XElement sitePropertiesElement = siteElement2.Element(XName.Get("SiteProperties", "http://schemas.microsoft.com/windowsazure"));
                        if (sitePropertiesElement != null)
                        {
                            WebSite.WebSiteProperties sitePropertiesInstance = new WebSite.WebSiteProperties();
                            webSiteInstance.SiteProperties = sitePropertiesInstance;
                            
                            XElement appSettingsSequenceElement = sitePropertiesElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                            if (appSettingsSequenceElement != null)
                            {
                                foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                }
                            }
                            
                            XElement metadataSequenceElement = sitePropertiesElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                            if (metadataSequenceElement != null)
                            {
                                foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                }
                            }
                            
                            XElement propertiesSequenceElement = sitePropertiesElement.Element(XName.Get("Properties", "http://schemas.microsoft.com/windowsazure"));
                            if (propertiesSequenceElement != null)
                            {
                                foreach (XElement propertiesElement in propertiesSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    string propertiesKey = propertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                    string propertiesValue = propertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                    sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue);
                                }
                            }
                        }
                        
                        XElement stateElement2 = siteElement2.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement2 != null)
                        {
                            WebSiteState stateInstance = (WebSiteState)Enum.Parse(typeof(WebSiteState), stateElement2.Value, false);
                            webSiteInstance.State = stateInstance;
                        }
                        
                        XElement usageStateElement = siteElement2.Element(XName.Get("UsageState", "http://schemas.microsoft.com/windowsazure"));
                        if (usageStateElement != null)
                        {
                            WebSiteUsageState usageStateInstance = (WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), usageStateElement.Value, false);
                            webSiteInstance.UsageState = usageStateInstance;
                        }
                        
                        XElement webSpaceElement = siteElement2.Element(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                        if (webSpaceElement != null)
                        {
                            string webSpaceInstance = webSpaceElement.Value;
                            webSiteInstance.WebSpace = webSpaceInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site Configuration parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateConfigurationAsync(string webSpaceName, string webSiteName, WebSiteUpdateConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites/" + webSiteName + "/config";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement siteConfigElement = new XElement(XName.Get("SiteConfig", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(siteConfigElement);
                
                if (parameters.AppSettings != null)
                {
                    XElement appSettingsDictionaryElement = new XElement(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair in parameters.AppSettings)
                    {
                        string appSettingsKey = pair.Key;
                        string appSettingsValue = pair.Value;
                        XElement appSettingsElement = new XElement(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure"));
                        appSettingsDictionaryElement.Add(appSettingsElement);
                        
                        XElement appSettingsKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        appSettingsKeyElement.Value = appSettingsKey;
                        appSettingsElement.Add(appSettingsKeyElement);
                        
                        XElement appSettingsValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        appSettingsValueElement.Value = appSettingsValue;
                        appSettingsElement.Add(appSettingsValueElement);
                    }
                    siteConfigElement.Add(appSettingsDictionaryElement);
                }
                
                if (parameters.ConnectionStrings != null)
                {
                    XElement connectionStringsSequenceElement = new XElement(XName.Get("ConnectionStrings", "http://schemas.microsoft.com/windowsazure"));
                    foreach (WebSiteUpdateConfigurationParameters.ConnectionStringInfo connectionStringsItem in parameters.ConnectionStrings)
                    {
                        XElement connStringInfoElement = new XElement(XName.Get("ConnStringInfo", "http://schemas.microsoft.com/windowsazure"));
                        connectionStringsSequenceElement.Add(connStringInfoElement);
                        
                        if (connectionStringsItem.ConnectionString != null)
                        {
                            XElement connectionStringElement = new XElement(XName.Get("ConnectionString", "http://schemas.microsoft.com/windowsazure"));
                            connectionStringElement.Value = connectionStringsItem.ConnectionString;
                            connStringInfoElement.Add(connectionStringElement);
                        }
                        
                        if (connectionStringsItem.Name != null)
                        {
                            XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            nameElement.Value = connectionStringsItem.Name;
                            connStringInfoElement.Add(nameElement);
                        }
                        
                        if (connectionStringsItem.Type != null)
                        {
                            XElement typeElement = new XElement(XName.Get("Type", "http://schemas.microsoft.com/windowsazure"));
                            typeElement.Value = connectionStringsItem.Type;
                            connStringInfoElement.Add(typeElement);
                        }
                    }
                    siteConfigElement.Add(connectionStringsSequenceElement);
                }
                
                if (parameters.DefaultDocuments != null)
                {
                    XElement defaultDocumentsSequenceElement = new XElement(XName.Get("DefaultDocuments", "http://schemas.microsoft.com/windowsazure"));
                    foreach (string defaultDocumentsItem in parameters.DefaultDocuments)
                    {
                        XElement defaultDocumentsItemElement = new XElement(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                        defaultDocumentsItemElement.Value = defaultDocumentsItem;
                        defaultDocumentsSequenceElement.Add(defaultDocumentsItemElement);
                    }
                    siteConfigElement.Add(defaultDocumentsSequenceElement);
                }
                
                if (parameters.DetailedErrorLoggingEnabled != null)
                {
                    XElement detailedErrorLoggingEnabledElement = new XElement(XName.Get("DetailedErrorLoggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                    detailedErrorLoggingEnabledElement.Value = parameters.DetailedErrorLoggingEnabled.ToString().ToLower();
                    siteConfigElement.Add(detailedErrorLoggingEnabledElement);
                }
                
                if (parameters.HandlerMappings != null)
                {
                    XElement handlerMappingsSequenceElement = new XElement(XName.Get("HandlerMappings", "http://schemas.microsoft.com/windowsazure"));
                    foreach (WebSiteUpdateConfigurationParameters.HandlerMapping handlerMappingsItem in parameters.HandlerMappings)
                    {
                        XElement handlerMappingElement = new XElement(XName.Get("HandlerMapping", "http://schemas.microsoft.com/windowsazure"));
                        handlerMappingsSequenceElement.Add(handlerMappingElement);
                        
                        if (handlerMappingsItem.Arguments != null)
                        {
                            XElement argumentsElement = new XElement(XName.Get("Arguments", "http://schemas.microsoft.com/windowsazure"));
                            argumentsElement.Value = handlerMappingsItem.Arguments;
                            handlerMappingElement.Add(argumentsElement);
                        }
                        
                        if (handlerMappingsItem.Extension != null)
                        {
                            XElement extensionElement = new XElement(XName.Get("Extension", "http://schemas.microsoft.com/windowsazure"));
                            extensionElement.Value = handlerMappingsItem.Extension;
                            handlerMappingElement.Add(extensionElement);
                        }
                        
                        if (handlerMappingsItem.ScriptProcessor != null)
                        {
                            XElement scriptProcessorElement = new XElement(XName.Get("ScriptProcessor", "http://schemas.microsoft.com/windowsazure"));
                            scriptProcessorElement.Value = handlerMappingsItem.ScriptProcessor;
                            handlerMappingElement.Add(scriptProcessorElement);
                        }
                    }
                    siteConfigElement.Add(handlerMappingsSequenceElement);
                }
                
                if (parameters.HttpLoggingEnabled != null)
                {
                    XElement httpLoggingEnabledElement = new XElement(XName.Get("HttpLoggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                    httpLoggingEnabledElement.Value = parameters.HttpLoggingEnabled.ToString().ToLower();
                    siteConfigElement.Add(httpLoggingEnabledElement);
                }
                
                if (parameters.Metadata != null)
                {
                    XElement metadataDictionaryElement = new XElement(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                    foreach (KeyValuePair<string, string> pair2 in parameters.Metadata)
                    {
                        string metadataKey = pair2.Key;
                        string metadataValue = pair2.Value;
                        XElement metadataElement = new XElement(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure"));
                        metadataDictionaryElement.Add(metadataElement);
                        
                        XElement metadataKeyElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        metadataKeyElement.Value = metadataKey;
                        metadataElement.Add(metadataKeyElement);
                        
                        XElement metadataValueElement = new XElement(XName.Get("Value", "http://schemas.microsoft.com/windowsazure"));
                        metadataValueElement.Value = metadataValue;
                        metadataElement.Add(metadataValueElement);
                    }
                    siteConfigElement.Add(metadataDictionaryElement);
                }
                
                if (parameters.NetFrameworkVersion != null)
                {
                    XElement netFrameworkVersionElement = new XElement(XName.Get("NetFrameworkVersion", "http://schemas.microsoft.com/windowsazure"));
                    netFrameworkVersionElement.Value = parameters.NetFrameworkVersion;
                    siteConfigElement.Add(netFrameworkVersionElement);
                }
                
                if (parameters.NumberOfWorkers != null)
                {
                    XElement numberOfWorkersElement = new XElement(XName.Get("NumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                    numberOfWorkersElement.Value = parameters.NumberOfWorkers.ToString();
                    siteConfigElement.Add(numberOfWorkersElement);
                }
                
                if (parameters.PhpVersion != null)
                {
                    XElement phpVersionElement = new XElement(XName.Get("PhpVersion", "http://schemas.microsoft.com/windowsazure"));
                    phpVersionElement.Value = parameters.PhpVersion;
                    siteConfigElement.Add(phpVersionElement);
                }
                
                if (parameters.PublishingPassword != null)
                {
                    XElement publishingPasswordElement = new XElement(XName.Get("PublishingPassword", "http://schemas.microsoft.com/windowsazure"));
                    publishingPasswordElement.Value = parameters.PublishingPassword;
                    siteConfigElement.Add(publishingPasswordElement);
                }
                
                if (parameters.PublishingUserName != null)
                {
                    XElement publishingUsernameElement = new XElement(XName.Get("PublishingUsername", "http://schemas.microsoft.com/windowsazure"));
                    publishingUsernameElement.Value = parameters.PublishingUserName;
                    siteConfigElement.Add(publishingUsernameElement);
                }
                
                if (parameters.RequestTracingEnabled != null)
                {
                    XElement requestTracingEnabledElement = new XElement(XName.Get("RequestTracingEnabled", "http://schemas.microsoft.com/windowsazure"));
                    requestTracingEnabledElement.Value = parameters.RequestTracingEnabled.ToString().ToLower();
                    siteConfigElement.Add(requestTracingEnabledElement);
                }
                
                if (parameters.RequestTracingExpirationTime != null)
                {
                    XElement requestTracingExpirationTimeElement = new XElement(XName.Get("RequestTracingExpirationTime", "http://schemas.microsoft.com/windowsazure"));
                    requestTracingExpirationTimeElement.Value = parameters.RequestTracingExpirationTime.ToString();
                    siteConfigElement.Add(requestTracingExpirationTimeElement);
                }
                
                if (parameters.ScmType != null)
                {
                    XElement scmTypeElement = new XElement(XName.Get("ScmType", "http://schemas.microsoft.com/windowsazure"));
                    scmTypeElement.Value = parameters.ScmType;
                    siteConfigElement.Add(scmTypeElement);
                }
                
                if (parameters.Use32BitWorkerProcess != null)
                {
                    XElement use32BitWorkerProcessElement = new XElement(XName.Get("Use32BitWorkerProcess", "http://schemas.microsoft.com/windowsazure"));
                    use32BitWorkerProcessElement.Value = parameters.Use32BitWorkerProcess.ToString().ToLower();
                    siteConfigElement.Add(use32BitWorkerProcessElement);
                }
                
                if (parameters.WebSocketsEnabled != null)
                {
                    XElement webSocketsEnabledElement = new XElement(XName.Get("WebSocketsEnabled", "http://schemas.microsoft.com/windowsazure"));
                    webSocketsEnabledElement.Value = parameters.WebSocketsEnabled.ToString().ToLower();
                    siteConfigElement.Add(webSocketsEnabledElement);
                }
                
                if (parameters.RemoteDebuggingEnabled != null)
                {
                    XElement remoteDebuggingEnabledElement = new XElement(XName.Get("RemoteDebuggingEnabled", "http://schemas.microsoft.com/windowsazure"));
                    remoteDebuggingEnabledElement.Value = parameters.RemoteDebuggingEnabled.ToString().ToLower();
                    siteConfigElement.Add(remoteDebuggingEnabledElement);
                }
                
                if (parameters.RemoteDebuggingVersion != null)
                {
                    XElement remoteDebuggingVersionElement = new XElement(XName.Get("RemoteDebuggingVersion", "http://schemas.microsoft.com/windowsazure"));
                    remoteDebuggingVersionElement.Value = parameters.RemoteDebuggingVersion;
                    siteConfigElement.Add(remoteDebuggingVersionElement);
                }
                
                if (parameters.ManagedPipelineMode != null)
                {
                    XElement managedPipelineModeElement = new XElement(XName.Get("ManagedPipelineMode", "http://schemas.microsoft.com/windowsazure"));
                    managedPipelineModeElement.Value = parameters.ManagedPipelineMode.ToString();
                    siteConfigElement.Add(managedPipelineModeElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// Operations for managing web spaces beneath your subscription.
    /// </summary>
    public partial interface IWebSpaceOperations
    {
        /// <summary>
        /// Creates a source control user allowed to publish to this web space.
        /// </summary>
        /// <param name='username'>
        /// The user name.
        /// </param>
        /// <param name='password'>
        /// The user password.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Publishing User operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Publishing User operation response.
        /// </returns>
        Task<WebSpacesCreatePublishingUserResponse> CreatePublishingUserAsync(string username, string password, WebSpacesCreatePublishingUserParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve details for a specified webspace name by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167017.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Space Details operation response.
        /// </returns>
        Task<WebSpacesGetResponse> GetAsync(string webSpaceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get the dns suffix for this subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get DNS Suffix operation response.
        /// </returns>
        Task<WebSpacesGetDnsSuffixResponse> GetDnsSuffixAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// You can list the webspaces under the current subscription by
        /// issuing a GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166961.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Spaces operation response.
        /// </returns>
        Task<WebSpacesListResponse> ListAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Get the available geo regions for this webspace.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get DNS Suffix operation response.
        /// </returns>
        Task<WebSpacesListGeoRegionsResponse> ListGeoRegionsAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Get the source control users allowed to publish to this web space.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Publishing Users operation response.
        /// </returns>
        Task<WebSpacesListPublishingUsersResponse> ListPublishingUsersAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve a list of all web sites in a web space by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236429.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        Task<WebSpacesListWebSitesResponse> ListWebSitesAsync(string webSpaceName, WebSiteListParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing web spaces beneath your subscription.
    /// </summary>
    public static partial class WebSpaceOperationsExtensions
    {
        /// <summary>
        /// Creates a source control user allowed to publish to this web space.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <param name='username'>
        /// The user name.
        /// </param>
        /// <param name='password'>
        /// The user password.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Publishing User operation.
        /// </param>
        /// <returns>
        /// The Create Publishing User operation response.
        /// </returns>
        public static WebSpacesCreatePublishingUserResponse CreatePublishingUser(this IWebSpaceOperations operations, string username, string password, WebSpacesCreatePublishingUserParameters parameters)
        {
            try
            {
                return operations.CreatePublishingUserAsync(username, password, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Creates a source control user allowed to publish to this web space.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <param name='username'>
        /// The user name.
        /// </param>
        /// <param name='password'>
        /// The user password.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Publishing User operation.
        /// </param>
        /// <returns>
        /// The Create Publishing User operation response.
        /// </returns>
        public static Task<WebSpacesCreatePublishingUserResponse> CreatePublishingUserAsync(this IWebSpaceOperations operations, string username, string password, WebSpacesCreatePublishingUserParameters parameters)
        {
            return operations.CreatePublishingUserAsync(username, password, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve details for a specified webspace name by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167017.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <returns>
        /// The Get Web Space Details operation response.
        /// </returns>
        public static WebSpacesGetResponse Get(this IWebSpaceOperations operations, string webSpaceName)
        {
            try
            {
                return operations.GetAsync(webSpaceName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve details for a specified webspace name by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167017.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <returns>
        /// The Get Web Space Details operation response.
        /// </returns>
        public static Task<WebSpacesGetResponse> GetAsync(this IWebSpaceOperations operations, string webSpaceName)
        {
            return operations.GetAsync(webSpaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the dns suffix for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <returns>
        /// The Get DNS Suffix operation response.
        /// </returns>
        public static WebSpacesGetDnsSuffixResponse GetDnsSuffix(this IWebSpaceOperations operations)
        {
            try
            {
                return operations.GetDnsSuffixAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Get the dns suffix for this subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <returns>
        /// The Get DNS Suffix operation response.
        /// </returns>
        public static Task<WebSpacesGetDnsSuffixResponse> GetDnsSuffixAsync(this IWebSpaceOperations operations)
        {
            return operations.GetDnsSuffixAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// You can list the webspaces under the current subscription by
        /// issuing a GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166961.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <returns>
        /// The List Web Spaces operation response.
        /// </returns>
        public static WebSpacesListResponse List(this IWebSpaceOperations operations)
        {
            try
            {
                return operations.ListAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can list the webspaces under the current subscription by
        /// issuing a GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166961.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <returns>
        /// The List Web Spaces operation response.
        /// </returns>
        public static Task<WebSpacesListResponse> ListAsync(this IWebSpaceOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Get the available geo regions for this webspace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <returns>
        /// The Get DNS Suffix operation response.
        /// </returns>
        public static WebSpacesListGeoRegionsResponse ListGeoRegions(this IWebSpaceOperations operations)
        {
            try
            {
                return operations.ListGeoRegionsAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Get the available geo regions for this webspace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <returns>
        /// The Get DNS Suffix operation response.
        /// </returns>
        public static Task<WebSpacesListGeoRegionsResponse> ListGeoRegionsAsync(this IWebSpaceOperations operations)
        {
            return operations.ListGeoRegionsAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Get the source control users allowed to publish to this web space.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <returns>
        /// The List Publishing Users operation response.
        /// </returns>
        public static WebSpacesListPublishingUsersResponse ListPublishingUsers(this IWebSpaceOperations operations)
        {
            try
            {
                return operations.ListPublishingUsersAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Get the source control users allowed to publish to this web space.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <returns>
        /// The List Publishing Users operation response.
        /// </returns>
        public static Task<WebSpacesListPublishingUsersResponse> ListPublishingUsersAsync(this IWebSpaceOperations operations)
        {
            return operations.ListPublishingUsersAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve a list of all web sites in a web space by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236429.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public static WebSpacesListWebSitesResponse ListWebSites(this IWebSpaceOperations operations, string webSpaceName, WebSiteListParameters parameters)
        {
            try
            {
                return operations.ListWebSitesAsync(webSpaceName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// You can retrieve a list of all web sites in a web space by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236429.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.IWebSpaceOperations.
        /// </param>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public static Task<WebSpacesListWebSitesResponse> ListWebSitesAsync(this IWebSpaceOperations operations, string webSpaceName, WebSiteListParameters parameters)
        {
            return operations.ListWebSitesAsync(webSpaceName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing web spaces beneath your subscription.
    /// </summary>
    internal partial class WebSpaceOperations : IServiceOperations<WebSiteManagementClient>, IWebSpaceOperations
    {
        /// <summary>
        /// Initializes a new instance of the WebSpaceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal WebSpaceOperations(WebSiteManagementClient client)
        {
            this._client = client;
        }
        
        private WebSiteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.WebSites.WebSiteManagementClient.
        /// </summary>
        public WebSiteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a source control user allowed to publish to this web space.
        /// </summary>
        /// <param name='username'>
        /// The user name.
        /// </param>
        /// <param name='password'>
        /// The user password.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Publishing User operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Publishing User operation response.
        /// </returns>
        public async Task<WebSpacesCreatePublishingUserResponse> CreatePublishingUserAsync(string username, string password, WebSpacesCreatePublishingUserParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (username == null)
            {
                throw new ArgumentNullException("username");
            }
            if (password == null)
            {
                throw new ArgumentNullException("password");
            }
            if (parameters != null)
            {
                if (parameters.PublishingPassword == null)
                {
                    throw new ArgumentNullException("parameters.PublishingPassword");
                }
                if (parameters.PublishingUserName == null)
                {
                    throw new ArgumentNullException("parameters.PublishingUserName");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("username", username);
                tracingParameters.Add("password", password);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreatePublishingUserAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces?properties=publishingCredentials";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                if (parameters != null)
                {
                    XElement userElement = new XElement(XName.Get("User", "http://schemas.microsoft.com/windowsazure"));
                    requestDoc.Add(userElement);
                    
                    if (parameters.Name != null)
                    {
                        XElement nameElement = new XElement(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        nameElement.Value = parameters.Name;
                        userElement.Add(nameElement);
                    }
                    
                    XElement publishingPasswordElement = new XElement(XName.Get("PublishingPassword", "http://schemas.microsoft.com/windowsazure"));
                    publishingPasswordElement.Value = parameters.PublishingPassword;
                    userElement.Add(publishingPasswordElement);
                    
                    XElement publishingUserNameElement = new XElement(XName.Get("PublishingUserName", "http://schemas.microsoft.com/windowsazure"));
                    publishingUserNameElement.Value = parameters.PublishingUserName;
                    userElement.Add(publishingUserNameElement);
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesCreatePublishingUserResponse result = new WebSpacesCreatePublishingUserResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement userElement2 = responseDoc.Element(XName.Get("User", "http://schemas.microsoft.com/windowsazure"));
                    if (userElement2 != null)
                    {
                        XElement nameElement2 = userElement2.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement2 != null)
                        {
                            string nameInstance = nameElement2.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement publishingPasswordElement2 = userElement2.Element(XName.Get("PublishingPassword", "http://schemas.microsoft.com/windowsazure"));
                        if (publishingPasswordElement2 != null)
                        {
                            string publishingPasswordInstance = publishingPasswordElement2.Value;
                            result.PublishingPassword = publishingPasswordInstance;
                        }
                        
                        XElement publishingUserNameElement2 = userElement2.Element(XName.Get("PublishingUserName", "http://schemas.microsoft.com/windowsazure"));
                        if (publishingUserNameElement2 != null)
                        {
                            string publishingUserNameInstance = publishingUserNameElement2.Value;
                            result.PublishingUserName = publishingUserNameInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve details for a specified webspace name by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167017.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Space Details operation response.
        /// </returns>
        public async Task<WebSpacesGetResponse> GetAsync(string webSpaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesGetResponse result = new WebSpacesGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement webSpacesElement = responseDoc.Element(XName.Get("WebSpaces", "http://schemas.microsoft.com/windowsazure"));
                    if (webSpacesElement != null)
                    {
                        XElement availabilityStateElement = webSpacesElement.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                        if (availabilityStateElement != null)
                        {
                            WebSpaceAvailabilityState availabilityStateInstance = (WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, false);
                            result.AvailabilityState = availabilityStateInstance;
                        }
                        
                        XElement currentNumberOfWorkersElement = webSpacesElement.Element(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                        if (currentNumberOfWorkersElement != null && string.IsNullOrEmpty(currentNumberOfWorkersElement.Value) == false)
                        {
                            bool isNil = false;
                            XAttribute nilAttribute = currentNumberOfWorkersElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute != null)
                            {
                                isNil = nilAttribute.Value == "true";
                            }
                            if (isNil == false)
                            {
                                int currentNumberOfWorkersInstance = int.Parse(currentNumberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                                result.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                            }
                        }
                        
                        XElement currentWorkerSizeElement = webSpacesElement.Element(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (currentWorkerSizeElement != null && string.IsNullOrEmpty(currentWorkerSizeElement.Value) == false)
                        {
                            bool isNil2 = false;
                            XAttribute nilAttribute2 = currentWorkerSizeElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                            if (nilAttribute2 != null)
                            {
                                isNil2 = nilAttribute2.Value == "true";
                            }
                            if (isNil2 == false)
                            {
                                WebSpaceWorkerSize currentWorkerSizeInstance = (WebSpaceWorkerSize)Enum.Parse(typeof(WebSpaceWorkerSize), currentWorkerSizeElement.Value, false);
                                result.CurrentWorkerSize = currentWorkerSizeInstance;
                            }
                        }
                        
                        XElement geoLocationElement = webSpacesElement.Element(XName.Get("GeoLocation", "http://schemas.microsoft.com/windowsazure"));
                        if (geoLocationElement != null)
                        {
                            string geoLocationInstance = geoLocationElement.Value;
                            result.GeoLocation = geoLocationInstance;
                        }
                        
                        XElement geoRegionElement = webSpacesElement.Element(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure"));
                        if (geoRegionElement != null)
                        {
                            string geoRegionInstance = geoRegionElement.Value;
                            result.GeoRegion = geoRegionInstance;
                        }
                        
                        XElement nameElement = webSpacesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement planElement = webSpacesElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                        if (planElement != null)
                        {
                            string planInstance = planElement.Value;
                            result.Plan = planInstance;
                        }
                        
                        XElement statusElement = webSpacesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement != null)
                        {
                            WebSpaceStatus statusInstance = (WebSpaceStatus)Enum.Parse(typeof(WebSpaceStatus), statusElement.Value, false);
                            result.Status = statusInstance;
                        }
                        
                        XElement subscriptionElement = webSpacesElement.Element(XName.Get("Subscription", "http://schemas.microsoft.com/windowsazure"));
                        if (subscriptionElement != null)
                        {
                            string subscriptionInstance = subscriptionElement.Value;
                            result.Subscription = subscriptionInstance;
                        }
                        
                        XElement workerSizeElement = webSpacesElement.Element(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                        if (workerSizeElement != null && string.IsNullOrEmpty(workerSizeElement.Value) == false)
                        {
                            WebSpaceWorkerSize workerSizeInstance = (WebSpaceWorkerSize)Enum.Parse(typeof(WebSpaceWorkerSize), workerSizeElement.Value, false);
                            result.WorkerSize = workerSizeInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the dns suffix for this subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get DNS Suffix operation response.
        /// </returns>
        public async Task<WebSpacesGetDnsSuffixResponse> GetDnsSuffixAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "GetDnsSuffixAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces?properties=dnssuffix";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesGetDnsSuffixResponse result = new WebSpacesGetDnsSuffixResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement stringElement = responseDoc.Element(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/"));
                    if (stringElement != null)
                    {
                        result.DnsSuffix = stringElement.Value;
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can list the webspaces under the current subscription by
        /// issuing a GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166961.aspx
        /// for more information)
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Spaces operation response.
        /// </returns>
        public async Task<WebSpacesListResponse> ListAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesListResponse result = new WebSpacesListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement webSpacesSequenceElement = responseDoc.Element(XName.Get("WebSpaces", "http://schemas.microsoft.com/windowsazure"));
                    if (webSpacesSequenceElement != null)
                    {
                        foreach (XElement webSpacesElement in webSpacesSequenceElement.Elements(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure")))
                        {
                            WebSpacesListResponse.WebSpace webSpaceInstance = new WebSpacesListResponse.WebSpace();
                            result.WebSpaces.Add(webSpaceInstance);
                            
                            XElement availabilityStateElement = webSpacesElement.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                            if (availabilityStateElement != null)
                            {
                                WebSpaceAvailabilityState availabilityStateInstance = (WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, false);
                                webSpaceInstance.AvailabilityState = availabilityStateInstance;
                            }
                            
                            XElement currentNumberOfWorkersElement = webSpacesElement.Element(XName.Get("CurrentNumberOfWorkers", "http://schemas.microsoft.com/windowsazure"));
                            if (currentNumberOfWorkersElement != null && string.IsNullOrEmpty(currentNumberOfWorkersElement.Value) == false)
                            {
                                bool isNil = false;
                                XAttribute nilAttribute = currentNumberOfWorkersElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (nilAttribute != null)
                                {
                                    isNil = nilAttribute.Value == "true";
                                }
                                if (isNil == false)
                                {
                                    int currentNumberOfWorkersInstance = int.Parse(currentNumberOfWorkersElement.Value, CultureInfo.InvariantCulture);
                                    webSpaceInstance.CurrentNumberOfWorkers = currentNumberOfWorkersInstance;
                                }
                            }
                            
                            XElement currentWorkerSizeElement = webSpacesElement.Element(XName.Get("CurrentWorkerSize", "http://schemas.microsoft.com/windowsazure"));
                            if (currentWorkerSizeElement != null && string.IsNullOrEmpty(currentWorkerSizeElement.Value) == false)
                            {
                                bool isNil2 = false;
                                XAttribute nilAttribute2 = currentWorkerSizeElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (nilAttribute2 != null)
                                {
                                    isNil2 = nilAttribute2.Value == "true";
                                }
                                if (isNil2 == false)
                                {
                                    WebSpaceWorkerSize currentWorkerSizeInstance = (WebSpaceWorkerSize)Enum.Parse(typeof(WebSpaceWorkerSize), currentWorkerSizeElement.Value, false);
                                    webSpaceInstance.CurrentWorkerSize = currentWorkerSizeInstance;
                                }
                            }
                            
                            XElement geoLocationElement = webSpacesElement.Element(XName.Get("GeoLocation", "http://schemas.microsoft.com/windowsazure"));
                            if (geoLocationElement != null)
                            {
                                string geoLocationInstance = geoLocationElement.Value;
                                webSpaceInstance.GeoLocation = geoLocationInstance;
                            }
                            
                            XElement geoRegionElement = webSpacesElement.Element(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure"));
                            if (geoRegionElement != null)
                            {
                                string geoRegionInstance = geoRegionElement.Value;
                                webSpaceInstance.GeoRegion = geoRegionInstance;
                            }
                            
                            XElement nameElement = webSpacesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                webSpaceInstance.Name = nameInstance;
                            }
                            
                            XElement planElement = webSpacesElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                            if (planElement != null)
                            {
                                string planInstance = planElement.Value;
                                webSpaceInstance.Plan = planInstance;
                            }
                            
                            XElement statusElement = webSpacesElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                            if (statusElement != null)
                            {
                                WebSpaceStatus statusInstance = (WebSpaceStatus)Enum.Parse(typeof(WebSpaceStatus), statusElement.Value, false);
                                webSpaceInstance.Status = statusInstance;
                            }
                            
                            XElement subscriptionElement = webSpacesElement.Element(XName.Get("Subscription", "http://schemas.microsoft.com/windowsazure"));
                            if (subscriptionElement != null)
                            {
                                string subscriptionInstance = subscriptionElement.Value;
                                webSpaceInstance.Subscription = subscriptionInstance;
                            }
                            
                            XElement workerSizeElement = webSpacesElement.Element(XName.Get("WorkerSize", "http://schemas.microsoft.com/windowsazure"));
                            if (workerSizeElement != null && string.IsNullOrEmpty(workerSizeElement.Value) == false)
                            {
                                WebSpaceWorkerSize workerSizeInstance = (WebSpaceWorkerSize)Enum.Parse(typeof(WebSpaceWorkerSize), workerSizeElement.Value, false);
                                webSpaceInstance.WorkerSize = workerSizeInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the available geo regions for this webspace.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get DNS Suffix operation response.
        /// </returns>
        public async Task<WebSpacesListGeoRegionsResponse> ListGeoRegionsAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListGeoRegionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces?properties=georegions";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesListGeoRegionsResponse result = new WebSpacesListGeoRegionsResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement geoRegionsSequenceElement = responseDoc.Element(XName.Get("GeoRegions", "http://schemas.microsoft.com/windowsazure"));
                    if (geoRegionsSequenceElement != null)
                    {
                        foreach (XElement geoRegionsElement in geoRegionsSequenceElement.Elements(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure")))
                        {
                            WebSpacesListGeoRegionsResponse.GeoRegion geoRegionInstance = new WebSpacesListGeoRegionsResponse.GeoRegion();
                            result.GeoRegions.Add(geoRegionInstance);
                            
                            XElement descriptionElement = geoRegionsElement.Element(XName.Get("Description", "http://schemas.microsoft.com/windowsazure"));
                            if (descriptionElement != null)
                            {
                                string descriptionInstance = descriptionElement.Value;
                                geoRegionInstance.Description = descriptionInstance;
                            }
                            
                            XElement nameElement = geoRegionsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement != null)
                            {
                                string nameInstance = nameElement.Value;
                                geoRegionInstance.Name = nameInstance;
                            }
                            
                            XElement sortOrderElement = geoRegionsElement.Element(XName.Get("SortOrder", "http://schemas.microsoft.com/windowsazure"));
                            if (sortOrderElement != null)
                            {
                                bool isNil = false;
                                XAttribute nilAttribute = sortOrderElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (nilAttribute != null)
                                {
                                    isNil = nilAttribute.Value == "true";
                                }
                                if (isNil == false)
                                {
                                    int sortOrderInstance = int.Parse(sortOrderElement.Value, CultureInfo.InvariantCulture);
                                    geoRegionInstance.SortOrder = sortOrderInstance;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the source control users allowed to publish to this web space.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Publishing Users operation response.
        /// </returns>
        public async Task<WebSpacesListPublishingUsersResponse> ListPublishingUsersAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "ListPublishingUsersAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces?properties=publishingUsers";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesListPublishingUsersResponse result = new WebSpacesListPublishingUsersResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement arrayOfstringSequenceElement = responseDoc.Element(XName.Get("ArrayOfstring", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"));
                    if (arrayOfstringSequenceElement != null)
                    {
                        foreach (XElement arrayOfstringElement in arrayOfstringSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                        {
                            WebSpacesListPublishingUsersResponse.User stringInstance = new WebSpacesListPublishingUsersResponse.User();
                            result.Users.Add(stringInstance);
                            
                            string stringInstance2 = arrayOfstringElement.Value;
                            stringInstance.Name = stringInstance2;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve a list of all web sites in a web space by issuing
        /// an HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236429.aspx
        /// for more information)
        /// </summary>
        /// <param name='webSpaceName'>
        /// The name of the web space.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public async Task<WebSpacesListWebSitesResponse> ListWebSitesAsync(string webSpaceName, WebSiteListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (webSpaceName == null)
            {
                throw new ArgumentNullException("webSpaceName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("webSpaceName", webSpaceName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListWebSitesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/WebSpaces/" + webSpaceName + "/sites?";
            if (parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeUriString(string.Join(",", parameters.PropertiesToInclude));
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = WebSiteCloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSpacesListWebSitesResponse result = new WebSpacesListWebSitesResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement sitesSequenceElement = responseDoc.Element(XName.Get("Sites", "http://schemas.microsoft.com/windowsazure"));
                    if (sitesSequenceElement != null)
                    {
                        foreach (XElement sitesElement in sitesSequenceElement.Elements(XName.Get("Site", "http://schemas.microsoft.com/windowsazure")))
                        {
                            WebSite siteInstance = new WebSite();
                            result.WebSites.Add(siteInstance);
                            
                            XElement adminEnabledElement = sitesElement.Element(XName.Get("AdminEnabled", "http://schemas.microsoft.com/windowsazure"));
                            if (adminEnabledElement != null)
                            {
                                bool adminEnabledInstance = bool.Parse(adminEnabledElement.Value);
                                siteInstance.AdminEnabled = adminEnabledInstance;
                            }
                            
                            XElement availabilityStateElement = sitesElement.Element(XName.Get("AvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                            if (availabilityStateElement != null)
                            {
                                WebSpaceAvailabilityState availabilityStateInstance = (WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), availabilityStateElement.Value, false);
                                siteInstance.AvailabilityState = availabilityStateInstance;
                            }
                            
                            XElement computeModeElement = sitesElement.Element(XName.Get("ComputeMode", "http://schemas.microsoft.com/windowsazure"));
                            if (computeModeElement != null)
                            {
                                WebSiteComputeMode computeModeInstance = (WebSiteComputeMode)Enum.Parse(typeof(WebSiteComputeMode), computeModeElement.Value, false);
                                siteInstance.ComputeMode = computeModeInstance;
                            }
                            
                            XElement enabledElement = sitesElement.Element(XName.Get("Enabled", "http://schemas.microsoft.com/windowsazure"));
                            if (enabledElement != null)
                            {
                                bool enabledInstance = bool.Parse(enabledElement.Value);
                                siteInstance.Enabled = enabledInstance;
                            }
                            
                            XElement enabledHostNamesSequenceElement = sitesElement.Element(XName.Get("EnabledHostNames", "http://schemas.microsoft.com/windowsazure"));
                            if (enabledHostNamesSequenceElement != null)
                            {
                                foreach (XElement enabledHostNamesElement in enabledHostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                {
                                    siteInstance.EnabledHostNames.Add(enabledHostNamesElement.Value);
                                }
                            }
                            
                            XElement hostNameSslStatesSequenceElement = sitesElement.Element(XName.Get("HostNameSslStates", "http://schemas.microsoft.com/windowsazure"));
                            if (hostNameSslStatesSequenceElement != null)
                            {
                                foreach (XElement hostNameSslStatesElement in hostNameSslStatesSequenceElement.Elements(XName.Get("WebSiteHostNameSslState", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    WebSite.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSite.WebSiteHostNameSslState();
                                    siteInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                    
                                    XElement nameElement = hostNameSslStatesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                                    if (nameElement != null)
                                    {
                                        string nameInstance = nameElement.Value;
                                        webSiteHostNameSslStateInstance.Name = nameInstance;
                                    }
                                    
                                    XElement sslStateElement = hostNameSslStatesElement.Element(XName.Get("SslState", "http://schemas.microsoft.com/windowsazure"));
                                    if (sslStateElement != null)
                                    {
                                        WebSiteSslState sslStateInstance = (WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), sslStateElement.Value, false);
                                        webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                    }
                                    
                                    XElement thumbprintElement = hostNameSslStatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                    if (thumbprintElement != null)
                                    {
                                        bool isNil = false;
                                        XAttribute nilAttribute = thumbprintElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                        if (nilAttribute != null)
                                        {
                                            isNil = nilAttribute.Value == "true";
                                        }
                                        if (isNil == false)
                                        {
                                            string thumbprintInstance = thumbprintElement.Value;
                                            webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                        }
                                    }
                                    
                                    XElement virtualIPElement = hostNameSslStatesElement.Element(XName.Get("VirtualIP", "http://schemas.microsoft.com/windowsazure"));
                                    if (virtualIPElement != null)
                                    {
                                        bool isNil2 = false;
                                        XAttribute nilAttribute2 = virtualIPElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                        if (nilAttribute2 != null)
                                        {
                                            isNil2 = nilAttribute2.Value == "true";
                                        }
                                        if (isNil2 == false)
                                        {
                                            string virtualIPInstance = virtualIPElement.Value;
                                            webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                        }
                                    }
                                }
                            }
                            
                            XElement hostNamesSequenceElement = sitesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                            if (hostNamesSequenceElement != null)
                            {
                                foreach (XElement hostNamesElement in hostNamesSequenceElement.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                {
                                    siteInstance.HostNames.Add(hostNamesElement.Value);
                                }
                            }
                            
                            XElement lastModifiedTimeUtcElement = sitesElement.Element(XName.Get("LastModifiedTimeUtc", "http://schemas.microsoft.com/windowsazure"));
                            if (lastModifiedTimeUtcElement != null)
                            {
                                DateTime lastModifiedTimeUtcInstance = DateTime.Parse(lastModifiedTimeUtcElement.Value, CultureInfo.InvariantCulture);
                                siteInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                            }
                            
                            XElement nameElement2 = sitesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                            if (nameElement2 != null)
                            {
                                string nameInstance2 = nameElement2.Value;
                                siteInstance.Name = nameInstance2;
                            }
                            
                            XElement ownerElement = sitesElement.Element(XName.Get("Owner", "http://schemas.microsoft.com/windowsazure"));
                            if (ownerElement != null)
                            {
                                bool isNil3 = false;
                                XAttribute nilAttribute3 = ownerElement.Attribute(XName.Get("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (nilAttribute3 != null)
                                {
                                    isNil3 = nilAttribute3.Value == "true";
                                }
                                if (isNil3 == false)
                                {
                                    string ownerInstance = ownerElement.Value;
                                    siteInstance.Owner = ownerInstance;
                                }
                            }
                            
                            XElement repositorySiteNameElement = sitesElement.Element(XName.Get("RepositorySiteName", "http://schemas.microsoft.com/windowsazure"));
                            if (repositorySiteNameElement != null)
                            {
                                string repositorySiteNameInstance = repositorySiteNameElement.Value;
                                siteInstance.RepositorySiteName = repositorySiteNameInstance;
                            }
                            
                            XElement runtimeAvailabilityStateElement = sitesElement.Element(XName.Get("RuntimeAvailabilityState", "http://schemas.microsoft.com/windowsazure"));
                            if (runtimeAvailabilityStateElement != null)
                            {
                                WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = (WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), runtimeAvailabilityStateElement.Value, false);
                                siteInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                            }
                            
                            XElement sSLCertificatesSequenceElement = sitesElement.Element(XName.Get("SSLCertificates", "http://schemas.microsoft.com/windowsazure"));
                            if (sSLCertificatesSequenceElement != null)
                            {
                                foreach (XElement sSLCertificatesElement in sSLCertificatesSequenceElement.Elements(XName.Get("Certificate", "http://schemas.microsoft.com/windowsazure")))
                                {
                                    WebSite.WebSiteSslCertificate certificateInstance = new WebSite.WebSiteSslCertificate();
                                    siteInstance.SslCertificates.Add(certificateInstance);
                                    
                                    XElement expirationDateElement = sSLCertificatesElement.Element(XName.Get("ExpirationDate", "http://schemas.microsoft.com/windowsazure"));
                                    if (expirationDateElement != null)
                                    {
                                        DateTime expirationDateInstance = DateTime.Parse(expirationDateElement.Value, CultureInfo.InvariantCulture);
                                        certificateInstance.ExpirationDate = expirationDateInstance;
                                    }
                                    
                                    XElement friendlyNameElement = sSLCertificatesElement.Element(XName.Get("FriendlyName", "http://schemas.microsoft.com/windowsazure"));
                                    if (friendlyNameElement != null)
                                    {
                                        string friendlyNameInstance = friendlyNameElement.Value;
                                        certificateInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    XElement hostNamesSequenceElement2 = sSLCertificatesElement.Element(XName.Get("HostNames", "http://schemas.microsoft.com/windowsazure"));
                                    if (hostNamesSequenceElement2 != null)
                                    {
                                        foreach (XElement hostNamesElement2 in hostNamesSequenceElement2.Elements(XName.Get("string", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")))
                                        {
                                            certificateInstance.HostNames.Add(hostNamesElement2.Value);
                                        }
                                    }
                                    
                                    XElement issueDateElement = sSLCertificatesElement.Element(XName.Get("IssueDate", "http://schemas.microsoft.com/windowsazure"));
                                    if (issueDateElement != null)
                                    {
                                        DateTime issueDateInstance = DateTime.Parse(issueDateElement.Value, CultureInfo.InvariantCulture);
                                        certificateInstance.IssueDate = issueDateInstance;
                                    }
                                    
                                    XElement issuerElement = sSLCertificatesElement.Element(XName.Get("Issuer", "http://schemas.microsoft.com/windowsazure"));
                                    if (issuerElement != null)
                                    {
                                        string issuerInstance = issuerElement.Value;
                                        certificateInstance.Issuer = issuerInstance;
                                    }
                                    
                                    XElement passwordElement = sSLCertificatesElement.Element(XName.Get("Password", "http://schemas.microsoft.com/windowsazure"));
                                    if (passwordElement != null)
                                    {
                                        string passwordInstance = passwordElement.Value;
                                        certificateInstance.Password = passwordInstance;
                                    }
                                    
                                    XElement pfxBlobElement = sSLCertificatesElement.Element(XName.Get("PfxBlob", "http://schemas.microsoft.com/windowsazure"));
                                    if (pfxBlobElement != null)
                                    {
                                        byte[] pfxBlobInstance = Convert.FromBase64String(pfxBlobElement.Value);
                                        certificateInstance.PfxBlob = pfxBlobInstance;
                                    }
                                    
                                    XElement selfLinkElement = sSLCertificatesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                                    if (selfLinkElement != null)
                                    {
                                        Uri selfLinkInstance = TypeConversion.TryParseUri(selfLinkElement.Value);
                                        certificateInstance.SelfLinkUri = selfLinkInstance;
                                    }
                                    
                                    XElement siteNameElement = sSLCertificatesElement.Element(XName.Get("SiteName", "http://schemas.microsoft.com/windowsazure"));
                                    if (siteNameElement != null)
                                    {
                                        string siteNameInstance = siteNameElement.Value;
                                        certificateInstance.SiteName = siteNameInstance;
                                    }
                                    
                                    XElement subjectNameElement = sSLCertificatesElement.Element(XName.Get("SubjectName", "http://schemas.microsoft.com/windowsazure"));
                                    if (subjectNameElement != null)
                                    {
                                        string subjectNameInstance = subjectNameElement.Value;
                                        certificateInstance.SubjectName = subjectNameInstance;
                                    }
                                    
                                    XElement thumbprintElement2 = sSLCertificatesElement.Element(XName.Get("Thumbprint", "http://schemas.microsoft.com/windowsazure"));
                                    if (thumbprintElement2 != null)
                                    {
                                        string thumbprintInstance2 = thumbprintElement2.Value;
                                        certificateInstance.Thumbprint = thumbprintInstance2;
                                    }
                                    
                                    XElement toDeleteElement = sSLCertificatesElement.Element(XName.Get("ToDelete", "http://schemas.microsoft.com/windowsazure"));
                                    if (toDeleteElement != null)
                                    {
                                        bool toDeleteInstance = bool.Parse(toDeleteElement.Value);
                                        certificateInstance.IsToBeDeleted = toDeleteInstance;
                                    }
                                    
                                    XElement validElement = sSLCertificatesElement.Element(XName.Get("Valid", "http://schemas.microsoft.com/windowsazure"));
                                    if (validElement != null)
                                    {
                                        bool validInstance = bool.Parse(validElement.Value);
                                        certificateInstance.IsValid = validInstance;
                                    }
                                }
                            }
                            
                            XElement selfLinkElement2 = sitesElement.Element(XName.Get("SelfLink", "http://schemas.microsoft.com/windowsazure"));
                            if (selfLinkElement2 != null)
                            {
                                Uri selfLinkInstance2 = TypeConversion.TryParseUri(selfLinkElement2.Value);
                                siteInstance.Uri = selfLinkInstance2;
                            }
                            
                            XElement serverFarmElement = sitesElement.Element(XName.Get("ServerFarm", "http://schemas.microsoft.com/windowsazure"));
                            if (serverFarmElement != null)
                            {
                                string serverFarmInstance = serverFarmElement.Value;
                                siteInstance.ServerFarm = serverFarmInstance;
                            }
                            
                            XElement siteModeElement = sitesElement.Element(XName.Get("SiteMode", "http://schemas.microsoft.com/windowsazure"));
                            if (siteModeElement != null)
                            {
                                WebSiteMode siteModeInstance = (WebSiteMode)Enum.Parse(typeof(WebSiteMode), siteModeElement.Value, false);
                                siteInstance.SiteMode = siteModeInstance;
                            }
                            
                            XElement sitePropertiesElement = sitesElement.Element(XName.Get("SiteProperties", "http://schemas.microsoft.com/windowsazure"));
                            if (sitePropertiesElement != null)
                            {
                                WebSite.WebSiteProperties sitePropertiesInstance = new WebSite.WebSiteProperties();
                                siteInstance.SiteProperties = sitePropertiesInstance;
                                
                                XElement appSettingsSequenceElement = sitePropertiesElement.Element(XName.Get("AppSettings", "http://schemas.microsoft.com/windowsazure"));
                                if (appSettingsSequenceElement != null)
                                {
                                    foreach (XElement appSettingsElement in appSettingsSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string appSettingsKey = appSettingsElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string appSettingsValue = appSettingsElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                    }
                                }
                                
                                XElement metadataSequenceElement = sitePropertiesElement.Element(XName.Get("Metadata", "http://schemas.microsoft.com/windowsazure"));
                                if (metadataSequenceElement != null)
                                {
                                    foreach (XElement metadataElement in metadataSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string metadataKey = metadataElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string metadataValue = metadataElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                    }
                                }
                                
                                XElement propertiesSequenceElement = sitePropertiesElement.Element(XName.Get("Properties", "http://schemas.microsoft.com/windowsazure"));
                                if (propertiesSequenceElement != null)
                                {
                                    foreach (XElement propertiesElement in propertiesSequenceElement.Elements(XName.Get("NameValuePair", "http://schemas.microsoft.com/windowsazure")))
                                    {
                                        string propertiesKey = propertiesElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure")).Value;
                                        string propertiesValue = propertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                                        sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue);
                                    }
                                }
                            }
                            
                            XElement stateElement = sitesElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                            if (stateElement != null)
                            {
                                WebSiteState stateInstance = (WebSiteState)Enum.Parse(typeof(WebSiteState), stateElement.Value, false);
                                siteInstance.State = stateInstance;
                            }
                            
                            XElement usageStateElement = sitesElement.Element(XName.Get("UsageState", "http://schemas.microsoft.com/windowsazure"));
                            if (usageStateElement != null)
                            {
                                WebSiteUsageState usageStateInstance = (WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), usageStateElement.Value, false);
                                siteInstance.UsageState = usageStateInstance;
                            }
                            
                            XElement webSpaceElement = sitesElement.Element(XName.Get("WebSpace", "http://schemas.microsoft.com/windowsazure"));
                            if (webSpaceElement != null)
                            {
                                string webSpaceInstance = webSpaceElement.Value;
                                siteInstance.WebSpace = webSpaceInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
