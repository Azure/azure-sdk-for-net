// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Scheduler;
using Microsoft.WindowsAzure.Management.Scheduler.Models;

namespace Microsoft.WindowsAzure.Management.Scheduler.Models
{
    /// <summary>
    /// The Check Name Availability operation response.
    /// </summary>
    public partial class JobCollectionCheckNameAvailabilityResponse : OperationResponse
    {
        private bool _isAvailable;
        
        /// <summary>
        /// Whether the name is available.
        /// </summary>
        public bool IsAvailable
        {
            get { return this._isAvailable; }
            set { this._isAvailable = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// JobCollectionCheckNameAvailabilityResponse class.
        /// </summary>
        public JobCollectionCheckNameAvailabilityResponse()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create Job Collection operation.
    /// </summary>
    public partial class JobCollectionCreateParameters
    {
        private JobCollectionIntrinsicSettings _intrinsicSettings;
        
        /// <summary>
        /// Intrinsic settings for the scheduler job collections.
        /// </summary>
        public JobCollectionIntrinsicSettings IntrinsicSettings
        {
            get { return this._intrinsicSettings; }
            set { this._intrinsicSettings = value; }
        }
        
        private string _label;
        
        /// <summary>
        /// Label for the resource.
        /// </summary>
        public string Label
        {
            get { return this._label; }
            set { this._label = value; }
        }
        
        private string _schemaVersion;
        
        /// <summary>
        /// The version of the Intrinsic Properties for your Resource. If not
        /// specified, you must conform to the contract resource version you
        /// registered as default.
        /// </summary>
        public string SchemaVersion
        {
            get { return this._schemaVersion; }
            set { this._schemaVersion = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the JobCollectionCreateParameters
        /// class.
        /// </summary>
        public JobCollectionCreateParameters()
        {
        }
    }
    
    /// <summary>
    /// The Create Job Collection operation response.
    /// </summary>
    public partial class JobCollectionCreateResponse : OperationResponse
    {
        private string _eTag;
        
        /// <summary>
        /// ETag of the Job Collection.
        /// </summary>
        public string ETag
        {
            get { return this._eTag; }
            set { this._eTag = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the JobCollectionCreateResponse class.
        /// </summary>
        public JobCollectionCreateResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Job Collection operation response.
    /// </summary>
    public partial class JobCollectionGetResponse : OperationResponse
    {
        private JobCollectionGetResponse.CloudServiceSettingInfo _cloudServiceSettings;
        
        /// <summary>
        /// Settings for the Job Collection's containing Cloud Service.
        /// </summary>
        public JobCollectionGetResponse.CloudServiceSettingInfo CloudServiceSettings
        {
            get { return this._cloudServiceSettings; }
            set { this._cloudServiceSettings = value; }
        }
        
        private string _eTag;
        
        /// <summary>
        /// ETag of the Job Collection.
        /// </summary>
        public string ETag
        {
            get { return this._eTag; }
            set { this._eTag = value; }
        }
        
        private JobCollectionIntrinsicSettings _intrinsicSettings;
        
        /// <summary>
        /// Intrinsic settings for the scheduler job collections.
        /// </summary>
        public JobCollectionIntrinsicSettings IntrinsicSettings
        {
            get { return this._intrinsicSettings; }
            set { this._intrinsicSettings = value; }
        }
        
        private string _label;
        
        /// <summary>
        /// Label for the resource.
        /// </summary>
        public string Label
        {
            get { return this._label; }
            set { this._label = value; }
        }
        
        private JobCollectionGetResponse.OperationStatus _lastOperationStatus;
        
        /// <summary>
        /// The promotion code for buying the resource.
        /// </summary>
        public JobCollectionGetResponse.OperationStatus LastOperationStatus
        {
            get { return this._lastOperationStatus; }
            set { this._lastOperationStatus = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Name of the Job Collection.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _plan;
        
        /// <summary>
        /// The plan of the resource.
        /// </summary>
        public string Plan
        {
            get { return this._plan; }
            set { this._plan = value; }
        }
        
        private string _promotionCode;
        
        /// <summary>
        /// The promotion code for buying the resource.
        /// </summary>
        public string PromotionCode
        {
            get { return this._promotionCode; }
            set { this._promotionCode = value; }
        }
        
        private string _schemaVersion;
        
        /// <summary>
        /// The version of the Intrinsic Properties for your Resource. If not
        /// specified, you must conform to the contract resource version you
        /// registered as default.
        /// </summary>
        public string SchemaVersion
        {
            get { return this._schemaVersion; }
            set { this._schemaVersion = value; }
        }
        
        private JobCollectionState _state;
        
        /// <summary>
        /// State of the Job Collection.
        /// </summary>
        public JobCollectionState State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the JobCollectionGetResponse class.
        /// </summary>
        public JobCollectionGetResponse()
        {
        }
        
        /// <summary>
        /// Settings for the Job Collection's containing Cloud Service.
        /// </summary>
        public partial class CloudServiceSettingInfo
        {
            private string _geoRegion;
            
            /// <summary>
            /// GeoRegion of the cloud service.
            /// </summary>
            public string GeoRegion
            {
                get { return this._geoRegion; }
                set { this._geoRegion = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the CloudServiceSettingInfo class.
            /// </summary>
            public CloudServiceSettingInfo()
            {
            }
        }
        
        /// <summary>
        /// Result of a previous operation.
        /// </summary>
        public partial class OperationStatus
        {
            private JobCollectionGetResponse.OperationStatusResponseDetails _responseDetails;
            
            /// <summary>
            /// Details about the last operation.
            /// </summary>
            public JobCollectionGetResponse.OperationStatusResponseDetails ResponseDetails
            {
                get { return this._responseDetails; }
                set { this._responseDetails = value; }
            }
            
            private SchedulerOperationStatus _status;
            
            /// <summary>
            /// Status of the last operation.
            /// </summary>
            public SchedulerOperationStatus Status
            {
                get { return this._status; }
                set { this._status = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the OperationStatus class.
            /// </summary>
            public OperationStatus()
            {
            }
        }
        
        /// <summary>
        /// Response details about an operation.
        /// </summary>
        public partial class OperationStatusResponseDetails
        {
            private string _message;
            
            /// <summary>
            /// Message returned by the operation.
            /// </summary>
            public string Message
            {
                get { return this._message; }
                set { this._message = value; }
            }
            
            private HttpStatusCode _statusCode;
            
            /// <summary>
            /// The HTTP status code of the operation.
            /// </summary>
            public HttpStatusCode StatusCode
            {
                get { return this._statusCode; }
                set { this._statusCode = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the
            /// OperationStatusResponseDetails class.
            /// </summary>
            public OperationStatusResponseDetails()
            {
            }
        }
    }
    
    /// <summary>
    /// Parameters supplied to intrinsic settings for a job.
    /// </summary>
    public partial class JobCollectionIntrinsicSettings
    {
        private JobCollectionPlan _plan;
        
        /// <summary>
        /// The plan of the resource.
        /// </summary>
        public JobCollectionPlan Plan
        {
            get { return this._plan; }
            set { this._plan = value; }
        }
        
        private JobCollectionQuota _quota;
        
        /// <summary>
        /// Quota settings for the job collection.
        /// </summary>
        public JobCollectionQuota Quota
        {
            get { return this._quota; }
            set { this._quota = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the JobCollectionIntrinsicSettings
        /// class.
        /// </summary>
        public JobCollectionIntrinsicSettings()
        {
        }
    }
    
    public partial class JobCollectionMaxRecurrence
    {
        private JobCollectionRecurrenceFrequency _frequency;
        
        /// <summary>
        /// Defines the maximum recurrences that can be specified in any job in
        /// this job collection.
        /// </summary>
        public JobCollectionRecurrenceFrequency Frequency
        {
            get { return this._frequency; }
            set { this._frequency = value; }
        }
        
        private int _interval;
        
        /// <summary>
        /// Defines the interval.
        /// </summary>
        public int Interval
        {
            get { return this._interval; }
            set { this._interval = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the JobCollectionMaxRecurrence class.
        /// </summary>
        public JobCollectionMaxRecurrence()
        {
        }
    }
    
    public enum JobCollectionPlan
    {
        Standard = 0,
        
        Free = 1,
    }
    
    public partial class JobCollectionQuota
    {
        private int? _maxJobCount;
        
        /// <summary>
        /// Maximum number of jobs that can be created in this job collection.
        /// Maximum value is dependent on the plan.
        /// </summary>
        public int? MaxJobCount
        {
            get { return this._maxJobCount; }
            set { this._maxJobCount = value; }
        }
        
        private int? _maxJobOccurrence;
        
        /// <summary>
        /// Maximum number of occurrences for all jobs in the job collection.
        /// </summary>
        public int? MaxJobOccurrence
        {
            get { return this._maxJobOccurrence; }
            set { this._maxJobOccurrence = value; }
        }
        
        private JobCollectionMaxRecurrence _maxRecurrence;
        
        /// <summary>
        /// Defines the maximum recurrences that can be specified in any job in
        /// this job collection.
        /// </summary>
        public JobCollectionMaxRecurrence MaxRecurrence
        {
            get { return this._maxRecurrence; }
            set { this._maxRecurrence = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the JobCollectionQuota class.
        /// </summary>
        public JobCollectionQuota()
        {
        }
    }
    
    /// <summary>
    /// Maximum frequency that can be specified on any job in this job
    /// collection. Subset of acceptable frequencies is dependent on the plan.
    /// </summary>
    public enum JobCollectionRecurrenceFrequency
    {
        Minute = 0,
        
        Hour = 1,
        
        Day = 2,
        
        Week = 3,
        
        Month = 4,
        
        Year = 5,
    }
    
    /// <summary>
    /// State of the Job Collection resource.
    /// </summary>
    public enum JobCollectionState
    {
        /// <summary>
        /// Service Manager knows about the resource but the state is still
        /// Unknown which might either be a result of failed communication
        /// with the RP or just that the Service Manager hasn’t got around to
        /// process the resource.
        /// </summary>
        Unknown = 0,
        
        /// <summary>
        /// The resource provider did not respond with information for the
        /// resource.
        /// </summary>
        NotFound = 1,
        
        /// <summary>
        /// Resource is running fine.
        /// </summary>
        Started = 2,
        
        /// <summary>
        /// Resource was stopped due to an issue.
        /// </summary>
        Stopped = 3,
        
        /// <summary>
        /// The resource was temporarily put on hold primarily due to a
        /// monetary event.
        /// </summary>
        Paused = 4,
    }
    
    /// <summary>
    /// Parameters supplied to the Update Job Collection operation.
    /// </summary>
    public partial class JobCollectionUpdateParameters
    {
        private string _eTag;
        
        /// <summary>
        /// The ETag of the job collection to update.  The update will fail
        /// ifthe ETag doesn't match.
        /// </summary>
        public string ETag
        {
            get { return this._eTag; }
            set { this._eTag = value; }
        }
        
        private JobCollectionIntrinsicSettings _intrinsicSettings;
        
        /// <summary>
        /// Intrinsic settings for the scheduler job collections.
        /// </summary>
        public JobCollectionIntrinsicSettings IntrinsicSettings
        {
            get { return this._intrinsicSettings; }
            set { this._intrinsicSettings = value; }
        }
        
        private string _label;
        
        /// <summary>
        /// Label for the resource.
        /// </summary>
        public string Label
        {
            get { return this._label; }
            set { this._label = value; }
        }
        
        private string _schemaVersion;
        
        /// <summary>
        /// The version of the Intrinsic Properties for your Resource. If not
        /// specified, you must conform to the contract resource version you
        /// registered as default.
        /// </summary>
        public string SchemaVersion
        {
            get { return this._schemaVersion; }
            set { this._schemaVersion = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the JobCollectionUpdateParameters
        /// class.
        /// </summary>
        public JobCollectionUpdateParameters()
        {
        }
    }
    
    /// <summary>
    /// The Update Job Collection operation response.
    /// </summary>
    public partial class JobCollectionUpdateResponse : OperationResponse
    {
        private string _eTag;
        
        /// <summary>
        /// New ETag of the updated Job Collection.
        /// </summary>
        public string ETag
        {
            get { return this._eTag; }
            set { this._eTag = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the JobCollectionUpdateResponse class.
        /// </summary>
        public JobCollectionUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// The Resource Provider Get Properties operation response.
    /// </summary>
    public partial class ResourceProviderGetPropertiesResponse : OperationResponse
    {
        private IDictionary<string, string> _properties;
        
        public IDictionary<string, string> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ResourceProviderGetPropertiesResponse class.
        /// </summary>
        public ResourceProviderGetPropertiesResponse()
        {
            this._properties = new Dictionary<string, string>();
        }
    }
    
    /// <summary>
    /// The status of the asynchronous request.
    /// </summary>
    public enum SchedulerOperationStatus
    {
        /// <summary>
        /// The asynchronous request is in progress.
        /// </summary>
        InProgress = 0,
        
        /// <summary>
        /// The asynchronous request succeeded.
        /// </summary>
        Succeeded = 1,
        
        /// <summary>
        /// The asynchronous request failed.
        /// </summary>
        Failed = 2,
    }
    
    /// <summary>
    /// The response body contains the status of the specified asynchronous
    /// operation, indicating whether it has succeeded, is inprogress, or has
    /// failed. Note that this status is distinct from the HTTP status code
    /// returned for the Get Operation Status operation itself.  If the
    /// asynchronous operation succeeded, the response body includes the HTTP
    /// status code for the successful request.  If the asynchronous operation
    /// failed, the response body includes the HTTP status code for the failed
    /// request, and also includes error information regarding the failure.
    /// </summary>
    public partial class SchedulerOperationStatusResponse : OperationResponse
    {
        private SchedulerOperationStatusResponse.ErrorDetails _error;
        
        /// <summary>
        /// If the asynchronous operation failed, the response body includes
        /// the HTTP status code for the failed request, and also includes
        /// error information regarding the failure.
        /// </summary>
        public SchedulerOperationStatusResponse.ErrorDetails Error
        {
            get { return this._error; }
            set { this._error = value; }
        }
        
        private string _eTag;
        
        /// <summary>
        /// Optional ETag, if returned from the original request.
        /// </summary>
        public string ETag
        {
            get { return this._eTag; }
            set { this._eTag = value; }
        }
        
        private HttpStatusCode _httpStatusCode;
        
        /// <summary>
        /// The HTTP status code for the asynchronous request.
        /// </summary>
        public HttpStatusCode HttpStatusCode
        {
            get { return this._httpStatusCode; }
            set { this._httpStatusCode = value; }
        }
        
        private string _id;
        
        /// <summary>
        /// The request ID of the asynchronous request. This value is returned
        /// in the x-ms-request-id response header of the asynchronous request.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private SchedulerOperationStatus _status;
        
        /// <summary>
        /// The status of the asynchronous request.
        /// </summary>
        public SchedulerOperationStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SchedulerOperationStatusResponse
        /// class.
        /// </summary>
        public SchedulerOperationStatusResponse()
        {
        }
        
        /// <summary>
        /// If the asynchronous operation failed, the response body includes
        /// the HTTP status code for the failed request, and also includes
        /// error information regarding the failure.
        /// </summary>
        public partial class ErrorDetails
        {
            private string _code;
            
            /// <summary>
            /// The management service error code returned if the asynchronous
            /// request failed.
            /// </summary>
            public string Code
            {
                get { return this._code; }
                set { this._code = value; }
            }
            
            private string _message;
            
            /// <summary>
            /// The management service error message returned if the
            /// asynchronous request failed.
            /// </summary>
            public string Message
            {
                get { return this._message; }
                set { this._message = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the ErrorDetails class.
            /// </summary>
            public ErrorDetails()
            {
            }
        }
    }
}

namespace Microsoft.WindowsAzure.Management.Scheduler
{
    public partial interface ISchedulerManagementClient
    {
        Uri BaseUri
        {
            get; 
        }
        
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        IJobCollectionOperations JobCollections
        {
            get; 
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of
        /// thespecified operation. After calling an asynchronous operation,
        /// you can call Get Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='requestId'>
        /// The request ID for the request you wish to track. The request ID is
        /// returned in the x-ms-request-id response header for every request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<SchedulerOperationStatusResponse> GetOperationStatusAsync(string requestId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a list of properties for the resource provider, including
        /// supported regions and plans.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Resource Provider Get Properties operation response.
        /// </returns>
        Task<ResourceProviderGetPropertiesResponse> GetResourceProviderPropertiesAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Register the Scheduler resource provider with your subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> RegisterResourceProviderAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Unregister the Scheduler resource provider with your subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UnregisterResourceProviderAsync(CancellationToken cancellationToken);
    }
    
    public static partial class SchedulerManagementClientExtensions
    {
        /// <summary>
        /// The Get Operation Status operation returns the status of
        /// thespecified operation. After calling an asynchronous operation,
        /// you can call Get Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ISchedulerManagementClient.
        /// </param>
        /// <param name='requestId'>
        /// The request ID for the request you wish to track. The request ID is
        /// returned in the x-ms-request-id response header for every request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static SchedulerOperationStatusResponse GetOperationStatus(this ISchedulerManagementClient operations, string requestId)
        {
            try
            {
                return operations.GetOperationStatusAsync(requestId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of
        /// thespecified operation. After calling an asynchronous operation,
        /// you can call Get Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ISchedulerManagementClient.
        /// </param>
        /// <param name='requestId'>
        /// The request ID for the request you wish to track. The request ID is
        /// returned in the x-ms-request-id response header for every request.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<SchedulerOperationStatusResponse> GetOperationStatusAsync(this ISchedulerManagementClient operations, string requestId)
        {
            return operations.GetOperationStatusAsync(requestId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a list of properties for the resource provider, including
        /// supported regions and plans.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ISchedulerManagementClient.
        /// </param>
        /// <returns>
        /// The Resource Provider Get Properties operation response.
        /// </returns>
        public static ResourceProviderGetPropertiesResponse GetResourceProviderProperties(this ISchedulerManagementClient operations)
        {
            try
            {
                return operations.GetResourceProviderPropertiesAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Gets a list of properties for the resource provider, including
        /// supported regions and plans.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ISchedulerManagementClient.
        /// </param>
        /// <returns>
        /// The Resource Provider Get Properties operation response.
        /// </returns>
        public static Task<ResourceProviderGetPropertiesResponse> GetResourceProviderPropertiesAsync(this ISchedulerManagementClient operations)
        {
            return operations.GetResourceProviderPropertiesAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Register the Scheduler resource provider with your subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ISchedulerManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RegisterResourceProvider(this ISchedulerManagementClient operations)
        {
            try
            {
                return operations.RegisterResourceProviderAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Register the Scheduler resource provider with your subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ISchedulerManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RegisterResourceProviderAsync(this ISchedulerManagementClient operations)
        {
            return operations.RegisterResourceProviderAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Unregister the Scheduler resource provider with your subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ISchedulerManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UnregisterResourceProvider(this ISchedulerManagementClient operations)
        {
            try
            {
                return operations.UnregisterResourceProviderAsync().Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Unregister the Scheduler resource provider with your subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.ISchedulerManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UnregisterResourceProviderAsync(this ISchedulerManagementClient operations)
        {
            return operations.UnregisterResourceProviderAsync(CancellationToken.None);
        }
    }
    
    public partial class SchedulerManagementClient : ServiceClient<SchedulerManagementClient>, ISchedulerManagementClient
    {
        private Uri _baseUri;
        
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IJobCollectionOperations _jobCollections;
        
        public virtual IJobCollectionOperations JobCollections
        {
            get { return this._jobCollections; }
        }
        
        /// <summary>
        /// Initializes a new instance of the SchedulerManagementClient class.
        /// </summary>
        private SchedulerManagementClient()
            : base()
        {
            this._jobCollections = new JobCollectionOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the SchedulerManagementClient class.
        /// </summary>
        public SchedulerManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the SchedulerManagementClient class.
        /// </summary>
        public SchedulerManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net/");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// The Get Operation Status operation returns the status of
        /// thespecified operation. After calling an asynchronous operation,
        /// you can call Get Operation Status to determine whether the
        /// operation has succeeded, failed, or is still in progress.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx
        /// for more information)
        /// </summary>
        /// <param name='requestId'>
        /// The request ID for the request you wish to track. The request ID is
        /// returned in the x-ms-request-id response header for every request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<SchedulerOperationStatusResponse> GetOperationStatusAsync(string requestId, CancellationToken cancellationToken)
        {
            // Validate
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("requestId", requestId);
                Tracing.Enter(invocationId, this, "GetOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.BaseUri + this.Credentials.SubscriptionId + "/operations/" + requestId;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SchedulerOperationStatusResponse result = new SchedulerOperationStatusResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement operationElement = responseDoc.Element(XName.Get("Operation", "http://schemas.microsoft.com/windowsazure"));
                    if (operationElement != null)
                    {
                        XElement idElement = operationElement.Element(XName.Get("ID", "http://schemas.microsoft.com/windowsazure"));
                        if (idElement != null)
                        {
                            string idInstance = idElement.Value;
                            result.Id = idInstance;
                        }
                        
                        XElement statusElement = operationElement.Element(XName.Get("Status", "http://schemas.microsoft.com/windowsazure"));
                        if (statusElement != null)
                        {
                            SchedulerOperationStatus statusInstance = (SchedulerOperationStatus)Enum.Parse(typeof(SchedulerOperationStatus), statusElement.Value, false);
                            result.Status = statusInstance;
                        }
                        
                        XElement httpStatusCodeElement = operationElement.Element(XName.Get("HttpStatusCode", "http://schemas.microsoft.com/windowsazure"));
                        if (httpStatusCodeElement != null)
                        {
                            HttpStatusCode httpStatusCodeInstance = (HttpStatusCode)Enum.Parse(typeof(HttpStatusCode), httpStatusCodeElement.Value, false);
                            result.HttpStatusCode = httpStatusCodeInstance;
                        }
                        
                        XElement errorElement = operationElement.Element(XName.Get("Error", "http://schemas.microsoft.com/windowsazure"));
                        if (errorElement != null)
                        {
                            SchedulerOperationStatusResponse.ErrorDetails errorInstance = new SchedulerOperationStatusResponse.ErrorDetails();
                            result.Error = errorInstance;
                            
                            XElement codeElement = errorElement.Element(XName.Get("Code", "http://schemas.microsoft.com/windowsazure"));
                            if (codeElement != null)
                            {
                                string codeInstance = codeElement.Value;
                                errorInstance.Code = codeInstance;
                            }
                            
                            XElement messageElement = errorElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                            if (messageElement != null)
                            {
                                string messageInstance = messageElement.Value;
                                errorInstance.Message = messageInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a list of properties for the resource provider, including
        /// supported regions and plans.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Resource Provider Get Properties operation response.
        /// </returns>
        public async Task<ResourceProviderGetPropertiesResponse> GetResourceProviderPropertiesAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "GetResourceProviderPropertiesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.BaseUri + this.Credentials.SubscriptionId + "/resourceproviders/scheduler/Properties?resourceType=JobCollections";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceProviderGetPropertiesResponse result = new ResourceProviderGetPropertiesResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement resourceProviderPropertiesSequenceElement = responseDoc.Element(XName.Get("ResourceProviderProperties", "http://schemas.microsoft.com/windowsazure"));
                    if (resourceProviderPropertiesSequenceElement != null)
                    {
                        foreach (XElement resourceProviderPropertiesElement in resourceProviderPropertiesSequenceElement.Elements(XName.Get("ResourceProviderProperty", "http://schemas.microsoft.com/windowsazure")))
                        {
                            string resourceProviderPropertiesKey = resourceProviderPropertiesElement.Element(XName.Get("Key", "http://schemas.microsoft.com/windowsazure")).Value;
                            string resourceProviderPropertiesValue = resourceProviderPropertiesElement.Element(XName.Get("Value", "http://schemas.microsoft.com/windowsazure")).Value;
                            result.Properties.Add(resourceProviderPropertiesKey, resourceProviderPropertiesValue);
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Register the Scheduler resource provider with your subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RegisterResourceProviderAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "RegisterResourceProviderAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.BaseUri + this.Credentials.SubscriptionId + "/services?service=scheduler.JobCollections&action=register";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unregister the Scheduler resource provider with your subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UnregisterResourceProviderAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "UnregisterResourceProviderAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.BaseUri + this.Credentials.SubscriptionId + "/services?service=scheduler.JobCollections&action=unregister";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public partial interface IJobCollectionOperations
    {
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Job Collection operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Job Collection operation response.
        /// </returns>
        Task<JobCollectionCreateResponse> BeginCreatingAsync(string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes a job collection
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> BeginDeletingAsync(string cloudServiceName, string jobCollectionName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Job Collection operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Job Collection operation response.
        /// </returns>
        Task<JobCollectionUpdateResponse> BeginUpdatingAsync(string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Determine if the JobCollection name is available to be used.
        /// JobCollection names must be unique within a cloud-service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// A name for the JobCollection. The name must be unique as scoped
        /// within the CloudService.  The name can be up to 100 characters in
        /// length.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Check Name Availability operation response.
        /// </returns>
        Task<JobCollectionCheckNameAvailabilityResponse> CheckNameAvailabilityAsync(string cloudServiceName, string jobCollectionName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Job Collection operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<SchedulerOperationStatusResponse> CreateAsync(string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes a job collection
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<SchedulerOperationStatusResponse> DeleteAsync(string cloudServiceName, string jobCollectionName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Retreive a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Name of the job collection.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Job Collection operation response.
        /// </returns>
        Task<JobCollectionGetResponse> GetAsync(string cloudServiceName, string jobCollectionName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Job Collection operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        Task<SchedulerOperationStatusResponse> UpdateAsync(string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters, CancellationToken cancellationToken);
    }
    
    public static partial class JobCollectionOperationsExtensions
    {
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Job Collection operation.
        /// </param>
        /// <returns>
        /// The Create Job Collection operation response.
        /// </returns>
        public static JobCollectionCreateResponse BeginCreating(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters)
        {
            try
            {
                return operations.BeginCreatingAsync(cloudServiceName, jobCollectionName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Job Collection operation.
        /// </param>
        /// <returns>
        /// The Create Job Collection operation response.
        /// </returns>
        public static Task<JobCollectionCreateResponse> BeginCreatingAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters)
        {
            return operations.BeginCreatingAsync(cloudServiceName, jobCollectionName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a job collection
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginDeleting(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            try
            {
                return operations.BeginDeletingAsync(cloudServiceName, jobCollectionName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Deletes a job collection
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginDeletingAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return operations.BeginDeletingAsync(cloudServiceName, jobCollectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Job Collection operation.
        /// </param>
        /// <returns>
        /// The Update Job Collection operation response.
        /// </returns>
        public static JobCollectionUpdateResponse BeginUpdating(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters)
        {
            try
            {
                return operations.BeginUpdatingAsync(cloudServiceName, jobCollectionName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Job Collection operation.
        /// </param>
        /// <returns>
        /// The Update Job Collection operation response.
        /// </returns>
        public static Task<JobCollectionUpdateResponse> BeginUpdatingAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters)
        {
            return operations.BeginUpdatingAsync(cloudServiceName, jobCollectionName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Determine if the JobCollection name is available to be used.
        /// JobCollection names must be unique within a cloud-service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// A name for the JobCollection. The name must be unique as scoped
        /// within the CloudService.  The name can be up to 100 characters in
        /// length.
        /// </param>
        /// <returns>
        /// The Check Name Availability operation response.
        /// </returns>
        public static JobCollectionCheckNameAvailabilityResponse CheckNameAvailability(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            try
            {
                return operations.CheckNameAvailabilityAsync(cloudServiceName, jobCollectionName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Determine if the JobCollection name is available to be used.
        /// JobCollection names must be unique within a cloud-service.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// A name for the JobCollection. The name must be unique as scoped
        /// within the CloudService.  The name can be up to 100 characters in
        /// length.
        /// </param>
        /// <returns>
        /// The Check Name Availability operation response.
        /// </returns>
        public static Task<JobCollectionCheckNameAvailabilityResponse> CheckNameAvailabilityAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return operations.CheckNameAvailabilityAsync(cloudServiceName, jobCollectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Job Collection operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static SchedulerOperationStatusResponse Create(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters)
        {
            try
            {
                return operations.CreateAsync(cloudServiceName, jobCollectionName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Job Collection operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<SchedulerOperationStatusResponse> CreateAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters)
        {
            return operations.CreateAsync(cloudServiceName, jobCollectionName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a job collection
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static SchedulerOperationStatusResponse Delete(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            try
            {
                return operations.DeleteAsync(cloudServiceName, jobCollectionName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Deletes a job collection
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to delete.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<SchedulerOperationStatusResponse> DeleteAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return operations.DeleteAsync(cloudServiceName, jobCollectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retreive a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Name of the job collection.
        /// </param>
        /// <returns>
        /// The Get Job Collection operation response.
        /// </returns>
        public static JobCollectionGetResponse Get(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            try
            {
                return operations.GetAsync(cloudServiceName, jobCollectionName).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Retreive a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Name of the job collection.
        /// </param>
        /// <returns>
        /// The Get Job Collection operation response.
        /// </returns>
        public static Task<JobCollectionGetResponse> GetAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName)
        {
            return operations.GetAsync(cloudServiceName, jobCollectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Job Collection operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static SchedulerOperationStatusResponse Update(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters)
        {
            try
            {
                return operations.UpdateAsync(cloudServiceName, jobCollectionName, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.IJobCollectionOperations.
        /// </param>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Job Collection operation.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public static Task<SchedulerOperationStatusResponse> UpdateAsync(this IJobCollectionOperations operations, string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters)
        {
            return operations.UpdateAsync(cloudServiceName, jobCollectionName, parameters, CancellationToken.None);
        }
    }
    
    internal partial class JobCollectionOperations : IServiceOperations<SchedulerManagementClient>, IJobCollectionOperations
    {
        /// <summary>
        /// Initializes a new instance of the JobCollectionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobCollectionOperations(SchedulerManagementClient client)
        {
            this._client = client;
        }
        
        private SchedulerManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Scheduler.SchedulerManagementClient.
        /// </summary>
        public SchedulerManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Job Collection operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Job Collection operation response.
        /// </returns>
        public async Task<JobCollectionCreateResponse> BeginCreatingAsync(string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException("jobCollectionName");
            }
            if (jobCollectionName.Length > 100)
            {
                throw new ArgumentOutOfRangeException("jobCollectionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("jobCollectionName", jobCollectionName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginCreatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + cloudServiceName + "/resources/scheduler/JobCollections/" + jobCollectionName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement resourceElement = new XElement(XName.Get("Resource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(resourceElement);
                
                if (parameters.SchemaVersion != null)
                {
                    XElement schemaVersionElement = new XElement(XName.Get("SchemaVersion", "http://schemas.microsoft.com/windowsazure"));
                    schemaVersionElement.Value = parameters.SchemaVersion;
                    resourceElement.Add(schemaVersionElement);
                }
                
                if (parameters.Label != null)
                {
                    XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                    labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                    resourceElement.Add(labelElement);
                }
                
                if (parameters.IntrinsicSettings != null)
                {
                    XElement intrinsicSettingsElement = new XElement(XName.Get("IntrinsicSettings", "http://schemas.microsoft.com/windowsazure"));
                    resourceElement.Add(intrinsicSettingsElement);
                    
                    XElement planElement = new XElement(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                    planElement.Value = parameters.IntrinsicSettings.Plan.ToString();
                    intrinsicSettingsElement.Add(planElement);
                    
                    if (parameters.IntrinsicSettings.Quota != null)
                    {
                        XElement quotaElement = new XElement(XName.Get("Quota", "http://schemas.microsoft.com/windowsazure"));
                        intrinsicSettingsElement.Add(quotaElement);
                        
                        if (parameters.IntrinsicSettings.Quota.MaxJobCount != null)
                        {
                            XElement maxJobCountElement = new XElement(XName.Get("MaxJobCount", "http://schemas.microsoft.com/windowsazure"));
                            maxJobCountElement.Value = parameters.IntrinsicSettings.Quota.MaxJobCount.ToString();
                            quotaElement.Add(maxJobCountElement);
                        }
                        
                        if (parameters.IntrinsicSettings.Quota.MaxJobOccurrence != null)
                        {
                            XElement maxJobOccurrenceElement = new XElement(XName.Get("MaxJobOccurrence", "http://schemas.microsoft.com/windowsazure"));
                            maxJobOccurrenceElement.Value = parameters.IntrinsicSettings.Quota.MaxJobOccurrence.ToString();
                            quotaElement.Add(maxJobOccurrenceElement);
                        }
                        
                        if (parameters.IntrinsicSettings.Quota.MaxRecurrence != null)
                        {
                            XElement maxRecurrenceElement = new XElement(XName.Get("MaxRecurrence", "http://schemas.microsoft.com/windowsazure"));
                            quotaElement.Add(maxRecurrenceElement);
                            
                            XElement frequencyElement = new XElement(XName.Get("Frequency", "http://schemas.microsoft.com/windowsazure"));
                            frequencyElement.Value = parameters.IntrinsicSettings.Quota.MaxRecurrence.Frequency.ToString();
                            maxRecurrenceElement.Add(frequencyElement);
                            
                            XElement intervalElement = new XElement(XName.Get("Interval", "http://schemas.microsoft.com/windowsazure"));
                            intervalElement.Value = parameters.IntrinsicSettings.Quota.MaxRecurrence.Interval.ToString();
                            maxRecurrenceElement.Add(intervalElement);
                        }
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobCollectionCreateResponse result = new JobCollectionCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.ETag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a job collection
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginDeletingAsync(string cloudServiceName, string jobCollectionName, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException("jobCollectionName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("jobCollectionName", jobCollectionName);
                Tracing.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + cloudServiceName + "/resources/scheduler/JobCollections/" + jobCollectionName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Job Collection operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Update Job Collection operation response.
        /// </returns>
        public async Task<JobCollectionUpdateResponse> BeginUpdatingAsync(string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException("jobCollectionName");
            }
            if (jobCollectionName.Length > 100)
            {
                throw new ArgumentOutOfRangeException("jobCollectionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ETag == null)
            {
                throw new ArgumentNullException("parameters.ETag");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("jobCollectionName", jobCollectionName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "BeginUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + cloudServiceName + "/resources/scheduler/JobCollections/" + jobCollectionName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.TryAddWithoutValidation("If-Match", parameters.ETag);
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                XDocument requestDoc = new XDocument();
                
                XElement resourceElement = new XElement(XName.Get("Resource", "http://schemas.microsoft.com/windowsazure"));
                requestDoc.Add(resourceElement);
                
                if (parameters.SchemaVersion != null)
                {
                    XElement schemaVersionElement = new XElement(XName.Get("SchemaVersion", "http://schemas.microsoft.com/windowsazure"));
                    schemaVersionElement.Value = parameters.SchemaVersion;
                    resourceElement.Add(schemaVersionElement);
                }
                
                if (parameters.Label != null)
                {
                    XElement labelElement = new XElement(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                    labelElement.Value = TypeConversion.ToBase64String(parameters.Label);
                    resourceElement.Add(labelElement);
                }
                
                if (parameters.IntrinsicSettings != null)
                {
                    XElement intrinsicSettingsElement = new XElement(XName.Get("IntrinsicSettings", "http://schemas.microsoft.com/windowsazure"));
                    resourceElement.Add(intrinsicSettingsElement);
                    
                    XElement planElement = new XElement(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                    planElement.Value = parameters.IntrinsicSettings.Plan.ToString();
                    intrinsicSettingsElement.Add(planElement);
                    
                    if (parameters.IntrinsicSettings.Quota != null)
                    {
                        XElement quotaElement = new XElement(XName.Get("Quota", "http://schemas.microsoft.com/windowsazure"));
                        intrinsicSettingsElement.Add(quotaElement);
                        
                        if (parameters.IntrinsicSettings.Quota.MaxJobCount != null)
                        {
                            XElement maxJobCountElement = new XElement(XName.Get("MaxJobCount", "http://schemas.microsoft.com/windowsazure"));
                            maxJobCountElement.Value = parameters.IntrinsicSettings.Quota.MaxJobCount.ToString();
                            quotaElement.Add(maxJobCountElement);
                        }
                        
                        if (parameters.IntrinsicSettings.Quota.MaxJobOccurrence != null)
                        {
                            XElement maxJobOccurrenceElement = new XElement(XName.Get("MaxJobOccurrence", "http://schemas.microsoft.com/windowsazure"));
                            maxJobOccurrenceElement.Value = parameters.IntrinsicSettings.Quota.MaxJobOccurrence.ToString();
                            quotaElement.Add(maxJobOccurrenceElement);
                        }
                        
                        if (parameters.IntrinsicSettings.Quota.MaxRecurrence != null)
                        {
                            XElement maxRecurrenceElement = new XElement(XName.Get("MaxRecurrence", "http://schemas.microsoft.com/windowsazure"));
                            quotaElement.Add(maxRecurrenceElement);
                            
                            XElement frequencyElement = new XElement(XName.Get("Frequency", "http://schemas.microsoft.com/windowsazure"));
                            frequencyElement.Value = parameters.IntrinsicSettings.Quota.MaxRecurrence.Frequency.ToString();
                            maxRecurrenceElement.Add(frequencyElement);
                            
                            XElement intervalElement = new XElement(XName.Get("Interval", "http://schemas.microsoft.com/windowsazure"));
                            intervalElement.Value = parameters.IntrinsicSettings.Quota.MaxRecurrence.Interval.ToString();
                            maxRecurrenceElement.Add(intervalElement);
                        }
                    }
                }
                
                requestContent = requestDoc.ToString();
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/xml");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobCollectionUpdateResponse result = new JobCollectionUpdateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("ETag"))
                    {
                        result.ETag = httpResponse.Headers.GetValues("ETag").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Determine if the JobCollection name is available to be used.
        /// JobCollection names must be unique within a cloud-service.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// A name for the JobCollection. The name must be unique as scoped
        /// within the CloudService.  The name can be up to 100 characters in
        /// length.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Check Name Availability operation response.
        /// </returns>
        public async Task<JobCollectionCheckNameAvailabilityResponse> CheckNameAvailabilityAsync(string cloudServiceName, string jobCollectionName, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException("jobCollectionName");
            }
            if (jobCollectionName.Length > 100)
            {
                throw new ArgumentOutOfRangeException("jobCollectionName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("jobCollectionName", jobCollectionName);
                Tracing.Enter(invocationId, this, "CheckNameAvailabilityAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + cloudServiceName + "/resources/scheduler/JobCollections/?op=checknameavailability&resourceName=" + jobCollectionName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobCollectionCheckNameAvailabilityResponse result = new JobCollectionCheckNameAvailabilityResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement resourceNameAvailabilityResponseElement = responseDoc.Element(XName.Get("ResourceNameAvailabilityResponse", "http://schemas.microsoft.com/windowsazure"));
                    if (resourceNameAvailabilityResponseElement != null)
                    {
                        XElement isAvailableElement = resourceNameAvailabilityResponseElement.Element(XName.Get("IsAvailable", "http://schemas.microsoft.com/windowsazure"));
                        if (isAvailableElement != null)
                        {
                            bool isAvailableInstance = bool.Parse(isAvailableElement.Value);
                            result.IsAvailable = isAvailableInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to create.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Job Collection operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<SchedulerOperationStatusResponse> CreateAsync(string cloudServiceName, string jobCollectionName, JobCollectionCreateParameters parameters, CancellationToken cancellationToken)
        {
            SchedulerManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("jobCollectionName", jobCollectionName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                JobCollectionCreateResponse response = await client.JobCollections.BeginCreatingAsync(cloudServiceName, jobCollectionName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                SchedulerOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 15;
                while ((result.Status != SchedulerOperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 10;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != SchedulerOperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                result.ETag = response.ETag;
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a job collection
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<SchedulerOperationStatusResponse> DeleteAsync(string cloudServiceName, string jobCollectionName, CancellationToken cancellationToken)
        {
            SchedulerManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("jobCollectionName", jobCollectionName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                OperationResponse response = await client.JobCollections.BeginDeletingAsync(cloudServiceName, jobCollectionName, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                SchedulerOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 15;
                while ((result.Status != SchedulerOperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 10;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != SchedulerOperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retreive a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// Name of the cloud service.
        /// </param>
        /// <param name='jobCollectionName'>
        /// Name of the job collection.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Job Collection operation response.
        /// </returns>
        public async Task<JobCollectionGetResponse> GetAsync(string cloudServiceName, string jobCollectionName, CancellationToken cancellationToken)
        {
            // Validate
            if (cloudServiceName == null)
            {
                throw new ArgumentNullException("cloudServiceName");
            }
            if (jobCollectionName == null)
            {
                throw new ArgumentNullException("jobCollectionName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("jobCollectionName", jobCollectionName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + this.Client.Credentials.SubscriptionId + "/cloudservices/" + cloudServiceName + "/resources/scheduler/~/JobCollections/" + jobCollectionName;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobCollectionGetResponse result = new JobCollectionGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement resourceElement = responseDoc.Element(XName.Get("Resource", "http://schemas.microsoft.com/windowsazure"));
                    if (resourceElement != null)
                    {
                        XElement nameElement = resourceElement.Element(XName.Get("Name", "http://schemas.microsoft.com/windowsazure"));
                        if (nameElement != null)
                        {
                            string nameInstance = nameElement.Value;
                            result.Name = nameInstance;
                        }
                        
                        XElement eTagElement = resourceElement.Element(XName.Get("ETag", "http://schemas.microsoft.com/windowsazure"));
                        if (eTagElement != null)
                        {
                            string eTagInstance = eTagElement.Value;
                            result.ETag = eTagInstance;
                        }
                        
                        XElement stateElement = resourceElement.Element(XName.Get("State", "http://schemas.microsoft.com/windowsazure"));
                        if (stateElement != null)
                        {
                            JobCollectionState stateInstance = (JobCollectionState)Enum.Parse(typeof(JobCollectionState), stateElement.Value, false);
                            result.State = stateInstance;
                        }
                        
                        XElement schemaVersionElement = resourceElement.Element(XName.Get("SchemaVersion", "http://schemas.microsoft.com/windowsazure"));
                        if (schemaVersionElement != null)
                        {
                            string schemaVersionInstance = schemaVersionElement.Value;
                            result.SchemaVersion = schemaVersionInstance;
                        }
                        
                        XElement planElement = resourceElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                        if (planElement != null)
                        {
                            string planInstance = planElement.Value;
                            result.Plan = planInstance;
                        }
                        
                        XElement promotionCodeElement = resourceElement.Element(XName.Get("PromotionCode", "http://schemas.microsoft.com/windowsazure"));
                        if (promotionCodeElement != null)
                        {
                            string promotionCodeInstance = promotionCodeElement.Value;
                            result.PromotionCode = promotionCodeInstance;
                        }
                        
                        XElement intrinsicSettingsElement = resourceElement.Element(XName.Get("IntrinsicSettings", "http://schemas.microsoft.com/windowsazure"));
                        if (intrinsicSettingsElement != null)
                        {
                            JobCollectionIntrinsicSettings intrinsicSettingsInstance = new JobCollectionIntrinsicSettings();
                            result.IntrinsicSettings = intrinsicSettingsInstance;
                            
                            XElement planElement2 = intrinsicSettingsElement.Element(XName.Get("Plan", "http://schemas.microsoft.com/windowsazure"));
                            if (planElement2 != null)
                            {
                                JobCollectionPlan planInstance2 = (JobCollectionPlan)Enum.Parse(typeof(JobCollectionPlan), planElement2.Value, false);
                                intrinsicSettingsInstance.Plan = planInstance2;
                            }
                            
                            XElement quotaElement = intrinsicSettingsElement.Element(XName.Get("Quota", "http://schemas.microsoft.com/windowsazure"));
                            if (quotaElement != null)
                            {
                                JobCollectionQuota quotaInstance = new JobCollectionQuota();
                                intrinsicSettingsInstance.Quota = quotaInstance;
                                
                                XElement maxJobCountElement = quotaElement.Element(XName.Get("MaxJobCount", "http://schemas.microsoft.com/windowsazure"));
                                if (maxJobCountElement != null && string.IsNullOrEmpty(maxJobCountElement.Value) == false)
                                {
                                    int maxJobCountInstance = int.Parse(maxJobCountElement.Value, CultureInfo.InvariantCulture);
                                    quotaInstance.MaxJobCount = maxJobCountInstance;
                                }
                                
                                XElement maxJobOccurrenceElement = quotaElement.Element(XName.Get("MaxJobOccurrence", "http://schemas.microsoft.com/windowsazure"));
                                if (maxJobOccurrenceElement != null && string.IsNullOrEmpty(maxJobOccurrenceElement.Value) == false)
                                {
                                    int maxJobOccurrenceInstance = int.Parse(maxJobOccurrenceElement.Value, CultureInfo.InvariantCulture);
                                    quotaInstance.MaxJobOccurrence = maxJobOccurrenceInstance;
                                }
                                
                                XElement maxRecurrenceElement = quotaElement.Element(XName.Get("MaxRecurrence", "http://schemas.microsoft.com/windowsazure"));
                                if (maxRecurrenceElement != null)
                                {
                                    JobCollectionMaxRecurrence maxRecurrenceInstance = new JobCollectionMaxRecurrence();
                                    quotaInstance.MaxRecurrence = maxRecurrenceInstance;
                                    
                                    XElement frequencyElement = maxRecurrenceElement.Element(XName.Get("Frequency", "http://schemas.microsoft.com/windowsazure"));
                                    if (frequencyElement != null)
                                    {
                                        JobCollectionRecurrenceFrequency frequencyInstance = (JobCollectionRecurrenceFrequency)Enum.Parse(typeof(JobCollectionRecurrenceFrequency), frequencyElement.Value, false);
                                        maxRecurrenceInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    XElement intervalElement = maxRecurrenceElement.Element(XName.Get("Interval", "http://schemas.microsoft.com/windowsazure"));
                                    if (intervalElement != null)
                                    {
                                        int intervalInstance = int.Parse(intervalElement.Value, CultureInfo.InvariantCulture);
                                        maxRecurrenceInstance.Interval = intervalInstance;
                                    }
                                }
                            }
                        }
                        
                        XElement labelElement = resourceElement.Element(XName.Get("Label", "http://schemas.microsoft.com/windowsazure"));
                        if (labelElement != null)
                        {
                            string labelInstance = TypeConversion.FromBase64String(labelElement.Value);
                            result.Label = labelInstance;
                        }
                        
                        XElement cloudServiceSettingsElement = resourceElement.Element(XName.Get("CloudServiceSettings", "http://schemas.microsoft.com/windowsazure"));
                        if (cloudServiceSettingsElement != null)
                        {
                            JobCollectionGetResponse.CloudServiceSettingInfo cloudServiceSettingsInstance = new JobCollectionGetResponse.CloudServiceSettingInfo();
                            result.CloudServiceSettings = cloudServiceSettingsInstance;
                            
                            XElement geoRegionElement = cloudServiceSettingsElement.Element(XName.Get("GeoRegion", "http://schemas.microsoft.com/windowsazure"));
                            if (geoRegionElement != null)
                            {
                                string geoRegionInstance = geoRegionElement.Value;
                                cloudServiceSettingsInstance.GeoRegion = geoRegionInstance;
                            }
                        }
                        
                        XElement operationStatusElement = resourceElement.Element(XName.Get("OperationStatus", "http://schemas.microsoft.com/windowsazure"));
                        if (operationStatusElement != null)
                        {
                            JobCollectionGetResponse.OperationStatus operationStatusInstance = new JobCollectionGetResponse.OperationStatus();
                            result.LastOperationStatus = operationStatusInstance;
                            
                            XElement errorElement = operationStatusElement.Element(XName.Get("Error", "http://schemas.microsoft.com/windowsazure"));
                            if (errorElement != null)
                            {
                                JobCollectionGetResponse.OperationStatusResponseDetails errorInstance = new JobCollectionGetResponse.OperationStatusResponseDetails();
                                operationStatusInstance.ResponseDetails = errorInstance;
                                
                                XElement httpCodeElement = errorElement.Element(XName.Get("HttpCode", "http://schemas.microsoft.com/windowsazure"));
                                if (httpCodeElement != null)
                                {
                                    HttpStatusCode httpCodeInstance = (HttpStatusCode)Enum.Parse(typeof(HttpStatusCode), httpCodeElement.Value, false);
                                    errorInstance.StatusCode = httpCodeInstance;
                                }
                                
                                XElement messageElement = errorElement.Element(XName.Get("Message", "http://schemas.microsoft.com/windowsazure"));
                                if (messageElement != null)
                                {
                                    string messageInstance = messageElement.Value;
                                    errorInstance.Message = messageInstance;
                                }
                            }
                            
                            XElement resultElement = operationStatusElement.Element(XName.Get("Result", "http://schemas.microsoft.com/windowsazure"));
                            if (resultElement != null)
                            {
                                SchedulerOperationStatus resultInstance = (SchedulerOperationStatus)Enum.Parse(typeof(SchedulerOperationStatus), resultElement.Value, false);
                                operationStatusInstance.Status = resultInstance;
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update a job collection.
        /// </summary>
        /// <param name='cloudServiceName'>
        /// The name of the cloud service containing the job collection.
        /// </param>
        /// <param name='jobCollectionName'>
        /// The name of the job collection to update.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Update Job Collection operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself.  If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request.  If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request, and also includes error
        /// information regarding the failure.
        /// </returns>
        public async Task<SchedulerOperationStatusResponse> UpdateAsync(string cloudServiceName, string jobCollectionName, JobCollectionUpdateParameters parameters, CancellationToken cancellationToken)
        {
            SchedulerManagementClient client = this.Client;
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("cloudServiceName", cloudServiceName);
                tracingParameters.Add("jobCollectionName", jobCollectionName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            try
            {
                if (shouldTrace)
                {
                    client = this.Client.WithHandler(new ClientRequestTrackingHandler(invocationId));
                }
                
                cancellationToken.ThrowIfCancellationRequested();
                JobCollectionUpdateResponse response = await client.JobCollections.BeginUpdatingAsync(cloudServiceName, jobCollectionName, parameters, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                SchedulerOperationStatusResponse result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                int delayInSeconds = 15;
                while ((result.Status != SchedulerOperationStatus.InProgress) == false)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                    cancellationToken.ThrowIfCancellationRequested();
                    result = await client.GetOperationStatusAsync(response.RequestId, cancellationToken).ConfigureAwait(false);
                    delayInSeconds = 10;
                }
                
                if (shouldTrace)
                {
                    Tracing.Exit(invocationId, result);
                }
                
                if (result.Status != SchedulerOperationStatus.Succeeded)
                {
                    CloudException ex = new CloudException(result.Error.Code + " : " + result.Error.Message);
                    ex.ErrorCode = result.Error.Code;
                    ex.ErrorMessage = result.Error.Message;
                    if (shouldTrace)
                    {
                        Tracing.Error(invocationId, ex);
                    }
                    throw ex;
                }
                
                result.ETag = response.ETag;
                return result;
            }
            finally
            {
                if (client != null && shouldTrace)
                {
                    client.Dispose();
                }
            }
        }
    }
}
