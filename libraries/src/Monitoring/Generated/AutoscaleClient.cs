// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Monitoring.Autoscale;
using Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
{
    /// <summary>
    /// Autoscale profile.
    /// </summary>
    public partial class AutoscaleProfile
    {
        private ScaleCapacity _capacity;
        
        /// <summary>
        /// The number of instances that can be used in the scaling action.
        /// </summary>
        public ScaleCapacity Capacity
        {
            get { return this._capacity; }
            set { this._capacity = value; }
        }
        
        private TimeWindow _fixedDate;
        
        /// <summary>
        /// A specific date for the scaling action. This element is not used if
        /// the Recurrence element is used.
        /// </summary>
        public TimeWindow FixedDate
        {
            get { return this._fixedDate; }
            set { this._fixedDate = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// The name of the profile.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private Recurrence _recurrence;
        
        /// <summary>
        /// The frequency and schedule for the scaling action. This element is
        /// not used if the FixedDate element is used.
        /// </summary>
        public Recurrence Recurrence
        {
            get { return this._recurrence; }
            set { this._recurrence = value; }
        }
        
        private IList<ScaleRule> _rules;
        
        /// <summary>
        /// A collection of rules that provide the triggers and parameters for
        /// the scaling action.
        /// </summary>
        public IList<ScaleRule> Rules
        {
            get { return this._rules; }
            set { this._rules = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleProfile class.
        /// </summary>
        public AutoscaleProfile()
        {
            this._rules = new List<ScaleRule>();
        }
    }
    
    /// <summary>
    /// Autoscale setting.
    /// </summary>
    public partial class AutoscaleSetting
    {
        private bool _enabled;
        
        public bool Enabled
        {
            get { return this._enabled; }
            set { this._enabled = value; }
        }
        
        private IList<AutoscaleProfile> _profiles;
        
        public IList<AutoscaleProfile> Profiles
        {
            get { return this._profiles; }
            set { this._profiles = value; }
        }
        
        private string _source;
        
        public string Source
        {
            get { return this._source; }
            set { this._source = value; }
        }
        
        private string _subscriptionId;
        
        public string SubscriptionId
        {
            get { return this._subscriptionId; }
            set { this._subscriptionId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSetting class.
        /// </summary>
        public AutoscaleSetting()
        {
            this._profiles = new List<AutoscaleProfile>();
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create or Update autoscale setting operation.
    /// </summary>
    public partial class AutoscaleSettingCreateOrUpdateParameters
    {
        private AutoscaleSetting _setting;
        
        /// <summary>
        /// The setting to create or update.
        /// </summary>
        public AutoscaleSetting Setting
        {
            get { return this._setting; }
            set { this._setting = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// AutoscaleSettingCreateOrUpdateParameters class.
        /// </summary>
        public AutoscaleSettingCreateOrUpdateParameters()
        {
        }
    }
    
    /// <summary>
    /// A standard service response including an HTTP status code and request
    /// ID.
    /// </summary>
    public partial class AutoscaleSettingGetResponse : OperationResponse
    {
        private AutoscaleSetting _setting;
        
        public AutoscaleSetting Setting
        {
            get { return this._setting; }
            set { this._setting = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleSettingGetResponse class.
        /// </summary>
        public AutoscaleSettingGetResponse()
        {
        }
    }
    
    public enum ComparisonOperationType
    {
        Equals = 0,
        
        NotEquals = 1,
        
        GreaterThan = 2,
        
        GreaterThanOrEqual = 3,
        
        LessThan = 4,
        
        LessThanOrEqual = 5,
    }
    
    public enum MetricStatisticType
    {
        Average = 0,
        
        Min = 1,
        
        Max = 2,
        
        Sum = 3,
    }
    
    /// <summary>
    /// A rule that provides the triggers and parameters for the scaling action.
    /// </summary>
    public partial class MetricTrigger
    {
        private string _name;
        
        /// <summary>
        /// The name of the trigger.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _namespace;
        
        /// <summary>
        /// A namespace identifier for the service in which the deployment is
        /// running.
        /// </summary>
        public string Namespace
        {
            get { return this._namespace; }
            set { this._namespace = value; }
        }
        
        private ComparisonOperationType _operator;
        
        /// <summary>
        /// The operator that is used to evaluate the metric.
        /// </summary>
        public ComparisonOperationType Operator
        {
            get { return this._operator; }
            set { this._operator = value; }
        }
        
        private string _resource;
        
        /// <summary>
        /// The resource path of the deployment.
        /// </summary>
        public string Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        private MetricStatisticType _statistic;
        
        /// <summary>
        /// How the metrics from multiple instances are combined.
        /// </summary>
        public MetricStatisticType Statistic
        {
            get { return this._statistic; }
            set { this._statistic = value; }
        }
        
        private double _threshold;
        
        /// <summary>
        /// The percentage of usage that triggers the scaling operation.
        /// </summary>
        public double Threshold
        {
            get { return this._threshold; }
            set { this._threshold = value; }
        }
        
        private TimeAggregationType _timeAggregation;
        
        /// <summary>
        /// How the data that is collected should be combined over time.
        /// </summary>
        public TimeAggregationType TimeAggregation
        {
            get { return this._timeAggregation; }
            set { this._timeAggregation = value; }
        }
        
        private string _timeGrain;
        
        /// <summary>
        /// The frequency of data collection.
        /// </summary>
        public string TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        private string _timeWindow;
        
        /// <summary>
        /// The range of time in which instance data is collected.
        /// </summary>
        public string TimeWindow
        {
            get { return this._timeWindow; }
            set { this._timeWindow = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricTrigger class.
        /// </summary>
        public MetricTrigger()
        {
        }
    }
    
    public partial class Recurrence
    {
        private RecurrenceFrequency _frequency;
        
        public RecurrenceFrequency Frequency
        {
            get { return this._frequency; }
            set { this._frequency = value; }
        }
        
        private RecurrentSchedule _schedule;
        
        public RecurrentSchedule Schedule
        {
            get { return this._schedule; }
            set { this._schedule = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Recurrence class.
        /// </summary>
        public Recurrence()
        {
        }
    }
    
    public enum RecurrenceFrequency
    {
        /// <summary>
        /// No recurrence
        /// </summary>
        None = 0,
        
        /// <summary>
        /// A recurrence value measured in seconds.
        /// </summary>
        Second = 1,
        
        /// <summary>
        /// A recurrence value measured in minutes.
        /// </summary>
        Minute = 2,
        
        /// <summary>
        /// A recurrence value measured in hours.
        /// </summary>
        Hour = 3,
        
        /// <summary>
        /// A recurrence value measured in days.
        /// </summary>
        Day = 4,
        
        /// <summary>
        /// A recurrence value measured in weeks.
        /// </summary>
        Week = 5,
        
        /// <summary>
        /// A recurrence value measured in months.
        /// </summary>
        Month = 6,
        
        /// <summary>
        /// A recurrence value measured in years.
        /// </summary>
        Year = 7,
    }
    
    public partial class RecurrentSchedule
    {
        private IList<string> _days;
        
        public IList<string> Days
        {
            get { return this._days; }
            set { this._days = value; }
        }
        
        private IList<int> _hours;
        
        public IList<int> Hours
        {
            get { return this._hours; }
            set { this._hours = value; }
        }
        
        private IList<int> _minutes;
        
        public IList<int> Minutes
        {
            get { return this._minutes; }
            set { this._minutes = value; }
        }
        
        private string _timeZone;
        
        public string TimeZone
        {
            get { return this._timeZone; }
            set { this._timeZone = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RecurrentSchedule class.
        /// </summary>
        public RecurrentSchedule()
        {
            this._days = new List<string>();
            this._hours = new List<int>();
            this._minutes = new List<int>();
        }
    }
    
    /// <summary>
    /// The action for scaling.
    /// </summary>
    public partial class ScaleAction
    {
        private string _cooldown;
        
        /// <summary>
        /// The cooldown interval for scaling action.
        /// </summary>
        public string Cooldown
        {
            get { return this._cooldown; }
            set { this._cooldown = value; }
        }
        
        private ScaleDirection _direction;
        
        /// <summary>
        /// The direction of scaling.
        /// </summary>
        public ScaleDirection Direction
        {
            get { return this._direction; }
            set { this._direction = value; }
        }
        
        private ScaleType _type;
        
        /// <summary>
        /// The type of scaling.
        /// </summary>
        public ScaleType Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// The rate of scaling.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ScaleAction class.
        /// </summary>
        public ScaleAction()
        {
        }
    }
    
    /// <summary>
    /// The number of instances that can be used in the scaling action.
    /// </summary>
    public partial class ScaleCapacity
    {
        private string _default;
        
        /// <summary>
        /// The default number of instances that are available for the scaling
        /// action.
        /// </summary>
        public string Default
        {
            get { return this._default; }
            set { this._default = value; }
        }
        
        private string _maximum;
        
        /// <summary>
        /// The maximum number of instances that are available for the scaling
        /// action.
        /// </summary>
        public string Maximum
        {
            get { return this._maximum; }
            set { this._maximum = value; }
        }
        
        private string _minimum;
        
        /// <summary>
        /// The minimum number of instances that are available for the scaling
        /// action.
        /// </summary>
        public string Minimum
        {
            get { return this._minimum; }
            set { this._minimum = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ScaleCapacity class.
        /// </summary>
        public ScaleCapacity()
        {
        }
    }
    
    public enum ScaleDirection
    {
        /// <summary>
        /// Do nothing.
        /// </summary>
        None = 0,
        
        /// <summary>
        /// Increase capacity.
        /// </summary>
        Increase = 1,
        
        /// <summary>
        /// Decrease capacity.
        /// </summary>
        Decrease = 2,
    }
    
    /// <summary>
    /// A rule that provide the triggers and parameters for the scaling action.
    /// </summary>
    public partial class ScaleRule
    {
        private MetricTrigger _metricTrigger;
        
        /// <summary>
        /// The metrics that are used to determine when a scaling action occurs.
        /// </summary>
        public MetricTrigger MetricTrigger
        {
            get { return this._metricTrigger; }
            set { this._metricTrigger = value; }
        }
        
        private ScaleAction _scaleAction;
        
        /// <summary>
        /// The parameters for the scaling action.
        /// </summary>
        public ScaleAction ScaleAction
        {
            get { return this._scaleAction; }
            set { this._scaleAction = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ScaleRule class.
        /// </summary>
        public ScaleRule()
        {
        }
    }
    
    public enum ScaleType
    {
        /// <summary>
        /// The change size.
        /// </summary>
        ChangeSize = 0,
        
        /// <summary>
        /// The change count.
        /// </summary>
        ChangeCount = 1,
        
        /// <summary>
        /// The percent change count.
        /// </summary>
        PercentChangeCount = 2,
        
        /// <summary>
        /// The exact count.
        /// </summary>
        ExactCount = 3,
    }
    
    public enum TimeAggregationType
    {
        Average = 0,
        
        Minimum = 1,
        
        Maximum = 2,
        
        Last = 3,
        
        Total = 4,
        
        Count = 5,
    }
    
    /// <summary>
    /// The action for scaling.
    /// </summary>
    public partial class TimeWindow
    {
        private DateTime _end;
        
        /// <summary>
        /// The end of the time window.
        /// </summary>
        public DateTime End
        {
            get { return this._end; }
            set { this._end = value; }
        }
        
        private DateTime _start;
        
        /// <summary>
        /// The start of the time window.
        /// </summary>
        public DateTime Start
        {
            get { return this._start; }
            set { this._start = value; }
        }
        
        private string _timeZone;
        
        /// <summary>
        /// The time zone information.
        /// </summary>
        public string TimeZone
        {
            get { return this._timeZone; }
            set { this._timeZone = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the TimeWindow class.
        /// </summary>
        public TimeWindow()
        {
        }
    }
}

namespace Microsoft.WindowsAzure.Management.Monitoring.Autoscale
{
    public partial interface IAutoscaleClient
    {
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the autoscale settings.
        /// </summary>
        ISettingOperations Settings
        {
            get; 
        }
    }
    
    public static partial class AutoscaleClientExtensions
    {
    }
    
    public partial class AutoscaleClient : ServiceClient<AutoscaleClient>, IAutoscaleClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private ISettingOperations _settings;
        
        /// <summary>
        /// Operations for managing the autoscale settings.
        /// </summary>
        public virtual ISettingOperations Settings
        {
            get { return this._settings; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleClient class.
        /// </summary>
        private AutoscaleClient()
            : base()
        {
            this._settings = new SettingOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        /// <param name='baseUri'>
        /// Optional base uri parameter.
        /// </param>
        public AutoscaleClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the AutoscaleClient class.
        /// </summary>
        /// <param name='credentials'>
        /// When you create a Windows Azure subscription, it is uniquely
        /// identified by a subscription ID. The subscription ID forms part of
        /// the URI for every call that you make to the Service Management
        /// API.  The Windows Azure Service ManagementAPI use mutual
        /// authentication of management certificates over SSL to ensure that
        /// a request made to the service is secure.  No anonymous requests
        /// are allowed.
        /// </param>
        public AutoscaleClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    /// <summary>
    /// Operations for managing the autoscale settings.
    /// </summary>
    public partial interface ISettingOperations
    {
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateOrUpdateAsync(string resourceId, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string resourceId, CancellationToken cancellationToken);
        
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AutoscaleSettingGetResponse> GetAsync(string resourceId, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the autoscale settings.
    /// </summary>
    public static partial class SettingOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Autoscale.ISettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdate(this ISettingOperations operations, string resourceId, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            try
            {
                return operations.CreateOrUpdateAsync(resourceId, parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Autoscale.ISettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateAsync(this ISettingOperations operations, string resourceId, AutoscaleSettingCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceId, parameters, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Autoscale.ISettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this ISettingOperations operations, string resourceId)
        {
            try
            {
                return operations.DeleteAsync(resourceId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Autoscale.ISettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this ISettingOperations operations, string resourceId)
        {
            return operations.DeleteAsync(resourceId, CancellationToken.None);
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Autoscale.ISettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AutoscaleSettingGetResponse Get(this ISettingOperations operations, string resourceId)
        {
            try
            {
                return operations.GetAsync(resourceId).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Autoscale.ISettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AutoscaleSettingGetResponse> GetAsync(this ISettingOperations operations, string resourceId)
        {
            return operations.GetAsync(resourceId, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the autoscale settings.
    /// </summary>
    internal partial class SettingOperations : IServiceOperations<AutoscaleClient>, ISettingOperations
    {
        /// <summary>
        /// Initializes a new instance of the SettingOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal SettingOperations(AutoscaleClient client)
        {
            this._client = client;
        }
        
        private AutoscaleClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Autoscale.AutoscaleClient.
        /// </summary>
        public AutoscaleClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateAsync(string resourceId, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceId", resourceId);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/autoscalesettings?resourceId=" + resourceId;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (parameters.Setting != null)
                {
                    JObject settingValue = new JObject();
                    requestDoc = settingValue;
                    
                    if (parameters.Setting.Profiles != null)
                    {
                        JArray profilesArray = new JArray();
                        foreach (AutoscaleProfile profilesItem in parameters.Setting.Profiles)
                        {
                            JObject autoscaleProfileValue = new JObject();
                            profilesArray.Add(autoscaleProfileValue);
                            
                            if (profilesItem.Name != null)
                            {
                                JToken nameValue = profilesItem.Name;
                                autoscaleProfileValue["Name"] = nameValue;
                            }
                            
                            if (profilesItem.Capacity != null)
                            {
                                JObject capacityValue = new JObject();
                                autoscaleProfileValue["Capacity"] = capacityValue;
                                
                                if (profilesItem.Capacity.Minimum != null)
                                {
                                    JToken minimumValue = profilesItem.Capacity.Minimum;
                                    capacityValue["Minimum"] = minimumValue;
                                }
                                
                                if (profilesItem.Capacity.Maximum != null)
                                {
                                    JToken maximumValue = profilesItem.Capacity.Maximum;
                                    capacityValue["Maximum"] = maximumValue;
                                }
                                
                                if (profilesItem.Capacity.Default != null)
                                {
                                    JToken defaultValue = profilesItem.Capacity.Default;
                                    capacityValue["Default"] = defaultValue;
                                }
                            }
                            
                            if (profilesItem.Rules != null)
                            {
                                JArray rulesArray = new JArray();
                                foreach (ScaleRule rulesItem in profilesItem.Rules)
                                {
                                    JObject scaleRuleValue = new JObject();
                                    rulesArray.Add(scaleRuleValue);
                                    
                                    if (rulesItem.MetricTrigger != null)
                                    {
                                        JObject metricTriggerValue = new JObject();
                                        scaleRuleValue["MetricTrigger"] = metricTriggerValue;
                                        
                                        if (rulesItem.MetricTrigger.Name != null)
                                        {
                                            JToken nameValue2 = rulesItem.MetricTrigger.Name;
                                            metricTriggerValue["Name"] = nameValue2;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.Namespace != null)
                                        {
                                            JToken namespaceValue = rulesItem.MetricTrigger.Namespace;
                                            metricTriggerValue["Namespace"] = namespaceValue;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.Resource != null)
                                        {
                                            JToken resourceValue = rulesItem.MetricTrigger.Resource;
                                            metricTriggerValue["Resource"] = resourceValue;
                                        }
                                        
                                        if (rulesItem.MetricTrigger.TimeGrain != null)
                                        {
                                            JToken timeGrainValue = rulesItem.MetricTrigger.TimeGrain;
                                            metricTriggerValue["TimeGrain"] = timeGrainValue;
                                        }
                                        
                                        JToken statisticValue = rulesItem.MetricTrigger.Statistic.ToString();
                                        metricTriggerValue["Statistic"] = statisticValue;
                                        
                                        if (rulesItem.MetricTrigger.TimeWindow != null)
                                        {
                                            JToken timeWindowValue = rulesItem.MetricTrigger.TimeWindow;
                                            metricTriggerValue["TimeWindow"] = timeWindowValue;
                                        }
                                        
                                        JToken timeAggregationValue = rulesItem.MetricTrigger.TimeAggregation.ToString();
                                        metricTriggerValue["TimeAggregation"] = timeAggregationValue;
                                        
                                        JToken operatorValue = rulesItem.MetricTrigger.Operator.ToString();
                                        metricTriggerValue["Operator"] = operatorValue;
                                        
                                        JToken thresholdValue = rulesItem.MetricTrigger.Threshold;
                                        metricTriggerValue["Threshold"] = thresholdValue;
                                    }
                                    
                                    if (rulesItem.ScaleAction != null)
                                    {
                                        JObject scaleActionValue = new JObject();
                                        scaleRuleValue["ScaleAction"] = scaleActionValue;
                                        
                                        JToken directionValue = rulesItem.ScaleAction.Direction.ToString();
                                        scaleActionValue["Direction"] = directionValue;
                                        
                                        JToken typeValue = rulesItem.ScaleAction.Type.ToString();
                                        scaleActionValue["Type"] = typeValue;
                                        
                                        if (rulesItem.ScaleAction.Value != null)
                                        {
                                            JToken valueValue = rulesItem.ScaleAction.Value;
                                            scaleActionValue["Value"] = valueValue;
                                        }
                                        
                                        if (rulesItem.ScaleAction.Cooldown != null)
                                        {
                                            JToken cooldownValue = rulesItem.ScaleAction.Cooldown;
                                            scaleActionValue["Cooldown"] = cooldownValue;
                                        }
                                    }
                                }
                                autoscaleProfileValue["Rules"] = rulesArray;
                            }
                            
                            if (profilesItem.FixedDate != null)
                            {
                                JObject fixedDateValue = new JObject();
                                autoscaleProfileValue["FixedDate"] = fixedDateValue;
                                
                                if (profilesItem.FixedDate.TimeZone != null)
                                {
                                    JToken timeZoneValue = profilesItem.FixedDate.TimeZone;
                                    fixedDateValue["TimeZone"] = timeZoneValue;
                                }
                                
                                JToken startValue = profilesItem.FixedDate.Start;
                                fixedDateValue["Start"] = startValue;
                                
                                JToken endValue = profilesItem.FixedDate.End;
                                fixedDateValue["End"] = endValue;
                            }
                            
                            if (profilesItem.Recurrence != null)
                            {
                                JObject recurrenceValue = new JObject();
                                autoscaleProfileValue["Recurrence"] = recurrenceValue;
                                
                                JToken frequencyValue = profilesItem.Recurrence.Frequency.ToString();
                                recurrenceValue["Frequency"] = frequencyValue;
                                
                                if (profilesItem.Recurrence.Schedule != null)
                                {
                                    JObject scheduleValue = new JObject();
                                    recurrenceValue["Schedule"] = scheduleValue;
                                    
                                    if (profilesItem.Recurrence.Schedule.TimeZone != null)
                                    {
                                        JToken timeZoneValue2 = profilesItem.Recurrence.Schedule.TimeZone;
                                        scheduleValue["TimeZone"] = timeZoneValue2;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Days != null)
                                    {
                                        JArray daysArray = new JArray();
                                        foreach (string daysItem in profilesItem.Recurrence.Schedule.Days)
                                        {
                                            daysArray.Add(daysItem);
                                        }
                                        scheduleValue["Days"] = daysArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Hours != null)
                                    {
                                        JArray hoursArray = new JArray();
                                        foreach (int hoursItem in profilesItem.Recurrence.Schedule.Hours)
                                        {
                                            hoursArray.Add(hoursItem);
                                        }
                                        scheduleValue["Hours"] = hoursArray;
                                    }
                                    
                                    if (profilesItem.Recurrence.Schedule.Minutes != null)
                                    {
                                        JArray minutesArray = new JArray();
                                        foreach (int minutesItem in profilesItem.Recurrence.Schedule.Minutes)
                                        {
                                            minutesArray.Add(minutesItem);
                                        }
                                        scheduleValue["Minutes"] = minutesArray;
                                    }
                                }
                            }
                        }
                        settingValue["Profiles"] = profilesArray;
                    }
                    
                    if (parameters.Setting.SubscriptionId != null)
                    {
                        JToken subscriptionIdValue = parameters.Setting.SubscriptionId;
                        settingValue["SubscriptionId"] = subscriptionIdValue;
                    }
                    
                    if (parameters.Setting.Source != null)
                    {
                        JToken sourceValue = parameters.Setting.Source;
                        settingValue["Source"] = sourceValue;
                    }
                    
                    JToken enabledValue = parameters.Setting.Enabled;
                    settingValue["Enabled"] = enabledValue;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceId", resourceId);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/autoscalesettings?resourceId=" + resourceId;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceId'>
        /// The resource ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AutoscaleSettingGetResponse> GetAsync(string resourceId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceId", resourceId);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/autoscalesettings?resourceId=" + resourceId;
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2013-03-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AutoscaleSettingGetResponse result = new AutoscaleSettingGetResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        AutoscaleSetting settingInstance = new AutoscaleSetting();
                        result.Setting = settingInstance;
                        
                        JArray profilesArray = (JArray)responseDoc["Profiles"];
                        if (profilesArray != null)
                        {
                            foreach (JToken profilesValue in profilesArray)
                            {
                                AutoscaleProfile autoscaleProfileInstance = new AutoscaleProfile();
                                settingInstance.Profiles.Add(autoscaleProfileInstance);
                                
                                JToken nameValue = profilesValue["Name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    autoscaleProfileInstance.Name = nameInstance;
                                }
                                
                                JToken capacityValue = profilesValue["Capacity"];
                                if (capacityValue != null)
                                {
                                    ScaleCapacity capacityInstance = new ScaleCapacity();
                                    autoscaleProfileInstance.Capacity = capacityInstance;
                                    
                                    JToken minimumValue = capacityValue["Minimum"];
                                    if (minimumValue != null)
                                    {
                                        string minimumInstance = (string)minimumValue;
                                        capacityInstance.Minimum = minimumInstance;
                                    }
                                    
                                    JToken maximumValue = capacityValue["Maximum"];
                                    if (maximumValue != null)
                                    {
                                        string maximumInstance = (string)maximumValue;
                                        capacityInstance.Maximum = maximumInstance;
                                    }
                                    
                                    JToken defaultValue = capacityValue["Default"];
                                    if (defaultValue != null)
                                    {
                                        string defaultInstance = (string)defaultValue;
                                        capacityInstance.Default = defaultInstance;
                                    }
                                }
                                
                                JArray rulesArray = (JArray)profilesValue["Rules"];
                                if (rulesArray != null)
                                {
                                    foreach (JToken rulesValue in rulesArray)
                                    {
                                        ScaleRule scaleRuleInstance = new ScaleRule();
                                        autoscaleProfileInstance.Rules.Add(scaleRuleInstance);
                                        
                                        JToken metricTriggerValue = rulesValue["MetricTrigger"];
                                        if (metricTriggerValue != null)
                                        {
                                            MetricTrigger metricTriggerInstance = new MetricTrigger();
                                            scaleRuleInstance.MetricTrigger = metricTriggerInstance;
                                            
                                            JToken nameValue2 = metricTriggerValue["Name"];
                                            if (nameValue2 != null)
                                            {
                                                string nameInstance2 = (string)nameValue2;
                                                metricTriggerInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken namespaceValue = metricTriggerValue["Namespace"];
                                            if (namespaceValue != null)
                                            {
                                                string namespaceInstance = (string)namespaceValue;
                                                metricTriggerInstance.Namespace = namespaceInstance;
                                            }
                                            
                                            JToken resourceValue = metricTriggerValue["Resource"];
                                            if (resourceValue != null)
                                            {
                                                string resourceInstance = (string)resourceValue;
                                                metricTriggerInstance.Resource = resourceInstance;
                                            }
                                            
                                            JToken timeGrainValue = metricTriggerValue["TimeGrain"];
                                            if (timeGrainValue != null)
                                            {
                                                string timeGrainInstance = (string)timeGrainValue;
                                                metricTriggerInstance.TimeGrain = timeGrainInstance;
                                            }
                                            
                                            JToken statisticValue = metricTriggerValue["Statistic"];
                                            if (statisticValue != null)
                                            {
                                                MetricStatisticType statisticInstance = (MetricStatisticType)Enum.Parse(typeof(MetricStatisticType), (string)statisticValue, false);
                                                metricTriggerInstance.Statistic = statisticInstance;
                                            }
                                            
                                            JToken timeWindowValue = metricTriggerValue["TimeWindow"];
                                            if (timeWindowValue != null)
                                            {
                                                string timeWindowInstance = (string)timeWindowValue;
                                                metricTriggerInstance.TimeWindow = timeWindowInstance;
                                            }
                                            
                                            JToken timeAggregationValue = metricTriggerValue["TimeAggregation"];
                                            if (timeAggregationValue != null)
                                            {
                                                TimeAggregationType timeAggregationInstance = (TimeAggregationType)Enum.Parse(typeof(TimeAggregationType), (string)timeAggregationValue, false);
                                                metricTriggerInstance.TimeAggregation = timeAggregationInstance;
                                            }
                                            
                                            JToken operatorValue = metricTriggerValue["Operator"];
                                            if (operatorValue != null)
                                            {
                                                ComparisonOperationType operatorInstance = (ComparisonOperationType)Enum.Parse(typeof(ComparisonOperationType), (string)operatorValue, false);
                                                metricTriggerInstance.Operator = operatorInstance;
                                            }
                                            
                                            JToken thresholdValue = metricTriggerValue["Threshold"];
                                            if (thresholdValue != null)
                                            {
                                                double thresholdInstance = (double)thresholdValue;
                                                metricTriggerInstance.Threshold = thresholdInstance;
                                            }
                                        }
                                        
                                        JToken scaleActionValue = rulesValue["ScaleAction"];
                                        if (scaleActionValue != null)
                                        {
                                            ScaleAction scaleActionInstance = new ScaleAction();
                                            scaleRuleInstance.ScaleAction = scaleActionInstance;
                                            
                                            JToken directionValue = scaleActionValue["Direction"];
                                            if (directionValue != null)
                                            {
                                                ScaleDirection directionInstance = (ScaleDirection)Enum.Parse(typeof(ScaleDirection), (string)directionValue, false);
                                                scaleActionInstance.Direction = directionInstance;
                                            }
                                            
                                            JToken typeValue = scaleActionValue["Type"];
                                            if (typeValue != null)
                                            {
                                                ScaleType typeInstance = (ScaleType)Enum.Parse(typeof(ScaleType), (string)typeValue, false);
                                                scaleActionInstance.Type = typeInstance;
                                            }
                                            
                                            JToken valueValue = scaleActionValue["Value"];
                                            if (valueValue != null)
                                            {
                                                string valueInstance = (string)valueValue;
                                                scaleActionInstance.Value = valueInstance;
                                            }
                                            
                                            JToken cooldownValue = scaleActionValue["Cooldown"];
                                            if (cooldownValue != null)
                                            {
                                                string cooldownInstance = (string)cooldownValue;
                                                scaleActionInstance.Cooldown = cooldownInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken fixedDateValue = profilesValue["FixedDate"];
                                if (fixedDateValue != null)
                                {
                                    TimeWindow fixedDateInstance = new TimeWindow();
                                    autoscaleProfileInstance.FixedDate = fixedDateInstance;
                                    
                                    JToken timeZoneValue = fixedDateValue["TimeZone"];
                                    if (timeZoneValue != null)
                                    {
                                        string timeZoneInstance = (string)timeZoneValue;
                                        fixedDateInstance.TimeZone = timeZoneInstance;
                                    }
                                    
                                    JToken startValue = fixedDateValue["Start"];
                                    if (startValue != null)
                                    {
                                        DateTime startInstance = (DateTime)startValue;
                                        fixedDateInstance.Start = startInstance;
                                    }
                                    
                                    JToken endValue = fixedDateValue["End"];
                                    if (endValue != null)
                                    {
                                        DateTime endInstance = (DateTime)endValue;
                                        fixedDateInstance.End = endInstance;
                                    }
                                }
                                
                                JToken recurrenceValue = profilesValue["Recurrence"];
                                if (recurrenceValue != null)
                                {
                                    Recurrence recurrenceInstance = new Recurrence();
                                    autoscaleProfileInstance.Recurrence = recurrenceInstance;
                                    
                                    JToken frequencyValue = recurrenceValue["Frequency"];
                                    if (frequencyValue != null)
                                    {
                                        RecurrenceFrequency frequencyInstance = (RecurrenceFrequency)Enum.Parse(typeof(RecurrenceFrequency), (string)frequencyValue, false);
                                        recurrenceInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken scheduleValue = recurrenceValue["Schedule"];
                                    if (scheduleValue != null)
                                    {
                                        RecurrentSchedule scheduleInstance = new RecurrentSchedule();
                                        recurrenceInstance.Schedule = scheduleInstance;
                                        
                                        JToken timeZoneValue2 = scheduleValue["TimeZone"];
                                        if (timeZoneValue2 != null)
                                        {
                                            string timeZoneInstance2 = (string)timeZoneValue2;
                                            scheduleInstance.TimeZone = timeZoneInstance2;
                                        }
                                        
                                        JArray daysArray = (JArray)scheduleValue["Days"];
                                        if (daysArray != null)
                                        {
                                            foreach (JToken daysValue in daysArray)
                                            {
                                                scheduleInstance.Days.Add((string)daysValue);
                                            }
                                        }
                                        
                                        JArray hoursArray = (JArray)scheduleValue["Hours"];
                                        if (hoursArray != null)
                                        {
                                            foreach (JToken hoursValue in hoursArray)
                                            {
                                                scheduleInstance.Hours.Add((int)hoursValue);
                                            }
                                        }
                                        
                                        JArray minutesArray = (JArray)scheduleValue["Minutes"];
                                        if (minutesArray != null)
                                        {
                                            foreach (JToken minutesValue in minutesArray)
                                            {
                                                scheduleInstance.Minutes.Add((int)minutesValue);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        JToken subscriptionIdValue = responseDoc["SubscriptionId"];
                        if (subscriptionIdValue != null)
                        {
                            string subscriptionIdInstance = (string)subscriptionIdValue;
                            settingInstance.SubscriptionId = subscriptionIdInstance;
                        }
                        
                        JToken sourceValue = responseDoc["Source"];
                        if (sourceValue != null)
                        {
                            string sourceInstance = (string)sourceValue;
                            settingInstance.Source = sourceInstance;
                        }
                        
                        JToken enabledValue = responseDoc["Enabled"];
                        if (enabledValue != null)
                        {
                            bool enabledInstance = (bool)enabledValue;
                            settingInstance.Enabled = enabledInstance;
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
