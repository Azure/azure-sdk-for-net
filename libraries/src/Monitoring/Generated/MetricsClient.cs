// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Microsoft.WindowsAzure.Management.Monitoring.Metrics;
using Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models
{
    /// <summary>
    /// An availability metric setting response.
    /// </summary>
    public partial class AvailabilityMetricSettingValue : MetricSettingValue
    {
        private IList<NameConfig> _availabilityMetrics;
        
        /// <summary>
        /// The metric settings availability metrics.
        /// </summary>
        public IList<NameConfig> AvailabilityMetrics
        {
            get { return this._availabilityMetrics; }
            set { this._availabilityMetrics = value; }
        }
        
        private IList<NameConfig> _availableLocations;
        
        /// <summary>
        /// The metric settings available locations.
        /// </summary>
        public IList<NameConfig> AvailableLocations
        {
            get { return this._availableLocations; }
            set { this._availableLocations = value; }
        }
        
        private IList<NameConfig> _defaultMetrics;
        
        /// <summary>
        /// The metric settings default metrics.
        /// </summary>
        public IList<NameConfig> DefaultMetrics
        {
            get { return this._defaultMetrics; }
            set { this._defaultMetrics = value; }
        }
        
        private IList<EndpointConfig> _endpoints;
        
        /// <summary>
        /// The metric settings endpoints.
        /// </summary>
        public IList<EndpointConfig> Endpoints
        {
            get { return this._endpoints; }
            set { this._endpoints = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the AvailabilityMetricSettingValue
        /// class.
        /// </summary>
        public AvailabilityMetricSettingValue()
        {
            this._availabilityMetrics = new List<NameConfig>();
            this._availableLocations = new List<NameConfig>();
            this._defaultMetrics = new List<NameConfig>();
            this._endpoints = new List<EndpointConfig>();
        }
    }
    
    /// <summary>
    /// An availability metric endpoint config.
    /// </summary>
    public partial class EndpointConfig
    {
        private string _configId;
        
        /// <summary>
        /// Availability Metric endpoint config config id.
        /// </summary>
        public string ConfigId
        {
            get { return this._configId; }
            set { this._configId = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Availability Metric endpoint config location.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Availability Metric endpoint config name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private int _testIntervalInSeconds;
        
        /// <summary>
        /// Availability Metric endpoint config test interval in seconds.
        /// </summary>
        public int TestIntervalInSeconds
        {
            get { return this._testIntervalInSeconds; }
            set { this._testIntervalInSeconds = value; }
        }
        
        private Uri _url;
        
        /// <summary>
        /// Availability Metric endpoint config Url.
        /// </summary>
        public Uri Url
        {
            get { return this._url; }
            set { this._url = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EndpointConfig class.
        /// </summary>
        public EndpointConfig()
        {
        }
    }
    
    /// <summary>
    /// A metric availability.
    /// </summary>
    public partial class MetricAvailability
    {
        private TimeSpan _retention;
        
        /// <summary>
        /// Metric definition is alertable.
        /// </summary>
        public TimeSpan Retention
        {
            get { return this._retention; }
            set { this._retention = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Metric availability time grain.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricAvailability class.
        /// </summary>
        public MetricAvailability()
        {
        }
    }
    
    /// <summary>
    /// A metric definition.
    /// </summary>
    public partial class MetricDefinition
    {
        private string _displayName;
        
        /// <summary>
        /// Metric definition display name.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private bool _isAlertable;
        
        /// <summary>
        /// Metric definition is alertable.
        /// </summary>
        public bool IsAlertable
        {
            get { return this._isAlertable; }
            set { this._isAlertable = value; }
        }
        
        private IList<MetricAvailability> _metricAvailabilities;
        
        /// <summary>
        /// Metric definition metric availabilities.
        /// </summary>
        public IList<MetricAvailability> MetricAvailabilities
        {
            get { return this._metricAvailabilities; }
            set { this._metricAvailabilities = value; }
        }
        
        private TimeSpan _minimumAlertableTimeWindow;
        
        /// <summary>
        /// Metric definition minimum alertable time window.
        /// </summary>
        public TimeSpan MinimumAlertableTimeWindow
        {
            get { return this._minimumAlertableTimeWindow; }
            set { this._minimumAlertableTimeWindow = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Metric definition name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _namespace;
        
        /// <summary>
        /// Metric definition namespace.
        /// </summary>
        public string Namespace
        {
            get { return this._namespace; }
            set { this._namespace = value; }
        }
        
        private string _primaryAggregation;
        
        /// <summary>
        /// Metric definition primary aggregation.
        /// </summary>
        public string PrimaryAggregation
        {
            get { return this._primaryAggregation; }
            set { this._primaryAggregation = value; }
        }
        
        private string _resourceIdSuffix;
        
        /// <summary>
        /// Metric definition resource id suffix.
        /// </summary>
        public string ResourceIdSuffix
        {
            get { return this._resourceIdSuffix; }
            set { this._resourceIdSuffix = value; }
        }
        
        private string _unit;
        
        /// <summary>
        /// Metric definition unit.
        /// </summary>
        public string Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinition class.
        /// </summary>
        public MetricDefinition()
        {
            this._metricAvailabilities = new List<MetricAvailability>();
        }
    }
    
    /// <summary>
    /// An availability metric name config.
    /// </summary>
    public partial class MetricDefinitionCollection
    {
        private IList<MetricDefinition> _value;
        
        /// <summary>
        /// The metric definitions.
        /// </summary>
        public IList<MetricDefinition> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinitionCollection class.
        /// </summary>
        public MetricDefinitionCollection()
        {
            this._value = new List<MetricDefinition>();
        }
    }
    
    /// <summary>
    /// The List Metric Definitions operation response.
    /// </summary>
    public partial class MetricDefinitionListResponse : OperationResponse
    {
        private MetricDefinitionCollection _metricDefinitionCollection;
        
        /// <summary>
        /// The retrieved metric definitions.
        /// </summary>
        public MetricDefinitionCollection MetricDefinitionCollection
        {
            get { return this._metricDefinitionCollection; }
            set { this._metricDefinitionCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricDefinitionListResponse
        /// class.
        /// </summary>
        public MetricDefinitionListResponse()
        {
        }
    }
    
    /// <summary>
    /// A metric setting get response.
    /// </summary>
    public partial class MetricSetting
    {
        private string _namespace;
        
        /// <summary>
        /// Required. The metric settings namespace.
        /// </summary>
        public string Namespace
        {
            get { return this._namespace; }
            set { this._namespace = value; }
        }
        
        private string _resourceId;
        
        /// <summary>
        /// Required. The resource id.
        /// </summary>
        public string ResourceId
        {
            get { return this._resourceId; }
            set { this._resourceId = value; }
        }
        
        private MetricSettingValue _value;
        
        /// <summary>
        /// Required. The metric settings value.
        /// </summary>
        public MetricSettingValue Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricSetting class.
        /// </summary>
        public MetricSetting()
        {
        }
    }
    
    /// <summary>
    /// A metric setting list response collection.
    /// </summary>
    public partial class MetricSettingCollection
    {
        private IList<MetricSetting> _value;
        
        /// <summary>
        /// The collection.
        /// </summary>
        public IList<MetricSetting> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricSettingCollection class.
        /// </summary>
        public MetricSettingCollection()
        {
            this._value = new List<MetricSetting>();
        }
    }
    
    /// <summary>
    /// The list metric settings operation response.
    /// </summary>
    public partial class MetricSettingListResponse : OperationResponse
    {
        private MetricSettingCollection _metricSettingCollection;
        
        /// <summary>
        /// The retrieved metric settings.
        /// </summary>
        public MetricSettingCollection MetricSettingCollection
        {
            get { return this._metricSettingCollection; }
            set { this._metricSettingCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricSettingListResponse class.
        /// </summary>
        public MetricSettingListResponse()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Put Metric Settings operation.
    /// </summary>
    public partial class MetricSettingsPutParameters
    {
        private MetricSetting _metricSetting;
        
        /// <summary>
        /// Required. The metric setting.
        /// </summary>
        public MetricSetting MetricSetting
        {
            get { return this._metricSetting; }
            set { this._metricSetting = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricSettingsPutParameters class.
        /// </summary>
        public MetricSettingsPutParameters()
        {
        }
    }
    
    /// <summary>
    /// A metric setting get response.
    /// </summary>
    public abstract partial class MetricSettingValue
    {
        /// <summary>
        /// Initializes a new instance of the MetricSettingValue class.
        /// </summary>
        public MetricSettingValue()
        {
        }
    }
    
    /// <summary>
    /// A metric value.
    /// </summary>
    public partial class MetricValue
    {
        private string _annotation;
        
        /// <summary>
        /// Metric annotation.
        /// </summary>
        public string Annotation
        {
            get { return this._annotation; }
            set { this._annotation = value; }
        }
        
        private double? _average;
        
        /// <summary>
        /// Metric average.
        /// </summary>
        public double? Average
        {
            get { return this._average; }
            set { this._average = value; }
        }
        
        private int? _count;
        
        /// <summary>
        /// Metric count.
        /// </summary>
        public int? Count
        {
            get { return this._count; }
            set { this._count = value; }
        }
        
        private double? _maximum;
        
        /// <summary>
        /// Metric maximum.
        /// </summary>
        public double? Maximum
        {
            get { return this._maximum; }
            set { this._maximum = value; }
        }
        
        private double? _minimum;
        
        /// <summary>
        /// Metric minimum.
        /// </summary>
        public double? Minimum
        {
            get { return this._minimum; }
            set { this._minimum = value; }
        }
        
        private DateTime _timestamp;
        
        /// <summary>
        /// Metric timestamp.
        /// </summary>
        public DateTime Timestamp
        {
            get { return this._timestamp; }
            set { this._timestamp = value; }
        }
        
        private double? _total;
        
        /// <summary>
        /// Metric total.
        /// </summary>
        public double? Total
        {
            get { return this._total; }
            set { this._total = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValue class.
        /// </summary>
        public MetricValue()
        {
        }
    }
    
    /// <summary>
    /// The List Metric values operation response.
    /// </summary>
    public partial class MetricValueListResponse : OperationResponse
    {
        private MetricValueSetCollection _metricValueSetCollection;
        
        /// <summary>
        /// The retrieved metric value sets.
        /// </summary>
        public MetricValueSetCollection MetricValueSetCollection
        {
            get { return this._metricValueSetCollection; }
            set { this._metricValueSetCollection = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValueListResponse class.
        /// </summary>
        public MetricValueListResponse()
        {
        }
    }
    
    /// <summary>
    /// A metric value set.
    /// </summary>
    public partial class MetricValueSet
    {
        private string _displayName;
        
        /// <summary>
        /// Metric display name.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private DateTime _endTime;
        
        /// <summary>
        /// Metric end time.
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private IList<MetricValue> _metricValues;
        
        /// <summary>
        /// Metric values.
        /// </summary>
        public IList<MetricValue> MetricValues
        {
            get { return this._metricValues; }
            set { this._metricValues = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Metric name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _namespace;
        
        /// <summary>
        /// Metric namespace.
        /// </summary>
        public string Namespace
        {
            get { return this._namespace; }
            set { this._namespace = value; }
        }
        
        private string _primaryAggregation;
        
        /// <summary>
        /// Metric primary aggregation.
        /// </summary>
        public string PrimaryAggregation
        {
            get { return this._primaryAggregation; }
            set { this._primaryAggregation = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Metric start time.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private TimeSpan _timeGrain;
        
        /// <summary>
        /// Metric time grain.
        /// </summary>
        public TimeSpan TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        private string _unit;
        
        /// <summary>
        /// Metric unit.
        /// </summary>
        public string Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValueSet class.
        /// </summary>
        public MetricValueSet()
        {
            this._metricValues = new List<MetricValue>();
        }
    }
    
    /// <summary>
    /// The collection of metric value sets.
    /// </summary>
    public partial class MetricValueSetCollection
    {
        private IList<MetricValueSet> _value;
        
        /// <summary>
        /// The collection.
        /// </summary>
        public IList<MetricValueSet> Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricValueSetCollection class.
        /// </summary>
        public MetricValueSetCollection()
        {
            this._value = new List<MetricValueSet>();
        }
    }
    
    /// <summary>
    /// An availability metric name config.
    /// </summary>
    public partial class NameConfig
    {
        private string _displayName;
        
        /// <summary>
        /// Availability metric name config display name.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Availability metric name config name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NameConfig class.
        /// </summary>
        public NameConfig()
        {
        }
    }
}

namespace Microsoft.WindowsAzure.Management.Monitoring.Metrics
{
    public partial interface IMetricsClient
    {
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Windows Azure subscription id
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        IMetricDefinitionOperations MetricDefinitions
        {
            get; 
        }
        
        IMetricSettingOperations MetricSettings
        {
            get; 
        }
        
        IMetricValueOperations MetricValues
        {
            get; 
        }
    }
    
    public static partial class MetricsClientExtensions
    {
    }
    
    public partial class MetricsClient : ServiceClient<MetricsClient>, IMetricsClient
    {
        private Uri _baseUri;
        
        /// <summary>
        /// Optional base uri parameter.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Windows Azure subscription id
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private IMetricDefinitionOperations _metricDefinitions;
        
        public virtual IMetricDefinitionOperations MetricDefinitions
        {
            get { return this._metricDefinitions; }
        }
        
        private IMetricSettingOperations _metricSettings;
        
        public virtual IMetricSettingOperations MetricSettings
        {
            get { return this._metricSettings; }
        }
        
        private IMetricValueOperations _metricValues;
        
        public virtual IMetricValueOperations MetricValues
        {
            get { return this._metricValues; }
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsClient class.
        /// </summary>
        private MetricsClient()
            : base()
        {
            this._metricDefinitions = new MetricDefinitionOperations(this);
            this._metricSettings = new MetricSettingOperations(this);
            this._metricValues = new MetricValueOperations(this);
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Windows Azure subscription id
        /// </param>
        /// <param name='baseUri'>
        /// Optional base uri parameter.
        /// </param>
        public MetricsClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the MetricsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Windows Azure subscription id
        /// </param>
        public MetricsClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
    }
    
    public partial interface IMetricDefinitionOperations
    {
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNames'>
        /// The names of the metrics.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        Task<MetricDefinitionListResponse> ListAsync(string resourceId, IList<string> metricNames, string metricNamespace, CancellationToken cancellationToken);
    }
    
    public static partial class MetricDefinitionOperationsExtensions
    {
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricDefinitionOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNames'>
        /// The names of the metrics.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        public static MetricDefinitionListResponse List(this IMetricDefinitionOperations operations, string resourceId, IList<string> metricNames, string metricNamespace)
        {
            try
            {
                return operations.ListAsync(resourceId, metricNames, metricNamespace).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricDefinitionOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNames'>
        /// The names of the metrics.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        public static Task<MetricDefinitionListResponse> ListAsync(this IMetricDefinitionOperations operations, string resourceId, IList<string> metricNames, string metricNamespace)
        {
            return operations.ListAsync(resourceId, metricNames, metricNamespace, CancellationToken.None);
        }
    }
    
    internal partial class MetricDefinitionOperations : IServiceOperations<MetricsClient>, IMetricDefinitionOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricDefinitionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricDefinitionOperations(MetricsClient client)
        {
            this._client = client;
        }
        
        private MetricsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.MetricsClient.
        /// </summary>
        public MetricsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The List Metric Definitions operation lists the metric definitions
        /// for the resource.
        /// </summary>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNames'>
        /// The names of the metrics.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric Definitions operation response.
        /// </returns>
        public async Task<MetricDefinitionListResponse> ListAsync(string resourceId, IList<string> metricNames, string metricNamespace, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceId", resourceId);
                tracingParameters.Add("metricNames", metricNames);
                tracingParameters.Add("metricNamespace", metricNamespace);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/metricdefinitions/query?";
            url = url + "&resourceId=" + Uri.EscapeUriString(resourceId);
            if (metricNamespace != null)
            {
                url = url + "&namespace=" + Uri.EscapeUriString(metricNamespace);
            }
            if (metricNames != null && metricNames.Count > 0)
            {
                url = url + "&names=" + Uri.EscapeUriString(string.Join(",", metricNames));
            }
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricDefinitionListResponse result = new MetricDefinitionListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        MetricDefinitionCollection metricDefinitionCollectionInstance = new MetricDefinitionCollection();
                        result.MetricDefinitionCollection = metricDefinitionCollectionInstance;
                        
                        JArray valueArray = (JArray)responseDoc["Value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                MetricDefinition metricDefinitionInstance = new MetricDefinition();
                                metricDefinitionCollectionInstance.Value.Add(metricDefinitionInstance);
                                
                                JToken nameValue = valueValue["Name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    metricDefinitionInstance.Name = nameInstance;
                                }
                                
                                JToken namespaceValue = valueValue["Namespace"];
                                if (namespaceValue != null)
                                {
                                    string namespaceInstance = (string)namespaceValue;
                                    metricDefinitionInstance.Namespace = namespaceInstance;
                                }
                                
                                JToken resourceIdSuffixValue = valueValue["ResourceIdSuffix"];
                                if (resourceIdSuffixValue != null)
                                {
                                    string resourceIdSuffixInstance = (string)resourceIdSuffixValue;
                                    metricDefinitionInstance.ResourceIdSuffix = resourceIdSuffixInstance;
                                }
                                
                                JToken displayNameValue = valueValue["DisplayName"];
                                if (displayNameValue != null)
                                {
                                    string displayNameInstance = (string)displayNameValue;
                                    metricDefinitionInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken unitValue = valueValue["Unit"];
                                if (unitValue != null)
                                {
                                    string unitInstance = (string)unitValue;
                                    metricDefinitionInstance.Unit = unitInstance;
                                }
                                
                                JToken primaryAggregationValue = valueValue["PrimaryAggregation"];
                                if (primaryAggregationValue != null)
                                {
                                    string primaryAggregationInstance = (string)primaryAggregationValue;
                                    metricDefinitionInstance.PrimaryAggregation = primaryAggregationInstance;
                                }
                                
                                JArray metricAvailabilitiesArray = (JArray)valueValue["MetricAvailabilities"];
                                if (metricAvailabilitiesArray != null)
                                {
                                    foreach (JToken metricAvailabilitiesValue in metricAvailabilitiesArray)
                                    {
                                        MetricAvailability metricAvailabilityInstance = new MetricAvailability();
                                        metricDefinitionInstance.MetricAvailabilities.Add(metricAvailabilityInstance);
                                        
                                        JToken timeGrainValue = metricAvailabilitiesValue["TimeGrain"];
                                        if (timeGrainValue != null)
                                        {
                                            TimeSpan timeGrainInstance = TimeSpan.Parse((string)timeGrainValue, CultureInfo.InvariantCulture);
                                            metricAvailabilityInstance.TimeGrain = timeGrainInstance;
                                        }
                                        
                                        JToken retentionValue = metricAvailabilitiesValue["Retention"];
                                        if (retentionValue != null)
                                        {
                                            TimeSpan retentionInstance = TimeSpan.Parse((string)retentionValue, CultureInfo.InvariantCulture);
                                            metricAvailabilityInstance.Retention = retentionInstance;
                                        }
                                    }
                                }
                                
                                JToken minimumAlertableTimeWindowValue = valueValue["MinimumAlertableTimeWindow"];
                                if (minimumAlertableTimeWindowValue != null)
                                {
                                    TimeSpan minimumAlertableTimeWindowInstance = TimeSpan.Parse((string)minimumAlertableTimeWindowValue, CultureInfo.InvariantCulture);
                                    metricDefinitionInstance.MinimumAlertableTimeWindow = minimumAlertableTimeWindowInstance;
                                }
                                
                                JToken isAlertableValue = valueValue["IsAlertable"];
                                if (isAlertableValue != null)
                                {
                                    bool isAlertableInstance = (bool)isAlertableValue;
                                    metricDefinitionInstance.IsAlertable = isAlertableInstance;
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public partial interface IMetricSettingOperations
    {
        /// <summary>
        /// The Put Metric Settings operation creates or updates the metric
        /// settings for the resource.
        /// </summary>
        /// <param name='parameters'>
        /// Metric settings to be created or updated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateOrUpdateAsync(MetricSettingsPutParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The List Metric Settings operation lists the metric settings for
        /// the resource.
        /// </summary>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list metric settings operation response.
        /// </returns>
        Task<MetricSettingListResponse> ListAsync(string resourceId, string metricNamespace, CancellationToken cancellationToken);
    }
    
    public static partial class MetricSettingOperationsExtensions
    {
        /// <summary>
        /// The Put Metric Settings operation creates or updates the metric
        /// settings for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricSettingOperations.
        /// </param>
        /// <param name='parameters'>
        /// Metric settings to be created or updated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateOrUpdate(this IMetricSettingOperations operations, MetricSettingsPutParameters parameters)
        {
            try
            {
                return operations.CreateOrUpdateAsync(parameters).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The Put Metric Settings operation creates or updates the metric
        /// settings for the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricSettingOperations.
        /// </param>
        /// <param name='parameters'>
        /// Metric settings to be created or updated.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateOrUpdateAsync(this IMetricSettingOperations operations, MetricSettingsPutParameters parameters)
        {
            return operations.CreateOrUpdateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The List Metric Settings operation lists the metric settings for
        /// the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricSettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <returns>
        /// The list metric settings operation response.
        /// </returns>
        public static MetricSettingListResponse List(this IMetricSettingOperations operations, string resourceId, string metricNamespace)
        {
            try
            {
                return operations.ListAsync(resourceId, metricNamespace).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The List Metric Settings operation lists the metric settings for
        /// the resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricSettingOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <returns>
        /// The list metric settings operation response.
        /// </returns>
        public static Task<MetricSettingListResponse> ListAsync(this IMetricSettingOperations operations, string resourceId, string metricNamespace)
        {
            return operations.ListAsync(resourceId, metricNamespace, CancellationToken.None);
        }
    }
    
    internal partial class MetricSettingOperations : IServiceOperations<MetricsClient>, IMetricSettingOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricSettingOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricSettingOperations(MetricsClient client)
        {
            this._client = client;
        }
        
        private MetricsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.MetricsClient.
        /// </summary>
        public MetricsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put Metric Settings operation creates or updates the metric
        /// settings for the resource.
        /// </summary>
        /// <param name='parameters'>
        /// Metric settings to be created or updated.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateOrUpdateAsync(MetricSettingsPutParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.MetricSetting == null)
            {
                throw new ArgumentNullException("parameters.MetricSetting");
            }
            if (parameters.MetricSetting.ResourceId == null)
            {
                throw new ArgumentNullException("parameters.MetricSetting.ResourceId");
            }
            if (parameters.MetricSetting.Value == null)
            {
                throw new ArgumentNullException("parameters.MetricSetting.Value");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/metricsettings";
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject metricSettingValue = new JObject();
                requestDoc = metricSettingValue;
                
                JToken resourceIdValue = parameters.MetricSetting.ResourceId;
                metricSettingValue["ResourceId"] = resourceIdValue;
                
                if (parameters.MetricSetting.Namespace != null)
                {
                    JToken namespaceValue = parameters.MetricSetting.Namespace;
                    metricSettingValue["Namespace"] = namespaceValue;
                }
                
                JObject valueValue = new JObject();
                metricSettingValue["Value"] = valueValue;
                valueValue["odata.type"] = parameters.MetricSetting.Value.GetType().FullName;
                if (parameters.MetricSetting.Value is AvailabilityMetricSettingValue)
                {
                    AvailabilityMetricSettingValue derived = (AvailabilityMetricSettingValue)parameters.MetricSetting.Value;
                    
                    if (derived.AvailableLocations != null)
                    {
                        JArray availableLocationsArray = new JArray();
                        foreach (NameConfig availableLocationsItem in derived.AvailableLocations)
                        {
                            JObject nameConfigValue = new JObject();
                            availableLocationsArray.Add(nameConfigValue);
                            
                            if (availableLocationsItem.Name != null)
                            {
                                JToken nameValue = availableLocationsItem.Name;
                                nameConfigValue["Name"] = nameValue;
                            }
                            
                            if (availableLocationsItem.DisplayName != null)
                            {
                                JToken displayNameValue = availableLocationsItem.DisplayName;
                                nameConfigValue["DisplayName"] = displayNameValue;
                            }
                        }
                        valueValue["AvailableLocations"] = availableLocationsArray;
                    }
                    
                    if (derived.DefaultMetrics != null)
                    {
                        JArray defaultMetricsArray = new JArray();
                        foreach (NameConfig defaultMetricsItem in derived.DefaultMetrics)
                        {
                            JObject nameConfigValue2 = new JObject();
                            defaultMetricsArray.Add(nameConfigValue2);
                            
                            if (defaultMetricsItem.Name != null)
                            {
                                JToken nameValue2 = defaultMetricsItem.Name;
                                nameConfigValue2["Name"] = nameValue2;
                            }
                            
                            if (defaultMetricsItem.DisplayName != null)
                            {
                                JToken displayNameValue2 = defaultMetricsItem.DisplayName;
                                nameConfigValue2["DisplayName"] = displayNameValue2;
                            }
                        }
                        valueValue["DefaultMetrics"] = defaultMetricsArray;
                    }
                    
                    if (derived.AvailabilityMetrics != null)
                    {
                        JArray availabilityMetricsArray = new JArray();
                        foreach (NameConfig availabilityMetricsItem in derived.AvailabilityMetrics)
                        {
                            JObject nameConfigValue3 = new JObject();
                            availabilityMetricsArray.Add(nameConfigValue3);
                            
                            if (availabilityMetricsItem.Name != null)
                            {
                                JToken nameValue3 = availabilityMetricsItem.Name;
                                nameConfigValue3["Name"] = nameValue3;
                            }
                            
                            if (availabilityMetricsItem.DisplayName != null)
                            {
                                JToken displayNameValue3 = availabilityMetricsItem.DisplayName;
                                nameConfigValue3["DisplayName"] = displayNameValue3;
                            }
                        }
                        valueValue["AvailabilityMetrics"] = availabilityMetricsArray;
                    }
                    
                    if (derived.Endpoints != null)
                    {
                        JArray endpointsArray = new JArray();
                        foreach (EndpointConfig endpointsItem in derived.Endpoints)
                        {
                            JObject endpointConfigValue = new JObject();
                            endpointsArray.Add(endpointConfigValue);
                            
                            if (endpointsItem.ConfigId != null)
                            {
                                JToken configIdValue = endpointsItem.ConfigId;
                                endpointConfigValue["ConfigId"] = configIdValue;
                            }
                            
                            if (endpointsItem.Name != null)
                            {
                                JToken nameValue4 = endpointsItem.Name;
                                endpointConfigValue["Name"] = nameValue4;
                            }
                            
                            if (endpointsItem.Location != null)
                            {
                                JToken locationValue = endpointsItem.Location;
                                endpointConfigValue["Location"] = locationValue;
                            }
                            
                            if (endpointsItem.Url != null)
                            {
                                JToken urlValue = endpointsItem.Url.ToString();
                                endpointConfigValue["Url"] = urlValue;
                            }
                            
                            JToken testIntervalInSecondsValue = endpointsItem.TestIntervalInSeconds;
                            endpointConfigValue["TestIntervalInSeconds"] = testIntervalInSecondsValue;
                        }
                        valueValue["Endpoints"] = endpointsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromXml(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List Metric Settings operation lists the metric settings for
        /// the resource.
        /// </summary>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list metric settings operation response.
        /// </returns>
        public async Task<MetricSettingListResponse> ListAsync(string resourceId, string metricNamespace, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            if (metricNamespace == null)
            {
                throw new ArgumentNullException("metricNamespace");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceId", resourceId);
                tracingParameters.Add("metricNamespace", metricNamespace);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/metricsettings?";
            url = url + "&resourceId=" + Uri.EscapeUriString(resourceId);
            url = url + "&namespace=" + Uri.EscapeUriString(metricNamespace);
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricSettingListResponse result = new MetricSettingListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        MetricSettingCollection metricSettingCollectionInstance = new MetricSettingCollection();
                        result.MetricSettingCollection = metricSettingCollectionInstance;
                        
                        JArray valueArray = (JArray)responseDoc["Value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                MetricSetting metricSettingInstance = new MetricSetting();
                                metricSettingCollectionInstance.Value.Add(metricSettingInstance);
                                
                                JToken resourceIdValue = valueValue["ResourceId"];
                                if (resourceIdValue != null)
                                {
                                    string resourceIdInstance = (string)resourceIdValue;
                                    metricSettingInstance.ResourceId = resourceIdInstance;
                                }
                                
                                JToken namespaceValue = valueValue["Namespace"];
                                if (namespaceValue != null)
                                {
                                    string namespaceInstance = (string)namespaceValue;
                                    metricSettingInstance.Namespace = namespaceInstance;
                                }
                                
                                JToken valueValue2 = valueValue["Value"];
                                if (valueValue2 != null)
                                {
                                    string typeName = (string)valueValue2["odata.type"];
                                    if (typeName == "Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models.AvailabilityMetricSettingValue")
                                    {
                                        AvailabilityMetricSettingValue availabilityMetricSettingValueInstance = new AvailabilityMetricSettingValue();
                                        
                                        JArray availableLocationsArray = (JArray)valueValue2["AvailableLocations"];
                                        if (availableLocationsArray != null)
                                        {
                                            foreach (JToken availableLocationsValue in availableLocationsArray)
                                            {
                                                NameConfig nameConfigInstance = new NameConfig();
                                                availabilityMetricSettingValueInstance.AvailableLocations.Add(nameConfigInstance);
                                                
                                                JToken nameValue = availableLocationsValue["Name"];
                                                if (nameValue != null)
                                                {
                                                    string nameInstance = (string)nameValue;
                                                    nameConfigInstance.Name = nameInstance;
                                                }
                                                
                                                JToken displayNameValue = availableLocationsValue["DisplayName"];
                                                if (displayNameValue != null)
                                                {
                                                    string displayNameInstance = (string)displayNameValue;
                                                    nameConfigInstance.DisplayName = displayNameInstance;
                                                }
                                            }
                                        }
                                        
                                        JArray defaultMetricsArray = (JArray)valueValue2["DefaultMetrics"];
                                        if (defaultMetricsArray != null)
                                        {
                                            foreach (JToken defaultMetricsValue in defaultMetricsArray)
                                            {
                                                NameConfig nameConfigInstance2 = new NameConfig();
                                                availabilityMetricSettingValueInstance.DefaultMetrics.Add(nameConfigInstance2);
                                                
                                                JToken nameValue2 = defaultMetricsValue["Name"];
                                                if (nameValue2 != null)
                                                {
                                                    string nameInstance2 = (string)nameValue2;
                                                    nameConfigInstance2.Name = nameInstance2;
                                                }
                                                
                                                JToken displayNameValue2 = defaultMetricsValue["DisplayName"];
                                                if (displayNameValue2 != null)
                                                {
                                                    string displayNameInstance2 = (string)displayNameValue2;
                                                    nameConfigInstance2.DisplayName = displayNameInstance2;
                                                }
                                            }
                                        }
                                        
                                        JArray availabilityMetricsArray = (JArray)valueValue2["AvailabilityMetrics"];
                                        if (availabilityMetricsArray != null)
                                        {
                                            foreach (JToken availabilityMetricsValue in availabilityMetricsArray)
                                            {
                                                NameConfig nameConfigInstance3 = new NameConfig();
                                                availabilityMetricSettingValueInstance.AvailabilityMetrics.Add(nameConfigInstance3);
                                                
                                                JToken nameValue3 = availabilityMetricsValue["Name"];
                                                if (nameValue3 != null)
                                                {
                                                    string nameInstance3 = (string)nameValue3;
                                                    nameConfigInstance3.Name = nameInstance3;
                                                }
                                                
                                                JToken displayNameValue3 = availabilityMetricsValue["DisplayName"];
                                                if (displayNameValue3 != null)
                                                {
                                                    string displayNameInstance3 = (string)displayNameValue3;
                                                    nameConfigInstance3.DisplayName = displayNameInstance3;
                                                }
                                            }
                                        }
                                        
                                        JArray endpointsArray = (JArray)valueValue2["Endpoints"];
                                        if (endpointsArray != null)
                                        {
                                            foreach (JToken endpointsValue in endpointsArray)
                                            {
                                                EndpointConfig endpointConfigInstance = new EndpointConfig();
                                                availabilityMetricSettingValueInstance.Endpoints.Add(endpointConfigInstance);
                                                
                                                JToken configIdValue = endpointsValue["ConfigId"];
                                                if (configIdValue != null)
                                                {
                                                    string configIdInstance = (string)configIdValue;
                                                    endpointConfigInstance.ConfigId = configIdInstance;
                                                }
                                                
                                                JToken nameValue4 = endpointsValue["Name"];
                                                if (nameValue4 != null)
                                                {
                                                    string nameInstance4 = (string)nameValue4;
                                                    endpointConfigInstance.Name = nameInstance4;
                                                }
                                                
                                                JToken locationValue = endpointsValue["Location"];
                                                if (locationValue != null)
                                                {
                                                    string locationInstance = (string)locationValue;
                                                    endpointConfigInstance.Location = locationInstance;
                                                }
                                                
                                                JToken urlValue = endpointsValue["Url"];
                                                if (urlValue != null)
                                                {
                                                    Uri urlInstance = TypeConversion.TryParseUri((string)urlValue);
                                                    endpointConfigInstance.Url = urlInstance;
                                                }
                                                
                                                JToken testIntervalInSecondsValue = endpointsValue["TestIntervalInSeconds"];
                                                if (testIntervalInSecondsValue != null)
                                                {
                                                    int testIntervalInSecondsInstance = (int)testIntervalInSecondsValue;
                                                    endpointConfigInstance.TestIntervalInSeconds = testIntervalInSecondsInstance;
                                                }
                                            }
                                        }
                                        metricSettingInstance.Value = availabilityMetricSettingValueInstance;
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    public partial interface IMetricValueOperations
    {
        /// <summary>
        /// The List Metric Value operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNames'>
        /// The names of the metrics.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='timeGrain'>
        /// The time grain of the metrics.
        /// </param>
        /// <param name='startTime'>
        /// The start time (in UTC) of the metrics.
        /// </param>
        /// <param name='endTime'>
        /// The end time (in UTC) of the metrics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        Task<MetricValueListResponse> ListAsync(string resourceId, IList<string> metricNames, string metricNamespace, TimeSpan timeGrain, DateTime startTime, DateTime endTime, CancellationToken cancellationToken);
    }
    
    public static partial class MetricValueOperationsExtensions
    {
        /// <summary>
        /// The List Metric Value operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricValueOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNames'>
        /// The names of the metrics.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='timeGrain'>
        /// The time grain of the metrics.
        /// </param>
        /// <param name='startTime'>
        /// The start time (in UTC) of the metrics.
        /// </param>
        /// <param name='endTime'>
        /// The end time (in UTC) of the metrics.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public static MetricValueListResponse List(this IMetricValueOperations operations, string resourceId, IList<string> metricNames, string metricNamespace, TimeSpan timeGrain, DateTime startTime, DateTime endTime)
        {
            try
            {
                return operations.ListAsync(resourceId, metricNames, metricNamespace, timeGrain, startTime, endTime).Result;
            }
            catch (AggregateException ex)
            {
                if (ex.InnerExceptions.Count > 1)
                {
                    throw;
                }
                else
                {
                    throw ex.InnerException;
                }
            }
        }
        
        /// <summary>
        /// The List Metric Value operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.IMetricValueOperations.
        /// </param>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNames'>
        /// The names of the metrics.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='timeGrain'>
        /// The time grain of the metrics.
        /// </param>
        /// <param name='startTime'>
        /// The start time (in UTC) of the metrics.
        /// </param>
        /// <param name='endTime'>
        /// The end time (in UTC) of the metrics.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public static Task<MetricValueListResponse> ListAsync(this IMetricValueOperations operations, string resourceId, IList<string> metricNames, string metricNamespace, TimeSpan timeGrain, DateTime startTime, DateTime endTime)
        {
            return operations.ListAsync(resourceId, metricNames, metricNamespace, timeGrain, startTime, endTime, CancellationToken.None);
        }
    }
    
    internal partial class MetricValueOperations : IServiceOperations<MetricsClient>, IMetricValueOperations
    {
        /// <summary>
        /// Initializes a new instance of the MetricValueOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal MetricValueOperations(MetricsClient client)
        {
            this._client = client;
        }
        
        private MetricsClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.WindowsAzure.Management.Monitoring.Metrics.MetricsClient.
        /// </summary>
        public MetricsClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The List Metric Value operation lists the metric value sets for the
        /// resource metrics.
        /// </summary>
        /// <param name='resourceId'>
        /// The id of the resource.
        /// </param>
        /// <param name='metricNames'>
        /// The names of the metrics.
        /// </param>
        /// <param name='metricNamespace'>
        /// The namespace of the metrics.
        /// </param>
        /// <param name='timeGrain'>
        /// The time grain of the metrics.
        /// </param>
        /// <param name='startTime'>
        /// The start time (in UTC) of the metrics.
        /// </param>
        /// <param name='endTime'>
        /// The end time (in UTC) of the metrics.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Metric values operation response.
        /// </returns>
        public async Task<MetricValueListResponse> ListAsync(string resourceId, IList<string> metricNames, string metricNamespace, TimeSpan timeGrain, DateTime startTime, DateTime endTime, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }
            if (metricNames == null)
            {
                throw new ArgumentNullException("metricNames");
            }
            if (metricNames.Count <= 0)
            {
                throw new ArgumentException("metricNames cannot be empty.");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceId", resourceId);
                tracingParameters.Add("metricNames", metricNames);
                tracingParameters.Add("metricNamespace", metricNamespace);
                tracingParameters.Add("timeGrain", timeGrain);
                tracingParameters.Add("startTime", startTime);
                tracingParameters.Add("endTime", endTime);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = this.Client.BaseUri + "/" + this.Client.Credentials.SubscriptionId + "/services/monitoring/metricvalues/query?";
            url = url + "&resourceId=" + Uri.EscapeUriString(resourceId);
            if (metricNamespace != null)
            {
                url = url + "&namespace=" + Uri.EscapeUriString(metricNamespace);
            }
            url = url + "&names=" + Uri.EscapeUriString(string.Join(",", metricNames));
            url = url + "&timeGrain=" + Uri.EscapeUriString(TypeConversion.To8601String(timeGrain));
            url = url + "&startTime=" + Uri.EscapeUriString(string.Format(CultureInfo.InvariantCulture, "{0:O}", startTime.ToUniversalTime()));
            url = url + "&endTime=" + Uri.EscapeUriString(string.Format(CultureInfo.InvariantCulture, "{0:O}", endTime.ToUniversalTime()));
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2012-08-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.CreateFromJson(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    MetricValueListResponse result = new MetricValueListResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    JToken responseDoc = JToken.Parse(responseContent);
                    
                    if (responseDoc != null)
                    {
                        MetricValueSetCollection metricValueSetCollectionInstance = new MetricValueSetCollection();
                        result.MetricValueSetCollection = metricValueSetCollectionInstance;
                        
                        JArray valueArray = (JArray)responseDoc["Value"];
                        if (valueArray != null)
                        {
                            foreach (JToken valueValue in valueArray)
                            {
                                MetricValueSet metricValueSetInstance = new MetricValueSet();
                                metricValueSetCollectionInstance.Value.Add(metricValueSetInstance);
                                
                                JToken nameValue = valueValue["Name"];
                                if (nameValue != null)
                                {
                                    string nameInstance = (string)nameValue;
                                    metricValueSetInstance.Name = nameInstance;
                                }
                                
                                JToken namespaceValue = valueValue["Namespace"];
                                if (namespaceValue != null)
                                {
                                    string namespaceInstance = (string)namespaceValue;
                                    metricValueSetInstance.Namespace = namespaceInstance;
                                }
                                
                                JToken displayNameValue = valueValue["DisplayName"];
                                if (displayNameValue != null)
                                {
                                    string displayNameInstance = (string)displayNameValue;
                                    metricValueSetInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken unitValue = valueValue["Unit"];
                                if (unitValue != null)
                                {
                                    string unitInstance = (string)unitValue;
                                    metricValueSetInstance.Unit = unitInstance;
                                }
                                
                                JToken primaryAggregationValue = valueValue["PrimaryAggregation"];
                                if (primaryAggregationValue != null)
                                {
                                    string primaryAggregationInstance = (string)primaryAggregationValue;
                                    metricValueSetInstance.PrimaryAggregation = primaryAggregationInstance;
                                }
                                
                                JToken timeGrainValue = valueValue["TimeGrain"];
                                if (timeGrainValue != null)
                                {
                                    TimeSpan timeGrainInstance = TimeSpan.Parse((string)timeGrainValue, CultureInfo.InvariantCulture);
                                    metricValueSetInstance.TimeGrain = timeGrainInstance;
                                }
                                
                                JToken startTimeValue = valueValue["StartTime"];
                                if (startTimeValue != null)
                                {
                                    DateTime startTimeInstance = (DateTime)startTimeValue;
                                    metricValueSetInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken endTimeValue = valueValue["EndTime"];
                                if (endTimeValue != null)
                                {
                                    DateTime endTimeInstance = (DateTime)endTimeValue;
                                    metricValueSetInstance.EndTime = endTimeInstance;
                                }
                                
                                JArray metricValuesArray = (JArray)valueValue["MetricValues"];
                                if (metricValuesArray != null)
                                {
                                    foreach (JToken metricValuesValue in metricValuesArray)
                                    {
                                        MetricValue metricValueInstance = new MetricValue();
                                        metricValueSetInstance.MetricValues.Add(metricValueInstance);
                                        
                                        JToken timestampValue = metricValuesValue["Timestamp"];
                                        if (timestampValue != null)
                                        {
                                            DateTime timestampInstance = (DateTime)timestampValue;
                                            metricValueInstance.Timestamp = timestampInstance;
                                        }
                                        
                                        JToken averageValue = metricValuesValue["Average"];
                                        if (averageValue != null)
                                        {
                                            double averageInstance = (double)averageValue;
                                            metricValueInstance.Average = averageInstance;
                                        }
                                        
                                        JToken minimumValue = metricValuesValue["Minimum"];
                                        if (minimumValue != null)
                                        {
                                            double minimumInstance = (double)minimumValue;
                                            metricValueInstance.Minimum = minimumInstance;
                                        }
                                        
                                        JToken maximumValue = metricValuesValue["Maximum"];
                                        if (maximumValue != null)
                                        {
                                            double maximumInstance = (double)maximumValue;
                                            metricValueInstance.Maximum = maximumInstance;
                                        }
                                        
                                        JToken totalValue = metricValuesValue["Total"];
                                        if (totalValue != null)
                                        {
                                            double totalInstance = (double)totalValue;
                                            metricValueInstance.Total = totalInstance;
                                        }
                                        
                                        JToken annotationValue = metricValuesValue["Annotation"];
                                        if (annotationValue != null)
                                        {
                                            string annotationInstance = (string)annotationValue;
                                            metricValueInstance.Annotation = annotationInstance;
                                        }
                                        
                                        JToken countValue = metricValuesValue["Count"];
                                        if (countValue != null)
                                        {
                                            int countInstance = (int)countValue;
                                            metricValueInstance.Count = countInstance;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
