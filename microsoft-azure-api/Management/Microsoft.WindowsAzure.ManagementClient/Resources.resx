<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
   <copyright file="Resources.resx" company="Microsoft">
      Copyright 2012 Microsoft Corporation

      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    </copyright>
    <summary>
       Contains code resources for the assembly.
    </summary>

    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgStringTooLong" xml:space="preserve">
    <value>The argument {0} exceeds the maximum length of {1} characters.</value>
  </data>
  <data name="AtLeastOneThingMustBeSet" xml:space="preserve">
    <value>All of the parameters are null. At least one parameter must have a value.</value>
  </data>
  <data name="AzureRequestExceptionAdditionalInfo" xml:space="preserve">
    <value>\nAdditional Information:\n\tError Code: {0}\n\tError Message: {1}</value>
  </data>
  <data name="AzureRequestExceptionBaseMessage" xml:space="preserve">
    <value>The request against Uri {0} returned an error: {1} ({2})</value>
  </data>
  <data name="BothLabelAndDescriptionAreNull" xml:space="preserve">
    <value>At least one of the label or description must be set.</value>
  </data>
  <data name="BothLocationAndAffinityGroupAreNull" xml:space="preserve">
    <value>Location and AffinityGroup arguments are both empty. One must be set.</value>
  </data>
  <data name="BothLocationAndAffinityGroupAreSet" xml:space="preserve">
    <value>Location and AffinityGroup arguments are both set, only one may be set.</value>
  </data>
  <data name="CertificateNoPrivateKey" xml:space="preserve">
    <value>"Certificate must contain private key to upload."</value>
  </data>
  <data name="ConfigFileNotFound" xml:space="preserve">
    <value>The configuration file at path {0} was not found.</value>
  </data>
  <data name="ExtendedPropertyKeyInvalid" xml:space="preserve">
    <value>The extended property name {0} is invalid. It must contain only alphanumeric characters or the underscore, and must start with a letter.</value>
  </data>
  <data name="ExtendedPropertyKeyTooLong" xml:space="preserve">
    <value>The extended property name {0} is too long. It cannot be more than 64 characters.</value>
  </data>
  <data name="ExtendedPropertyValueTooLong" xml:space="preserve">
    <value>The extended property value {0} is too long. It cannot be more than 255 characters.</value>
  </data>
  <data name="StagingIsEmptyForVipSwap" xml:space="preserve">
    <value>Staging deployment is empty. Staging deployment must be filled to perform a Vip Swap.</value>
  </data>
  <data name="StorageAccountNameProblem" xml:space="preserve">
    <value>Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.</value>
  </data>
</root>