Issues fixed in 2.0.1 : 
	
	1. All: CloudStorageAccount.*Parse methods throw an exception for “UseDevelopmentStorage=true” string
	2. All: StorageErrorCodeStrings class is missing
	3. Blobs: ICloudBlob interface does not have GetSharedAccessSignature method

Issues fixed in 2.0.2 :

	1. All: CompletedSynchronously property returns inconsistent values on IAsyncResult objects returned by asynchronous methods and thus TaskFactory.FromAsync does not work properly
	2. Tables: Public DynamicTableEntity constructors use DateTime even though the Timestamp property is of type DateTimeOffset
	3. Tables: BeginSaveChangesWithRetries overload ignores the options argument

Issues fixed in 2.0.3 :

	1. All (RT): General metadata correctness test fails when using the RT library to develop windows store apps
	2. Queues: CloudQueueMessage.MaxNumberOfMessagesToPeek, CloudQueueMessage.MaxMessageSize and CloudQueueMessage.MaximumTimeToLive have disappeared from CloudQueueMessage
	3. Queues: CloudQueue.BeginCreateIfNotExists and CloudQueue.BeginDeleteIfExists methods expect valid options argument
	4. Tables: When one or more of the batches fails, but then succeeds on a retry, the "extra" TableResults of the failed transactions are also returned
	5. Tables: TableQuery.GenerateFilterConditionForLong does not append 'L' at the end of the value and thus values larger than Int32.MaxValue cannot be used when filtering
	6. Tables: TableEntity does not support serializing nullable values
	7. Tables: CloudTable.EndListTablesSegmented method does not work correctly

Issues fixed in 2.0.4 :

	1. All: Flush HttpWebRequest's request stream before calling BeginGetResponse
	2. All: Support Null Retry Policies
	3. Blobs: Continue ListContainers parsing if a container property is unknown 
	4. Queues (RT): DeleteMessageAsync(string messageId, string popReceipt) ignores the messageId and popReceipt
	5. Tables: Add a TableConstant to define minimum DateTime supported
	6. Tables: Correct count behavior with synchronous non segmented execution
	7. Tables: Allow String.Empty in TableQuery Filters

Issues fixed in 2.0.4.1 :

	1. All: Updated Odata dependency to latest and also changed nuspec to allow any version >= 5.2.0

Issues fixed in 2.0.5 :

	1. All: StorageException is now serializable. Also, other useful objects for debugging (StorageExtendedErrorInformation and RequestResult) are also serializable
	2. All: SharedAccessSignature helper now uses culture invariant characteristics to calculate SAS
	3. All: CloudStorageAccount can now parse connection strings with extra blank values
	4. All: OperationContext StartTime and EndTime are now populated during execution
	5. All: StorageCredentials.UpdateKey does not work on SAS/Anonymous credentials anymore
	6. All: Metadata headers are now sorted using en-US culture to prevent 403 errors in some cultures
	7. All: Fixed issue where in some cases a sync method call could result in a 0 ms timeout being set on HttpWebRequest.
	8. Blobs: Snapshot time embedded in blob Uri is parsed in the constructor
	9. Blobs: GetBlobReferenceFromServer works with blob Uri that contain a SAS token
	10. Blobs: BlobWriteStream now honors AccessCondition
	11. Blobs: BlobWriteStream prevents using StoreBlobContentMD5 on existing page blobs
	12. Blobs: ICloudBlob now has OpenRead method
	13. Blobs: Cloud*Blob.OpenRead now can be used with snapshots
	14. Blobs: AbortCopy does not throw an exception anymore when a copy is successfully aborted
	15. Queues: Ability to recreate CloudQueueMessage with Message Id and Pop Receipt
	16. Tables: Exceptions during TableBatchOperation now parse the entity index from the server response
	17. Tables: Floating-point number filter is now generated using invariant culture

Issues fixed in 2.0.5.1 :

	1. All: Make sure the response stream is drained to prevent socket exhaustion

Issues fixed in 2.0.6.0 :

	1. All: Default RetryPolicy filters updated to not retry 100-407, 409-499, 501, and 505
	2. All: Support for all flavors of SharedKey and SharedKeyLite message signing through AuthenticationScheme property on client classes.
	3. All: Unusable HttpWebRequestFactory and WebRequestExtensions are not public anymore
	4. All: TranslateFromExceptionMessage has been deprecated in Microsoft.WindowsAzure.Storage.dll and is now available only in Microsoft.WindowsAzure.Storage.WinMD
	5. All: StorageCredentials supports empty account keys.
	6. All: RequestResult deserialization does not fail when Content-MD5 is missing
	7. Blobs (RT): DownloadToStreamAsync and DownloadRangeToStreamAsync writes the entire data to the given stream before returning back to the caller.
	8. Blobs (RT): UploadFromStreamAsync commits the blob in a worker thread to unblock UI.
	9. Blobs: Blob stream now uses a GUID instead of a random number as block ID prefix to prevent collisions.
	10. Queues: Changed return type of CloudQueue.BeginSetMetadata(AsyncCallback, object) to ICancellableAsyncResult.
	11. Tables: Changed default message signing to SharedKey (except for Data Services).
	12. Tables: EntityProperty updated to set the IsNull value for properties correctly in the case when the user sets an EntityProperty value through its setter.
	13. Tables: EdmType for null values in EntityProperty is set correctly and does not default to string any more.

Issues fixed in 2.0.6.1 :

	1. Tables: Fix for Table Service layer to drain response stream

