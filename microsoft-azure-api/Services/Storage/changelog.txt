Issues fixed in 2.0.1 : 
	
	- All: CloudStorageAccount.*Parse methods throw an exception for "UseDevelopmentStorage=true" string.
	- All: StorageErrorCodeStrings class is missing.
	- Blobs: ICloudBlob interface does not have GetSharedAccessSignature method.

Issues fixed in 2.0.2 :

  - All: CompletedSynchronously property returns inconsistent values on IAsyncResult objects returned by asynchronous methods and thus TaskFactory.FromAsync does not work properly.
  - Tables: Public DynamicTableEntity constructors use DateTime even though the Timestamp property is of type DateTimeOffset.
  - Tables: BeginSaveChangesWithRetries overload ignores the options argument.

Issues fixed in 2.0.3 :

  - All (RT): General metadata correctness test fails when using the RT library to develop windows store apps.
  - Queues: CloudQueueMessage.MaxNumberOfMessagesToPeek, CloudQueueMessage.MaxMessageSize and CloudQueueMessage.MaximumTimeToLive have disappeared from CloudQueueMessage.
  - Queues: CloudQueue.BeginCreateIfNotExists and CloudQueue.BeginDeleteIfExists methods expect valid options argument.
  - Tables: When one or more of the batches fails, but then succeeds on a retry, the "extra" TableResults of the failed transactions are also returned.
  - Tables: TableQuery.GenerateFilterConditionForLong does not append 'L' at the end of the value and thus values larger than Int32.MaxValue cannot be used when filtering.
  - Tables: TableEntity does not support serializing nullable values.
  - Tables: CloudTable.EndListTablesSegmented method does not work correctly.

Issues fixed in 2.0.4 :

  - All: Flush HttpWebRequest's request stream before calling BeginGetResponse.
  - All: Support Null Retry Policies.
  - Blobs: Continue ListContainers parsing if a container property is unknown.
  - Queues (RT): DeleteMessageAsync(string messageId, string popReceipt) ignores the messageId and popReceipt.
  - Tables: Add a TableConstant to define minimum DateTime supported.
  - Tables: Correct count behavior with synchronous non segmented execution.
  - Tables: Allow String.Empty in TableQuery Filters.

Issues fixed in 2.0.4.1 :

  - All: Updated Odata dependency to latest and also changed nuspec to allow any version >= 5.2.0.

Issues fixed in 2.0.5 :

  - All: StorageException is serializable. Also, other useful objects for debugging (StorageExtendedErrorInformation and RequestResult) are also serializable.
  - All: SharedAccessSignature helper uses culture invariant characteristics to calculate SAS.
  - All: CloudStorageAccount can parse connection strings with extra blank values.
  - All: OperationContext StartTime and EndTime are populated during execution.
  - All: StorageCredentials.UpdateKey does not work on SAS/Anonymous credentials anymore.
  - All: Metadata headers are sorted using en-US culture to prevent 403 errors in some cultures.
  - All: Fixed issue where in some cases a sync method call could result in a 0 ms timeout being set on HttpWebRequest.
  - Blobs: Snapshot time embedded in blob Uri is parsed in the constructor.
  - Blobs: GetBlobReferenceFromServer works with blob Uri that contain a SAS token.
  - Blobs: BlobWriteStream honors AccessCondition.
  - Blobs: BlobWriteStream prevents using StoreBlobContentMD5 on existing page blobs.
  - Blobs: ICloudBlob has OpenRead method.
  - Blobs: Cloud*Blob.OpenRead can be used with snapshots.
  - Blobs: AbortCopy does not throw an exception anymore when a copy is successfully aborted.
  - Queues: Ability to recreate CloudQueueMessage with Message Id and Pop Receipt.
  - Tables: Exceptions during TableBatchOperation parse the entity index from the server response.
  - Tables: Floating-point number filter is generated using invariant culture.

Issues fixed in 2.0.5.1 :

  - All: Make sure the response stream is drained to prevent socket exhaustion.
	
Issues fixed in 2.0.6.0 :
	
  - All: Default RetryPolicy filters updated to not retry 100-407, 409-499, 501, and 505
  - All: Support for all flavors of SharedKey and SharedKeyLite message signing through AuthenticationScheme property on client classes.
  - All: Unusable HttpWebRequestFactory and WebRequestExtensions are not public anymore
  - All: TranslateFromExceptionMessage has been deprecated in Microsoft.WindowsAzure.Storage.dll and is now available only in Microsoft.WindowsAzure.Storage.WinMD
  - All: StorageCredentials supports empty account keys.
  - All: RequestResult deserialization does not fail when Content-MD5 is missing
  - Blobs (RT): DownloadToStreamAsync and DownloadRangeToStreamAsync writes the entire data to the given stream before returning back to the caller.
  - Blobs (RT): UploadFromStreamAsync commits the blob in a worker thread to unblock UI.
  - Blobs: Blob stream now uses a GUID instead of a random number as block ID prefix to prevent collisions.
  - Queues: Changed return type of CloudQueue.BeginSetMetadata(AsyncCallback, object) to ICancellableAsyncResult.
  - Tables: Changed default message signing to SharedKey (except for Data Services).
  - Tables: EntityProperty updated to set the IsNull value for properties correctly in the case when the user sets an EntityProperty value through its setter.
  - Tables: EdmType for null values in EntityProperty is set correctly and does not default to string any more.

Issues fixed in 2.0.6.1 :

	- Tables: Fix for Table Service layer to drain response stream

Changes in 2.1.0 :

  - All: Changed User-Agent header value to include .NET CLR and OS versions
  - All: Performance improvements across all services (major improvements detailed below).
  - All: Added logging functionality for all operations.
  - All: Added Task overloads for all asynchronous APIs.
  - All: Listing methods provide a third overload for that accepts just prefix.
  - All: Exposed header, query and generic constants as public to assist clients developing via the protocol layer.
  - All: Buffers that would end up in Large Object Heap are avoided as much as possible.
  - All: OperationContext.ClientRequestID is automatically set for each operation with a new GUID if the user does not provide one.
  - All: StorageCredentials exposes a new UpdateSASToken method to allow users to update their SAS Token in place.
  - All: StorageCredentials exposes a new UpdateKey overload that only requires key value.
  - All: StorageCredentials exposes a new ExportBase64EncodedKey method that returns the key in Base64 encoding.
  - All: .NET MD5 implementation is used by default, FISMA (Native) MD5 can be enabled by setting CloudStorageAccount.UseV1MD5 to false explicitly.
  - All: Mark the assembly to allow partially trusted callers.
  - All: Added EndpointSuffix to CloudStorageAccount.
  - All: Delays between request are pre-empted when user cancels the operation.
  - All: Fix to measure End-to-end timeouts more accurately.
  - All: Types that contain disposable objects implement IDisposable.
  - All: Synchronous APIs correctly timeout if network IO is pending.
  - All: When a request times out, the StorageException object that was thrown will contain a TimeoutException as InnerException.
  - All: Synchronous requests do not retry errors anymore that occur before sending the request.
  - All: Wait handles used for asynchronous requests are unregistered properly for better GC.
  - All: CloudStorageAccount.ToString can recreate the original connection string that was passed in to CloudStorageAccount.Parse.
  - All: Expose IBufferManager on ServiceClients enabling users to provide a buffer pooling implementation.
  - All: Abort a pending request if upload times out to prevent socket exhaustion
  - All: Fixed a potential overflow in ExponentialRetry.
  - All: Queue and Table SAS validation should not check for signed resource(sr). Tables should check the table name(tn).
  - Blobs: ICloudBlob exposes new BeginOpenRead/EndOpenRead methods to asynchronously open a stream to read from the blob.
  - Blobs: Cloud[Block|Page]Blob.OpenRead performs a service request.
  - Blobs: Streams opened with OpenRead methods do not discard the cache anymore if seeked to a position within the cached range.
  - Blobs: Streams opened with OpenRead methods provide true synchronous Read API.
  - Blobs: Streams opened with OpenRead methods do not allow calling multiple BeginRead methods because the result is undefined.
  - Blobs: ICloudBlob.StreamMinimumReadSizeInBytes can be set to any value larger than or equal to 16KB.
  - Blobs: OpenWrite methods return CloudBlobStream instead of Stream. The CloudBlobStream type provides explicit commit and asynchronous flush functionality.
  - Blobs: Parallel upload performance of streams opened with OpenWrite methods is improved considerably due to keeping number of active operations at a certain level.
  - Blobs: ICloudBlob exposes new UploadFromStream overloads that accept a length parameter, allowing users to upload a portion of the stream.
  - Blobs: CloudBlockBlob.UploadFromStream correctly updates the locally cached MD5.
  - Blobs: CloudBlockBlob exposes new UploadFromFile, UploadFromByteArray, and UploadText methods.
  - Blobs: CloudPageBlob exposes new UploadFromFile and UploadFromByteArray methods.
  - Blobs: CloudBlockBlob exposes new DownloadToFile, DownloadToByteArray, DownloadRangeToByteArray, and DownloadText methods.
  - Blobs: CloudPageBlob exposes new DownloadToFile, DownloadToByteArray, and DownloadRangeToByteArray methods.
  - Blobs: Added support for page blob sequence numbers.
  - Blobs: Added support for public access to container creation.
  - Blobs: Cloud[Block|Page]Blob.Exists also updates properties.
  - Blobs: Cloud[Block|Page]Blob.StartCopyFromBlob verifies the source URI to prevent a possible NullReferenceException.
  - Blobs: ICloudBlob exposes new IsSnapshot and SnapshotQualifiedUri properties for easier handling of blob snapshots.
  - Blobs: Blob downloads skip length validation if Content-Length header is not set.
  - Blobs: BlobProperties constructor that takes another BlobProperties object correctly copies all properties.
  - Blobs: Traversing to the parent container from a CloudBlobDirectory does not create a new CloudBlobContainer object.
  - Blobs (RT): IRandomAccessStreamWithContentType returned by ICloudBlob.OpenReadAsync correctly implements CloneStream and Seek.
  - Blobs (RT): OpenWriteAsync methods return ICloudBlobStream instead of IOutputStream. ICloudBlobStream type provides explicit commit functionality.
  - Blobs (RT): ICloudBlobStream.FlushAsync no longer blocks.
  - Queues: MaxResults argument in queue listing APIs is nullable.
  - Queues: CloudQueue.EndBeginClear is deprecated.
  - Queues: All queue APIs are correctly marked with DoesServiceRequest attribute.
  - Queues: New CloudQueue.BeginDeleteMessage overloads with less arguments.
  - Queues (RT): visibilityTimeout argument of CloudQueue.UpdateMessage is not nullable.
  - Queues (RT): CloudQueueClient.ListQueuesSegmentedAsync takes a new argument of type QueueRequestOptions.
  - Tables: Table Service Layer supports queries with LINQ.
  - Tables: TableEntity derived classes now support compiled serializers to improve serialization performance.
  - Tables: Table allows query execution with a resolver against non-generic query types (dynamic entity types).
  - Tables: Added IgnorePropertyAttribute for TableEntities to allow individual properties on POCO objects to be ignored during serialization.
  - Tables: If-Match condition for Delete/Replace/Merge operations will not be set if entity ETag is null.
  - Tables: Executing a batch operation with no operations will throw an InvalidOperationException instead of an ArgumentOutOfRangeException.
  - Tables: To support IQueryable projections the TableQuery class Generic type is no longer constrained with where T: ITableEntity, new(). For TableQueries not created with via the IQueryable these same effective constraints are validated at runtime.
  - Tables: Performance improvement to reduce Activator.CreateInstance usage for entity instantiation.
  - Tables: Exposed PropertyAsObject Property in EntityProperty as publicly readable.
  - Tables: Exposed table serialialization logic. Allow users to persist and read back entities that don't derive from TableEntity using static methods(ReadUserObject and WriteUserObject).
  - Tables: Exposed CreateEntityPropertyFromObject in EntityProperty so users can pass in a value and get the corresponding EntityProperty.
  - Tables: Escape single quote in PartitionKey and RowKey correctly while generating URIs.

Issues fixed in 2.1.0.2 :

  - Blobs: Streams opened by OpenRead do not throw NotSupportedException when Flush is called.
  - Tables: Generic ExecuteQuery methods on CloudTable execute IQueryable queries correctly by generating the filter string.

Issues fixed in 2.1.0.3 :

  - All: Registered wait handles are unregistered sooner for more efficient GC.
