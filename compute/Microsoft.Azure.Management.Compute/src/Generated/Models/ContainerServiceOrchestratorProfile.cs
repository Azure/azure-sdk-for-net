// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Profile for the container service orchestrator.
    /// </summary>
    public partial class ContainerServiceOrchestratorProfile
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ContainerServiceOrchestratorProfile class.
        /// </summary>
        public ContainerServiceOrchestratorProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ContainerServiceOrchestratorProfile class.
        /// </summary>
        /// <param name="orchestratorType">The orchestrator to use to manage
        /// container service cluster resources. Valid values are Swarm, DCOS,
        /// and Custom. Possible values include: 'Swarm', 'DCOS', 'Custom',
        /// 'Kubernetes'</param>
        public ContainerServiceOrchestratorProfile(ContainerServiceOrchestratorTypes orchestratorType)
        {
            OrchestratorType = orchestratorType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the orchestrator to use to manage container service
        /// cluster resources. Valid values are Swarm, DCOS, and Custom.
        /// Possible values include: 'Swarm', 'DCOS', 'Custom', 'Kubernetes'
        /// </summary>
        [JsonProperty(PropertyName = "orchestratorType")]
        public ContainerServiceOrchestratorTypes OrchestratorType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
